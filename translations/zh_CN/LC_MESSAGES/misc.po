# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# 
# Translators:
# pylemon <leeway1985@gmail.com>, 2013
msgid ""
msgstr ""
"Project-Id-Version: djangodoc-zh_CN\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-04-02 21:26\n"
"PO-Revision-Date: 2013-05-12 09:21+0000\n"
"Last-Translator: pylemon <leeway1985@gmail.com>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

# 4c22221f1b5644548bd36181d25bf7e8
#: ../../misc/api-stability.txt:3
msgid "API stability"
msgstr "API 稳定性"

# 4cbbb010c4b849338b1bcd9acabd8e4c
#: ../../misc/api-stability.txt:5
msgid ""
":doc:`The release of Django 1.0 </releases/1.0>` comes with a promise of API"
" stability and forwards-compatibility. In a nutshell, this means that code "
"you develop against a 1.X version of Django will continue to work with "
"future 1.X releases. You may need to make minor changes when upgrading the "
"version of Django your project uses: see the \"Backwards incompatible "
"changes\" section of the :doc:`release note </releases/index>` for the "
"version or versions to which you are upgrading."
msgstr ""

# bb43c91d7f5446cab323b53188e58563
#: ../../misc/api-stability.txt:14
msgid "What \"stable\" means"
msgstr "\"稳定\" 意味着什么"

# 45b6979b166e402881da25a0f8d335d3
#: ../../misc/api-stability.txt:16
msgid "In this context, stable means:"
msgstr "在这里, 稳定意味着:"

# 2e040ca04ae34d16884aaf238c832e4a
#: ../../misc/api-stability.txt:18
msgid ""
"All the public APIs (everything in this documentation) will not be moved or "
"renamed without providing backwards-compatible aliases."
msgstr ""

# 4b8afc463e644195b4c020709ac24c4d
#: ../../misc/api-stability.txt:21
msgid ""
"If new features are added to these APIs -- which is quite possible -- they "
"will not break or change the meaning of existing methods. In other words, "
"\"stable\" does not (necessarily) mean \"complete.\""
msgstr ""

# 7892160ce7594c63af64271d7c6925f4
#: ../../misc/api-stability.txt:25
msgid ""
"If, for some reason, an API declared stable must be removed or replaced, it "
"will be declared deprecated but will remain in the API for at least two "
"minor version releases. Warnings will be issued when the deprecated method "
"is called."
msgstr ""

# 7dbd354d05664892a7ce64384e464fd9
#: ../../misc/api-stability.txt:30
msgid ""
"See :ref:`official-releases` for more details on how Django's version "
"numbering scheme works, and how features will be deprecated."
msgstr ""

# 66f02088514145ef9819c91e33709812
#: ../../misc/api-stability.txt:33
msgid ""
"We'll only break backwards compatibility of these APIs if a bug or security "
"hole makes it completely unavoidable."
msgstr ""

# 7f87ef68198b4130929868d03169f6d8
#: ../../misc/api-stability.txt:37
msgid "Stable APIs"
msgstr ""

# 23b5e087f65543a58571f4f0cda1e30f
#: ../../misc/api-stability.txt:39
msgid ""
"In general, everything covered in the documentation -- with the exception of"
" anything in the :doc:`internals area </internals/index>` is considered "
"stable."
msgstr ""

# 354fbd36a6f34f26928b4429683606c8
#: ../../misc/api-stability.txt:43
msgid "Exceptions"
msgstr ""

# 3f63a6a136b84da9955218536c80b9a6
#: ../../misc/api-stability.txt:45
msgid ""
"There are a few exceptions to this stability and backwards-compatibility "
"promise."
msgstr ""

# 426f37aab8b74eeb8ed5c6a414c13b46
#: ../../misc/api-stability.txt:49
msgid "Security fixes"
msgstr ""

# a874921b08ca4cb082a813a1e7b469d1
#: ../../misc/api-stability.txt:51
msgid ""
"If we become aware of a security problem -- hopefully by someone following "
"our :ref:`security reporting policy <reporting-security-issues>` -- we'll do"
" everything necessary to fix it. This might mean breaking backwards "
"compatibility; security trumps the compatibility guarantee."
msgstr ""

# f856ac8c66b24ed69a14f12f0e1a688b
#: ../../misc/api-stability.txt:57
msgid "APIs marked as internal"
msgstr ""

# ce391c5307c246aeb589197e929763a6
#: ../../misc/api-stability.txt:59
msgid "Certain APIs are explicitly marked as \"internal\" in a couple of ways:"
msgstr ""

# 4417b2f3dfe4461c99fd68a9210410fb
#: ../../misc/api-stability.txt:61
msgid ""
"Some documentation refers to internals and mentions them as such. If the "
"documentation says that something is internal, we reserve the right to "
"change it."
msgstr ""

# 4e8b3b5dfbb848ef8e007463b93a9a0d
#: ../../misc/api-stability.txt:65
msgid ""
"Functions, methods, and other objects prefixed by a leading underscore "
"(``_``). This is the standard Python way of indicating that something is "
"private; if any method starts with a single ``_``, it's an internal API."
msgstr ""

# 9cd2a068925b4452aa671ceee841c33e
#: ../../misc/api-stability.txt:72
msgid "Local flavors"
msgstr ""

# 4697cbe28f1f43448835a475f3745376
#: ../../misc/api-stability.txt:74
msgid ""
":mod:`django.contrib.localflavor` contains assorted pieces of code that are "
"useful for particular countries or cultures. This data is local in nature, "
"and is subject to change on timelines that will almost never correlate with "
"Django's own release schedules. For example, a common change is to split a "
"province into two new provinces, or to rename an existing province."
msgstr ""

# b5bbd65d1f8d46eb8e5820c26614c496
#: ../../misc/api-stability.txt:81
msgid ""
"These changes present two competing compatibility issues. Moving forward, "
"displaying the names of deprecated, renamed and dissolved provinces in a "
"selection widget is bad from a user interface perspective. However, "
"maintaining full backwards compatibility requires that we support historical"
" values that may be stored in a database -- including values that may no "
"longer be valid."
msgstr ""

# 82363dcf537f4645814e18b8d5f8ec37
#: ../../misc/api-stability.txt:88
msgid ""
"Therefore, Django has the following policy with respect to changes in local "
"flavor:"
msgstr ""

# bceba82435064018a1724625269daae4
#: ../../misc/api-stability.txt:91
msgid ""
"At the time of a Django release, the data and algorithms contained in "
":mod:`django.contrib.localflavor` will, to the best of our ability, reflect "
"the officially gazetted policies of the appropriate local government "
"authority. If a province has been added, altered, or removed, that change "
"will be reflected in Django's localflavor."
msgstr ""

# 9cbdd95d7f674800b53f9082d1ba7580
#: ../../misc/api-stability.txt:98
msgid ""
"These changes will *not* be backported to the previous stable release. "
"Upgrading a minor version of Django should not require any data migration or"
" audits for UI changes; therefore, if you want to get the latest province "
"list, you will either need to upgrade your Django install, or backport the "
"province list you need."
msgstr ""

# 87c510e79d394eea8ee73a3d705853cf
#: ../../misc/api-stability.txt:105
msgid ""
"For one release, the affected localflavor module will raise a "
"``RuntimeWarning`` when it is imported."
msgstr ""

# 25fd0da566384c619fa3a31dc51f96a8
#: ../../misc/api-stability.txt:108
msgid ""
"The change will be announced in the release notes as a backwards "
"incompatible change requiring attention. The change will also be annotated "
"in the documentation for the localflavor module."
msgstr ""

# 86e7817defaa4b149107ec95a818c423
#: ../../misc/api-stability.txt:112
msgid ""
"Where necessary and feasible, a migration script will be provided to aid the"
" migration process."
msgstr ""

# 7903f17242bb4e37b17324b696f0b799
#: ../../misc/api-stability.txt:115
msgid ""
"For example, Django 1.2 contains an Indonesian localflavor. It has a "
"province list that includes \"Nanggroe Aceh Darussalam (NAD)\" as a "
"province. The Indonesian government has changed the official name of the "
"province to \"Aceh (ACE)\". As a result, Django 1.3 does *not* contain "
"\"Nanggroe Aceh Darussalam (NAD)\" in the province list, but *does* contain "
"\"Aceh (ACE)\"."
msgstr ""

# 2479e7663a2d4a659edf104d36178630
#: ../../misc/design-philosophies.txt:3
msgid "Design philosophies"
msgstr ""

# ecb471b765124d2380b0098c9a9180a7
#: ../../misc/design-philosophies.txt:5
msgid ""
"This document explains some of the fundamental philosophies Django's "
"developers have used in creating the framework. Its goal is to explain the "
"past and guide the future."
msgstr ""

# 38fd857cfd1648d3bf2363f954d14270
#: ../../misc/design-philosophies.txt:10
msgid "Overall"
msgstr ""

# 1752bdbbf8d6489d88c80962d7135187
# dfb25a193faf4bd1aa48d89786f163f9
# b7d9fa13b2294666923d1154b0bf9835
#: ../../misc/design-philosophies.txt:15
#: ../../misc/design-philosophies.txt:155
#: ../../misc/design-philosophies.txt:300
msgid "Loose coupling"
msgstr ""

# 1f26dc77eb1f43cc942041dff8ab9973
#: ../../misc/design-philosophies.txt:19
msgid ""
"A fundamental goal of Django's stack is `loose coupling and tight "
"cohesion`_. The various layers of the framework shouldn't \"know\" about "
"each other unless absolutely necessary."
msgstr ""

# 3a9006c414e7455c90d3a21f430a11b3
#: ../../misc/design-philosophies.txt:23
msgid ""
"For example, the template system knows nothing about Web requests, the "
"database layer knows nothing about data display and the view system doesn't "
"care which template system a programmer uses."
msgstr ""

# 3ab38991d5c249ed9ee8cb5459b303c5
#: ../../misc/design-philosophies.txt:27
msgid ""
"Although Django comes with a full stack for convenience, the pieces of the "
"stack are independent of another wherever possible."
msgstr ""

# 765811e7358e496e8918188002dd9cac
#: ../../misc/design-philosophies.txt:35
msgid "Less code"
msgstr ""

# de6e731b22c84014a5495a977c6c472b
#: ../../misc/design-philosophies.txt:37
msgid ""
"Django apps should use as little code as possible; they should lack "
"boilerplate. Django should take full advantage of Python's dynamic "
"capabilities, such as introspection."
msgstr ""

# 298644db427845058437350f2ae455ae
#: ../../misc/design-philosophies.txt:44
msgid "Quick development"
msgstr ""

# 916702283c1b4542bd5435bd09174ab4
#: ../../misc/design-philosophies.txt:46
msgid ""
"The point of a Web framework in the 21st century is to make the tedious "
"aspects of Web development fast. Django should allow for incredibly quick "
"Web development."
msgstr ""

# e75142dabfd24e0c97449df887e2c545
#: ../../misc/design-philosophies.txt:53
msgid "Don't repeat yourself (DRY)"
msgstr ""

# d0514770fab44a00a2177a24d45048f3
#: ../../misc/design-philosophies.txt:59
msgid ""
"Every distinct concept and/or piece of data should live in one, and only "
"one, place. Redundancy is bad. Normalization is good."
msgstr ""

# 2f5ce6a2cbeb4ce786696caae440449c
#: ../../misc/design-philosophies.txt:62
msgid ""
"The framework, within reason, should deduce as much as possible from as "
"little as possible."
msgstr ""

# 4361b5fc27de4619a5aa92be45550f6f
#: ../../misc/design-philosophies.txt:67
msgid "The `discussion of DRY on the Portland Pattern Repository`__"
msgstr ""

# 054890eab85e40668cb0636d922ae4d3
# dc7b638cc1dd4bc095a03fe9aa3b281f
#: ../../misc/design-philosophies.txt:74 ../../misc/design-philosophies.txt:95
msgid "Explicit is better than implicit"
msgstr ""

# 8347cee24c8047c88d2452d96c2975e8
#: ../../misc/design-philosophies.txt:76
msgid ""
"This is a core Python principle listed in :pep:`20`, and it means Django "
"shouldn't do too much \"magic.\" Magic shouldn't happen unless there's a "
"really good reason for it. Magic is worth using only if it creates a huge "
"convenience unattainable in other ways, and it isn't implemented in a way "
"that confuses developers who are trying to learn how to use the feature."
msgstr ""

# 8cb3fef230804288bf886b54332d65c0
#: ../../misc/design-philosophies.txt:85
msgid "Consistency"
msgstr ""

# 7a7cecfe0b2649ed93f9657285695c42
#: ../../misc/design-philosophies.txt:87
msgid ""
"The framework should be consistent at all levels. Consistency applies to "
"everything from low-level (the Python coding style used) to high-level (the "
"\"experience\" of using Django)."
msgstr ""

# 0e1e63fa58d34bd2bf2f265bf50af1a7
#: ../../misc/design-philosophies.txt:92
msgid "Models"
msgstr ""

# e04b1752817b453b81e8c47b2d0cb84c
#: ../../misc/design-philosophies.txt:97
msgid ""
"Fields shouldn't assume certain behaviors based solely on the name of the "
"field. This requires too much knowledge of the system and is prone to "
"errors. Instead, behaviors should be based on keyword arguments and, in some"
" cases, on the type of the field."
msgstr ""

# a9efb75142b54ca5aad84bb6d11bb72c
#: ../../misc/design-philosophies.txt:103
msgid "Include all relevant domain logic"
msgstr ""

# 20c2830b49d54ce3bb8512d9b1c938e2
#: ../../misc/design-philosophies.txt:105
msgid ""
"Models should encapsulate every aspect of an \"object,\" following Martin "
"Fowler's `Active Record`_ design pattern."
msgstr ""

# ca2f75bf305d4c27a15206cd3cdaf56e
#: ../../misc/design-philosophies.txt:108
msgid ""
"This is why both the data represented by a model and information about it "
"(its human-readable name, options like default ordering, etc.) are defined "
"in the model class; all the information needed to understand a given model "
"should be stored *in* the model."
msgstr ""

# 6ac1ee1ba0c64e838140407c0761c512
#: ../../misc/design-philosophies.txt:116
msgid "Database API"
msgstr ""

# 7b2b8b9a8fad49cab90eab0bb0ff7055
#: ../../misc/design-philosophies.txt:118
msgid "The core goals of the database API are:"
msgstr ""

# ac1476ef1d544fefa63f5312a9caf363
#: ../../misc/design-philosophies.txt:121
msgid "SQL efficiency"
msgstr ""

# cb768af1445546b3ab35eef9e09e5969
#: ../../misc/design-philosophies.txt:123
msgid ""
"It should execute SQL statements as few times as possible, and it should "
"optimize statements internally."
msgstr ""

# 0902e09a71e448b1a3c50f5f5df84574
#: ../../misc/design-philosophies.txt:126
msgid ""
"This is why developers need to call ``save()`` explicitly, rather than the "
"framework saving things behind the scenes silently."
msgstr ""

# 3726c5a7f13e4853a09bd004d02074b4
#: ../../misc/design-philosophies.txt:129
msgid ""
"This is also why the ``select_related()`` ``QuerySet`` method exists. It's "
"an optional performance booster for the common case of selecting \"every "
"related object.\""
msgstr ""

# 778cb9caf52b4a86b5e29058d60e8f5c
#: ../../misc/design-philosophies.txt:134
msgid "Terse, powerful syntax"
msgstr ""

# b340aeec01f444aa826eb2b01810d49b
#: ../../misc/design-philosophies.txt:136
msgid ""
"The database API should allow rich, expressive statements in as little "
"syntax as possible. It should not rely on importing other modules or helper "
"objects."
msgstr ""

# ca933cbcefdf4105aa71c062f1459c0e
#: ../../misc/design-philosophies.txt:139
msgid ""
"Joins should be performed automatically, behind the scenes, when necessary."
msgstr ""

# 346dc9199d7a4ef49bbff048e2cf29f8
#: ../../misc/design-philosophies.txt:141
msgid ""
"Every object should be able to access every related object, systemwide. This"
" access should work both ways."
msgstr ""

# 885b7784cfba40c9b7e39c20bbda6f8e
#: ../../misc/design-philosophies.txt:145
msgid "Option to drop into raw SQL easily, when needed"
msgstr ""

# 8146993b7be84b06b201dbf7fa9a0bf5
#: ../../misc/design-philosophies.txt:147
msgid ""
"The database API should realize it's a shortcut but not necessarily an end-"
"all-be-all. The framework should make it easy to write custom SQL -- entire "
"statements, or just custom ``WHERE`` clauses as custom parameters to API "
"calls."
msgstr ""

# 105cd57ae5234eb88666a1282fd8bf51
#: ../../misc/design-philosophies.txt:152
msgid "URL design"
msgstr ""

# b2ae930ba7de4c19b00f9c74fdbfddbd
#: ../../misc/design-philosophies.txt:157
msgid ""
"URLs in a Django app should not be coupled to the underlying Python code. "
"Tying URLs to Python function names is a Bad And Ugly Thing."
msgstr ""

# e213640f862a4292a92f32c4aed74553
#: ../../misc/design-philosophies.txt:160
msgid ""
"Along these lines, the Django URL system should allow URLs for the same app "
"to be different in different contexts. For example, one site may put stories"
" at ``/stories/``, while another may use ``/news/``."
msgstr ""

# 6d6d1353183346599f6fa13c81d0af80
#: ../../misc/design-philosophies.txt:165
msgid "Infinite flexibility"
msgstr ""

# 69d03f0b7a144cf086148e6fa2670273
#: ../../misc/design-philosophies.txt:167
msgid ""
"URLs should be as flexible as possible. Any conceivable URL design should be"
" allowed."
msgstr ""

# d832b5ab301c4d948b36896852ed8dc3
#: ../../misc/design-philosophies.txt:171
msgid "Encourage best practices"
msgstr ""

# b0f441ff5cdc4aa2be2dacdaa8f67029
#: ../../misc/design-philosophies.txt:173
msgid ""
"The framework should make it just as easy (or even easier) for a developer "
"to design pretty URLs than ugly ones."
msgstr ""

# 25e582e5038f42e7a08d489cbd6ed66e
#: ../../misc/design-philosophies.txt:176
msgid "File extensions in Web-page URLs should be avoided."
msgstr ""

# 3f5d9f7d4707440ebeb9d22f29a4cf5a
#: ../../misc/design-philosophies.txt:178
msgid "Vignette-style commas in URLs deserve severe punishment."
msgstr ""

# c838add13cbb4c00853f2b6cdb474bc7
#: ../../misc/design-philosophies.txt:183
msgid "Definitive URLs"
msgstr ""

# 0d9193a117f141c0815ce72dfd873f18
#: ../../misc/design-philosophies.txt:187
msgid ""
"Technically, ``foo.com/bar`` and ``foo.com/bar/`` are two different URLs, "
"and search-engine robots (and some Web traffic-analyzing tools) would treat "
"them as separate pages. Django should make an effort to \"normalize\" URLs "
"so that search-engine robots don't get confused."
msgstr ""

# 211591d2087b4e60901158d02344fb84
#: ../../misc/design-philosophies.txt:192
msgid "This is the reasoning behind the :setting:`APPEND_SLASH` setting."
msgstr ""

# 30a28114a75e4d8cb9ddc24ee56139ec
#: ../../misc/design-philosophies.txt:195
msgid "Template system"
msgstr ""

# 6edaaa3a7fa4477682777e419ccceb2f
#: ../../misc/design-philosophies.txt:200
msgid "Separate logic from presentation"
msgstr ""

# 4296cf45b8d24d938df60250e553e054
#: ../../misc/design-philosophies.txt:202
msgid ""
"We see a template system as a tool that controls presentation and "
"presentation-related logic -- and that's it. The template system shouldn't "
"support functionality that goes beyond this basic goal."
msgstr ""

# 52319ae7553843dcae93a0f180cdae8b
#: ../../misc/design-philosophies.txt:207
msgid "Discourage redundancy"
msgstr ""

# 1243609a00284b2eaa3f3280a16fd169
#: ../../misc/design-philosophies.txt:209
msgid ""
"The majority of dynamic Web sites use some sort of common sitewide design --"
" a common header, footer, navigation bar, etc. The Django template system "
"should make it easy to store those elements in a single place, eliminating "
"duplicate code."
msgstr ""

# c82dbfc7bd9648deb311ef4bf7e7d0cd
#: ../../misc/design-philosophies.txt:214
msgid ""
"This is the philosophy behind :ref:`template inheritance <template-"
"inheritance>`."
msgstr ""

# b2c5ea2ee46842c388b932b438dc83da
#: ../../misc/design-philosophies.txt:218
msgid "Be decoupled from HTML"
msgstr ""

# 847912a7fd9f45be9000b41c8d2ccdaf
#: ../../misc/design-philosophies.txt:220
msgid ""
"The template system shouldn't be designed so that it only outputs HTML. It "
"should be equally good at generating other text-based formats, or just plain"
" text."
msgstr ""

# 40369b7bc6184be389e3d9913864bcd0
#: ../../misc/design-philosophies.txt:225
msgid "XML should not be used for template languages"
msgstr ""

# b6e1e97dd9804534b57128251035320e
#: ../../misc/design-philosophies.txt:229
msgid ""
"Using an XML engine to parse templates introduces a whole new world of human"
" error in editing templates -- and incurs an unacceptable level of overhead "
"in template processing."
msgstr ""

# 50efd0bc2c214170bcecf7fb1f545b79
#: ../../misc/design-philosophies.txt:234
msgid "Assume designer competence"
msgstr ""

# b2e6abd171234f86a5be0f099eb71889
#: ../../misc/design-philosophies.txt:236
msgid ""
"The template system shouldn't be designed so that templates necessarily are "
"displayed nicely in WYSIWYG editors such as Dreamweaver. That is too severe "
"of a limitation and wouldn't allow the syntax to be as nice as it is. Django"
" expects template authors are comfortable editing HTML directly."
msgstr ""

# 86512091df40427e9406f9bc56ef0ddf
#: ../../misc/design-philosophies.txt:242
msgid "Treat whitespace obviously"
msgstr ""

# d5dc18f81ead425dac1ddb4afb4947d1
#: ../../misc/design-philosophies.txt:244
msgid ""
"The template system shouldn't do magic things with whitespace. If a template"
" includes whitespace, the system should treat the whitespace as it treats "
"text -- just display it. Any whitespace that's not in a template tag should "
"be displayed."
msgstr ""

# 9db2fcc241f347358b8a498ad5787ad6
#: ../../misc/design-philosophies.txt:250
msgid "Don't invent a programming language"
msgstr ""

# 3316d9215f0c492586dc2404679cab49
#: ../../misc/design-philosophies.txt:252
msgid "The template system intentionally doesn't allow the following:"
msgstr ""

# a3d14f80368946c58de7b37236531f72
#: ../../misc/design-philosophies.txt:254
msgid "Assignment to variables"
msgstr ""

# c100b974376e48febf154b4f96f520c4
#: ../../misc/design-philosophies.txt:255
msgid "Advanced logic"
msgstr ""

# 2460f95df28247358867a0b1efe20c45
#: ../../misc/design-philosophies.txt:257
msgid ""
"The goal is not to invent a programming language. The goal is to offer just "
"enough programming-esque functionality, such as branching and looping, that "
"is essential for making presentation-related decisions."
msgstr ""

# 5350731d9e644102b94f77bd55dc1e2d
#: ../../misc/design-philosophies.txt:261
msgid ""
"The Django template system recognizes that templates are most often written "
"by *designers*, not *programmers*, and therefore should not assume Python "
"knowledge."
msgstr ""

# b8c3dc398ac941d4b37d323480a78db1
#: ../../misc/design-philosophies.txt:266
msgid "Safety and security"
msgstr ""

# b54e405d83b14422ae9a6914145807c5
#: ../../misc/design-philosophies.txt:268
msgid ""
"The template system, out of the box, should forbid the inclusion of "
"malicious code -- such as commands that delete database records."
msgstr ""

# 1acbd37c5d37427facdb8a5cd1030128
#: ../../misc/design-philosophies.txt:271
msgid ""
"This is another reason the template system doesn't allow arbitrary Python "
"code."
msgstr ""

# da19e44097a54727a8abe32081132478
#: ../../misc/design-philosophies.txt:274
msgid "Extensibility"
msgstr ""

# 86b5e65f36c3457994f47d7061f9facc
#: ../../misc/design-philosophies.txt:276
msgid ""
"The template system should recognize that advanced template authors may want"
" to extend its technology."
msgstr ""

# 7f4cf7dd8280455f857de5c4e6163a3e
#: ../../misc/design-philosophies.txt:279
msgid "This is the philosophy behind custom template tags and filters."
msgstr ""

# 0bdd35776ca84340af5fffa30133c36a
#: ../../misc/design-philosophies.txt:282
msgid "Views"
msgstr ""

# 2e957c4bab0b4a36bba56a225966422c
#: ../../misc/design-philosophies.txt:285
msgid "Simplicity"
msgstr ""

# ef94f4b642e5423697ce3f7ea78cc2fa
#: ../../misc/design-philosophies.txt:287
msgid ""
"Writing a view should be as simple as writing a Python function. Developers "
"shouldn't have to instantiate a class when a function will do."
msgstr ""

# aa9d665c572b4ca4bdb5116f30369ea1
#: ../../misc/design-philosophies.txt:291
msgid "Use request objects"
msgstr ""

# b8e725d9e988466dacd595c659ba1282
#: ../../misc/design-philosophies.txt:293
msgid ""
"Views should have access to a request object -- an object that stores "
"metadata about the current request. The object should be passed directly to "
"a view function, rather than the view function having to access the request "
"data from a global variable. This makes it light, clean and easy to test "
"views by passing in \"fake\" request objects."
msgstr ""

# 947c19785d9249f898f3c6adf93d8733
#: ../../misc/design-philosophies.txt:302
msgid ""
"A view shouldn't care about which template system the developer uses -- or "
"even whether a template system is used at all."
msgstr ""

# 49c55c25d5804fda8bf9c0ec535041b1
#: ../../misc/design-philosophies.txt:306
msgid "Differentiate between GET and POST"
msgstr ""

# dac44ff1c49942659540eb6f4ca4fde0
#: ../../misc/design-philosophies.txt:308
msgid ""
"GET and POST are distinct; developers should explicitly use one or the "
"other. The framework should make it easy to distinguish between GET and POST"
" data."
msgstr ""

# da0a246e97e3436e85d4f82014a83402
#: ../../misc/distributions.txt:3
msgid "Third-party distributions of Django"
msgstr ""

# f82348ca58c245858a0d23dbc247fefa
#: ../../misc/distributions.txt:5
msgid ""
"Many third-party distributors are now providing versions of Django "
"integrated with their package-management systems. These can make "
"installation and upgrading much easier for users of Django since the "
"integration includes the ability to automatically install dependencies (like"
" database adapters) that Django requires."
msgstr ""

# ef725ea28bdb4704a15440771a1e031e
#: ../../misc/distributions.txt:11
msgid ""
"Typically, these packages are based on the latest stable release of Django, "
"so if you want to use the development version of Django you'll need to "
"follow the instructions for :ref:`installing the development version "
"<installing-development-version>` from our Git repository."
msgstr ""

# 5c15c18605c94fe1bf1491a8fc34ee88
#: ../../misc/distributions.txt:16
msgid ""
"If you're using Linux or a Unix installation, such as OpenSolaris, check "
"with your distributor to see if they already package Django. If you're using"
" a Linux distro and don't know how to find out if a package is available, "
"then now is a good time to learn.  The Django Wiki contains a list of `Third"
" Party Distributions`_ to help you out."
msgstr ""

# 578eb6920de845f29cfc51c9b8c5198e
#: ../../misc/distributions.txt:26
msgid "For distributors"
msgstr ""

# 8cd105649da3485e8ec41f62cf384ee7
#: ../../misc/distributions.txt:28
msgid ""
"If you'd like to package Django for distribution, we'd be happy to help out!"
" Please join the `django-developers mailing list`_ and introduce yourself."
msgstr ""

# 960907014a9f4612a78744c8c3d6698f
#: ../../misc/distributions.txt:31
msgid ""
"We also encourage all distributors to subscribe to the `django-announce "
"mailing list`_, which is a (very) low-traffic list for announcing new "
"releases of Django and important bugfixes."
msgstr ""

# 8912f00510004e5abe2ada2b30bb2ca5
#: ../../misc/index.txt:2
msgid "Meta-documentation and miscellany"
msgstr ""

# 5812aff4332f46eea5afb3475a789c0a
#: ../../misc/index.txt:4
msgid ""
"Documentation that we can't find a more organized place for. Like that "
"drawer in your kitchen with the scissors, batteries, duct tape, and other "
"junk."
msgstr ""
