# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# 
# Translators:
# pylemon <leeway1985@gmail.com>, 2013
msgid ""
msgstr ""
"Project-Id-Version: djangodoc-zh_CN\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-04-02 21:26\n"
"PO-Revision-Date: 2013-05-14 16:11+0000\n"
"Last-Translator: sunsong <sunsongxp@gmail.com>\n"
"Language-Team: Chinese (China) (http://www.transifex.com/projects/p/djangodoc-zh_cn/language/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

# 129216ca2c7a4d0f80f134820e4b5332
#: ../../intro/contributing.txt:3
msgid "Writing your first patch for Django"
msgstr "编写你的第一个 Django 补丁"

# fddd00bd439547a4a72d22be46364be7
#: ../../intro/contributing.txt:6
msgid "Introduction"
msgstr "简介"

# 88867114ec3e4b53996b05de45e0ca06
#: ../../intro/contributing.txt:8
msgid ""
"Interested in giving back to the community a little? Maybe you've found a "
"bug in Django that you'd like to see fixed, or maybe there's a small feature"
" you want added."
msgstr "对回报社区感兴趣? 也许你已经在 Django 中发现了一个希望被修复bug, 或许有一些你想加入的小功能."

# 6940ca444c454b068daacf77378efd09
#: ../../intro/contributing.txt:12
msgid ""
"Contributing back to Django itself is the best way to see your own concerns "
"addressed. This may seem daunting at first, but it's really pretty simple. "
"We'll walk you through the entire process, so you can learn by example."
msgstr ""

# eeedb8313b3f4cbe98c8fe68863a6e16
#: ../../intro/contributing.txt:17
msgid "Who's this tutorial for?"
msgstr ""

# dd3b56dbecce4d81a6efcb9caa5d59ca
#: ../../intro/contributing.txt:19
msgid ""
"For this tutorial, we expect that you have at least a basic understanding of"
" how Django works. This means you should be comfortable going through the "
"existing tutorials on :doc:`writing your first Django "
"app</intro/tutorial01>`. In addition, you should have a good understanding "
"of Python itself. But if you don't, `Dive Into Python`__ is a fantastic (and"
" free) online book for beginning Python programmers."
msgstr ""

# 6d4e0ef4d99a4585a7be06d080986073
#: ../../intro/contributing.txt:26
msgid ""
"Those of you who are unfamiliar with version control systems and Trac will "
"find that this tutorial and its links include just enough information to get"
" started. However, you'll probably want to read some more about these "
"different tools if you plan on contributing to Django regularly."
msgstr ""

# 3d570a5d156547669ba3741005a64b11
#: ../../intro/contributing.txt:31
msgid ""
"For the most part though, this tutorial tries to explain as much as "
"possible, so that it can be of use to the widest audience."
msgstr ""

# 5df8827c3ab64c6887406dcbc40766e0
#: ../../intro/contributing.txt:36
msgid ""
"If you're having trouble going through this tutorial, please post a message "
"to `django-developers`__ or drop by `#django-dev on irc.freenode.net`__ to "
"chat with other Django users who might be able to help."
msgstr ""

# a4e7c029011843238ba82f464a099a47
#: ../../intro/contributing.txt:45
msgid "What does this tutorial cover?"
msgstr ""

# 9335ffd3e28140de87eed99920b0be64
#: ../../intro/contributing.txt:47
msgid ""
"We'll be walking you through contributing a patch to Django for the first "
"time. By the end of this tutorial, you should have a basic understanding of "
"both the tools and the processes involved. Specifically, we'll be covering "
"the following:"
msgstr ""

# 0a5a6960502e4622ba6659e9d08255f8
#: ../../intro/contributing.txt:51
msgid "Installing Git."
msgstr ""

# 26a13d7d9ae24d019cea6e408c45040a
#: ../../intro/contributing.txt:52
msgid "How to download a development copy of Django."
msgstr ""

# 0d54677c3ccf44c38346091e6ff2c0c2
#: ../../intro/contributing.txt:53
msgid "Running Django's test suite."
msgstr ""

# 8cb9a9673c7e40a68ec15363d07d63ee
#: ../../intro/contributing.txt:54
msgid "Writing a test for your patch."
msgstr ""

# 44deb6be327d4877b2dc20d31df88847
#: ../../intro/contributing.txt:55
msgid "Writing the code for your patch."
msgstr ""

# 036727bd04ad486fb5885c45d660b263
#: ../../intro/contributing.txt:56
msgid "Testing your patch."
msgstr ""

# 2e77dca05055422b9dedcbc4c2716aaa
#: ../../intro/contributing.txt:57
msgid "Generating a patch file for your changes."
msgstr ""

# 2e4cbc20a710439a996e5ad0e63a4bf6
#: ../../intro/contributing.txt:58
msgid "Where to look for more information."
msgstr ""

# dedc4c33b7b14082bfc807785429f79d
#: ../../intro/contributing.txt:60
msgid ""
"Once you're done with the tutorial, you can look through the rest of "
":doc:`Django's documentation on "
"contributing</internals/contributing/index>`. It contains lots of great "
"information and is a must read for anyone who'd like to become a regular "
"contributor to Django. If you've got questions, it's probably got the "
"answers."
msgstr ""

# 83410c34b94f4fffb0ae2562c1bb0cdb
#: ../../intro/contributing.txt:67
msgid "Installing Git"
msgstr ""

# 48d9e6e9f46f406e93f37cc92da9b068
#: ../../intro/contributing.txt:69
msgid ""
"For this tutorial, you'll need Git installed to download the current "
"development version of Django and to generate patch files for the changes "
"you make."
msgstr ""

# 6f2bee7066494b13bad3b0604cdc2271
#: ../../intro/contributing.txt:73
msgid ""
"To check whether or not you have Git installed, enter ``git`` into the "
"command line. If you get messages saying that this command could be found, "
"you'll have to download and install it, see `Git's download page`__."
msgstr ""

# 34020d2de25f46509754d85c9fada81b
#: ../../intro/contributing.txt:77
msgid ""
"If you're not that familiar with Git, you can always find out more about its"
" commands (once it's installed) by typing ``git help`` into the command "
"line."
msgstr ""

# 6ba75c3b30be4293883608bdb7c91451
#: ../../intro/contributing.txt:83
msgid "Getting a copy of Django's development version"
msgstr ""

# 78618af3a0d5464995492dd312499831
#: ../../intro/contributing.txt:85
msgid ""
"The first step to contributing to Django is to get a copy of the source "
"code. From the command line, use the ``cd`` command to navigate to the "
"directory where you'll want your local copy of Django to live."
msgstr ""

# 919503746c3946218fc2cb5f2263fcd6
#: ../../intro/contributing.txt:89
msgid ""
"Download the Django source code repository using the following command::"
msgstr ""

# b31d61992008445c8cb293a4c74ad056
#: ../../intro/contributing.txt:95
msgid "For users who wish to use `virtualenv`__, you can use::"
msgstr ""

# d872c1092eee41d982147340fa548f0c
#: ../../intro/contributing.txt:99
msgid ""
"(where ``django`` is the directory of your clone that contains ``setup.py``)"
" to link your cloned checkout into a virtual environment. This is a great "
"option to isolate your development copy of Django from the rest of your "
"system and avoids potential package conflicts."
msgstr ""

# 71478d1d0cd84c119814e029b63fff47
#: ../../intro/contributing.txt:107
msgid "Rolling back to a previous revision of Django"
msgstr ""

# efe7e35f721e411a987012670b4acd36
#: ../../intro/contributing.txt:109
msgid ""
"For this tutorial, we'll be using `ticket #17549`__ as a case study, so "
"we'll rewind Django's version history in git to before that ticket's patch "
"was applied. This will allow us to go through all of the steps involved in "
"writing that patch from scratch, including running Django's test suite."
msgstr ""

# efcfdcc5dd9b447194e9b9ab78df2179
#: ../../intro/contributing.txt:114
msgid ""
"**Keep in mind that while we'll be using an older revision of Django's trunk"
" for the purposes of the tutorial below, you should always use the current "
"development revision of Django when working on your own patch for a "
"ticket!**"
msgstr ""

# f089a57a81444127a881be550f65259a
#: ../../intro/contributing.txt:120
msgid ""
"The patch for this ticket was written by Ulrich Petri, and it was applied to"
" Django as `commit ac2052ebc84c45709ab5f0f25e685bf656ce79bc`__. "
"Consequently, we'll be using the revision of Django just prior to that, "
"`commit 39f5bc7fc3a4bb43ed8a1358b17fe0521a1a63ac`__."
msgstr ""

# bf220cb4bef84cf2b5ecc2281da6f7aa
#: ../../intro/contributing.txt:129
msgid ""
"Navigate into Django's root directory (that's the one that contains "
"``django``, ``docs``, ``tests``, ``AUTHORS``, etc.). You can then check out "
"the older revision of Django that we'll be using in the tutorial below::"
msgstr ""

# 374722d61f024b429e75bb210ce8b210
#: ../../intro/contributing.txt:136
msgid "Running Django's test suite for the first time"
msgstr ""

# 3587f296ab3c4b50842cdb8a2e33bb8d
#: ../../intro/contributing.txt:138
msgid ""
"When contributing to Django it's very important that your code changes don't"
" introduce bugs into other areas of Django.  One way to check that Django "
"still works after you make your changes is by running Django's test suite. "
"If all the tests still pass, then you can be reasonably sure that your "
"changes haven't completely broken Django. If you've never run Django's test "
"suite before, it's a good idea to run it once beforehand just to get "
"familiar with what its output is supposed to look like."
msgstr ""

# 7cc5852517054f15b1189d3123a73a57
#: ../../intro/contributing.txt:146
msgid ""
"We can run the test suite by simply ``cd``-ing into the Django ``tests/`` "
"directory and, if you're using GNU/Linux, Mac OS X or some other flavor of "
"Unix, run::"
msgstr ""

# 92be98d9e94c43a898567d4c2b213c51
#: ../../intro/contributing.txt:152
msgid ""
"If you're on Windows, the above should work provided that you are using "
"\"Git Bash\" provided by the default Git install. GitHub has a `nice "
"tutorial`__."
msgstr ""

# 1d5d11bc75394608abecce77ec28efb9
#: ../../intro/contributing.txt:159
msgid ""
"If you're using ``virtualenv``, you can omit ``PYTHONPATH=..`` when running "
"the tests. This instructs Python to look for Django in the parent directory "
"of ``tests``. ``virtualenv`` puts your copy of Django on the ``PYTHONPATH`` "
"automatically."
msgstr ""

# 7fe5b7f53cc5472d9e7cfbb8801374e3
#: ../../intro/contributing.txt:164
msgid ""
"Now sit back and relax. Django's entire test suite has over 4800 different "
"tests, so it can take anywhere from 5 to 15 minutes to run, depending on the"
" speed of your computer."
msgstr ""

# e9abbfa0d5fb4e658f428896b8e81270
#: ../../intro/contributing.txt:168
msgid ""
"While Django's test suite is running, you'll see a stream of characters "
"representing the status of each test as it's run. ``E`` indicates that an "
"error was raised during a test, and ``F`` indicates that a test's assertions"
" failed. Both of these are considered to be test failures. Meanwhile, ``x`` "
"and ``s`` indicated expected failures and skipped tests, respectively. Dots "
"indicate passing tests."
msgstr ""

# 822b4695332548c7bfcbfd39dc125d6b
#: ../../intro/contributing.txt:175
msgid ""
"Skipped tests are typically due to missing external libraries required to "
"run the test; see :ref:`running-unit-tests-dependencies` for a list of "
"dependencies and be sure to install any for tests related to the changes you"
" are making (we won't need any for this tutorial)."
msgstr ""

# baf4f4d46a1740e8a47d59eff7e71e13
#: ../../intro/contributing.txt:180
msgid ""
"Once the tests complete, you should be greeted with a message informing you "
"whether the test suite passed or failed. Since you haven't yet made any "
"changes to Django's code, the entire test suite **should** pass. If you get "
"failures or errors make sure you've followed all of the previous steps "
"properly. See :ref:`running-unit-tests` for more information."
msgstr ""

# ea894bd3705f4d7a996342e63ebf05dd
#: ../../intro/contributing.txt:186
msgid ""
"Note that the latest Django trunk may not always be stable. When developing "
"against trunk, you can check `Django's continuous integration builds`__ to "
"determine if the failures are specific to your machine or if they are also "
"present in Django's official builds. If you click to view a particular "
"build, you can view the \"Configuration Matrix\" which shows failures broken"
" down by Python version and database backend."
msgstr ""

# 70291292bdc04466bdfde9c57f6eed83
#: ../../intro/contributing.txt:197
msgid ""
"For this tutorial and the ticket we're working on, testing against SQLite is"
" sufficient, however, it's possible (and sometimes necessary) to :ref:`run "
"the tests using a different database <running-unit-tests-settings>`."
msgstr ""

# 916b551505584a67b804d6dc72bdf35c
#: ../../intro/contributing.txt:203
msgid "Writing some tests for your ticket"
msgstr ""

# f7059b433ad141c78f6d33581d4fd09a
#: ../../intro/contributing.txt:205
msgid ""
"In most cases, for a patch to be accepted into Django it has to include "
"tests. For bug fix patches, this means writing a regression test to ensure "
"that the bug is never reintroduced into Django later on. A regression test "
"should be written in such a way that it will fail while the bug still exists"
" and pass once the bug has been fixed. For patches containing new features, "
"you'll need to include tests which ensure that the new features are working "
"correctly. They too should fail when the new feature is not present, and "
"then pass once it has been implemented."
msgstr ""

# b089e3a234524d8b890e8349c7eb21bb
#: ../../intro/contributing.txt:214
msgid ""
"A good way to do this is to write your new tests first, before making any "
"changes to the code. This style of development is called `test-driven "
"development`__ and can be applied to both entire projects and single "
"patches. After writing your tests, you then run them to make sure that they "
"do indeed fail (since you haven't fixed that bug or added that feature yet)."
" If your new tests don't fail, you'll need to fix them so that they do. "
"After all, a regression test that passes regardless of whether a bug is "
"present is not very helpful at preventing that bug from reoccurring down the"
" road."
msgstr ""

# 3e07f4d7fccc4e0ebe626d96d47a764e
#: ../../intro/contributing.txt:223
msgid "Now for our hands-on example."
msgstr ""

# 2250f879753640488b51b157ab29fde5
#: ../../intro/contributing.txt:228
msgid "Writing some tests for ticket #17549"
msgstr ""

# 9223903927d442a4a1f17a1bb8133154
#: ../../intro/contributing.txt:230
msgid "`Ticket #17549`__ describes the following, small feature addition:"
msgstr ""

# eb324436d9554d25b7692bdff456a22b
#: ../../intro/contributing.txt:232
msgid ""
"It's useful for URLField to give you a way to open the URL; otherwise you "
"might as well use a CharField."
msgstr ""

# 18936b35d60549daba151826ab878448
#: ../../intro/contributing.txt:235
msgid ""
"In order to resolve this ticket, we'll add a ``render`` method to the "
"``AdminURLFieldWidget`` in order to display a clickable link above the input"
" widget. Before we make those changes though, we're going to write a couple "
"tests to verify that our modification functions correctly and continues to "
"function correctly in the future."
msgstr ""

# 59f580b5e0f04e35990803fd2fe946e9
#: ../../intro/contributing.txt:241
msgid ""
"Navigate to Django's ``tests/regressiontests/admin_widgets/`` folder and "
"open the ``tests.py`` file. Add the following code on line 269 right before "
"the ``AdminFileWidgetTest`` class::"
msgstr ""

# b4c467ab1deb4ad78cfb02b44694c46b
#: ../../intro/contributing.txt:275
msgid ""
"The new tests check to see that the ``render`` method we'll be adding works "
"correctly in a couple different situations."
msgstr ""

# 7531cee0bde043d6bf89e4d120ab13f2
#: ../../intro/contributing.txt:280
msgid ""
"If you've never had to deal with tests before, they can look a little hard "
"to write at first glance. Fortunately, testing is a *very* big subject in "
"computer programming, so there's lots of information out there:"
msgstr ""

# 035f379f72fc461891effcdef4506544
#: ../../intro/contributing.txt:284
msgid ""
"A good first look at writing tests for Django can be found in the "
"documentation on :doc:`Testing Django applications "
"</topics/testing/overview>`."
msgstr ""

# d72c1c89e1934068961dcd0454dd1155
#: ../../intro/contributing.txt:286
msgid ""
"Dive Into Python (a free online book for beginning Python developers) "
"includes a great `introduction to Unit Testing`__."
msgstr ""

# e16990a396024330ba8426fe0bd80ce6
#: ../../intro/contributing.txt:288
msgid ""
"After reading those, if you want something a little meatier to sink your "
"teeth into, there's always the `Python unittest documentation`__."
msgstr ""

# 21fb5a5cfc1d4eb6b641745c43c47829
#: ../../intro/contributing.txt:296
msgid "Running your new test"
msgstr ""

# 58d0cad260454d25b7787483ffad2c4c
#: ../../intro/contributing.txt:298
msgid ""
"Remember that we haven't actually made any modifications to "
"``AdminURLFieldWidget`` yet, so our tests are going to fail. Let's run all "
"the tests in the ``model_forms_regress`` folder to make sure that's really "
"what happens. From the command line, ``cd`` into the Django ``tests/`` "
"directory and run::"
msgstr ""

# c305822155e3487c8c9133dc0037e0a1
#: ../../intro/contributing.txt:306
msgid ""
"If the tests ran correctly, you should see three failures corresponding to "
"each of the test methods we added. If all of the tests passed, then you'll "
"want to make sure that you added the new test shown above to the appropriate"
" folder and class."
msgstr ""

# 65d9cc7e40ba498aa5726df716483f57
#: ../../intro/contributing.txt:312
msgid "Writing the code for your ticket"
msgstr ""

# afee15560a144bc8bc617224a124dce8
#: ../../intro/contributing.txt:314
msgid ""
"Next we'll be adding the functionality described in `ticket #17549`__ to "
"Django."
msgstr ""

# b4419dd790cb4772bd2f0edcc53ea394
#: ../../intro/contributing.txt:317
msgid "Writing the code for ticket #17549"
msgstr ""

# b8dcdd7e178943d6ad0891d942cfdc97
#: ../../intro/contributing.txt:319
msgid ""
"Navigate to the ``django/django/contrib/admin/`` folder and open the "
"``widgets.py`` file. Find the ``AdminURLFieldWidget`` class on line 302 and "
"add the following ``render`` method after the existing ``__init__`` method::"
msgstr ""

# f8b127359d1d4436b7783ac74744bfca
#: ../../intro/contributing.txt:336
msgid "Verifying your test now passes"
msgstr ""

# 06af204ae5e54d158db4edf83fe9f17f
#: ../../intro/contributing.txt:338
msgid ""
"Once you're done modifying Django, we need to make sure that the tests we "
"wrote earlier pass, so we can see whether the code we wrote above is working"
" correctly. To run the tests in the ``admin_widgets`` folder, ``cd`` into "
"the Django ``tests/`` directory and run::"
msgstr ""

# f7a85a07732541f09ada16870447e720
#: ../../intro/contributing.txt:345
msgid ""
"Oops, good thing we wrote those tests! You should still see 3 failures with "
"the following exception::"
msgstr ""

# c5fc9d86614b44d8a2c522d34192c8e1
#: ../../intro/contributing.txt:350
msgid ""
"We forgot to add the import for that method.  Go ahead and add the "
"``smart_urlquote`` import at the end of line 13 of "
"``django/contrib/admin/widgets.py`` so it looks as follows::"
msgstr ""

# 550ab594b2664f63b26a20dc2cdca6db
#: ../../intro/contributing.txt:356
msgid ""
"Re-run the tests and everything should pass. If it doesn't, make sure you "
"correctly modified the ``AdminURLFieldWidget`` class as shown above and "
"copied the new tests correctly."
msgstr ""

# 2c6741de109b4998919c8839e801b733
#: ../../intro/contributing.txt:363
msgid "Running Django's test suite for the second time"
msgstr ""

# ed70c4fe74ae4d3a987fb474a2875c8f
#: ../../intro/contributing.txt:365
msgid ""
"Once you've verified that your patch and your test are working correctly, "
"it's a good idea to run the entire Django test suite just to verify that "
"your change hasn't introduced any bugs into other areas of Django. While "
"successfully passing the entire test suite doesn't guarantee your code is "
"bug free, it does help identify many bugs and regressions that might "
"otherwise go unnoticed."
msgstr ""

# 529ec6d5fdbc48b892319d68fbe5e150
#: ../../intro/contributing.txt:371
msgid ""
"To run the entire Django test suite, ``cd`` into the Django ``tests/`` "
"directory and run::"
msgstr ""

# 1063e1005ffc45368be4ca179d8158cb
#: ../../intro/contributing.txt:376
msgid ""
"As long as you don't see any failures, you're good to go. Note that this fix"
" also made a `small CSS change`__ to format the new widget. You can make the"
" change if you'd like, but we'll skip it for now in the interest of brevity."
msgstr ""

# a22cf786e3e943d28f8a042d30fc9430
#: ../../intro/contributing.txt:383
msgid "Writing Documentation"
msgstr ""

# 1024ea84f30e4a1e95d21fba86de7185
#: ../../intro/contributing.txt:385
msgid ""
"This is a new feature, so it should be documented.  Add the following on "
"line 925 of ``django/docs/ref/models/fields.txt`` beneath the existing docs "
"for ``URLField``::"
msgstr ""

# 67c4b0cbb3324cd2b8dc0d9ab25e2625
#: ../../intro/contributing.txt:394
msgid ""
"For more information on writing documentation, including an explanation of "
"what the ``versionadded`` bit is all about, see "
":doc:`/internals/contributing/writing-documentation`. That page also "
"includes an explanation of how to build a copy of the documentation locally,"
" so you can preview the HTML that will be generated."
msgstr ""

# deca3ca349ab42e49e8f529e68b643c2
#: ../../intro/contributing.txt:401
msgid "Generating a patch for your changes"
msgstr ""

# 7bc77357ead64733b0ddfc42eaf31a3a
#: ../../intro/contributing.txt:403
msgid ""
"Now it's time to generate a patch file that can be uploaded to Trac or "
"applied to another copy of Django. To get a look at the content of your "
"patch, run the following command::"
msgstr ""

# 452baaef0ec44c67955ad26d2d469c1c
#: ../../intro/contributing.txt:409
msgid ""
"This will display the differences between your current copy of Django (with "
"your changes) and the revision that you initially checked out earlier in the"
" tutorial."
msgstr ""

# cb7decbcf3424ebe95f36cf30e5387cd
#: ../../intro/contributing.txt:413
msgid ""
"Once you're done looking at the patch, hit the ``q`` key to exit back to the"
" command line.  If the patch's content looked okay, you can run the "
"following command to save the patch file to your current working directory::"
msgstr ""

# 7a7c1a7ebc9e41ba9fb9bb64c9c118f8
#: ../../intro/contributing.txt:419
msgid ""
"You should now have a file in the root Django directory called "
"``17549.diff``. This patch file contains all your changes and should look "
"this:"
msgstr ""

# da30ee34c70b4cd7b6b667c4acf50e56
#: ../../intro/contributing.txt:513
msgid "So what do I do next?"
msgstr ""

# 701346e1fe39459ea70a532dbc4c5172
#: ../../intro/contributing.txt:515
msgid ""
"Congratulations, you've generated your very first Django patch! Now that "
"you've got that under your belt, you can put those skills to good use by "
"helping to improve Django's codebase. Generating patches and attaching them "
"to Trac tickets is useful, however, since we are using git - adopting a more"
" :doc:`git oriented workflow </internals/contributing/writing-code/working-"
"with-git>` is recommended."
msgstr ""

# a1b2986d1d4043fc922d2fe4d00fa008
#: ../../intro/contributing.txt:522
msgid ""
"Since we never committed our changes locally, perform the following to get "
"your git branch back to a good starting point::"
msgstr ""

# 6296a53b0745421ab5fbe831a072c9f3
#: ../../intro/contributing.txt:529
msgid "More information for new contributors"
msgstr ""

# 0cf7fe054be04d97bf8f20db6d00b717
#: ../../intro/contributing.txt:531
msgid ""
"Before you get too into writing patches for Django, there's a little more "
"information on contributing that you should probably take a look at:"
msgstr ""

# 61d374ad9ac84c47b566b60f22c5f68a
#: ../../intro/contributing.txt:534
msgid ""
"You should make sure to read Django's documentation on :doc:`claiming "
"tickets and submitting patches </internals/contributing/writing-code"
"/submitting-patches>`. It covers Trac etiquette, how to claim tickets for "
"yourself, expected coding style for patches, and many other important "
"details."
msgstr ""

# 7fd94a26fda84324bf8c99f225bea30d
#: ../../intro/contributing.txt:539
msgid ""
"First time contributors should also read Django's :doc:`documentation for "
"first time contributors</internals/contributing/new-contributors/>`. It has "
"lots of good advice for those of us who are new to helping out with Django."
msgstr ""

# 6b9e87d67a1b433fbad2f5599aa1bd7d
#: ../../intro/contributing.txt:543
msgid ""
"After those, if you're still hungry for more information about contributing,"
" you can always browse through the rest of :doc:`Django's documentation on "
"contributing</internals/contributing/index>`. It contains a ton of useful "
"information and should be your first source for answering any questions you "
"might have."
msgstr ""

# 01617c206f2c401780dbd47218ec8b87
#: ../../intro/contributing.txt:550
msgid "Finding your first real ticket"
msgstr ""

# 8c9ab1afc0234fc8bbaf6cc0c49f4c29
#: ../../intro/contributing.txt:552
msgid ""
"Once you've looked through some of that information, you'll be ready to go "
"out and find a ticket of your own to write a patch for. Pay special "
"attention to tickets with the \"easy pickings\" criterion. These tickets are"
" often much simpler in nature and are great for first time contributors.  "
"Once you're familiar with contributing to Django, you can move on to writing"
" patches for more difficult and complicated tickets."
msgstr ""

# 02dfdbe7532140f4b1153cd556d115bb
#: ../../intro/contributing.txt:559
msgid ""
"If you just want to get started already (and nobody would blame you!), try "
"taking a look at the list of `easy tickets that need patches`__ and the "
"`easy tickets that have patches which need improvement`__. If you're "
"familiar with writing tests, you can also look at the list of `easy tickets "
"that need tests`__. Just remember to follow the guidelines about claiming "
"tickets that were mentioned in the link to Django's documentation on "
":doc:`claiming tickets and submitting patches </internals/contributing"
"/writing-code/submitting-patches>`."
msgstr ""

# 1ea91f5b83a14adebe46fc746a32076a
# d80e273c271842148ba1e79b4f33da3f
# 850abe108e5f4e468861833d5a0b255e
#: ../../intro/contributing.txt:573 ../../intro/tutorial05.txt:642
#: ../../intro/tutorial06.txt:117
msgid "What's next?"
msgstr ""

# 3ea678dbc34b4367833ed8665db9a45a
#: ../../intro/contributing.txt:575
msgid ""
"After a ticket has a patch, it needs to be reviewed by a second set of eyes."
" After uploading a patch or submitting a pull request, be sure to update the"
" ticket metadata by setting the flags on the ticket to say \"has patch\", "
"\"doesn't need tests\", etc, so others can find it for review. Contributing "
"doesn't necessarily always mean writing a patch from scratch. Reviewing "
"existing patches is also a very helpful contribution. See "
":doc:`/internals/contributing/triaging-tickets` for details."
msgstr ""

# b92907c0bc604cdcbb03b22aeaeb99de
#: ../../intro/index.txt:2
msgid "Getting started"
msgstr ""

# fb321123c2f54bd5b7646029a2613e16
#: ../../intro/index.txt:4
msgid ""
"New to Django? Or to Web development in general? Well, you came to the right"
" place: read this material to quickly get up and running."
msgstr ""

# 36bab0c6a5314e708ae561a4b8173186
#: ../../intro/index.txt:24
msgid ""
"If you're new to Python_, you might want to start by getting an idea of what"
" the language is like. Django is 100% Python, so if you've got minimal "
"comfort with Python you'll probably get a lot more out of Django."
msgstr ""

# 796cee1c756d4be2afa0032e5e697b83
#: ../../intro/index.txt:28
msgid ""
"If you're new to programming entirely, you might want to start with this "
"`list of Python resources for non-programmers`_"
msgstr ""

# b9b6f2de21ea464b8d0384cba32dade1
#: ../../intro/index.txt:31
msgid ""
"If you already know a few other languages and want to get up to speed with "
"Python quickly, we recommend `Dive Into Python`_ (also available in a `dead-"
"tree version`_). If that's not quite your style, there are quite a few other"
" `books about Python`_."
msgstr ""

# f56b97dea105471ea194686c35267233
#: ../../intro/install.txt:2
msgid "Quick install guide"
msgstr ""

# 052b0a704b4d4b9f9b67b86b9fad103f
#: ../../intro/install.txt:4
msgid ""
"Before you can use Django, you'll need to get it installed. We have a "
":doc:`complete installation guide </topics/install>` that covers all the "
"possibilities; this guide will guide you to a simple, minimal installation "
"that'll work while you walk through the introduction."
msgstr ""

# 9fb5156f7237454e998de3d5a6576a6a
#: ../../intro/install.txt:10
msgid "Install Python"
msgstr ""

# 5d405f435c4a4f9c83f26567c9e28d88
#: ../../intro/install.txt:12
msgid ""
"Being a Python Web framework, Django requires Python. It works with any "
"Python version from 2.6.5 to 2.7. It also features experimental support for "
"versions 3.2 and 3.3. All these versions of Python include a lightweight "
"database called SQLite_ so you won't need to set up a database just yet."
msgstr ""

# a046f971ac8c4bf5be479af8584282d2
#: ../../intro/install.txt:19
msgid ""
"Get Python at http://www.python.org. If you're running Linux or Mac OS X, "
"you probably already have it installed."
msgstr ""

# 32a1a906745949dd87a9c7e1bf07ac0c
#: ../../intro/install.txt:24
msgid ""
"If you use Jython_ (a Python implementation for the Java platform), you'll "
"need to follow a few additional steps. See :doc:`/howto/jython` for details."
msgstr ""

# 072b936cc00048fdb714505185fd2bec
#: ../../intro/install.txt:29
msgid ""
"You can verify that Python is installed by typing ``python`` from your "
"shell; you should see something like::"
msgstr ""

# 69a26d2564194e169fd685a76e8cdcc3
#: ../../intro/install.txt:38
msgid "Set up a database"
msgstr ""

# 14425f86268340529764ab891121d576
#: ../../intro/install.txt:40
msgid ""
"This step is only necessary if you'd like to work with a \"large\" database "
"engine like PostgreSQL, MySQL, or Oracle. To install such a database, "
"consult the :ref:`database installation information <database-"
"installation>`."
msgstr ""

# 8bd519811fe541ce8692c2a06df744f7
#: ../../intro/install.txt:45
msgid "Remove any old versions of Django"
msgstr ""

# b7707a3a1ece40eeb26ec4805a99b1b1
#: ../../intro/install.txt:47
msgid ""
"If you are upgrading your installation of Django from a previous version, "
"you will need to :ref:`uninstall the old Django version before installing "
"the new version <removing-old-versions-of-django>`."
msgstr ""

# 9ed1c9515e4449f4a81f58bfd3c290b4
#: ../../intro/install.txt:52
msgid "Install Django"
msgstr ""

# 9175808c97fe4b3b908ca11a671fb19d
#: ../../intro/install.txt:54
msgid "You've got three easy options to install Django:"
msgstr ""

# 13b6a5aec52c4290bba59171599b744d
#: ../../intro/install.txt:56
msgid ""
"Install a version of Django :doc:`provided by your operating system "
"distribution </misc/distributions>`. This is the quickest option for those "
"who have operating systems that distribute Django."
msgstr ""

# 9163a39910e545469d33b670a341f1ab
#: ../../intro/install.txt:60
msgid ""
":ref:`Install an official release <installing-official-release>`. This is "
"the best approach for users who want a stable version number and aren't "
"concerned about running a slightly older version of Django."
msgstr ""

# 22ffe6d65d4c42b48807923265739301
#: ../../intro/install.txt:64
msgid ""
":ref:`Install the latest development version <installing-development-"
"version>`. This is best for users who want the latest-and-greatest features "
"and aren't afraid of running brand-new code."
msgstr ""

# 33ad22327e7743eebb1bcbd0ae01cd26
#: ../../intro/install.txt:71
msgid ""
"If you do either of the first two steps, keep an eye out for parts of the "
"documentation marked **new in development version**. That phrase flags "
"features that are only available in development versions of Django, and they"
" likely won't work with an official release."
msgstr ""

# 57a0ac6312a94d08b4ea8d6bc2473161
#: ../../intro/install.txt:78
msgid "Verifying"
msgstr ""

# 8723da0139ee4b6592c66d1cfe84698e
#: ../../intro/install.txt:80
msgid ""
"To verify that Django can be seen by Python, type ``python`` from your "
"shell. Then at the Python prompt, try to import Django:"
msgstr ""

# bb5be4c05f6b4899a8fdb8bd0c193d09
#: ../../intro/install.txt:89
msgid "You may have another version of Django installed."
msgstr ""

# f339cffc7f574a58b0a515e79a5933d3
#: ../../intro/install.txt:92
msgid "That's it!"
msgstr ""

# 688e9ca36e73401f8d5f3030eea7e303
#: ../../intro/install.txt:94
msgid ""
"That's it -- you can now :doc:`move onto the tutorial </intro/tutorial01>`."
msgstr ""

# 9e94e34a198f42bc8bc15e5272b520ac
#: ../../intro/overview.txt:3
msgid "Django at a glance"
msgstr "Django 一瞥"

# 37d1d42199804efdb679ff4d3b0ed3a7
#: ../../intro/overview.txt:5
msgid ""
"Because Django was developed in a fast-paced newsroom environment, it was "
"designed to make common Web-development tasks fast and easy. Here's an "
"informal overview of how to write a database-driven Web app with Django."
msgstr "由于Django被开发应用于快节奏的新闻编辑环境，它生而就是为了使网站开发高效容易。下面的内容就是关于如何用Django写一个数据库驱动的网络应用之概览。"

# 13dcfef78f6246ed9868c91b88d94138
#: ../../intro/overview.txt:9
msgid ""
"The goal of this document is to give you enough technical specifics to "
"understand how Django works, but this isn't intended to be a tutorial or "
"reference -- but we've got both! When you're ready to start a project, you "
"can :doc:`start with the tutorial </intro/tutorial01>` or :doc:`dive right "
"into more detailed documentation </topics/index>`."
msgstr "本文档的目的是带给读者足够多的技术细节以了解Django的运作方式，但这并不算作一份单纯的教程或文献参考——不过实际上两者都是！在你准备好开始一个新项目的时候，你可以 :doc:`开始阅读入门教程 </intro/tutorial01>` 或 :doc:`直接深入地阅读文档 </topics/index>`"

# 838cd69786194b05a3352971b204add0
#: ../../intro/overview.txt:16
msgid "Design your model"
msgstr "设计数据模型"

# bd3a265b06c74bd9a5ab2e0930e08277
#: ../../intro/overview.txt:18
msgid ""
"Although you can use Django without a database, it comes with an object-"
"relational mapper in which you describe your database layout in Python code."
msgstr "你可以不用数据库来使用Django，不过它自带了一个对象关系映射器（ORM），以供用Python代码描述数据库布局之用"

# 03ee9ea7ea67417393fc66b9d7634dd1
#: ../../intro/overview.txt:22
msgid ""
"The :doc:`data-model syntax </topics/db/models>` offers many rich ways of "
"representing your models -- so far, it's been solving two years' worth of "
"database-schema problems. Here's a quick example, which might be saved in "
"the file ``mysite/news/models.py``::"
msgstr ":doc:`data-model syntax </topics/db/models>`提供了多种方法来表示你的数据模型 —— 到目前为止，它仍在致力于解决数据库架构问题。以下是一个简单例子，它可能会被保存在诸如``mysite/news/models.py``的地方："

# d1086db90595408e9e113c7878da24b1
#: ../../intro/overview.txt:43
msgid "Install it"
msgstr "将其安装"

# e26983e84c534aba8419b8d0238693a0
#: ../../intro/overview.txt:45
msgid ""
"Next, run the Django command-line utility to create the database tables "
"automatically:"
msgstr "然后，执行这条Django命令行工具使之自动创建数据库表"

# 23d17d7873b14a26912bfa5d0270da86
#: ../../intro/overview.txt:52
msgid ""
"The :djadmin:`syncdb` command looks at all your available models and creates"
" tables in your database for whichever tables don't already exist."
msgstr ":djadmin:`syncdb`命令会读取所有可用的模型并在数据库里生成所有未被创建的表。"

# 71ff0e1534ff4ad6a98c493376470d13
#: ../../intro/overview.txt:56
msgid "Enjoy the free API"
msgstr "享用自由免费的API"

# 7646410b007f44b98bf0b38a56681180
#: ../../intro/overview.txt:58
msgid ""
"With that, you've got a free, and rich, :doc:`Python API "
"</topics/db/queries>` to access your data. The API is created on the fly, no"
" code generation necessary:"
msgstr "有了它，你就有了自由免费，还很丰富的 :doc:`Python API </topics/db/queries>`来操作数据。这套API还是即时生成，无需代码生成器。"

# 12c4b76960fa468f882a3f3ce35b9281
#: ../../intro/overview.txt:133
msgid ""
"A dynamic admin interface: it's not just scaffolding -- it's the whole house"
msgstr "还有灵活的后台管理界面：它不仅仅只是套支架，它就是完整可用的"

# bff52f5c3dd5436d9a96bcd7d39f46b7
#: ../../intro/overview.txt:135
msgid ""
"Once your models are defined, Django can automatically create a "
"professional, production ready :doc:`administrative interface "
"</ref/contrib/admin/index>` -- a Web site that lets authenticated users add,"
" change and delete objects. It's as easy as registering your model in the "
"admin site::"
msgstr ""

# af03a26f3ee14298a17dbebba911d284
#: ../../intro/overview.txt:158
msgid ""
"The philosophy here is that your site is edited by a staff, or a client, or "
"maybe just you -- and you don't want to have to deal with creating backend "
"interfaces just to manage content."
msgstr ""

# 2ad87ead1eca4e6a8c3eb2c19eb8ad8f
#: ../../intro/overview.txt:162
msgid ""
"One typical workflow in creating Django apps is to create models and get the"
" admin sites up and running as fast as possible, so your staff (or clients) "
"can start populating data. Then, develop the way data is presented to the "
"public."
msgstr ""

# 7c7910812dc84751ac5a6e6291cd8dc1
#: ../../intro/overview.txt:167
msgid "Design your URLs"
msgstr ""

# 43f86696f0ba4f61ab2105305d414bb9
#: ../../intro/overview.txt:169
msgid ""
"A clean, elegant URL scheme is an important detail in a high-quality Web "
"application. Django encourages beautiful URL design and doesn't put any "
"cruft in URLs, like ``.php`` or ``.asp``."
msgstr ""

# 78bc933012a04f5a96739853a781759d
#: ../../intro/overview.txt:173
msgid ""
"To design URLs for an app, you create a Python module called a :doc:`URLconf"
" </topics/http/urls>`. A table of contents for your app, it contains a "
"simple mapping between URL patterns and Python callback functions. URLconfs "
"also serve to decouple URLs from Python code."
msgstr ""

# 34ede411c45f48f8842d31e47c57425f
#: ../../intro/overview.txt:178
msgid ""
"Here's what a URLconf might look like for the ``Reporter``/``Article`` "
"example above::"
msgstr ""

# 778c463637904091b3cfce8e3064d217
#: ../../intro/overview.txt:189
msgid ""
"The code above maps URLs, as simple regular expressions, to the location of "
"Python callback functions (\"views\"). The regular expressions use "
"parenthesis to \"capture\" values from the URLs. When a user requests a "
"page, Django runs through each pattern, in order, and stops at the first one"
" that matches the requested URL. (If none of them matches, Django calls a "
"special-case 404 view.) This is blazingly fast, because the regular "
"expressions are compiled at load time."
msgstr ""

# a1e5913d080946f48291545dbcd05ee6
#: ../../intro/overview.txt:197
msgid ""
"Once one of the regexes matches, Django imports and calls the given view, "
"which is a simple Python function. Each view gets passed a request object --"
" which contains request metadata -- and the values captured in the regex."
msgstr ""

# 2cdd2210490d4b47b0424b91ae4a80f4
#: ../../intro/overview.txt:201
msgid ""
"For example, if a user requested the URL \"/articles/2005/05/39323/\", "
"Django would call the function ``news.views.article_detail(request, '2005', "
"'05', '39323')``."
msgstr ""

# ebedad5ab237448cb49bcfc5d4cfae58
#: ../../intro/overview.txt:206
msgid "Write your views"
msgstr ""

# 720c0e3cb8714d7b868ff4b6df77f82f
#: ../../intro/overview.txt:208
msgid ""
"Each view is responsible for doing one of two things: Returning an "
":class:`~django.http.HttpResponse` object containing the content for the "
"requested page, or raising an exception such as "
":class:`~django.http.Http404`. The rest is up to you."
msgstr ""

# 6e4da53815b64a0aae62d9557bdbc2eb
#: ../../intro/overview.txt:213
msgid ""
"Generally, a view retrieves data according to the parameters, loads a "
"template and renders the template with the retrieved data. Here's an example"
" view for ``year_archive`` from above::"
msgstr ""

# e6e3d804965649a3aa6145db03645dc5
#: ../../intro/overview.txt:221
msgid ""
"This example uses Django's :doc:`template system </topics/templates>`, which"
" has several powerful features but strives to stay simple enough for non-"
"programmers to use."
msgstr ""

# 6ad57dbbca0b45069dc01f2bfe9e4e15
#: ../../intro/overview.txt:226
msgid "Design your templates"
msgstr ""

# 1c7d39c771bf4cd3aa649ed609080bd5
#: ../../intro/overview.txt:228
msgid "The code above loads the ``news/year_archive.html`` template."
msgstr ""

# 8fb6e3ca3eeb4e33a7d80da330e0a628
#: ../../intro/overview.txt:230
msgid ""
"Django has a template search path, which allows you to minimize redundancy "
"among templates. In your Django settings, you specify a list of directories "
"to check for templates. If a template doesn't exist in the first directory, "
"it checks the second, and so on."
msgstr ""

# 85d7327c44fc4a3a9fe02e8861d2e110
#: ../../intro/overview.txt:235
msgid ""
"Let's say the ``news/year_archive.html`` template was found. Here's what "
"that might look like:"
msgstr ""

# 97e945b18df64e7b989513fea9cdb639
#: ../../intro/overview.txt:254
msgid ""
"Variables are surrounded by double-curly braces. ``{{ article.headline }}`` "
"means \"Output the value of the article's headline attribute.\" But dots "
"aren't used only for attribute lookup: They also can do dictionary-key "
"lookup, index lookup and function calls."
msgstr ""

# a3e8fb8e9c9a4d73bac3419e1ef0c8a2
#: ../../intro/overview.txt:259
msgid ""
"Note ``{{ article.pub_date|date:\"F j, Y\" }}`` uses a Unix-style \"pipe\" "
"(the \"|\" character). This is called a template filter, and it's a way to "
"filter the value of a variable. In this case, the date filter formats a "
"Python datetime object in the given format (as found in PHP's date "
"function)."
msgstr ""

# 78d738d48fba48b29474f51b05938d91
#: ../../intro/overview.txt:264
msgid ""
"You can chain together as many filters as you'd like. You can write custom "
"filters. You can write custom template tags, which run custom Python code "
"behind the scenes."
msgstr ""

# c9cd984833344c61bfa957c7818894b3
#: ../../intro/overview.txt:268
msgid ""
"Finally, Django uses the concept of \"template inheritance\": That's what "
"the ``{% extends \"base.html\" %}`` does. It means \"First load the template"
" called 'base', which has defined a bunch of blocks, and fill the blocks "
"with the following blocks.\" In short, that lets you dramatically cut down "
"on redundancy in templates: each template has to define only what's unique "
"to that template."
msgstr ""

# 5557f83592ea427f923e8616e261e65d
#: ../../intro/overview.txt:274
msgid ""
"Here's what the \"base.html\" template, including the use of :doc:`static "
"files </howto/static-files/index>`, might look like:"
msgstr ""

# 871d74aa8be3438c88950366776d01fc
#: ../../intro/overview.txt:290
msgid ""
"Simplistically, it defines the look-and-feel of the site (with the site's "
"logo), and provides \"holes\" for child templates to fill. This makes a site"
" redesign as easy as changing a single file -- the base template."
msgstr ""

# eedccf3262c44d08bfe6023ea2d46562
#: ../../intro/overview.txt:294
msgid ""
"It also lets you create multiple versions of a site, with different base "
"templates, while reusing child templates. Django's creators have used this "
"technique to create strikingly different cell-phone editions of sites -- "
"simply by creating a new base template."
msgstr ""

# 521a608bff82481f9c5f1660c4777cbe
#: ../../intro/overview.txt:299
msgid ""
"Note that you don't have to use Django's template system if you prefer "
"another system. While Django's template system is particularly well-"
"integrated with Django's model layer, nothing forces you to use it. For that"
" matter, you don't have to use Django's database API, either. You can use "
"another database abstraction layer, you can read XML files, you can read "
"files off disk, or anything you want. Each piece of Django -- models, views,"
" templates -- is decoupled from the next."
msgstr ""

# b26b3594e9554ac393f82a2fec834bb3
#: ../../intro/overview.txt:308
msgid "This is just the surface"
msgstr ""

# 27acade0567342c1a7743a450dc3931c
#: ../../intro/overview.txt:310
msgid ""
"This has been only a quick overview of Django's functionality. Some more "
"useful features:"
msgstr ""

# acabe6ba7317412da602304226af9404
#: ../../intro/overview.txt:313
msgid ""
"A :doc:`caching framework </topics/cache>` that integrates with memcached or"
" other backends."
msgstr ""

# 6ce212cff54b4b4d9594e4b15798a6f5
#: ../../intro/overview.txt:316
msgid ""
"A :doc:`syndication framework </ref/contrib/syndication>` that makes "
"creating RSS and Atom feeds as easy as writing a small Python class."
msgstr ""

# 40670c01ef154c9b97be71e05132f9b1
#: ../../intro/overview.txt:319
msgid ""
"More sexy automatically-generated admin features -- this overview barely "
"scratched the surface."
msgstr ""

# 94cd68dc0d164b87913e6c23dba9f8aa
#: ../../intro/overview.txt:322
msgid ""
"The next obvious steps are for you to `download Django`_, read :doc:`the "
"tutorial </intro/tutorial01>` and join `the community`_. Thanks for your "
"interest!"
msgstr ""

# d2c007adc5d84fd88b537392a5146739
#: ../../intro/reusable-apps.txt:3
msgid "Advanced tutorial: How to write reusable apps"
msgstr ""

# 6a7c316cc62649b3942e40d0f8ccd6bc
#: ../../intro/reusable-apps.txt:5
msgid ""
"This advanced tutorial begins where :doc:`Tutorial 6 </intro/tutorial06>` "
"left off. We'll be turning our Web-poll into a standalone Python package you"
" can reuse in new projects and share with other people."
msgstr ""

# bea2f37ce11a475d9cd4b8e51a6dc42d
#: ../../intro/reusable-apps.txt:9
msgid ""
"If you haven't recently completed Tutorials 1–6, we encourage you to review "
"these so that your example project matches the one described below."
msgstr ""

# ce84a20c368b484886969e7e1cf60a3b
#: ../../intro/reusable-apps.txt:13
msgid "Reusability matters"
msgstr ""

# 424dcf73a3314622aff5aedfe47604ee
#: ../../intro/reusable-apps.txt:15
msgid ""
"It's a lot of work to design, build, test and maintain a web application. "
"Many Python and Django projects share common problems. Wouldn't it be great "
"if we could save some of this repeated work?"
msgstr ""

# 02cd7b3c93a34b4fb3b01a158cb5439a
#: ../../intro/reusable-apps.txt:19
msgid ""
"Reusability is the way of life in Python. `The Python Package Index (PyPI) "
"<http://guide.python-distribute.org/contributing.html#pypi-info>`_ has a "
"vast range of packages you can use in your own Python programs. Check out "
"`Django Packages <http://www.djangopackages.com>`_ for existing reusable "
"apps you could incorporate in your project. Django itself is also just a "
"Python package. This means that you can take existing Python packages or "
"Django apps and compose them into your own web project. You only need to "
"write the parts that make your project unique."
msgstr ""

# 300a9a673a53467fb02eac281a53ec1e
#: ../../intro/reusable-apps.txt:28
msgid ""
"Let's say you were starting a new project that needed a polls app like the "
"one we've been working on. How do you make this app reusable? Luckily, "
"you're well on the way already. In :doc:`Tutorial 3 </intro/tutorial03>`, we"
" saw how we could decouple polls from the project-level URLconf using an "
"``include``. In this tutorial, we'll take further steps to make the app easy"
" to use in new projects and ready to publish for others to install and use."
msgstr ""

# dffe75e121a043d1b24f8f3d169858f5
#: ../../intro/reusable-apps.txt:37
msgid ""
"A Python `package <http://docs.python.org/tutorial/modules.html#packages>`_ "
"provides a way of grouping related Python code for easy reuse. A package "
"contains one or more files of Python code (also known as \"modules\")."
msgstr ""

# da59204259054f40b3764c15d3b7a4d6
#: ../../intro/reusable-apps.txt:41
msgid ""
"A package can be imported with ``import foo.bar`` or ``from foo import "
"bar``. For a directory (like ``polls``) to form a package, it must contain a"
" special file ``__init__.py``, even if this file is empty."
msgstr ""

# 1e6134aa19754bfcb160e223a29b236d
#: ../../intro/reusable-apps.txt:45
msgid ""
"A Django *app* is just a Python package that is specifically intended for "
"use in a Django project. An app may also use common Django conventions, such"
" as having a ``models.py`` file."
msgstr ""

# 92c761ac9cd0402ca2bd4190229ab6a4
#: ../../intro/reusable-apps.txt:49
msgid ""
"Later on we use the term *packaging* to describe the process of making a "
"Python package easy for others to install. It can be a little confusing, we "
"know."
msgstr ""

# c9e3b6c775b640bb8f3e24e23401f810
#: ../../intro/reusable-apps.txt:54
msgid "Your project and your reusable app"
msgstr ""

# 8d986cdd10f340dd97d7b67fa2f23189
#: ../../intro/reusable-apps.txt:56
msgid "After the previous tutorials, our project should look like this::"
msgstr ""

# 7f3dbc8cf12f4a42955f5c3bf1d25cbe
#: ../../intro/reusable-apps.txt:85
msgid ""
"You created ``mysite/templates`` in :doc:`Tutorial 2 </intro/tutorial02>`, "
"and ``polls/templates`` in :doc:`Tutorial 3 </intro/tutorial03>`. Now "
"perhaps it is clearer why we chose to have separate template directories for"
" the project and application: everything that is part of the polls "
"application is in ``polls``. It makes the application self-contained and "
"easier to drop into a new project."
msgstr ""

# 14f926d606d147fb8a8eb36788ee6a79
#: ../../intro/reusable-apps.txt:92
msgid ""
"The ``polls`` directory could now be copied into a new Django project and "
"immediately reused. It's not quite ready to be published though. For that, "
"we need to package the app to make it easy for others to install."
msgstr ""

# f9a9bba883204c83a46e50ecaa180f4f
#: ../../intro/reusable-apps.txt:99
msgid "Installing some prerequisites"
msgstr ""

# 372b5ccf202b4c8c8f57f80e124fc389
#: ../../intro/reusable-apps.txt:101
msgid ""
"The current state of Python packaging is a bit muddled with various tools. "
"For this tutorial, we're going to use distribute_ to build our package. It's"
" a community-maintained fork of the older ``setuptools`` project. We'll also"
" be using `pip`_ to uninstall it after we're finished. You should install "
"these two packages now. If you need help, you can refer to :ref:`how to "
"install Django with pip<installing-official-release>`. You can install "
"``distribute`` the same way."
msgstr ""

# b22f08aeeb674a5b92f3a5f62f095d1c
#: ../../intro/reusable-apps.txt:113
msgid "Packaging your app"
msgstr ""

# f103bbf4148a4544bcd898c60f28683d
#: ../../intro/reusable-apps.txt:115
msgid ""
"Python *packaging* refers to preparing your app in a specific format that "
"can be easily installed and used. Django itself is packaged very much like "
"this. For a small app like polls, this process isn't too difficult."
msgstr ""

# bb05987574bd424bbd47cab054c21e5b
#: ../../intro/reusable-apps.txt:119
msgid ""
"First, create a parent directory for ``polls``, outside of your Django "
"project. Call this directory ``django-polls``."
msgstr ""

# 41908a7e868a4285abca8197e8cf1b6b
#: ../../intro/reusable-apps.txt:124
msgid ""
"When choosing a name for your package, check resources like PyPI to avoid "
"naming conflicts with existing packages. It's often useful to prepend "
"``django-`` to your module name when creating a package to distribute. This "
"helps others looking for Django apps identify your app as Django specific."
msgstr ""

# 81a290e3cd7948f48655a0ed467e1cec
#: ../../intro/reusable-apps.txt:130
msgid "Move the ``polls`` directory into the ``django-polls`` directory."
msgstr ""

# 04f62d57d1a6419f9f5a2a5e927ad56a
#: ../../intro/reusable-apps.txt:132
msgid ""
"Create a file ``django-polls/README.txt`` with the following contents::"
msgstr ""

# f697d048fae34923a226c892e8ca62e4
#: ../../intro/reusable-apps.txt:164
msgid ""
"4. Create a ``django-polls/LICENSE`` file. Choosing a license is beyond the "
"scope of this tutorial, but suffice it to say that code released publicly "
"without a license is *useless*. Django and many Django-compatible apps are "
"distributed under the BSD license; however, you're free to pick your own "
"license. Just be aware that your licensing choice will affect who is able to"
" use your code."
msgstr ""

# cd19949325bf433b861fc5a2568b2d58
#: ../../intro/reusable-apps.txt:171
msgid ""
"5. Next we'll create a ``setup.py`` file which provides details about how to"
" build and install the app.  A full explanation of this file is beyond the "
"scope of this tutorial, but the `distribute docs "
"<http://packages.python.org/distribute/setuptools.html>`_ have a good "
"explanation. Create a file ``django-polls/setup.py`` with the following "
"contents::"
msgstr ""

# 1e3cfcb12cb94db19237b68d4a7df064
#: ../../intro/reusable-apps.txt:212
msgid ""
"Distribute is a drop-in replacement for ``setuptools``. Even though we "
"appear to import from ``setuptools``, since we have ``distribute`` "
"installed, it will override the import."
msgstr ""

# 077f71073d524496af7bbaa3aebf9fbc
#: ../../intro/reusable-apps.txt:216
msgid ""
"Only Python modules and packages are included in the package by default. To "
"include additional files, we'll need to create a ``MANIFEST.in`` file. The "
"distribute docs referred to in the previous step discuss this file in more "
"details. To include the templates and our LICENSE file, create a file "
"``django-polls/MANIFEST.in`` with the following contents::"
msgstr ""

# ca1ab87dbed44bd0803e3dbb3ce710fc
#: ../../intro/reusable-apps.txt:225
msgid ""
"It's optional, but recommended, to include detailed documentation with your "
"app. Create an empty directory ``django-polls/docs`` for future "
"documentation. Add an additional line to ``django-polls/MANIFEST.in``::"
msgstr ""

# aa27964b10bd45d7848c6a69a7c1394a
#: ../../intro/reusable-apps.txt:231
msgid ""
"Note that the ``docs`` directory won't be included in your package unless "
"you add some files to it. Many Django apps also provide their documentation "
"online through sites like `readthedocs.org <http://readthedocs.org>`_."
msgstr ""

# 95b14ab3152d43b586b5369a6a7dee28
#: ../../intro/reusable-apps.txt:235
msgid ""
"Try building your package with ``python setup.py sdist`` (run from inside "
"``django-polls``). This creates a directory called ``dist`` and builds your "
"new package, ``django-polls-0.1.tar.gz``."
msgstr ""

# bdf879a5754c476da1a8fd7d71d90da0
#: ../../intro/reusable-apps.txt:239
msgid ""
"For more information on packaging, see `The Hitchhiker's Guide to Packaging "
"<http://guide.python-distribute.org/quickstart.html>`_."
msgstr ""

# 44fdfabe507a46059b1000e58e0bff92
#: ../../intro/reusable-apps.txt:243
msgid "Using your own package"
msgstr ""

# 9c0249bc00ff48b99cb5c2c14b4aad13
#: ../../intro/reusable-apps.txt:245
msgid ""
"Since we moved the ``polls`` directory out of the project, it's no longer "
"working. We'll now fix this by installing our new ``django-polls`` package."
msgstr ""

# fbff1b4b75e141eea482a13e7c6a7a81
#: ../../intro/reusable-apps.txt:250
msgid ""
"The following steps install ``django-polls`` as a user library. Per-user "
"installs have a lot of advantages over installing the package system-wide, "
"such as being usable on systems where you don't have administrator access as"
" well as preventing the package from affecting system services and other "
"users of the machine. Python 2.6 added support for user libraries, so if you"
" are using an older version this won't work, but Django 1.5 requires Python "
"2.6 or newer anyway."
msgstr ""

# b49fab23690a46f999b9b9fc5d287719
#: ../../intro/reusable-apps.txt:258
msgid ""
"Note that per-user installations can still affect the behavior of system "
"tools that run as that user, so ``virtualenv`` is a more robust solution "
"(see below)."
msgstr ""

# 7c975e5ee2604ad19ed4ffebec77ff9f
#: ../../intro/reusable-apps.txt:262
msgid ""
"Inside ``django-polls/dist``, untar the new package ``django-"
"polls-0.1.tar.gz`` (e.g. ``tar xzvf django-polls-0.1.tar.gz``). If you're "
"using Windows, you can download the command-line tool bsdtar_ to do this, or"
" you can use a GUI-based tool such as 7-zip_."
msgstr ""

# 3ba8762040d540329b61b72e547e7bf3
#: ../../intro/reusable-apps.txt:267
msgid ""
"Change into the directory created in step 1 (e.g. ``cd django-polls-0.1``)."
msgstr ""

# d2af1b5f733d477697f1ee3336fd168f
#: ../../intro/reusable-apps.txt:269
msgid ""
"If you're using GNU/Linux, Mac OS X or some other flavor of Unix, enter the "
"command ``python setup.py install --user`` at the shell prompt.  If you're "
"using Windows, start up a command shell and run the command ``setup.py "
"install --user``."
msgstr ""

# 9a75a9a175dc4a828eb486c8520d10c0
#: ../../intro/reusable-apps.txt:274
msgid ""
"With luck, your Django project should now work correctly again. Run the "
"server again to confirm this."
msgstr ""

# f75e2af9287c48a886c89442df5aca2c
#: ../../intro/reusable-apps.txt:277
msgid ""
"To uninstall the package, use pip (you already :ref:`installed it "
"<installing-reusable-apps-prerequisites>`, right?)::"
msgstr ""

# 7d095529089e47749bb85ae8537c0bcc
#: ../../intro/reusable-apps.txt:287
msgid "Publishing your app"
msgstr ""

# ab6861ffc4324578b9b7aac0e88bbc50
#: ../../intro/reusable-apps.txt:289
msgid ""
"Now that we've packaged and tested ``django-polls``, it's ready to share "
"with the world! If this wasn't just an example, you could now:"
msgstr ""

# 2bc15a3a169a4d0c85507436c503c4aa
#: ../../intro/reusable-apps.txt:292
msgid "Email the package to a friend."
msgstr ""

# 978c17b6b9c54befb6229c6e8ab268ea
#: ../../intro/reusable-apps.txt:294
msgid "Upload the package on your Web site."
msgstr ""

# 333941dbdc6a452cb2ea2b55a08035f3
#: ../../intro/reusable-apps.txt:296
msgid ""
"Post the package on a public repository, such as `The Python Package Index "
"(PyPI) <http://guide.python-distribute.org/contributing.html#pypi-info>`_."
msgstr ""

# c754040e2ea84d10aff0ae17d3926501
#: ../../intro/reusable-apps.txt:299
msgid ""
"For more information on PyPI, see the `Quickstart <http://guide.python-"
"distribute.org/quickstart.html#register-your-package-with-the-python-"
"package-index-pypi>`_ section of The Hitchhiker's Guide to Packaging. One "
"detail this guide mentions is choosing the license under which your code is "
"distributed."
msgstr ""

# bed0e577c27341a5aa5a816b16334378
#: ../../intro/reusable-apps.txt:305
msgid "Installing Python packages with virtualenv"
msgstr ""

# 784c83bf749a44578db9b255e699ff0a
#: ../../intro/reusable-apps.txt:307
msgid ""
"Earlier, we installed the polls app as a user library. This has some "
"disadvantages:"
msgstr ""

# 3b092a1ac5d44deea431f96b674c1930
#: ../../intro/reusable-apps.txt:310
msgid ""
"Modifying the user libraries can affect other Python software on your "
"system."
msgstr ""

# 993173508ddf4d7a98cca198dedb94b8
#: ../../intro/reusable-apps.txt:312
msgid ""
"You won't be able to run multiple versions of this package (or others with "
"the same name)."
msgstr ""

# 6eb564e7f0db49a3a831bdf26d245462
#: ../../intro/reusable-apps.txt:315
msgid ""
"Typically, these situations only arise once you're maintaining several "
"Django projects. When they do, the best solution is to use `virtualenv "
"<http://www.virtualenv.org/>`_. This tool allows you to maintain multiple "
"isolated Python environments, each with its own copy of the libraries and "
"package namespace."
msgstr ""

# e699b9eb590147e8a779f107de9a4819
#: ../../intro/tutorial01.txt:3
msgid "Writing your first Django app, part 1"
msgstr ""

# fe6c78b893cc40fdb606bf9f2520cbf9
#: ../../intro/tutorial01.txt:5
msgid "Let's learn by example."
msgstr ""

# 33f53928b5af46dfb81282cd3b7314db
#: ../../intro/tutorial01.txt:7
msgid ""
"Throughout this tutorial, we'll walk you through the creation of a basic "
"poll application."
msgstr ""

# 579229dadc1047e292211f53243d2a03
#: ../../intro/tutorial01.txt:10
msgid "It'll consist of two parts:"
msgstr ""

# 8139f333fed44619b76bd15f3c633dc6
#: ../../intro/tutorial01.txt:12
msgid "A public site that lets people view polls and vote in them."
msgstr ""

# 755a807faca8436897e29c01956d96c1
#: ../../intro/tutorial01.txt:13
msgid "An admin site that lets you add, change and delete polls."
msgstr ""

# 1f3e80aa478145eabee2e09879b3818c
#: ../../intro/tutorial01.txt:15
msgid ""
"We'll assume you have :doc:`Django installed </intro/install>` already. You "
"can tell Django is installed and which version by running the following "
"command:"
msgstr ""

# 93503c3760414388b396b4af0a4fe7e2
#: ../../intro/tutorial01.txt:22
msgid ""
"If Django is installed, you should see the version of your installation. If "
"it isn't, you'll get an error telling \"No module named django\"."
msgstr ""

# 8d2d1d8b3ecc4ea7880f861c1aa7cec4
#: ../../intro/tutorial01.txt:25
msgid ""
"This tutorial is written for Django |version| and Python 2.x. If the Django "
"version doesn't match, you can refer to the tutorial for your version of "
"Django or update Django to the newest version. If you are using Python 3.x, "
"be aware that your code may need to differ from what is in the tutorial and "
"you should continue using the tutorial only if you know what you are doing "
"with Python 3.x."
msgstr ""

# 147a14d0488746e49ebae43e6bdef2a3
#: ../../intro/tutorial01.txt:32
msgid ""
"See :doc:`How to install Django </topics/install>` for advice on how to "
"remove older versions of Django and install a newer one."
msgstr ""

# a47a86c8f4f44341a564a63974f72c05
#: ../../intro/tutorial01.txt:37
msgid ""
"If you're having trouble going through this tutorial, please post a message "
"to `django-users`__ or drop by `#django on irc.freenode.net`__ to chat with "
"other Django users who might be able to help."
msgstr ""

# 860a410db0654a9a9456a0b4449073cc
#: ../../intro/tutorial01.txt:45
msgid "Creating a project"
msgstr ""

# aa517f1908914290aa3c31c54fc97405
#: ../../intro/tutorial01.txt:47
msgid ""
"If this is your first time using Django, you'll have to take care of some "
"initial setup. Namely, you'll need to auto-generate some code that "
"establishes a Django :term:`project` -- a collection of settings for an "
"instance of Django, including database configuration, Django-specific "
"options and application-specific settings."
msgstr ""

# 4b28e4b42934482c9551a95f7cc2152f
#: ../../intro/tutorial01.txt:53
msgid ""
"From the command line, ``cd`` into a directory where you'd like to store "
"your code, then run the following command:"
msgstr ""

# 40f655d6103040b2aa2a091386c6a19e
#: ../../intro/tutorial01.txt:60
msgid ""
"This will create a ``mysite`` directory in your current directory. If it "
"didn't work, see :ref:`troubleshooting-django-admin-py`."
msgstr ""

# a9e42dcd9b7f471bb4eb1f7632bfd376
#: ../../intro/tutorial01.txt:65
msgid ""
"You'll need to avoid naming projects after built-in Python or Django "
"components. In particular, this means you should avoid using names like "
"``django`` (which will conflict with Django itself) or ``test`` (which "
"conflicts with a built-in Python package)."
msgstr ""

# 8ad8b46692564b86b6ad7e7a19b8541a
#: ../../intro/tutorial01.txt:72
msgid ""
"If your background is in plain old PHP (with no use of modern frameworks), "
"you're probably used to putting code under the Web server's document root "
"(in a place such as ``/var/www``). With Django, you don't do that. It's not "
"a good idea to put any of this Python code within your Web server's document"
" root, because it risks the possibility that people may be able to view your"
" code over the Web. That's not good for security."
msgstr ""

# 9bafce3863534e9abe10540d3a12f6d1
#: ../../intro/tutorial01.txt:79
msgid ""
"Put your code in some directory **outside** of the document root, such as "
":file:`/home/mycode`."
msgstr ""

# a3d7290417a94d37bcc189ed418282bf
#: ../../intro/tutorial01.txt:82
msgid "Let's look at what :djadmin:`startproject` created::"
msgstr ""

# d5df502ba294449d95afd52874df2f5e
#: ../../intro/tutorial01.txt:94
msgid ""
"The default project layout recently changed. If you're seeing a \"flat\" "
"layout (with no inner :file:`mysite/` directory), you're probably using a "
"version of Django that doesn't match this tutorial version.  You'll want to "
"either switch to the older tutorial or the newer Django version."
msgstr ""

# 5c1481cc417f4d8f81121b5df12326e9
#: ../../intro/tutorial01.txt:99
msgid "These files are:"
msgstr ""

# 36ac265073d84783bd8ed22e3352c348
#: ../../intro/tutorial01.txt:101
msgid ""
"The outer :file:`mysite/` directory is just a container for your project. "
"Its name doesn't matter to Django; you can rename it to anything you like."
msgstr ""

# 3a6ac49cf4124352ab1dd88a9544c793
#: ../../intro/tutorial01.txt:105
msgid ""
":file:`manage.py`: A command-line utility that lets you interact with this "
"Django project in various ways. You can read all the details about "
":file:`manage.py` in :doc:`/ref/django-admin`."
msgstr ""

# 4bc9910416bf4fc981ed45131b5f89c3
#: ../../intro/tutorial01.txt:109
msgid ""
"The inner :file:`mysite/` directory is the actual Python package for your "
"project. Its name is the Python package name you'll need to use to import "
"anything inside it (e.g. ``import mysite.settings``)."
msgstr ""

# f5e581ee5f974ea3a20778c682172ead
#: ../../intro/tutorial01.txt:113
msgid ""
":file:`mysite/__init__.py`: An empty file that tells Python that this "
"directory should be considered a Python package. (Read `more about "
"packages`_ in the official Python docs if you're a Python beginner.)"
msgstr ""

# 92520d3c14d34da4947b64b2246473da
#: ../../intro/tutorial01.txt:117
msgid ""
":file:`mysite/settings.py`: Settings/configuration for this Django project."
"  :doc:`/topics/settings` will tell you all about how settings work."
msgstr ""

# 67c1823c517d4b73adee253b9fd81d05
#: ../../intro/tutorial01.txt:121
msgid ""
":file:`mysite/urls.py`: The URL declarations for this Django project; a "
"\"table of contents\" of your Django-powered site. You can read more about "
"URLs in :doc:`/topics/http/urls`."
msgstr ""

# c1e7fe09159846b28945d224f5268a28
#: ../../intro/tutorial01.txt:125
msgid ""
":file:`mysite/wsgi.py`: An entry-point for WSGI-compatible webservers to "
"serve your project. See :doc:`/howto/deployment/wsgi/index` for more "
"details."
msgstr ""

# a23ecf73d1454f29b525a5a91bda1831
#: ../../intro/tutorial01.txt:131
msgid "The development server"
msgstr ""

# 8d543bf5f1f4458ca02f7155708994d5
#: ../../intro/tutorial01.txt:133
msgid ""
"Let's verify this worked. Change into the outer :file:`mysite` directory, if"
" you haven't already, and run the command ``python manage.py runserver``. "
"You'll see the following output on the command line:"
msgstr ""

# 6900dffd78064e72bbd1f3e03768aed7
#: ../../intro/tutorial01.txt:147
msgid ""
"You've started the Django development server, a lightweight Web server "
"written purely in Python. We've included this with Django so you can develop"
" things rapidly, without having to deal with configuring a production server"
" -- such as Apache -- until you're ready for production."
msgstr ""

# 879cd5c570364460a2c4fa82be3f3f73
#: ../../intro/tutorial01.txt:152
msgid ""
"Now's a good time to note: **Don't** use this server in anything resembling "
"a production environment. It's intended only for use while developing. "
"(We're in the business of making Web frameworks, not Web servers.)"
msgstr ""

# 62cf6b547124482994ba311f748343b4
#: ../../intro/tutorial01.txt:156
msgid ""
"Now that the server's running, visit http://127.0.0.1:8000/ with your Web "
"browser. You'll see a \"Welcome to Django\" page, in pleasant, light-blue "
"pastel. It worked!"
msgstr ""

# 1bac1fd1f158455b9a415d7bdba1002a
#: ../../intro/tutorial01.txt:162
msgid ""
"By default, the :djadmin:`runserver` command starts the development server "
"on the internal IP at port 8000."
msgstr ""

# c9a3406d73d242bea9fedba673be338e
#: ../../intro/tutorial01.txt:165
msgid ""
"If you want to change the server's port, pass it as a command-line argument."
" For instance, this command starts the server on port 8080:"
msgstr ""

# 304ddafcd47f4380a3b3d06aae034714
#: ../../intro/tutorial01.txt:173
msgid ""
"If you want to change the server's IP, pass it along with the port. So to "
"listen on all public IPs (useful if you want to show off your work on other "
"computers), use:"
msgstr ""

# 7097b5fd760741eebfb08c370cc46e3f
#: ../../intro/tutorial01.txt:181
msgid ""
"Full docs for the development server can be found in the "
":djadmin:`runserver` reference."
msgstr ""

# d17af8a377944ad5bf250aef9aae91b2
#: ../../intro/tutorial01.txt:185
msgid "Database setup"
msgstr ""

# 993495de6cdf4f1e991531973621351c
#: ../../intro/tutorial01.txt:187
msgid ""
"Now, edit :file:`mysite/settings.py`. It's a normal Python module with "
"module-level variables representing Django settings. Change the following "
"keys in the :setting:`DATABASES` ``'default'`` item to match your database "
"connection settings."
msgstr ""

# c339e048e36e4ef3bac37a0aa4b39570
#: ../../intro/tutorial01.txt:192
msgid ""
":setting:`ENGINE <DATABASE-ENGINE>` -- Either "
"``'django.db.backends.postgresql_psycopg2'``, "
"``'django.db.backends.mysql'``, ``'django.db.backends.sqlite3'`` or "
"``'django.db.backends.oracle'``. Other backends are :setting:`also available"
" <DATABASE-ENGINE>`."
msgstr ""

# 2bf57383672b40aaa9d54586981421f1
#: ../../intro/tutorial01.txt:198
msgid ""
":setting:`NAME` -- The name of your database. If you're using SQLite, the "
"database will be a file on your computer; in that case, :setting:`NAME` "
"should be the full absolute path, including filename, of that file. If the "
"file doesn't exist, it will automatically be created when you synchronize "
"the database for the first time (see below)."
msgstr ""

# 6fc7fb25697c476e88b41fac77137dd5
#: ../../intro/tutorial01.txt:205
msgid ""
"When specifying the path, always use forward slashes, even on Windows (e.g. "
"``C:/homes/user/mysite/sqlite3.db``)."
msgstr ""

# 8b828406cca54d2db15f68b65210c1c5
#: ../../intro/tutorial01.txt:208
msgid ":setting:`USER` -- Your database username (not used for SQLite)."
msgstr ""

# daaffad09748497d97f5a913ecb27053
#: ../../intro/tutorial01.txt:210
msgid ":setting:`PASSWORD` -- Your database password (not used for SQLite)."
msgstr ""

# 9a3e325cdc134da9bf39dee1a186c5ac
#: ../../intro/tutorial01.txt:213
msgid ""
":setting:`HOST` -- The host your database is on. Leave this as an empty "
"string (or possibly ``127.0.0.1``) if your database server is on the same "
"physical machine (not used for SQLite). See :setting:`HOST` for details."
msgstr ""

# 9244873b24e74eb0b7f61b4e6b905d7e
#: ../../intro/tutorial01.txt:217
msgid ""
"If you're new to databases, we recommend simply using SQLite by setting "
":setting:`ENGINE <DATABASE-ENGINE>` to ``'django.db.backends.sqlite3'`` and "
":setting:`NAME` to the place where you'd like to store the database. SQLite "
"is included in Python, so you won't need to install anything else to support"
" your database."
msgstr ""

# 9d4402a5e3184ad2a628f7112f07cb12
#: ../../intro/tutorial01.txt:225
msgid ""
"If you're using PostgreSQL or MySQL, make sure you've created a database by "
"this point. Do that with \"``CREATE DATABASE database_name;``\" within your "
"database's interactive prompt."
msgstr ""

# 25ab157bd620447cbba83b52f81a6ffb
#: ../../intro/tutorial01.txt:229
msgid ""
"If you're using SQLite, you don't need to create anything beforehand - the "
"database file will be created automatically when it is needed."
msgstr ""

# 5b2e0452f5634d3f8c311439c8c84a47
#: ../../intro/tutorial01.txt:232
msgid ""
"While you're editing :file:`settings.py`, set :setting:`TIME_ZONE` to your "
"time zone. The default value is the Central time zone in the U.S. (Chicago)."
msgstr ""

# 8e79f6d1dc0245c681a5b662e443ef55
#: ../../intro/tutorial01.txt:235
msgid ""
"Also, note the :setting:`INSTALLED_APPS` setting toward the bottom of the "
"file. That holds the names of all Django applications that are activated in "
"this Django instance. Apps can be used in multiple projects, and you can "
"package and distribute them for use by others in their projects."
msgstr ""

# b7efa3d23e3d498294acba3d9ebb4c25
#: ../../intro/tutorial01.txt:240
msgid ""
"By default, :setting:`INSTALLED_APPS` contains the following apps, all of "
"which come with Django:"
msgstr ""

# 073cc9325c164d4584b92920229aaff7
#: ../../intro/tutorial01.txt:243
msgid ":mod:`django.contrib.auth` -- An authentication system."
msgstr ""

# 24f15c81b0c1466f8faa70324e3fe005
#: ../../intro/tutorial01.txt:245
msgid ":mod:`django.contrib.contenttypes` -- A framework for content types."
msgstr ""

# 0b68b39bf684449aa692e760874d47f7
#: ../../intro/tutorial01.txt:247
msgid ":mod:`django.contrib.sessions` -- A session framework."
msgstr ""

# 6317e111a66649b2944b71bd1e710446
#: ../../intro/tutorial01.txt:249
msgid ""
":mod:`django.contrib.sites` -- A framework for managing multiple sites with "
"one Django installation."
msgstr ""

# 6fa9ff5a680640eebe22c813a074316a
#: ../../intro/tutorial01.txt:252
msgid ":mod:`django.contrib.messages` -- A messaging framework."
msgstr ""

# e087eeab78d1409c8f7c1f242716aa60
#: ../../intro/tutorial01.txt:254
msgid ""
":mod:`django.contrib.staticfiles` -- A framework for managing static files."
msgstr ""

# 643d611585dc4482b7ba1d0a207ecb51
#: ../../intro/tutorial01.txt:257
msgid ""
"These applications are included by default as a convenience for the common "
"case."
msgstr ""

# 5edd554055fd4813aecbcf59a2bce7ed
#: ../../intro/tutorial01.txt:259
msgid ""
"Each of these applications makes use of at least one database table, though,"
" so we need to create the tables in the database before we can use them. To "
"do that, run the following command:"
msgstr ""

# 1c2880f85cb24e638b58bbb9f013466f
#: ../../intro/tutorial01.txt:267
msgid ""
"The :djadmin:`syncdb` command looks at the :setting:`INSTALLED_APPS` setting"
" and creates any necessary database tables according to the database "
"settings in your :file:`settings.py` file. You'll see a message for each "
"database table it creates, and you'll get a prompt asking you if you'd like "
"to create a superuser account for the authentication system. Go ahead and do"
" that."
msgstr ""

# bf52cc2e498948c1a87b3aad58a7b3dd
#: ../../intro/tutorial01.txt:273
msgid ""
"If you're interested, run the command-line client for your database and type"
" ``\\dt`` (PostgreSQL), ``SHOW TABLES;`` (MySQL), or ``.schema`` (SQLite) to"
" display the tables Django created."
msgstr ""

# 4f74d362e2f64c9babadc2053352bbb1
#: ../../intro/tutorial01.txt:279
msgid ""
"Like we said above, the default applications are included for the common "
"case, but not everybody needs them. If you don't need any or all of them, "
"feel free to comment-out or delete the appropriate line(s) from "
":setting:`INSTALLED_APPS` before running :djadmin:`syncdb`. The "
":djadmin:`syncdb` command will only create tables for apps in "
":setting:`INSTALLED_APPS`."
msgstr ""

# 989b69d00de441d698de6acbac30d010
#: ../../intro/tutorial01.txt:289
msgid "Creating models"
msgstr ""

# 88a352a8ebaa48fc9433508bfdd5229c
#: ../../intro/tutorial01.txt:291
msgid ""
"Now that your environment -- a \"project\" -- is set up, you're set to start"
" doing work."
msgstr ""

# 47679a17354e45deb4e815b54ec22837
#: ../../intro/tutorial01.txt:294
msgid ""
"Each application you write in Django consists of a Python package, somewhere"
" on your `Python path`_, that follows a certain convention. Django comes "
"with a utility that automatically generates the basic directory structure of"
" an app, so you can focus on writing code rather than creating directories."
msgstr ""

# 74d905ada231442b8b5be2249fe22e14
#: ../../intro/tutorial01.txt:301
msgid ""
"What's the difference between a project and an app? An app is a Web "
"application that does something -- e.g., a Weblog system, a database of "
"public records or a simple poll app. A project is a collection of "
"configuration and apps for a particular Web site. A project can contain "
"multiple apps. An app can be in multiple projects."
msgstr ""

# 9e47d25b0f87444380fe865836613a38
#: ../../intro/tutorial01.txt:307
msgid ""
"Your apps can live anywhere on your `Python path`_. In this tutorial, we'll "
"create our poll app right next to your :file:`manage.py` file so that it can"
" be imported as its own top-level module, rather than a submodule of "
"``mysite``."
msgstr ""

# a57601b4359546f6be77b00aa5725a2e
#: ../../intro/tutorial01.txt:311
msgid ""
"To create your app, make sure you're in the same directory as "
":file:`manage.py` and type this command:"
msgstr ""

# 71618f1cb20d464d8aea1ba58adddec3
#: ../../intro/tutorial01.txt:318
msgid ""
"That'll create a directory :file:`polls`, which is laid out like this::"
msgstr ""

# 896c686b37ee4182b6be01b9a5019a5e
#: ../../intro/tutorial01.txt:326
msgid "This directory structure will house the poll application."
msgstr ""

# e59e77ff2ec1468bae3ae64d2c0ac1ea
#: ../../intro/tutorial01.txt:328
msgid ""
"The first step in writing a database Web app in Django is to define your "
"models -- essentially, your database layout, with additional metadata."
msgstr ""

# 23e7a329937b4f91806bb23b1827b5ce
#: ../../intro/tutorial01.txt:333
msgid ""
"A model is the single, definitive source of data about your data. It "
"contains the essential fields and behaviors of the data you're storing. "
"Django follows the :ref:`DRY Principle <dry>`. The goal is to define your "
"data model in one place and automatically derive things from it."
msgstr ""

# ec605be76a0c464c9518d2f1342c1abf
#: ../../intro/tutorial01.txt:338
msgid ""
"In our simple poll app, we'll create two models: ``Poll`` and ``Choice``. A "
"``Poll`` has a question and a publication date. A ``Choice`` has two fields:"
" the text of the choice and a vote tally. Each ``Choice`` is associated with"
" a ``Poll``."
msgstr ""

# 22d43d191c034748ac092ef11b31399e
#: ../../intro/tutorial01.txt:343
msgid ""
"These concepts are represented by simple Python classes. Edit the "
":file:`polls/models.py` file so it looks like this::"
msgstr ""

# 3f6eff4ba5e54a609a0a7143d107d2a3
#: ../../intro/tutorial01.txt:357
msgid ""
"The code is straightforward. Each model is represented by a class that "
"subclasses :class:`django.db.models.Model`. Each model has a number of class"
" variables, each of which represents a database field in the model."
msgstr ""

# a2012a8dbe984e8fa49d6cefd9c1dd13
#: ../../intro/tutorial01.txt:361
msgid ""
"Each field is represented by an instance of a "
":class:`~django.db.models.Field` class -- e.g., "
":class:`~django.db.models.CharField` for character fields and "
":class:`~django.db.models.DateTimeField` for datetimes. This tells Django "
"what type of data each field holds."
msgstr ""

# 1436e0b0cf5442cba47b5a8973def129
#: ../../intro/tutorial01.txt:366
msgid ""
"The name of each :class:`~django.db.models.Field` instance (e.g. "
"``question`` or ``pub_date`` ) is the field's name, in machine-friendly "
"format. You'll use this value in your Python code, and your database will "
"use it as the column name."
msgstr ""

# 1254c4548f2a4c56b71a96aa33cc86b3
#: ../../intro/tutorial01.txt:370
msgid ""
"You can use an optional first positional argument to a "
":class:`~django.db.models.Field` to designate a human-readable name. That's "
"used in a couple of introspective parts of Django, and it doubles as "
"documentation. If this field isn't provided, Django will use the machine-"
"readable name. In this example, we've only defined a human-readable name for"
" ``Poll.pub_date``. For all other fields in this model, the field's machine-"
"readable name will suffice as its human-readable name."
msgstr ""

# c529047ddf354bc3a6f2249a0d67617f
#: ../../intro/tutorial01.txt:378
msgid ""
"Some :class:`~django.db.models.Field` classes have required arguments. "
":class:`~django.db.models.CharField`, for example, requires that you give it"
" a :attr:`~django.db.models.CharField.max_length`. That's used not only in "
"the database schema, but in validation, as we'll soon see."
msgstr ""

# e5bab5a3e5e04a458fb3bef93520bc42
#: ../../intro/tutorial01.txt:383
msgid ""
"A :class:`~django.db.models.Field` can also have various optional arguments;"
" in this case, we've set the :attr:`~django.db.models.Field.default` value "
"of ``votes`` to 0."
msgstr ""

# 5f553b24a9924fa79baa18317d0c743c
#: ../../intro/tutorial01.txt:387
msgid ""
"Finally, note a relationship is defined, using "
":class:`~django.db.models.ForeignKey`. That tells Django each ``Choice`` is "
"related to a single ``Poll``. Django supports all the common database "
"relationships: many-to-ones, many-to-manys and one-to-ones."
msgstr ""

# f4af917099934f43874c55581522c9e8
#: ../../intro/tutorial01.txt:395
msgid "Activating models"
msgstr ""

# f40aefe5bd4a4586a4b078a0962567df
#: ../../intro/tutorial01.txt:397
msgid ""
"That small bit of model code gives Django a lot of information. With it, "
"Django is able to:"
msgstr ""

# de55d3a369e540c0a5c1b7e10c98abc9
#: ../../intro/tutorial01.txt:400
msgid "Create a database schema (``CREATE TABLE`` statements) for this app."
msgstr ""

# f1c0989973f9472bb2b52b4f9af3ed08
#: ../../intro/tutorial01.txt:401
msgid ""
"Create a Python database-access API for accessing ``Poll`` and ``Choice`` "
"objects."
msgstr ""

# 8f847e10961f47ec83db63560ce28600
#: ../../intro/tutorial01.txt:403
msgid ""
"But first we need to tell our project that the ``polls`` app is installed."
msgstr ""

# 368c0a7b8aed43b59427ae5908579f21
#: ../../intro/tutorial01.txt:407
msgid ""
"Django apps are \"pluggable\": You can use an app in multiple projects, and "
"you can distribute apps, because they don't have to be tied to a given "
"Django installation."
msgstr ""

# d9c788cb933c4e21bea165346c40d016
#: ../../intro/tutorial01.txt:411
msgid ""
"Edit the :file:`settings.py` file again, and change the "
":setting:`INSTALLED_APPS` setting to include the string ``'polls'``. So "
"it'll look like this::"
msgstr ""

# 890d7e57025442b9a8c0524488caf382
#: ../../intro/tutorial01.txt:429
msgid ""
"Now Django knows to include the ``polls`` app. Let's run another command:"
msgstr ""

# 6cf6db8fff9d4dc2b1a30cba550223dc
#: ../../intro/tutorial01.txt:436
msgid ""
"You should see something similar to the following (the ``CREATE TABLE`` SQL "
"statements for the polls app):"
msgstr ""

# c839a73d9412483289ffc132ea6cdb54
#: ../../intro/tutorial01.txt:455
msgid "Note the following:"
msgstr ""

# 7e86ac04b0e348a092765533615802ce
#: ../../intro/tutorial01.txt:457
msgid "The exact output will vary depending on the database you are using."
msgstr ""

# 28372593c1c9469daa9b01d46521ed24
#: ../../intro/tutorial01.txt:459
msgid ""
"Table names are automatically generated by combining the name of the app "
"(``polls``) and the lowercase name of the model -- ``poll`` and ``choice``. "
"(You can override this behavior.)"
msgstr ""

# 0ed25e9e57c442ca9ac6e7a24f3bb658
#: ../../intro/tutorial01.txt:463
msgid ""
"Primary keys (IDs) are added automatically. (You can override this, too.)"
msgstr ""

# 0eb047cfd7804dac904c59ac07255556
#: ../../intro/tutorial01.txt:465
msgid ""
"By convention, Django appends ``\"_id\"`` to the foreign key field name. "
"(Yes, you can override this, as well.)"
msgstr ""

# aac34fc01a6c4fe2aa0f601d7ecfae1e
#: ../../intro/tutorial01.txt:468
msgid ""
"The foreign key relationship is made explicit by a ``REFERENCES`` statement."
msgstr ""

# 99fb6dc254c9418f92e3660bf1e27c2e
#: ../../intro/tutorial01.txt:471
msgid ""
"It's tailored to the database you're using, so database-specific field types"
" such as ``auto_increment`` (MySQL), ``serial`` (PostgreSQL), or ``integer "
"primary key`` (SQLite) are handled for you automatically. Same goes for "
"quoting of field names -- e.g., using double quotes or single quotes. The "
"author of this tutorial runs PostgreSQL, so the example output is in "
"PostgreSQL syntax."
msgstr ""

# ae67ac534996467bb387cd9b40b424bb
#: ../../intro/tutorial01.txt:478
msgid ""
"The :djadmin:`sql` command doesn't actually run the SQL in your database - "
"it just prints it to the screen so that you can see what SQL Django thinks "
"is required. If you wanted to, you could copy and paste this SQL into your "
"database prompt. However, as we will see shortly, Django provides an easier "
"way of committing the SQL to the database."
msgstr ""

# 18de5cac9d0e4bc4970577a1ff9316d6
#: ../../intro/tutorial01.txt:484
msgid "If you're interested, also run the following commands:"
msgstr ""

# dffe181f767f4b96a9748d428edd62df
#: ../../intro/tutorial01.txt:486
msgid ""
":djadmin:`python manage.py validate <validate>` -- Checks for any errors in "
"the construction of your models."
msgstr ""

# e3acfea74c4a44518b4659e3f07bb6a9
#: ../../intro/tutorial01.txt:489
msgid ""
":djadmin:`python manage.py sqlcustom polls <sqlcustom>` -- Outputs any "
":ref:`custom SQL statements <initial-sql>` (such as table modifications or "
"constraints) that are defined for the application."
msgstr ""

# 22acbe4269244849a204d87daab40372
#: ../../intro/tutorial01.txt:493
msgid ""
":djadmin:`python manage.py sqlclear polls <sqlclear>` -- Outputs the "
"necessary ``DROP TABLE`` statements for this app, according to which tables "
"already exist in your database (if any)."
msgstr ""

# ba24494c35814ef89a395d1bcef62efc
#: ../../intro/tutorial01.txt:497
msgid ""
":djadmin:`python manage.py sqlindexes polls <sqlindexes>` -- Outputs the "
"``CREATE INDEX`` statements for this app."
msgstr ""

# 70a0969b1c3441f39aa952c6828282ff
#: ../../intro/tutorial01.txt:500
msgid ""
":djadmin:`python manage.py sqlall polls <sqlall>` -- A combination of all "
"the SQL from the :djadmin:`sql`, :djadmin:`sqlcustom`, and "
":djadmin:`sqlindexes` commands."
msgstr ""

# f6af26780b294b2d9a644d3521c2ab76
#: ../../intro/tutorial01.txt:504
msgid ""
"Looking at the output of those commands can help you understand what's "
"actually happening under the hood."
msgstr ""

# 484ac68690ab403e90ad3bd19d5fa4bf
#: ../../intro/tutorial01.txt:507
msgid ""
"Now, run :djadmin:`syncdb` again to create those model tables in your "
"database:"
msgstr ""

# 2c1c9d4bef1d45aeafb1f5c1f4e0e133
#: ../../intro/tutorial01.txt:513
msgid ""
"The :djadmin:`syncdb` command runs the SQL from :djadmin:`sqlall` on your "
"database for all apps in :setting:`INSTALLED_APPS` that don't already exist "
"in your database. This creates all the tables, initial data and indexes for "
"any apps you've added to your project since the last time you ran syncdb. "
":djadmin:`syncdb` can be called as often as you like, and it will only ever "
"create the tables that don't exist."
msgstr ""

# ae332faf4a8d4f4a957f5c1d198697ad
#: ../../intro/tutorial01.txt:520
msgid ""
"Read the :doc:`django-admin.py documentation </ref/django-admin>` for full "
"information on what the ``manage.py`` utility can do."
msgstr ""

# c3d72ed817384a20912ef0e80d33968d
#: ../../intro/tutorial01.txt:524
msgid "Playing with the API"
msgstr ""

# c348f358793d4c8dabba43ec9f73ff88
#: ../../intro/tutorial01.txt:526
msgid ""
"Now, let's hop into the interactive Python shell and play around with the "
"free API Django gives you. To invoke the Python shell, use this command:"
msgstr ""

# b1f2238c75f4489aa865337d2060328f
#: ../../intro/tutorial01.txt:533
msgid ""
"We're using this instead of simply typing \"python\", because "
":file:`manage.py` sets the ``DJANGO_SETTINGS_MODULE`` environment variable, "
"which gives Django the Python import path to your :file:`settings.py` file."
msgstr ""

# 3976de54036848d3807faf2d215a6178
#: ../../intro/tutorial01.txt:539
msgid ""
"If you'd rather not use :file:`manage.py`, no problem. Just set the "
"``DJANGO_SETTINGS_MODULE`` environment variable to ``mysite.settings`` and "
"run ``python`` from the same directory :file:`manage.py` is in (or ensure "
"that directory is on the Python path, so that ``import mysite`` works)."
msgstr ""

# edefc43c9156436fa8a968c0f3a85c50
#: ../../intro/tutorial01.txt:544
msgid ""
"For more information on all of this, see the :doc:`django-admin.py "
"documentation </ref/django-admin>`."
msgstr ""

# 0e22af507f224fb4ae9ad0fb86817bb7
#: ../../intro/tutorial01.txt:547
msgid ""
"Once you're in the shell, explore the :doc:`database API "
"</topics/db/queries>`::"
msgstr ""

# aa67099e6ca34b6780faa397a2bba066
#: ../../intro/tutorial01.txt:587
msgid ""
"Wait a minute. ``<Poll: Poll object>`` is, utterly, an unhelpful "
"representation of this object. Let's fix that by editing the polls model (in"
" the ``polls/models.py`` file) and adding a "
":meth:`~django.db.models.Model.__unicode__` method to both ``Poll`` and "
"``Choice``::"
msgstr ""

# 2c887a778b6b4a3a9dd3d6e11e5d37d5
#: ../../intro/tutorial01.txt:603
msgid ""
"It's important to add :meth:`~django.db.models.Model.__unicode__` methods to"
" your models, not only for your own sanity when dealing with the interactive"
" prompt, but also because objects' representations are used throughout "
"Django's automatically-generated admin."
msgstr ""

# 0f17b3445a1a46e7963161c8ce476198
#: ../../intro/tutorial01.txt:611
msgid ""
"If you're familiar with Python, you might be in the habit of adding "
":meth:`~django.db.models.Model.__str__` methods to your classes, not "
":meth:`~django.db.models.Model.__unicode__` methods. We use "
":meth:`~django.db.models.Model.__unicode__` here because Django models deal "
"with Unicode by default. All data stored in your database is converted to "
"Unicode when it's returned."
msgstr ""

# 785337a9d940438db8c1fbb82769cda4
#: ../../intro/tutorial01.txt:618
msgid ""
"Django models have a default :meth:`~django.db.models.Model.__str__` method "
"that calls :meth:`~django.db.models.Model.__unicode__` and converts the "
"result to a UTF-8 bytestring. This means that ``unicode(p)`` will return a "
"Unicode string, and ``str(p)`` will return a normal string, with characters "
"encoded as UTF-8."
msgstr ""

# 617230833c1e4c8ab322acb1748b3b27
#: ../../intro/tutorial01.txt:624
msgid ""
"If all of this is gibberish to you, just remember to add "
":meth:`~django.db.models.Model.__unicode__` methods to your models. With any"
" luck, things should Just Work for you."
msgstr ""

# 1043faa1405d40b3bd872127f8876bea
#: ../../intro/tutorial01.txt:628
msgid ""
"Note these are normal Python methods. Let's add a custom method, just for "
"demonstration::"
msgstr ""

# f21e8090e4e145338bc7fe6ec8aa6f04
#: ../../intro/tutorial01.txt:639
msgid ""
"Note the addition of ``import datetime`` and ``from django.utils import "
"timezone``, to reference Python's standard :mod:`datetime` module and "
"Django's time-zone-related utilities in :mod:`django.utils.timezone`, "
"respectively. If you aren't familiar with time zone handling in Python, you "
"can learn more in the :doc:`time zone support docs "
"</topics/i18n/timezones>`."
msgstr ""

# b988a54c9f5d458f880d41bc72ff5742
#: ../../intro/tutorial01.txt:645
msgid ""
"Save these changes and start a new Python interactive shell by running "
"``python manage.py shell`` again::"
msgstr ""

# 56a309172faa475fbe5602063305e490
#: ../../intro/tutorial01.txt:724
msgid ""
"For more information on model relations, see :doc:`Accessing related objects"
" </ref/models/relations>`. For more on how to use double underscores to "
"perform field lookups via the API, see :ref:`Field lookups <field-lookups-"
"intro>`. For full details on the database API, see our :doc:`Database API "
"reference </topics/db/queries>`."
msgstr ""

# 3336e7112b1643778c38d52bdf97f624
#: ../../intro/tutorial01.txt:730
msgid ""
"When you're comfortable with the API, read :doc:`part 2 of this tutorial "
"</intro/tutorial02>` to get Django's automatic admin working."
msgstr ""

# 3fd4721a5f54499f93064e9d50b225f8
#: ../../intro/tutorial02.txt:3
msgid "Writing your first Django app, part 2"
msgstr ""

# 8dabc18e37494182ae740e80b1077a13
#: ../../intro/tutorial02.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 1 </intro/tutorial01>` left off. "
"We're continuing the Web-poll application and will focus on Django's "
"automatically-generated admin site."
msgstr ""

# 936647aec6184174b61d43696eeed69a
#: ../../intro/tutorial02.txt:11
msgid ""
"Generating admin sites for your staff or clients to add, change and delete "
"content is tedious work that doesn't require much creativity. For that "
"reason, Django entirely automates creation of admin interfaces for models."
msgstr ""

# 56c0e65fceff43edbadcfe940e9dc46e
#: ../../intro/tutorial02.txt:15
msgid ""
"Django was written in a newsroom environment, with a very clear separation "
"between \"content publishers\" and the \"public\" site. Site managers use "
"the system to add news stories, events, sports scores, etc., and that "
"content is displayed on the public site. Django solves the problem of "
"creating a unified interface for site administrators to edit content."
msgstr ""

# 8b97bcdeeeb344bfb2788fce1c6b1b34
#: ../../intro/tutorial02.txt:21
msgid ""
"The admin isn't intended to be used by site visitors. It's for site "
"managers."
msgstr ""

# 33fccf6b4c3e4e9ea423374a3f4e4e0a
#: ../../intro/tutorial02.txt:25
msgid "Activate the admin site"
msgstr ""

# 21efc6fc2c9447bc90a24713ce776c5a
#: ../../intro/tutorial02.txt:27
msgid ""
"The Django admin site is not activated by default -- it's an opt-in thing. "
"To activate the admin site for your installation, do these three things:"
msgstr ""

# b3d80ebf4f5e444b82ad9f3797575700
#: ../../intro/tutorial02.txt:30
msgid ""
"Uncomment ``\"django.contrib.admin\"`` in the :setting:`INSTALLED_APPS` "
"setting."
msgstr ""

# 8b96955ad5be40f69fe2ab7de1d560c2
#: ../../intro/tutorial02.txt:32
msgid ""
"Run ``python manage.py syncdb``. Since you have added a new application to "
":setting:`INSTALLED_APPS`, the database tables need to be updated."
msgstr ""

# 6c2c79e1e4cd483392ba6f16096d2ce9
#: ../../intro/tutorial02.txt:35
msgid ""
"Edit your ``mysite/urls.py`` file and uncomment the lines that reference the"
" admin -- there are three lines in total to uncomment. This file is a "
"URLconf; we'll dig into URLconfs in the next tutorial. For now, all you need"
" to know is that it maps URL roots to applications. In the end, you should "
"have a ``urls.py`` file that looks like this:"
msgstr ""

# 349f5ba76a344e618f2efb133e68cef2
#: ../../intro/tutorial02.txt:61
msgid "(The bold lines are the ones that needed to be uncommented.)"
msgstr ""

# abe13d6b2f6d487ab0527735e5c44a3c
#: ../../intro/tutorial02.txt:64
msgid "Start the development server"
msgstr ""

# 677e86c643594205b04b9962f7ea2b1b
#: ../../intro/tutorial02.txt:66
msgid "Let's start the development server and explore the admin site."
msgstr ""

# c4cc66e380a644da97e267ddc33cba0d
#: ../../intro/tutorial02.txt:68
msgid "Recall from Tutorial 1 that you start the development server like so:"
msgstr ""

# 69b27b8d2ab3493aa6dec0da08b898be
#: ../../intro/tutorial02.txt:74
msgid ""
"Now, open a Web browser and go to \"/admin/\" on your local domain -- e.g., "
"http://127.0.0.1:8000/admin/. You should see the admin's login screen:"
msgstr ""

# 346e8a8d175b4ff28cfb3ea5435aaf95
#: ../../intro/tutorial02.txt:82
msgid ""
"If at this point, instead of the above login page, you get an error page "
"reporting something like::"
msgstr ""

# 5a6e673a6f8040b3ba5bfb850aca3b86
#: ../../intro/tutorial02.txt:89
msgid ""
"then you're probably using a version of Django that doesn't match this "
"tutorial version. You'll want to either switch to the older tutorial or the "
"newer Django version."
msgstr ""

# 9f020bb8ea3142f8a05d432572be1b3d
#: ../../intro/tutorial02.txt:94
msgid "Enter the admin site"
msgstr ""

# 04d5e61f7eb64d5595fda062174a8365
#: ../../intro/tutorial02.txt:96
msgid ""
"Now, try logging in. (You created a superuser account in the first part of "
"this tutorial, remember?  If you didn't create one or forgot the password "
"you can :ref:`create another one <topics-auth-creating-superusers>`.) You "
"should see the Django admin index page:"
msgstr ""

# 57c653eb108543f8b6628b39d9f70c85
#: ../../intro/tutorial02.txt:104
msgid ""
"You should see a few types of editable content, including groups, users and "
"sites. These are core features Django ships with by default."
msgstr ""

# fbc72cbcc3eb4770a5a946dae8741038
#: ../../intro/tutorial02.txt:108
msgid "Make the poll app modifiable in the admin"
msgstr ""

# 0a948319005d413cbf137af3981aa79d
#: ../../intro/tutorial02.txt:110
msgid "But where's our poll app? It's not displayed on the admin index page."
msgstr ""

# 130fba1778884aae892a676d251b5e31
#: ../../intro/tutorial02.txt:112
msgid ""
"Just one thing to do: We need to tell the admin that ``Poll`` objects have "
"an admin interface. To do this, create a file called ``admin.py`` in your "
"``polls`` directory, and edit it to look like this::"
msgstr ""

# 68351f93ef124864906804d6a38f33d4
#: ../../intro/tutorial02.txt:121
msgid ""
"You'll need to restart the development server to see your changes. Normally,"
" the server auto-reloads code every time you modify a file, but the action "
"of creating a new file doesn't trigger the auto-reloading logic."
msgstr ""

# 41de2ba5bb13448681077c37f38c0289
#: ../../intro/tutorial02.txt:126
msgid "Explore the free admin functionality"
msgstr ""

# ad29732735f445bc918a196624108632
#: ../../intro/tutorial02.txt:128
msgid ""
"Now that we've registered ``Poll``, Django knows that it should be displayed"
" on the admin index page:"
msgstr ""

# 1ccb65191e7c40bbbc25cc266d7a475b
#: ../../intro/tutorial02.txt:134
msgid ""
"Click \"Polls.\" Now you're at the \"change list\" page for polls. This page"
" displays all the polls in the database and lets you choose one to change "
"it. There's the \"What's up?\" poll we created in the first tutorial:"
msgstr ""

# 0636f8822eab476085c32e9c995091b7
#: ../../intro/tutorial02.txt:141
msgid "Click the \"What's up?\" poll to edit it:"
msgstr ""

# 528fddc7483144bc90e728a989d6bcff
#: ../../intro/tutorial02.txt:146
msgid "Things to note here:"
msgstr ""

# 0116c899c72d43df8ad81947a5228b94
#: ../../intro/tutorial02.txt:148
msgid "The form is automatically generated from the Poll model."
msgstr ""

# 971c664423234215abeb311aedab7d88
#: ../../intro/tutorial02.txt:150
msgid ""
"The different model field types (:class:`~django.db.models.DateTimeField`, "
":class:`~django.db.models.CharField`) correspond to the appropriate HTML "
"input widget. Each type of field knows how to display itself in the Django "
"admin."
msgstr ""

# 8594106308694af39c85f09d541b24f2
#: ../../intro/tutorial02.txt:155
msgid ""
"Each :class:`~django.db.models.DateTimeField` gets free JavaScript "
"shortcuts. Dates get a \"Today\" shortcut and calendar popup, and times get "
"a \"Now\" shortcut and a convenient popup that lists commonly entered times."
msgstr ""

# e721fead862c4d41978b7f4719cde27a
#: ../../intro/tutorial02.txt:159
msgid "The bottom part of the page gives you a couple of options:"
msgstr ""

# 8d98c48248484fcf9ea3bfcb2182171c
#: ../../intro/tutorial02.txt:161
msgid ""
"Save -- Saves changes and returns to the change-list page for this type of "
"object."
msgstr ""

# 32c1c08e2cd042dcb401763d236ac012
#: ../../intro/tutorial02.txt:164
msgid ""
"Save and continue editing -- Saves changes and reloads the admin page for "
"this object."
msgstr ""

# 42675c26a79d486c989f3c9803080566
#: ../../intro/tutorial02.txt:167
msgid ""
"Save and add another -- Saves changes and loads a new, blank form for this "
"type of object."
msgstr ""

# 5be6e4d0f3dd4730b682df6b170a3c96
#: ../../intro/tutorial02.txt:170
msgid "Delete -- Displays a delete confirmation page."
msgstr ""

# f89b0576bd394a69a0327a92db729421
#: ../../intro/tutorial02.txt:172
msgid ""
"If the value of \"Date published\" doesn't match the time when you created "
"the poll in Tutorial 1, it probably means you forgot to set the correct "
"value for the :setting:`TIME_ZONE` setting. Change it, reload the page and "
"check that the correct value appears."
msgstr ""

# 2a10f254895f468c81accc192bf3d819
#: ../../intro/tutorial02.txt:177
msgid ""
"Change the \"Date published\" by clicking the \"Today\" and \"Now\" "
"shortcuts. Then click \"Save and continue editing.\" Then click \"History\" "
"in the upper right. You'll see a page listing all changes made to this "
"object via the Django admin, with the timestamp and username of the person "
"who made the change:"
msgstr ""

# ae275b8d66d9488687db06530ed7b914
#: ../../intro/tutorial02.txt:186
msgid "Customize the admin form"
msgstr ""

# 4675730ef501429485971d6337f8fb68
#: ../../intro/tutorial02.txt:188
msgid ""
"Take a few minutes to marvel at all the code you didn't have to write. By "
"registering the Poll model with ``admin.site.register(Poll)``, Django was "
"able to construct a default form representation. Often, you'll want to "
"customize how the admin form looks and works. You'll do this by telling "
"Django the options you want when you register the object."
msgstr ""

# f5e978305764458ca7a1f3820f1693e6
#: ../../intro/tutorial02.txt:194
msgid ""
"Let's see how this works by re-ordering the fields on the edit form. Replace"
" the ``admin.site.register(Poll)`` line with::"
msgstr ""

# f696d053703f4fdeb32652c3b3031261
#: ../../intro/tutorial02.txt:202
msgid ""
"You'll follow this pattern -- create a model admin object, then pass it as "
"the second argument to ``admin.site.register()`` -- any time you need to "
"change the admin options for an object."
msgstr ""

# ba1b2ce8fd784bafae2bc0465bc5423b
#: ../../intro/tutorial02.txt:206
msgid ""
"This particular change above makes the \"Publication date\" come before the "
"\"Question\" field:"
msgstr ""

# 4a763cdecfa54bc9a220549026eae68c
#: ../../intro/tutorial02.txt:212
msgid ""
"This isn't impressive with only two fields, but for admin forms with dozens "
"of fields, choosing an intuitive order is an important usability detail."
msgstr ""

# 9d73a5debe2b4fcea0e84de8eb6f3618
#: ../../intro/tutorial02.txt:215
msgid ""
"And speaking of forms with dozens of fields, you might want to split the "
"form up into fieldsets::"
msgstr ""

# ec512b3a8952494f9cd4e834c91440a7
#: ../../intro/tutorial02.txt:226
msgid ""
"The first element of each tuple in ``fieldsets`` is the title of the "
"fieldset. Here's what our form looks like now:"
msgstr ""

# ffac419c0da84de58507f5bbd9abd65c
#: ../../intro/tutorial02.txt:232
msgid ""
"You can assign arbitrary HTML classes to each fieldset. Django provides a "
"``\"collapse\"`` class that displays a particular fieldset initially "
"collapsed. This is useful when you have a long form that contains a number "
"of fields that aren't commonly used::"
msgstr ""

# 01d158cb64374785be47a9138d010108
#: ../../intro/tutorial02.txt:247
msgid "Adding related objects"
msgstr ""

# c3eacd82af7a43988630cf4d2b149c28
#: ../../intro/tutorial02.txt:249
msgid ""
"OK, we have our Poll admin page. But a ``Poll`` has multiple ``Choices``, "
"and the admin page doesn't display choices."
msgstr ""

# 339899fd0940469d8feee25d324095cc
#: ../../intro/tutorial02.txt:252
msgid "Yet."
msgstr ""

# 58af0a7219cd4f948c58d4b13d22667b
#: ../../intro/tutorial02.txt:254
msgid ""
"There are two ways to solve this problem. The first is to register "
"``Choice`` with the admin just as we did with ``Poll``. That's easy::"
msgstr ""

# 43cbab96083e46cd8ee3098e96f58726
#: ../../intro/tutorial02.txt:261
msgid ""
"Now \"Choices\" is an available option in the Django admin. The \"Add "
"choice\" form looks like this:"
msgstr ""

# 340c2a977fe740e98da6a946286e8595
#: ../../intro/tutorial02.txt:267
msgid ""
"In that form, the \"Poll\" field is a select box containing every poll in "
"the database. Django knows that a :class:`~django.db.models.ForeignKey` "
"should be represented in the admin as a ``<select>`` box. In our case, only "
"one poll exists at this point."
msgstr ""

# d1898c417c3045249b27ae5313868359
#: ../../intro/tutorial02.txt:272
msgid ""
"Also note the \"Add Another\" link next to \"Poll.\" Every object with a "
"``ForeignKey`` relationship to another gets this for free. When you click "
"\"Add Another,\" you'll get a popup window with the \"Add poll\" form. If "
"you add a poll in that window and click \"Save,\" Django will save the poll "
"to the database and dynamically add it as the selected choice on the \"Add "
"choice\" form you're looking at."
msgstr ""

# ca583b03efd54af9a59cbe781486bbd0
#: ../../intro/tutorial02.txt:279
msgid ""
"But, really, this is an inefficient way of adding ``Choice`` objects to the "
"system. It'd be better if you could add a bunch of Choices directly when you"
" create the ``Poll`` object. Let's make that happen."
msgstr ""

# 1d50284ab9804a87824269e7b9f1c43f
#: ../../intro/tutorial02.txt:283
msgid ""
"Remove the ``register()`` call for the ``Choice`` model. Then, edit the "
"``Poll`` registration code to read::"
msgstr ""

# 3ba27ccc1eb846ff8c1d698743e28f3a
#: ../../intro/tutorial02.txt:302
msgid ""
"This tells Django: \"``Choice`` objects are edited on the ``Poll`` admin "
"page. By default, provide enough fields for 3 choices.\""
msgstr ""

# a179bbc5d4104833a38ff756143f231b
#: ../../intro/tutorial02.txt:305
msgid ""
"Load the \"Add poll\" page to see how that looks, you may need to restart "
"your development server:"
msgstr ""

# 4c61adee55c04aae80962c8571d90f45
#: ../../intro/tutorial02.txt:310
msgid ""
"It works like this: There are three slots for related Choices -- as "
"specified by ``extra`` -- and each time you come back to the \"Change\" page"
" for an already-created object, you get another three extra slots."
msgstr ""

# de3a4f121f7b41b18058d15d29d94f3f
#: ../../intro/tutorial02.txt:314
msgid ""
"At the end of the three current slots you will find an \"Add another "
"Choice\" link.  If you click on it, a new slot will be added. If you want to"
" remove the added slot, you can click on the X to the top right of the added"
" slot. Note that you can't remove the original three slots. This image shows"
" an added slot:"
msgstr ""

# eced32e0e4df4ee6a09fbbdb7fe29c8c
#: ../../intro/tutorial02.txt:322
msgid ""
"One small problem, though. It takes a lot of screen space to display all the"
" fields for entering related ``Choice`` objects. For that reason, Django "
"offers a tabular way of displaying inline related objects; you just need to "
"change the ``ChoiceInline`` declaration to read::"
msgstr ""

# c8cc2db1be0447a7bdb11d17976a10fb
#: ../../intro/tutorial02.txt:330
msgid ""
"With that ``TabularInline`` (instead of ``StackedInline``), the related "
"objects are displayed in a more compact, table-based format:"
msgstr ""

# e37c0ac13be14ebdaf8035892db74deb
#: ../../intro/tutorial02.txt:336
msgid ""
"Note that there is an extra \"Delete?\" column that allows removing rows "
"added using the \"Add Another Choice\" button and rows that have already "
"been saved."
msgstr ""

# aebede19cb724d039b3185e152e13af4
#: ../../intro/tutorial02.txt:340
msgid "Customize the admin change list"
msgstr ""

# 370d1dec59de44c3b42ca9b05b9d2a56
#: ../../intro/tutorial02.txt:342
msgid ""
"Now that the Poll admin page is looking good, let's make some tweaks to the "
"\"change list\" page -- the one that displays all the polls in the system."
msgstr ""

# 5d8a15963d7e41b6b48a906d1646b82e
#: ../../intro/tutorial02.txt:345
msgid "Here's what it looks like at this point:"
msgstr ""

# 186ce5b4bd564b6e9691277421c804e9
#: ../../intro/tutorial02.txt:350
msgid ""
"By default, Django displays the ``str()`` of each object. But sometimes it'd"
" be more helpful if we could display individual fields. To do that, use the "
"``list_display`` admin option, which is a tuple of field names to display, "
"as columns, on the change list page for the object::"
msgstr ""

# b7cbce965061496e81d9a0b0575dd753
#: ../../intro/tutorial02.txt:359
msgid ""
"Just for good measure, let's also include the ``was_published_recently`` "
"custom method from Tutorial 1::"
msgstr ""

# 51a4a9541f6b4c5b9e1f8e291ec462d1
#: ../../intro/tutorial02.txt:366
msgid "Now the poll change list page looks like this:"
msgstr ""

# a8ddce39463f4d1bb6c121e55177fdd0
#: ../../intro/tutorial02.txt:371
msgid ""
"You can click on the column headers to sort by those values -- except in the"
" case of the ``was_published_recently`` header, because sorting by the "
"output of an arbitrary method is not supported. Also note that the column "
"header for ``was_published_recently`` is, by default, the name of the method"
" (with underscores replaced with spaces), and that each line contains the "
"string representation of the output."
msgstr ""

# 45786ce9ebfc45d7947640613184972a
#: ../../intro/tutorial02.txt:378
msgid ""
"You can improve that by giving that method (in ``models.py``) a few "
"attributes, as follows::"
msgstr ""

# d4c2b07704564880af218f2eb987c3e5
#: ../../intro/tutorial02.txt:389
msgid ""
"Edit your admin.py file again and add an improvement to the Poll change list"
" page: Filters. Add the following line to ``PollAdmin``::"
msgstr ""

# 827d56e43c484c789c9bd301a17ea4a5
#: ../../intro/tutorial02.txt:394
msgid ""
"That adds a \"Filter\" sidebar that lets people filter the change list by "
"the ``pub_date`` field:"
msgstr ""

# 5e10da10e4fe4c86b5d935ec82f3c046
#: ../../intro/tutorial02.txt:400
msgid ""
"The type of filter displayed depends on the type of field you're filtering "
"on. Because ``pub_date`` is a :class:`~django.db.models.DateTimeField`, "
"Django knows to give appropriate filter options: \"Any date,\" \"Today,\" "
"\"Past 7 days,\" \"This month,\" \"This year.\""
msgstr ""

# ad08ee8342834c33a5e0e337302b0a80
#: ../../intro/tutorial02.txt:405
msgid "This is shaping up well. Let's add some search capability::"
msgstr ""

# 9c79874e580f475dbd99f4ad19121672
#: ../../intro/tutorial02.txt:409
msgid ""
"That adds a search box at the top of the change list. When somebody enters "
"search terms, Django will search the ``question`` field. You can use as many"
" fields as you'd like -- although because it uses a ``LIKE`` query behind "
"the scenes, keep it reasonable, to keep your database happy."
msgstr ""

# 5ec8121fae624d27922a5e7d8b25f4e0
#: ../../intro/tutorial02.txt:414
msgid ""
"Finally, because ``Poll`` objects have dates, it'd be convenient to be able "
"to drill down by date. Add this line::"
msgstr ""

# 449b43a674db462ca54fe8f2404af957
#: ../../intro/tutorial02.txt:419
msgid ""
"That adds hierarchical navigation, by date, to the top of the change list "
"page. At top level, it displays all available years. Then it drills down to "
"months and, ultimately, days."
msgstr ""

# 3995bd7f8994487ba49c24bae9133997
#: ../../intro/tutorial02.txt:423
msgid ""
"Now's also a good time to note that change lists give you free pagination. "
"The default is to display 100 items per page. Change-list pagination, search"
" boxes, filters, date-hierarchies and column-header-ordering all work "
"together like you think they should."
msgstr ""

# 99eff9cb96644039b77be2361c7bb9be
#: ../../intro/tutorial02.txt:429
msgid "Customize the admin look and feel"
msgstr ""

# 2e4d23b15aac4f2b94c13888848a7c11
#: ../../intro/tutorial02.txt:431
msgid ""
"Clearly, having \"Django administration\" at the top of each admin page is "
"ridiculous. It's just placeholder text."
msgstr ""

# 90866f7a4a58459680196f7fd4c1d5e9
#: ../../intro/tutorial02.txt:434
msgid ""
"That's easy to change, though, using Django's template system. The Django "
"admin is powered by Django itself, and its interfaces use Django's own "
"template system."
msgstr ""

# fc0e75ab765143e2910ab32761adafdb
#: ../../intro/tutorial02.txt:441
msgid "Customizing your *project's* templates"
msgstr ""

# 6e666d46eff348efb547a94cbddb769d
#: ../../intro/tutorial02.txt:443
msgid ""
"Create a ``templates`` directory in your project directory. Templates can "
"live anywhere on your filesystem that Django can access. (Django runs as "
"whatever user your server runs.) However, keeping your templates within the "
"project is a good convention to follow."
msgstr ""

# 786f117dcbe2461b8c8f14fb478dec8f
#: ../../intro/tutorial02.txt:448
msgid ""
"Open your settings file (``mysite/settings.py``, remember) and  add a "
":setting:`TEMPLATE_DIRS` setting::"
msgstr ""

# 3fa0e49ecc1c4a4daf31860ba8c8cf95
#: ../../intro/tutorial02.txt:455
msgid ""
"Now copy the template ``admin/base_site.html`` from within the default "
"Django admin template directory in the source code of Django itself "
"(``django/contrib/admin/templates``) into an ``admin`` subdirectory of "
"whichever directory you're using in :setting:`TEMPLATE_DIRS`. For example, "
"if your :setting:`TEMPLATE_DIRS` includes ``'/path/to/mysite/templates'``, "
"as above, then copy ``django/contrib/admin/templates/admin/base_site.html`` "
"to ``/path/to/mysite/templates/admin/base_site.html``. Don't forget that "
"``admin`` subdirectory."
msgstr ""

# 2d60f5e13a5948fd9e2fa04b037edd58
#: ../../intro/tutorial02.txt:466
msgid ""
"If you have difficulty finding where the Django source files are located on "
"your system, run the following command:"
msgstr ""

# b2cb609b942a4e0391b7e1f3a45711ef
#: ../../intro/tutorial02.txt:477
msgid ""
"Then, just edit the file and replace the generic Django text with your own "
"site's name as you see fit."
msgstr ""

# 4a9c1297c4484089bfeb945d744b8151
#: ../../intro/tutorial02.txt:480
msgid ""
"This template file contains lots of text like ``{% block branding %}`` and "
"``{{ title }}``. The ``{%`` and ``{{`` tags are part of Django's template "
"language. When Django renders ``admin/base_site.html``, this template "
"language will be evaluated to produce the final HTML page. Don't worry if "
"you can't make any sense of the template right now -- we'll delve into "
"Django's templating language in Tutorial 3."
msgstr ""

# 8c240d8f2bf54db7ae7d1f02614e9d8f
#: ../../intro/tutorial02.txt:487
msgid ""
"Note that any of Django's default admin templates can be overridden. To "
"override a template, just do the same thing you did with ``base_site.html`` "
"-- copy it from the default directory into your custom directory, and make "
"changes."
msgstr ""

# 0d9620e5be5e48f7942b0786068f92f2
#: ../../intro/tutorial02.txt:493
msgid "Customizing your *application's* templates"
msgstr ""

# 9d5ecbea0d05463698d718d9f5ca6cc1
#: ../../intro/tutorial02.txt:495
msgid ""
"Astute readers will ask: But if :setting:`TEMPLATE_DIRS` was empty by "
"default, how was Django finding the default admin templates? The answer is "
"that, by default, Django automatically looks for a ``templates/`` "
"subdirectory within each application package, for use as a fallback (don't "
"forget that ``django.contrib.admin`` is an application)."
msgstr ""

# f6d762f3051942068f88315dafc6778a
#: ../../intro/tutorial02.txt:501
msgid ""
"Our poll application is not very complex and doesn't need custom admin "
"templates. But if it grew more sophisticated and required modification of "
"Django's standard admin templates for some of its functionality, it would be"
" more sensible to modify the *application's* templates, rather than those in"
" the *project*. That way, you could include the polls application in any new"
" project and be assured that it would find the custom templates it needed."
msgstr ""

# 45f0ecfd463a4294b6409e18bd1cad88
#: ../../intro/tutorial02.txt:508
msgid ""
"See the :ref:`template loader documentation <template-loaders>` for more "
"information about how Django finds its templates."
msgstr ""

# 0fd05796f1fb43c99caad068f3748ac4
#: ../../intro/tutorial02.txt:512
msgid "Customize the admin index page"
msgstr ""

# 6db3bd345e5840eb81e88f6f57c06819
#: ../../intro/tutorial02.txt:514
msgid ""
"On a similar note, you might want to customize the look and feel of the "
"Django admin index page."
msgstr ""

# 772e1a81246c40f5b56b33585b305377
#: ../../intro/tutorial02.txt:517
msgid ""
"By default, it displays all the apps in :setting:`INSTALLED_APPS` that have "
"been registered with the admin application, in alphabetical order. You may "
"want to make significant changes to the layout. After all, the index is "
"probably the most important page of the admin, and it should be easy to use."
msgstr ""

# 6694b6814d7b4143a4f9bd0d8074e4f8
#: ../../intro/tutorial02.txt:522
msgid ""
"The template to customize is ``admin/index.html``. (Do the same as with "
"``admin/base_site.html`` in the previous section -- copy it from the default"
" directory to your custom template directory.) Edit the file, and you'll see"
" it uses a template variable called ``app_list``. That variable contains "
"every installed Django app. Instead of using that, you can hard-code links "
"to object-specific admin pages in whatever way you think is best. Again, "
"don't worry if you can't understand the template language -- we'll cover "
"that in more detail in Tutorial 3."
msgstr ""

# 987889d93c8e4881985f087f7d07a035
#: ../../intro/tutorial02.txt:531
msgid ""
"When you're comfortable with the admin site, read :doc:`part 3 of this "
"tutorial </intro/tutorial03>` to start working on public poll views."
msgstr ""

# 551480d07d314a9d821cfbe09c7c3860
#: ../../intro/tutorial03.txt:3
msgid "Writing your first Django app, part 3"
msgstr ""

# a3b1f3e1f31048e1a51d1af22ced864d
#: ../../intro/tutorial03.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 2 </intro/tutorial02>` left off. "
"We're continuing the Web-poll application and will focus on creating the "
"public interface -- \"views.\""
msgstr ""

# c455474cb472440e8f57d7ac5130ff36
#: ../../intro/tutorial03.txt:10
msgid "Philosophy"
msgstr ""

# 65a36d8a2c1e4884850ad9017484abcd
#: ../../intro/tutorial03.txt:12
msgid ""
"A view is a \"type\" of Web page in your Django application that generally "
"serves a specific function and has a specific template. For example, in a "
"blog application, you might have the following views:"
msgstr ""

# 76d7ea22c58e4acbae393791090c46cd
#: ../../intro/tutorial03.txt:16
msgid "Blog homepage -- displays the latest few entries."
msgstr ""

# 74cdead710c849bcb3ac50f0ec3e6221
#: ../../intro/tutorial03.txt:18
msgid "Entry \"detail\" page -- permalink page for a single entry."
msgstr ""

# d2ae9eee986542b58e9aecc283b9a781
#: ../../intro/tutorial03.txt:20
msgid ""
"Year-based archive page -- displays all months with entries in the given "
"year."
msgstr ""

# 03f10dee1593497ab1dd005db6874c9e
#: ../../intro/tutorial03.txt:23
msgid ""
"Month-based archive page -- displays all days with entries in the given "
"month."
msgstr ""

# b3337357066f41d49439f16f24fe09bf
#: ../../intro/tutorial03.txt:26
msgid "Day-based archive page -- displays all entries in the given day."
msgstr ""

# 5b54bb57462849ec8d63cf413d321f47
#: ../../intro/tutorial03.txt:28
msgid "Comment action -- handles posting comments to a given entry."
msgstr ""

# 1f0717b082824b8fa5f246c991736071
#: ../../intro/tutorial03.txt:30
msgid "In our poll application, we'll have the following four views:"
msgstr ""

# 1b9b17ebfdac4b1896cbae0f97bd0386
#: ../../intro/tutorial03.txt:32
msgid "Poll \"index\" page -- displays the latest few polls."
msgstr ""

# 8c019be154774b388f01fbc817486f21
#: ../../intro/tutorial03.txt:34
msgid ""
"Poll \"detail\" page -- displays a poll question, with no results but with a"
" form to vote."
msgstr ""

# 6c03d364fffd401eb4743876f7f0f991
#: ../../intro/tutorial03.txt:37
msgid "Poll \"results\" page -- displays results for a particular poll."
msgstr ""

# e048961dc953454880ffe8c3c99828da
#: ../../intro/tutorial03.txt:39
msgid ""
"Vote action -- handles voting for a particular choice in a particular poll."
msgstr ""

# 5aef1e30dc114d6e8ddb45f5068614c6
#: ../../intro/tutorial03.txt:42
msgid ""
"In Django, web pages and other content are delivered by views. Each view is "
"represented by a simple Python function (or method, in the case of class-"
"based views). Django will choose a view by examining the URL that's "
"requested (to be precise, the part of the URL after the domain name)."
msgstr ""

# 8d495cc7d6054c94944d0838effb5ef4
#: ../../intro/tutorial03.txt:47
msgid ""
"Now in your time on the web you may have come across such beauties as "
"\"ME2/Sites/dirmod.asp?sid=&type=gen&mod=Core+Pages&gid=A6CD4967199A42D9B65B1B\"."
" You will be pleased to know that Django allows us much more elegant *URL "
"patterns* than that."
msgstr ""

# c4535ead5d4841dfa4f2846d2e5f5928
#: ../../intro/tutorial03.txt:52
msgid ""
"A URL pattern is simply the general form of a URL - for example: "
"``/newsarchive/<year>/<month>/``."
msgstr ""

# ee015610da804f27ae709277ef6ff0e7
#: ../../intro/tutorial03.txt:55
msgid ""
"To get from a URL to a view, Django uses what are known as 'URLconfs'. A "
"URLconf maps URL patterns (described as regular expressions) to views."
msgstr ""

# f8ae053efec3484f9d3ff5cdf646f439
#: ../../intro/tutorial03.txt:58
msgid ""
"This tutorial provides basic instruction in the use of URLconfs, and you can"
" refer to :mod:`django.core.urlresolvers` for more information."
msgstr ""

# d16f0758ceec455fb28c5f85c07e2d05
#: ../../intro/tutorial03.txt:62
msgid "Write your first view"
msgstr ""

# 798a6d584b72415d8c481e91908e9cf0
#: ../../intro/tutorial03.txt:64
msgid ""
"Let's write the first view. Open the file ``polls/views.py`` and put the "
"following Python code in it::"
msgstr ""

# 398a82e195514323bef5137ac839be39
#: ../../intro/tutorial03.txt:72
msgid ""
"This is the simplest view possible in Django. To call the view, we need to "
"map it to a URL - and for this we need a URLconf."
msgstr ""

# 3e23601c01054ad78f1164bcf79f952c
#: ../../intro/tutorial03.txt:75
msgid ""
"To create a URLconf in the polls directory, create a file called "
"``urls.py``. Your app directory should now look like::"
msgstr ""

# f6b983cab88d48cba6a0ebab4186ee36
#: ../../intro/tutorial03.txt:86
msgid "In the ``polls/urls.py`` file include the following code::"
msgstr ""

# 404389cdf81d4320a5a0fceb2e052e1f
#: ../../intro/tutorial03.txt:96
msgid ""
"The next step is to point the root URLconf at the ``polls.urls`` module. In "
"``mysite/urls.py`` insert an :func:`~django.conf.urls.include`, leaving you "
"with::"
msgstr ""

# 284de094957c4387af92d4cc5dec652e
#: ../../intro/tutorial03.txt:110
msgid ""
"You have now wired an ``index`` view into the URLconf. Go to "
"http://localhost:8000/polls/ in your browser, and you should see the text "
"\"*Hello, world. You're at the poll index.*\", which you defined in the "
"``index`` view."
msgstr ""

# 071eeea544ec47a8be45ffda2c4813f6
#: ../../intro/tutorial03.txt:115
msgid ""
"The :func:`~django.conf.urls.url` function is passed four arguments, two "
"required: ``regex`` and ``view``, and two optional: ``kwargs``, and "
"``name``. At this point, it's worth reviewing what these arguments are for."
msgstr ""

# 903a55d1b8db48f195ee8adf5e736284
#: ../../intro/tutorial03.txt:120
msgid ":func:`~django.conf.urls.url` argument: regex"
msgstr ""

# 402919c10f654e9a863263685a777218
#: ../../intro/tutorial03.txt:122
msgid ""
"The term \"regex\" is a commonly used short form meaning \"regular "
"expression\", which is a syntax for matching patterns in strings, or in this"
" case, url patterns. Django starts at the first regular expression and makes"
" its way down the list,  comparing the requested URL against each regular "
"expression until it finds one that matches."
msgstr ""

# 03e27808c7b643c1a6b18b18e440eeee
#: ../../intro/tutorial03.txt:128
msgid ""
"Note that these regular expressions do not search GET and POST parameters, "
"or the domain name. For example, in a request to "
"``http://www.example.com/myapp/``, the URLconf will look for ``myapp/``. In "
"a request to ``http://www.example.com/myapp/?page=3``, the URLconf will also"
" look for ``myapp/``."
msgstr ""

# e42b7cbf75294033b35ab167e2f4b611
#: ../../intro/tutorial03.txt:134
msgid ""
"If you need help with regular expressions, see `Wikipedia's entry`_ and the "
"documentation of the :mod:`re` module. Also, the O'Reilly book \"Mastering "
"Regular Expressions\" by Jeffrey Friedl is fantastic. In practice, however, "
"you don't need to be an expert on regular expressions, as you really only "
"need to know how to capture simple patterns. In fact, complex regexes can "
"have poor lookup performance, so you probably shouldn't rely on the full "
"power of regexes."
msgstr ""

# 63c9bf4fc20a4fd8a806d32ddba16ff1
#: ../../intro/tutorial03.txt:141
msgid ""
"Finally, a performance note: these regular expressions are compiled the "
"first time the URLconf module is loaded. They're super fast (as long as the "
"lookups aren't too complex as noted above)."
msgstr ""

# ae07d95762e64b43a078b535d49e1328
#: ../../intro/tutorial03.txt:148
msgid ":func:`~django.conf.urls.url` argument: view"
msgstr ""

# b5eac18049374b1b8ae74352380427a2
#: ../../intro/tutorial03.txt:150
msgid ""
"When Django finds a regular expression match, Django calls the specified "
"view function, with an :class:`~django.http.HttpRequest` object as the first"
" argument and any “captured” values from the regular expression as other "
"arguments. If the regex uses simple captures, values are passed as "
"positional arguments; if it uses named captures, values are passed as "
"keyword arguments. We'll give an example of this in a bit."
msgstr ""

# 06d90559f46345a498027b341067f9a1
#: ../../intro/tutorial03.txt:158
msgid ":func:`~django.conf.urls.url` argument: kwargs"
msgstr ""

# 5c8179c7020248d898fa69a8024a4a24
#: ../../intro/tutorial03.txt:160
msgid ""
"Arbitrary keyword arguments can be passed in a dictionary to the target "
"view. We aren't going to use this feature of Django in the tutorial."
msgstr ""

# e314cc110dc8463997bcc719af02874a
#: ../../intro/tutorial03.txt:164
msgid ":func:`~django.conf.urls.url` argument: name"
msgstr ""

# cfae1e1481454c9ca1e449db976e64db
#: ../../intro/tutorial03.txt:166
msgid ""
"Naming your URL lets you refer to it unambiguously from elsewhere in Django "
"especially templates. This powerful feature allows you to make  global "
"changes to the url patterns of your project while only touching a single "
"file."
msgstr ""

# 28a26d00bec64d8281d3b396a66d2c06
#: ../../intro/tutorial03.txt:171
msgid "Writing more views"
msgstr ""

# 01b9ed7a0be341e0b693fdaca56d984c
#: ../../intro/tutorial03.txt:173
msgid ""
"Now let's add a few more views to ``polls/views.py``. These views are "
"slightly different, because they take an argument::"
msgstr ""

# e9618fc3f2e648b78e90ad35d36a4879
#: ../../intro/tutorial03.txt:185
msgid ""
"Wire these news views into the ``polls.urls`` module by adding the following"
" :func:`~django.conf.urls.url` calls::"
msgstr ""

# 7ddc00d885cf42708d9e2cde1cb143ad
#: ../../intro/tutorial03.txt:203
msgid ""
"Take a look in your browser, at \"/polls/34/\". It'll run the ``detail()`` "
"method and display whatever ID you provide in the URL. Try "
"\"/polls/34/results/\" and \"/polls/34/vote/\" too -- these will display the"
" placeholder results and voting pages."
msgstr ""

# 7f8a86a397d645188ca22f315ce94649
#: ../../intro/tutorial03.txt:208
msgid ""
"When somebody requests a page from your Web site -- say, \"/polls/34/\", "
"Django will load the ``mysite.urls`` Python module because it's pointed to "
"by the :setting:`ROOT_URLCONF` setting. It finds the variable named "
"``urlpatterns`` and traverses the regular expressions in order. The "
":func:`~django.conf.urls.include` functions we are using simply reference "
"other URLconfs. Note that the regular expressions for the "
":func:`~django.conf.urls.include` functions don't have a ``$`` (end-of-"
"string match character) but rather a trailing slash. Whenever Django "
"encounters :func:`~django.conf.urls.include`, it chops off whatever part of "
"the URL matched up to that point and sends the remaining string to the "
"included URLconf for further processing."
msgstr ""

# 199126850035448bbe801273bca90b81
#: ../../intro/tutorial03.txt:220
msgid ""
"The idea behind :func:`~django.conf.urls.include` is to make it easy to "
"plug-and-play URLs. Since polls are in their own URLconf "
"(``polls/urls.py``), they can be placed under \"/polls/\", or under "
"\"/fun_polls/\", or under \"/content/polls/\", or any other path root, and "
"the app will still work."
msgstr ""

# cc519bf7460943cfb5f480a0b8541ff3
#: ../../intro/tutorial03.txt:226
msgid "Here's what happens if a user goes to \"/polls/34/\" in this system:"
msgstr ""

# 7a193b9d1a4942beb00e87dfdee2f1c7
#: ../../intro/tutorial03.txt:228
msgid "Django will find the match at ``'^polls/'``"
msgstr ""

# 6c5d79e81d7a40a4bb13c2cee3ade072
#: ../../intro/tutorial03.txt:230
msgid ""
"Then, Django will strip off the matching text (``\"polls/\"``) and send the "
"remaining text -- ``\"34/\"`` -- to the 'polls.urls' URLconf for further "
"processing which matches ``r'^(?P<poll_id>\\d+)/$'`` resulting in a call to "
"the ``detail()`` view like so::"
msgstr ""

# 6b704624a3034794975c57708c92cd5c
#: ../../intro/tutorial03.txt:237
msgid ""
"The ``poll_id='34'`` part comes from ``(?P<poll_id>\\d+)``. Using "
"parentheses around a pattern \"captures\" the text matched by that pattern "
"and sends it as an argument to the view function; ``?P<poll_id>`` defines "
"the name that will be used to identify the matched pattern; and ``\\d+`` is "
"a regular expression to match a sequence of digits (i.e., a number)."
msgstr ""

# 8c3811491f8442c4b94db5685c8446c8
#: ../../intro/tutorial03.txt:243
msgid ""
"Because the URL patterns are regular expressions, there really is no limit "
"on what you can do with them. And there's no need to add URL cruft such as "
"``.html`` -- unless you want to, in which case you can do something like "
"this::"
msgstr ""

# b3045f47d91943e7821695424667820d
#: ../../intro/tutorial03.txt:250
msgid "But, don't do that. It's silly."
msgstr ""

# 5434f68c421a4b759c31cd9fe6fe2203
#: ../../intro/tutorial03.txt:253
msgid "Write views that actually do something"
msgstr ""

# ad12895a27414d0b812f90dc3406585e
#: ../../intro/tutorial03.txt:255
msgid ""
"Each view is responsible for doing one of two things: returning an "
":class:`~django.http.HttpResponse` object containing the content for the "
"requested page, or raising an exception such as :exc:`~django.http.Http404`."
" The rest is up to you."
msgstr ""

# 4026937185e24fd39eaf5772e832e61c
#: ../../intro/tutorial03.txt:260
msgid ""
"Your view can read records from a database, or not. It can use a template "
"system such as Django's -- or a third-party Python template system -- or "
"not. It can generate a PDF file, output XML, create a ZIP file on the fly, "
"anything you want, using whatever Python libraries you want."
msgstr ""

# eb8dbe47161d47adaabf0877bf12ec92
#: ../../intro/tutorial03.txt:265
msgid ""
"All Django wants is that :class:`~django.http.HttpResponse`. Or an "
"exception."
msgstr ""

# 1415e213820c426ba68e9eda8312e8b6
#: ../../intro/tutorial03.txt:267
msgid ""
"Because it's convenient, let's use Django's own database API, which we "
"covered in :doc:`Tutorial 1 </intro/tutorial01>`. Here's one stab at the "
"``index()`` view, which displays the latest 5 poll questions in the system, "
"separated by commas, according to publication date::"
msgstr ""

# a53306b8bad046e6b4dd64aff5c1af58
#: ../../intro/tutorial03.txt:281
msgid ""
"There's a problem here, though: the page's design is hard-coded in the view."
" If you want to change the way the page looks, you'll have to edit this "
"Python code. So let's use Django's template system to separate the design "
"from Python by creating a template that the view can use."
msgstr ""

# 0043033f847543cd97725cdc61dfc914
#: ../../intro/tutorial03.txt:286
msgid ""
"First, create a directory called ``templates`` in your ``polls`` directory. "
"Django will look for templates in there."
msgstr ""

# 4c327cc5a8bc41d488b132ef8cd21879
#: ../../intro/tutorial03.txt:289
msgid ""
"Django's :setting:`TEMPLATE_LOADERS` setting contains a list of callables "
"that know how to import templates from various sources. One of the defaults "
"is :class:`django.template.loaders.app_directories.Loader` which looks for a"
" \"templates\" subdirectory in each of the :setting:`INSTALLED_APPS` - this "
"is how Django knows to find the polls templates even though we didn't modify"
" :setting:`TEMPLATE_DIRS`, as we did in :ref:`Tutorial 2 <ref-customizing-"
"your-projects-templates>`."
msgstr ""

# 7b2d5d621da946d580da731caebd6203
#: ../../intro/tutorial03.txt:299
msgid ""
"We *could* have all our templates together, in one big templates directory, "
"and it would work perfectly well. However, this template belongs to the "
"polls application, so unlike the admin template we created in the previous "
"tutorial, we'll put this one in the application's template directory "
"(``polls/templates``) rather than the project's (``templates``). We'll "
"discuss in more detail in the :doc:`reusable apps tutorial </intro/reusable-"
"apps>` *why* we do this."
msgstr ""

# 23c43e69eac947d8be68ae7da1167eb8
#: ../../intro/tutorial03.txt:307
msgid ""
"Within the ``templates`` directory you have just created, create another "
"directory called ``polls``, and within that create a file called "
"``index.html``. In other words, your template should be at "
"``polls/templates/polls/index.html``. Because of how the ``app_directories``"
" template loader works as described above, you can refer to this template "
"within Django simply as ``polls/index.html``."
msgstr ""

# 6472cebd501a43c4831db514e37fbef3
#: ../../intro/tutorial03.txt:316
msgid ""
"Now we *might* be able to get away with putting our templates directly in "
"``polls/templates`` (rather than creating another ``polls`` subdirectory), "
"but it would actually be a bad idea. Django will choose the first template "
"it finds whose name matches, and if you had a template with the same name in"
" a *different* application, Django would be unable to distinguish between "
"them. We need to be able to point Django at the right one, and the easiest "
"way to ensure this is by *namespacing* them. That is, by putting those "
"templates inside *another* directory named for the application itself."
msgstr ""

# 65631b02c9be48e9a9e243aed002d4a9
#: ../../intro/tutorial03.txt:325
msgid "Put the following code in that template:"
msgstr ""

# 412b6a5663e34b14ab57e13352e266f1
#: ../../intro/tutorial03.txt:339
msgid "Now let's use that html template in our index view::"
msgstr ""

# 364b2fc771c24db4a06099584689f532
#: ../../intro/tutorial03.txt:354
msgid ""
"That code loads the template called  ``polls/index.html`` and passes it a "
"context. The context is a dictionary mapping template variable names to "
"Python objects."
msgstr ""

# 645f4e16c6aa4b4da106d2a562846208
#: ../../intro/tutorial03.txt:358
msgid ""
"Load the page by pointing your browser at \"/polls/\", and you should see a "
"bulleted-list containing the \"What's up\" poll from Tutorial 1. The link "
"points to the poll's detail page."
msgstr ""

# 99ec1443deb04ce1a45e1dceca09f363
#: ../../intro/tutorial03.txt:363
msgid "A shortcut: :func:`~django.shortcuts.render`"
msgstr ""

# ab00965bcf0541018afb0f3f40cbd6b9
#: ../../intro/tutorial03.txt:365
msgid ""
"It's a very common idiom to load a template, fill a context and return an "
":class:`~django.http.HttpResponse` object with the result of the rendered "
"template. Django provides a shortcut. Here's the full ``index()`` view, "
"rewritten::"
msgstr ""

# e9999eaf6e734c4091ca74b9b73b1024
#: ../../intro/tutorial03.txt:379
msgid ""
"Note that once we've done this in all these views, we no longer need to "
"import :mod:`~django.template.loader`, :class:`~django.template.Context` and"
" :class:`~django.http.HttpResponse` (you'll want to keep ``HttpResponse`` if"
" you still have the stub methods for ``detail``, ``results``, and ``vote``)."
msgstr ""

# 9e57b142e2564545bd950df6ce924d16
#: ../../intro/tutorial03.txt:384
msgid ""
"The :func:`~django.shortcuts.render` function takes the request object as "
"its first argument, a template name as its second argument and a dictionary "
"as its optional third argument. It returns an "
":class:`~django.http.HttpResponse` object of the given template rendered "
"with the given context."
msgstr ""

# 352882e68d454eeaa6a382e384b383a1
#: ../../intro/tutorial03.txt:390
msgid "Raising a 404 error"
msgstr ""

# eac36202714144ac81c3406ee21d3ad9
#: ../../intro/tutorial03.txt:392
msgid ""
"Now, let's tackle the poll detail view -- the page that displays the "
"question for a given poll. Here's the view::"
msgstr ""

# 9ce30eb2f533402fa14102005f5a273e
#: ../../intro/tutorial03.txt:404
msgid ""
"The new concept here: The view raises the :exc:`~django.http.Http404` "
"exception if a poll with the requested ID doesn't exist."
msgstr ""

# 2f125c47e64b4efe838dddd07df312e0
#: ../../intro/tutorial03.txt:407
msgid ""
"We'll discuss what you could put in that ``polls/detail.html`` template a "
"bit later, but if you'd like to quickly get the above example working, a "
"file containing just::"
msgstr ""

# 747f9c6b9027470dac3b1a4396d7b2c6
#: ../../intro/tutorial03.txt:413
msgid "will get you started for now."
msgstr ""

# 8e0e515238424e9385c2c505d4966914
#: ../../intro/tutorial03.txt:416
msgid "A shortcut: :func:`~django.shortcuts.get_object_or_404`"
msgstr ""

# ed65ea95d4de41fa887d5afe6b86b6c5
#: ../../intro/tutorial03.txt:418
msgid ""
"It's a very common idiom to use :meth:`~django.db.models.query.QuerySet.get`"
" and raise :exc:`~django.http.Http404` if the object doesn't exist. Django "
"provides a shortcut. Here's the ``detail()`` view, rewritten::"
msgstr ""

# f55dacb06f3140c58e516ac9e0e1c932
#: ../../intro/tutorial03.txt:428
msgid ""
"The :func:`~django.shortcuts.get_object_or_404` function takes a Django "
"model as its first argument and an arbitrary number of keyword arguments, "
"which it passes to the :meth:`~django.db.models.query.QuerySet.get` function"
" of the model's manager. It raises :exc:`~django.http.Http404` if the object"
" doesn't exist."
msgstr ""

# 4646d52a3ef9496080b06a30ecdfc4e5
#: ../../intro/tutorial03.txt:436
msgid ""
"Why do we use a helper function :func:`~django.shortcuts.get_object_or_404` "
"instead of automatically catching the "
":exc:`~django.core.exceptions.ObjectDoesNotExist` exceptions at a higher "
"level, or having the model API raise :exc:`~django.http.Http404` instead of "
":exc:`~django.core.exceptions.ObjectDoesNotExist`?"
msgstr ""

# f19f4f15bb4646f19661b47c645d4014
#: ../../intro/tutorial03.txt:442
msgid ""
"Because that would couple the model layer to the view layer. One of the "
"foremost design goals of Django is to maintain loose coupling. Some "
"controlled coupling is introduced in the :mod:`django.shortcuts` module."
msgstr ""

# 272e386f057b4a92b9644abbcfe48890
#: ../../intro/tutorial03.txt:446
msgid ""
"There's also a :func:`~django.shortcuts.get_list_or_404` function, which "
"works just as :func:`~django.shortcuts.get_object_or_404` -- except using "
":meth:`~django.db.models.query.QuerySet.filter` instead of "
":meth:`~django.db.models.query.QuerySet.get`. It raises "
":exc:`~django.http.Http404` if the list is empty."
msgstr ""

# d9d3add3352f4da89a9d0d7831dd9b62
#: ../../intro/tutorial03.txt:453
msgid "Write a 404 (page not found) view"
msgstr ""

# cac2218bb5c241fda8408579d57f81ad
#: ../../intro/tutorial03.txt:455
msgid ""
"When you raise :exc:`~django.http.Http404` from within a view, Django will "
"load a special view devoted to handling 404 errors. It finds it by looking "
"for the variable ``handler404`` in your root URLconf (and only in your root "
"URLconf; setting ``handler404`` anywhere else will have no effect), which is"
" a string in Python dotted syntax -- the same format the normal URLconf "
"callbacks use. A 404 view itself has nothing special: It's just a normal "
"view."
msgstr ""

# a3985cf670964f1ea9300ab24638973c
#: ../../intro/tutorial03.txt:463
msgid ""
"You normally won't have to bother with writing 404 views. If you don't set "
"``handler404``, the built-in view "
":func:`django.views.defaults.page_not_found` is used by default. Optionally,"
" you can create a ``404.html`` template in the root of your template "
"directory. The default 404 view will then use that template for all 404 "
"errors when :setting:`DEBUG` is set to ``False`` (in your settings module). "
"If you do create the template, add at least some dummy content like \"Page "
"not found\"."
msgstr ""

# d9ff2bf5ff944f43a5651aac3f676747
#: ../../intro/tutorial03.txt:471
msgid "A couple more things to note about 404 views:"
msgstr ""

# bf64a5fe27864af89212f0cea6c3aadc
#: ../../intro/tutorial03.txt:473
msgid ""
"If :setting:`DEBUG` is set to ``True`` (in your settings module) then your "
"404 view will never be used (and thus the ``404.html`` template will never "
"be rendered) because the traceback will be displayed instead."
msgstr ""

# f3f16141784e4829a725dcad889e482e
#: ../../intro/tutorial03.txt:477
msgid ""
"The 404 view is also called if Django doesn't find a match after checking "
"every regular expression in the URLconf."
msgstr ""

# f25587bd340a4d99bd4cb42f3ff6c806
#: ../../intro/tutorial03.txt:481
msgid "Write a 500 (server error) view"
msgstr ""

# be856ca9a4a2475a9950657f405f9a5a
#: ../../intro/tutorial03.txt:483
msgid ""
"Similarly, your root URLconf may define a ``handler500``, which points to a "
"view to call in case of server errors. Server errors happen when you have "
"runtime errors in view code."
msgstr ""

# e25fa4178dc1462597111ff1283cc387
#: ../../intro/tutorial03.txt:487
msgid ""
"Likewise, you should create a ``500.html`` template at the root of your "
"template directory and add some content like \"Something went wrong\"."
msgstr ""

# cb54cc7f5ecd474e9f506504047583ca
#: ../../intro/tutorial03.txt:491
msgid "Use the template system"
msgstr ""

# 544ff0b2412249758487618a8072beca
#: ../../intro/tutorial03.txt:493
msgid ""
"Back to the ``detail()`` view for our poll application. Given the context "
"variable ``poll``, here's what the ``polls/detail.html`` template might look"
" like:"
msgstr ""

# d0ecdf3c01fd457bb2b7f721105c2b90
#: ../../intro/tutorial03.txt:506
msgid ""
"The template system uses dot-lookup syntax to access variable attributes. In"
" the example of ``{{ poll.question }}``, first Django does a dictionary "
"lookup on the object ``poll``. Failing that, it tries an attribute lookup --"
" which works, in this case. If attribute lookup had failed, it would've "
"tried a list-index lookup."
msgstr ""

# 345ac9c16a7c45c6a4ae4055f25a35da
#: ../../intro/tutorial03.txt:512
msgid ""
"Method-calling happens in the :ttag:`{% for %}<for>` loop: "
"``poll.choice_set.all`` is interpreted as the Python code "
"``poll.choice_set.all()``, which returns an iterable of ``Choice`` objects "
"and is suitable for use in the :ttag:`{% for %}<for>` tag."
msgstr ""

# f5320bd1af174cb5ae748e470baa3b6b
#: ../../intro/tutorial03.txt:517
msgid ""
"See the :doc:`template guide </topics/templates>` for more about templates."
msgstr ""

# 6cf9b7fd981740eeba9d5c125f53cc4a
#: ../../intro/tutorial03.txt:520
msgid "Removing hardcoded URLs in templates"
msgstr ""

# ae875f22cbc84b5fb1b46c414cdc8df4
#: ../../intro/tutorial03.txt:522
msgid ""
"Remember, when we wrote the link to a poll in the ``polls/index.html`` "
"template, the link was partially hardcoded like this:"
msgstr ""

# 74c332d522ba4126b8860bbbbb23992d
#: ../../intro/tutorial03.txt:529
msgid ""
"The problem with this hardcoded, tightly-coupled approach is that it becomes"
" challenging to change URLs on projects with a lot of templates. However, "
"since you defined the name argument in the :func:`~django.conf.urls.url` "
"functions in the ``polls.urls`` module, you can remove a reliance on "
"specific URL paths defined in your url configurations by using the ``{% url "
"%}`` template tag:"
msgstr ""

# a20366fb8f804fcdba4e81506f038c16
#: ../../intro/tutorial03.txt:541
msgid ""
"If ``{% url 'detail' poll.id %}`` (with quotes) doesn't work, but ``{% url "
"detail poll.id %}`` (without quotes) does, that means you're using a version"
" of Django < 1.5. In this case, add the following declaration at the top of "
"your template:"
msgstr ""

# 7a43b71c94b0434680946ce64fe576c4
#: ../../intro/tutorial03.txt:550
msgid ""
"The way this works is by looking up the URL definition as specified in the "
"``polls.urls`` module. You can see exactly where the URL name of 'detail' is"
" defined below::"
msgstr ""

# 15e66b9f3aef41a8bff4e44da4eb1463
#: ../../intro/tutorial03.txt:559
msgid ""
"If you want to change the URL of the polls detail view to something else, "
"perhaps to something like ``polls/specifics/12/`` instead of doing it in the"
" template (or templates) you would change it in ``polls/urls.py``::"
msgstr ""

# ae19b0c907564ef5b1e2bca3ca112a7e
#: ../../intro/tutorial03.txt:569
msgid "Namespacing URL names"
msgstr ""

# 5048aaf765974babb5a9fd7d76f1ee88
#: ../../intro/tutorial03.txt:571
msgid ""
"The tutorial project has just one app, ``polls``. In real Django projects, "
"there might be five, ten, twenty apps or more. How does Django differentiate"
" the URL names between them? For example, the ``polls`` app has a ``detail``"
" view, and so might an app on the same project that is for a blog. How does "
"one make it so that Django knows which app view to create for a url when "
"using the ``{% url %}`` template tag?"
msgstr ""

# 08f2231b73fd43eeab2e10ad6758535f
#: ../../intro/tutorial03.txt:578
msgid ""
"The answer is to add namespaces to your root URLconf. In the "
"``mysite/urls.py`` file (the project's ``urls.py``, not the application's), "
"go ahead and change it to include namespacing::"
msgstr ""

# 70270065a14241ccbc34b792fc530f1d
#: ../../intro/tutorial03.txt:592
msgid "Now change your ``polls/index.html`` template from:"
msgstr ""

# 954dd5e8306040ff8348ed46c423ae72
#: ../../intro/tutorial03.txt:598
msgid "to point at the namespaced detail view:"
msgstr ""

# e9f64a73cfe343efab87a27a64f22615
#: ../../intro/tutorial03.txt:604
msgid ""
"When you're comfortable with writing views, read :doc:`part 4 of this "
"tutorial </intro/tutorial04>` to learn about simple form processing and "
"generic views."
msgstr ""

# a2dfe97a1a6342bca3e4415e62342bb8
#: ../../intro/tutorial04.txt:3
msgid "Writing your first Django app, part 4"
msgstr ""

# 48f73412c88c459a90f1d98fed710b91
#: ../../intro/tutorial04.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 3 </intro/tutorial03>` left off. "
"We're continuing the Web-poll application and will focus on simple form "
"processing and cutting down our code."
msgstr ""

# be943e3999004a05889ce4acebfe402b
#: ../../intro/tutorial04.txt:10
msgid "Write a simple form"
msgstr ""

# 827a52d017e441ac8d89702b989c47db
#: ../../intro/tutorial04.txt:12
msgid ""
"Let's update our poll detail template (\"polls/detail.html\") from the last "
"tutorial, so that the template contains an HTML ``<form>`` element:"
msgstr ""

# 6885e6f2ac89420d9a478576bd202e54
#: ../../intro/tutorial04.txt:30
msgid "A quick rundown:"
msgstr ""

# 13998c71e9af4e959849734bf7174489
#: ../../intro/tutorial04.txt:32
msgid ""
"The above template displays a radio button for each poll choice. The "
"``value`` of each radio button is the associated poll choice's ID. The "
"``name`` of each radio button is ``\"choice\"``. That means, when somebody "
"selects one of the radio buttons and submits the form, it'll send the POST "
"data ``choice=3``. This is the basic concept of HTML forms."
msgstr ""

# 3808299421af4a1fa1355a5dc29b39e8
#: ../../intro/tutorial04.txt:38
msgid ""
"We set the form's ``action`` to ``{% url 'polls:vote' poll.id %}``, and we "
"set ``method=\"post\"``. Using ``method=\"post\"`` (as opposed to "
"``method=\"get\"``) is very important, because the act of submitting this "
"form will alter data server-side. Whenever you create a form that alters "
"data server-side, use ``method=\"post\"``. This tip isn't specific to "
"Django; it's just good Web development practice."
msgstr ""

# 894c2ae6c33e4905a5d82b4124d02429
#: ../../intro/tutorial04.txt:45
msgid ""
"``forloop.counter`` indicates how many times the :ttag:`for` tag has gone "
"through its loop"
msgstr ""

# 4b7268059232456984a9c7ff01d21741
#: ../../intro/tutorial04.txt:48
msgid ""
"Since we're creating a POST form (which can have the effect of modifying "
"data), we need to worry about Cross Site Request Forgeries. Thankfully, you "
"don't have to worry too hard, because Django comes with a very easy-to-use "
"system for protecting against it. In short, all POST forms that are targeted"
" at internal URLs should use the :ttag:`{% csrf_token %}<csrf_token>` "
"template tag."
msgstr ""

# 4b51eeeb2890443687f938d981cba1e9
#: ../../intro/tutorial04.txt:55
msgid ""
"Now, let's create a Django view that handles the submitted data and does "
"something with it. Remember, in :doc:`Tutorial 3 </intro/tutorial03>`, we "
"created a URLconf for the polls application that includes this line::"
msgstr ""

# 594b2980d91f408a9eb2e1fdd0a2563c
#: ../../intro/tutorial04.txt:61
msgid ""
"We also created a dummy implementation of the ``vote()`` function. Let's "
"create a real version. Add the following to ``polls/views.py``::"
msgstr ""

# db1cb39656a2439e8f7929b2c60a258b
#: ../../intro/tutorial04.txt:87
msgid ""
"This code includes a few things we haven't covered yet in this tutorial:"
msgstr ""

# 75e8715867594a78ab3ca6ed8e3611d0
#: ../../intro/tutorial04.txt:89
msgid ""
":attr:`request.POST <django.http.HttpRequest.POST>` is a dictionary-like "
"object that lets you access submitted data by key name. In this case, "
"``request.POST['choice']`` returns the ID of the selected choice, as a "
"string. :attr:`request.POST <django.http.HttpRequest.POST>` values are "
"always strings."
msgstr ""

# e21effd8c6af4e6297093614013d9ee1
#: ../../intro/tutorial04.txt:95
msgid ""
"Note that Django also provides :attr:`request.GET "
"<django.http.HttpRequest.GET>` for accessing GET data in the same way -- but"
" we're explicitly using :attr:`request.POST <django.http.HttpRequest.POST>` "
"in our code, to ensure that data is only altered via a POST call."
msgstr ""

# 802ef85612b54755813b0d0c9148bfd7
#: ../../intro/tutorial04.txt:101
msgid ""
"``request.POST['choice']`` will raise :exc:`~exceptions.KeyError` if "
"``choice`` wasn't provided in POST data. The above code checks for "
":exc:`~exceptions.KeyError` and redisplays the poll form with an error "
"message if ``choice`` isn't given."
msgstr ""

# 2f34e9bfe8584f11b9ab15aef052d99a
#: ../../intro/tutorial04.txt:106
msgid ""
"After incrementing the choice count, the code returns an "
":class:`~django.http.HttpResponseRedirect` rather than a normal "
":class:`~django.http.HttpResponse`. "
":class:`~django.http.HttpResponseRedirect` takes a single argument: the URL "
"to which the user will be redirected (see the following point for how we "
"construct the URL in this case)."
msgstr ""

# be449ecb63e24413a7f5d5890999ae7c
#: ../../intro/tutorial04.txt:113
msgid ""
"As the Python comment above points out, you should always return an "
":class:`~django.http.HttpResponseRedirect` after successfully dealing with "
"POST data. This tip isn't specific to Django; it's just good Web development"
" practice."
msgstr ""

# 8e95aec43c9b4034a868d674c5286265
#: ../../intro/tutorial04.txt:118
msgid ""
"We are using the :func:`~django.core.urlresolvers.reverse` function in the "
":class:`~django.http.HttpResponseRedirect` constructor in this example. This"
" function helps avoid having to hardcode a URL in the view function. It is "
"given the name of the view that we want to pass control to and the variable "
"portion of the URL pattern that points to that view. In this case, using the"
" URLconf we set up in Tutorial 3, this "
":func:`~django.core.urlresolvers.reverse` call will return a string like ::"
msgstr ""

# 456f8110ee4a4a7cb8941dd86d568803
#: ../../intro/tutorial04.txt:129
msgid ""
"... where the ``3`` is the value of ``p.id``. This redirected URL will then "
"call the ``'results'`` view to display the final page."
msgstr ""

# a0ebf448fb644e998caa94d4b92a8cc3
#: ../../intro/tutorial04.txt:132
msgid ""
"As mentioned in Tutorial 3, ``request`` is a "
":class:`~django.http.HttpRequest` object. For more on "
":class:`~django.http.HttpRequest` objects, see the :doc:`request and "
"response documentation </ref/request-response>`."
msgstr ""

# 96481e48b035410987940f5d78117e70
#: ../../intro/tutorial04.txt:136
msgid ""
"After somebody votes in a poll, the ``vote()`` view redirects to the results"
" page for the poll. Let's write that view::"
msgstr ""

# b870f855f8b64941862da573e980c270
#: ../../intro/tutorial04.txt:143
msgid ""
"This is almost exactly the same as the ``detail()`` view from :doc:`Tutorial"
" 3 </intro/tutorial03>`. The only difference is the template name. We'll fix"
" this redundancy later."
msgstr ""

# 5b75949a59df497ea1e35290e9121417
#: ../../intro/tutorial04.txt:147
msgid "Now, create a ``polls/results.html`` template:"
msgstr ""

# 55d982d2933f4080bb647bce32c3bf76
#: ../../intro/tutorial04.txt:161
msgid ""
"Now, go to ``/polls/1/`` in your browser and vote in the poll. You should "
"see a results page that gets updated each time you vote. If you submit the "
"form without having chosen a choice, you should see the error message."
msgstr ""

# e0961b6c122f44f4acd4eb6f5177c5b3
#: ../../intro/tutorial04.txt:166
msgid "Use generic views: Less code is better"
msgstr ""

# 1eb4a3e1f27a49b095df428d99b534ef
#: ../../intro/tutorial04.txt:168
msgid ""
"The ``detail()`` (from :doc:`Tutorial 3 </intro/tutorial03>`) and "
"``results()`` views are stupidly simple -- and, as mentioned above, "
"redundant. The ``index()`` view (also from Tutorial 3), which displays a "
"list of polls, is similar."
msgstr ""

# 8790fd1cd5484824a4cedb53a5c5fcfc
#: ../../intro/tutorial04.txt:172
msgid ""
"These views represent a common case of basic Web development: getting data "
"from the database according to a parameter passed in the URL, loading a "
"template and returning the rendered template. Because this is so common, "
"Django provides a shortcut, called the \"generic views\" system."
msgstr ""

# ccf8d43dfdbb4109b945c96be19359ce
#: ../../intro/tutorial04.txt:177
msgid ""
"Generic views abstract common patterns to the point where you don't even "
"need to write Python code to write an app."
msgstr ""

# ba5e54ea23d44acfa094eded699c15c8
#: ../../intro/tutorial04.txt:180
msgid ""
"Let's convert our poll app to use the generic views system, so we can delete"
" a bunch of our own code. We'll just have to take a few steps to make the "
"conversion. We will:"
msgstr ""

# f3ca531eb2ee4caf86bb12b450229440
#: ../../intro/tutorial04.txt:184
msgid "Convert the URLconf."
msgstr ""

# e738ddc5fa0a4bc690c0e02fae2f0056
#: ../../intro/tutorial04.txt:186
msgid "Delete some of the old, unneeded views."
msgstr ""

# 459025f9693f4ea4b6c20ade2ab0bfc5
#: ../../intro/tutorial04.txt:188
msgid "Fix up URL handling for the new views."
msgstr ""

# 3943dab102514e5289d5d4adf0ff5a1b
#: ../../intro/tutorial04.txt:190
msgid "Read on for details."
msgstr ""

# 3a7f98f27a0b48daa338546e24dde061
#: ../../intro/tutorial04.txt:194
msgid ""
"Generally, when writing a Django app, you'll evaluate whether generic views "
"are a good fit for your problem, and you'll use them from the beginning, "
"rather than refactoring your code halfway through. But this tutorial "
"intentionally has focused on writing the views \"the hard way\" until now, "
"to focus on core concepts."
msgstr ""

# 5c444243001146afacc1bf4aa69d525a
#: ../../intro/tutorial04.txt:200
msgid "You should know basic math before you start using a calculator."
msgstr ""

# 1942c8a74eb648e0bedb041cb5e4fb70
#: ../../intro/tutorial04.txt:203
msgid "Amend URLconf"
msgstr ""

# 5393f23b6ba84c05b11148f03b51314f
#: ../../intro/tutorial04.txt:205
msgid "First, open the ``polls/urls.py`` URLconf and change it like so::"
msgstr ""

# 5d73ff7afcc944bea876b8224e3b2416
#: ../../intro/tutorial04.txt:232
msgid "Amend views"
msgstr ""

# 86b6d44574e24611868e0a69f81813db
#: ../../intro/tutorial04.txt:234
msgid ""
"We're using two generic views here: "
":class:`~django.views.generic.list.ListView` and "
":class:`~django.views.generic.detail.DetailView`. Respectively, those two "
"views abstract the concepts of \"display a list of objects\" and \"display a"
" detail page for a particular type of object.\""
msgstr ""

# 9c02d596be3e44408f5c23a90324170b
#: ../../intro/tutorial04.txt:240
msgid ""
"Each generic view needs to know what model it will be acting upon. This is "
"provided using the ``model`` parameter."
msgstr ""

# 8d1c77a44aef449185bc57a4e0a55098
#: ../../intro/tutorial04.txt:243
msgid ""
"The :class:`~django.views.generic.detail.DetailView` generic view expects "
"the primary key value captured from the URL to be called ``\"pk\"``, so "
"we've changed ``poll_id`` to ``pk`` for the generic views."
msgstr ""

# 5861167e92ce464689e29655e55b47e5
#: ../../intro/tutorial04.txt:248
msgid ""
"By default, the :class:`~django.views.generic.detail.DetailView` generic "
"view uses a template called ``<app name>/<model name>_detail.html``. In our "
"case, it'll use the template ``\"polls/poll_detail.html\"``. The "
"``template_name`` argument is used to tell Django to use a specific template"
" name instead of the autogenerated default template name. We also specify "
"the ``template_name`` for the ``results`` list view -- this ensures that the"
" results view and the detail view have a different appearance when rendered,"
" even though they're both a :class:`~django.views.generic.detail.DetailView`"
" behind the scenes."
msgstr ""

# 3c72089b35424dfea48949de0916bac4
#: ../../intro/tutorial04.txt:258
msgid ""
"Similarly, the :class:`~django.views.generic.list.ListView` generic view "
"uses a default template called ``<app name>/<model name>_list.html``; we use"
" ``template_name`` to tell :class:`~django.views.generic.list.ListView` to "
"use our existing ``\"polls/index.html\"`` template."
msgstr ""

# fee8a4ae9cc8460fa6e8708cef4b5da1
#: ../../intro/tutorial04.txt:264
msgid ""
"In previous parts of the tutorial, the templates have been provided with a "
"context that contains the ``poll`` and ``latest_poll_list`` context "
"variables. For ``DetailView`` the ``poll`` variable is provided "
"automatically -- since we're using a Django model (``Poll``), Django is able"
" to determine an appropriate name for the context variable. However, for "
"ListView, the automatically generated context variable is ``poll_list``. To "
"override this we provide the ``context_object_name`` option, specifying that"
" we want to use ``latest_poll_list`` instead. As an alternative approach, "
"you could change your templates to match the new default context variables "
"-- but it's a lot easier to just tell Django to use the variable you want."
msgstr ""

# 30486d36e211498f88c27b320dd4c2cc
#: ../../intro/tutorial04.txt:276
msgid ""
"You can now delete the ``index()``, ``detail()`` and ``results()`` views "
"from ``polls/views.py``. We don't need them anymore -- they have been "
"replaced by generic views. You can also delete the import for "
"``HttpResponse``, which is no longer required."
msgstr ""

# 3be79cfb7da941a68cfdd1eaa953a194
#: ../../intro/tutorial04.txt:281
msgid "Run the server, and use your new polling app based on generic views."
msgstr ""

# f4b71f771db74bd6a0a446e1731ca147
#: ../../intro/tutorial04.txt:283
msgid ""
"For full details on generic views, see the :doc:`generic views documentation"
" </topics/class-based-views/index>`."
msgstr ""

# f78e9896176d4fa5ab686669bf0db3da
#: ../../intro/tutorial04.txt:286
msgid ""
"When you're comfortable with forms and generic views, read :doc:`part 5 of "
"this tutorial</intro/tutorial05>` to learn about testing our polls app."
msgstr ""

# b79cecfab55e46278f31f582e2faf0af
#: ../../intro/tutorial05.txt:3
msgid "Writing your first Django app, part 5"
msgstr ""

# 766f1e5f904f4f439d312f119cb55fe9
#: ../../intro/tutorial05.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 4 </intro/tutorial04>` left off. "
"We've built a Web-poll application, and we'll now create some automated "
"tests for it."
msgstr ""

# 4976dd94da1d489694d0c52d5f1afdd3
#: ../../intro/tutorial05.txt:10
msgid "Introducing automated testing"
msgstr ""

# 4a431516e2234ba8a635be08f6befb22
#: ../../intro/tutorial05.txt:13
msgid "What are automated tests?"
msgstr ""

# 818e5fd2e32447649da7ddd8cb4a2dd1
#: ../../intro/tutorial05.txt:15
msgid "Tests are simple routines that check the operation of your code."
msgstr ""

# b94183bd7ad84d7eae874bc3c8062182
#: ../../intro/tutorial05.txt:17
msgid ""
"Testing operates at different levels. Some tests might apply to a tiny "
"detail - *does a particular model method return values as expected?*, while "
"others examine the overall operation of the software - *does a sequence of "
"user inputs on the site produce the desired result?* That's no different "
"from the kind of testing you did earlier in :doc:`Tutorial 1 "
"</intro/tutorial01>`, using the shell to examine the behavior of a method, "
"or running the application and entering data to check how it behaves."
msgstr ""

# c7ee8022670a4b88b5a0ca64bbefeccd
#: ../../intro/tutorial05.txt:25
msgid ""
"What's different in *automated* tests is that the testing work is done for "
"you by the system. You create a set of tests once, and then as you make "
"changes to your app, you can check that your code still works as you "
"originally intended, without having to perform time consuming manual "
"testing."
msgstr ""

# bf399d829b354d729ccf87854759edc6
#: ../../intro/tutorial05.txt:31
msgid "Why you need to create tests"
msgstr ""

# 9376a7a89acf408da218cafcfab6d62a
#: ../../intro/tutorial05.txt:33
msgid "So why create tests, and why now?"
msgstr ""

# cc438416540f4d1bb7f4f001244a28c0
#: ../../intro/tutorial05.txt:35
msgid ""
"You may feel that you have quite enough on your plate just learning "
"Python/Django, and having yet another thing to learn and do may seem "
"overwhelming and perhaps unnecessary. After all, our polls application is "
"working quite happily now; going through the trouble of creating automated "
"tests is not going to make it work any better. If creating the polls "
"application is the last bit of Django programming you will ever do, then "
"true, you don't need to know how to create automated tests. But, if that's "
"not the case, now is an excellent time to learn."
msgstr ""

# 9d6ae4986ec94a56b581f6595052e05f
#: ../../intro/tutorial05.txt:45
msgid "Tests will save you time"
msgstr ""

# fc3b5dd54a224a099837766c99972ca8
#: ../../intro/tutorial05.txt:47
msgid ""
"Up to a certain point, 'checking that it seems to work' will be a "
"satisfactory test. In a more sophisticated application, you might have "
"dozens of complex interactions between components."
msgstr ""

# b7903a8ae35e4669b253ea0bf8245c9d
#: ../../intro/tutorial05.txt:51
msgid ""
"A change in any of those components could have unexpected consequences on "
"the application's behavior. Checking that it still 'seems to work' could "
"mean running through your code's functionality with twenty different "
"variations of your test data just to make sure you haven't broken something "
"- not a good use of your time."
msgstr ""

# 1a4dedba145f46c3812201b11f03c386
#: ../../intro/tutorial05.txt:57
msgid ""
"That's especially true when automated tests could do this for you in "
"seconds. If something's gone wrong, tests will also assist in identifying "
"the code that's causing the unexpected behavior."
msgstr ""

# d1b709a5766242bf8eb9b8eced5cf4c2
#: ../../intro/tutorial05.txt:61
msgid ""
"Sometimes it may seem a chore to tear yourself away from your productive, "
"creative programming work to face the unglamorous and unexciting business of"
" writing tests, particularly when you know your code is working properly."
msgstr ""

# d0beedc7574a4f6c97b39faa0c989773
#: ../../intro/tutorial05.txt:65
msgid ""
"However, the task of writing tests is a lot more fulfilling than spending "
"hours testing your application manually or trying to identify the cause of a"
" newly-introduced problem."
msgstr ""

# dd10778706c04d109b586200a7f348fa
#: ../../intro/tutorial05.txt:70
msgid "Tests don't just identify problems, they prevent them"
msgstr ""

# 29068c2e2a5e4bdc9acb9b61ec6f2abb
#: ../../intro/tutorial05.txt:72
msgid ""
"It's a mistake to think of tests merely as a negative aspect of development."
msgstr ""

# 57a8406a25bd45ebb71c201e44492dbf
#: ../../intro/tutorial05.txt:74
msgid ""
"Without tests, the purpose or intended behavior of an application might be "
"rather opaque. Even when it's your own code, you will sometimes find "
"yourself poking around in it trying to find out what exactly it's doing."
msgstr ""

# dc7c6187eedc4d819268f8746ab29c24
#: ../../intro/tutorial05.txt:78
msgid ""
"Tests change that; they light up your code from the inside, and when "
"something goes wrong, they focus light on the part that has gone wrong - "
"*even if you hadn't even realized it had gone wrong*."
msgstr ""

# 24cbd15a42da471191405ec3b3e61575
#: ../../intro/tutorial05.txt:83
msgid "Tests make your code more attractive"
msgstr ""

# 3f14d5c2e76a4505ac82e491aa4836ef
#: ../../intro/tutorial05.txt:85
msgid ""
"You might have created a brilliant piece of software, but you will find that"
" many other developers will simply refuse to look at it because it lacks "
"tests; without tests, they won't trust it. Jacob Kaplan-Moss, one of "
"Django's original developers, says \"Code without tests is broken by "
"design.\""
msgstr ""

# 1c5759a269d2412383f6238a94ab3f0e
#: ../../intro/tutorial05.txt:90
msgid ""
"That other developers want to see tests in your software before they take it"
" seriously is yet another reason for you to start writing tests."
msgstr ""

# 05dc2379232f47b395631e235f9a8ab9
#: ../../intro/tutorial05.txt:94
msgid "Tests help teams work together"
msgstr ""

# 9dfb327d5aa04fb6974fb9ec6b84d738
#: ../../intro/tutorial05.txt:96
msgid ""
"The previous points are written from the point of view of a single developer"
" maintaining an application. Complex applications will be maintained by "
"teams. Tests guarantee that colleagues don't inadvertently break your code "
"(and that you don't break theirs without knowing). If you want to make a "
"living as a Django programmer, you must be good at writing tests!"
msgstr ""

# 9a780c946e434a51ba76afe1cbd20bb0
#: ../../intro/tutorial05.txt:103
msgid "Basic testing strategies"
msgstr ""

# 58ed7acbd10e4430b1f2b9202fb99964
#: ../../intro/tutorial05.txt:105
msgid "There are many ways to approach writing tests."
msgstr ""

# 7a7daaa3fe7f43b5a28f027ce00e3dc1
#: ../../intro/tutorial05.txt:107
msgid ""
"Some programmers follow a discipline called \"`test-driven development`_\"; "
"they actually write their tests before they write their code. This might "
"seem counter-intuitive, but in fact it's similar to what most people will "
"often do anyway: they describe a problem, then create some code to solve it."
" Test-driven development simply formalizes the problem in a Python test "
"case."
msgstr ""

# 39c51577db6242b6913de517a9480e76
#: ../../intro/tutorial05.txt:113
msgid ""
"More often, a newcomer to testing will create some code and later decide "
"that it should have some tests. Perhaps it would have been better to write "
"some tests earlier, but it's never too late to get started."
msgstr ""

# 1861d84a0f3c43109e826bcef05cc825
#: ../../intro/tutorial05.txt:117
msgid ""
"Sometimes it's difficult to figure out where to get started with writing "
"tests. If you have written several thousand lines of Python, choosing "
"something to test might not be easy. In such a case, it's fruitful to write "
"your first test the next time you make a change, either when you add a new "
"feature or fix a bug."
msgstr ""

# 6aa86efc935343cf87aa418f980aa811
#: ../../intro/tutorial05.txt:122
msgid "So let's do that right away."
msgstr ""

# bf2060ff44bf426881f729a8dda040f5
#: ../../intro/tutorial05.txt:127
msgid "Writing our first test"
msgstr ""

# 66592a738b1941a2b934fa8eb7d9b678
#: ../../intro/tutorial05.txt:130
msgid "We identify a bug"
msgstr ""

# 60ad66bafb2244078f27c41c177b5e4c
#: ../../intro/tutorial05.txt:132
msgid ""
"Fortunately, there's a little bug in the ``polls`` application for us to fix"
" right away: the ``Poll.was_published_recently()`` method returns ``True`` "
"if the ``Poll`` was published within the last day (which is correct) but "
"also if the ``Poll``'s ``pub_date`` field is in the future (which certainly "
"isn't)."
msgstr ""

# 7d6dfa3922fa4ee587aa0e6b2a53449a
#: ../../intro/tutorial05.txt:137
msgid ""
"You can see this in the Admin; create a poll whose date lies in the future; "
"you'll see that the ``Poll`` change list claims it was published recently."
msgstr ""

# d84d6c21fbe942ac8148fbc8a3f13f76
#: ../../intro/tutorial05.txt:140
msgid "You can also see this using the shell::"
msgstr ""

# e75810a3ca1f4e20902e9c6448ab6717
#: ../../intro/tutorial05.txt:151
msgid "Since things in the future are not 'recent', this is clearly wrong."
msgstr ""

# 85398d86cee04bcca6bf10f589535c62
#: ../../intro/tutorial05.txt:154
msgid "Create a test to expose the bug"
msgstr ""

# 1b582c7567a1433cb677192859d10b35
#: ../../intro/tutorial05.txt:156
msgid ""
"What we've just done in the shell to test for the problem is exactly what we"
" can do in an automated test, so let's turn that into an automated test."
msgstr ""

# f84b633210da4f19919e9509608929d3
#: ../../intro/tutorial05.txt:159
msgid ""
"The best place for an application's tests is in the application's "
"``tests.py`` file - the testing system will look there for tests "
"automatically."
msgstr ""

# e539e878ca3047aa857b79867dc7a801
#: ../../intro/tutorial05.txt:162
msgid ""
"Put the following in the ``tests.py`` file in the ``polls`` application "
"(you'll notice  ``tests.py`` contains some dummy tests, you can remove "
"those)::"
msgstr ""

# 53e57223507b447097984785f4542085
#: ../../intro/tutorial05.txt:182
msgid ""
"What we have done here is created a :class:`django.test.TestCase` subclass "
"with a method that creates a ``Poll`` instance with a ``pub_date`` in the "
"future. We then check the output of ``was_published_recently()`` - which "
"*ought* to be False."
msgstr ""

# 2a5602465aae410f89c0c8ac17a17f64
#: ../../intro/tutorial05.txt:188
msgid "Running tests"
msgstr ""

# fd23e752b8e447a795cb376a200e39c6
#: ../../intro/tutorial05.txt:190
msgid "In the terminal, we can run our test::"
msgstr ""

# d96364f588844934ad1776fc97214871
#: ../../intro/tutorial05.txt:194
msgid "and you'll see something like::"
msgstr ""

# df221f74d2b04ff3ba57e2bab73fca58
#: ../../intro/tutorial05.txt:212
msgid "What happened is this:"
msgstr ""

# 5670d1a29fec4fe788bb7dddd5440b2b
#: ../../intro/tutorial05.txt:214
msgid ""
"``python manage.py test polls`` looked for tests in the ``polls`` "
"application"
msgstr ""

# 3ce0960e4c1e44c4b78424458b6c5b2b
#: ../../intro/tutorial05.txt:216
msgid "it found a subclass of the :class:`django.test.TestCase` class"
msgstr ""

# f90c44e54c184ef585f82a0bd552b025
#: ../../intro/tutorial05.txt:218
msgid "it created a special database for the purpose of testing"
msgstr ""

# d05069f1699e4f5f99be9fa1fa9f86a9
#: ../../intro/tutorial05.txt:220
msgid "it looked for test methods - ones whose names begin with ``test``"
msgstr ""

# 13f6244c950248cda8342f14ac3d3efb
#: ../../intro/tutorial05.txt:222
msgid ""
"in ``test_was_published_recently_with_future_poll`` it created a ``Poll`` "
"instance whose ``pub_date`` field is 30 days in the future"
msgstr ""

# e326159a06504ae5aecaec188ed34937
#: ../../intro/tutorial05.txt:225
msgid ""
"... and using the ``assertEqual()`` method, it discovered that its "
"``was_published_recently()`` returns ``True``, though we wanted it to return"
" ``False``"
msgstr ""

# abf4abcf486544deb3e8ee591629cb86
#: ../../intro/tutorial05.txt:229
msgid ""
"The test informs us which test failed and even the line on which the failure"
" occurred."
msgstr ""

# 6c189cda35574b989d9f7dd99d4bde1c
#: ../../intro/tutorial05.txt:233
msgid "Fixing the bug"
msgstr ""

# 0f8b53f5e40b4f31a6841fc67f7c5344
#: ../../intro/tutorial05.txt:235
msgid ""
"We already know what the problem is: ``Poll.was_published_recently()`` "
"should return ``False`` if its ``pub_date`` is in the future. Amend the "
"method in ``models.py``, so that it will only return ``True`` if the date is"
" also in the past::"
msgstr ""

# 1f50bca203ff4b45a178a0221f31819e
#: ../../intro/tutorial05.txt:244
msgid "and run the test again::"
msgstr ""

# b53c5ba8fd8142e6a3051977d004c35a
#: ../../intro/tutorial05.txt:254
msgid ""
"After identifying a bug, we wrote a test that exposes it and corrected the "
"bug in the code so our test passes."
msgstr ""

# 8d4979c76bb44e7bb841ebb6ccaab5d0
#: ../../intro/tutorial05.txt:257
msgid ""
"Many other things might go wrong with our application in the future, but we "
"can be sure that we won't inadvertently reintroduce this bug, because simply"
" running the test will warn us immediately. We can consider this little "
"portion of the application pinned down safely forever."
msgstr ""

# 8f8aa973514048caa2c707eb7af321e3
#: ../../intro/tutorial05.txt:263
msgid "More comprehensive tests"
msgstr ""

# 0c7225a9e3b34cdea3ec10236bed1a6c
#: ../../intro/tutorial05.txt:265
msgid ""
"While we're here, we can further pin down the ``was_published_recently()`` "
"method; in fact, it would be positively embarrassing if in fixing one bug we"
" had introduced another."
msgstr ""

# f99f2b4f76174c9f860d63b40ce7c856
#: ../../intro/tutorial05.txt:269
msgid ""
"Add two more test methods to the same class, to test the behavior of the "
"method more comprehensively::"
msgstr ""

# 12fbbe47ec234117b9f7249331dc76e8
#: ../../intro/tutorial05.txt:288
msgid ""
"And now we have three tests that confirm that "
"``Poll.was_published_recently()`` returns sensible values for past, recent, "
"and future polls."
msgstr ""

# 697d81019d094cf2af45e3094149bd8c
#: ../../intro/tutorial05.txt:291
msgid ""
"Again, ``polls`` is a simple application, but however complex it grows in "
"the future and whatever other code it interacts with, we now have some "
"guarantee that the method we have written tests for will behave in expected "
"ways."
msgstr ""

# 32ce22cc29cf4904aae4a7e06ae68054
#: ../../intro/tutorial05.txt:296
msgid "Test a view"
msgstr ""

# 9575adb97843423aa2da6690c1df4f94
#: ../../intro/tutorial05.txt:298
msgid ""
"The polls application is fairly undiscriminating: it will publish any poll, "
"including ones whose ``pub_date`` field lies in the future. We should "
"improve this. Setting a ``pub_date`` in the future should mean that the Poll"
" is published at that moment, but invisible until then."
msgstr ""

# 4a40c6bfae5340208c50931d1c7c5d06
#: ../../intro/tutorial05.txt:304
msgid "A test for a view"
msgstr ""

# d3fa5e2e1cd847dc8424d0663b6c125d
#: ../../intro/tutorial05.txt:306
msgid ""
"When we fixed the bug above, we wrote the test first and then the code to "
"fix it. In fact that was a simple example of test-driven development, but it"
" doesn't really matter in which order we do the work."
msgstr ""

# d50bfa5d34014d5ebea6fa55c274e0e2
#: ../../intro/tutorial05.txt:310
msgid ""
"In our first test, we focused closely on the internal behavior of the code. "
"For this test, we want to check its behavior as it would be experienced by a"
" user through a web browser."
msgstr ""

# b9d4879b2f2b413aa91b3bd0d07e36c6
#: ../../intro/tutorial05.txt:314
msgid ""
"Before we try to fix anything, let's have a look at the tools at our "
"disposal."
msgstr ""

# 78917b3999274a8eaa009b69b754226e
#: ../../intro/tutorial05.txt:317
msgid "The Django test client"
msgstr ""

# cc4a332f14e7424d92e78684f4017699
#: ../../intro/tutorial05.txt:319
msgid ""
"Django provides a test :class:`~django.test.client.Client` to simulate a "
"user interacting with the code at the view level.  We can use it in "
"``tests.py`` or even in the shell."
msgstr ""

# da5ecedece0e4dddb854db4204737833
#: ../../intro/tutorial05.txt:323
msgid ""
"We will start again with the shell, where we need to do a couple of things "
"that won't be necessary in ``tests.py``. The first is to set up the test "
"environment in the shell::"
msgstr ""

# 2d1c967e10914b0ab08845d94ac1dc6f
#: ../../intro/tutorial05.txt:330
msgid ""
"Next we need to import the test client class (later in ``tests.py`` we will "
"use the :class:`django.test.TestCase` class, which comes with its own "
"client, so this won't be required)::"
msgstr ""

# 5fc9debcdfc84bcbbaaa1405b491c20b
#: ../../intro/tutorial05.txt:338
msgid "With that ready, we can ask the client to do some work for us::"
msgstr ""

# 619c9667085f44698c81edbf7e5e8b45
#: ../../intro/tutorial05.txt:369
msgid "Improving our view"
msgstr ""

# eca49952d7b443e796e3d34050c04098
#: ../../intro/tutorial05.txt:371
msgid ""
"The list of polls shows polls that aren't published yet (i.e. those that "
"have a ``pub_date`` in the future). Let's fix that."
msgstr ""

# 3a9234a5b8df409d92f35eee1e5c7c24
#: ../../intro/tutorial05.txt:374
msgid ""
"In :doc:`Tutorial 4 </intro/tutorial04>` we deleted the view functions from "
"``views.py`` in favor of a :class:`~django.views.generic.list.ListView` in "
"``urls.py``::"
msgstr ""

# eeeea21545ff4e328081e98be3296076
#: ../../intro/tutorial05.txt:385
msgid ""
"``response.context_data['latest_poll_list']`` extracts the data this view "
"places into the context."
msgstr ""

# 28058b147dc6464dbb244ba60e35737f
#: ../../intro/tutorial05.txt:388
msgid "We need to amend the line that gives us the ``queryset``::"
msgstr ""

# f9138d6e078c4c2d9d7efc1f4315763c
#: ../../intro/tutorial05.txt:392
msgid ""
"Let's change the queryset so that it also checks the date by comparing it "
"with ``timezone.now()``. First we need to add an import::"
msgstr ""

# 743c5b8bb8534f23bdcf67585d583a5f
#: ../../intro/tutorial05.txt:397
msgid "and then we must amend the existing ``url`` function to::"
msgstr ""

# ec1a1b12409248bab624b19b5442d80d
#: ../../intro/tutorial05.txt:407
msgid ""
"``Poll.objects.filter(pub_date__lte=timezone.now)`` returns a queryset "
"containing Polls whose ``pub_date`` is less than or equal to - that is, "
"earlier than or equal to - ``timezone.now``. Notice that we use a callable "
"queryset argument, ``timezone.now``, which will be evaluated at request "
"time. If we had included the parentheses, ``timezone.now()`` would be "
"evaluated just once when the web server is started."
msgstr ""

# 89dd373d66b840a283461f95b1cddb3e
#: ../../intro/tutorial05.txt:415
msgid "Testing our new view"
msgstr ""

# 8107bbd0f6cf407faec159c12be43e0d
#: ../../intro/tutorial05.txt:417
msgid ""
"Now you can satisfy yourself that this behaves as expected by firing up the "
"runserver, loading the site in your browser, creating ``Polls`` with dates "
"in the past and future, and checking that only those that have been "
"published are listed.  You don't want to have to do that *every single time "
"you make any change that might affect this* - so let's also create a test, "
"based on our shell session above."
msgstr ""

# 29e98ab6312240e08999e6a36815f187
#: ../../intro/tutorial05.txt:424
msgid "Add the following to ``polls/tests.py``::"
msgstr ""

# 2b9d3abf14bb488ebdae62367f5966af
#: ../../intro/tutorial05.txt:428
msgid ""
"and we'll create a factory method to create polls as well as a new test "
"class::"
msgstr ""

# b7a6d7d1713e41379a0e68a4da871897
#: ../../intro/tutorial05.txt:495
msgid "Let's look at some of these more closely."
msgstr ""

# 017e07501b754e19afcb9f4441eca3ff
#: ../../intro/tutorial05.txt:497
msgid ""
"First is a poll factory method, ``create_poll``, to take some repetition out"
" of the process of creating polls."
msgstr ""

# 8a693865dcc24f8eb44381eaccbbc8ad
#: ../../intro/tutorial05.txt:500
msgid ""
"``test_index_view_with_no_polls`` doesn't create any polls, but checks the "
"message: \"No polls are available.\" and verifies the ``latest_poll_list`` "
"is empty. Note that the :class:`django.test.TestCase` class provides some "
"additional assertion methods. In these examples, we use "
":meth:`~django.test.TestCase.assertContains()` and "
":meth:`~django.test.TestCase.assertQuerysetEqual()`."
msgstr ""

# 5ac134da186d4a2da22cb8f12c709a42
#: ../../intro/tutorial05.txt:507
msgid ""
"In ``test_index_view_with_a_past_poll``, we create a poll and verify that it"
" appears in the list."
msgstr ""

# 72ac1edd3fb44a3b866c579456b4ad58
#: ../../intro/tutorial05.txt:510
msgid ""
"In ``test_index_view_with_a_future_poll``, we create a poll with a "
"``pub_date`` in the future. The database is reset for each test method, so "
"the first poll is no longer there, and so again the index shouldn't have any"
" polls in it."
msgstr ""

# 7ac97d05b7764ff5a956f1bb3f5cde1b
#: ../../intro/tutorial05.txt:514
msgid ""
"And so on. In effect, we are using the tests to tell a story of admin input "
"and user experience on the site, and checking that at every state and for "
"every new change in the state of the system, the expected results are "
"published."
msgstr ""

# a4d92684e2444d9e85e1fadbf187889f
#: ../../intro/tutorial05.txt:519
msgid "Testing the ``DetailView``"
msgstr ""

# 6675562a609d4fc09a1c0701ea875f00
#: ../../intro/tutorial05.txt:521
msgid ""
"What we have works well; however, even though future polls don't appear in "
"the *index*, users can still reach them if they know or guess the right URL."
" So we need similar constraints in the ``DetailViews``, by adding::"
msgstr ""

# 9d9bffa66cba48398930cc8b9eea5412
#: ../../intro/tutorial05.txt:527
msgid "to them - for example::"
msgstr ""

# f10d7fe85e7a4bce858cf34397d9034a
#: ../../intro/tutorial05.txt:536
msgid ""
"and of course, we will add some tests, to check that a ``Poll`` whose "
"``pub_date`` is in the past can be displayed, and that one with a "
"``pub_date`` in the future is not::"
msgstr ""

# b9627738f29e46b499ffb52f01d3c5a8
#: ../../intro/tutorial05.txt:560
msgid "Ideas for more tests"
msgstr ""

# 7a73ceb0c8784a8aa9fb9b968fc34d63
#: ../../intro/tutorial05.txt:562
msgid ""
"We ought to add similar ``queryset`` arguments to the other ``DetailView`` "
"URLs, and create a new test class for each view. They'll be very similar to "
"what we have just created; in fact there will be a lot of repetition."
msgstr ""

# 4f3068153bcd406db362e4ce5aa51409
#: ../../intro/tutorial05.txt:566
msgid ""
"We could also improve our application in other ways, adding tests along the "
"way. For example, it's silly that ``Polls`` can be published on the site "
"that have no ``Choices``. So, our views could check for this, and exclude "
"such ``Polls``. Our tests would create a ``Poll`` without ``Choices`` and "
"then test that it's not published, as well as create a similar ``Poll`` "
"*with* ``Choices``, and test that it *is* published."
msgstr ""

# 96fc5e31f64c477fac2cb71b4cc355c5
#: ../../intro/tutorial05.txt:573
msgid ""
"Perhaps logged-in admin users should be allowed to see unpublished "
"``Polls``, but not ordinary visitors. Again: whatever needs to be added to "
"the software to accomplish this should be accompanied by a test, whether you"
" write the test first and then make the code pass the test, or work out the "
"logic in your code first and then write a test to prove it."
msgstr ""

# 8334f5f2f54746a79fc6e77e5845de09
#: ../../intro/tutorial05.txt:579
msgid ""
"At a certain point you are bound to look at your tests and wonder whether "
"your code is suffering from test bloat, which brings us to:"
msgstr ""

# a2cedc78c80f4ba7959cca1c8716a177
#: ../../intro/tutorial05.txt:583
msgid "When testing, more is better"
msgstr ""

# 74e673e8d1504db4917f1855aa40760c
#: ../../intro/tutorial05.txt:585
msgid ""
"It might seem that our tests are growing out of control. At this rate there "
"will soon be more code in our tests than in our application, and the "
"repetition is unaesthetic, compared to the elegant conciseness of the rest "
"of our code."
msgstr ""

# 3175f49750f54e91a3cc320205f2a40f
#: ../../intro/tutorial05.txt:589
msgid ""
"**It doesn't matter**. Let them grow. For the most part, you can write a "
"test once and then forget about it. It will continue performing its useful "
"function as you continue to develop your program."
msgstr ""

# 8d078772f8f543dbb624db31f45bc123
#: ../../intro/tutorial05.txt:593
msgid ""
"Sometimes tests will need to be updated. Suppose that we amend our views so "
"that only ``Polls`` with ``Choices`` are published. In that case, many of "
"our existing tests will fail - *telling us exactly which tests need to be "
"amended to bring them up to date*, so to that extent tests help look after "
"themselves."
msgstr ""

# 566b12c864c14f089fc1b38447cf89ce
#: ../../intro/tutorial05.txt:598
msgid ""
"At worst, as you continue developing, you might find that you have some "
"tests that are now redundant. Even that's not a problem; in testing "
"redundancy is a *good* thing."
msgstr ""

# f35857a3aac64981af14f8026da6ea54
#: ../../intro/tutorial05.txt:602
msgid ""
"As long as your tests are sensibly arranged, they won't become unmanageable."
" Good rules-of-thumb include having:"
msgstr ""

# 46fbc89bb12e4d9687639006ca45e3de
#: ../../intro/tutorial05.txt:605
msgid "a separate ``TestClass`` for each model or view"
msgstr ""

# 71d67ef92a8840dca2eb033ec60330d2
#: ../../intro/tutorial05.txt:606
msgid "a separate test method for each set of conditions you want to test"
msgstr ""

# 1989eb1b224641eb9b242676fb95692b
#: ../../intro/tutorial05.txt:607
msgid "test method names that describe their function"
msgstr ""

# 35c4901edd9c4e17b473f897b4970207
#: ../../intro/tutorial05.txt:610
msgid "Further testing"
msgstr ""

# e7be3ae2dcf04005a815f7f09f6780db
#: ../../intro/tutorial05.txt:612
msgid ""
"This tutorial only introduces some of the basics of testing. There's a great"
" deal more you can do, and a number of very useful tools at your disposal to"
" achieve some very clever things."
msgstr ""

# 3270ebb35f4449da89e36a68d20582e2
#: ../../intro/tutorial05.txt:616
msgid ""
"For example, while our tests here have covered some of the internal logic of"
" a model and the way our views publish information, you can use an \"in-"
"browser\" framework such as Selenium_ to test the way your HTML actually "
"renders in a browser. These tools allow you to check not just the behavior "
"of your Django code, but also, for example, of your JavaScript. It's quite "
"something to see the tests launch a browser, and start interacting with your"
" site, as if a human being were driving it! Django includes "
":class:`~django.test.LiveServerTestCase` to facilitate integration with "
"tools like Selenium."
msgstr ""

# 5e21512b178b436586e2b9fa0e53a778
#: ../../intro/tutorial05.txt:625
msgid ""
"If you have a complex application, you may want to run tests automatically "
"with every commit for the purposes of `continuous integration`_, so that "
"quality control is itself - at least partially - automated."
msgstr ""

# 444c36e9ab8747f69ef5340a912caab9
#: ../../intro/tutorial05.txt:629
msgid ""
"A good way to spot untested parts of your application is to check code "
"coverage. This also helps identify fragile or even dead code. If you can't "
"test a piece of code, it usually means that code should be refactored or "
"removed. Coverage will help to identify dead code. See :ref:`topics-testing-"
"code-coverage` for details."
msgstr ""

# 2225ed59c40c4c3797d940cfac0633e1
#: ../../intro/tutorial05.txt:635
msgid ""
":doc:`Testing Django applications </topics/testing/index>` has comprehensive"
" information about testing."
msgstr ""

# 940bcb776a1a4ee58aa1c8a70421c37e
#: ../../intro/tutorial05.txt:644
msgid ""
"For full details on testing, see :doc:`Testing in Django "
"</topics/testing/index>`."
msgstr ""

# 961899497a1a4418a42916009809c9f9
#: ../../intro/tutorial05.txt:647
msgid ""
"When you're comfortable with testing Django views, read :doc:`part 6 of this"
" tutorial</intro/tutorial06>` to learn about static files management."
msgstr ""

# c62e6b5d962041ca8047d316be8ddb25
#: ../../intro/tutorial06.txt:3
msgid "Writing your first Django app, part 6"
msgstr ""

# 562d89dbe88044b5a14e4a3bedb0fbbc
#: ../../intro/tutorial06.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 5 </intro/tutorial05>` left off. "
"We've built a tested Web-poll application, and we'll now add a stylesheet "
"and an image."
msgstr ""

# 77f8202cd70c45f28d757e612a78f85c
#: ../../intro/tutorial06.txt:9
msgid ""
"Aside from the HTML generated by the server, web applications generally need"
" to serve additional files — such as images, JavaScript, or CSS — necessary "
"to render the complete web page. In Django, we refer to these files as "
"\"static files\"."
msgstr ""

# a82dda4e2df5408d8aa91f93c21ff5b6
#: ../../intro/tutorial06.txt:14
msgid ""
"For small projects, this isn't a big deal, because you can just keep the "
"static files somewhere your web server can find it. However, in bigger "
"projects -- especially those comprised of multiple apps -- dealing with the "
"multiple sets of static files provided by each application starts to get "
"tricky."
msgstr ""

# 4c8d5d2b74234e159e77642d2dc8a8f1
#: ../../intro/tutorial06.txt:20
msgid ""
"That's what ``django.contrib.staticfiles`` is for: it collects static files "
"from each of your applications (and any other places you specify) into a "
"single location that can easily be served in production."
msgstr ""

# 3834e53171dd4172b8e2e1ffbd9e3f3a
#: ../../intro/tutorial06.txt:25
msgid "Customize your *app's* look and feel"
msgstr ""

# feaf7706ee8945d9b23568dd50408e8b
#: ../../intro/tutorial06.txt:27
msgid ""
"First, create a directory called ``static`` in your ``polls`` directory. "
"Django will look for static files there, similarly to how Django finds "
"templates inside ``polls/templates/``."
msgstr ""

# 7ea629d104b94f38a7f95bb0a514f506
#: ../../intro/tutorial06.txt:31
msgid ""
"Django's :setting:`STATICFILES_FINDERS` setting contains a list of finders "
"that know how to discover static files from various sources. One of the "
"defaults is ``AppDirectoriesFinder`` which looks for a \"static\" "
"subdirectory in each of the :setting:`INSTALLED_APPS`, like the one in "
"``polls`` we just created. The admin site uses the same directory structure "
"for its static files."
msgstr ""

# e7114ce7c8ef4ffa9ca1e0caa96b78f9
#: ../../intro/tutorial06.txt:38
msgid ""
"Within the ``static`` directory you have just created, create another "
"directory called ``polls`` and within that create a file called "
"``style.css``. In other words, your stylesheet should be at "
"``polls/static/polls/style.css``. Because of how the "
"``AppDirectoriesFinder`` staticfile finder works, you can refer to this "
"static file in Django simply as ``polls/style.css``, similar to how you "
"reference the path for templates."
msgstr ""

# 7cef65b519424d49ae77b13e2c1becec
#: ../../intro/tutorial06.txt:47
msgid ""
"Just like templates, we *might* be able to get away with putting our static "
"files directly in ``polls/static`` (rather than creating another ``polls`` "
"subdirectory), but it would actually be a bad idea. Django will choose the "
"first static file it finds whose name matches, and if you had a static file "
"with the same name in a *different* application, Django would be unable to "
"distinguish between them. We need to be able to point Django at the right "
"one, and the easiest way to ensure this is by *namespacing* them. That is, "
"by putting those static files inside *another* directory named for the "
"application itself."
msgstr ""

# 13c21a9c824b46c68fc31d186b1c9a6f
#: ../../intro/tutorial06.txt:57
msgid ""
"Put the following code in that stylesheet "
"(``polls/static/polls/style.css``):"
msgstr ""

# 1f06f64e620449b29a67456e37b66edb
#: ../../intro/tutorial06.txt:65
msgid ""
"Next, add the following at the top of ``polls/templates/polls/index.html``:"
msgstr ""

# 25092670086a4f1e9d3e931d7cbf31ad
#: ../../intro/tutorial06.txt:73
msgid ""
"``{% load staticfiles %}`` loads the :ttag:`{% static %} <staticfiles-"
"static>` template tag from the ``staticfiles`` template library. The ``{% "
"static %}`` template tag generates the absolute URL of the static file."
msgstr ""

# fb41afb97ed24a4d9f2bcf3e4a3b2d64
#: ../../intro/tutorial06.txt:77
msgid ""
"That's all you need to do for development. Reload "
"``http://localhost:8000/polls/`` and you should see that the poll links are "
"green (Django style!) which means that your stylesheet was properly loaded."
msgstr ""

# 230f5e2ab4b04932a7bb9d158a84e810
#: ../../intro/tutorial06.txt:82
msgid "Adding a background-image"
msgstr ""

# 74b2a0c566fb49ffb8f8d2cce48562bf
#: ../../intro/tutorial06.txt:84
msgid ""
"Next, we'll create a subdirectory for images. Create an ``images`` "
"subdirectory in the ``polls/static/polls/`` directory. Inside this "
"directory, put an image called ``background.gif``. In other words, put your "
"image in ``polls/static/polls/images/background.gif``."
msgstr ""

# f87af94b01f04a1199c2b6ba18a286af
#: ../../intro/tutorial06.txt:89
msgid "Then, add to your stylesheet (``polls/static/polls/style.css``):"
msgstr ""

# 54826d859cd34e378eeeb9e02d067ed1
#: ../../intro/tutorial06.txt:97
msgid ""
"Reload ``http://localhost:8000/polls/`` and you should see the background "
"loaded in the bottom right of the screen."
msgstr ""

# 93932964d6504042b59650bb9f96b9a4
#: ../../intro/tutorial06.txt:102
msgid ""
"Of course the ``{% static %}`` template tag is not available for use in "
"static files like your stylesheet which aren't generated by Django. You "
"should always use **relative paths** to link your static files between each "
"other, because then you can change :setting:`STATIC_URL` (used by the "
":ttag:`static` template tag to generate its URLs) without having to modify a"
" bunch of paths in your static files as well."
msgstr ""

# b0b7224806e847439a145dbc96e8d7b6
#: ../../intro/tutorial06.txt:109
msgid ""
"These are the **basics**. For more details on settings and other bits "
"included with the framework see :doc:`the static files howto </howto/static-"
"files/index>` and the :doc:`the staticfiles reference "
"</ref/contrib/staticfiles>`. :doc:`Deploying static files </howto/static-"
"files/deployment>` discusses how to use static files on a real server."
msgstr ""

# 778080b24a464243b7126460a1bba675
#: ../../intro/tutorial06.txt:119
msgid ""
"The beginner tutorial ends here for the time being. In the meantime, you "
"might want to check out some pointers on :doc:`where to go from here "
"</intro/whatsnext>`."
msgstr ""

# 26c087068b204b93a432cb0b2e61103f
#: ../../intro/tutorial06.txt:123
msgid ""
"If you are familiar with Python packaging and interested in learning how to "
"turn polls into a \"reusable app\", check out :doc:`Advanced tutorial: How "
"to write reusable apps</intro/reusable-apps>`."
msgstr ""

# 1875ca6ce05649528ca2ed5bb2fa43bc
#: ../../intro/whatsnext.txt:3
msgid "What to read next"
msgstr ""

# 35d13ef61c46499d882f555c886ac413
#: ../../intro/whatsnext.txt:5
msgid ""
"So you've read all the :doc:`introductory material </intro/index>` and have "
"decided you'd like to keep using Django. We've only just scratched the "
"surface with this intro (in fact, if you've read every single word you've "
"still read less than 10% of the overall documentation)."
msgstr ""

# da9e457252e2496981d1e20a3c84b65d
#: ../../intro/whatsnext.txt:10
msgid "So what's next?"
msgstr ""

# bf7f607afd004dd4a12bfb7b541481c7
#: ../../intro/whatsnext.txt:12
msgid ""
"Well, we've always been big fans of learning by doing. At this point you "
"should know enough to start a project of your own and start fooling around. "
"As you need to learn new tricks, come back to the documentation."
msgstr ""

# 3afb512ce46f48078ef1584496813989
#: ../../intro/whatsnext.txt:16
msgid ""
"We've put a lot of effort into making Django's documentation useful, easy to"
" read and as complete as possible. The rest of this document explains more "
"about how the documentation works so that you can get the most out of it."
msgstr ""

# b6f909296a4f4372b1e9ada85c53c82e
#: ../../intro/whatsnext.txt:20
msgid ""
"(Yes, this is documentation about documentation. Rest assured we have no "
"plans to write a document about how to read the document about "
"documentation.)"
msgstr ""

# 7442ecdd201e471b86d98dda73ec8aeb
#: ../../intro/whatsnext.txt:24
msgid "Finding documentation"
msgstr ""

# ed626afbffa141b0a48ac132af5e3d74
#: ../../intro/whatsnext.txt:26
msgid ""
"Django's got a *lot* of documentation -- almost 200,000 words -- so finding "
"what you need can sometimes be tricky. A few good places to start are the "
":ref:`search` and the :ref:`genindex`."
msgstr ""

# f5b65ddf8f8f468787ce13ecd50dbf0f
#: ../../intro/whatsnext.txt:30
msgid "Or you can just browse around!"
msgstr ""

# 077f5e8e3aa94cf3abbb5d8c58d800e3
#: ../../intro/whatsnext.txt:33
msgid "How the documentation is organized"
msgstr ""

# 84b9d68013354737ab6b39669847dbcc
#: ../../intro/whatsnext.txt:35
msgid ""
"Django's main documentation is broken up into \"chunks\" designed to fill "
"different needs:"
msgstr ""

# c5a4716523ce42d39ed086156c862d46
#: ../../intro/whatsnext.txt:38
msgid ""
"The :doc:`introductory material </intro/index>` is designed for people new "
"to Django -- or to Web development in general. It doesn't cover anything in "
"depth, but instead gives a high-level overview of how developing in Django "
"\"feels\"."
msgstr ""

# 8f57335238d14bdba0d0a3571d38c480
#: ../../intro/whatsnext.txt:43
msgid ""
"The :doc:`topic guides </topics/index>`, on the other hand, dive deep into "
"individual parts of Django. There are complete guides to Django's "
":doc:`model system </topics/db/index>`, :doc:`template engine "
"</topics/templates>`, :doc:`forms framework </topics/forms/index>`, and much"
" more."
msgstr ""

# bcf8fa66524b44b58548d34655637889
#: ../../intro/whatsnext.txt:49
msgid ""
"This is probably where you'll want to spend most of your time; if you work "
"your way through these guides you should come out knowing pretty much "
"everything there is to know about Django."
msgstr ""

# 3f7bf7ca0e234a33be73911d1acd6aed
#: ../../intro/whatsnext.txt:53
msgid ""
"Web development is often broad, not deep -- problems span many domains. "
"We've written a set of :doc:`how-to guides </howto/index>` that answer "
"common \"How do I ...?\" questions. Here you'll find information about "
":doc:`generating PDFs with Django </howto/outputting-pdf>`, :doc:`writing "
"custom template tags </howto/custom-template-tags>`, and more."
msgstr ""

# 0d87257db177405481561676b459a7c4
#: ../../intro/whatsnext.txt:59
msgid ""
"Answers to really common questions can also be found in the :doc:`FAQ "
"</faq/index>`."
msgstr ""

# f07a31c2d6da438c8316974f20601bbc
#: ../../intro/whatsnext.txt:62
msgid ""
"The guides and how-to's don't cover every single class, function, and method"
" available in Django -- that would be overwhelming when you're trying to "
"learn. Instead, details about individual classes, functions, methods, and "
"modules are kept in the :doc:`reference </ref/index>`. This is where you'll "
"turn to find the details of a particular function or whathaveyou."
msgstr ""

# 50713fb2239d4428b91f82ebf93dd5d5
#: ../../intro/whatsnext.txt:69
msgid ""
"Finally, there's some \"specialized\" documentation not usually relevant to "
"most developers. This includes the :doc:`release notes </releases/index>` "
"and :doc:`internals documentation </internals/index>` for those who want to "
"add code to Django itself, and a :doc:`few other things that simply don't "
"fit elsewhere </misc/index>`."
msgstr ""

# 7c96bcf7ca034445a73df9394b161ec4
#: ../../intro/whatsnext.txt:77
msgid "How documentation is updated"
msgstr ""

# 7c69244fa351496a8ac3ea845f4d11f6
#: ../../intro/whatsnext.txt:79
msgid ""
"Just as the Django code base is developed and improved on a daily basis, our"
" documentation is consistently improving. We improve documentation for "
"several reasons:"
msgstr ""

# a897550a490f4154942c4ce04e660ee3
#: ../../intro/whatsnext.txt:83
msgid "To make content fixes, such as grammar/typo corrections."
msgstr ""

# ab12cc67249c4a1cb89d14937e95c606
#: ../../intro/whatsnext.txt:85
msgid ""
"To add information and/or examples to existing sections that need to be "
"expanded."
msgstr ""

# 63b191f6411c459fa7760ba120c670aa
#: ../../intro/whatsnext.txt:88
msgid ""
"To document Django features that aren't yet documented. (The list of such "
"features is shrinking but exists nonetheless.)"
msgstr ""

# 0bd2a055fa8a447bb1d7e99016a6e980
#: ../../intro/whatsnext.txt:91
msgid ""
"To add documentation for new features as new features get added, or as "
"Django APIs or behaviors change."
msgstr ""

# 174fb664d175470a8f2843e21a159a8b
#: ../../intro/whatsnext.txt:94
msgid ""
"Django's documentation is kept in the same source control system as its "
"code. It lives in the `docs`_ directory of our Git repository. Each document"
" online is a separate text file in the repository."
msgstr ""

# 6cfcfa64d455437c850dcdfcc11506ae
#: ../../intro/whatsnext.txt:101
msgid "Where to get it"
msgstr ""

# 8b40d57f412441619f65f5cd7346d863
#: ../../intro/whatsnext.txt:103
msgid ""
"You can read Django documentation in several ways. They are, in order of "
"preference:"
msgstr ""

# a8f5e253ae704176afdc8e69374e1ff6
#: ../../intro/whatsnext.txt:107
msgid "On the Web"
msgstr ""

# cbf8d70caa864d2cbd2f63a66f528177
#: ../../intro/whatsnext.txt:109
msgid ""
"The most recent version of the Django documentation lives at "
"https://docs.djangoproject.com/en/dev/. These HTML pages are generated "
"automatically from the text files in source control. That means they reflect"
" the \"latest and greatest\" in Django -- they include the very latest "
"corrections and additions, and they discuss the latest Django features, "
"which may only be available to users of the Django development version. (See"
" \"Differences between versions\" below.)"
msgstr ""

# 8a57ed9a456944a29c19d1ec0c5b702a
#: ../../intro/whatsnext.txt:117
msgid ""
"We encourage you to help improve the docs by submitting changes, corrections"
" and suggestions in the `ticket system`_. The Django developers actively "
"monitor the ticket system and use your feedback to improve the documentation"
" for everybody."
msgstr ""

# bbd379e4220c4d0d9726be84eec59ac4
#: ../../intro/whatsnext.txt:121
msgid ""
"Note, however, that tickets should explicitly relate to the documentation, "
"rather than asking broad tech-support questions. If you need help with your "
"particular Django setup, try the `django-users mailing list`_ or the "
"`#django IRC channel`_ instead."
msgstr ""

# 6e6f2bf34c4c40caa379d315c69e3fc9
#: ../../intro/whatsnext.txt:131
msgid "In plain text"
msgstr ""

# 2eb6e3184d154df596aab58f69e45318
#: ../../intro/whatsnext.txt:133
msgid ""
"For offline reading, or just for convenience, you can read the Django "
"documentation in plain text."
msgstr ""

# f57c0a852a9342279acb8350a9682ecb
#: ../../intro/whatsnext.txt:136
msgid ""
"If you're using an official release of Django, note that the zipped package "
"(tarball) of the code includes a ``docs/`` directory, which contains all the"
" documentation for that release."
msgstr ""

# a31a610d9bbe45cfbc450ed0b4ed9f6c
#: ../../intro/whatsnext.txt:140
msgid ""
"If you're using the development version of Django (aka \"trunk\"), note that"
" the ``docs/`` directory contains all of the documentation. You can update "
"your Git checkout to get the latest changes."
msgstr ""

# 5741f1817c7840b1a5c34ac1f48f4d77
#: ../../intro/whatsnext.txt:144
msgid ""
"One low-tech way of taking advantage of the text documentation is by using "
"the Unix ``grep`` utility to search for a phrase in all of the "
"documentation. For example, this will show you each mention of the phrase "
"\"max_length\" in any Django document:"
msgstr ""

# 1cb9a2da69e04371a2490022645e75bf
#: ../../intro/whatsnext.txt:154
msgid "As HTML, locally"
msgstr ""

# 0aae46675fcd40d78dbc1ba2a69ac537
#: ../../intro/whatsnext.txt:156
msgid ""
"You can get a local copy of the HTML documentation following a few easy "
"steps:"
msgstr ""

# d3824976a74d486696f425d4d4e86a03
#: ../../intro/whatsnext.txt:158
msgid ""
"Django's documentation uses a system called Sphinx__ to convert from plain "
"text to HTML. You'll need to install Sphinx by either downloading and "
"installing the package from the Sphinx Web site, or with ``pip``:"
msgstr ""

# 3cb9fa8b84af4b398d7bc3171c5431b2
#: ../../intro/whatsnext.txt:166
msgid ""
"Then, just use the included ``Makefile`` to turn the documentation into "
"HTML:"
msgstr ""

# 73121c44f1d5433798d33d945b4646aa
#: ../../intro/whatsnext.txt:174
msgid "You'll need `GNU Make`__ installed for this."
msgstr ""

# 7bb96273f8af4f92a29762817dd82d4a
#: ../../intro/whatsnext.txt:176
msgid ""
"If you're on Windows you can alternatively use the included batch file:"
msgstr ""

# 32933dc7436b427fb9b71ac66b9a64c9
#: ../../intro/whatsnext.txt:183
msgid "The HTML documentation will be placed in ``docs/_build/html``."
msgstr ""

# b3e3a7df7fd142fbac0f8ebda51a0d68
#: ../../intro/whatsnext.txt:187
msgid ""
"Generation of the Django documentation will work with Sphinx version 0.6 or "
"newer, but we recommend going straight to Sphinx 1.0.2 or newer."
msgstr ""

# aca4d838cee7409bb7655384ae20cc45
#: ../../intro/whatsnext.txt:196
msgid "Differences between versions"
msgstr ""

# ee575383fb194fffb97e65b459970210
#: ../../intro/whatsnext.txt:198
msgid ""
"As previously mentioned, the text documentation in our Git repository "
"contains the \"latest and greatest\" changes and additions. These changes "
"often include documentation of new features added in the Django development "
"version -- the Git (\"trunk\") version of Django. For that reason, it's "
"worth pointing out our policy on keeping straight the documentation for "
"various versions of the framework."
msgstr ""

# 72bb7a474b1e4b75a40d022ba8088559
#: ../../intro/whatsnext.txt:205
msgid "We follow this policy:"
msgstr ""

# 7abe3307bc2946258192b030936046d9
#: ../../intro/whatsnext.txt:207
msgid ""
"The primary documentation on djangoproject.com is an HTML version of the "
"latest docs in Git. These docs always correspond to the latest official "
"Django release, plus whatever features we've added/changed in the framework "
"*since* the latest release."
msgstr ""

# d5e3215be3a64f4483b12662166a6682
#: ../../intro/whatsnext.txt:212
msgid ""
"As we add features to Django's development version, we try to update the "
"documentation in the same Git commit transaction."
msgstr ""

# f0b80fb70b604272bc8ff2e626c450c1
#: ../../intro/whatsnext.txt:215
msgid ""
"To distinguish feature changes/additions in the docs, we use the phrase: "
"\"New in version X.Y\", being X.Y the next release version (hence, the one "
"being developed)."
msgstr ""

# 824c282ee3a848ae94d6552446da6dac
#: ../../intro/whatsnext.txt:219
msgid ""
"Documentation fixes and improvements may be backported to the last release "
"branch, at the discretion of the committer, however, once a version of "
"Django is :ref:`no longer supported<backwards-compatibility-policy>`, that "
"version of the docs won't get any further updates."
msgstr ""

# 929e83a2ddde4217a5487aee844ec0fb
#: ../../intro/whatsnext.txt:224
msgid ""
"The `main documentation Web page`_ includes links to documentation for all "
"previous versions. Be sure you are using the version of the docs "
"corresponding to the version of Django you are using!"
msgstr ""
