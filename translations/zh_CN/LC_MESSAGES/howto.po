# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# 
# Translators:
# pylemon <leeway1985@gmail.com>, 2013
msgid ""
msgstr ""
"Project-Id-Version: djangodoc-zh_CN\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-04-02 21:26\n"
"PO-Revision-Date: 2013-05-12 09:26+0000\n"
"Last-Translator: pylemon <leeway1985@gmail.com>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

# c4a5a00f316c46d19539bdf3012f40c9
#: ../../howto/auth-remote-user.txt:3
msgid "Authentication using ``REMOTE_USER``"
msgstr "使用 ``REMOTE_USER`` 认证"

# b2693ed5ea9e4367a3864ad6f0b81ca4
#: ../../howto/auth-remote-user.txt:7
msgid ""
"This document describes how to make use of external authentication sources "
"(where the Web server sets the ``REMOTE_USER`` environment variable) in your"
" Django applications.  This type of authentication solution is typically "
"seen on intranet sites, with single sign-on solutions such as IIS and "
"Integrated Windows Authentication or Apache and `mod_authnz_ldap`_, `CAS`_, "
"`Cosign`_, `WebAuth`_, `mod_auth_sspi`_, etc."
msgstr ""

# c7d5403190ea421b9f3b4f49fca67ff3
#: ../../howto/auth-remote-user.txt:20
msgid ""
"When the Web server takes care of authentication it typically sets the "
"``REMOTE_USER`` environment variable for use in the underlying application."
"  In Django, ``REMOTE_USER`` is made available in the :attr:`request.META "
"<django.http.HttpRequest.META>` attribute.  Django can be configured to make"
" use of the ``REMOTE_USER`` value using the ``RemoteUserMiddleware`` and "
"``RemoteUserBackend`` classes found in :mod:`django.contrib.auth`."
msgstr ""

# 24e86b31ace644d8aa7759204de36705
#: ../../howto/auth-remote-user.txt:28
msgid "Configuration"
msgstr "配置"

# 04f92e1f0e01449eb366ec30a9a7fca3
#: ../../howto/auth-remote-user.txt:32
msgid ""
"First, you must add the "
":class:`django.contrib.auth.middleware.RemoteUserMiddleware` to the "
":setting:`MIDDLEWARE_CLASSES` setting **after** the "
":class:`django.contrib.auth.middleware.AuthenticationMiddleware`::"
msgstr ""

# de50af52307a4af29c0064a9c8952d11
#: ../../howto/auth-remote-user.txt:44
msgid ""
"Next, you must replace the "
":class:`~django.contrib.auth.backends.ModelBackend` with "
"``RemoteUserBackend`` in the :setting:`AUTHENTICATION_BACKENDS` setting::"
msgstr ""

# 1359e19d66824c50816f0a044946032e
#: ../../howto/auth-remote-user.txt:51
msgid ""
"With this setup, ``RemoteUserMiddleware`` will detect the username in "
"``request.META['REMOTE_USER']`` and will authenticate and auto-login that "
"user using the ``RemoteUserBackend``."
msgstr ""

# d143fff65e2d41c9b3fe6bf3ea9cf034
#: ../../howto/auth-remote-user.txt:56
msgid ""
"Since the ``RemoteUserBackend`` inherits from ``ModelBackend``, you will "
"still have all of the same permissions checking that is implemented in "
"``ModelBackend``."
msgstr ""

# a199412fff264e588c6c707b487aa618
#: ../../howto/auth-remote-user.txt:60
msgid ""
"If your authentication mechanism uses a custom HTTP header and not "
"``REMOTE_USER``, you can subclass ``RemoteUserMiddleware`` and set the "
"``header`` attribute to the desired ``request.META`` key.  For example::"
msgstr ""

# b97488abffb842499022384f54775708
#: ../../howto/auth-remote-user.txt:71
msgid "``RemoteUserBackend``"
msgstr ""

# f4508d3c43974d3f89d904706b35d765
#: ../../howto/auth-remote-user.txt:75
msgid ""
"If you need more control, you can create your own authentication backend "
"that inherits from ``RemoteUserBackend`` and overrides certain parts:"
msgstr ""

# 9ab76e0c7ba145ffa20c08d6b9f940b6
# 73b62a4ded574a6aba45e180e7ada35f
#: ../../howto/auth-remote-user.txt:79
#: ../../howto/custom-management-commands.txt:186
msgid "Attributes"
msgstr ""

# 2f10837cca5344ee8c65903d60fedbb0
#: ../../howto/auth-remote-user.txt:83
msgid ""
"``True`` or ``False``.  Determines whether or not a "
":class:`~django.contrib.auth.models.User` object is created if not already "
"in the database.  Defaults to ``True``."
msgstr ""

# 9fc3ac9d401441cda93ad99f543e36a8
# a7ccf6e4d8574718842dcef5c329add2
#: ../../howto/auth-remote-user.txt:88
#: ../../howto/custom-management-commands.txt:232
msgid "Methods"
msgstr ""

# 79914f9d3b92401497c0c97573937c25
#: ../../howto/auth-remote-user.txt:92
msgid ""
"Performs any cleaning on the ``username`` (e.g. stripping LDAP DN "
"information) prior to using it to get or create a "
":class:`~django.contrib.auth.models.User` object.  Returns the cleaned "
"username."
msgstr ""

# 852959109a32425da80a2b84adafcc30
#: ../../howto/auth-remote-user.txt:99
msgid ""
"Configures a newly created user.  This method is called immediately after a "
"new user is created, and can be used to perform custom setup actions, such "
"as setting the user's groups based on attributes in an LDAP directory. "
"Returns the user object."
msgstr ""

# 341077d87a944edd8b3fd39e82ef8941
#: ../../howto/custom-file-storage.txt:2
msgid "Writing a custom storage system"
msgstr ""

# cb51472f051d4e29a4a164c36e7aeb9b
#: ../../howto/custom-file-storage.txt:6
msgid ""
"If you need to provide custom file storage -- a common example is storing "
"files on some remote system -- you can do so by defining a custom storage "
"class. You'll need to follow these steps:"
msgstr ""

# aea88f82e0584ce782a24f14e9c5fd48
#: ../../howto/custom-file-storage.txt:10
msgid ""
"Your custom storage system must be a subclass of "
"``django.core.files.storage.Storage``::"
msgstr ""

# 8dc1fce42e6c4e61837cb36f976b705e
#: ../../howto/custom-file-storage.txt:18
msgid ""
"Django must be able to instantiate your storage system without any "
"arguments. This means that any settings should be taken from "
"``django.conf.settings``::"
msgstr ""

# dd7e7b32128747aebe0a86a0f661266e
#: ../../howto/custom-file-storage.txt:30
msgid ""
"Your storage class must implement the :meth:`_open()` and :meth:`_save()` "
"methods, along with any other methods appropriate to your storage class. See"
" below for more on these methods."
msgstr ""

# d904d84cc56f4cf4b4a2cf9812563fae
#: ../../howto/custom-file-storage.txt:34
msgid ""
"In addition, if your class provides local file storage, it must override the"
" ``path()`` method."
msgstr ""

# da8f3f1b06a44d6dacde124684cd726d
#: ../../howto/custom-file-storage.txt:37
msgid ""
"Your custom storage system may override any of the storage methods explained"
" in :doc:`/ref/files/storage`, but you **must** implement the following "
"methods:"
msgstr ""

# 381efdf4f2c9415882cebccb3d17f50a
#: ../../howto/custom-file-storage.txt:40
msgid ":meth:`Storage.delete`"
msgstr ""

# efa4dae722c6428ca93a6f46b84c9889
#: ../../howto/custom-file-storage.txt:41
msgid ":meth:`Storage.exists`"
msgstr ""

# 3218283beac64dbd95e928760a23b58b
#: ../../howto/custom-file-storage.txt:42
msgid ":meth:`Storage.listdir`"
msgstr ""

# a543e36ea3274bc1a92192ac4cfe143d
#: ../../howto/custom-file-storage.txt:43
msgid ":meth:`Storage.size`"
msgstr ""

# 29b0119c1e1a495f99c0909d8d21b4bf
#: ../../howto/custom-file-storage.txt:44
msgid ":meth:`Storage.url`"
msgstr ""

# acb8535d8dd54e37a32c911f16969fc0
#: ../../howto/custom-file-storage.txt:46
msgid ""
"You'll also usually want to use hooks specifically designed for custom "
"storage objects. These are:"
msgstr ""

# 8edddbf6dc664aea9046e17dad87da5a
#: ../../howto/custom-file-storage.txt:51
msgid "**Required**."
msgstr ""

# 81186bfee8194b3dae0c3dcd2a1273ce
#: ../../howto/custom-file-storage.txt:53
msgid ""
"Called by ``Storage.open()``, this is the actual mechanism the storage class"
" uses to open the file. This must return a ``File`` object, though in most "
"cases, you'll want to return some subclass here that implements logic "
"specific to the backend storage system."
msgstr ""

# 95c69210a62b4a9b98a96ed0264343f4
#: ../../howto/custom-file-storage.txt:60
msgid ""
"Called by ``Storage.save()``. The ``name`` will already have gone through "
"``get_valid_name()`` and ``get_available_name()``, and the ``content`` will "
"be a ``File`` object itself."
msgstr ""

# 901193ef4ac64adb830345e2ff21d07a
#: ../../howto/custom-file-storage.txt:64
msgid ""
"Should return the actual name of name of the file saved (usually the "
"``name`` passed in, but if the storage needs to change the file name return "
"the new name instead)."
msgstr ""

# b78fa10ab2124ca3a090f08c9007744e
#: ../../howto/custom-file-storage.txt:71
msgid ""
"Returns a filename suitable for use with the underlying storage system. The "
"``name`` argument passed to this method is the original filename sent to the"
" server, after having any path information removed. Override this to "
"customize how non-standard characters are converted to safe filenames."
msgstr ""

# fa27ac3a1c9d4d198140110cfac74a4f
#: ../../howto/custom-file-storage.txt:76
msgid ""
"The code provided on ``Storage`` retains only alpha-numeric characters, "
"periods and underscores from the original filename, removing everything "
"else."
msgstr ""

# 2cad9934e5804dc69b3608fc90615f4b
#: ../../howto/custom-file-storage.txt:81
msgid ""
"Returns a filename that is available in the storage mechanism, possibly "
"taking the provided filename into account. The ``name`` argument passed to "
"this method will have already cleaned to a filename valid for the storage "
"system, according to the ``get_valid_name()`` method described above."
msgstr ""

# 971aa625ee764b1baf5c690cad35dd96
#: ../../howto/custom-file-storage.txt:86
msgid ""
"The code provided on ``Storage`` simply appends ``\"_1\"``, ``\"_2\"``, etc."
" to the filename until it finds one that's available in the destination "
"directory."
msgstr ""

# 19326838e4794c3cb303c401d0b7f0c2
#: ../../howto/custom-management-commands.txt:3
msgid "Writing custom django-admin commands"
msgstr ""

# 68dae7e4ee8d4a1397fb620ba2c3dfbc
#: ../../howto/custom-management-commands.txt:7
msgid ""
"Applications can register their own actions with ``manage.py``. For example,"
" you might want to add a ``manage.py`` action for a Django app that you're "
"distributing. In this document, we will be building a custom ``closepoll`` "
"command for the ``polls`` application from the "
":doc:`tutorial</intro/tutorial01>`."
msgstr ""

# 7c1c012eb4744a0aacd15fb8eeda322d
#: ../../howto/custom-management-commands.txt:13
msgid ""
"To do this, just add a ``management/commands`` directory to the application."
" Django will register a ``manage.py`` command for each Python module in that"
" directory whose name doesn't begin with an underscore. For example::"
msgstr ""

# 8818adc8c2e0435fbba64be9f14ea82a
#: ../../howto/custom-management-commands.txt:29
msgid ""
"In this example, the ``closepoll`` command will be made available to any "
"project that includes the ``polls`` application in "
":setting:`INSTALLED_APPS`."
msgstr ""

# d75fcf119ceb4b01ab7b3e1c092c0b08
#: ../../howto/custom-management-commands.txt:32
msgid ""
"The ``_private.py`` module will not be available as a management command."
msgstr ""

# f66c92331af9426ca24260e8d9ddbe6d
#: ../../howto/custom-management-commands.txt:34
msgid ""
"The ``closepoll.py`` module has only one requirement -- it must define a "
"class ``Command`` that extends :class:`BaseCommand` or one of its "
":ref:`subclasses<ref-basecommand-subclasses>`."
msgstr ""

# 2a3257a2fee541259bfc2737e7a2297e
#: ../../howto/custom-management-commands.txt:40
msgid ""
"Custom management commands are especially useful for running standalone "
"scripts or for scripts that are periodically executed from the UNIX crontab "
"or from Windows scheduled tasks control panel."
msgstr ""

# 8c28519373704790916b05a6d452dcf1
#: ../../howto/custom-management-commands.txt:44
msgid ""
"To implement the command, edit ``polls/management/commands/closepoll.py`` to"
" look like this:"
msgstr ""

# 49251edfa2794023aeb7aef026e97285
#: ../../howto/custom-management-commands.txt:71
msgid ""
"When you are using management commands and wish to provide console output, "
"you should write to ``self.stdout`` and ``self.stderr``, instead of printing"
" to ``stdout`` and ``stderr`` directly. By using these proxies, it becomes "
"much easier to test your custom command. Note also that you don't need to "
"end messages with a newline character, it will be added automatically, "
"unless you specify the ``ending`` parameter::"
msgstr ""

# ebbec76fdf70412c8d7fdc310caf7a0e
#: ../../howto/custom-management-commands.txt:81
msgid ""
"The new custom command can be called using ``python manage.py closepoll "
"<poll_id>``."
msgstr ""

# 3e55cfe6c18e4c8eb60f3dc627907793
#: ../../howto/custom-management-commands.txt:84
msgid ""
"The ``handle()`` method takes zero or more ``poll_ids`` and sets "
"``poll.opened`` to ``False`` for each one. If the user referenced any "
"nonexistent polls, a :class:`CommandError` is raised. The ``poll.opened`` "
"attribute does not exist in the :doc:`tutorial</intro/tutorial01>` and was "
"added to ``polls.models.Poll`` for this example."
msgstr ""

# 3662b7f7a95d427d9a2f6c7ff455d2af
#: ../../howto/custom-management-commands.txt:90
msgid ""
"The same ``closepoll`` could be easily modified to delete a given poll "
"instead of closing it by accepting additional command line options. These "
"custom options must be added to :attr:`~BaseCommand.option_list` like this:"
msgstr ""

# b1916ba504864d8594ff580ec438ad34
#: ../../howto/custom-management-commands.txt:113
msgid ""
"The option (``delete`` in our example) is available in the options dict "
"parameter of the handle method. See the :py:mod:`optparse` Python "
"documentation for more about ``make_option`` usage."
msgstr ""

# f2f4b4342d1a4a6ba5de04882136cfb6
#: ../../howto/custom-management-commands.txt:117
msgid ""
"In addition to being able to add custom command line options, all "
":doc:`management commands</ref/django-admin>` can accept some default "
"options such as :djadminopt:`--verbosity` and :djadminopt:`--traceback`."
msgstr ""

# f15ba9e07b7143e2a6693069d62c2697
#: ../../howto/custom-management-commands.txt:123
msgid ""
"The :meth:`BaseCommand.execute` method sets the hardcoded ``en-us`` locale "
"because the commands shipped with Django perform several tasks (for example,"
" user-facing content rendering and database population) that require a "
"system-neutral string language (for which we use ``en-us``)."
msgstr ""

# 35cbbface87249519da062a1652a3337
#: ../../howto/custom-management-commands.txt:128
msgid ""
"If your custom management command uses another locale, you should manually "
"activate and deactivate it in your :meth:`~BaseCommand.handle` or "
":meth:`~NoArgsCommand.handle_noargs` method using the functions provided by "
"the I18N support code:"
msgstr ""

# a34ebd61eb014ee9938d5da02d5247e8
#: ../../howto/custom-management-commands.txt:158
msgid ""
"Take into account though, that system management commands typically have to "
"be very careful about running in non-uniform locales, so:"
msgstr ""

# f5f6b2e2c54e4004aefdf234d5bedd83
#: ../../howto/custom-management-commands.txt:161
msgid ""
"Make sure the :setting:`USE_I18N` setting is always ``True`` when running "
"the command (this is one good example of the potential problems stemming "
"from a dynamic runtime environment that Django commands avoid offhand by "
"always using a fixed locale)."
msgstr ""

# 3fdfba51cd504363a197e90e17bab627
#: ../../howto/custom-management-commands.txt:166
msgid ""
"Review the code of your command and the code it calls for behavioral "
"differences when locales are changed and evaluate its impact on predictable "
"behavior of your command."
msgstr ""

# bdd1e9ca1f2a45d3904f609e353106c7
#: ../../howto/custom-management-commands.txt:171
msgid "Command objects"
msgstr ""

# 317862c8377e46e280f7603517c2a373
#: ../../howto/custom-management-commands.txt:175
msgid "The base class from which all management commands ultimately derive."
msgstr ""

# e12fa75bb9cd4d5286311e22ac1adf0f
#: ../../howto/custom-management-commands.txt:177
msgid ""
"Use this class if you want access to all of the mechanisms which parse the "
"command-line arguments and work out what code to call in response; if you "
"don't need to change any of that behavior, consider using one of its "
":ref:`subclasses<ref-basecommand-subclasses>`."
msgstr ""

# 29127e62daab4331b014d16d46da0412
#: ../../howto/custom-management-commands.txt:182
msgid ""
"Subclassing the :class:`BaseCommand` class requires that you implement the "
":meth:`~BaseCommand.handle` method."
msgstr ""

# 51a8b7cbf4c54565a1cbb95df8d2a26e
#: ../../howto/custom-management-commands.txt:188
msgid ""
"All attributes can be set in your derived class and can be used in "
":class:`BaseCommand`'s :ref:`subclasses<ref-basecommand-subclasses>`."
msgstr ""

# 3c40b6f1efc743da893fc0dd773b5350
#: ../../howto/custom-management-commands.txt:193
msgid ""
"A string listing the arguments accepted by the command, suitable for use in "
"help messages; e.g., a command which takes a list of application names might"
" set this to '<appname appname ...>'."
msgstr ""

# 1702d190fe0f44cabcf4024ce458cca9
#: ../../howto/custom-management-commands.txt:200
msgid ""
"A boolean indicating whether the command needs to be able to import Django "
"settings; if ``True``, ``execute()`` will verify that this is possible "
"before proceeding. Default value is ``True``."
msgstr ""

# efad81a702a942eeafb963040ecadc75
#: ../../howto/custom-management-commands.txt:207
msgid ""
"A short description of the command, which will be printed in the help "
"message when the user runs the command ``python manage.py help <command>``."
msgstr ""

# 3d4c777ffb69492ba3c1693f7898dd2e
#: ../../howto/custom-management-commands.txt:213
msgid ""
"This is the list of ``optparse`` options which will be fed into the "
"command's ``OptionParser`` for parsing arguments."
msgstr ""

# 42ef0f5121a943d58a42a87bd7125e48
#: ../../howto/custom-management-commands.txt:218
msgid ""
"A boolean indicating whether the command outputs SQL statements; if "
"``True``, the output will automatically be wrapped with ``BEGIN;`` and "
"``COMMIT;``. Default value is ``False``."
msgstr ""

# 2285e8c5b95649e680170c5c031877df
#: ../../howto/custom-management-commands.txt:225
msgid ""
"A boolean; if ``True``, validation of installed models will be performed "
"prior to executing the command. Default value is ``True``. To validate an "
"individual application's models rather than all applications' models, call "
":meth:`~BaseCommand.validate` from :meth:`~BaseCommand.handle`."
msgstr ""

# a3991d2b32864a34909e51416f1b1966
#: ../../howto/custom-management-commands.txt:234
msgid ""
":class:`BaseCommand` has a few methods that can be overridden but only the "
":meth:`~BaseCommand.handle` method must be implemented."
msgstr ""

# 9fcc7042f4334abeb46afd84a511204d
#: ../../howto/custom-management-commands.txt:239
msgid ""
"If you implement ``__init__`` in your subclass of :class:`BaseCommand`, you "
"must call :class:`BaseCommand`'s ``__init__``."
msgstr ""

# 3edcd0932fb9493280ed1d793b708f97
#: ../../howto/custom-management-commands.txt:251
msgid ""
"Return the Django version, which should be correct for all built-in Django "
"commands. User-supplied commands can override this method to return their "
"own version."
msgstr ""

# ba095dff820b42c7a18b06f45de2f058
#: ../../howto/custom-management-commands.txt:257
msgid ""
"Try to execute this command, performing model validation if needed (as "
"controlled by the attribute :attr:`requires_model_validation`). If the "
"command raises a :class:`CommandError`, intercept it and print it sensibly "
"to stderr."
msgstr ""

# e96f3c62c65c4d11a0f3337a1944545b
#: ../../howto/custom-management-commands.txt:265
msgid ""
"``execute()`` should not be called directly from your code to execute a "
"command. Use :ref:`call_command <call-command>` instead."
msgstr ""

# dca98bfb340f47d89dabf2d81b5bee4d
#: ../../howto/custom-management-commands.txt:270
msgid ""
"The actual logic of the command. Subclasses must implement this method."
msgstr ""

# fef85ff20635402c9cb07c97899d4101
#: ../../howto/custom-management-commands.txt:274
msgid "Validates the given app, raising :class:`CommandError` for any errors."
msgstr ""

# 35b23a40b6b646a882750f0b08234088
#: ../../howto/custom-management-commands.txt:276
msgid "If ``app`` is None, then all installed apps are validated."
msgstr ""

# aa92a173971f42eb88c68985033815f7
#: ../../howto/custom-management-commands.txt:282
msgid "BaseCommand subclasses"
msgstr ""

# d1cae1b14dd24545b7f276c7d93d7ced
#: ../../howto/custom-management-commands.txt:286
msgid ""
"A management command which takes one or more installed application names as "
"arguments, and does something with each of them."
msgstr ""

# 1c779f4eeac64dafa8f4e1d84dbc7151
#: ../../howto/custom-management-commands.txt:289
msgid ""
"Rather than implementing :meth:`~BaseCommand.handle`, subclasses must "
"implement :meth:`~AppCommand.handle_app`, which will be called once for each"
" application."
msgstr ""

# 428aca6ac3014ba0ae7895ac472b185e
#: ../../howto/custom-management-commands.txt:294
msgid ""
"Perform the command's actions for ``app``, which will be the Python module "
"corresponding to an application name given on the command line."
msgstr ""

# 196545cfd729452e9e2865b8cf17af85
#: ../../howto/custom-management-commands.txt:300
msgid ""
"A management command which takes one or more arbitrary arguments (labels) on"
" the command line, and does something with each of them."
msgstr ""

# 2f5ee1fa94224a8abbc5181569b06617
#: ../../howto/custom-management-commands.txt:304
msgid ""
"Rather than implementing :meth:`~BaseCommand.handle`, subclasses must "
"implement :meth:`~LabelCommand.handle_label`, which will be called once for "
"each label."
msgstr ""

# 3e021f633657471b8cdad07e857759db
#: ../../howto/custom-management-commands.txt:309
msgid ""
"Perform the command's actions for ``label``, which will be the string as "
"given on the command line."
msgstr ""

# 637309865a2640769e0e3c67ee6b89df
#: ../../howto/custom-management-commands.txt:314
msgid "A command which takes no arguments on the command line."
msgstr ""

# 302fe231bdae4f7daefad72efc58ee83
#: ../../howto/custom-management-commands.txt:316
msgid ""
"Rather than implementing :meth:`~BaseCommand.handle`, subclasses must "
"implement :meth:`~NoArgsCommand.handle_noargs`; :meth:`~BaseCommand.handle` "
"itself is overridden to ensure no arguments are passed to the command."
msgstr ""

# 40756e2ae5a840ccaf3e96bd695d0151
#: ../../howto/custom-management-commands.txt:322
msgid "Perform this command's actions"
msgstr ""

# 9bb5a825468b41e8b7ec28fae70adbdd
#: ../../howto/custom-management-commands.txt:327
msgid "Command exceptions"
msgstr ""

# c988ab8081c5411e9f3d51b61675853f
#: ../../howto/custom-management-commands.txt:331
msgid ""
"Exception class indicating a problem while executing a management command."
msgstr ""

# 6bae4022c30a45ebaed08eef289da4c7
#: ../../howto/custom-management-commands.txt:334
msgid ""
"If this exception is raised during the execution of a management command "
"from a command line console, it will be caught and turned into a nicely-"
"printed error message to the appropriate output stream (i.e., stderr); as a "
"result, raising this exception (with a sensible description of the error) is"
" the preferred way to indicate that something has gone wrong in the "
"execution of a command."
msgstr ""

# 75754613116e4c2dabea457405b4e6de
#: ../../howto/custom-management-commands.txt:341
msgid ""
"If a management command is called from code through :ref:`call_command "
"<call-command>`, it's up to you to catch the exception when needed."
msgstr ""

# 43127948c63a41f3a81ae3071d3c2b18
#: ../../howto/custom-model-fields.txt:3
msgid "Writing custom model fields"
msgstr ""

# b3ef74e18d7f4ad5adfd97205c60d7b9
#: ../../howto/custom-model-fields.txt:8
msgid "Introduction"
msgstr ""

# 2c6086c02c1f4ef494526eb2c1e63106
#: ../../howto/custom-model-fields.txt:10
msgid ""
"The :doc:`model reference </topics/db/models>` documentation explains how to"
" use Django's standard field classes -- "
":class:`~django.db.models.CharField`, :class:`~django.db.models.DateField`, "
"etc. For many purposes, those classes are all you'll need. Sometimes, "
"though, the Django version won't meet your precise requirements, or you'll "
"want to use a field that is entirely different from those shipped with "
"Django."
msgstr ""

# dce335c0abc44e4782a56a8de64a6513
#: ../../howto/custom-model-fields.txt:17
msgid ""
"Django's built-in field types don't cover every possible database column "
"type -- only the common types, such as ``VARCHAR`` and ``INTEGER``. For more"
" obscure column types, such as geographic polygons or even user-created "
"types such as `PostgreSQL custom types`_, you can define your own Django "
"``Field`` subclasses."
msgstr ""

# 427ae40ae11e481e9e9b611e5147e1fc
#: ../../howto/custom-model-fields.txt:24
msgid ""
"Alternatively, you may have a complex Python object that can somehow be "
"serialized to fit into a standard database column type. This is another case"
" where a ``Field`` subclass will help you use your object with your models."
msgstr ""

# a711e5e7695040b7a644498a2afb5469
#: ../../howto/custom-model-fields.txt:29
msgid "Our example object"
msgstr ""

# 7bf56e4e69664c6fbeb9399c05b16c68
#: ../../howto/custom-model-fields.txt:31
msgid ""
"Creating custom fields requires a bit of attention to detail. To make things"
" easier to follow, we'll use a consistent example throughout this document: "
"wrapping a Python object representing the deal of cards in a hand of "
"Bridge_. Don't worry, you don't have know how to play Bridge to follow this "
"example. You only need to know that 52 cards are dealt out equally to four "
"players, who are traditionally called *north*, *east*, *south* and *west*.  "
"Our class looks something like this::"
msgstr ""

# c2ae32c2400f4fa3993a58175741b17c
#: ../../howto/custom-model-fields.txt:53
msgid ""
"This is just an ordinary Python class, with nothing Django-specific about "
"it. We'd like to be able to do things like this in our models (we assume the"
" ``hand`` attribute on the model is an instance of ``Hand``)::"
msgstr ""

# cd3d6515bc52409bae89cf7be1fd0879
#: ../../howto/custom-model-fields.txt:64
msgid ""
"We assign to and retrieve from the ``hand`` attribute in our model just like"
" any other Python class. The trick is to tell Django how to handle saving "
"and loading such an object."
msgstr ""

# 2593cbc973aa489b8d4259f67bdb8676
#: ../../howto/custom-model-fields.txt:68
msgid ""
"In order to use the ``Hand`` class in our models, we **do not** have to "
"change this class at all. This is ideal, because it means you can easily "
"write model support for existing classes where you cannot change the source "
"code."
msgstr ""

# 2259cc6ffaef47d782bc292f2dd344b3
#: ../../howto/custom-model-fields.txt:73
msgid ""
"You might only be wanting to take advantage of custom database column types "
"and deal with the data as standard Python types in your models; strings, or "
"floats, for example. This case is similar to our ``Hand`` example and we'll "
"note any differences as we go along."
msgstr ""

# 15e3181e2d5545e98ac18a74c75334ee
#: ../../howto/custom-model-fields.txt:79
msgid "Background theory"
msgstr ""

# 4022f829cfcf44e1a4eaaf4c4cf490ea
#: ../../howto/custom-model-fields.txt:82
msgid "Database storage"
msgstr ""

# de7c23ea315e4b8582ac41d06c0df798
#: ../../howto/custom-model-fields.txt:84
msgid ""
"The simplest way to think of a model field is that it provides a way to take"
" a normal Python object -- string, boolean, ``datetime``, or something more "
"complex like ``Hand`` -- and convert it to and from a format that is useful "
"when dealing with the database (and serialization, but, as we'll see later, "
"that falls out fairly naturally once you have the database side under "
"control)."
msgstr ""

# 6af50182290b45a09c8664b72444f1bf
#: ../../howto/custom-model-fields.txt:90
msgid ""
"Fields in a model must somehow be converted to fit into an existing database"
" column type. Different databases provide different sets of valid column "
"types, but the rule is still the same: those are the only types you have to "
"work with. Anything you want to store in the database must fit into one of "
"those types."
msgstr ""

# dc247925c1d3411581c31497c28a6d58
#: ../../howto/custom-model-fields.txt:96
msgid ""
"Normally, you're either writing a Django field to match a particular "
"database column type, or there's a fairly straightforward way to convert "
"your data to, say, a string."
msgstr ""

# 482a0ea59bcc432aa7ba3914a92812a3
#: ../../howto/custom-model-fields.txt:100
msgid ""
"For our ``Hand`` example, we could convert the card data to a string of 104 "
"characters by concatenating all the cards together in a pre-determined order"
" -- say, all the *north* cards first, then the *east*, *south* and *west* "
"cards. So ``Hand`` objects can be saved to text or character columns in the "
"database."
msgstr ""

# 5d6ccf7738c84eadbd0f10353dc7fb76
#: ../../howto/custom-model-fields.txt:106
msgid "What does a field class do?"
msgstr ""

# 70df86ee11094d26bf4ec3d5aeae1e8a
#: ../../howto/custom-model-fields.txt:110
msgid ""
"All of Django's fields (and when we say *fields* in this document, we always"
" mean model fields and not :doc:`form fields </ref/forms/fields>`) are "
"subclasses of :class:`django.db.models.Field`. Most of the information that "
"Django records about a field is common to all fields -- name, help text, "
"uniqueness and so forth. Storing all that information is handled by "
"``Field``. We'll get into the precise details of what ``Field`` can do later"
" on; for now, suffice it to say that everything descends from ``Field`` and "
"then customizes key pieces of the class behavior."
msgstr ""

# 31a42b92f47a453686de7a0bf39f167f
#: ../../howto/custom-model-fields.txt:119
msgid ""
"It's important to realize that a Django field class is not what is stored in"
" your model attributes. The model attributes contain normal Python objects. "
"The field classes you define in a model are actually stored in the ``Meta`` "
"class when the model class is created (the precise details of how this is "
"done are unimportant here). This is because the field classes aren't "
"necessary when you're just creating and modifying attributes. Instead, they "
"provide the machinery for converting between the attribute value and what is"
" stored in the database or sent to the :doc:`serializer "
"</topics/serialization>`."
msgstr ""

# 17e45c075e234350bd3d188039898462
#: ../../howto/custom-model-fields.txt:128
msgid ""
"Keep this in mind when creating your own custom fields. The Django ``Field``"
" subclass you write provides the machinery for converting between your "
"Python instances and the database/serializer values in various ways (there "
"are differences between storing a value and using a value for lookups, for "
"example). If this sounds a bit tricky, don't worry -- it will become clearer"
" in the examples below. Just remember that you will often end up creating "
"two classes when you want a custom field:"
msgstr ""

# 569a351399cc419e89fd203af8159310
#: ../../howto/custom-model-fields.txt:136
msgid ""
"The first class is the Python object that your users will manipulate. They "
"will assign it to the model attribute, they will read from it for displaying"
" purposes, things like that. This is the ``Hand`` class in our example."
msgstr ""

# 43145fc5c7bd40aba924522435495cea
#: ../../howto/custom-model-fields.txt:141
msgid ""
"The second class is the ``Field`` subclass. This is the class that knows how"
" to convert your first class back and forth between its permanent storage "
"form and the Python form."
msgstr ""

# fdc3b12b5f3e4e9fb41a01a43e8652b8
#: ../../howto/custom-model-fields.txt:146
msgid "Writing a field subclass"
msgstr ""

# 6abc087b5c944d318f63d8e1c111b11e
#: ../../howto/custom-model-fields.txt:148
msgid ""
"When planning your :class:`~django.db.models.Field` subclass, first give "
"some thought to which existing :class:`~django.db.models.Field` class your "
"new field is most similar to. Can you subclass an existing Django field and "
"save yourself some work? If not, you should subclass the "
":class:`~django.db.models.Field` class, from which everything is descended."
msgstr ""

# 3eb6b77107084074b525ec9eae31b509
#: ../../howto/custom-model-fields.txt:154
msgid ""
"Initializing your new field is a matter of separating out any arguments that"
" are specific to your case from the common arguments and passing the latter "
"to the ``__init__()`` method of :class:`~django.db.models.Field` (or your "
"parent class)."
msgstr ""

# 44bfc9ca21fa4c6b91ef46a87c263389
#: ../../howto/custom-model-fields.txt:159
msgid ""
"In our example, we'll call our field ``HandField``. (It's a good idea to "
"call your :class:`~django.db.models.Field` subclass ``<Something>Field``, so"
" it's easily identifiable as a :class:`~django.db.models.Field` subclass.) "
"It doesn't behave like any existing field, so we'll subclass directly from "
":class:`~django.db.models.Field`::"
msgstr ""

# f71785a358c9406aadc9851a20031d77
#: ../../howto/custom-model-fields.txt:175
msgid ""
"Our ``HandField`` accepts most of the standard field options (see the list "
"below), but we ensure it has a fixed length, since it only needs to hold 52 "
"card values plus their suits; 104 characters in total."
msgstr ""

# 7bb468e06f8b4d07b9ec89fbf27ad273
#: ../../howto/custom-model-fields.txt:181
msgid ""
"Many of Django's model fields accept options that they don't do anything "
"with. For example, you can pass both "
":attr:`~django.db.models.Field.editable` and "
":attr:`~django.db.models.DateField.auto_now` to a "
":class:`django.db.models.DateField` and it will simply ignore the "
":attr:`~django.db.models.Field.editable` parameter "
"(:attr:`~django.db.models.DateField.auto_now` being set implies "
"``editable=False``). No error is raised in this case."
msgstr ""

# c454c50dc9df484a9557286c57b8ffcd
#: ../../howto/custom-model-fields.txt:190
msgid ""
"This behavior simplifies the field classes, because they don't need to check"
" for options that aren't necessary. They just pass all the options to the "
"parent class and then don't use them later on. It's up to you whether you "
"want your fields to be more strict about the options they select, or to use "
"the simpler, more permissive behavior of the current fields."
msgstr ""

# 52c7ba587bb34cb09135c55ab7f64668
#: ../../howto/custom-model-fields.txt:198
msgid ""
"The :meth:`~django.db.models.Field.__init__` method takes the following "
"parameters:"
msgstr ""

# 259f80886887490e975f4898dc94d310
#: ../../howto/custom-model-fields.txt:201
msgid ":attr:`~django.db.models.Field.verbose_name`"
msgstr ""

# 978155d89bac4896ad0d3a5af8102c24
#: ../../howto/custom-model-fields.txt:202
msgid "``name``"
msgstr ""

# 8272b77a2a88439d9668d3d036f33e54
#: ../../howto/custom-model-fields.txt:203
msgid ":attr:`~django.db.models.Field.primary_key`"
msgstr ""

# 21cdd1c76eac4bbc8cc8a2ad4b616212
#: ../../howto/custom-model-fields.txt:204
msgid ":attr:`~django.db.models.CharField.max_length`"
msgstr ""

# 3cac4216d2754f69a458aab19a416d73
#: ../../howto/custom-model-fields.txt:205
msgid ":attr:`~django.db.models.Field.unique`"
msgstr ""

# 349face9f29b418d9d5b8d7f21238344
#: ../../howto/custom-model-fields.txt:206
msgid ":attr:`~django.db.models.Field.blank`"
msgstr ""

# 64877503bf8d4e2283cbf59d5ebcaa98
#: ../../howto/custom-model-fields.txt:207
msgid ":attr:`~django.db.models.Field.null`"
msgstr ""

# 2b22c4086385430dbe2e01f63b45e8fc
#: ../../howto/custom-model-fields.txt:208
msgid ":attr:`~django.db.models.Field.db_index`"
msgstr ""

# b538e5dba47a494e925c2ba60c49b890
#: ../../howto/custom-model-fields.txt:209
msgid ""
"``rel``: Used for related fields (like :class:`ForeignKey`). For advanced "
"use only."
msgstr ""

# a0c491bf4ca74d0e81b3f1828a4ab01d
#: ../../howto/custom-model-fields.txt:211
msgid ":attr:`~django.db.models.Field.default`"
msgstr ""

# 46628699409941849cb92f7c0f7032eb
#: ../../howto/custom-model-fields.txt:212
msgid ":attr:`~django.db.models.Field.editable`"
msgstr ""

# d90a75c8bbc84b45baa15291607d4288
#: ../../howto/custom-model-fields.txt:213
msgid ""
"``serialize``: If ``False``, the field will not be serialized when the model"
" is passed to Django's :doc:`serializers </topics/serialization>`. Defaults "
"to ``True``."
msgstr ""

# fa762889f1bf44bdb22d4ff3792c91ca
#: ../../howto/custom-model-fields.txt:216
msgid ":attr:`~django.db.models.Field.unique_for_date`"
msgstr ""

# bc0fa33929ca43c8bb11fe1d5972d07a
#: ../../howto/custom-model-fields.txt:217
msgid ":attr:`~django.db.models.Field.unique_for_month`"
msgstr ""

# a8c6ebd5ef234341905756984aeb22ed
#: ../../howto/custom-model-fields.txt:218
msgid ":attr:`~django.db.models.Field.unique_for_year`"
msgstr ""

# e7108cec3ecb4a3b9a0a85cdc1e2180e
#: ../../howto/custom-model-fields.txt:219
msgid ":attr:`~django.db.models.Field.choices`"
msgstr ""

# 04f9c4679c164919ababe4a1242aaa6b
#: ../../howto/custom-model-fields.txt:220
msgid ":attr:`~django.db.models.Field.help_text`"
msgstr ""

# cec4020f1e904b04a02d856b53d70453
#: ../../howto/custom-model-fields.txt:221
msgid ":attr:`~django.db.models.Field.db_column`"
msgstr ""

# 7327d883eb6842c187f56ed8f85ffb9a
#: ../../howto/custom-model-fields.txt:222
msgid ""
":attr:`~django.db.models.Field.db_tablespace`: Only for index creation, if "
"the backend supports :doc:`tablespaces </topics/db/tablespaces>`. You can "
"usually ignore this option."
msgstr ""

# bd4b6ff8e86a443dadac9a662b8c4328
#: ../../howto/custom-model-fields.txt:225
msgid ""
"``auto_created``: ``True`` if the field was automatically created, as for "
"the :class:`~django.db.models.OneToOneField` used by model inheritance. For "
"advanced use only."
msgstr ""

# ccc2708c855a486fb64236da5e53aad6
#: ../../howto/custom-model-fields.txt:229
msgid ""
"All of the options without an explanation in the above list have the same "
"meaning they do for normal Django fields. See the :doc:`field documentation "
"</ref/models/fields>` for examples and details."
msgstr ""

# d0cfab562c02435c96884ac71887f11d
#: ../../howto/custom-model-fields.txt:234
msgid "The ``SubfieldBase`` metaclass"
msgstr ""

# 15bd049bc5aa4d8397615a52312cd2f8
#: ../../howto/custom-model-fields.txt:238
msgid ""
"As we indicated in the introduction_, field subclasses are often needed for "
"two reasons: either to take advantage of a custom database column type, or "
"to handle complex Python types. Obviously, a combination of the two is also "
"possible. If you're only working with custom database column types and your "
"model fields appear in Python as standard Python types direct from the "
"database backend, you don't need to worry about this section."
msgstr ""

# a68028f6e511462680620bf576464486
#: ../../howto/custom-model-fields.txt:245
msgid ""
"If you're handling custom Python types, such as our ``Hand`` class, we need "
"to make sure that when Django initializes an instance of our model and "
"assigns a database value to our custom field attribute, we convert that "
"value into the appropriate Python object. The details of how this happens "
"internally are a little complex, but the code you need to write in your "
"``Field`` class is simple: make sure your field subclass uses a special "
"metaclass:"
msgstr ""

# 22534ddb4aa24a9bbbf291e108a797ec
# 2ddcfd72ecaf46ed9e7af8cd9121ba83
# 7f5f0fe068ee466b9d3d4fd7ee283289
# 7e571757ac7843d1bec9db8382072fb0
#: ../../howto/custom-model-fields.txt:252
#: ../../howto/custom-model-fields.txt:342
#: ../../howto/custom-model-fields.txt:474
#: ../../howto/custom-model-fields.txt:645
msgid "For example::"
msgstr ""

# c164080268154ddaadb39b634f7d0839
#: ../../howto/custom-model-fields.txt:263
msgid ""
"This ensures that the :meth:`.to_python` method, documented below, will "
"always be called when the attribute is initialized."
msgstr ""

# 0391877a94194d81a2fbecd07f03566e
#: ../../howto/custom-model-fields.txt:267
msgid "ModelForms and custom fields"
msgstr ""

# 699376bc0b4b476dabac24354e5e688a
#: ../../howto/custom-model-fields.txt:269
msgid ""
"If you use :class:`~django.db.models.SubfieldBase`, :meth:`.to_python` will "
"be called every time an instance of the field is assigned a value. This "
"means that whenever a value may be assigned to the field, you need to ensure"
" that it will be of the correct datatype, or that you handle any exceptions."
msgstr ""

# 6d28b393b855454a8ad00b01c25a154e
#: ../../howto/custom-model-fields.txt:275
msgid ""
"This is especially important if you use :doc:`ModelForms "
"</topics/forms/modelforms>`. When saving a ModelForm, Django will use form "
"values to instantiate model instances. However, if the cleaned form data "
"can't be used as valid input to the field, the normal form validation "
"process will break."
msgstr ""

# 9b559641fa5f4cadbf4c4d71b7f63cce
#: ../../howto/custom-model-fields.txt:281
msgid ""
"Therefore, you must ensure that the form field used to represent your custom"
" field performs whatever input validation and data cleaning is necessary to "
"convert user-provided form input into a `to_python()`-compatible model field"
" value. This may require writing a custom form field, and/or implementing "
"the :meth:`.formfield` method on your field to return a form field class "
"whose `to_python()` returns the correct datatype."
msgstr ""

# 4e4ba22ed6514f44a394323f97395f3e
#: ../../howto/custom-model-fields.txt:290
msgid "Documenting your custom field"
msgstr ""

# adc63fcc8d7140abac23c1b47052eb4e
#: ../../howto/custom-model-fields.txt:294
msgid ""
"As always, you should document your field type, so users will know what it "
"is. In addition to providing a docstring for it, which is useful for "
"developers, you can also allow users of the admin app to see a short "
"description of the field type via the :doc:`django.contrib.admindocs "
"</ref/contrib/admin/admindocs>` application. To do this simply provide "
"descriptive text in a ``description`` class attribute of your custom field. "
"In the above example, the description displayed by the ``admindocs`` "
"application for a ``HandField`` will be 'A hand of cards (bridge style)'."
msgstr ""

# 8446c3fdf3754bcb860ca66ccb25f054
#: ../../howto/custom-model-fields.txt:304
msgid "Useful methods"
msgstr ""

# 7d94f328808f49a785e5192473b2d7f0
#: ../../howto/custom-model-fields.txt:306
msgid ""
"Once you've created your :class:`~django.db.models.Field` subclass and set "
"up the ``__metaclass__``, you might consider overriding a few standard "
"methods, depending on your field's behavior. The list of methods below is in"
" approximately decreasing order of importance, so start from the top."
msgstr ""

# ca2245e2c5454ad292fe0b7cb030dd20
#: ../../howto/custom-model-fields.txt:312
msgid "Custom database types"
msgstr ""

# 320dd45ed0f84978a7159b6e62b2a590
#: ../../howto/custom-model-fields.txt:316
msgid ""
"Returns the database column data type for the "
":class:`~django.db.models.Field`, taking into account the connection object,"
" and the settings associated with it."
msgstr ""

# 31c3b993970543b288146685f1ae19e7
#: ../../howto/custom-model-fields.txt:319
msgid ""
"Say you've created a PostgreSQL custom type called ``mytype``. You can use "
"this field with Django by subclassing ``Field`` and implementing the "
":meth:`.db_type` method, like so::"
msgstr ""

# 7bf1e805ba124707957913a7cdc7ed04
#: ../../howto/custom-model-fields.txt:329
msgid ""
"Once you have ``MytypeField``, you can use it in any model, just like any "
"other ``Field`` type::"
msgstr ""

# 1cebc26027da45e3924a6dd08f9259cc
#: ../../howto/custom-model-fields.txt:336
msgid ""
"If you aim to build a database-agnostic application, you should account for "
"differences in database column types. For example, the date/time column type"
" in PostgreSQL is called ``timestamp``, while the same column in MySQL is "
"called ``datetime``. The simplest way to handle this in a :meth:`.db_type` "
"method is to check the ``connection.settings_dict['ENGINE']`` attribute."
msgstr ""

# 8d1aa8efbd7645ec9f318eef68f8e809
#: ../../howto/custom-model-fields.txt:351
msgid ""
"The :meth:`.db_type` method is only called by Django when the framework "
"constructs the ``CREATE TABLE`` statements for your application -- that is, "
"when you first create your tables. It's not called at any other time, so it "
"can afford to execute slightly complex code, such as the "
"``connection.settings_dict`` check in the above example."
msgstr ""

# 37265bc2d4a04cbea39c4841970fe4ac
#: ../../howto/custom-model-fields.txt:357
msgid ""
"Some database column types accept parameters, such as ``CHAR(25)``, where "
"the parameter ``25`` represents the maximum column length. In cases like "
"these, it's more flexible if the parameter is specified in the model rather "
"than being hard-coded in the ``db_type()`` method. For example, it wouldn't "
"make much sense to have a ``CharMaxlength25Field``, shown here::"
msgstr ""

# 5e7324a729604a488a66daacebad7ce7
#: ../../howto/custom-model-fields.txt:373
msgid ""
"The better way of doing this would be to make the parameter specifiable at "
"run time -- i.e., when the class is instantiated. To do that, just implement"
" :meth:`django.db.models.Field.__init__`, like so::"
msgstr ""

# cd297ad248e7439f8607439d7a68e0c5
#: ../../howto/custom-model-fields.txt:391
msgid ""
"Finally, if your column requires truly complex SQL setup, return ``None`` "
"from :meth:`.db_type`. This will cause Django's SQL creation code to skip "
"over this field. You are then responsible for creating the column in the "
"right table in some other way, of course, but this gives you a way to tell "
"Django to get out of the way."
msgstr ""

# 182d85c83e80440c982293fa701036b8
#: ../../howto/custom-model-fields.txt:398
msgid "Converting database values to Python objects"
msgstr ""

# 396f158824bc4df8801dfc3726c19b8c
#: ../../howto/custom-model-fields.txt:402
msgid ""
"Converts a value as returned by your database (or a serializer) to a Python "
"object."
msgstr ""

# 78572cc1592d4ede8d0358345a935a4a
#: ../../howto/custom-model-fields.txt:405
msgid ""
"The default implementation simply returns ``value``, for the common case in "
"which the database backend already returns data in the correct format (as a "
"Python string, for example)."
msgstr ""

# 7cfacda7631d4a1a95503df745bc86fe
#: ../../howto/custom-model-fields.txt:409
msgid ""
"If your custom :class:`~django.db.models.Field` class deals with data "
"structures that are more complex than strings, dates, integers or floats, "
"then you'll need to override this method. As a general rule, the method "
"should deal gracefully with any of the following arguments:"
msgstr ""

# 3621f1c4475a4008866b38d5488647b0
#: ../../howto/custom-model-fields.txt:414
msgid ""
"An instance of the correct type (e.g., ``Hand`` in our ongoing example)."
msgstr ""

# 72c095c4f1754d32877f0c18ecf97cb0
#: ../../howto/custom-model-fields.txt:416
msgid "A string (e.g., from a deserializer)."
msgstr ""

# c3ab6797ffda463abaf6414a3b42ce5a
#: ../../howto/custom-model-fields.txt:418
msgid "Whatever the database returns for the column type you're using."
msgstr ""

# 9f3ed5e14f594f009a41c453b091ce3a
#: ../../howto/custom-model-fields.txt:420
msgid ""
"In our ``HandField`` class, we're storing the data as a VARCHAR field in the"
" database, so we need to be able to process strings and ``Hand`` instances "
"in :meth:`.to_python`::"
msgstr ""

# 280206afe95645a6be4f4563bdb492df
#: ../../howto/custom-model-fields.txt:441
msgid ""
"Notice that we always return a ``Hand`` instance from this method. That's "
"the Python object type we want to store in the model's attribute. If "
"anything is going wrong during value conversion, you should raise a "
":exc:`~django.core.exceptions.ValidationError` exception."
msgstr ""

# 4fefc0fd2f944bf9889d6553dce7390b
#: ../../howto/custom-model-fields.txt:446
msgid ""
"**Remember:** If your custom field needs the :meth:`.to_python` method to be"
" called when it is created, you should be using `The SubfieldBase "
"metaclass`_ mentioned earlier. Otherwise :meth:`.to_python` won't be called "
"automatically."
msgstr ""

# 5f1e77bb681c4581a8fb56cdcefc2571
#: ../../howto/custom-model-fields.txt:453
msgid ""
"If your custom field allows ``null=True``, any field method that takes "
"``value`` as an argument, like :meth:`~Field.to_python` and "
":meth:`~Field.get_prep_value`, should handle the case when ``value`` is "
"``None``."
msgstr ""

# 8fda3085a34f48c8bac1b19a54ca63aa
#: ../../howto/custom-model-fields.txt:459
msgid "Converting Python objects to query values"
msgstr ""

# 801cfc444438416bae4ea6fb22169a24
#: ../../howto/custom-model-fields.txt:463
msgid ""
"This is the reverse of :meth:`.to_python` when working with the database "
"backends (as opposed to serialization). The ``value`` parameter is the "
"current value of the model's attribute (a field has no reference to its "
"containing model, so it cannot retrieve the value itself), and the method "
"should return data in a format that has been prepared for use as a parameter"
" in a query."
msgstr ""

# c7ef994d94624d7bb969f775dc6cdc55
#: ../../howto/custom-model-fields.txt:470
msgid ""
"This conversion should *not* include any database-specific conversions. If "
"database-specific conversions are required, they should be made in the call "
"to :meth:`.get_db_prep_value`."
msgstr ""

# 5bb440554e864c839be3c2774085e6e8
#: ../../howto/custom-model-fields.txt:484
msgid "Converting query values to database values"
msgstr ""

# 396f6709a9364428ba146530158b56ef
#: ../../howto/custom-model-fields.txt:488
msgid ""
"Some data types (for example, dates) need to be in a specific format before "
"they can be used by a database backend. :meth:`.get_db_prep_value` is the "
"method where those conversions should be made. The specific connection that "
"will be used for the query is passed as the ``connection`` parameter. This "
"allows you to use backend-specific conversion logic if it is required."
msgstr ""

# 05d4ee02f2ed43b383d16cdf7c75187e
#: ../../howto/custom-model-fields.txt:495
msgid ""
"The ``prepared`` argument describes whether or not the value has already "
"been passed through :meth:`.get_prep_value` conversions. When ``prepared`` "
"is False, the default implementation of :meth:`.get_db_prep_value` will call"
" :meth:`.get_prep_value` to do initial data conversions before performing "
"any database-specific processing."
msgstr ""

# 4025cdc2bb3d475eb287b419cafa01c4
#: ../../howto/custom-model-fields.txt:504
msgid ""
"Same as the above, but called when the Field value must be *saved* to the "
"database. As the default implementation just calls "
":meth:`.get_db_prep_value`, you shouldn't need to implement this method "
"unless your custom field needs a special conversion when being saved that is"
" not the same as the conversion used for normal query parameters (which is "
"implemented by :meth:`.get_db_prep_value`)."
msgstr ""

# 03a1582d040e4653a777ba25dbe0901d
#: ../../howto/custom-model-fields.txt:512
msgid "Preprocessing values before saving"
msgstr ""

# 06a8f17a5e144e82bb225200ed4f9ba2
#: ../../howto/custom-model-fields.txt:516
msgid ""
"This method is called just prior to :meth:`.get_db_prep_save` and should "
"return the value of the appropriate attribute from ``model_instance`` for "
"this field. The attribute name is in ``self.attname`` (this is set up by "
":class:`~django.db.models.Field`). If the model is being saved to the "
"database for the first time, the ``add`` parameter will be ``True``, "
"otherwise it will be ``False``."
msgstr ""

# ca010a89c9f34d39809726c38266aba9
#: ../../howto/custom-model-fields.txt:523
msgid ""
"You only need to override this method if you want to preprocess the value "
"somehow, just before saving. For example, Django's "
":class:`~django.db.models.DateTimeField` uses this method to set the "
"attribute correctly in the case of "
":attr:`~django.db.models.DateField.auto_now` or "
":attr:`~django.db.models.DateField.auto_now_add`."
msgstr ""

# ca5e5e50885f4ac5b5a305c4d41a2d17
#: ../../howto/custom-model-fields.txt:529
msgid ""
"If you do override this method, you must return the value of the attribute "
"at the end. You should also update the model's attribute if you make any "
"changes to the value so that code holding references to the model will "
"always see the correct value."
msgstr ""

# d1d063638e2442b58b34aa341e32d1a8
#: ../../howto/custom-model-fields.txt:535
msgid "Preparing values for use in database lookups"
msgstr ""

# 70be69bf043748c6b8568305d7a47841
#: ../../howto/custom-model-fields.txt:537
msgid ""
"As with value conversions, preparing a value for database lookups is a two "
"phase process."
msgstr ""

# 0bab67553d9746df95bde11c0faeb916
#: ../../howto/custom-model-fields.txt:542
msgid ""
":meth:`.get_prep_lookup` performs the first phase of lookup preparation, "
"performing generic data validity checks"
msgstr ""

# 3ec5098208fe41ebb5c2f59faf68cbd6
#: ../../howto/custom-model-fields.txt:545
msgid ""
"Prepares the ``value`` for passing to the database when used in a lookup (a "
"``WHERE`` constraint in SQL). The ``lookup_type`` will be one of the valid "
"Django filter lookups: ``exact``, ``iexact``, ``contains``, ``icontains``, "
"``gt``, ``gte``, ``lt``, ``lte``, ``in``, ``startswith``, ``istartswith``, "
"``endswith``, ``iendswith``, ``range``, ``year``, ``month``, ``day``, "
"``isnull``, ``search``, ``regex``, and ``iregex``."
msgstr ""

# f604c9ad3d5c4ca49cf7f764a9e37b51
#: ../../howto/custom-model-fields.txt:552
msgid ""
"Your method must be prepared to handle all of these ``lookup_type`` values "
"and should raise either a ``ValueError`` if the ``value`` is of the wrong "
"sort (a list when you were expecting an object, for example) or a "
"``TypeError`` if your field does not support that type of lookup. For many "
"fields, you can get by with handling the lookup types that need special "
"handling for your field and pass the rest to the :meth:`.get_db_prep_lookup`"
" method of the parent class."
msgstr ""

# 4a13bbaf80cd4bdaabf67a1bad485776
#: ../../howto/custom-model-fields.txt:559
msgid ""
"If you needed to implement ``get_db_prep_save()``, you will usually need to "
"implement ``get_prep_lookup()``. If you don't, ``get_prep_value`` will be "
"called by the default implementation, to manage ``exact``, ``gt``, ``gte``, "
"``lt``, ``lte``, ``in`` and ``range`` lookups."
msgstr ""

# 23bf03aa195e43fc8ccd1a4ef07b4db4
#: ../../howto/custom-model-fields.txt:564
msgid ""
"You may also want to implement this method to limit the lookup types that "
"could be used with your custom field type."
msgstr ""

# fdc4f1b5b69f48ae89668be4ed60b0c9
#: ../../howto/custom-model-fields.txt:567
msgid ""
"Note that, for ``range`` and ``in`` lookups, ``get_prep_lookup`` will "
"receive a list of objects (presumably of the right type) and will need to "
"convert them to a list of things of the right type for passing to the "
"database. Most of the time, you can reuse ``get_prep_value()``, or at least "
"factor out some common pieces."
msgstr ""

# 69973dce2e4144fab2c3de4f7eae69c1
#: ../../howto/custom-model-fields.txt:573
msgid ""
"For example, the following code implements ``get_prep_lookup`` to limit the "
"accepted lookup types to ``exact`` and ``in``::"
msgstr ""

# 57cc8661493a45cc8d3427150e2546ba
#: ../../howto/custom-model-fields.txt:590
msgid ""
"Performs any database-specific data conversions required by a lookup. As "
"with :meth:`.get_db_prep_value`, the specific connection that will be used "
"for the query is passed as the ``connection`` parameter. The ``prepared`` "
"argument describes whether the value has already been prepared with "
":meth:`.get_prep_lookup`."
msgstr ""

# 85e33c71d3ff4138aa73dba959b69548
#: ../../howto/custom-model-fields.txt:597
msgid "Specifying the form field for a model field"
msgstr ""

# 3633b7fe304f481f90349dfeed05e068
#: ../../howto/custom-model-fields.txt:601
msgid ""
"Returns the default form field to use when this field is displayed in a "
"model. This method is called by the :class:`~django.forms.ModelForm` helper."
msgstr ""

# 280069d8563548f6accb81b735db329e
#: ../../howto/custom-model-fields.txt:604
msgid ""
"All of the ``kwargs`` dictionary is passed directly to the form field's "
"``__init__()`` method. Normally, all you need to do is set up a good default"
" for the ``form_class`` argument and then delegate further handling to the "
"parent class. This might require you to write a custom form field (and even "
"a form widget). See the :doc:`forms documentation </topics/forms/index>` for"
" information about this, and take a look at the code in "
":mod:`django.contrib.localflavor` for some examples of custom widgets."
msgstr ""

# 2c19ca093cf6444e89f36599f7712664
#: ../../howto/custom-model-fields.txt:612
msgid ""
"Continuing our ongoing example, we can write the :meth:`.formfield` method "
"as::"
msgstr ""

# c1f64e398abf4a7ab5139de699929c97
#: ../../howto/custom-model-fields.txt:624
msgid ""
"This assumes we've imported a ``MyFormField`` field class (which has its own"
" default widget). This document doesn't cover the details of writing custom "
"form fields."
msgstr ""

# 43cc23dc1df0440d921149dbc987d29a
#: ../../howto/custom-model-fields.txt:632
msgid "Emulating built-in field types"
msgstr ""

# 56533101c0a240a69b95dc8065e13d3d
#: ../../howto/custom-model-fields.txt:636
msgid ""
"Returns a string giving the name of the :class:`~django.db.models.Field` "
"subclass we are emulating at the database level. This is used to determine "
"the type of database column for simple cases."
msgstr ""

# c937c06a57af4e309b1d0b7ccbd4a521
#: ../../howto/custom-model-fields.txt:640
msgid ""
"If you have created a :meth:`.db_type` method, you don't need to worry about"
" :meth:`.get_internal_type` -- it won't be used much. Sometimes, though, "
"your database storage is similar in type to some other field, so you can use"
" that other field's logic to create the right column."
msgstr ""

# fb78ff42b8ed406e8bc126d8601d3155
#: ../../howto/custom-model-fields.txt:653
msgid ""
"No matter which database backend we are using, this will mean that "
"``syncdb`` and other SQL commands create the right column type for storing a"
" string."
msgstr ""

# 9b9f8ab0c8f44b3c82eb612413935d13
#: ../../howto/custom-model-fields.txt:656
msgid ""
"If :meth:`.get_internal_type` returns a string that is not known to Django "
"for the database backend you are using -- that is, it doesn't appear in "
"``django.db.backends.<db_name>.creation.DATA_TYPES`` -- the string will "
"still be used by the serializer, but the default :meth:`.db_type` method "
"will return ``None``. See the documentation of :meth:`.db_type` for reasons "
"why this might be useful. Putting a descriptive string in as the type of the"
" field for the serializer is a useful idea if you're ever going to be using "
"the serializer output in some other place, outside of Django."
msgstr ""

# 26494c6b449045cea856bdecbd50aca5
#: ../../howto/custom-model-fields.txt:666
msgid "Converting field data for serialization"
msgstr ""

# 1124710ea865449ab439fe78a2219f61
#: ../../howto/custom-model-fields.txt:670
msgid ""
"This method is used by the serializers to convert the field into a string "
"for output. Calling ``Field._get_val_from_obj(obj)`` is the best way to get "
"the value to serialize. For example, since our ``HandField`` uses strings "
"for its data storage anyway, we can reuse some existing conversion code::"
msgstr ""

# db6dfd60a3f043f294561188f819a948
#: ../../howto/custom-model-fields.txt:683
msgid "Some general advice"
msgstr ""

# 825779672dbe45a09d07e0f6fdda440e
#: ../../howto/custom-model-fields.txt:685
msgid ""
"Writing a custom field can be a tricky process, particularly if you're doing"
" complex conversions between your Python types and your database and "
"serialization formats. Here are a couple of tips to make things go more "
"smoothly:"
msgstr ""

# 543c19cab43b49a8a56b1dc28eb14200
#: ../../howto/custom-model-fields.txt:690
msgid ""
"Look at the existing Django fields (in "
":file:`django/db/models/fields/__init__.py`) for inspiration. Try to find a "
"field that's similar to what you want and extend it a little bit, instead of"
" creating an entirely new field from scratch."
msgstr ""

# a0528f5392b34c77b83cf0b290356823
#: ../../howto/custom-model-fields.txt:695
msgid ""
"Put a ``__str__()`` or ``__unicode__()`` method on the class you're wrapping"
" up as a field. There are a lot of places where the default behavior of the "
"field code is to call :func:`~django.utils.encoding.force_text` on the "
"value. (In our examples in this document, ``value`` would be a ``Hand`` "
"instance, not a ``HandField``). So if your ``__unicode__()`` method "
"automatically converts to the string form of your Python object, you can "
"save yourself a lot of work."
msgstr ""

# 06fe3ec0474b4d0eb6d2f68200a672eb
#: ../../howto/custom-model-fields.txt:706
msgid "Writing a ``FileField`` subclass"
msgstr ""

# 33ad5f109a044b3ea46559f770fc4980
#: ../../howto/custom-model-fields.txt:708
msgid ""
"In addition to the above methods, fields that deal with files have a few "
"other special requirements which must be taken into account. The majority of"
" the mechanics provided by ``FileField``, such as controlling database "
"storage and retrieval, can remain unchanged, leaving subclasses to deal with"
" the challenge of supporting a particular type of file."
msgstr ""

# 8c862f730767405483f02ab27434704f
#: ../../howto/custom-model-fields.txt:714
msgid ""
"Django provides a ``File`` class, which is used as a proxy to the file's "
"contents and operations. This can be subclassed to customize how the file is"
" accessed, and what methods are available. It lives at "
"``django.db.models.fields.files``, and its default behavior is explained in "
"the :doc:`file documentation </ref/files/file>`."
msgstr ""

# 99f2ae4e0f0b419dac0dca079077869e
#: ../../howto/custom-model-fields.txt:720
msgid ""
"Once a subclass of ``File`` is created, the new ``FileField`` subclass must "
"be told to use it. To do so, simply assign the new ``File`` subclass to the "
"special ``attr_class`` attribute of the ``FileField`` subclass."
msgstr ""

# 7b1e775f0b3444f79ba2e96be8097c01
#: ../../howto/custom-model-fields.txt:725
msgid "A few suggestions"
msgstr ""

# 3968ddeb1ae245aeae6ae5d93b6a60a3
#: ../../howto/custom-model-fields.txt:727
msgid ""
"In addition to the above details, there are a few guidelines which can "
"greatly improve the efficiency and readability of the field's code."
msgstr ""

# 7a792db46b504858a76ba5a35e0de751
#: ../../howto/custom-model-fields.txt:730
msgid ""
"The source for Django's own ``ImageField`` (in "
"``django/db/models/fields/files.py``) is a great example of how to subclass "
"``FileField`` to support a particular type of file, as it incorporates all "
"of the techniques described above."
msgstr ""

# bf69c81bcdf94998b3554f9dbcbf5d89
#: ../../howto/custom-model-fields.txt:735
msgid ""
"Cache file attributes wherever possible. Since files may be stored in remote"
" storage systems, retrieving them may cost extra time, or even money, that "
"isn't always necessary. Once a file is retrieved to obtain some data about "
"its content, cache as much of that data as possible to reduce the number of "
"times the file must be retrieved on subsequent calls for that information."
msgstr ""

# b4652036387b43b5ba8b7629726f3b16
#: ../../howto/custom-template-tags.txt:3
msgid "Custom template tags and filters"
msgstr ""

# 37f7df884f9e46f2a2c9dcdda65976c3
#: ../../howto/custom-template-tags.txt:5
msgid ""
"Django's template system comes with a wide variety of :doc:`built-in tags "
"and filters </ref/templates/builtins>` designed to address the presentation "
"logic needs of your application. Nevertheless, you may find yourself needing"
" functionality that is not covered by the core set of template primitives. "
"You can extend the template engine by defining custom tags and filters using"
" Python, and then make them available to your templates using the :ttag:`{% "
"load %}<load>` tag."
msgstr ""

# 25ed71f4cd074a359977545ad838d875
#: ../../howto/custom-template-tags.txt:14
msgid "Code layout"
msgstr ""

# 94646dc94fd44888b046995f96edc1af
#: ../../howto/custom-template-tags.txt:16
msgid ""
"Custom template tags and filters must live inside a Django app. If they "
"relate to an existing app it makes sense to bundle them there; otherwise, "
"you should create a new app to hold them."
msgstr ""

# 157198c2875746ff94231b3053e1cb31
#: ../../howto/custom-template-tags.txt:20
msgid ""
"The app should contain a ``templatetags`` directory, at the same level as "
"``models.py``, ``views.py``, etc. If this doesn't already exist, create it -"
" don't forget the ``__init__.py`` file to ensure the directory is treated as"
" a Python package."
msgstr ""

# d6f1cca9f44a40bbad46a0875d154f17
#: ../../howto/custom-template-tags.txt:25
msgid ""
"Your custom tags and filters will live in a module inside the "
"``templatetags`` directory. The name of the module file is the name you'll "
"use to load the tags later, so be careful to pick a name that won't clash "
"with custom tags and filters in another app."
msgstr ""

# be842fa06cdd48ceb143a72b8c524f81
#: ../../howto/custom-template-tags.txt:30
msgid ""
"For example, if your custom tags/filters are in a file called "
"``poll_extras.py``, your app layout might look like this::"
msgstr ""

# 91901c497b6e444b94301626b8cf771e
#: ../../howto/custom-template-tags.txt:40
msgid "And in your template you would use the following:"
msgstr ""

# 9d3f5971ab574526970eb535968da2be
#: ../../howto/custom-template-tags.txt:46
msgid ""
"The app that contains the custom tags must be in :setting:`INSTALLED_APPS` "
"in order for the :ttag:`{% load %}<load>` tag to work. This is a security "
"feature: It allows you to host Python code for many template libraries on a "
"single host machine without enabling access to all of them for every Django "
"installation."
msgstr ""

# 51a61b31e3eb443080cbe9103d2532dc
#: ../../howto/custom-template-tags.txt:51
msgid ""
"There's no limit on how many modules you put in the ``templatetags`` "
"package. Just keep in mind that a :ttag:`{% load %}<load>` statement will "
"load tags/filters for the given Python module name, not the name of the app."
msgstr ""

# 1229d02f2ec544e68c43b207def749bc
#: ../../howto/custom-template-tags.txt:55
msgid ""
"To be a valid tag library, the module must contain a module-level variable "
"named ``register`` that is a ``template.Library`` instance, in which all the"
" tags and filters are registered. So, near the top of your module, put the "
"following:"
msgstr ""

# 53f55b70da4740b8a875df66e0a6e613
#: ../../howto/custom-template-tags.txt:69
msgid ""
"For a ton of examples, read the source code for Django's default filters and"
" tags. They're in ``django/template/defaultfilters.py`` and "
"``django/template/defaulttags.py``, respectively."
msgstr ""

# a1e4a0915218420ca0356bb77bd77248
#: ../../howto/custom-template-tags.txt:73
msgid "For more information on the :ttag:`load` tag, read its documentation."
msgstr ""

# 2f879ed2b63945ac8db9600aea0b74d7
#: ../../howto/custom-template-tags.txt:76
msgid "Writing custom template filters"
msgstr ""

# 29eaa4f1f4ca402b8b0be3de7c6aaf5f
#: ../../howto/custom-template-tags.txt:78
msgid ""
"Custom filters are just Python functions that take one or two arguments:"
msgstr ""

# 56c017ffcfb34d75973fd95f90c12987
#: ../../howto/custom-template-tags.txt:80
msgid "The value of the variable (input) -- not necessarily a string."
msgstr ""

# d0c5fe602497443b9e015fdaf396a258
#: ../../howto/custom-template-tags.txt:81
msgid ""
"The value of the argument -- this can have a default value, or be left out "
"altogether."
msgstr ""

# d4cad106bed849e1812e3025367cf67a
#: ../../howto/custom-template-tags.txt:84
msgid ""
"For example, in the filter ``{{ var|foo:\"bar\" }}``, the filter ``foo`` "
"would be passed the variable ``var`` and the argument ``\"bar\"``."
msgstr ""

# 36123c5f54e94409ad5f410cc3059ef6
#: ../../howto/custom-template-tags.txt:87
msgid ""
"Filter functions should always return something. They shouldn't raise "
"exceptions. They should fail silently. In case of error, they should return "
"either the original input or an empty string -- whichever makes more sense."
msgstr ""

# 919a5038fd744f8aaff327a706089b22
#: ../../howto/custom-template-tags.txt:91
msgid "Here's an example filter definition:"
msgstr ""

# e870746b50a04da0b4b461a43011804b
#: ../../howto/custom-template-tags.txt:99
msgid "And here's an example of how that filter would be used:"
msgstr ""

# 182a3df133fe4d6a81b15013ad7fe882
#: ../../howto/custom-template-tags.txt:105
msgid ""
"Most filters don't take arguments. In this case, just leave the argument out"
" of your function. Example:"
msgstr ""

# c782a021b9964ed0a4e4620179411296
#: ../../howto/custom-template-tags.txt:115
msgid "Registering custom filters"
msgstr ""

# 7fac2abb6c66478a807375894aa74f48
#: ../../howto/custom-template-tags.txt:119
msgid ""
"Once you've written your filter definition, you need to register it with "
"your ``Library`` instance, to make it available to Django's template "
"language:"
msgstr ""

# 6f24b46bc1c745178b4316c42f03d5c8
#: ../../howto/custom-template-tags.txt:127
msgid "The ``Library.filter()`` method takes two arguments:"
msgstr ""

# 4728a2bb5eb34511890209111e95237e
#: ../../howto/custom-template-tags.txt:129
msgid "The name of the filter -- a string."
msgstr ""

# 74af6a59ba9c4445910d15e48e2eb523
# ba5618a2f2af4fa6ac2019cac4a33ced
#: ../../howto/custom-template-tags.txt:130
#: ../../howto/custom-template-tags.txt:640
msgid ""
"The compilation function -- a Python function (not the name of the function "
"as a string)."
msgstr ""

# 7ae75509933446eaad871f8a7bce19cb
#: ../../howto/custom-template-tags.txt:133
msgid "You can use ``register.filter()`` as a decorator instead:"
msgstr ""

# 664b3a91f1bf4103a028881cd8a8aa08
#: ../../howto/custom-template-tags.txt:145
msgid ""
"If you leave off the ``name`` argument, as in the second example above, "
"Django will use the function's name as the filter name."
msgstr ""

# 27f8eb4cc45b485a9bec59dd0dc80240
#: ../../howto/custom-template-tags.txt:148
msgid ""
"Finally, ``register.filter()`` also accepts three keyword arguments, "
"``is_safe``, ``needs_autoescape``, and ``expects_localtime``. These "
"arguments are described in :ref:`filters and auto-escaping <filters-auto-"
"escaping>` and :ref:`filters and time zones <filters-timezones>` below."
msgstr ""

# d684fabc0f124cdfaf9a1ec9a73dea0e
#: ../../howto/custom-template-tags.txt:154
msgid "Template filters that expect strings"
msgstr ""

# 2bb180210cc7413c854ed25395babaf3
#: ../../howto/custom-template-tags.txt:158
msgid ""
"If you're writing a template filter that only expects a string as the first "
"argument, you should use the decorator ``stringfilter``. This will convert "
"an object to its string value before being passed to your function:"
msgstr ""

# 78be8288bc6a4e24ae9987aeb2e87a59
#: ../../howto/custom-template-tags.txt:174
msgid ""
"This way, you'll be able to pass, say, an integer to this filter, and it "
"won't cause an ``AttributeError`` (because integers don't have ``lower()`` "
"methods)."
msgstr ""

# 252d0e8b26ba4277934702cf76dc7169
#: ../../howto/custom-template-tags.txt:181
msgid "Filters and auto-escaping"
msgstr ""

# d23352e3a1144c65b9d49053e42dc276
#: ../../howto/custom-template-tags.txt:183
msgid ""
"When writing a custom filter, give some thought to how the filter will "
"interact with Django's auto-escaping behavior. Note that three types of "
"strings can be passed around inside the template code:"
msgstr ""

# 6ba3aa8a6a1443bfa324c751723b5899
#: ../../howto/custom-template-tags.txt:187
msgid ""
"**Raw strings** are the native Python ``str`` or ``unicode`` types. On "
"output, they're escaped if auto-escaping is in effect and presented "
"unchanged, otherwise."
msgstr ""

# be38059b33554e09b9f3f971eb9567e3
#: ../../howto/custom-template-tags.txt:191
msgid ""
"**Safe strings** are strings that have been marked safe from further "
"escaping at output time. Any necessary escaping has already been done. "
"They're commonly used for output that contains raw HTML that is intended to "
"be interpreted as-is on the client side."
msgstr ""

# e4b782cddca942e6a899ffbd00ef3278
#: ../../howto/custom-template-tags.txt:196
msgid ""
"Internally, these strings are of type ``SafeBytes`` or ``SafeText``. They "
"share a common base class of ``SafeData``, so you can test for them using "
"code like:"
msgstr ""

# e084ec39b7a44e8f95b193fbccb7b4c3
#: ../../howto/custom-template-tags.txt:206
msgid ""
"**Strings marked as \"needing escaping\"** are *always* escaped on output, "
"regardless of whether they are in an :ttag:`autoescape` block or not. These "
"strings are only escaped once, however, even if auto-escaping applies."
msgstr ""

# 9e4c5e3924404bf3931b4149b1c785de
#: ../../howto/custom-template-tags.txt:211
msgid ""
"Internally, these strings are of type ``EscapeBytes`` or ``EscapeText``. "
"Generally you don't have to worry about these; they exist for the "
"implementation of the :tfilter:`escape` filter."
msgstr ""

# 18dca7a92ed149b392da57f5da40d6d3
#: ../../howto/custom-template-tags.txt:215
msgid "Template filter code falls into one of two situations:"
msgstr ""

# f7c63995c32d468fa395fd327b17abe4
#: ../../howto/custom-template-tags.txt:217
msgid ""
"Your filter does not introduce any HTML-unsafe characters (``<``, ``>``, "
"``'``, ``\"`` or ``&``) into the result that were not already present. In "
"this case, you can let Django take care of all the auto-escaping handling "
"for you. All you need to do is set the ``is_safe`` flag to ``True`` when you"
" register your filter function, like so:"
msgstr ""

# 88cf5f9b353a48c19590472beb66bb7d
#: ../../howto/custom-template-tags.txt:229
msgid ""
"This flag tells Django that if a \"safe\" string is passed into your filter,"
" the result will still be \"safe\" and if a non-safe string is passed in, "
"Django will automatically escape it, if necessary."
msgstr ""

# d7eb628c284f488fbeafb484d5e48e5a
#: ../../howto/custom-template-tags.txt:233
msgid ""
"You can think of this as meaning \"this filter is safe -- it doesn't "
"introduce any possibility of unsafe HTML.\""
msgstr ""

# 681ae9b7337040a68a15818d2d68aa00
#: ../../howto/custom-template-tags.txt:236
msgid ""
"The reason ``is_safe`` is necessary is because there are plenty of normal "
"string operations that will turn a ``SafeData`` object back into a normal "
"``str`` or ``unicode`` object and, rather than try to catch them all, which "
"would be very difficult, Django repairs the damage after the filter has "
"completed."
msgstr ""

# f0add68acd1249d380ae461fa88d7469
#: ../../howto/custom-template-tags.txt:242
msgid ""
"For example, suppose you have a filter that adds the string ``xx`` to the "
"end of any input. Since this introduces no dangerous HTML characters to the "
"result (aside from any that were already present), you should mark your "
"filter with ``is_safe``:"
msgstr ""

# 3b6bf738581f4fce880c9639067ed168
#: ../../howto/custom-template-tags.txt:253
msgid ""
"When this filter is used in a template where auto-escaping is enabled, "
"Django will escape the output whenever the input is not already marked as "
"\"safe\"."
msgstr ""

# 2c26bd5c6e1b4a78b8c3d9db1f47ed96
#: ../../howto/custom-template-tags.txt:257
msgid ""
"By default, ``is_safe`` is ``False``, and you can omit it from any filters "
"where it isn't required."
msgstr ""

# 80391ea3d4f94588938de2f8d0ed66e2
#: ../../howto/custom-template-tags.txt:260
msgid ""
"Be careful when deciding if your filter really does leave safe strings as "
"safe. If you're *removing* characters, you might inadvertently leave "
"unbalanced HTML tags or entities in the result. For example, removing a "
"``>`` from the input might turn ``<a>`` into ``<a``, which would need to be "
"escaped on output to avoid causing problems. Similarly, removing a semicolon"
" (``;``) can turn ``&amp;`` into ``&amp``, which is no longer a valid entity"
" and thus needs further escaping. Most cases won't be nearly this tricky, "
"but keep an eye out for any problems like that when reviewing your code."
msgstr ""

# df5bf077b65144fdb71717c1f22e7a3d
#: ../../howto/custom-template-tags.txt:270
msgid ""
"Marking a filter ``is_safe`` will coerce the filter's return value to a "
"string.  If your filter should return a boolean or other non-string value, "
"marking it ``is_safe`` will probably have unintended consequences (such as "
"converting a boolean False to the string 'False')."
msgstr ""

# eca9683ca6e84eb5b7376759321e063d
#: ../../howto/custom-template-tags.txt:276
msgid ""
"Alternatively, your filter code can manually take care of any necessary "
"escaping. This is necessary when you're introducing new HTML markup into the"
" result. You want to mark the output as safe from further escaping so that "
"your HTML markup isn't escaped further, so you'll need to handle the input "
"yourself."
msgstr ""

# 3826739d6249439eb02f655f0d839d02
#: ../../howto/custom-template-tags.txt:282
msgid ""
"To mark the output as a safe string, use "
":func:`django.utils.safestring.mark_safe`."
msgstr ""

# 3203ab80669943e8b4d4a2332a4501a4
#: ../../howto/custom-template-tags.txt:285
msgid ""
"Be careful, though. You need to do more than just mark the output as safe. "
"You need to ensure it really *is* safe, and what you do depends on whether "
"auto-escaping is in effect. The idea is to write filters than can operate in"
" templates where auto-escaping is either on or off in order to make things "
"easier for your template authors."
msgstr ""

# c08c15718785443ca12e64c31ae9d213
#: ../../howto/custom-template-tags.txt:291
msgid ""
"In order for your filter to know the current auto-escaping state, set the "
"``needs_autoescape`` flag to ``True`` when you register your filter "
"function. (If you don't specify this flag, it defaults to ``False``). This "
"flag tells Django that your filter function wants to be passed an extra "
"keyword argument, called ``autoescape``, that is ``True`` if auto-escaping "
"is in effect and ``False`` otherwise."
msgstr ""

# afea6141249f4ba5bfb10262fb1712f7
#: ../../howto/custom-template-tags.txt:298
msgid ""
"For example, let's write a filter that emphasizes the first character of a "
"string:"
msgstr ""

# 85ccd78c03f94690bb827c7e0781cf48
#: ../../howto/custom-template-tags.txt:316
msgid ""
"The ``needs_autoescape`` flag and the ``autoescape`` keyword argument mean "
"that our function will know whether automatic escaping is in effect when the"
" filter is called. We use ``autoescape`` to decide whether the input data "
"needs to be passed through ``django.utils.html.conditional_escape`` or not. "
"(In the latter case, we just use the identity function as the \"escape\" "
"function.) The ``conditional_escape()`` function is like ``escape()`` except"
" it only escapes input that is **not** a ``SafeData`` instance. If a "
"``SafeData`` instance is passed to ``conditional_escape()``, the data is "
"returned unchanged."
msgstr ""

# c12ba4712b4948a1bf9a4430bb05d266
#: ../../howto/custom-template-tags.txt:326
msgid ""
"Finally, in the above example, we remember to mark the result as safe so "
"that our HTML is inserted directly into the template without further "
"escaping."
msgstr ""

# 1bfe9244673e465683769429f00e60a5
#: ../../howto/custom-template-tags.txt:330
msgid ""
"There's no need to worry about the ``is_safe`` flag in this case (although "
"including it wouldn't hurt anything). Whenever you manually handle the auto-"
"escaping issues and return a safe string, the ``is_safe`` flag won't change "
"anything either way."
msgstr ""

# 167910d0f6c44b0c8487bbc1c3929ba3
#: ../../howto/custom-template-tags.txt:337
msgid ""
"``is_safe`` and ``needs_autoescape`` used to be attributes of the filter "
"function; this syntax is deprecated."
msgstr ""

# 24ed85efa46c4bc38bfa879fe3dc34a8
#: ../../howto/custom-template-tags.txt:358
msgid "Filters and time zones"
msgstr ""

# e9624d25a85d4b5aa621a8c4286c691e
#: ../../howto/custom-template-tags.txt:362
msgid ""
"If you write a custom filter that operates on :class:`~datetime.datetime` "
"objects, you'll usually register it with the ``expects_localtime`` flag set "
"to ``True``:"
msgstr ""

# 1758f0ecba6546d8a54a2346d0270a25
#: ../../howto/custom-template-tags.txt:375
msgid ""
"When this flag is set, if the first argument to your filter is a time zone "
"aware datetime, Django will convert it to the current time zone before "
"passing it to your filter when appropriate, according to :ref:`rules for "
"time zones conversions in templates <time-zones-in-templates>`."
msgstr ""

# 6b2b83c6cbd941dda26f54f32a3485ed
#: ../../howto/custom-template-tags.txt:381
msgid "Writing custom template tags"
msgstr ""

# a168f4aa1a1e4f0c957b310b6cdd7c18
#: ../../howto/custom-template-tags.txt:383
msgid "Tags are more complex than filters, because tags can do anything."
msgstr ""

# 1fdc1b5100694d52836e412ba46c02df
#: ../../howto/custom-template-tags.txt:386
msgid "A quick overview"
msgstr ""

# 1d066fa5d3974147bfec2378ba27d9ae
#: ../../howto/custom-template-tags.txt:388
msgid ""
"Above, this document explained that the template system works in a two-step "
"process: compiling and rendering. To define a custom template tag, you "
"specify how the compilation works and how the rendering works."
msgstr ""

# 4a05799328b5447a9fcd30b2c366fde9
#: ../../howto/custom-template-tags.txt:392
msgid ""
"When Django compiles a template, it splits the raw template text into "
"''nodes''. Each node is an instance of ``django.template.Node`` and has a "
"``render()`` method. A compiled template is, simply, a list of ``Node`` "
"objects. When you call ``render()`` on a compiled template object, the "
"template calls ``render()`` on each ``Node`` in its node list, with the "
"given context. The results are all concatenated together to form the output "
"of the template."
msgstr ""

# c23454bf20774fc5a59ba3cf43cdc070
#: ../../howto/custom-template-tags.txt:399
msgid ""
"Thus, to define a custom template tag, you specify how the raw template tag "
"is converted into a ``Node`` (the compilation function), and what the node's"
" ``render()`` method does."
msgstr ""

# 56db5b1b244d42d397520f13c363f69d
#: ../../howto/custom-template-tags.txt:404
msgid "Writing the compilation function"
msgstr ""

# f6be7a0c9d534970ad89212e209d74bb
#: ../../howto/custom-template-tags.txt:406
msgid ""
"For each template tag the template parser encounters, it calls a Python "
"function with the tag contents and the parser object itself. This function "
"is responsible for returning a ``Node`` instance based on the contents of "
"the tag."
msgstr ""

# b612c8e5e76942e291e60135c21e9d6e
#: ../../howto/custom-template-tags.txt:410
msgid ""
"For example, let's write a template tag, ``{% current_time %}``, that "
"displays the current date/time, formatted according to a parameter given in "
"the tag, in :func:`~time.strftime` syntax. It's a good idea to decide the "
"tag syntax before anything else. In our case, let's say the tag should be "
"used like this:"
msgstr ""

# f1271612ee934d60b9181cf6c3efaec5
#: ../../howto/custom-template-tags.txt:419
msgid ""
"The parser for this function should grab the parameter and create a ``Node``"
" object:"
msgstr ""

# 732ec376c86c440a9e549715037add5b
# de9dee4bffd6470bb689ce73e3aa79d3
#: ../../howto/custom-template-tags.txt:435
#: ../../howto/custom-template-tags.txt:487
msgid "Notes:"
msgstr ""

# aaf82eb2271b4979ba12fda39529e507
#: ../../howto/custom-template-tags.txt:437
msgid ""
"``parser`` is the template parser object. We don't need it in this example."
msgstr ""

# 4e338ee987454938b6b23771b61432fb
#: ../../howto/custom-template-tags.txt:440
msgid ""
"``token.contents`` is a string of the raw contents of the tag. In our "
"example, it's ``'current_time \"%Y-%m-%d %I:%M %p\"'``."
msgstr ""

# b09c7c17867845a5b255379439fbcd5f
#: ../../howto/custom-template-tags.txt:443
msgid ""
"The ``token.split_contents()`` method separates the arguments on spaces "
"while keeping quoted strings together. The more straightforward "
"``token.contents.split()`` wouldn't be as robust, as it would naively split "
"on *all* spaces, including those within quoted strings. It's a good idea to "
"always use ``token.split_contents()``."
msgstr ""

# 0e9188c7a17f4baca09a006eb94b268d
#: ../../howto/custom-template-tags.txt:449
msgid ""
"This function is responsible for raising "
"``django.template.TemplateSyntaxError``, with helpful messages, for any "
"syntax error."
msgstr ""

# 4c741d601898409ba847f5eb4f41ce11
#: ../../howto/custom-template-tags.txt:453
msgid ""
"The ``TemplateSyntaxError`` exceptions use the ``tag_name`` variable. Don't "
"hard-code the tag's name in your error messages, because that couples the "
"tag's name to your function. ``token.contents.split()[0]`` will ''always'' "
"be the name of your tag -- even when the tag has no arguments."
msgstr ""

# 617293acd53140e0b3fab56b4fa8b21f
#: ../../howto/custom-template-tags.txt:459
msgid ""
"The function returns a ``CurrentTimeNode`` with everything the node needs to"
" know about this tag. In this case, it just passes the argument -- "
"``\"%Y-%m-%d %I:%M %p\"``. The leading and trailing quotes from the template"
" tag are removed in ``format_string[1:-1]``."
msgstr ""

# f7fbd762847446eeb685025c747a772a
#: ../../howto/custom-template-tags.txt:464
msgid ""
"The parsing is very low-level. The Django developers have experimented with "
"writing small frameworks on top of this parsing system, using techniques "
"such as EBNF grammars, but those experiments made the template engine too "
"slow. It's low-level because that's fastest."
msgstr ""

# b18c1675d88841d2a8a4fd7686fc114e
#: ../../howto/custom-template-tags.txt:470
msgid "Writing the renderer"
msgstr ""

# cda1b4ab28654934b3cab5b1f0211b2e
#: ../../howto/custom-template-tags.txt:472
msgid ""
"The second step in writing custom tags is to define a ``Node`` subclass that"
" has a ``render()`` method."
msgstr ""

# c72354ad371045fea417cff9e9a608bb
#: ../../howto/custom-template-tags.txt:475
msgid "Continuing the above example, we need to define ``CurrentTimeNode``:"
msgstr ""

# 2c6b021c837349938a3f700f3a06ef70
#: ../../howto/custom-template-tags.txt:489
msgid ""
"``__init__()`` gets the ``format_string`` from ``do_current_time()``. Always"
" pass any options/parameters/arguments to a ``Node`` via its ``__init__()``."
msgstr ""

# 6e5b502f69bb4171a59fea1c337605bb
#: ../../howto/custom-template-tags.txt:493
msgid "The ``render()`` method is where the work actually happens."
msgstr ""

# 4e082356c1c448a68d6cd7cc4e0e6517
#: ../../howto/custom-template-tags.txt:495
msgid ""
"``render()`` should never raise ``TemplateSyntaxError`` or any other "
"exception. It should fail silently, just as template filters should."
msgstr ""

# 2dacf6c3cee94926a4ff8be0190f99e5
#: ../../howto/custom-template-tags.txt:498
msgid ""
"Ultimately, this decoupling of compilation and rendering results in an "
"efficient template system, because a template can render multiple contexts "
"without having to be parsed multiple times."
msgstr ""

# 16ba7ce3859c437aa7fe1d8b834d6110
#: ../../howto/custom-template-tags.txt:503
msgid "Auto-escaping considerations"
msgstr ""

# 9ad0bfac56f446a6b4ef07c34b4752ec
#: ../../howto/custom-template-tags.txt:505
msgid ""
"The output from template tags is **not** automatically run through the auto-"
"escaping filters. However, there are still a couple of things you should "
"keep in mind when writing a template tag."
msgstr ""

# cfd9668710764edc89fa4d80483e1b2d
#: ../../howto/custom-template-tags.txt:509
msgid ""
"If the ``render()`` function of your template stores the result in a context"
" variable (rather than returning the result in a string), it should take "
"care to call ``mark_safe()`` if appropriate. When the variable is ultimately"
" rendered, it will be affected by the auto-escape setting in effect at the "
"time, so content that should be safe from further escaping needs to be "
"marked as such."
msgstr ""

# e0dfd6797093463eb4a3ae5b17486ab5
#: ../../howto/custom-template-tags.txt:516
msgid ""
"Also, if your template tag creates a new context for performing some sub-"
"rendering, set the auto-escape attribute to the current context's value. The"
" ``__init__`` method for the ``Context`` class takes a parameter called "
"``autoescape`` that you can use for this purpose. For example:"
msgstr ""

# f0c89979caf74b9790743737ab8b6455
#: ../../howto/custom-template-tags.txt:528
msgid ""
"This is not a very common situation, but it's useful if you're rendering a "
"template yourself. For example:"
msgstr ""

# 3bbac785fb994bd28fd21ce7b178a4f6
#: ../../howto/custom-template-tags.txt:537
msgid ""
"If we had neglected to pass in the current ``context.autoescape`` value to "
"our new ``Context`` in this example, the results would have *always* been "
"automatically escaped, which may not be the desired behavior if the template"
" tag is used inside a :ttag:`{% autoescape off %}<autoescape>` block."
msgstr ""

# 06888c698d774164acb58cb8c452bdfa
#: ../../howto/custom-template-tags.txt:545
msgid "Thread-safety considerations"
msgstr ""

# 32efa372b0724c1c8b83514c904fcba5
#: ../../howto/custom-template-tags.txt:547
msgid ""
"Once a node is parsed, its ``render`` method may be called any number of "
"times. Since Django is sometimes run in multi-threaded environments, a "
"single node may be simultaneously rendering with different contexts in "
"response to two separate requests. Therefore, it's important to make sure "
"your template tags are thread safe."
msgstr ""

# 21f33b8b12964f49a399e1fbd2a7e8d0
#: ../../howto/custom-template-tags.txt:553
msgid ""
"To make sure your template tags are thread safe, you should never store "
"state information on the node itself. For example, Django provides a builtin"
" :ttag:`cycle` template tag that cycles among a list of given strings each "
"time it's rendered:"
msgstr ""

# c5ec0ba1d3ef43ad91f6d6b3163a5b59
#: ../../howto/custom-template-tags.txt:566
msgid ""
"A naive implementation of ``CycleNode`` might look something like this:"
msgstr ""

# 70fe7280b3334e449d51507917976420
#: ../../howto/custom-template-tags.txt:576
msgid ""
"But, suppose we have two templates rendering the template snippet from above"
" at the same time:"
msgstr ""

# 6b8599b9046a4613a8754f29281713e2
#: ../../howto/custom-template-tags.txt:579
msgid ""
"Thread 1 performs its first loop iteration, ``CycleNode.render()`` returns "
"'row1'"
msgstr ""

# 1c6d0dbe037e46ffab9a34be57a488a7
#: ../../howto/custom-template-tags.txt:581
msgid ""
"Thread 2 performs its first loop iteration, ``CycleNode.render()`` returns "
"'row2'"
msgstr ""

# d481061ce6654dc6a5d80a8784ea1c40
#: ../../howto/custom-template-tags.txt:583
msgid ""
"Thread 1 performs its second loop iteration, ``CycleNode.render()`` returns "
"'row1'"
msgstr ""

# 4a1d2265f57f4aab88ff55b0db1eb16d
#: ../../howto/custom-template-tags.txt:585
msgid ""
"Thread 2 performs its second loop iteration, ``CycleNode.render()`` returns "
"'row2'"
msgstr ""

# 7352d444392f4d10a6082c01b4b115f7
#: ../../howto/custom-template-tags.txt:588
msgid ""
"The CycleNode is iterating, but it's iterating globally. As far as Thread 1 "
"and Thread 2 are concerned, it's always returning the same value. This is "
"obviously not what we want!"
msgstr ""

# be001de7dc69499a85d80860dba769f8
#: ../../howto/custom-template-tags.txt:592
msgid ""
"To address this problem, Django provides a ``render_context`` that's "
"associated with the ``context`` of the template that is currently being "
"rendered. The ``render_context`` behaves like a Python dictionary, and "
"should be used to store ``Node`` state between invocations of the ``render``"
" method."
msgstr ""

# 6c53a0d608e146cbab0dbf0b3be82a89
#: ../../howto/custom-template-tags.txt:597
msgid ""
"Let's refactor our ``CycleNode`` implementation to use the "
"``render_context``:"
msgstr ""

# 91bc16961fb1455486ba587c3e3559b4
#: ../../howto/custom-template-tags.txt:610
msgid ""
"Note that it's perfectly safe to store global information that will not "
"change throughout the life of the ``Node`` as an attribute. In the case of "
"``CycleNode``, the ``cyclevars`` argument doesn't change after the ``Node`` "
"is instantiated, so we don't need to put it in the ``render_context``. But "
"state information that is specific to the template that is currently being "
"rendered, like the current iteration of the ``CycleNode``, should be stored "
"in the ``render_context``."
msgstr ""

# b6eaabf22ae34491819bd6d1dd9e095a
#: ../../howto/custom-template-tags.txt:619
msgid ""
"Notice how we used ``self`` to scope the ``CycleNode`` specific information "
"within the ``render_context``. There may be multiple ``CycleNodes`` in a "
"given template, so we need to be careful not to clobber another node's state"
" information. The easiest way to do this is to always use ``self`` as the "
"key into ``render_context``. If you're keeping track of several state "
"variables, make ``render_context[self]`` a dictionary."
msgstr ""

# e8ba6074b9d84584a6fc66cdce194ab3
#: ../../howto/custom-template-tags.txt:627
msgid "Registering the tag"
msgstr ""

# cde25a1545e342a3b5802628c7096911
#: ../../howto/custom-template-tags.txt:629
msgid ""
"Finally, register the tag with your module's ``Library`` instance, as "
"explained in \"Writing custom template filters\" above. Example:"
msgstr ""

# d45cc14603ad48c891dcef39c1c145bf
#: ../../howto/custom-template-tags.txt:636
msgid "The ``tag()`` method takes two arguments:"
msgstr ""

# 643a3737e94146aea53a72e23baa3c60
#: ../../howto/custom-template-tags.txt:638
msgid ""
"The name of the template tag -- a string. If this is left out, the name of "
"the compilation function will be used."
msgstr ""

# ae5288cdbae5418795bc534d7c8b5d76
#: ../../howto/custom-template-tags.txt:643
msgid ""
"As with filter registration, it is also possible to use this as a decorator:"
msgstr ""

# 845c05f053a042b2b03a282786b83f1d
#: ../../howto/custom-template-tags.txt:655
msgid ""
"If you leave off the ``name`` argument, as in the second example above, "
"Django will use the function's name as the tag name."
msgstr ""

# 8d64333d791f4bf28e62bd26a74df795
#: ../../howto/custom-template-tags.txt:659
msgid "Passing template variables to the tag"
msgstr ""

# 601527fd75d84fafaab3ba35bd3349e6
#: ../../howto/custom-template-tags.txt:661
msgid ""
"Although you can pass any number of arguments to a template tag using "
"``token.split_contents()``, the arguments are all unpacked as string "
"literals. A little more work is required in order to pass dynamic content (a"
" template variable) to a template tag as an argument."
msgstr ""

# 1bbb02c603fc41fca24ed9d42ae6e582
#: ../../howto/custom-template-tags.txt:666
msgid ""
"While the previous examples have formatted the current time into a string "
"and returned the string, suppose you wanted to pass in a "
":class:`~django.db.models.DateTimeField` from an object and have the "
"template tag format that date-time:"
msgstr ""

# 3646b6b145344e1490b293bdd5f59578
#: ../../howto/custom-template-tags.txt:675
msgid "Initially, ``token.split_contents()`` will return three values:"
msgstr ""

# d3a14d47d3814bd8b53e60b4e27db8c0
#: ../../howto/custom-template-tags.txt:677
msgid "The tag name ``format_time``."
msgstr ""

# 1f7e7d439374430d80002f566ee8d3f5
#: ../../howto/custom-template-tags.txt:678
msgid ""
"The string ``\"blog_entry.date_updated\"`` (without the surrounding quotes)."
msgstr ""

# cfadd26700a24d50bfdbf43f7e92d2db
#: ../../howto/custom-template-tags.txt:680
msgid ""
"The formatting string ``\"%Y-%m-%d %I:%M %p\"``. The return value from "
"``split_contents()`` will include the leading and trailing quotes for string"
" literals like this."
msgstr ""

# 8d1000af23354de09353c9dac8cc6b89
#: ../../howto/custom-template-tags.txt:684
msgid "Now your tag should begin to look like this:"
msgstr ""

# bf278209f1ff43a5a2ced94733d73d51
#: ../../howto/custom-template-tags.txt:699
msgid ""
"You also have to change the renderer to retrieve the actual contents of the "
"``date_updated`` property of the ``blog_entry`` object.  This can be "
"accomplished by using the ``Variable()`` class in ``django.template``."
msgstr ""

# 6d514ba2f9b64117a2b5c73f560e6b4a
#: ../../howto/custom-template-tags.txt:703
msgid ""
"To use the ``Variable`` class, simply instantiate it with the name of the "
"variable to be resolved, and then call ``variable.resolve(context)``. So, "
"for example:"
msgstr ""

# 40b821e6e17e4304a7bb1b170f1913eb
#: ../../howto/custom-template-tags.txt:721
msgid ""
"Variable resolution will throw a ``VariableDoesNotExist`` exception if it "
"cannot resolve the string passed to it in the current context of the page."
msgstr ""

# 87603a4f01b34167a52ac3d52ae86893
#: ../../howto/custom-template-tags.txt:727
msgid "Simple tags"
msgstr ""

# 9cdbcd0b9ac543cc98a5944956fdd00a
#: ../../howto/custom-template-tags.txt:731
msgid ""
"Many template tags take a number of arguments -- strings or template "
"variables -- and return a string after doing some processing based solely on"
" the input arguments and some external information. For example, the "
"``current_time`` tag we wrote above is of this variety: we give it a format "
"string, it returns the time as a string."
msgstr ""

# 93546b7bd8ad4396bc215bc5412dd5cf
#: ../../howto/custom-template-tags.txt:737
msgid ""
"To ease the creation of these types of tags, Django provides a helper "
"function, ``simple_tag``. This function, which is a method of "
"``django.template.Library``, takes a function that accepts any number of "
"arguments, wraps it in a ``render`` function and the other necessary bits "
"mentioned above and registers it with the template system."
msgstr ""

# 3402e359be124caf9e7ed9bc547c8e54
# 64d5f8d5536d403da0c45bf55d2f0c71
#: ../../howto/custom-template-tags.txt:743
#: ../../howto/custom-template-tags.txt:1083
msgid "Our earlier ``current_time`` function could thus be written like this:"
msgstr ""

# 4c8e00f450b24273ab1a9f87d15af6b4
# f05430e9465c4df6bf8566a9bf74fdad
#: ../../howto/custom-template-tags.txt:752
#: ../../howto/custom-template-tags.txt:1092
msgid "The decorator syntax also works:"
msgstr ""

# d9291b7b579e44e89fc9d3b224b7149f
#: ../../howto/custom-template-tags.txt:760
msgid "A few things to note about the ``simple_tag`` helper function:"
msgstr ""

# c4548398d73c4f4fb5dc954d3416a239
#: ../../howto/custom-template-tags.txt:762
msgid ""
"Checking for the required number of arguments, etc., has already been done "
"by the time our function is called, so we don't need to do that."
msgstr ""

# 9e0de9d04bb24060a7c33221ad5839be
#: ../../howto/custom-template-tags.txt:764
msgid ""
"The quotes around the argument (if any) have already been stripped away, so "
"we just receive a plain string."
msgstr ""

# 80eb13a33a0f403aae7dec869c8cc41d
#: ../../howto/custom-template-tags.txt:766
msgid ""
"If the argument was a template variable, our function is passed the current "
"value of the variable, not the variable itself."
msgstr ""

# cb6f87150646458cbe123d12cdecb176
# 0af3de6d3de1474f9239c92e4e44f29c
#: ../../howto/custom-template-tags.txt:769
#: ../../howto/custom-template-tags.txt:1108
msgid ""
"If your template tag needs to access the current context, you can use the "
"``takes_context`` argument when registering your tag:"
msgstr ""

# f9aa6f46a4ac40c5856e4347959d526a
# 9282a3df3a3a4119b4f32c7916c5308c
#: ../../howto/custom-template-tags.txt:781
#: ../../howto/custom-template-tags.txt:1120
msgid "Or, using decorator syntax:"
msgstr ""

# 0a419e8228a64e5484e0b74d4b3d9233
# 5cad24bf2a4b4e19b65509ca2e4d8730
#: ../../howto/custom-template-tags.txt:790
#: ../../howto/custom-template-tags.txt:1129
msgid ""
"For more information on how the ``takes_context`` option works, see the "
"section on :ref:`inclusion tags<howto-custom-template-tags-inclusion-tags>`."
msgstr ""

# 86205c6bc50b4999a2e78dfbe775c4d1
#: ../../howto/custom-template-tags.txt:795
msgid "If you need to rename your tag, you can provide a custom name for it:"
msgstr ""

# 3937d55ca66d41af98640a244ad398ca
#: ../../howto/custom-template-tags.txt:807
msgid ""
"``simple_tag`` functions may accept any number of positional or keyword "
"arguments. For example:"
msgstr ""

# 3cf05b3e423142b697dd8df62e3d8b9c
# e26ddfb1623046d28b9fb5c4e2a56c93
# 50c323930b56409bbc1b4bfe37cc2efc
#: ../../howto/custom-template-tags.txt:819
#: ../../howto/custom-template-tags.txt:975
#: ../../howto/custom-template-tags.txt:1144
msgid ""
"Then in the template any number of arguments, separated by spaces, may be "
"passed to the template tag. Like in Python, the values for keyword arguments"
" are set using the equal sign (\"``=``\") and must be provided after the "
"positional arguments. For example:"
msgstr ""

# 8caafc4e6bbb4fcab77e87b46903ba6d
#: ../../howto/custom-template-tags.txt:831
msgid "Inclusion tags"
msgstr ""

# ecd92c1f5fb5406cbb3d32c881077543
#: ../../howto/custom-template-tags.txt:833
msgid ""
"Another common type of template tag is the type that displays some data by "
"rendering *another* template. For example, Django's admin interface uses "
"custom template tags to display the buttons along the bottom of the "
"\"add/change\" form pages. Those buttons always look the same, but the link "
"targets change depending on the object being edited -- so they're a perfect "
"case for using a small template that is filled with details from the current"
" object. (In the admin's case, this is the ``submit_row`` tag.)"
msgstr ""

# 6d16e5b87ef343f1b7dcb3c5bf0f17ed
#: ../../howto/custom-template-tags.txt:841
msgid "These sorts of tags are called \"inclusion tags\"."
msgstr ""

# 2eaeb902a9a34478ba08bb9469dcea14
#: ../../howto/custom-template-tags.txt:843
msgid ""
"Writing inclusion tags is probably best demonstrated by example. Let's write"
" a tag that outputs a list of choices for a given ``Poll`` object, such as "
"was created in the :ref:`tutorials <creating-models>`. We'll use the tag "
"like this:"
msgstr ""

# d5a180d69f9e476686f01b8ed8c79484
#: ../../howto/custom-template-tags.txt:851
msgid "...and the output will be something like this:"
msgstr ""

# 6b28f581035e40f1997e4130750c8f4b
#: ../../howto/custom-template-tags.txt:861
msgid ""
"First, define the function that takes the argument and produces a dictionary"
" of data for the result. The important point here is we only need to return "
"a dictionary, not anything more complex. This will be used as a template "
"context for the template fragment. Example:"
msgstr ""

# 90bf0dba3c8d49f39f3887baf27dbee8
#: ../../howto/custom-template-tags.txt:872
msgid ""
"Next, create the template used to render the tag's output. This template is "
"a fixed feature of the tag: the tag writer specifies it, not the template "
"designer. Following our example, the template is very simple:"
msgstr ""

# c100a40c36b74b22b927c547457c51bd
#: ../../howto/custom-template-tags.txt:884
msgid ""
"Now, create and register the inclusion tag by calling the "
"``inclusion_tag()`` method on a ``Library`` object. Following our example, "
"if the above template is in a file called ``results.html`` in a directory "
"that's searched by the template loader, we'd register the tag like this:"
msgstr ""

# c5fb18d466604abbb6e3507755fcbcf5
#: ../../howto/custom-template-tags.txt:905
msgid "As always, decorator syntax works as well, so we could have written:"
msgstr ""

# a17a973c8812442f8b1412d6e7b5e5c1
#: ../../howto/custom-template-tags.txt:913
msgid "...when first creating the function."
msgstr ""

# 74332f43aecf4f838deb7d7f11bd2851
#: ../../howto/custom-template-tags.txt:915
msgid ""
"Sometimes, your inclusion tags might require a large number of arguments, "
"making it a pain for template authors to pass in all the arguments and "
"remember their order. To solve this, Django provides a ``takes_context`` "
"option for inclusion tags. If you specify ``takes_context`` in creating a "
"template tag, the tag will have no required arguments, and the underlying "
"Python function will have one argument -- the template context as of when "
"the tag was called."
msgstr ""

# fb5d29545ca948e791e2369524f29bf0
#: ../../howto/custom-template-tags.txt:922
msgid ""
"For example, say you're writing an inclusion tag that will always be used in"
" a context that contains ``home_link`` and ``home_title`` variables that "
"point back to the main page. Here's what the Python function would look "
"like:"
msgstr ""

# f5c33cbc8e9e4859bf3a44c6532da679
#: ../../howto/custom-template-tags.txt:937
msgid ""
"(Note that the first parameter to the function *must* be called "
"``context``.)"
msgstr ""

# 4932d1ec332a410caf03a7e5b7bc27a5
#: ../../howto/custom-template-tags.txt:939
msgid ""
"In that ``register.inclusion_tag()`` line, we specified "
"``takes_context=True`` and the name of the template. Here's what the "
"template ``link.html`` might look like:"
msgstr ""

# 45f76666d58b4aff8dc90e745363f499
#: ../../howto/custom-template-tags.txt:947
msgid ""
"Then, any time you want to use that custom tag, load its library and call it"
" without any arguments, like so:"
msgstr ""

# 30ab32b9c00b4980b460d1ba99e767e9
#: ../../howto/custom-template-tags.txt:954
msgid ""
"Note that when you're using ``takes_context=True``, there's no need to pass "
"arguments to the template tag. It automatically gets access to the context."
msgstr ""

# be6d1fd807f549be889b0e05f5dc6729
#: ../../howto/custom-template-tags.txt:957
msgid ""
"The ``takes_context`` parameter defaults to ``False``. When it's set to "
"``True``, the tag is passed the context object, as in this example. That's "
"the only difference between this case and the previous ``inclusion_tag`` "
"example."
msgstr ""

# 4efbaa22ab1046e0b7ddb08aa1c9c9c1
#: ../../howto/custom-template-tags.txt:963
msgid ""
"``inclusion_tag`` functions may accept any number of positional or keyword "
"arguments. For example:"
msgstr ""

# 168d2ef8334c4cb38174b6814c2e0baa
#: ../../howto/custom-template-tags.txt:985
msgid "Setting a variable in the context"
msgstr ""

# 44b62e2fb92c4088a30e440d7a961a52
#: ../../howto/custom-template-tags.txt:987
msgid ""
"The above examples simply output a value. Generally, it's more flexible if "
"your template tags set template variables instead of outputting values. That"
" way, template authors can reuse the values that your template tags create."
msgstr ""

# 9c67fed2b97248889348dbf4cb379a75
#: ../../howto/custom-template-tags.txt:991
msgid ""
"To set a variable in the context, just use dictionary assignment on the "
"context object in the ``render()`` method. Here's an updated version of "
"``CurrentTimeNode`` that sets a template variable ``current_time`` instead "
"of outputting it:"
msgstr ""

# f09a76c406054af0b56e0622b37d1b4e
#: ../../howto/custom-template-tags.txt:1005
msgid ""
"Note that ``render()`` returns the empty string. ``render()`` should always "
"return string output. If all the template tag does is set a variable, "
"``render()`` should return the empty string."
msgstr ""

# aa76bacb0c3440d38dbe75cf4d7b1fab
#: ../../howto/custom-template-tags.txt:1009
msgid "Here's how you'd use this new version of the tag:"
msgstr ""

# 9b397582abc6401593d551c86a8ca2fa
#: ../../howto/custom-template-tags.txt:1017
msgid ""
"Any variable set in the context will only be available in the same ``block``"
" of the template in which it was assigned. This behavior is intentional; it "
"provides a scope for variables so that they don't conflict with context in "
"other blocks."
msgstr ""

# a9e9d524b6c84a0bb3067b3871f156b5
#: ../../howto/custom-template-tags.txt:1022
msgid ""
"But, there's a problem with ``CurrentTimeNode2``: The variable name "
"``current_time`` is hard-coded. This means you'll need to make sure your "
"template doesn't use ``{{ current_time }}`` anywhere else, because the ``{% "
"current_time %}`` will blindly overwrite that variable's value. A cleaner "
"solution is to make the template tag specify the name of the output "
"variable, like so:"
msgstr ""

# ffc1f821c16b446aa2f0686e70395cfe
#: ../../howto/custom-template-tags.txt:1034
msgid ""
"To do that, you'll need to refactor both the compilation function and "
"``Node`` class, like so:"
msgstr ""

# 0b69052602914821855ca52778c02c3f
#: ../../howto/custom-template-tags.txt:1063
msgid ""
"The difference here is that ``do_current_time()`` grabs the format string "
"and the variable name, passing both to ``CurrentTimeNode3``."
msgstr ""

# c61e1ae9097c4a388af1cf4360eeca31
#: ../../howto/custom-template-tags.txt:1066
msgid ""
"Finally, if you only need to have a simple syntax for your custom context-"
"updating template tag, you might want to consider using an :ref:`assignment "
"tag <howto-custom-template-tags-assignment-tags>`."
msgstr ""

# fb2a9272f0c147a4a94f4a2cffea7808
#: ../../howto/custom-template-tags.txt:1073
msgid "Assignment tags"
msgstr ""

# 0286fab53a4b44a9980d90510e2e028c
#: ../../howto/custom-template-tags.txt:1077
msgid ""
"To ease the creation of tags setting a variable in the context, Django "
"provides a helper function, ``assignment_tag``. This function works the same"
" way as :ref:`simple_tag<howto-custom-template-tags-simple-tags>`, except "
"that it stores the tag's result in a specified context variable instead of "
"directly outputting it."
msgstr ""

# d63e28380c374ef895c7900fbd53625a
#: ../../howto/custom-template-tags.txt:1100
msgid ""
"You may then store the result in a template variable using the ``as`` "
"argument followed by the variable name, and output it yourself where you see"
" fit:"
msgstr ""

# 8c6db666daa14726b9201a33c67bece4
#: ../../howto/custom-template-tags.txt:1132
msgid ""
"``assignment_tag`` functions may accept any number of positional or keyword "
"arguments. For example:"
msgstr ""

# 42450536ac094948a18c1ddf07a50996
#: ../../howto/custom-template-tags.txt:1154
msgid "Parsing until another block tag"
msgstr ""

# 479a0f9813c14362960f4d011ca62376
#: ../../howto/custom-template-tags.txt:1156
msgid ""
"Template tags can work in tandem. For instance, the standard :ttag:`{% "
"comment %}<comment>` tag hides everything until ``{% endcomment %}``. To "
"create a template tag such as this, use ``parser.parse()`` in your "
"compilation function."
msgstr ""

# 391d1b7ea5254dc991e8d5c37eb629dc
#: ../../howto/custom-template-tags.txt:1161
msgid "Here's how a simplified ``{% comment %}`` tag might be implemented:"
msgstr ""

# 1e4a763426494789b0615a366abddfea
#: ../../howto/custom-template-tags.txt:1175
msgid ""
"The actual implementation of :ttag:`{% comment %}<comment>` is slightly "
"different in that it allows broken template tags to appear between ``{% "
"comment %}`` and ``{% endcomment %}``. It does so by calling "
"``parser.skip_past('endcomment')`` instead of "
"``parser.parse(('endcomment',))`` followed by "
"``parser.delete_first_token()``, thus avoiding the generation of a node "
"list."
msgstr ""

# a7ed17eaaa9a411f8d5592b77579270c
#: ../../howto/custom-template-tags.txt:1182
msgid ""
"``parser.parse()`` takes a tuple of names of block tags ''to parse until''. "
"It returns an instance of ``django.template.NodeList``, which is a list of "
"all ``Node`` objects that the parser encountered ''before'' it encountered "
"any of the tags named in the tuple."
msgstr ""

# 346feb987b554f4f80588ee32ef8f29e
#: ../../howto/custom-template-tags.txt:1187
msgid ""
"In ``\"nodelist = parser.parse(('endcomment',))\"`` in the above example, "
"``nodelist`` is a list of all nodes between the ``{% comment %}`` and ``{% "
"endcomment %}``, not counting ``{% comment %}`` and ``{% endcomment %}`` "
"themselves."
msgstr ""

# f96238ce281946d8bde1c6fc5ef1ef8b
#: ../../howto/custom-template-tags.txt:1192
msgid ""
"After ``parser.parse()`` is called, the parser hasn't yet \"consumed\" the "
"``{% endcomment %}`` tag, so the code needs to explicitly call "
"``parser.delete_first_token()``."
msgstr ""

# daf365c463e44f2cbca45569dd05ecd0
#: ../../howto/custom-template-tags.txt:1196
msgid ""
"``CommentNode.render()`` simply returns an empty string. Anything between "
"``{% comment %}`` and ``{% endcomment %}`` is ignored."
msgstr ""

# eb9b53429df44ae78b6f3f07216c4ce3
#: ../../howto/custom-template-tags.txt:1200
msgid "Parsing until another block tag, and saving contents"
msgstr ""

# caebd788ab864cd8a4b19bc014e64c64
#: ../../howto/custom-template-tags.txt:1202
msgid ""
"In the previous example, ``do_comment()`` discarded everything between ``{% "
"comment %}`` and ``{% endcomment %}``. Instead of doing that, it's possible "
"to do something with the code between block tags."
msgstr ""

# 5a1a7d21575744a69d4603d3e23f1a57
#: ../../howto/custom-template-tags.txt:1206
msgid ""
"For example, here's a custom template tag, ``{% upper %}``, that capitalizes"
" everything between itself and ``{% endupper %}``."
msgstr ""

# 1e32e2c08c014c6a9d5da1517d21cfd5
#: ../../howto/custom-template-tags.txt:1209
msgid "Usage:"
msgstr ""

# 40c28fa052344917a369d8f8b7adcbf2
#: ../../howto/custom-template-tags.txt:1215
msgid ""
"As in the previous example, we'll use ``parser.parse()``. But this time, we "
"pass the resulting ``nodelist`` to the ``Node``:"
msgstr ""

# f4ac630a682547e4be3b26c34292471e
#: ../../howto/custom-template-tags.txt:1232
msgid ""
"The only new concept here is the ``self.nodelist.render(context)`` in "
"``UpperNode.render()``."
msgstr ""

# 8a2632ee491a4447a9b76b1717c8af53
#: ../../howto/custom-template-tags.txt:1235
msgid ""
"For more examples of complex rendering, see the source code for :ttag:`{% if"
" %}<if>`, :ttag:`{% for %}<for>`, :ttag:`{% ifequal %}<ifequal>` or "
":ttag:`{% ifchanged %}<ifchanged>`. They live in "
"``django/template/defaulttags.py``."
msgstr ""

# d49e5526f5834a81ba4633f93f2f04a7
#: ../../howto/deployment/fastcgi.txt:3
msgid "How to use Django with FastCGI, SCGI, or AJP"
msgstr ""

# e9d43acff2f24373822278ae8acc96ef
#: ../../howto/deployment/fastcgi.txt:7
msgid ""
"Although :doc:`WSGI</howto/deployment/wsgi/index>` is the preferred "
"deployment platform for Django, many people use shared hosting, on which "
"protocols such as FastCGI, SCGI or AJP are the only viable options."
msgstr ""

# 0c40ea0490624dd0b5b6e54337491c48
#: ../../howto/deployment/fastcgi.txt:13
msgid ""
"This document primarily focuses on FastCGI. Other protocols, such as SCGI "
"and AJP, are also supported, through the ``flup`` Python package. See the "
"Protocols_ section below for specifics about SCGI and AJP."
msgstr ""

# 3f08e6a770ba459b9ba56b48d08bef22
#: ../../howto/deployment/fastcgi.txt:17
msgid ""
"Essentially, FastCGI is an efficient way of letting an external application "
"serve pages to a Web server. The Web server delegates the incoming Web "
"requests (via a socket) to FastCGI, which executes the code and passes the "
"response back to the Web server, which, in turn, passes it back to the "
"client's Web browser."
msgstr ""

# 04ae156db5424767a4c82af43c1b92bb
#: ../../howto/deployment/fastcgi.txt:22
msgid ""
"Like WSGI, FastCGI allows code to stay in memory, allowing requests to be "
"served with no startup time. While e.g. "
":doc:`mod_wsgi</howto/deployment/wsgi/modwsgi>` can either be configured "
"embedded in the Apache Web server process or as a separate daemon process, a"
" FastCGI process never runs inside the Web server process, always in a "
"separate, persistent process."
msgstr ""

# 2c018867e73f4ff28bcbb86587507d4d
#: ../../howto/deployment/fastcgi.txt:33
msgid ""
"The traditional ``mod_*`` arrangements in Apache embed various scripting "
"languages (most notably PHP, Python and Perl) inside the process space of "
"your Web server. Although this lowers startup time -- because code doesn't "
"have to be read off disk for every request -- it comes at the cost of memory"
" use."
msgstr ""

# b82e841ffd2c416b9993ad147ee8f93b
#: ../../howto/deployment/fastcgi.txt:39
msgid ""
"Due to the nature of FastCGI, it's even possible to have processes that run "
"under a different user account than the Web server process. That's a nice "
"security benefit on shared systems, because it means you can secure your "
"code from other users."
msgstr ""

# c51ec319be5d459391ad0ce44a627138
#: ../../howto/deployment/fastcgi.txt:45
msgid "Prerequisite: flup"
msgstr ""

# 710931b987814dc8b84ab41e51487cf4
#: ../../howto/deployment/fastcgi.txt:47
msgid ""
"Before you can start using FastCGI with Django, you'll need to install "
"flup_, a Python library for dealing with FastCGI. Version 0.5 or newer "
"should work fine."
msgstr ""

# e9c4f63d094a414b8b00a15dedf8d3de
#: ../../howto/deployment/fastcgi.txt:53
msgid "Starting your FastCGI server"
msgstr ""

# 549e1177f385438f930171dfc1537626
#: ../../howto/deployment/fastcgi.txt:55
msgid ""
"FastCGI operates on a client-server model, and in most cases you'll be "
"starting the FastCGI process on your own. Your Web server (be it Apache, "
"lighttpd, or otherwise) only contacts your Django-FastCGI process when the "
"server needs a dynamic page to be loaded. Because the daemon is already "
"running with the code in memory, it's able to serve the response very "
"quickly."
msgstr ""

# 116dc5201dc840748cad2d726895730b
#: ../../howto/deployment/fastcgi.txt:63
msgid ""
"If you're on a shared hosting system, you'll probably be forced to use Web "
"server-managed FastCGI processes. See the section below on running Django "
"with Web server-managed processes for more information."
msgstr ""

# 388fc4b2c2b6468aa5309e7260929e3b
#: ../../howto/deployment/fastcgi.txt:67
msgid ""
"A Web server can connect to a FastCGI server in one of two ways: It can use "
"either a Unix domain socket (a \"named pipe\" on Win32 systems), or it can "
"use a TCP socket. What you choose is a manner of preference; a TCP socket is"
" usually easier due to permissions issues."
msgstr ""

# bd634304401d45018f5f26443afa8736
#: ../../howto/deployment/fastcgi.txt:72
msgid ""
"To start your server, first change into the directory of your project "
"(wherever your :doc:`manage.py </ref/django-admin>` is), and then run the "
":djadmin:`runfcgi` command::"
msgstr ""

# e160701915f74a53bbf5202fd038e5ca
#: ../../howto/deployment/fastcgi.txt:78
msgid ""
"If you specify ``help`` as the only option after :djadmin:`runfcgi`, it'll "
"display a list of all the available options."
msgstr ""

# 0c3bf8b2a7224ea2a847ba97b17d2b86
#: ../../howto/deployment/fastcgi.txt:81
msgid ""
"You'll need to specify either a :djadminopt:`socket`, a "
":djadminopt:`protocol` or both :djadminopt:`host` and :djadminopt:`port`. "
"Then, when you set up your Web server, you'll just need to point it at the "
"host/port or socket you specified when starting the FastCGI server. See the "
"examples_, below."
msgstr ""

# 646b7f09bbb04baab5bebfd68d0382ce
#: ../../howto/deployment/fastcgi.txt:87
msgid "Protocols"
msgstr ""

# b333853f952e48a38b4534bb3cfb29cf
#: ../../howto/deployment/fastcgi.txt:89
msgid ""
"Django supports all the protocols that flup_ does, namely fastcgi_, `SCGI`_ "
"and `AJP1.3`_ (the Apache JServ Protocol, version 1.3). Select your "
"preferred protocol by using the :djadminopt:`protocol=\\<protocol_name\\> "
"<protocol>` option with ``./manage.py runfcgi`` -- where ``<protocol_name>``"
" may be one of: ``fcgi`` (the default), ``scgi`` or ``ajp``. For example::"
msgstr ""

# a9e9cc5b59f7447bad41423efc38a911
#: ../../howto/deployment/fastcgi.txt:103
msgid "Examples"
msgstr ""

# 1f2f7a01537e462795ca08d1b95deb6a
#: ../../howto/deployment/fastcgi.txt:105
msgid "Running a threaded server on a TCP port::"
msgstr ""

# 136bacfb993942c9ae30bad15bc4a508
#: ../../howto/deployment/fastcgi.txt:109
msgid "Running a preforked server on a Unix domain socket::"
msgstr ""

# 55cbea82c3dd445196651ff51d808102
#: ../../howto/deployment/fastcgi.txt:115
msgid ""
"Django's default umask requires that the webserver and the Django fastcgi "
"process be run with the same group **and** user. For increased security, you"
" can run them under the same group but as different users. If you do this, "
"you will need to set the umask to 0002 using the ``umask`` argument to "
"``runfcgi``."
msgstr ""

# e79d5621ef1c41ad9a4f3785793a5950
#: ../../howto/deployment/fastcgi.txt:121
msgid ""
"Run without daemonizing (backgrounding) the process (good for debugging)::"
msgstr ""

# 47e49e5f72be4063b45c00b9980f50fb
#: ../../howto/deployment/fastcgi.txt:126
msgid "Stopping the FastCGI daemon"
msgstr ""

# 049b98ea44ea474cbb0951a7b19cfdd3
#: ../../howto/deployment/fastcgi.txt:128
msgid ""
"If you have the process running in the foreground, it's easy enough to stop "
"it: Simply hitting ``Ctrl-C`` will stop and quit the FastCGI server. "
"However, when you're dealing with background processes, you'll need to "
"resort to the Unix ``kill`` command."
msgstr ""

# 2f542c1809504decb1a7d7ff6ee9ddaf
#: ../../howto/deployment/fastcgi.txt:133
msgid ""
"If you specify the :djadminopt:`pidfile` option to :djadmin:`runfcgi`, you "
"can kill the running FastCGI daemon like this::"
msgstr ""

# a720c0d66ade4a2391dbf7afa10bd982
#: ../../howto/deployment/fastcgi.txt:138
msgid "...where ``$PIDFILE`` is the ``pidfile`` you specified."
msgstr ""

# 145eb64e05e445fab8344d0c93019f5a
#: ../../howto/deployment/fastcgi.txt:140
msgid ""
"To easily restart your FastCGI daemon on Unix, try this small shell script::"
msgstr ""

# 27c8e1e26d294c55a5b3d1ec56449032
#: ../../howto/deployment/fastcgi.txt:160
msgid "Apache setup"
msgstr ""

# dafc7db753554ea59d7b393341f8d257
#: ../../howto/deployment/fastcgi.txt:162
msgid ""
"To use Django with Apache and FastCGI, you'll need Apache installed and "
"configured, with `mod_fastcgi`_ installed and enabled. Consult the Apache "
"documentation for instructions."
msgstr ""

# 89da3d09ae2746ed8b6af3da68d64656
#: ../../howto/deployment/fastcgi.txt:166
msgid ""
"Once you've got that set up, point Apache at your Django FastCGI instance by"
" editing the ``httpd.conf`` (Apache configuration) file. You'll need to do "
"two things:"
msgstr ""

# ee95304e3e6a425f93330c363a61b49c
#: ../../howto/deployment/fastcgi.txt:170
msgid ""
"Use the ``FastCGIExternalServer`` directive to specify the location of your "
"FastCGI server."
msgstr ""

# dae08290c847469798eb60d1542b6503
#: ../../howto/deployment/fastcgi.txt:172
msgid "Use ``mod_rewrite`` to point URLs at FastCGI as appropriate."
msgstr ""

# 25b72bf35cb041e6bc24dd473e4c4f3c
#: ../../howto/deployment/fastcgi.txt:177
msgid "Specifying the location of the FastCGI server"
msgstr ""

# 7d1dd98e8d024212a45966e85a7f7f65
#: ../../howto/deployment/fastcgi.txt:179
msgid ""
"The ``FastCGIExternalServer`` directive tells Apache how to find your "
"FastCGI server. As the `FastCGIExternalServer docs`_ explain, you can "
"specify either a ``socket`` or a ``host``. Here are examples of both:"
msgstr ""

# 499aaa72be484945888bba727d862981
#: ../../howto/deployment/fastcgi.txt:191
msgid ""
"In either case, the file ``/home/user/public_html/mysite.fcgi`` doesn't "
"actually have to exist. It's just a URL used by the Web server internally --"
" a hook for signifying which requests at a URL should be handled by FastCGI."
" (More on this in the next section.)"
msgstr ""

# 3d5443c0f7da48deb8525fc9b478d17b
#: ../../howto/deployment/fastcgi.txt:199
msgid "Using mod_rewrite to point URLs at FastCGI"
msgstr ""

# 075dba813f124121882fefa15d3cea36
#: ../../howto/deployment/fastcgi.txt:201
msgid ""
"The second step is telling Apache to use FastCGI for URLs that match a "
"certain pattern. To do this, use the `mod_rewrite`_ module and rewrite URLs "
"to ``mysite.fcgi`` (or whatever you specified in the "
"``FastCGIExternalServer`` directive, as explained in the previous section)."
msgstr ""

# 250a25bce9364a98887170735f97bb56
#: ../../howto/deployment/fastcgi.txt:206
msgid ""
"In this example, we tell Apache to use FastCGI to handle any request that "
"doesn't represent a file on the filesystem and doesn't start with "
"``/media/``. This is probably the most common case, if you're using Django's"
" admin site:"
msgstr ""

# b3f3e7f68a93459ab7978fec17a4f594
#: ../../howto/deployment/fastcgi.txt:224
msgid ""
"Django will automatically use the pre-rewrite version of the URL when "
"constructing URLs with the :ttag:`{% url %}<url>` template tag (and similar "
"methods)."
msgstr ""

# eb29819591cb410b9ea7dd176e46311b
#: ../../howto/deployment/fastcgi.txt:229
msgid "Using mod_fcgid as alternative to mod_fastcgi"
msgstr ""

# b8e64bfc616449f6812d867112c6405e
#: ../../howto/deployment/fastcgi.txt:231
msgid ""
"Another way to serve applications through FastCGI is by using Apache's "
"`mod_fcgid`_ module. Compared to mod_fastcgi mod_fcgid handles FastCGI "
"applications differently in that it manages the spawning of worker processes"
" by itself and doesn't offer something like ``FastCGIExternalServer``. This "
"means that the configuration looks slightly different."
msgstr ""

# dde135384e3c48f892cfa11ce827d02f
#: ../../howto/deployment/fastcgi.txt:237
msgid ""
"In effect, you have to go the way of adding a script handler similar to what"
" is described later on regarding running Django in a :ref:`shared-hosting "
"environment <apache_shared_hosting>`. For further details please refer to "
"the `mod_fcgid reference`_"
msgstr ""

# 5ffafac7c9124f17b1b021537627a21b
#: ../../howto/deployment/fastcgi.txt:246
msgid "lighttpd setup"
msgstr ""

# 8b880ff703114477828262d2a03f8484
#: ../../howto/deployment/fastcgi.txt:248
msgid ""
"lighttpd_ is a lightweight Web server commonly used for serving static "
"files. It supports FastCGI natively and, thus, is a good choice for serving "
"both static and dynamic pages, if your site doesn't have any Apache-specific"
" needs."
msgstr ""

# 6c21727f435f4aca8297bdaba699b810
#: ../../howto/deployment/fastcgi.txt:254
msgid ""
"Make sure ``mod_fastcgi`` is in your modules list, somewhere after "
"``mod_rewrite`` and ``mod_access``, but not after ``mod_accesslog``. You'll "
"probably want ``mod_alias`` as well, for serving admin media."
msgstr ""

# 8ff5f10c919c4843b70cdaa7b8071b71
#: ../../howto/deployment/fastcgi.txt:258
msgid "Add the following to your lighttpd config file:"
msgstr ""

# f72ef186804445138640d521b64fd02b
#: ../../howto/deployment/fastcgi.txt:285
msgid "Running multiple Django sites on one lighttpd"
msgstr ""

# d555cb3b0f3d4c0fbb6509831eef71a5
#: ../../howto/deployment/fastcgi.txt:287
msgid ""
"lighttpd lets you use \"conditional configuration\" to allow configuration "
"to be customized per host. To specify multiple FastCGI sites, just add a "
"conditional block around your FastCGI config for each site::"
msgstr ""

# 472586f8c5e9458fb8eecb1defd917b4
#: ../../howto/deployment/fastcgi.txt:309
msgid ""
"You can also run multiple Django installations on the same site simply by "
"specifying multiple entries in the ``fastcgi.server`` directive. Add one "
"FastCGI host for each."
msgstr ""

# 611b9185ce5a4b31a7da0dfb2b2ddcdc
#: ../../howto/deployment/fastcgi.txt:314
msgid "Cherokee setup"
msgstr ""

# 1b9cb35138774f1db28fd03b02cff00d
#: ../../howto/deployment/fastcgi.txt:316
msgid ""
"Cherokee is a very fast, flexible and easy to configure Web Server. It "
"supports the widespread technologies nowadays: FastCGI, SCGI, PHP, CGI, SSI,"
" TLS and SSL encrypted connections, Virtual hosts, Authentication, on the "
"fly encoding, Load Balancing, Apache compatible log files, Data Base "
"Balancer, Reverse HTTP Proxy and much more."
msgstr ""

# 111498f316384c07b5b2fdbe7a429436
#: ../../howto/deployment/fastcgi.txt:322
msgid ""
"The Cherokee project provides a documentation to `setting up Django`_ with "
"Cherokee."
msgstr ""

# 0e83e277c2cb4dc29b3aa5e4bcf21f8f
#: ../../howto/deployment/fastcgi.txt:329
msgid "Running Django on a shared-hosting provider with Apache"
msgstr ""

# 9e1427e4c93242e391d79d92d7492f70
#: ../../howto/deployment/fastcgi.txt:331
msgid ""
"Many shared-hosting providers don't allow you to run your own server daemons"
" or edit the ``httpd.conf`` file. In these cases, it's still possible to run"
" Django using Web server-spawned processes."
msgstr ""

# eb4c23d08c874a2e8df9fa1df05f401d
#: ../../howto/deployment/fastcgi.txt:337
msgid ""
"If you're using Web server-spawned processes, as explained in this section, "
"there's no need for you to start the FastCGI server on your own. Apache will"
" spawn a number of processes, scaling as it needs to."
msgstr ""

# b9d8ed459397438f855cbc1b727b2bdd
#: ../../howto/deployment/fastcgi.txt:341
msgid "In your Web root directory, add this to a file named ``.htaccess``:"
msgstr ""

# fc072e3940fd424289ad97b395a5afba
#: ../../howto/deployment/fastcgi.txt:350
msgid ""
"Then, create a small script that tells Apache how to spawn your FastCGI "
"program. Create a file ``mysite.fcgi`` and place it in your Web directory, "
"and be sure to make it executable:"
msgstr ""

# 4b3cb87dac7048cc93203c3a152249c5
#: ../../howto/deployment/fastcgi.txt:371
msgid ""
"This works if your server uses mod_fastcgi. If, on the other hand, you are "
"using mod_fcgid the setup is mostly the same except for a slight change in "
"the ``.htaccess`` file. Instead of adding a fastcgi-script handler, you have"
" to add a fcgid-handler:"
msgstr ""

# bc085756813f40e6bebb2482971bb708
#: ../../howto/deployment/fastcgi.txt:384
msgid "Restarting the spawned server"
msgstr ""

# 48fb498eb4c443cfa26bd9dfa3f69a3a
#: ../../howto/deployment/fastcgi.txt:386
msgid ""
"If you change any Python code on your site, you'll need to tell FastCGI the "
"code has changed. But there's no need to restart Apache in this case. "
"Rather, just reupload ``mysite.fcgi``, or edit the file, so that the "
"timestamp on the file will change. When Apache sees the file has been "
"updated, it will restart your Django application for you."
msgstr ""

# 0ed3df136a834baf957ef8de258af750
#: ../../howto/deployment/fastcgi.txt:392
msgid ""
"If you have access to a command shell on a Unix system, you can accomplish "
"this easily by using the ``touch`` command::"
msgstr ""

# 94c87a21cd7f40ffaa16470ed1f2e012
#: ../../howto/deployment/fastcgi.txt:398
msgid "Serving admin media files"
msgstr ""

# 56bbda0054d948a78e39993ad6d6f7fa
#: ../../howto/deployment/fastcgi.txt:400
msgid ""
"Regardless of the server and configuration you eventually decide to use, you"
" will also need to give some thought to how to serve the admin media files. "
"The advice given in the :ref:`mod_wsgi <serving-the-admin-files>` "
"documentation is also applicable in the setups detailed above."
msgstr ""

# 482a6285d7bd4cb7945bdaed39b37ba4
#: ../../howto/deployment/fastcgi.txt:406
msgid "Forcing the URL prefix to a particular value"
msgstr ""

# bbe409b65ef544ecbdd0f23c37d6e8bb
#: ../../howto/deployment/fastcgi.txt:408
msgid ""
"Because many of these fastcgi-based solutions require rewriting the URL at "
"some point inside the Web server, the path information that Django sees may "
"not resemble the original URL that was passed in. This is a problem if the "
"Django application is being served from under a particular prefix and you "
"want your URLs from the :ttag:`{% url %}<url>` tag to look like the prefix, "
"rather than the rewritten version, which might contain, for example, "
"``mysite.fcgi``."
msgstr ""

# f325668f6954425cb153f426f0670701
#: ../../howto/deployment/fastcgi.txt:415
msgid ""
"Django makes a good attempt to work out what the real script name prefix "
"should be. In particular, if the Web server sets the ``SCRIPT_URL`` "
"(specific to Apache's mod_rewrite), or ``REDIRECT_URL`` (set by a few "
"servers, including Apache + mod_rewrite in some situations), Django will "
"work out the original prefix automatically."
msgstr ""

# e7f2c53b537049eab2704b7785ceae29
#: ../../howto/deployment/fastcgi.txt:421
msgid ""
"In the cases where Django cannot work out the prefix correctly and where you"
" want the original value to be used in URLs, you can set the "
":setting:`FORCE_SCRIPT_NAME` setting in your main ``settings`` file. This "
"sets the script name uniformly for every URL served via that settings file. "
"Thus you'll need to use different settings files if you want different sets "
"of URLs to have different script names in this case, but that is a rare "
"situation."
msgstr ""

# 192b6c1723da4fdbbd306feb1037c82f
#: ../../howto/deployment/fastcgi.txt:428
msgid ""
"As an example of how to use it, if your Django configuration is serving all "
"of the URLs under ``'/'`` and you wanted to use this setting, you would set "
"``FORCE_SCRIPT_NAME = ''`` in your settings file."
msgstr ""

# d356d54ba2154f989afa901258917b8b
#: ../../howto/deployment/index.txt:2
msgid "Deploying Django"
msgstr ""

# c5b01c4abcb048d48ba12ecac52ed27c
#: ../../howto/deployment/index.txt:4
msgid ""
"Django's chock-full of shortcuts to make Web developer's lives easier, but "
"all those tools are of no use if you can't easily deploy your sites. Since "
"Django's inception, ease of deployment has been a major goal. There's a "
"number of good ways to easily deploy Django:"
msgstr ""

# eae420b1191642be8f25e1921344039f
#: ../../howto/deployment/index.txt:15
msgid ""
"If you're new to deploying Django and/or Python, we'd recommend you try "
":doc:`mod_wsgi </howto/deployment/wsgi/modwsgi>` first. In most cases it'll "
"be the easiest, fastest, and most stable deployment choice."
msgstr ""

# b2deffd606f34eb290eeff97de984649
#: ../../howto/deployment/index.txt:21
msgid ""
"`Chapter 12 of the Django Book (second edition)`_ discusses deployment and "
"especially scaling in more detail. However, note that this edition was "
"written against Django version 1.1 and has not been updated since "
"`mod_python` was first deprecated, then completely removed in Django 1.5."
msgstr ""

# ac0a15b7558c4d25830aaa524cf6fbfd
# 7aa8753c52d543b2880a7b523ab04c53
#: ../../howto/deployment/wsgi/apache-auth.txt:3
#: ../../howto/deployment/wsgi/modwsgi.txt:202
msgid "Authenticating against Django's user database from Apache"
msgstr ""

# 95bef2a64fbb4347a744f70577b67e7f
#: ../../howto/deployment/wsgi/apache-auth.txt:5
msgid ""
"Since keeping multiple authentication databases in sync is a common problem "
"when dealing with Apache, you can configure Apache to authenticate against "
"Django's :doc:`authentication system </topics/auth/index>` directly. This "
"requires Apache version >= 2.2 and mod_wsgi >= 2.0. For example, you could:"
msgstr ""

# 2ec2fefacf414b62b98a83f2b708642e
#: ../../howto/deployment/wsgi/apache-auth.txt:10
msgid ""
"Serve static/media files directly from Apache only to authenticated users."
msgstr ""

# e08ac79777904582907e7c9852e5670d
#: ../../howto/deployment/wsgi/apache-auth.txt:12
msgid ""
"Authenticate access to a Subversion_ repository against Django users with a "
"certain permission."
msgstr ""

# d03b9a72c01644e983873dcd9f042984
#: ../../howto/deployment/wsgi/apache-auth.txt:15
msgid ""
"Allow certain users to connect to a WebDAV share created with mod_dav_."
msgstr ""

# 3c54e86f4ec64ab085eb9f9bc848b488
#: ../../howto/deployment/wsgi/apache-auth.txt:18
msgid ""
"If you have installed a :ref:`custom User model <auth-custom-user>` and want"
" to use this default auth handler, it must support an `is_active` attribute."
" If you want to use group based authorization, your custom user must have a "
"relation named 'groups', referring to a related object that has a 'name' "
"field. You can also specify your own custom mod_wsgi auth handler if your "
"custom cannot conform to these requirements."
msgstr ""

# 0365b7e646ec462aabac635d4844f15d
#: ../../howto/deployment/wsgi/apache-auth.txt:29
msgid "Authentication with mod_wsgi"
msgstr ""

# b43fb3c2181241148943e0098fca824f
#: ../../howto/deployment/wsgi/apache-auth.txt:31
msgid ""
"Make sure that mod_wsgi is installed and activated and that you have "
"followed the steps to setup :doc:`Apache with mod_wsgi "
"</howto/deployment/wsgi/modwsgi>`"
msgstr ""

# 8d025079e4ae4148b4ad9c060e910ac2
#: ../../howto/deployment/wsgi/apache-auth.txt:35
msgid ""
"Next, edit your Apache configuration to add a location that you want only "
"authenticated users to be able to view:"
msgstr ""

# 51561be2971c42b8acb7ab50c3ad23c1
#: ../../howto/deployment/wsgi/apache-auth.txt:53
msgid ""
"The ``WSGIAuthUserScript`` directive tells mod_wsgi to execute the "
"``check_password`` function in specified wsgi script, passing the user name "
"and password that it receives from the prompt. In this example, the "
"``WSGIAuthUserScript`` is the same as the ``WSGIScriptAlias`` that defines "
"your application :doc:`that is created by django-admin.py startproject "
"</howto/deployment/wsgi/index>`."
msgstr ""

# c3f34bc6ae014e5fb9d7240e17f85d64
#: ../../howto/deployment/wsgi/apache-auth.txt:62
msgid "Make sure that ``mod_auth_basic`` and ``mod_authz_user`` are loaded."
msgstr ""

# bc269f9c757d41f18ad8e884da7e653e
#: ../../howto/deployment/wsgi/apache-auth.txt:64
msgid ""
"These might be compiled statically into Apache, or you might need to use "
"LoadModule to load them dynamically in your ``httpd.conf``:"
msgstr ""

# e06fc59aaee74cc69220dfc75b984e49
#: ../../howto/deployment/wsgi/apache-auth.txt:72
msgid ""
"Finally, edit your WSGI script ``mysite.wsgi`` to tie Apache's "
"authentication to your site's authentication mechanisms by importing the "
"check_user function:"
msgstr ""

# 34d1f1c9cfcc45fea0bfab97e54d2254
#: ../../howto/deployment/wsgi/apache-auth.txt:89
msgid ""
"Requests beginning with ``/secret/`` will now require a user to "
"authenticate."
msgstr ""

# 685cd235d8b349db8acae8ce32ab26c5
#: ../../howto/deployment/wsgi/apache-auth.txt:91
msgid ""
"The mod_wsgi `access control mechanisms documentation`_ provides additional "
"details and information about alternative methods of authentication."
msgstr ""

# 5b36aa0ca5b44a61922ec388fc44dfa9
#: ../../howto/deployment/wsgi/apache-auth.txt:97
msgid "Authorization with mod_wsgi and Django groups"
msgstr ""

# b38aa58fd3c34230b8cbda4272a314ff
#: ../../howto/deployment/wsgi/apache-auth.txt:99
msgid ""
"mod_wsgi also provides functionality to restrict a particular location to "
"members of a group."
msgstr ""

# 5e038b5feb0a43a5b2d91a16acfe4cf7
#: ../../howto/deployment/wsgi/apache-auth.txt:102
msgid "In this case, the Apache configuration should look like this:"
msgstr ""

# 47d082924cc142eda491d6d6fd8711b6
#: ../../howto/deployment/wsgi/apache-auth.txt:121
msgid ""
"To support the ``WSGIAuthGroupScript`` directive, the same WSGI script "
"``mysite.wsgi`` must also import the ``groups_for_user`` function which "
"returns a list groups the given user belongs to."
msgstr ""

# 96fee009078a4570b022bf4ed4dfc98b
#: ../../howto/deployment/wsgi/apache-auth.txt:129
msgid ""
"Requests for ``/secret/`` will now also require user to be a member of the "
"\"secret-agents\" group."
msgstr ""

# fe272881315542c5b1e9a19dbdd94d6a
#: ../../howto/deployment/wsgi/gunicorn.txt:3
msgid "How to use Django with Gunicorn"
msgstr ""

# 7cf91ee2d57640e2957af5c24e0f8240
#: ../../howto/deployment/wsgi/gunicorn.txt:7
msgid ""
"Gunicorn_ ('Green Unicorn') is a pure-Python WSGI server for UNIX. It has no"
" dependencies and is easy to install and use."
msgstr ""

# d962e5e8ab5b460b873223f8c5c890de
#: ../../howto/deployment/wsgi/gunicorn.txt:12
msgid ""
"There are two ways to use Gunicorn with Django. One is to have Gunicorn "
"treat Django as just another WSGI application. The second is to use "
"Gunicorn's special `integration with Django`_."
msgstr ""

# aba1b444785245e0a9b1bde7a160a424
#: ../../howto/deployment/wsgi/gunicorn.txt:19
msgid "Installing Gunicorn"
msgstr ""

# e02c8f61a4c34538a47b9784448b68b0
#: ../../howto/deployment/wsgi/gunicorn.txt:21
msgid ""
"Installing gunicorn is as easy as ``sudo pip install gunicorn``. For more "
"details, see the `gunicorn documentation`_."
msgstr ""

# 1ee12e32699f48b0bce1a786402d42bd
#: ../../howto/deployment/wsgi/gunicorn.txt:27
msgid "Running Django in Gunicorn as a generic WSGI application"
msgstr ""

# 4656de2560fd491ca00edd6a095492cd
#: ../../howto/deployment/wsgi/gunicorn.txt:29
msgid ""
"When Gunicorn is installed, a ``gunicorn`` command is available which starts"
" the Gunicorn server process. At its simplest, gunicorn just needs to be "
"called with a the location of a WSGI application object.::"
msgstr ""

# 7ed2f956578b4a15989a41761b04668c
#: ../../howto/deployment/wsgi/gunicorn.txt:35
msgid ""
"Where ``APP_MODULE`` is of the pattern ``MODULE_NAME:VARIABLE_NAME``. The "
"module name should be a full dotted path. The variable name refers to a WSGI"
" callable that should be found in the specified module."
msgstr ""

# a08dc8a51baa4aa2a8bb37b5ed1bb7f5
#: ../../howto/deployment/wsgi/gunicorn.txt:39
msgid "So for a typical Django project, invoking gunicorn would look like::"
msgstr ""

# e78bea1846fd402481d94fa341a52a7d
#: ../../howto/deployment/wsgi/gunicorn.txt:43
msgid ""
"(This requires that your project be on the Python path; the simplest way to "
"ensure that is to run this command from the same directory as your "
"``manage.py`` file.)"
msgstr ""

# 77083d00a5a64da8997c1fa8f734caa9
#: ../../howto/deployment/wsgi/gunicorn.txt:49
msgid "Using Gunicorn's Django integration"
msgstr ""

# cf3df7d503ec45f7910c99bfb321a325
#: ../../howto/deployment/wsgi/gunicorn.txt:53
msgid ""
"If you are using Django 1.4 or newer, it’s highly recommended to simply run "
"your application with the WSGI interface using the ``gunicorn`` command as "
"described above."
msgstr ""

# cd2d461e623e4ee4824d84e910446753
#: ../../howto/deployment/wsgi/gunicorn.txt:57
msgid ""
"To use Gunicorn's built-in Django integration, first add ``\"gunicorn\"`` to"
" :setting:`INSTALLED_APPS`. Then run ``python manage.py run_gunicorn``."
msgstr ""

# fcab69ca74ab49098c6026a8b4627bd6
#: ../../howto/deployment/wsgi/gunicorn.txt:60
msgid "This provides a few Django-specific niceties:"
msgstr ""

# cd68015ce32b479c975db543685726d3
#: ../../howto/deployment/wsgi/gunicorn.txt:62
msgid "sets the gunicorn process name to be that of the project"
msgstr ""

# b77b9b60648140469619811537325012
#: ../../howto/deployment/wsgi/gunicorn.txt:64
msgid "validates installed models"
msgstr ""

# 1faa0795c3e54d7594938c9293c00cff
#: ../../howto/deployment/wsgi/gunicorn.txt:66
msgid ""
"allows an ``--adminmedia`` option for passing in the location of the admin "
"media files."
msgstr ""

# b278879967604534b8b8ac71d308a5a5
#: ../../howto/deployment/wsgi/gunicorn.txt:69
msgid ""
"See Gunicorn's `deployment documentation`_ for additional tips on starting "
"and maintaining the Gunicorn server."
msgstr ""

# c24903373e4f45aabb05cd125a26312f
#: ../../howto/deployment/wsgi/index.txt:3
msgid "How to deploy with WSGI"
msgstr ""

# 383601adb5ec4e89b419f62616dabc10
#: ../../howto/deployment/wsgi/index.txt:5
msgid ""
"Django's primary deployment platform is WSGI_, the Python standard for web "
"servers and applications."
msgstr ""

# 24cacc999ea142c3b2357319539df42e
#: ../../howto/deployment/wsgi/index.txt:10
msgid ""
"Django's :djadmin:`startproject` management command sets up a simple default"
" WSGI configuration for you, which you can tweak as needed for your project,"
" and direct any WSGI-compliant webserver to use. Django includes getting-"
"started documentation for the following WSGI servers:"
msgstr ""

# 054646906baf437dbc081cc6f161c1cb
#: ../../howto/deployment/wsgi/index.txt:24
msgid "The ``application`` object"
msgstr ""

# 236272db7f7844deb73f36b30caf2385
#: ../../howto/deployment/wsgi/index.txt:26
msgid ""
"One key concept of deploying with WSGI is to specify a central "
"``application`` callable object which the webserver uses to communicate with"
" your code. This is commonly specified as an object named ``application`` in"
" a Python module accessible to the server."
msgstr ""

# 4870923ec4134fa1b4fe3463d1a43292
#: ../../howto/deployment/wsgi/index.txt:33
msgid ""
"The :djadmin:`startproject` command creates a :file:`projectname/wsgi.py` "
"that contains such an application callable."
msgstr ""

# 6ff2a3f91de048f3be55562bd243ecca
#: ../../howto/deployment/wsgi/index.txt:38
msgid ""
"Upgrading from a previous release of Django and don't have a :file:`wsgi.py`"
" file in your project? You can simply add one to your project's top-level "
"Python package (probably next to :file:`settings.py` and :file:`urls.py`) "
"with the contents below. If you want :djadmin:`runserver` to also make use "
"of this WSGI file, you can also add ``WSGI_APPLICATION = "
"\"mysite.wsgi.application\"`` in your settings (replacing ``mysite`` with "
"the name of your project)."
msgstr ""

# 477336a6a86a493fba4e5e73ccb77b42
#: ../../howto/deployment/wsgi/index.txt:46
msgid "Initially this file contains::"
msgstr ""

# 5e01716dc7a74614a2b1d2949f776bc5
#: ../../howto/deployment/wsgi/index.txt:57
msgid ""
"The ``os.environ.setdefault`` line just sets the default settings module to "
"use, if you haven't explicitly set the :envvar:`DJANGO_SETTINGS_MODULE` "
"environment variable. You'll need to edit this line to replace ``mysite`` "
"with the name of your project package, so the path to your settings module "
"is correct."
msgstr ""

# 5d328d514b0c4734a6e33be8436890c2
#: ../../howto/deployment/wsgi/index.txt:63
msgid ""
"To apply `WSGI middleware`_ you can simply wrap the application object in "
"the same file::"
msgstr ""

# fc329b59623f438bb64a75169b2428b0
#: ../../howto/deployment/wsgi/index.txt:69
msgid ""
"You could also replace the Django WSGI application with a custom WSGI "
"application that later delegates to the Django WSGI application, if you want"
" to combine a Django application with a WSGI application of another "
"framework."
msgstr ""

# dcece8fd5ad04fd191c6682996d0c48d
#: ../../howto/deployment/wsgi/modwsgi.txt:3
msgid "How to use Django with Apache and mod_wsgi"
msgstr ""

# 2f7449ab228e4945ad6a6ce8f24f06c3
#: ../../howto/deployment/wsgi/modwsgi.txt:5
msgid ""
"Deploying Django with Apache_ and `mod_wsgi`_ is a tried and tested way to "
"get Django into production."
msgstr ""

# 0344eaee63b34a51b88343c23cd098a4
#: ../../howto/deployment/wsgi/modwsgi.txt:11
msgid ""
"mod_wsgi is an Apache module which can host any Python WSGI_ application, "
"including Django. Django will work with any version of Apache which supports"
" mod_wsgi."
msgstr ""

# b8d04634f07344888bd0b4bbab888edc
#: ../../howto/deployment/wsgi/modwsgi.txt:17
msgid ""
"The `official mod_wsgi documentation`_ is fantastic; it's your source for "
"all the details about how to use mod_wsgi. You'll probably want to start "
"with the `installation and configuration documentation`_."
msgstr ""

# 5b41a3985de146978580f2fbbd7f7d91
#: ../../howto/deployment/wsgi/modwsgi.txt:25
msgid "Basic configuration"
msgstr ""

# b8cb66cb4dbe49ec9683586423fd2a29
#: ../../howto/deployment/wsgi/modwsgi.txt:27
msgid ""
"Once you've got mod_wsgi installed and activated, edit your Apache server's "
"``httpd.conf`` file and add"
msgstr ""

# 1d464253177143ba98f7def24b9777c5
#: ../../howto/deployment/wsgi/modwsgi.txt:42
msgid ""
"The first bit in the ``WSGIScriptAlias`` line is the base URL path you want "
"to serve your application at (``/`` indicates the root url), and the second "
"is the location of a \"WSGI file\" -- see below -- on your system, usually "
"inside of your project package (``mysite`` in this example). This tells "
"Apache to serve any request below the given URL using the WSGI application "
"defined in that file."
msgstr ""

# 8653e5e77dc345d884255b7de9029c0f
#: ../../howto/deployment/wsgi/modwsgi.txt:49
msgid ""
"The ``WSGIPythonPath`` line ensures that your project package is available "
"for import on the Python path; in other words, that ``import mysite`` works."
msgstr ""

# 5bb754bdd7504abb8675ac7eaea0b29b
#: ../../howto/deployment/wsgi/modwsgi.txt:52
msgid ""
"The ``<Directory>`` piece just ensures that Apache can access your "
":file:`wsgi.py` file."
msgstr ""

# e4b3a61cb2dc4f6bb10b54252374d379
#: ../../howto/deployment/wsgi/modwsgi.txt:55
msgid ""
"Next we'll need to ensure this :file:`wsgi.py` with a WSGI application "
"object exists. As of Django version 1.4, :djadmin:`startproject` will have "
"created one for you; otherwise, you'll need to create it. See the :doc:`WSGI"
" overview documentation</howto/deployment/wsgi/index>` for the default "
"contents you should put in this file, and what else you can add to it."
msgstr ""

# ccabe7a375b543f8951fecf185811891
#: ../../howto/deployment/wsgi/modwsgi.txt:63
msgid ""
"If multiple Django sites are run in a single mod_wsgi process, all of them "
"will use the settings of whichever one happens to run first. This can be "
"solved with a minor edit to ``wsgi.py`` (see comment in the file for "
"details), or by :ref:`using mod_wsgi daemon mode<daemon-mode>` and ensuring "
"that each site runs in its own daemon process."
msgstr ""

# 0851a031e2b4467fb8152f21576aeb08
#: ../../howto/deployment/wsgi/modwsgi.txt:71
msgid "Using a virtualenv"
msgstr ""

# 3170db1199a0441d91ed6f8195edbd1c
#: ../../howto/deployment/wsgi/modwsgi.txt:73
msgid ""
"If you install your project's Python dependencies inside a `virtualenv`_, "
"you'll need to add the path to this virtualenv's ``site-packages`` directory"
" to your Python path as well. To do this, add an additional path to your "
"`WSGIPythonPath` directive, with multiple paths separated by a colon::"
msgstr ""

# 19e5d84547854a6b8e5c7428cf9bf579
#: ../../howto/deployment/wsgi/modwsgi.txt:80
msgid ""
"Make sure you give the correct path to your virtualenv, and replace "
"``python2.X`` with the correct Python version (e.g. ``python2.7``)."
msgstr ""

# a008f06044594538b1a6696f832c65fc
#: ../../howto/deployment/wsgi/modwsgi.txt:88
msgid "Using mod_wsgi daemon mode"
msgstr ""

# eb8cb2cce2c74d4dab03eda10f957e46
#: ../../howto/deployment/wsgi/modwsgi.txt:90
msgid ""
"\"Daemon mode\" is the recommended mode for running mod_wsgi (on non-Windows"
" platforms). To create the required daemon process group and delegate the "
"Django instance to run in it, you will need to add appropriate "
"``WSGIDaemonProcess`` and ``WSGIProcessGroup`` directives. A further change "
"required to the above configuration if you use daemon mode is that you can't"
" use ``WSGIPythonPath``; instead you should use the ``python-path`` option "
"to ``WSGIDaemonProcess``, for example::"
msgstr ""

# 3a8aa885d6494565aea8b69b65cc9bb2
#: ../../howto/deployment/wsgi/modwsgi.txt:101
msgid ""
"See the official mod_wsgi documentation for `details on setting up daemon "
"mode`_."
msgstr ""

# 87a6603d77df4dff9e4ea7673d099899
#: ../../howto/deployment/wsgi/modwsgi.txt:109
msgid "Serving files"
msgstr ""

# f11b003362754eff88eb6fcd789dc0e1
#: ../../howto/deployment/wsgi/modwsgi.txt:111
msgid ""
"Django doesn't serve files itself; it leaves that job to whichever Web "
"server you choose."
msgstr ""

# 75f8c5d3d5214959b1adb90203cc91d2
#: ../../howto/deployment/wsgi/modwsgi.txt:114
msgid ""
"We recommend using a separate Web server -- i.e., one that's not also "
"running Django -- for serving media. Here are some good choices:"
msgstr ""

# fc6de32b3b56485e923ebc240e741fb5
# 5527883f1fb74731a8adfa827034e6ba
#: ../../howto/deployment/wsgi/modwsgi.txt:117
#: ../../howto/static-files/deployment.txt:73
msgid "lighttpd_"
msgstr ""

# d9ae7f3468ce4ea690abffbde83eeee0
# 7a77b3a671dd49f9946615f45f0413fa
#: ../../howto/deployment/wsgi/modwsgi.txt:118
#: ../../howto/static-files/deployment.txt:74
msgid "Nginx_"
msgstr ""

# f1c0938c91cb47cc9714bf1e972555cc
# bb249361a64e4f23a63718230bb677dc
#: ../../howto/deployment/wsgi/modwsgi.txt:119
#: ../../howto/static-files/deployment.txt:75
msgid "TUX_"
msgstr ""

# 089c01ccbb564a12839b5be822900d0f
# cab271d7a1bc44fcbfd7277e478f2be1
#: ../../howto/deployment/wsgi/modwsgi.txt:120
#: ../../howto/static-files/deployment.txt:77
msgid "A stripped-down version of Apache_"
msgstr ""

# 00aa0909ae914306b835cfa3c6161785
# 1dce7305d9014ff8bf2d785ff3fb9ec0
#: ../../howto/deployment/wsgi/modwsgi.txt:121
#: ../../howto/static-files/deployment.txt:76
msgid "Cherokee_"
msgstr ""

# eb7ea187f7534348b4389c4f7644ecf3
#: ../../howto/deployment/wsgi/modwsgi.txt:123
msgid ""
"If, however, you have no option but to serve media files on the same Apache "
"``VirtualHost`` as Django, you can set up Apache to serve some URLs as "
"static media, and others using the mod_wsgi interface to Django."
msgstr ""

# 5a7e538ec24d4b49ae3247df8274f9a7
#: ../../howto/deployment/wsgi/modwsgi.txt:127
msgid ""
"This example sets up Django at the site root, but explicitly serves "
"``robots.txt``, ``favicon.ico``, any CSS file, and anything in the "
"``/static/`` and ``/media/`` URL space as a static file. All other URLs will"
" be served using mod_wsgi::"
msgstr ""

# 641b717a5ee84add947e0b4562ceaf01
#: ../../howto/deployment/wsgi/modwsgi.txt:173
msgid "Serving the admin files"
msgstr ""

# 979acc876c29423e94918b6faf462ce6
#: ../../howto/deployment/wsgi/modwsgi.txt:175
msgid ""
"Note that the Django development server automatically serves the static "
"files of the admin app (and any other installed apps), but this is not the "
"case when you use any other server arrangement. You're responsible for "
"setting up Apache, or whichever media server you're using, to serve the "
"admin files."
msgstr ""

# e5237836b66741149277e22a942d5741
#: ../../howto/deployment/wsgi/modwsgi.txt:180
msgid ""
"The admin files live in (:file:`django/contrib/admin/static/admin`) of the "
"Django distribution."
msgstr ""

# 704dda5937b049e5b8a76fddfeca5fb6
#: ../../howto/deployment/wsgi/modwsgi.txt:183
msgid ""
"We **strongly** recommend using :mod:`django.contrib.staticfiles` to handle "
"the admin files (along with a Web server as outlined in the previous "
"section; this means using the :djadmin:`collectstatic` management command to"
" collect the static files in :setting:`STATIC_ROOT`, and then configuring "
"your Web server to serve :setting:`STATIC_ROOT` at :setting:`STATIC_URL`), "
"but here are three other approaches:"
msgstr ""

# f8775c9fd20a463a8f934d837cc1f6d8
#: ../../howto/deployment/wsgi/modwsgi.txt:190
msgid ""
"Create a symbolic link to the admin static files from within your document "
"root (this may require ``+FollowSymLinks`` in your Apache configuration)."
msgstr ""

# 06403faef1244f729a9379e7457c6764
#: ../../howto/deployment/wsgi/modwsgi.txt:194
msgid ""
"Use an ``Alias`` directive, as demonstrated above, to alias the appropriate "
"URL (probably :setting:`STATIC_URL` + `admin/`) to the actual location of "
"the admin files."
msgstr ""

# d67a9d96c6f743f1b262f3b42b04c116
#: ../../howto/deployment/wsgi/modwsgi.txt:198
msgid ""
"Copy the admin static files so that they live within your Apache document "
"root."
msgstr ""

# 1455fdbe945f4615ba026a4b9fea5c9f
#: ../../howto/deployment/wsgi/modwsgi.txt:204
msgid ""
"Django provides a handler to allow Apache to authenticate users directly "
"against Django's authentication backends. See the :doc:`mod_wsgi "
"authentication documentation </howto/deployment/wsgi/apache-auth>`."
msgstr ""

# b39cfa1684e04edaae6d450d6fb68717
#: ../../howto/deployment/wsgi/modwsgi.txt:209
msgid "If you get a UnicodeEncodeError"
msgstr ""

# 5cd4d790af5243a7af130fcbbc9b4f27
#: ../../howto/deployment/wsgi/modwsgi.txt:211
msgid ""
"If you're taking advantage of the internationalization features of Django "
"(see :doc:`/topics/i18n/index`) and you intend to allow users to upload "
"files, you must ensure that the environment used to start Apache is "
"configured to accept non-ASCII file names. If your environment is not "
"correctly configured, you will trigger ``UnicodeEncodeError`` exceptions "
"when calling functions like ``os.path()`` on filenames that contain non-"
"ASCII characters."
msgstr ""

# be48fb8385914e62a68794401e0abfde
#: ../../howto/deployment/wsgi/modwsgi.txt:218
msgid ""
"To avoid these problems, the environment used to start Apache should contain"
" settings analogous to the following::"
msgstr ""

# 5bd51d138d5549768b44be06b9faa273
#: ../../howto/deployment/wsgi/modwsgi.txt:224
msgid ""
"Consult the documentation for your operating system for the appropriate "
"syntax and location to put these configuration items; "
"``/etc/apache2/envvars`` is a common location on Unix platforms. Once you "
"have added these statements to your environment, restart Apache."
msgstr ""

# c3fb4b0e30d14e72817da9900369bf6a
#: ../../howto/deployment/wsgi/uwsgi.txt:3
msgid "How to use Django with uWSGI"
msgstr ""

# 92695ac599754cb99121880772a2ce48
#: ../../howto/deployment/wsgi/uwsgi.txt:7
msgid ""
"uWSGI_ is a fast, self-healing and developer/sysadmin-friendly application "
"container server coded in pure C."
msgstr ""

# 6433168f84124578a5a3f7c320e64739
#: ../../howto/deployment/wsgi/uwsgi.txt:14
msgid ""
"The uWSGI docs offer a `tutorial`_ covering Django, nginx, and uWSGI (one "
"possible deployment setup of many). The docs below are focused on how to "
"integrate Django with uWSGI."
msgstr ""

# af45455071984a88a0d8b5aa75ea6a77
#: ../../howto/deployment/wsgi/uwsgi.txt:21
msgid "Prerequisite: uWSGI"
msgstr ""

# 3443e6ee42214f219b0b534065b16f50
#: ../../howto/deployment/wsgi/uwsgi.txt:23
msgid ""
"The uWSGI wiki describes several `installation procedures`_. Using pip, the "
"Python package manager, you can install any uWSGI version with a single "
"command. For example:"
msgstr ""

# 31f2a857f1cf42b7a2d7c52f78585952
#: ../../howto/deployment/wsgi/uwsgi.txt:38
msgid "uWSGI model"
msgstr ""

# 87dc6d9de4e342569328f1a6e7beed1f
#: ../../howto/deployment/wsgi/uwsgi.txt:40
msgid ""
"uWSGI operates on a client-server model. Your Web server (e.g., nginx, "
"Apache) communicates with a django-uwsgi \"worker\" process to serve dynamic"
" content. See uWSGI's `background documentation`_ for more detail."
msgstr ""

# b749e9d15f4245b082957c992fb4190e
#: ../../howto/deployment/wsgi/uwsgi.txt:47
msgid "Configuring and starting the uWSGI server for Django"
msgstr ""

# 01585a2c204c4772bad315ef2a460464
#: ../../howto/deployment/wsgi/uwsgi.txt:49
msgid ""
"uWSGI supports multiple ways to configure the process. See uWSGI's "
"`configuration documentation`_ and `examples`_"
msgstr ""

# 8f53769e169b4d0a84da6b7b9f952847
#: ../../howto/deployment/wsgi/uwsgi.txt:55
msgid "Here's an example command to start a uWSGI server::"
msgstr ""

# 2f389e390907493fab7de4d5a98c4210
#: ../../howto/deployment/wsgi/uwsgi.txt:71
msgid ""
"This assumes you have a top-level project package named ``mysite``, and "
"within it a module :file:`mysite/wsgi.py` that contains a WSGI "
"``application`` object. This is the layout you'll have if you ran ``django-"
"admin.py startproject mysite`` (using your own project name in place of "
"``mysite``) with a recent version of Django. If this file doesn't exist, "
"you'll need to create it. See the :doc:`/howto/deployment/wsgi/index` "
"documentation for the default contents you should put in this file and what "
"else you can add to it."
msgstr ""

# 9b3634e58bdf493a829c4f7a8eaaa08e
#: ../../howto/deployment/wsgi/uwsgi.txt:79
msgid "The Django-specific options here are:"
msgstr ""

# 36f82bfb010b432db6c260e1a27ac725
#: ../../howto/deployment/wsgi/uwsgi.txt:81
msgid ""
"``chdir``: The path to the directory that needs to be on Python's import "
"path -- i.e., the directory containing the ``mysite`` package."
msgstr ""

# 01e47c4c70e14cd1963444b6e40bb1ee
#: ../../howto/deployment/wsgi/uwsgi.txt:83
msgid ""
"``module``: The WSGI module to use -- probably the ``mysite.wsgi`` module "
"that :djadmin:`startproject` creates."
msgstr ""

# 3b632986b4d04e24a0ad37813f372e62
#: ../../howto/deployment/wsgi/uwsgi.txt:85
msgid "``env``: Should probably contain at least ``DJANGO_SETTINGS_MODULE``."
msgstr ""

# bc9749e08376496180f0baefd7109131
#: ../../howto/deployment/wsgi/uwsgi.txt:86
msgid "``home``: Optional path to your project virtualenv."
msgstr ""

# 9314cf054f91406ab3455be7f18a4e4e
#: ../../howto/deployment/wsgi/uwsgi.txt:88
msgid "Example ini configuration file::"
msgstr ""

# 106155702dc749d58d8ae040af82eb6e
#: ../../howto/deployment/wsgi/uwsgi.txt:99
msgid "Example ini configuration file usage::"
msgstr ""

# a6e38ef46ee145dc9a0b95420b2e913c
#: ../../howto/deployment/wsgi/uwsgi.txt:103
msgid ""
"See the uWSGI docs on `managing the uWSGI process`_ for information on "
"starting, stoping and reloading the uWSGI workers."
msgstr ""

# 5d7584af6ddd4ff492e4c117345933bd
#: ../../howto/error-reporting.txt:2
msgid "Error reporting"
msgstr ""

# ac7599fced504cf291b4c8ec9f4fd478
#: ../../howto/error-reporting.txt:4
msgid ""
"When you're running a public site you should always turn off the "
":setting:`DEBUG` setting. That will make your server run much faster, and "
"will also prevent malicious users from seeing details of your application "
"that can be revealed by the error pages."
msgstr ""

# 43e0712994d44cbcba9069c10f8ad73d
#: ../../howto/error-reporting.txt:9
msgid ""
"However, running with :setting:`DEBUG` set to ``False`` means you'll never "
"see errors generated by your site -- everyone will just see your public "
"error pages. You need to keep track of errors that occur in deployed sites, "
"so Django can be configured to create reports with details about those "
"errors."
msgstr ""

# 6bd95d41c63449e09e2931ca874937ac
#: ../../howto/error-reporting.txt:15
msgid "Email reports"
msgstr ""

# 3e002df32f4a4bc281a60fde9152b8b6
#: ../../howto/error-reporting.txt:18
msgid "Server errors"
msgstr ""

# 29f600a228fd455eb9743d9054b4359c
#: ../../howto/error-reporting.txt:20
msgid ""
"When :setting:`DEBUG` is ``False``, Django will email the users listed in "
"the :setting:`ADMINS` setting whenever your code raises an unhandled "
"exception and results in an internal server error (HTTP status code 500). "
"This gives the administrators immediate notification of any errors. The "
":setting:`ADMINS` will get a description of the error, a complete Python "
"traceback, and details about the HTTP request that caused the error."
msgstr ""

# f82685827f914a25a18f660f879fa62c
#: ../../howto/error-reporting.txt:29
msgid ""
"In order to send email, Django requires a few settings telling it how to "
"connect to your mail server. At the very least, you'll need to specify "
":setting:`EMAIL_HOST` and possibly :setting:`EMAIL_HOST_USER` and "
":setting:`EMAIL_HOST_PASSWORD`, though other settings may be also required "
"depending on your mail server's configuration. Consult :doc:`the Django "
"settings documentation </ref/settings>` for a full list of email-related "
"settings."
msgstr ""

# 10b040a198214bc399e6d5aaf0a85638
#: ../../howto/error-reporting.txt:38
msgid ""
"By default, Django will send email from root@localhost. However, some mail "
"providers reject all email from this address. To use a different sender "
"address, modify the :setting:`SERVER_EMAIL` setting."
msgstr ""

# 94ade3a99f1742eebb8c7b00dcd0ea1f
#: ../../howto/error-reporting.txt:42
msgid ""
"To disable this behavior, just remove all entries from the :setting:`ADMINS`"
" setting."
msgstr ""

# d7a565226d8f4f488e3e4d6d476d2182
#: ../../howto/error-reporting.txt:47
msgid ""
"Server error emails are sent using the logging framework, so you can "
"customize this behavior by :doc:`customizing your logging configuration "
"</topics/logging>`."
msgstr ""

# 66b57f94b5594cb293c5beb8a9e3e434
#: ../../howto/error-reporting.txt:52
msgid "404 errors"
msgstr ""

# 8670803fa02a4386b22f75a2b92b4cf1
#: ../../howto/error-reporting.txt:54
msgid ""
"Django can also be configured to email errors about broken links (404 \"page"
" not found\" errors). Django sends emails about 404 errors when:"
msgstr ""

# 398fce74914a425baf4011324128880c
#: ../../howto/error-reporting.txt:57
msgid ":setting:`DEBUG` is ``False``"
msgstr ""

# e6c7e017f1784aef80ace2cd4108ad50
#: ../../howto/error-reporting.txt:59
msgid ":setting:`SEND_BROKEN_LINK_EMAILS` is ``True``"
msgstr ""

# ad62b89b3b424e5ca0333694f313a89f
#: ../../howto/error-reporting.txt:61
msgid ""
"Your :setting:`MIDDLEWARE_CLASSES` setting includes ``CommonMiddleware`` "
"(which it does by default)."
msgstr ""

# 302ce486a189418393027a2a8c1c3946
#: ../../howto/error-reporting.txt:64
msgid ""
"If those conditions are met, Django will email the users listed in the "
":setting:`MANAGERS` setting whenever your code raises a 404 and the request "
"has a referer. (It doesn't bother to email for 404s that don't have a "
"referer -- those are usually just people typing in broken URLs or broken Web"
" 'bots)."
msgstr ""

# 67a328a46965483b9129f37e5c8165ad
#: ../../howto/error-reporting.txt:69
msgid ""
"You can tell Django to stop reporting particular 404s by tweaking the "
":setting:`IGNORABLE_404_URLS` setting. It should be a tuple of compiled "
"regular expression objects. For example::"
msgstr ""

# 4fb2c2535c2b4190b60d593ff9f5951b
#: ../../howto/error-reporting.txt:79
msgid ""
"In this example, a 404 to any URL ending with ``.php`` or ``.cgi`` will "
"*not* be reported. Neither will any URL starting with ``/phpmyadmin/``."
msgstr ""

# 86dab87c9d0842d9b09c99f808ccfc33
#: ../../howto/error-reporting.txt:82
msgid ""
"The following example shows how to exclude some conventional URLs that "
"browsers and crawlers often request::"
msgstr ""

# 0d07e900babf4a2faf6f0cd778061a07
#: ../../howto/error-reporting.txt:92
msgid ""
"(Note that these are regular expressions, so we put a backslash in front of "
"periods to escape them.)"
msgstr ""

# 36f570dc4ea34b259bbdfb34e61ffcd7
#: ../../howto/error-reporting.txt:95
msgid ""
"The best way to disable this behavior is to set "
":setting:`SEND_BROKEN_LINK_EMAILS` to ``False``."
msgstr ""

# 99adf9a521024b058b002ba653ba1efc
#: ../../howto/error-reporting.txt:100
msgid ""
"404 errors are logged using the logging framework. By default, these log "
"records are ignored, but you can use them for error reporting by writing a "
"handler and :doc:`configuring logging </topics/logging>` appropriately."
msgstr ""

# 058f7a441b034792a1751aa9e8f26588
#: ../../howto/error-reporting.txt:108
msgid ""
"Previously, two settings were used to control which URLs not to report: "
":setting:`IGNORABLE_404_STARTS` and :setting:`IGNORABLE_404_ENDS`. They were"
" replaced by :setting:`IGNORABLE_404_URLS`."
msgstr ""

# db6e0dd6a0c141feaf09a60c565faaf9
#: ../../howto/error-reporting.txt:115
msgid "Filtering error reports"
msgstr ""

# 95a3d244b05f4676ac90e430fa989dc6
#: ../../howto/error-reporting.txt:120
msgid "Filtering sensitive information"
msgstr ""

# f357d0b4440c4773b4c3ea633f678947
#: ../../howto/error-reporting.txt:122
msgid ""
"Error reports are really helpful for debugging errors, so it is generally "
"useful to record as much relevant information about those errors as "
"possible. For example, by default Django records the `full traceback`_ for "
"the exception raised, each `traceback frame`_'s local variables, and the "
":class:`~django.http.HttpRequest`'s :ref:`attributes<httprequest-"
"attributes>`."
msgstr ""

# c028d468804d412398bd3dd61a098f4f
#: ../../howto/error-reporting.txt:128
msgid ""
"However, sometimes certain types of information may be too sensitive and "
"thus may not be appropriate to be kept track of, for example a user's "
"password or credit card number. So Django offers a set of function "
"decorators to help you control which information should be filtered out of "
"error reports in a production environment (that is, where :setting:`DEBUG` "
"is set to ``False``): :func:`sensitive_variables` and "
":func:`sensitive_post_parameters`."
msgstr ""

# 0b37e4273e7c49eab1cb570c88394ed1
#: ../../howto/error-reporting.txt:140
msgid ""
"If a function (either a view or any regular callback) in your code uses "
"local variables susceptible to contain sensitive information, you may "
"prevent the values of those variables from being included in error reports "
"using the ``sensitive_variables`` decorator::"
msgstr ""

# 8374cb486ef34da0a6e40ad867b33874
#: ../../howto/error-reporting.txt:154
msgid ""
"In the above example, the values for the ``user``, ``pw`` and ``cc`` "
"variables will be hidden and replaced with stars (`**********`) in the error"
" reports, whereas the value of the ``name`` variable will be disclosed."
msgstr ""

# 927e5d0c7ae041368b3706ade0153f51
#: ../../howto/error-reporting.txt:159
msgid ""
"To systematically hide all local variables of a function from error logs, do"
" not provide any argument to the ``sensitive_variables`` decorator::"
msgstr ""

# 0f43a7017ec142f5a3c3ec426c49b4f7
#: ../../howto/error-reporting.txt:168
msgid ""
"If the variable you want to hide is also a function argument (e.g. "
"'``user``' in the following example), and if the decorated function has "
"mutiple decorators, then make sure to place ``@sensitive_variables`` at the "
"top of the decorator chain. This way it will also hide the function argument"
" as it gets passed through the other decorators::"
msgstr ""

# 6162213f8b1b4cc993e2aa4f70d304c8
#: ../../howto/error-reporting.txt:182
msgid ""
"If one of your views receives an :class:`~django.http.HttpRequest` object "
"with :attr:`POST parameters<django.http.HttpRequest.POST>` susceptible to "
"contain sensitive information, you may prevent the values of those "
"parameters from being included in the error reports using the "
"``sensitive_post_parameters`` decorator::"
msgstr ""

# b92eddde31ea4e4cbb74bb82c70147d7
#: ../../howto/error-reporting.txt:198
msgid ""
"In the above example, the values for the ``pass_word`` and "
"``credit_card_number`` POST parameters will be hidden and replaced with "
"stars (`**********`) in the request's representation inside the error "
"reports, whereas the value of the ``name`` parameter will be disclosed."
msgstr ""

# a879d5bcdec64f298dc7d97bc20c9a20
#: ../../howto/error-reporting.txt:203
msgid ""
"To systematically hide all POST parameters of a request in error reports, do"
" not provide any argument to the ``sensitive_post_parameters`` decorator::"
msgstr ""

# 8656fddb5335422195a12f75bd5dc50f
#: ../../howto/error-reporting.txt:214
msgid ""
"Since version 1.4, all POST parameters are systematically filtered out of "
"error reports for certain :mod:`django.contrib.auth.views` views ( "
"``login``, ``password_reset_confirm``, ``password_change``, and ``add_view``"
" and ``user_change_password`` in the ``auth`` admin) to prevent the leaking "
"of sensitive information such as user passwords."
msgstr ""

# 72bdaa41609740d6a0071864476fbaa1
#: ../../howto/error-reporting.txt:223
msgid "Custom error reports"
msgstr ""

# e3358ac7ae184555aabcc77584958ccb
#: ../../howto/error-reporting.txt:225
msgid ""
"All :func:`sensitive_variables` and :func:`sensitive_post_parameters` do is,"
" respectively, annotate the decorated function with the names of sensitive "
"variables and annotate the ``HttpRequest`` object with the names of "
"sensitive POST parameters, so that this sensitive information can later be "
"filtered out of reports when an error occurs. The actual filtering is done "
"by Django's default error reporter filter: "
":class:`django.views.debug.SafeExceptionReporterFilter`. This filter uses "
"the decorators' annotations to replace the corresponding values with stars "
"(`**********`) when the error reports are produced. If you wish to override "
"or customize this default behavior for your entire site, you need to define "
"your own filter class and tell Django to use it via the "
":setting:`DEFAULT_EXCEPTION_REPORTER_FILTER` setting::"
msgstr ""

# acafef7dbb624141b93740314c3a0189
#: ../../howto/error-reporting.txt:240
msgid ""
"You may also control in a more granular way which filter to use within any "
"given view by setting the ``HttpRequest``'s ``exception_reporter_filter`` "
"attribute::"
msgstr ""

# d65a4928460541259a289bf27ff4e226
#: ../../howto/error-reporting.txt:249
msgid ""
"Your custom filter class needs to inherit from "
":class:`django.views.debug.SafeExceptionReporterFilter` and may override the"
" following methods:"
msgstr ""

# a1104b7a122b4835bc0f7237812042c5
#: ../../howto/error-reporting.txt:257
msgid ""
"Returns ``True`` to activate the filtering operated in the other methods. By"
" default the filter is active if :setting:`DEBUG` is ``False``."
msgstr ""

# 1927bfb387b44bb59785fcdf3571b98e
#: ../../howto/error-reporting.txt:262
msgid ""
"Returns the representation string of the request object, that is, the value "
"that would be returned by ``repr(request)``, except it uses the filtered "
"dictionary of POST parameters as determined by "
":meth:`SafeExceptionReporterFilter.get_post_parameters`."
msgstr ""

# 42ef5361b2274dbe95428e359af07de0
#: ../../howto/error-reporting.txt:269
msgid ""
"Returns the filtered dictionary of POST parameters. By default it replaces "
"the values of sensitive parameters with stars (`**********`)."
msgstr ""

# c4a37020bf714c42b094e364deae83a5
#: ../../howto/error-reporting.txt:274
msgid ""
"Returns the filtered dictionary of local variables for the given traceback "
"frame. By default it replaces the values of sensitive variables with stars "
"(`**********`)."
msgstr ""

# 6a0403d2a7f94dbe85b2630b2e41c767
#: ../../howto/error-reporting.txt:280
msgid ""
"You can also set up custom error reporting by writing a custom piece of "
":ref:`exception middleware <exception-middleware>`. If you do write custom "
"error handling, it's a good idea to emulate Django's built-in error handling"
" and only report/log errors if :setting:`DEBUG` is ``False``."
msgstr ""

# b6707901b1f34e61894c8b61f82d3482
#: ../../howto/index.txt:2
msgid "\"How-to\" guides"
msgstr ""

# 3ec06dedbe12437eacc3967f6c5d2866
#: ../../howto/index.txt:4
msgid ""
"Here you'll find short answers to \"How do I....?\" types of questions. "
"These how-to guides don't cover topics in depth -- you'll find that material"
" in the :doc:`/topics/index` and the :doc:`/ref/index`. However, these "
"guides will help you quickly accomplish common tasks."
msgstr ""

# d4f1397bd36f486aae8f97594572f659
#: ../../howto/index.txt:29
msgid ""
"The `Django community aggregator`_, where we aggregate content from the "
"global Django community. Many writers in the aggregator write this sort of "
"how-to material."
msgstr ""

# 88882b71fe3e4c9e8b32ddad74d1e2a2
#: ../../howto/initial-data.txt:3
msgid "Providing initial data for models"
msgstr ""

# ae0ce8e3d9ac44e28d7a693d87d1dac5
#: ../../howto/initial-data.txt:5
msgid ""
"It's sometimes useful to pre-populate your database with hard-coded data "
"when you're first setting up an app. There's a couple of ways you can have "
"Django automatically create this data: you can provide `initial data via "
"fixtures`_, or you can provide `initial data as SQL`_."
msgstr ""

# 42d53a82f889483c9beacf04b90b2e19
#: ../../howto/initial-data.txt:10
msgid ""
"In general, using a fixture is a cleaner method since it's database-"
"agnostic, but initial SQL is also quite a bit more flexible."
msgstr ""

# 4c5b2ee96b7e4b14a3b3095c02ea7b8d
#: ../../howto/initial-data.txt:19
msgid "Providing initial data with fixtures"
msgstr ""

# 342163a75a1e415181723444f6e85504
#: ../../howto/initial-data.txt:21
msgid ""
"A fixture is a collection of data that Django knows how to import into a "
"database. The most straightforward way of creating a fixture if you've "
"already got some data is to use the :djadmin:`manage.py dumpdata <dumpdata>`"
" command. Or, you can write fixtures by hand; fixtures can be written as "
"XML, YAML, or JSON documents. The :doc:`serialization documentation "
"</topics/serialization>` has more details about each of these supported "
":ref:`serialization formats <serialization-formats>`."
msgstr ""

# 97deff9dfb35498faad17d5b06039f08
#: ../../howto/initial-data.txt:29
msgid ""
"As an example, though, here's what a fixture for a simple ``Person`` model "
"might look like in JSON:"
msgstr ""

# 77dd3776f0c74434a5330c8435788434
#: ../../howto/initial-data.txt:53
msgid "And here's that same fixture as YAML:"
msgstr ""

# 3ceae8069c6e466ea8637d2afee735a2
#: ../../howto/initial-data.txt:68
msgid "You'll store this data in a ``fixtures`` directory inside your app."
msgstr ""

# 2e0310781669459aa6518bbd6a502401
#: ../../howto/initial-data.txt:70
msgid ""
"Loading data is easy: just call :djadmin:`manage.py loaddata <loaddata>` "
"``<fixturename>``, where ``<fixturename>`` is the name of the fixture file "
"you've created. Each time you run :djadmin:`loaddata`, the data will be read"
" from the fixture and re-loaded into the database. Note this means that if "
"you change one of the rows created by a fixture and then run "
":djadmin:`loaddata` again, you'll wipe out any changes you've made."
msgstr ""

# 203c039192a648a3b6e4a1fa4500efcd
#: ../../howto/initial-data.txt:78
msgid "Automatically loading initial data fixtures"
msgstr ""

# 6684be57fe004fa8b80f98ce930dcadd
#: ../../howto/initial-data.txt:80
msgid ""
"If you create a fixture named ``initial_data.[xml/yaml/json]``, that fixture"
" will be loaded every time you run :djadmin:`syncdb`. This is extremely "
"convenient, but be careful: remember that the data will be refreshed *every "
"time* you run :djadmin:`syncdb`. So don't use ``initial_data`` for data "
"you'll want to edit."
msgstr ""

# 4d757f1d57cb4b4cabe0359643691ca6
#: ../../howto/initial-data.txt:86
msgid "Where Django finds fixture files"
msgstr ""

# 8deeaffc1ebf470aa343ebd20829f671
#: ../../howto/initial-data.txt:88
msgid ""
"By default, Django looks in the ``fixtures`` directory inside each app for "
"fixtures. You can set the :setting:`FIXTURE_DIRS` setting to a list of "
"additional directories where Django should look."
msgstr ""

# b90c1049db534ec19022bc033ecc83e6
#: ../../howto/initial-data.txt:92
msgid ""
"When running :djadmin:`manage.py loaddata <loaddata>`, you can also specify "
"an absolute path to a fixture file, which overrides searching the usual "
"directories."
msgstr ""

# d914ff6d953a48048729769342818709
#: ../../howto/initial-data.txt:98
msgid ""
"Fixtures are also used by the :ref:`testing framework <topics-testing-"
"fixtures>` to help set up a consistent test environment."
msgstr ""

# 4de4ec721138449891aa3cd1210cc5ee
#: ../../howto/initial-data.txt:104
msgid "Providing initial SQL data"
msgstr ""

# 264fd1e2bdeb43e4a13342057909acb3
#: ../../howto/initial-data.txt:106
msgid ""
"Django provides a hook for passing the database arbitrary SQL that's "
"executed just after the CREATE TABLE statements when you run "
":djadmin:`syncdb`. You can use this hook to populate default records, or you"
" could also create SQL functions, views, triggers, etc."
msgstr ""

# b4c7a0a26dad4c2b87c9fe3d78e59679
#: ../../howto/initial-data.txt:111
msgid ""
"The hook is simple: Django just looks for a file called "
"``sql/<modelname>.sql``, in your app directory, where ``<modelname>`` is the"
" model's name in lowercase."
msgstr ""

# ab2f6ead0002408c8f718e1580d8b4bc
#: ../../howto/initial-data.txt:114
msgid ""
"So, if you had a ``Person`` model in an app called ``myapp``, you could add "
"arbitrary SQL to the file ``sql/person.sql`` inside your ``myapp`` "
"directory. Here's an example of what the file might contain:"
msgstr ""

# 5ad93f4ccd404f7b8713096ee4814ada
#: ../../howto/initial-data.txt:123
msgid ""
"Each SQL file, if given, is expected to contain valid SQL statements which "
"will insert the desired data (e.g., properly-formatted ``INSERT`` statements"
" separated by semicolons)."
msgstr ""

# f67dd1f568724744af8c6f9946b87820
#: ../../howto/initial-data.txt:127
msgid ""
"The SQL files are read by the :djadmin:`sqlcustom` and :djadmin:`sqlall` "
"commands in :doc:`manage.py </ref/django-admin>`. Refer to the "
":doc:`manage.py documentation </ref/django-admin>` for more information."
msgstr ""

# c032a1881e1a420a8f6e22b747ebee64
#: ../../howto/initial-data.txt:131
msgid ""
"Note that if you have multiple SQL data files, there's no guarantee of the "
"order in which they're executed. The only thing you can assume is that, by "
"the time your custom data files are executed, all the database tables "
"already will have been created."
msgstr ""

# 55fa2d431190450081d8405088071ae6
#: ../../howto/initial-data.txt:138
msgid ""
"This technique *cannot* be used to provide initial data for testing "
"purposes. Django's test framework flushes the contents of the test database "
"after each test; as a result, any data added using the custom SQL hook will "
"be lost."
msgstr ""

# 2f3107a44887468e9bf73fb1c664c25b
#: ../../howto/initial-data.txt:143
msgid ""
"If you require data for a test case, you should add it using either a "
":ref:`test fixture <topics-testing-fixtures>`, or programatically add it "
"during the ``setUp()`` of your test case."
msgstr ""

# 0db573581f9849b8ba52d460bc99420b
#: ../../howto/initial-data.txt:148
msgid "Database-backend-specific SQL data"
msgstr ""

# b7e569d4833448919a8f2f8cb233b6b5
#: ../../howto/initial-data.txt:150
msgid ""
"There's also a hook for backend-specific SQL data. For example, you can have"
" separate initial-data files for PostgreSQL and SQLite. For each app, Django"
" looks for a file called ``<appname>/sql/<modelname>.<backend>.sql``, where "
"``<appname>`` is your app directory, ``<modelname>`` is the model's name in "
"lowercase and ``<backend>`` is the last part of the module name provided for"
" the :setting:`ENGINE <DATABASE-ENGINE>` in your settings file (e.g., if you"
" have defined a database with an :setting:`ENGINE <DATABASE-ENGINE>` value "
"of ``django.db.backends.sqlite3``, Django will look for "
"``<appname>/sql/<modelname>.sqlite3.sql``)."
msgstr ""

# 1d2f04edcc4a440480fdbf5277f327e6
#: ../../howto/initial-data.txt:161
msgid ""
"Backend-specific SQL data is executed before non-backend-specific SQL data. "
"For example, if your app contains the files ``sql/person.sql`` and "
"``sql/person.sqlite3.sql`` and you're installing the app on SQLite, Django "
"will execute the contents of ``sql/person.sqlite3.sql`` first, then "
"``sql/person.sql``."
msgstr ""

# 4408afb540724781a31f5c0e18ba9913
#: ../../howto/jython.txt:3
msgid "Running Django on Jython"
msgstr ""

# d003d5608d754ee689612fb5f6d8d1ba
#: ../../howto/jython.txt:9
msgid ""
"Django 1.5 has dropped support for Python 2.5. Therefore, you have to use a "
"Jython 2.7 alpha release if you want to use Django 1.5 with Jython. Please "
"use Django 1.4 if you want to keep using Django on a stable Jython version."
msgstr ""

# 6e835a37079d42ca92732b5748ebc652
#: ../../howto/jython.txt:14
msgid ""
"Jython_ is an implementation of Python that runs on the Java platform (JVM)."
" Django runs cleanly on Jython version 2.5 or later, which means you can "
"deploy Django on any Java platform."
msgstr ""

# c724ca5e2daf4bdfbf19ed11addc75e9
#: ../../howto/jython.txt:18
msgid ""
"This document will get you up and running with Django on top of Jython."
msgstr ""

# b2e3d8c5ddbb40cd99579cf2dda37e07
#: ../../howto/jython.txt:23
msgid "Installing Jython"
msgstr ""

# f9c81d24a38d4caba4c66ff324e21944
#: ../../howto/jython.txt:25
msgid ""
"Django works with Jython versions 2.5b3 and higher. Download Jython at "
"http://www.jython.org/."
msgstr ""

# 998fb4691f4c4a1ea30540327ef3b2aa
#: ../../howto/jython.txt:29
msgid "Creating a servlet container"
msgstr ""

# ee8c5e4fb1404eb1b6def22dc2b77500
#: ../../howto/jython.txt:31
msgid ""
"If you just want to experiment with Django, skip ahead to the next section; "
"Django includes a lightweight Web server you can use for testing, so you "
"won't need to set up anything else until you're ready to deploy Django in "
"production."
msgstr ""

# 38274d9532c54fff876daa1b78171673
#: ../../howto/jython.txt:35
msgid ""
"If you want to use Django on a production site, use a Java servlet "
"container, such as `Apache Tomcat`_. Full JavaEE applications servers such "
"as `GlassFish`_ or `JBoss`_ are also OK, if you need the extra features they"
" include."
msgstr ""

# f46d5230ecd64bca9025c8a921b6576e
#: ../../howto/jython.txt:44
msgid "Installing Django"
msgstr ""

# 0eb8603f645e426eba5f0d4c525d75c2
#: ../../howto/jython.txt:46
msgid ""
"The next step is to install Django itself. This is exactly the same as "
"installing Django on standard Python, so see :ref:`removing-old-versions-of-"
"django` and :ref:`install-django-code` for instructions."
msgstr ""

# 40d21ec36b4e4ccfa8882338b1701d0a
#: ../../howto/jython.txt:52
msgid "Installing Jython platform support libraries"
msgstr ""

# f328b1222f724b9497b60b8fc4fd61c7
#: ../../howto/jython.txt:54
msgid ""
"The `django-jython`_ project contains database backends and management "
"commands for Django/Jython development. Note that the builtin Django "
"backends won't work on top of Jython."
msgstr ""

# 1f368c6644344e418f0b14df5d0e7855
#: ../../howto/jython.txt:60
msgid ""
"To install it, follow the `installation instructions`_ detailed on the "
"project Web site. Also, read the `database backends`_ documentation there."
msgstr ""

# 877b1886ac6145f2aef908ff8fd9b294
#: ../../howto/jython.txt:67
msgid "Differences with Django on Jython"
msgstr ""

# 7e47ed9131e84d7c8de19a0882a1c12a
#: ../../howto/jython.txt:71
msgid ""
"At this point, Django on Jython should behave nearly identically to Django "
"running on standard Python. However, are a few differences to keep in mind:"
msgstr ""

# 74823ca388964f829c56784df23bc545
#: ../../howto/jython.txt:74
msgid ""
"Remember to use the ``jython`` command instead of ``python``. The "
"documentation uses ``python`` for consistency, but if you're using Jython "
"you'll want to mentally replace ``python`` with ``jython`` every time it "
"occurs."
msgstr ""

# 5ab61897060d41a389f2920ece310d81
#: ../../howto/jython.txt:79
msgid ""
"Similarly, you'll need to use the ``JYTHONPATH`` environment variable "
"instead of ``PYTHONPATH``."
msgstr ""

# 07278dadb652444bb3f05075da3f8eb7
#: ../../howto/legacy-databases.txt:3
msgid "Integrating Django with a legacy database"
msgstr ""

# 7250ef48a32e46989a10bbbcc590c94e
#: ../../howto/legacy-databases.txt:5
msgid ""
"While Django is best suited for developing new applications, it's quite "
"possible to integrate it into legacy databases. Django includes a couple of "
"utilities to automate as much of this process as possible."
msgstr ""

# f272208f94344e5b81254828aea5ef96
#: ../../howto/legacy-databases.txt:9
msgid ""
"This document assumes you know the Django basics, as covered in the "
":doc:`tutorial </intro/tutorial01>`."
msgstr ""

# dec72a8517ba439cb81adfdf6ae66f12
#: ../../howto/legacy-databases.txt:12
msgid ""
"Once you've got Django set up, you'll follow this general process to "
"integrate with an existing database."
msgstr ""

# f19028db0be843d9816b9b74afb2b780
#: ../../howto/legacy-databases.txt:16
msgid "Give Django your database parameters"
msgstr ""

# 1e67fd35ee8742e389dc523fb1b6e92a
#: ../../howto/legacy-databases.txt:18
msgid ""
"You'll need to tell Django what your database connection parameters are, and"
" what the name of the database is. Do that by editing the "
":setting:`DATABASES` setting and assigning values to the following keys for "
"the ``'default'`` connection:"
msgstr ""

# 01c321d8458049ebbf9bbb5e29c12fb9
#: ../../howto/legacy-databases.txt:23
msgid ":setting:`NAME`"
msgstr ""

# eba851f9c8dc4d478abbbf5f78ee3d09
#: ../../howto/legacy-databases.txt:24
msgid ":setting:`ENGINE <DATABASE-ENGINE>`"
msgstr ""

# 9c4878fee83d40c2b997123a8bcc8e04
#: ../../howto/legacy-databases.txt:25
msgid ":setting:`USER`"
msgstr ""

# 3767a934890a4473b2b767a9b0287d21
#: ../../howto/legacy-databases.txt:26
msgid ":setting:`PASSWORD`"
msgstr ""

# 5c0ebc2017964c10a15a33a8e34bc1f6
#: ../../howto/legacy-databases.txt:27
msgid ":setting:`HOST`"
msgstr ""

# 7ee6c9b4ff074d6d9c2b008a7a355090
#: ../../howto/legacy-databases.txt:28
msgid ":setting:`PORT`"
msgstr ""

# 2489df4369384155b09e36fc24c0ff9e
#: ../../howto/legacy-databases.txt:31
msgid "Auto-generate the models"
msgstr ""

# aed9355b89f546ab8d7205c6fb967c87
#: ../../howto/legacy-databases.txt:35
msgid ""
"Django comes with a utility called :djadmin:`inspectdb` that can create "
"models by introspecting an existing database. You can view the output by "
"running this command::"
msgstr ""

# 71d2a74ebee24afa8affd90ffcb20f31
#: ../../howto/legacy-databases.txt:41
msgid "Save this as a file by using standard Unix output redirection::"
msgstr ""

# 29fbc59b74ad458cb33a4f1067cc214c
#: ../../howto/legacy-databases.txt:45
msgid ""
"This feature is meant as a shortcut, not as definitive model generation. See"
" the :djadmin:`documentation of inspectdb <inspectdb>` for more information."
msgstr ""

# f979513dbcc649d6b3fb635f117b5632
#: ../../howto/legacy-databases.txt:48
msgid ""
"Once you've cleaned up your models, name the file ``models.py`` and put it "
"in the Python package that holds your app. Then add the app to your "
":setting:`INSTALLED_APPS` setting."
msgstr ""

# 9f0ebdfd8f64413fa2fb61ce9cea289d
#: ../../howto/legacy-databases.txt:53
msgid "Install the core Django tables"
msgstr ""

# e384c40f3de04440a4552702f4c977c0
#: ../../howto/legacy-databases.txt:55
msgid ""
"Next, run the :djadmin:`syncdb` command to install any extra needed database"
" records such as admin permissions and content types::"
msgstr ""

# f350858d59714d2984bdb5e093088cf5
#: ../../howto/legacy-databases.txt:61
msgid "Test and tweak"
msgstr ""

# 378d831070cf48b1b27a82c4b0638e98
#: ../../howto/legacy-databases.txt:63
msgid ""
"Those are the basic steps -- from here you'll want to tweak the models "
"Django generated until they work the way you'd like. Try accessing your data"
" via the Django database API, and try editing objects via Django's admin "
"site, and edit the models file accordingly."
msgstr ""

# 97332967c9b640b1896f72a9e16b8f3c
#: ../../howto/outputting-csv.txt:3
msgid "Outputting CSV with Django"
msgstr ""

# 6e7bc3dd94ec49abb1dcc621f69c2759
#: ../../howto/outputting-csv.txt:5
msgid ""
"This document explains how to output CSV (Comma Separated Values) "
"dynamically using Django views. To do this, you can either use the Python "
"CSV library or the Django template system."
msgstr ""

# e84ece638f2d4c7fbf986678910d3fa0
#: ../../howto/outputting-csv.txt:10
msgid "Using the Python CSV library"
msgstr ""

# da8b2995542846aeb9c701cd67fc28a5
#: ../../howto/outputting-csv.txt:12
msgid ""
"Python comes with a CSV library, :mod:`csv`. The key to using it with Django"
" is that the :mod:`csv` module's CSV-creation capability acts on file-like "
"objects, and Django's :class:`~django.http.HttpResponse` objects are file-"
"like objects."
msgstr ""

# 930678db7f7a402cb754876ef1f388b5
#: ../../howto/outputting-csv.txt:16
msgid "Here's an example::"
msgstr ""

# 0e451a1bc86a4e3cae9fa1df0d6c9e9b
# 9da2cb07841b48b59ce0e3fa50059043
#: ../../howto/outputting-csv.txt:32 ../../howto/outputting-pdf.txt:69
msgid ""
"The code and comments should be self-explanatory, but a few things deserve a"
" mention:"
msgstr ""

# b6a3a3ec346c4d148e940a0e89954793
#: ../../howto/outputting-csv.txt:35
msgid ""
"The response gets a special MIME type, :mimetype:`text/csv`. This tells "
"browsers that the document is a CSV file, rather than an HTML file. If you "
"leave this off, browsers will probably interpret the output as HTML, which "
"will result in ugly, scary gobbledygook in the browser window."
msgstr ""

# e120384509bc46fea5082317af225923
#: ../../howto/outputting-csv.txt:40
msgid ""
"The response gets an additional ``Content-Disposition`` header, which "
"contains the name of the CSV file. This filename is arbitrary; call it "
"whatever you want. It'll be used by browsers in the \"Save as...\" dialogue,"
" etc."
msgstr ""

# 718e62a666d9445599ea473b6608ea28
#: ../../howto/outputting-csv.txt:45
msgid ""
"Hooking into the CSV-generation API is easy: Just pass ``response`` as the "
"first argument to ``csv.writer``. The ``csv.writer`` function expects a "
"file-like object, and :class:`~django.http.HttpResponse` objects fit the "
"bill."
msgstr ""

# 2d49a61fdc6f461ba6ecc1218d0f0ad9
#: ../../howto/outputting-csv.txt:50
msgid ""
"For each row in your CSV file, call ``writer.writerow``, passing it an "
"iterable object such as a list or tuple."
msgstr ""

# b849d339e2134d6c9d2ad24a7fe7081e
#: ../../howto/outputting-csv.txt:53
msgid ""
"The CSV module takes care of quoting for you, so you don't have to worry "
"about escaping strings with quotes or commas in them. Just pass "
"``writerow()`` your raw strings, and it'll do the right thing."
msgstr ""

# de89fea3d3e04a91ad46c2997828e04a
#: ../../howto/outputting-csv.txt:58
msgid "Handling Unicode"
msgstr ""

# 25d434a2c0dd4e288402d49867d6d1ac
#: ../../howto/outputting-csv.txt:60
msgid ""
"Python's :mod:`csv` module does not support Unicode input. Since Django uses"
" Unicode internally this means strings read from sources such as "
":class:`~django.http.HttpRequest` are potentially problematic. There are a "
"few options for handling this:"
msgstr ""

# 80474d74483349daae0130c903b91860
#: ../../howto/outputting-csv.txt:65
msgid "Manually encode all Unicode objects to a compatible encoding."
msgstr ""

# d041b5043ad241f7ae357dde005bb49c
#: ../../howto/outputting-csv.txt:67
msgid ""
"Use the ``UnicodeWriter`` class provided in the `csv module's examples "
"section`_."
msgstr ""

# 96692d77fc504b09a6583d08f625e210
#: ../../howto/outputting-csv.txt:70
msgid ""
"Use the `python-unicodecsv module`_, which aims to be a drop-in replacement "
"for :mod:`csv` that gracefully handles Unicode."
msgstr ""

# e354ec1e5f7045ae8cf7fd59782ecd51
#: ../../howto/outputting-csv.txt:73
msgid ""
"For more information, see the Python documentation of the :mod:`csv` module."
msgstr ""

# 4b6b1605330948aa9f9bb5dcef4d4e1d
#: ../../howto/outputting-csv.txt:79
msgid "Using the template system"
msgstr ""

# 2f071da9500b4cbebee52c482b9af60a
#: ../../howto/outputting-csv.txt:81
msgid ""
"Alternatively, you can use the :doc:`Django template system "
"</topics/templates>` to generate CSV. This is lower-level than using the "
"convenient Python :mod:`csv` module, but the solution is presented here for "
"completeness."
msgstr ""

# c2c37aa6786247f8b315a16624d4be9e
#: ../../howto/outputting-csv.txt:85
msgid ""
"The idea here is to pass a list of items to your template, and have the "
"template output the commas in a :ttag:`for` loop."
msgstr ""

# 6dc5b6cc35bd403cbc0f3c733bbdee14
#: ../../howto/outputting-csv.txt:88
msgid "Here's an example, which generates the same CSV file as above::"
msgstr ""

# cd5a39e6882c487eae1bc21953c4235b
#: ../../howto/outputting-csv.txt:112
msgid ""
"The only difference between this example and the previous example is that "
"this one uses template loading instead of the CSV module. The rest of the "
"code -- such as the ``content_type='text/csv'`` -- is the same."
msgstr ""

# cc3ef2b5b08944dbaf950a72d4d6cbc1
#: ../../howto/outputting-csv.txt:116
msgid ""
"Then, create the template ``my_template_name.txt``, with this template code:"
msgstr ""

# cd2aaa5e1faa4e13a8744d6286054f5c
#: ../../howto/outputting-csv.txt:123
msgid ""
"This template is quite basic. It just iterates over the given data and "
"displays a line of CSV for each row. It uses the :tfilter:`addslashes` "
"template filter to ensure there aren't any problems with quotes."
msgstr ""

# 34f81f2fb1d443d68542d46ff085ba4f
#: ../../howto/outputting-csv.txt:128
msgid "Other text-based formats"
msgstr ""

# f26a3b0c14ac4115af78a972f0bf2651
#: ../../howto/outputting-csv.txt:130
msgid ""
"Notice that there isn't very much specific to CSV here -- just the specific "
"output format. You can use either of these techniques to output any text-"
"based format you can dream of. You can also use a similar technique to "
"generate arbitrary binary data; see :doc:`/howto/outputting-pdf` for an "
"example."
msgstr ""

# ea7bb92286e545fcb52f663914278bdb
#: ../../howto/outputting-pdf.txt:3
msgid "Outputting PDFs with Django"
msgstr ""

# f3a19a7ddfc24cf8a41a37f348096023
#: ../../howto/outputting-pdf.txt:5
msgid ""
"This document explains how to output PDF files dynamically using Django "
"views. This is made possible by the excellent, open-source ReportLab_ Python"
" PDF library."
msgstr ""

# d0fab41cf1294d29ac333d98cf9d4c15
#: ../../howto/outputting-pdf.txt:9
msgid ""
"The advantage of generating PDF files dynamically is that you can create "
"customized PDFs for different purposes -- say, for different users or "
"different pieces of content."
msgstr ""

# fbb43cc3cdb34f5280386a433ab8dfc6
#: ../../howto/outputting-pdf.txt:13
msgid ""
"For example, Django was used at kusports.com_ to generate customized, "
"printer-friendly NCAA tournament brackets, as PDF files, for people "
"participating in a March Madness contest."
msgstr ""

# 363c0e2b290b47ccaac6e5b934221f41
#: ../../howto/outputting-pdf.txt:21
msgid "Install ReportLab"
msgstr ""

# 7e95a9510cad4cd89e09531d5695ecca
#: ../../howto/outputting-pdf.txt:23
msgid ""
"Download and install the ReportLab library from "
"http://www.reportlab.com/software/opensource/rl-toolkit/download/. The `user"
" guide`_ (not coincidentally, a PDF file) explains how to install it. "
"Alternatively, you can also install it with ``pip``:"
msgstr ""

# 366d5f70930b48079753f4733bf202ba
#: ../../howto/outputting-pdf.txt:32
msgid ""
"Test your installation by importing it in the Python interactive "
"interpreter::"
msgstr ""

# 1d10dbe0e3b74c859441b63ce77cb275
#: ../../howto/outputting-pdf.txt:36
msgid "If that command doesn't raise any errors, the installation worked."
msgstr ""

# 6dce8439a9304944a2f134b2ac3bee2f
#: ../../howto/outputting-pdf.txt:41
msgid "Write your view"
msgstr ""

# 7e50944adc884fa2ac42fa4451c314e9
#: ../../howto/outputting-pdf.txt:43
msgid ""
"The key to generating PDFs dynamically with Django is that the ReportLab API"
" acts on file-like objects, and Django's :class:`~django.http.HttpResponse` "
"objects are file-like objects."
msgstr ""

# c4bfe3d77a814afaa18b83330037673b
#: ../../howto/outputting-pdf.txt:47
msgid "Here's a \"Hello World\" example::"
msgstr ""

# 5582ce58eadb4bcc803f8afad4fafe74
#: ../../howto/outputting-pdf.txt:72
msgid ""
"The response gets a special MIME type, :mimetype:`application/pdf`. This "
"tells browsers that the document is a PDF file, rather than an HTML file. If"
" you leave this off, browsers will probably interpret the output as HTML, "
"which would result in ugly, scary gobbledygook in the browser window."
msgstr ""

# 9037ae3348d9497483da3d0115ce6f90
#: ../../howto/outputting-pdf.txt:78
msgid ""
"The response gets an additional ``Content-Disposition`` header, which "
"contains the name of the PDF file. This filename is arbitrary: Call it "
"whatever you want. It'll be used by browsers in the \"Save as...\" dialogue,"
" etc."
msgstr ""

# 306a795b5cd54ab7a5c921187b386fac
#: ../../howto/outputting-pdf.txt:83
msgid ""
"The ``Content-Disposition`` header starts with ``'attachment; '`` in this "
"example. This forces Web browsers to pop-up a dialog box "
"prompting/confirming how to handle the document even if a default is set on "
"the machine. If you leave off ``'attachment;'``, browsers will handle the "
"PDF using whatever program/plugin they've been configured to use for PDFs. "
"Here's what that code would look like::"
msgstr ""

# c98191d7cc524ff4b6934d9e4d0fa5d7
#: ../../howto/outputting-pdf.txt:92
msgid ""
"Hooking into the ReportLab API is easy: Just pass ``response`` as the first "
"argument to ``canvas.Canvas``. The ``Canvas`` class expects a file-like "
"object, and :class:`~django.http.HttpResponse` objects fit the bill."
msgstr ""

# c6458626c5bd4389879a1bbba6407ea6
#: ../../howto/outputting-pdf.txt:97
msgid ""
"Note that all subsequent PDF-generation methods are called on the PDF object"
" (in this case, ``p``) -- not on ``response``."
msgstr ""

# 3addf501d89c4f1d8f36559945d8bd22
#: ../../howto/outputting-pdf.txt:100
msgid ""
"Finally, it's important to call ``showPage()`` and ``save()`` on the PDF "
"file."
msgstr ""

# 1454a2decef44ba9be68dcae54f2d07c
#: ../../howto/outputting-pdf.txt:105
msgid ""
"ReportLab is not thread-safe. Some of our users have reported odd issues "
"with building PDF-generating Django views that are accessed by many people "
"at the same time."
msgstr ""

# 5b75c4d5251940b7b74a36860aa6e597
#: ../../howto/outputting-pdf.txt:110
msgid "Complex PDFs"
msgstr ""

# 62d74dbc8d694ec89012aab9e9468cef
#: ../../howto/outputting-pdf.txt:112
msgid ""
"If you're creating a complex PDF document with ReportLab, consider using the"
" :mod:`io` library as a temporary holding place for your PDF file. This "
"library provides a file-like object interface that is particularly "
"efficient. Here's the above \"Hello World\" example rewritten to use "
":mod:`io`::"
msgstr ""

# ee9cf1cac82e40f38523a11e02b5f577
#: ../../howto/outputting-pdf.txt:146
msgid "Further resources"
msgstr ""

# 510ba7ec6fc84938b9341161d30ed431
#: ../../howto/outputting-pdf.txt:148
msgid ""
"PDFlib_ is another PDF-generation library that has Python bindings. To use "
"it with Django, just use the same concepts explained in this article."
msgstr ""

# 86a08b8318bc48b2ad56eed2b97df004
#: ../../howto/outputting-pdf.txt:150
msgid ""
"`Pisa XHTML2PDF`_ is yet another PDF-generation library. Pisa ships with an "
"example of how to integrate Pisa with Django."
msgstr ""

# 95355575a5a440c9b6ef7fc5da4665f9
#: ../../howto/outputting-pdf.txt:152
msgid ""
"HTMLdoc_ is a command-line script that can convert HTML to PDF. It doesn't "
"have a Python interface, but you can escape out to the shell using "
"``system`` or ``popen`` and retrieve the output in Python."
msgstr ""

# ce17bd5f0dad411d9e2599f427bf886a
#: ../../howto/outputting-pdf.txt:161
msgid "Other formats"
msgstr ""

# a3bc9a61c8ca4264983b4e8c626b4c74
#: ../../howto/outputting-pdf.txt:163
msgid ""
"Notice that there isn't a lot in these examples that's PDF-specific -- just "
"the bits using ``reportlab``. You can use a similar technique to generate "
"any arbitrary format that you can find a Python library for. Also see "
":doc:`/howto/outputting-csv` for another example and some techniques you can"
" use when generated text-based formats."
msgstr ""

# c9c34b24fa734d47b2c98ab5de27c943
#: ../../howto/static-files/deployment.txt:3
msgid "Deploying static files"
msgstr ""

# 3d034d45cb3e4d9b82b567a591971627
#: ../../howto/static-files/deployment.txt:7
msgid ""
"For an introduction to the use of :mod:`django.contrib.staticfiles`, see "
":doc:`/howto/static-files/index`."
msgstr ""

# d9b7c3091a8b4e82a31845543e1959b2
#: ../../howto/static-files/deployment.txt:13
msgid "Serving static files in production"
msgstr ""

# 3cd0e27be0da43d7bd117060a95d32a8
#: ../../howto/static-files/deployment.txt:15
msgid ""
"The basic outline of putting static files into production is simple: run the"
" :djadmin:`collectstatic` command when static files change, then arrange for"
" the collected static files directory (:setting:`STATIC_ROOT`) to be moved "
"to the static file server and served. Depending on "
":setting:`STATICFILES_STORAGE`, files may need to be moved to a new location"
" manually or the :func:`post_process "
"<django.contrib.staticfiles.storage.StaticFilesStorage.post_process>` method"
" of the ``Storage`` class might take care of that."
msgstr ""

# ba3d20f16c4943129f96437f578d0443
#: ../../howto/static-files/deployment.txt:23
msgid ""
"Of course, as with all deployment tasks, the devil's in the details. Every "
"production setup will be a bit different, so you'll need to adapt the basic "
"outline to fit your needs. Below are a few common patterns that might help."
msgstr ""

# a768b631e0244995b8fc07c8ce87a3c7
#: ../../howto/static-files/deployment.txt:28
msgid "Serving the site and your static files from the same server"
msgstr ""

# 5e50ca32807f4a92a44e8fe4eb86f6fb
#: ../../howto/static-files/deployment.txt:30
msgid ""
"If you want to serve your static files from the same server that's already "
"serving your site, the process may look something like:"
msgstr ""

# 8a6b8cfb28344e4385eafa9c5bb4a2ee
#: ../../howto/static-files/deployment.txt:33
msgid "Push your code up to the deployment server."
msgstr ""

# 433a047be2b6498481b0fee7102413ce
#: ../../howto/static-files/deployment.txt:34
msgid ""
"On the server, run :djadmin:`collectstatic` to copy all the static files "
"into :setting:`STATIC_ROOT`."
msgstr ""

# 5bdd698a60e44920b7326e4b4068ee84
#: ../../howto/static-files/deployment.txt:36
msgid ""
"Configure your web server to serve the files in :setting:`STATIC_ROOT` under"
" the URL :setting:`STATIC_URL`. For example, here's :ref:`how to do this "
"with Apache and mod_wsgi <serving-files>`."
msgstr ""

# 1fc0deeefc484cd1a534e8ce5d9c271f
#: ../../howto/static-files/deployment.txt:40
msgid ""
"You'll probably want to automate this process, especially if you've got "
"multiple web servers. There's any number of ways to do this automation, but "
"one option that many Django developers enjoy is `Fabric "
"<http://fabfile.org/>`_."
msgstr ""

# a312fae8c0c8430eb5ab5f7f6d997401
#: ../../howto/static-files/deployment.txt:45
msgid ""
"Below, and in the following sections, we'll show off a few example fabfiles "
"(i.e. Fabric scripts) that automate these file deployment options. The "
"syntax of a fabfile is fairly straightforward but won't be covered here; "
"consult `Fabric's documentation <http://docs.fabfile.org/>`_, for a complete"
" explanation of the syntax."
msgstr ""

# 18985d904fdd4e81ba54f2b4472471cb
#: ../../howto/static-files/deployment.txt:51
msgid ""
"So, a fabfile to deploy static files to a couple of web servers might look "
"something like::"
msgstr ""

# fd0dbf874bfe459b9fd71338993214ac
#: ../../howto/static-files/deployment.txt:67
msgid "Serving static files from a dedicated server"
msgstr ""

# e0c7caf0879544ceb135494d1cd6b38a
#: ../../howto/static-files/deployment.txt:69
msgid ""
"Most larger Django sites use a separate Web server -- i.e., one that's not "
"also running Django -- for serving static files. This server often runs a "
"different type of web server -- faster but less full-featured. Some common "
"choices are:"
msgstr ""

# e4ff5ad64a38447c96976b7055c85a58
#: ../../howto/static-files/deployment.txt:85
msgid ""
"Configuring these servers is out of scope of this document; check each "
"server's respective documentation for instructions."
msgstr ""

# eda5ba7ec195437386c91bbf27c4f819
#: ../../howto/static-files/deployment.txt:88
msgid ""
"Since your static file server won't be running Django, you'll need to modify"
" the deployment strategy to look something like:"
msgstr ""

# 991b686f9e674746a19e8709d84c81e1
#: ../../howto/static-files/deployment.txt:91
msgid "When your static files change, run :djadmin:`collectstatic` locally."
msgstr ""

# 76120eacd8404234b0e751e161efa794
#: ../../howto/static-files/deployment.txt:93
msgid ""
"Push your local :setting:`STATIC_ROOT` up to the static file server into the"
" directory that's being served. `rsync <https://rsync.samba.org/>`_ is a "
"common choice for this step since it only needs to transfer the bits of "
"static files that have changed."
msgstr ""

# df3392d682704dd6b4c7f1d0bebf214a
#: ../../howto/static-files/deployment.txt:98
msgid "Here's how this might look in a fabfile::"
msgstr ""

# 400f90c14a4b49dd891aa5dadaa3e3a3
#: ../../howto/static-files/deployment.txt:121
msgid "Serving static files from a cloud service or CDN"
msgstr ""

# 83666781107e4343b97b2c51429bda31
#: ../../howto/static-files/deployment.txt:123
msgid ""
"Another common tactic is to serve static files from a cloud storage provider"
" like Amazon's S3 and/or a CDN (content delivery network). This lets you "
"ignore the problems of serving static files and can often make for faster-"
"loading webpages (especially when using a CDN)."
msgstr ""

# f5c3a62d0cab4acb9969a1229adc3831
#: ../../howto/static-files/deployment.txt:128
msgid ""
"When using these services, the basic workflow would look a bit like the "
"above, except that instead of using ``rsync`` to transfer your static files "
"to the server you'd need to transfer the static files to the storage "
"provider or CDN."
msgstr ""

# deaab71148b1459d996213d98b071c46
#: ../../howto/static-files/deployment.txt:132
msgid ""
"There's any number of ways you might do this, but if the provider has an API"
" a :doc:`custom file storage backend </howto/custom-file-storage>` will make"
" the process incredibly simple. If you've written or are using a 3rd party "
"custom storage backend, you can tell :djadmin:`collectstatic` to use it by "
"setting :setting:`STATICFILES_STORAGE` to the storage engine."
msgstr ""

# ec013677907340358e568d6b0f750451
#: ../../howto/static-files/deployment.txt:138
msgid ""
"For example, if you've written an S3 storage backend in "
"``myproject.storage.S3Storage`` you could use it with::"
msgstr ""

# 975d20ec1e0641cb982efc42dcfb214b
#: ../../howto/static-files/deployment.txt:143
msgid ""
"Once that's done, all you have to do is run :djadmin:`collectstatic` and "
"your static files would be pushed through your storage package up to S3. If "
"you later needed to switch to a different storage provider, it could be as "
"simple as changing your :setting:`STATICFILES_STORAGE` setting."
msgstr ""

# 81c7fb2877a64bddad8b9e03b805cfd9
#: ../../howto/static-files/deployment.txt:148
msgid ""
"For details on how you'd write one of these backends, see :doc:`/howto"
"/custom-file-storage`. There are 3rd party apps available that provide "
"storage backends for many common file storage APIs. A good starting point is"
" the `overview at djangopackages.com <https://www.djangopackages.com/grids/g"
"/storage-backends/>`_."
msgstr ""

# 3b8651552e514dcaa99d30a5bcb469db
# 6a0ce5055ba544c8a0a89f27c3ce3bd2
#: ../../howto/static-files/deployment.txt:155
#: ../../howto/static-files/index.txt:114
msgid "Learn more"
msgstr ""

# b960de53a28b4d69b73c23080ec8b3d8
#: ../../howto/static-files/deployment.txt:157
msgid ""
"For complete details on all the settings, commands, template tags, and other"
" pieces included in :mod:`django.contrib.staticfiles`, see :doc:`the "
"staticfiles reference </ref/contrib/staticfiles>`."
msgstr ""

# 07f9dd9e6de24b99bd1e62156ca658f6
#: ../../howto/static-files/index.txt:3
msgid "Managing static files (CSS, images)"
msgstr ""

# 88920314979b4c4c961f8200f7ece67f
#: ../../howto/static-files/index.txt:5
msgid ""
"Websites generally need to serve additional files such as images, "
"JavaScript, or CSS. In Django, we refer to these files as \"static files\"."
"  Django provides :mod:`django.contrib.staticfiles` to help you manage them."
msgstr ""

# 20b73526da7f4d148f36412982d05e9d
#: ../../howto/static-files/index.txt:9
msgid "This page describes how you can serve these static files."
msgstr ""

# de7603802d47443eaccaa2da42e80cd9
#: ../../howto/static-files/index.txt:12
msgid "Configuring static files"
msgstr ""

# d89d7f829a3240f79fb385d00c5656d2
#: ../../howto/static-files/index.txt:14
msgid ""
"Make sure that ``django.contrib.staticfiles`` is included in your "
":setting:`INSTALLED_APPS`."
msgstr ""

# 0da15f5257ee4453b2036aedfb038417
#: ../../howto/static-files/index.txt:17
msgid "In your settings file, define :setting:`STATIC_URL`, for example::"
msgstr ""

# 6ad7f0558b6045ef9a70a1422619a94d
#: ../../howto/static-files/index.txt:21
msgid ""
"In your templates, either hardcode the url like "
"``/static/my_app/myexample.jpg`` or, preferably, use the :ttag:`static"
"<staticfiles-static>` template tag to build the URL for the given relative "
"path by using the configured :setting:`STATICFILES_STORAGE` storage (this "
"makes it much easier when you want to switch to a content delivery network "
"(CDN) for serving static files)."
msgstr ""

# 5d5fd3c9ba004a2591577ee15b50482c
#: ../../howto/static-files/index.txt:35
msgid ""
"Store your static files in a folder called ``static`` in your app. For "
"example ``my_app/static/my_app/myimage.jpg``."
msgstr ""

# 010a8276798e491f91b958ee489cb049
#: ../../howto/static-files/index.txt:38
msgid ""
"Now, if you use ``./manage.py runserver``, all static files should be served"
" automatically at the :setting:`STATIC_URL` and be shown correctly."
msgstr ""

# 81f8072c2ef34ea785e0a0868195573f
#: ../../howto/static-files/index.txt:41
msgid ""
"Your project will probably also have static assets that aren't tied to a "
"particular app. In addition to using a ``static/`` directory inside your "
"apps, you can define a list of directories (:setting:`STATICFILES_DIRS`) in "
"your settings file where Django will also look for static files. For "
"example::"
msgstr ""

# c3e7d914cbd74d4a91c55642cae7ade5
#: ../../howto/static-files/index.txt:51
msgid ""
"See the documentation for the :setting:`STATICFILES_FINDERS` setting for "
"details on how ``staticfiles`` finds your files."
msgstr ""

# 98413b85789748c48684282f4344d84f
#: ../../howto/static-files/index.txt:56
msgid ""
"Now we *might* be able to get away with putting our static files directly in"
" ``my_app/static/`` (rather than creating another ``my_app`` subdirectory), "
"but it would actually be a bad idea. Django will use the last static file it"
" finds whose name matches, and if you had a static file with the same name "
"in a *different* application, Django would be unable to distinguish between "
"them. We need to be able to point Django at the right one, and the easiest "
"way to ensure this is by *namespacing* them. That is, by putting those "
"static files inside *another* directory named for the application itself."
msgstr ""

# 9aefc0c136554e6383320fea1571f2e1
#: ../../howto/static-files/index.txt:68
msgid "Serving files uploaded by a user"
msgstr ""

# e998c149a6184ccf9b4bf95ad0bc3ae0
#: ../../howto/static-files/index.txt:70
msgid ""
"During development, you can serve user-uploaded media files from "
":setting:`MEDIA_ROOT` using the "
":func:`django.contrib.staticfiles.views.serve` view. This is not suitable "
"for production use! For some common deployment strategies, see :doc:`/howto"
"/static-files/deployment`."
msgstr ""

# 29cff5bc4d1541f3bc2a043c4bf56dad
#: ../../howto/static-files/index.txt:75
msgid ""
"For example, if your :setting:`MEDIA_URL` is defined as '/media/', you can "
"do this by adding the following snippet to your urls.py::"
msgstr ""

# dd48024fe5714923b274c8fd38b11e94
#: ../../howto/static-files/index.txt:87
msgid ""
"This helper function works only in debug mode and only if the given prefix "
"is local (e.g. ``/static/``) and not a URL (e.g. "
"``http://static.example.com/``)."
msgstr ""

# 567f5db818d946c19ba2b528c424b7c1
#: ../../howto/static-files/index.txt:92
msgid "Deployment"
msgstr ""

# f9d0594cc0184a0d9cece8a70cdd92fb
#: ../../howto/static-files/index.txt:94
msgid ""
":mod:`django.contrib.staticfiles` provides a convenience management command "
"for gathering static files in a single directory so you can serve them "
"easily."
msgstr ""

# 69622331aef7415b91cf57c579042738
#: ../../howto/static-files/index.txt:97
msgid ""
"Set the :setting:`STATIC_ROOT` setting to the directory from which you'd "
"like to serve these files, for example::"
msgstr ""

# 942fbb1583f74e0689547d6bfd6c3646
#: ../../howto/static-files/index.txt:102
msgid "Run the :djadmin:`collectstatic` management command::"
msgstr ""

# f12d50ded92f45df9150c1ec538ebfb2
#: ../../howto/static-files/index.txt:106
msgid ""
"This will copy all files from your static folders into the "
":setting:`STATIC_ROOT` directory."
msgstr ""

# 856abcbdc4054e78bb630060fb26baf2
#: ../../howto/static-files/index.txt:109
msgid ""
"Use a webserver of your choice to serve the files. :doc:`/howto/static-"
"files/deployment` covers some common deployment strategies for static files."
msgstr ""

# 61720a0610fc45cdaa001a6bd8869b58
#: ../../howto/static-files/index.txt:116
msgid ""
"This document has covered the basics and some common usage patterns. For "
"complete details on all the settings, commands, template tags, and other "
"pieces included in :mod:`django.contrib.staticfiles`, see :doc:`the "
"staticfiles reference </ref/contrib/staticfiles>`."
msgstr ""
