# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Django 1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-04-02 21:26\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../ref/class-based-views/base.txt:3
# 97cf9aa9fd034a9aa3d545a2f55a105d
msgid "Base views"
msgstr ""

#: ../../ref/class-based-views/base.txt:5
# b1f6c7ff7a9e4fe89f16cde4b426eea9
msgid "The following three classes provide much of the functionality needed to create Django views. You may think of them as *parent* views, which can be used by themselves or inherited from. They may not provide all the capabilities required for projects, in which case there are Mixins and Generic class-based views."
msgstr ""

#: ../../ref/class-based-views/base.txt:11
# 846cc02047604501bee3db6b436ab1fc
msgid "Many of Django's built-in class-based views inherit from other class-based views or various mixins. Because this inheritence chain is very important, the ancestor classes are  documented under the section title of **Ancestors (MRO)**. MRO is an acronym for Method Resolution Order."
msgstr ""

#: ../../ref/class-based-views/base.txt:17
#: ../../ref/class-based-views/flattened-index.txt:15
# 74147e4abf364fa8aa3f68ef9776e7fd
# 0367026d5f3c486988f518e6fa577667
msgid "View"
msgstr ""

#: ../../ref/class-based-views/base.txt:21
# 55107aeba2fd438984992668b6fc9eca
msgid "The master class-based base view. All other class-based views inherit from this base class."
msgstr ""

#: ../../ref/class-based-views/base.txt:24
#: ../../ref/class-based-views/base.txt:120
#: ../../ref/class-based-views/base.txt:178
#: ../../ref/class-based-views/generic-display.txt:26
#: ../../ref/class-based-views/generic-display.txt:87
# 296ccbd5be344730bf2f96e9b3bbcaca
# cbce78291e194396b7778a88b5d0bcf7
# c87937ffa586442c996d948a7017349e
# b3abe57929464afca399c656d07dbee7
# f2e29da233fb4134a63c5bfbb0847890
msgid "**Method Flowchart**"
msgstr ""

#: ../../ref/class-based-views/base.txt:26
# 0782c36e62424ec4b0ffd000c5fc39d0
msgid ":meth:`dispatch()`"
msgstr ""

#: ../../ref/class-based-views/base.txt:27
# d7595b1181084cc9bbd5380f18ffb879
msgid ":meth:`http_method_not_allowed()`"
msgstr ""

#: ../../ref/class-based-views/base.txt:28
# 0de45e1e65ca49efadf20452171b2407
msgid ":meth:`options()`"
msgstr ""

#: ../../ref/class-based-views/base.txt:30
#: ../../ref/class-based-views/base.txt:126
#: ../../ref/class-based-views/base.txt:184
#: ../../ref/class-based-views/generic-date-based.txt:67
#: ../../ref/class-based-views/generic-date-based.txt:165
#: ../../ref/class-based-views/generic-date-based.txt:261
#: ../../ref/class-based-views/generic-date-based.txt:355
#: ../../ref/class-based-views/generic-date-based.txt:471
#: ../../ref/class-based-views/generic-date-based.txt:546
#: ../../ref/class-based-views/generic-display.txt:39
#: ../../ref/class-based-views/generic-display.txt:99
#: ../../ref/class-based-views/generic-editing.txt:58
#: ../../ref/class-based-views/generic-editing.txt:106
#: ../../ref/class-based-views/generic-editing.txt:148
#: ../../ref/class-based-views/generic-editing.txt:190
# a77be00aa2c24420bcbff2d332fb3785
# 06f9827c066f445ba6ba888a88a29a76
# 3c67f1eb147b4ad4bc09a66d1bc10371
# efe25a2e30484015a676c975ddb9ed95
# a8133029177341a88820bb87af81735c
# 29906bbc4a7a45939b390fb0fb5b8ff1
# aba5ed91248c43088c709ba33a61f493
# 1631c959f00f4670af79b971dc9a74b0
# 1a9860b8f7304a08bdec39bbed86f15b
# e1011b99169543f7938d0355f1b455ab
# 21041a3b3a7b438caccfd9222f4fa33c
# bccb2c2dc6784fa7a784c026e51ce97f
# a3a1555fd2144f4d84acc7da6d6dfaab
# a0fc78a4a90242ef89b318a10af33de3
# 31e1bce77d2d460d9e8e8efd3143ea51
msgid "**Example views.py**::"
msgstr ""

#: ../../ref/class-based-views/base.txt:40
#: ../../ref/class-based-views/base.txt:141
#: ../../ref/class-based-views/base.txt:201
#: ../../ref/class-based-views/generic-date-based.txt:177
#: ../../ref/class-based-views/generic-date-based.txt:273
#: ../../ref/class-based-views/generic-date-based.txt:368
#: ../../ref/class-based-views/generic-date-based.txt:483
#: ../../ref/class-based-views/generic-date-based.txt:558
#: ../../ref/class-based-views/generic-date-based.txt:609
#: ../../ref/class-based-views/generic-display.txt:55
#: ../../ref/class-based-views/generic-display.txt:115
# 19927b0ac0fc4f7ebb6ec25ddeebd3b3
# 082bf9a21228468e848d6d73e8e15ddb
# 851d8edf13a84b3391af22b60f847d6c
# 692545c7e7c14fcd9d8df3721bcb9264
# 6c89f80103794a7da25421f0dd55906d
# 7ed027a5d7e845c796ada3d3fe819cf1
# 9bf6318bbdc74624ad718542c42794cd
# 1c16964414de4b34ae97ce7bec829db5
# b9a61144e6c840a0af9666a14cba7dc6
# d1b274cdd3864f4182433d7d9f7a992a
# f0331f58b02840a8938f1a6e0e575d50
msgid "**Example urls.py**::"
msgstr ""

#: ../../ref/class-based-views/base.txt:50
#: ../../ref/class-based-views/base.txt:214
#: ../../ref/class-based-views/generic-editing.txt:96
#: ../../ref/class-based-views/generic-editing.txt:138
#: ../../ref/class-based-views/generic-editing.txt:179
#: ../../ref/class-based-views/mixins-simple.txt:46
# b7af055022114aebb7fe9d934452cb29
# efa7918d81324002b99e8aa9b14fa2d1
# c9870adde83d4d2bae629970d9103417
# 5c761a4d790a45af98046848513e851b
# 52c56c40a49b415ab56a015fc17ff734
# aa4300962e6b426389a8d9eeccab5f49
msgid "**Attributes**"
msgstr ""

#: ../../ref/class-based-views/base.txt:54
# ddee7104d1c84e269871900b0f49edc6
msgid "The list of HTTP method names that this view will accept."
msgstr ""

#: ../../ref/class-based-views/base.txt:56
#: ../../ref/contrib/messages.txt:359
#: ../../ref/contrib/staticfiles.txt:98
#: ../../ref/settings.txt:163
#: ../../ref/settings.txt:707
#: ../../ref/settings.txt:748
#: ../../ref/settings.txt:1039
#: ../../ref/settings.txt:1440
#: ../../ref/settings.txt:1456
#: ../../ref/settings.txt:1515
#: ../../ref/settings.txt:1955
#: ../../ref/settings.txt:2009
#: ../../ref/settings.txt:2076
# 3522875389914c85be2e094649b154f1
# b1ff379913b742c39f389bba267fe16b
# fd98a11f18fc4ff6868656892a9345e6
# e4f362efdd574bfd85204885f2380835
# 7bb1f6c69b5c453986024e20b33e763d
# c5170f8878fa4529a8c9ae8ca8be2256
# 44de099a957e449daa2a935c23919fbb
# e0912a42128e4e458aadbeb81fcd8bce
# 170899d91a054f0ebfa4ade46d3ca2f7
# 3d11e38261d748779cdcd1ec6f7931fe
# 5c8772756d13413f9d95f2dc2a96514a
# 0bcf84347d4f46ac98e6bbf89c014e67
# e3a98e506db146de90fb464e4a6c58d5
msgid "Default::"
msgstr ""

#: ../../ref/class-based-views/base.txt:60
#: ../../ref/class-based-views/base.txt:235
#: ../../ref/class-based-views/flattened-index.txt:22
#: ../../ref/class-based-views/flattened-index.txt:40
#: ../../ref/class-based-views/flattened-index.txt:61
#: ../../ref/class-based-views/flattened-index.txt:96
#: ../../ref/class-based-views/flattened-index.txt:128
#: ../../ref/class-based-views/flattened-index.txt:157
#: ../../ref/class-based-views/flattened-index.txt:193
#: ../../ref/class-based-views/flattened-index.txt:232
#: ../../ref/class-based-views/flattened-index.txt:269
#: ../../ref/class-based-views/flattened-index.txt:305
#: ../../ref/class-based-views/flattened-index.txt:343
#: ../../ref/class-based-views/flattened-index.txt:382
#: ../../ref/class-based-views/flattened-index.txt:423
#: ../../ref/class-based-views/flattened-index.txt:464
#: ../../ref/class-based-views/flattened-index.txt:509
#: ../../ref/class-based-views/flattened-index.txt:555
#: ../../ref/class-based-views/generic-display.txt:139
#: ../../ref/class-based-views/mixins-simple.txt:12
#: ../../ref/class-based-views/mixins-simple.txt:76
# ea97d77622f14db7b652841d72d77ccf
# 8b5091817f524ba99892c96a5ce3d394
# cb07769ce3a74fa785669f5cee23732a
# 169df24cbe7243ecb2a6d55b7331160d
# 1641d5aa309c4ba5999a620c0566622f
# a3ab6480956a49438bc7612212d38ea7
# 22156ba5fef943829a5f4b079b65aae7
# 4a83a1405d2a418784727c83c09a782e
# 54dd31a9706b452ab6691a45609104e5
# 1e3bccf17ada44839cf777f1fcaba600
# d497afdc04374ff8831afc400f5df85a
# d1feee2a0e1740d791ffcd99e202f746
# bbe89c137fb5457abdaec412005e3134
# fdbbb75657884f4fb8e740fcc12231f2
# 6fbd18d37cb444b9ace03af17022d3f6
# 789de546469948ba8dd02a3d98be5c5a
# 389a3d80995a48b3a6d1a87ce9ffd61c
# 77d80ec518e14f3db7400bd03cfa2ac7
# 30ea69dbd06f408d82a22b51eb8099cd
# 814edcbad63d43f7aa621b3ddd12bbd6
# 18c62e4169154c74a391f2322b023cd1
msgid "**Methods**"
msgstr ""

#: ../../ref/class-based-views/base.txt:64
# c3394a1e5b0149c1939fc8c8dac53100
msgid "Returns a callable view that takes a request and returns a response::"
msgstr ""

#: ../../ref/class-based-views/base.txt:70
# 450c36bb7de24b5e874a58391152a455
msgid "The ``view`` part of the view -- the method that accepts a ``request`` argument plus arguments, and returns a HTTP response."
msgstr ""

#: ../../ref/class-based-views/base.txt:73
# 56aff2fc04014022812ab5ba1792f7c4
msgid "The default implementation will inspect the HTTP method and attempt to delegate to a method that matches the HTTP method; a ``GET`` will be delegated to ``get()``, a ``POST`` to ``post()``, and so on."
msgstr ""

#: ../../ref/class-based-views/base.txt:77
# 3108ddf9ca25474b9ccc678e2dfee1f3
msgid "By default, a ``HEAD`` request will be delegated to ``get()``. If you need to handle ``HEAD`` requests in a different way than ``GET``, you can override the ``head()`` method. See :ref:`supporting-other-http-methods` for an example."
msgstr ""

#: ../../ref/class-based-views/base.txt:82
# 649a5d4676124791aa72317d0a74bff1
msgid "The default implementation also sets ``request``, ``args`` and ``kwargs`` as instance variables, so any method on the view can know the full details of the request that was made to invoke the view."
msgstr ""

#: ../../ref/class-based-views/base.txt:88
# 05bb7f463b3247a6ae081ff739b4b653
msgid "If the view was called with a HTTP method it doesn't support, this method is called instead."
msgstr ""

#: ../../ref/class-based-views/base.txt:91
# 7357c23909fa42c385b5d580dc69a3fc
msgid "The default implementation returns ``HttpResponseNotAllowed`` with a list of allowed methods in plain text."
msgstr ""

#: ../../ref/class-based-views/base.txt:96
# 5da9261e665646569572313992b4fb5f
msgid "Handles responding to requests for the OPTIONS HTTP verb.  Returns a list of the allowed HTTP method names for the view."
msgstr ""

#: ../../ref/class-based-views/base.txt:100
#: ../../ref/class-based-views/flattened-index.txt:30
# 7849048d2fd34274ae88ef11ff1148bd
# b0170b6c54f3466e842a5b414ac0a496
msgid "TemplateView"
msgstr ""

#: ../../ref/class-based-views/base.txt:104
# 77b14b21a044422aae2c3eaf3f914714
msgid "Renders a given template, with the context containing parameters captured in the URL."
msgstr ""

#: ../../ref/class-based-views/base.txt:112
#: ../../ref/class-based-views/base.txt:172
#: ../../ref/class-based-views/generic-date-based.txt:34
#: ../../ref/class-based-views/generic-date-based.txt:101
#: ../../ref/class-based-views/generic-date-based.txt:217
#: ../../ref/class-based-views/generic-date-based.txt:318
#: ../../ref/class-based-views/generic-date-based.txt:423
#: ../../ref/class-based-views/generic-date-based.txt:527
#: ../../ref/class-based-views/generic-date-based.txt:586
#: ../../ref/class-based-views/generic-display.txt:16
#: ../../ref/class-based-views/generic-display.txt:76
#: ../../ref/class-based-views/generic-display.txt:132
#: ../../ref/class-based-views/generic-editing.txt:35
#: ../../ref/class-based-views/generic-editing.txt:82
#: ../../ref/class-based-views/generic-editing.txt:124
#: ../../ref/class-based-views/generic-editing.txt:166
# 4365009735d244919b6f0f52fe363c7e
# 02922f78ed1341f8825a7d88b5a567d3
# c1e7db3fb2884816a1ca536d32a98164
# 4baea29d39484ded96e8bb5d9ce5ebb6
# 05537778cf6c469ba406e59d1c789547
# 4d8916e0f9bf48beba3794f2ca027b8c
# d9cfea0d6890436b95fbabda4289d81f
# dd34237088c24cd99e3e6b4fd828ff4d
# e3671fd40ed64c99b9be43fc16dba2ad
# dfb4e512726b4ea9a6fddf3f8e975c7f
# 85017784a763435f935d35520d58e89b
# 28d37dfef55641edade7dbea987798a3
# ac4eb9db62c84a9f82c2e466f1046a8e
# 22b6718dfe8146eab3436e5a33f02497
# ab66c81815a84623a0b812e72964150b
# cd3707ab125848d7b9dfc07c95a37f3a
msgid "**Ancestors (MRO)**"
msgstr ""

#: ../../ref/class-based-views/base.txt:114
#: ../../ref/class-based-views/generic-display.txt:18
#: ../../ref/class-based-views/generic-display.txt:78
#: ../../ref/class-based-views/generic-display.txt:134
#: ../../ref/class-based-views/generic-editing.txt:37
#: ../../ref/class-based-views/generic-editing.txt:84
#: ../../ref/class-based-views/generic-editing.txt:126
#: ../../ref/class-based-views/generic-editing.txt:168
# 52054091545440af94b82035d1c0c46e
# c86681aa1e674200a84e19861ad7a388
# b84aeeae07324570bab1f61be67ced6f
# 7a8def2d49f94e51afad0a67d89bd43a
# 66e0bed926ef42f59f268cf7774b95fc
# 7a3e38d89cdc45a49d9498783e4b5964
# 640e233ba01e485ebb2b212b46a52930
# 3060e0beb77c4a39b77d665240e3905b
msgid "This view inherits methods and attributes from the following views:"
msgstr ""

#: ../../ref/class-based-views/base.txt:116
# 5e4eeb62b5b548178bc67572709c1ced
msgid ":class:`django.views.generic.base.TemplateView`"
msgstr ""

#: ../../ref/class-based-views/base.txt:117
#: ../../ref/class-based-views/generic-date-based.txt:38
#: ../../ref/class-based-views/generic-date-based.txt:105
#: ../../ref/class-based-views/generic-date-based.txt:221
#: ../../ref/class-based-views/generic-date-based.txt:322
#: ../../ref/class-based-views/generic-date-based.txt:427
#: ../../ref/class-based-views/generic-date-based.txt:531
#: ../../ref/class-based-views/generic-date-based.txt:590
#: ../../ref/class-based-views/generic-display.txt:21
#: ../../ref/class-based-views/generic-display.txt:82
#: ../../ref/class-based-views/generic-editing.txt:40
#: ../../ref/class-based-views/generic-editing.txt:88
#: ../../ref/class-based-views/generic-editing.txt:130
#: ../../ref/class-based-views/generic-editing.txt:172
# bdaf4faaf6884b64bdca79176d587f13
# 0812aa5534db449792bca4bb4706e5bd
# 3e59b52a642340e99f3eaf63a05454d9
# 97dbe944e1754c34ab980f9a2db218a8
# 4250281a045d499ab6d88d4cb34fc8c2
# f5c7d4897c734412840e6a1ef63b821c
# f5fc9bc1c9344e86b859da6f2c08128a
# c510259a0c5c47b381d17e722295859a
# aad94c7d32914b3a9adabecbc3bed46b
# f9944b4ae3664d30be09862027a6decc
# cb19de5047c7483d89494841f7becb0a
# 61f461113fe745d89c1726fbcb979c37
# 7bcff1295fd445afb30e479b8f13a948
# 9c2c6390439c44c7b06df646041ffa51
msgid ":class:`django.views.generic.base.TemplateResponseMixin`"
msgstr ""

#: ../../ref/class-based-views/base.txt:118
#: ../../ref/class-based-views/base.txt:176
#: ../../ref/class-based-views/generic-date-based.txt:43
#: ../../ref/class-based-views/generic-date-based.txt:111
#: ../../ref/class-based-views/generic-date-based.txt:228
#: ../../ref/class-based-views/generic-date-based.txt:329
#: ../../ref/class-based-views/generic-date-based.txt:435
#: ../../ref/class-based-views/generic-date-based.txt:540
#: ../../ref/class-based-views/generic-date-based.txt:598
#: ../../ref/class-based-views/generic-display.txt:24
#: ../../ref/class-based-views/generic-display.txt:85
#: ../../ref/class-based-views/generic-display.txt:137
#: ../../ref/class-based-views/generic-editing.txt:44
#: ../../ref/class-based-views/generic-editing.txt:94
#: ../../ref/class-based-views/generic-editing.txt:136
#: ../../ref/class-based-views/generic-editing.txt:177
#: ../../ref/class-based-views/mixins-editing.txt:182
# 55b5a1ea0ca94b459f6d37cd26c6e755
# 02db340d9c854307b428578f62a1409d
# f04b969d522c4437ac62b951ac15b963
# 8ff55ca43666469ba5937622a27965c2
# 7e7826ad13134bb098f88f656a821280
# 6ae61653f62f47f8a2810e46f9499161
# e2e5d685efb047599db8fbedfec1c472
# b04af5f215674f4fb0a2e50fc7bb3a23
# 72d7c0dc78a2409897ea5d544734d82b
# c793e01b245247b583e6e1679d18795c
# f4fed4b7f0d54627913773f148df6edb
# e1326779b06f42c582db5ec42b35e5e5
# ec2fbc1486064b7e9a144417a9fc9516
# d351de36d86e4d048b9e9734a17c2128
# 0103f57c9699454cb74e038dc5dc120c
# 54d8fce37e8749a0a03e1b0494599046
# e217e23713074689a4f78fbbb3c6d101
msgid ":class:`django.views.generic.base.View`"
msgstr ""

#: ../../ref/class-based-views/base.txt:122
#: ../../ref/class-based-views/base.txt:180
#: ../../ref/class-based-views/generic-display.txt:28
#: ../../ref/class-based-views/generic-display.txt:89
# e02ecea498494482a1a21aa82976edce
# b01b0ce69a4d4c0a8f2fc106954c468c
# c73304fd57fa45438b70705a7d6ef7bb
# 44f121936ed04da5b8b3abe2d2e95abc
msgid ":meth:`~django.views.generic.base.View.dispatch()`"
msgstr ""

#: ../../ref/class-based-views/base.txt:123
#: ../../ref/class-based-views/base.txt:181
#: ../../ref/class-based-views/generic-display.txt:29
#: ../../ref/class-based-views/generic-display.txt:90
# f3a2871235994ef28e82b9e9f2140550
# bb5be1088f04409190f2730c8a005efa
# 8e61b3db0a2d4cef842884c7ebc8a7be
# 72a85725f3954f07996e3048700ae1ac
msgid ":meth:`~django.views.generic.base.View.http_method_not_allowed()`"
msgstr ""

#: ../../ref/class-based-views/base.txt:124
# c035c696c01544f0a37af1a99cc4d016
msgid ":meth:`~django.views.generic.base.ContextMixin.get_context_data()`"
msgstr ""

#: ../../ref/class-based-views/base.txt:151
#: ../../ref/class-based-views/generic-date-based.txt:45
#: ../../ref/class-based-views/generic-date-based.txt:126
#: ../../ref/class-based-views/generic-date-based.txt:230
#: ../../ref/class-based-views/generic-date-based.txt:331
#: ../../ref/class-based-views/generic-date-based.txt:437
#: ../../ref/class-based-views/generic-date-based.txt:600
#: ../../ref/class-based-views/mixins-editing.txt:85
#: ../../ref/class-based-views/mixins-multiple-object.txt:143
#: ../../ref/class-based-views/mixins-single-object.txt:85
# 01c05b1cefca4c1c96a213de589f339e
# f270f9bfe5794d5e900124ca6f3e5e9b
# 331a433375604e498c744f37f1fb762d
# 8ae8e0feeb814609bb92182b5243e14f
# 74f8c85a1c724d488d3b85eb7a412d3e
# 3e696dc4ef6742a7bb332f2f0a145bad
# 862af5e1073b497bb946eeee6909c0f3
# 5e80e55a5eb5413e90c46eec9f6f1f6c
# 205a7fd3ebfc40859245e055226097b0
# a1ff5abfd630497f8cb1605b2e566b14
msgid "**Context**"
msgstr ""

#: ../../ref/class-based-views/base.txt:153
# 40d13eeb957f4d8596747406e56bcb2a
msgid "``params``: The dictionary of keyword arguments captured from the URL pattern that served the view."
msgstr ""

#: ../../ref/class-based-views/base.txt:157
#: ../../ref/class-based-views/flattened-index.txt:51
# e5865d50234643239001aa5254615c37
# b3a803be04a0434b8d29b6e2f06150ca
msgid "RedirectView"
msgstr ""

#: ../../ref/class-based-views/base.txt:161
# f6297fb09de5463a837fb3430f786013
msgid "Redirects to a given URL."
msgstr ""

#: ../../ref/class-based-views/base.txt:163
# cf97db177e734e5192e1045a98b5d845
msgid "The given URL may contain dictionary-style string formatting, which will be interpolated against the parameters captured in the URL. Because keyword interpolation is *always* done (even if no arguments are passed in), any ``\"%\"`` characters in the URL must be written as ``\"%%\"`` so that Python will convert them to a single percent sign on output."
msgstr ""

#: ../../ref/class-based-views/base.txt:169
# 85c69387715c49bc8af91c02e309080b
msgid "If the given URL is ``None``, Django will return an ``HttpResponseGone`` (410)."
msgstr ""

#: ../../ref/class-based-views/base.txt:174
# 1bae59376a7f4bf08f4beff79e4280ae
msgid "This view inherits methods and attributes from the following view:"
msgstr ""

#: ../../ref/class-based-views/base.txt:182
# b85666b0595b44cd9ab7fd7c7886b032
msgid ":meth:`get_redirect_url()`"
msgstr ""

#: ../../ref/class-based-views/base.txt:218
# 9d635edfa0424b74be48bae686f73981
msgid "The URL to redirect to, as a string. Or ``None`` to raise a 410 (Gone) HTTP error."
msgstr ""

#: ../../ref/class-based-views/base.txt:223
# 1adab47fdff54bc5b633b9cd0a5f8e73
msgid "Whether the redirect should be permanent. The only difference here is the HTTP status code returned. If ``True``, then the redirect will use status code 301. If ``False``, then the redirect will use status code 302. By default, ``permanent`` is ``True``."
msgstr ""

#: ../../ref/class-based-views/base.txt:230
# dd2a4c137af64fc6b6865540eada1a73
msgid "Whether to pass along the GET query string to the new location. If ``True``, then the query string is appended to the URL. If ``False``, then the query string is discarded. By default, ``query_string`` is ``False``."
msgstr ""

#: ../../ref/class-based-views/base.txt:239
# 347ec8a0e59b4279a874d9faa5592d88
msgid "Constructs the target URL for redirection."
msgstr ""

#: ../../ref/class-based-views/base.txt:241
# f394222600514525a70ca57b4e8bc400
msgid "The default implementation uses :attr:`url` as a starting string, performs expansion of ``%`` parameters in that string, as well as the appending of query string if requested by :attr:`query_string`. Subclasses may implement any behavior they wish, as long as the method returns a redirect-ready URL string."
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:3
# 5cfc6c067be448a3b32230e16f164668
msgid "Class-based generic views - flattened index"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:5
# 448666c7d29d42f4bf16800bbc393c8b
msgid "This index provides an alternate organization of the reference documentation for class-based views. For each view, the effective attributes and methods from the class tree are represented under that view. For the reference documentation organized by the class which defines the behavior, see :doc:`Class-based views</ref/class-based-views/index>`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:12
# 74755b78c6fd4e5797156bba686d28eb
msgid "Simple generic views"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:18
#: ../../ref/class-based-views/flattened-index.txt:33
#: ../../ref/class-based-views/flattened-index.txt:54
#: ../../ref/class-based-views/flattened-index.txt:81
#: ../../ref/class-based-views/flattened-index.txt:114
#: ../../ref/class-based-views/flattened-index.txt:147
#: ../../ref/class-based-views/flattened-index.txt:175
#: ../../ref/class-based-views/flattened-index.txt:214
#: ../../ref/class-based-views/flattened-index.txt:253
#: ../../ref/class-based-views/flattened-index.txt:289
#: ../../ref/class-based-views/flattened-index.txt:324
#: ../../ref/class-based-views/flattened-index.txt:362
#: ../../ref/class-based-views/flattened-index.txt:403
#: ../../ref/class-based-views/flattened-index.txt:442
#: ../../ref/class-based-views/flattened-index.txt:487
#: ../../ref/class-based-views/flattened-index.txt:532
# 0a6642265f0f4a8badf6d14650f0ec36
# 6dd17184ee6d43cbbb7b4ec5566626d5
# ead3c78e27f74117817c41dbb2b65374
# 73dd364233554f2d9fd4e76c363f7651
# 6394b8afb1544395b32c9279084b3985
# 549812966780480b9760a381f88abf93
# 75c14e22db9e4ccc993b165f15aa345b
# e7235f758cb741e691d7941e55db88e0
# 36622e63dd3541a18bd1f8f3ec1161bf
# 0767df4bd9fd406c861e7d5228d95209
# cc932f192a2647a89f423d07457192d3
# 4f0f76e23834495ba5b3427a76fe8dbd
# f03af387e42d44a98e14b3ac3b267475
# df05a025340a49fc9bd97f09c65be54e
# 05f7877bb1a54492839f02bb432c1dcd
# 97c1b4c2be884acf859174db498d763c
msgid "**Attributes** (with optional accessor):"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:20
#: ../../ref/class-based-views/flattened-index.txt:36
#: ../../ref/class-based-views/flattened-index.txt:56
#: ../../ref/class-based-views/flattened-index.txt:85
#: ../../ref/class-based-views/flattened-index.txt:119
#: ../../ref/class-based-views/flattened-index.txt:151
#: ../../ref/class-based-views/flattened-index.txt:180
#: ../../ref/class-based-views/flattened-index.txt:219
#: ../../ref/class-based-views/flattened-index.txt:257
#: ../../ref/class-based-views/flattened-index.txt:296
#: ../../ref/class-based-views/flattened-index.txt:331
#: ../../ref/class-based-views/flattened-index.txt:369
#: ../../ref/class-based-views/flattened-index.txt:410
#: ../../ref/class-based-views/flattened-index.txt:451
#: ../../ref/class-based-views/flattened-index.txt:496
#: ../../ref/class-based-views/flattened-index.txt:540
# 499a43be50b2470ab9fa2608996c3a9e
# 8bdb78518d2947e28407282d23386786
# 3486d212e5ad494ca13006a024c237df
# 29a76bcae61d410ca0c3427f395f2bbe
# 921ac92255ef4cb6af9bd85d2b81b8dc
# 42205a673e9240a0aaa2049a4177a634
# d7a64bd2f855455896a9c5381ee7d5cf
# 074d2aea254547b5bae5e1f662f881f2
# be76ab24f13a410493a7cf01033cf9cd
# 2b0b88cf9cc54e5dac85230a8704d555
# 9de6c28efc3f43a28e70b56a6a135fcf
# 2e08db2364224dc9815a79eb4c2981de
# 488bf750fbc845b2ae4f9b673edb7b68
# 66e60a8a3f4b47be9a33d803adabc157
# beb0f2cc65c14e34a3dd59b4e10f23c8
# 65bc5c5c11054395952138052f123e81
msgid ":attr:`~django.views.generic.base.View.http_method_names`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:24
#: ../../ref/class-based-views/flattened-index.txt:42
#: ../../ref/class-based-views/flattened-index.txt:63
#: ../../ref/class-based-views/flattened-index.txt:98
#: ../../ref/class-based-views/flattened-index.txt:130
#: ../../ref/class-based-views/flattened-index.txt:159
#: ../../ref/class-based-views/flattened-index.txt:195
#: ../../ref/class-based-views/flattened-index.txt:234
#: ../../ref/class-based-views/flattened-index.txt:271
#: ../../ref/class-based-views/flattened-index.txt:307
#: ../../ref/class-based-views/flattened-index.txt:345
#: ../../ref/class-based-views/flattened-index.txt:384
#: ../../ref/class-based-views/flattened-index.txt:425
#: ../../ref/class-based-views/flattened-index.txt:466
#: ../../ref/class-based-views/flattened-index.txt:511
#: ../../ref/class-based-views/flattened-index.txt:557
# 666ac9f1480b442c8b7667202e7a4da0
# 4d45a0da9f734cb9a87713c856fb8f5c
# bf1acd7e0b8246deb551e565fd7d993d
# 5b4cc9110ad3485b80782015c0eef897
# 8890997f8756414e9b3a5ca82b15fc22
# 98dd6c2038684ad08eb70ed0ba4e6de0
# a00d60f44cdc40ed865ae546da62f259
# 92bc612775694944bc8303afbafe1115
# e4062e2e7878483bb931df02b1c9934c
# 0c7554b12f5b41b29de621f85d6839a7
# c23a890476404f76a4c884ea76f169d7
# 7834a6a2f6db4015816996062e09b08a
# 756fcfa92a444342b981189990cc28fa
# 996df9611e044abf8582050dec95623f
# 6aa4de6d70b74ba4897b925c1f4e7581
# 5cac57b52e234957b1a21fcbdabcd3a1
msgid ":meth:`~django.views.generic.base.View.as_view`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:25
#: ../../ref/class-based-views/flattened-index.txt:43
#: ../../ref/class-based-views/flattened-index.txt:65
#: ../../ref/class-based-views/flattened-index.txt:99
#: ../../ref/class-based-views/flattened-index.txt:131
#: ../../ref/class-based-views/flattened-index.txt:160
#: ../../ref/class-based-views/flattened-index.txt:196
#: ../../ref/class-based-views/flattened-index.txt:235
#: ../../ref/class-based-views/flattened-index.txt:273
#: ../../ref/class-based-views/flattened-index.txt:308
#: ../../ref/class-based-views/flattened-index.txt:346
#: ../../ref/class-based-views/flattened-index.txt:385
#: ../../ref/class-based-views/flattened-index.txt:426
#: ../../ref/class-based-views/flattened-index.txt:467
#: ../../ref/class-based-views/flattened-index.txt:512
#: ../../ref/class-based-views/flattened-index.txt:558
# 5974c2d0a8434742a83fcee498508050
# 74037ae8bb6c4cb4a8d910fece1f8893
# 9e236225c64f42e9b9909e292e948c4f
# 8522a1bfa7114a7e955bda2b03b01375
# aa97ed1240d8482c99497fe1f1226342
# dfcfd13521294ec1b6f883a8d2cb3ea3
# d7471b1466894dd6bbebe839c7610304
# c55d7b8650bf494faa00cdfe17357463
# 1a180f8d3d4146e98e9b0bf7905f86bc
# 95f1e754101b4728843e30f938d85dc4
# 12bd2560028142e486928b9d589b54cb
# f6846a35e0d24b3dac5b174b3a9e448e
# 3af8ce62d89446d19e94123031688de8
# 3b9eed9b46e6410682171c221334cccb
# 9bbb3e46f7ba4e25b00555dd7faa4b33
# bbd83594a7cd4701a862568496f692e8
msgid ":meth:`~django.views.generic.base.View.dispatch`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:26
#: ../../ref/class-based-views/flattened-index.txt:46
#: ../../ref/class-based-views/flattened-index.txt:68
#: ../../ref/class-based-views/flattened-index.txt:103
#: ../../ref/class-based-views/flattened-index.txt:135
#: ../../ref/class-based-views/flattened-index.txt:204
#: ../../ref/class-based-views/flattened-index.txt:243
#: ../../ref/class-based-views/flattened-index.txt:277
#: ../../ref/class-based-views/flattened-index.txt:315
#: ../../ref/class-based-views/flattened-index.txt:353
#: ../../ref/class-based-views/flattened-index.txt:394
#: ../../ref/class-based-views/flattened-index.txt:433
#: ../../ref/class-based-views/flattened-index.txt:478
#: ../../ref/class-based-views/flattened-index.txt:523
#: ../../ref/class-based-views/flattened-index.txt:566
# 8167da8c03af49d1b3e0d5428fe9c4dd
# 14b06501021f43d2be01a91f0d1dd908
# 5489a3fadcb04cfca4509a2476d527fc
# cad3bc41f8634dae906a09b83cf46684
# 873dba90614f41bf9c174dcd05d10cd1
# 9483a7b6a2314711bee38cb2635523d3
# e76f18182e7b4015b577679f3d32049a
# ccd39dfc5380427cad8c02314dcbaebb
# 6238a431822146acb16cd204bb8b405a
# 47b66bf36e2a4a30ad4d543caa3a9988
# f8cfe42d9a0e462f94c846b78133a295
# 6da3b111868049bdb217e628bb7d6914
# 52afce5c8a2843b199d38a950d8853fc
# 8520e49bae324d5ba05764044c84cc2a
# 285c254cd60844bc973f6ac9a3d16ccf
msgid "``head()``"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:27
#: ../../ref/class-based-views/flattened-index.txt:47
#: ../../ref/class-based-views/flattened-index.txt:69
#: ../../ref/class-based-views/flattened-index.txt:104
#: ../../ref/class-based-views/flattened-index.txt:136
#: ../../ref/class-based-views/flattened-index.txt:167
#: ../../ref/class-based-views/flattened-index.txt:205
#: ../../ref/class-based-views/flattened-index.txt:244
#: ../../ref/class-based-views/flattened-index.txt:278
#: ../../ref/class-based-views/flattened-index.txt:316
#: ../../ref/class-based-views/flattened-index.txt:354
#: ../../ref/class-based-views/flattened-index.txt:395
#: ../../ref/class-based-views/flattened-index.txt:434
#: ../../ref/class-based-views/flattened-index.txt:479
#: ../../ref/class-based-views/flattened-index.txt:524
#: ../../ref/class-based-views/flattened-index.txt:567
# 771847d7560c4baba1ab1246b4a21e8d
# 9d6a24f89bb74fedad20bf3b862e2061
# ba4a0c5bb5774222a875f853b2542de0
# 055383754ff94c9dbbf986e13c3e6252
# 6bdb079a9eff4c2183560f21c63c554d
# 1665e20c52854b97a908898498a8b82c
# 4e4315f407c44391b2529ad57554391d
# d11298ad3c0f4465bac666de88299a96
# 3c881c61589f459a9489ab60f2b3b292
# 0c7b5e5819cc4d828f19eadec8b0c04e
# 38fcdf698e274bbb90792a4e709f58e8
# e8c6963390d84229ba9be4aa3a03e228
# 0150f1791cf548cf94bab319b055b3b7
# 2e8f7e56283646598b66a589ccbeb073
# f1cf19dde3724e2d8c2f08bc1699cde4
# 3df0ef9021734eae89c4f4be85471b9e
msgid ":meth:`~django.views.generic.base.View.http_method_not_allowed`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:35
#: ../../ref/class-based-views/flattened-index.txt:83
#: ../../ref/class-based-views/flattened-index.txt:117
#: ../../ref/class-based-views/flattened-index.txt:149
#: ../../ref/class-based-views/flattened-index.txt:177
#: ../../ref/class-based-views/flattened-index.txt:216
#: ../../ref/class-based-views/flattened-index.txt:255
#: ../../ref/class-based-views/flattened-index.txt:293
#: ../../ref/class-based-views/flattened-index.txt:328
#: ../../ref/class-based-views/flattened-index.txt:366
#: ../../ref/class-based-views/flattened-index.txt:407
#: ../../ref/class-based-views/flattened-index.txt:446
#: ../../ref/class-based-views/flattened-index.txt:491
#: ../../ref/class-based-views/flattened-index.txt:535
# 9c4f61f53ee84622908cece8bbf0dc80
# 8eeb7d308d37445592ce021ab6f557d0
# e98b2702fce34b438efd1f0ded8e090c
# e6c4a2723216427d8a528a8e0f4e7405
# eea180ed1510410693243e4006427563
# 489ecc5773cf4506827605f24a5e6f50
# b0f6ebda43dc4d57ae865b75625b7833
# 784c963744df461495342714244198ce
# 69b3b454424c4e3ba33025308194c18f
# 9d2dc1297e81448397df722e89b005fa
# 060ae7446f6246b199c0402f574e3b0c
# 7fa9e0e51f4849deaf6d9a5b61309b5c
# 795023ca291a4265a9e325ab8fcc3772
# 21452512be044423a1bc90077d004d9a
msgid ":attr:`~django.views.generic.base.TemplateResponseMixin.content_type`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:37
#: ../../ref/class-based-views/flattened-index.txt:89
#: ../../ref/class-based-views/flattened-index.txt:124
#: ../../ref/class-based-views/flattened-index.txt:153
#: ../../ref/class-based-views/flattened-index.txt:185
#: ../../ref/class-based-views/flattened-index.txt:224
#: ../../ref/class-based-views/flattened-index.txt:261
#: ../../ref/class-based-views/flattened-index.txt:301
#: ../../ref/class-based-views/flattened-index.txt:337
#: ../../ref/class-based-views/flattened-index.txt:376
#: ../../ref/class-based-views/flattened-index.txt:415
#: ../../ref/class-based-views/flattened-index.txt:458
#: ../../ref/class-based-views/flattened-index.txt:503
#: ../../ref/class-based-views/flattened-index.txt:546
# a65bde464cf6427bb54fe97f6fae1f92
# 7a3a877ddae346dab89b986051c13c4c
# ab988f9ff735444490827478eca5ef9f
# ad7c2a22a17a4ef281d89935202accd6
# 3adbc834e221497a88992356858d5da0
# 585d840d11f14201af7c8358b1428468
# 8a5fcbd84ebb4d929cc1cb4fec43845a
# 8bc3e16ee2c94e8faad9f120bb1acc49
# 475767adb2c444dd88996254a5d1988e
# c72d28514284408dbeebe93e77432c24
# 1b4e98f3c8b64c3cbf98ab80a88d64f1
# fbd46e0885b34aabb034fd4d45b2f949
# 0d6f455cc2df46268df40b02173426ef
# d981da067f3848799ef935e174ed4e9f
msgid ":attr:`~django.views.generic.base.TemplateResponseMixin.response_class` [:meth:`~django.views.generic.base.TemplateResponseMixin.render_to_response`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:38
#: ../../ref/class-based-views/flattened-index.txt:92
#: ../../ref/class-based-views/flattened-index.txt:125
#: ../../ref/class-based-views/flattened-index.txt:155
#: ../../ref/class-based-views/flattened-index.txt:189
#: ../../ref/class-based-views/flattened-index.txt:228
#: ../../ref/class-based-views/flattened-index.txt:265
#: ../../ref/class-based-views/flattened-index.txt:302
#: ../../ref/class-based-views/flattened-index.txt:338
#: ../../ref/class-based-views/flattened-index.txt:377
#: ../../ref/class-based-views/flattened-index.txt:416
#: ../../ref/class-based-views/flattened-index.txt:459
#: ../../ref/class-based-views/flattened-index.txt:504
#: ../../ref/class-based-views/flattened-index.txt:549
# 8645fe73b6ca45cb8dc4e554a91c3af2
# 3722226e13924491a6ced896d1a10487
# 8643e33d567d45fa82e92faf40eeb5f1
# 79fa1ded80504e2d99fa8a6e472ee2d5
# 6d7547092d844f98a929162d338df5ff
# bf1390c08bb341b3aa2032ca7bf5c04d
# 3f31227b24374039bbc131315d746016
# 91157b0ebf464f6ca3181987ca1fac65
# 734fc7475ed44615a9a16e53addd4301
# e09b98c5897f482a869491cddbddd37a
# bfc667dcbb4745858086bfa5cf9e60c4
# ff74856ccd0e471393397df1e0ecb113
# 564f200950fa46f297b4cad063ff150e
# 49f66ac5085146bcb6b42df9e1622f8b
msgid ":attr:`~django.views.generic.base.TemplateResponseMixin.template_name` [:meth:`~django.views.generic.base.TemplateResponseMixin.get_template_names`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:44
#: ../../ref/class-based-views/flattened-index.txt:66
#: ../../ref/class-based-views/flattened-index.txt:100
#: ../../ref/class-based-views/flattened-index.txt:274
#: ../../ref/class-based-views/flattened-index.txt:309
#: ../../ref/class-based-views/flattened-index.txt:347
#: ../../ref/class-based-views/flattened-index.txt:386
#: ../../ref/class-based-views/flattened-index.txt:427
#: ../../ref/class-based-views/flattened-index.txt:468
#: ../../ref/class-based-views/flattened-index.txt:513
#: ../../ref/class-based-views/flattened-index.txt:559
#: ../../ref/class-based-views/generic-display.txt:36
#: ../../ref/class-based-views/generic-display.txt:95
# 1b85562b133e459fb7c94a08b554554e
# 3b217008de574c4e860a2caceb3fab78
# da025a8280d941b8b5938f353cb77988
# 1424411db91949b68dddf55e08a74a4e
# 73bdb4e67b5c4ff4bb939bf3fd273816
# 0ea3f30c416f4fff896d76c623f34ff4
# 87d28fb0bccc4f61957e1de4f1f9a917
# 05b6343cfeaa4c93a3c8e05db4173669
# 1d85f0d27fd840ba9b232b8c45ce2ef1
# 6ffe102c35bf4d5ab101a2d83b9e684d
# 7be8fc4b11c14a299afc1766e6f396f6
# 0c5913e34b9c4e8b81c107e997266aec
# 51f1ad4a0f6245eb92bfab363e964b08
msgid "``get()``"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:45
# f9f003505a2744b3826f7fef2dad6d83
msgid ":meth:`~django.views.generic.base.ContextMixin.get_context_data`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:48
#: ../../ref/class-based-views/flattened-index.txt:105
#: ../../ref/class-based-views/flattened-index.txt:138
#: ../../ref/class-based-views/flattened-index.txt:208
#: ../../ref/class-based-views/flattened-index.txt:247
#: ../../ref/class-based-views/flattened-index.txt:280
#: ../../ref/class-based-views/flattened-index.txt:318
#: ../../ref/class-based-views/flattened-index.txt:356
#: ../../ref/class-based-views/flattened-index.txt:397
#: ../../ref/class-based-views/flattened-index.txt:436
#: ../../ref/class-based-views/flattened-index.txt:481
#: ../../ref/class-based-views/flattened-index.txt:526
#: ../../ref/class-based-views/flattened-index.txt:568
# 1ce3edf863444c49bca312bec36f58e2
# 854cab84515f44fc8f446e6e76b96518
# e32552975fa3430dbfffe02ae8be0e91
# 0ef1e6047d8148a495a16f76e5141fca
# 565b72bc59464732ba3e935e3c8adf99
# 6b6d0cb3dd1644e1b2badc1c0139012c
# d8f5157486bd4bcfab28befcff91cca8
# 159e68d5dc1d4b4cb27e01195f11141b
# 882ac1e0f531481580696c4689fcd9ff
# 39bb52a7e61542aebb35e75b04b45be9
# 0659c40d89614da2a1033f43f7f04e6f
# 12247ce8827f4d46b5611154be0af996
# 25ef560f50db4208b483810eb90b1cf7
msgid ":meth:`~django.views.generic.base.TemplateResponseMixin.render_to_response`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:57
# a24d2d9868e84ec999bdc30d13001a44
msgid ":attr:`~django.views.generic.base.RedirectView.permanent`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:58
# 1ad37866f76642488b3687fadeb6dc3e
msgid ":attr:`~django.views.generic.base.RedirectView.query_string`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:59
# 85a33ef12f5d479a8a11ba0296a1a19d
msgid ":attr:`~django.views.generic.base.RedirectView.url`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:64
#: ../../ref/class-based-views/flattened-index.txt:272
# 7068156f153d46b096d2dee1d20330b2
# 3357e10c4b0c45e0955f22fc2ef0022b
msgid "``delete()``"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:67
# e432be4b793949e9bc10e3af6de15e8f
msgid ":meth:`~django.views.generic.base.RedirectView.get_redirect_url`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:70
# d86cb7ab84724c89bb5935a9305947e6
msgid "``options()``"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:71
#: ../../ref/class-based-views/flattened-index.txt:279
# dbd44f9132444e6e9b88fc7e93d621c4
# 46da1548462144b3adb7e15173f75d70
msgid "``post()``"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:72
#: ../../ref/class-based-views/flattened-index.txt:207
#: ../../ref/class-based-views/flattened-index.txt:246
# 70de985eea95491db2cd4a5ed3a8c1a0
# 6bad5d80d58e49e6b04620e4fe20b695
# b57e46b54c034cb9b9999e6e93aa4590
msgid "``put()``"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:75
# fa407206d7eb434da9dee0e115e53982
msgid "Detail Views"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:78
#: ../../ref/class-based-views/generic-display.txt:9
# 377c43a29bf6436fb33a686c0635b56d
# 46f368cda2dc41f58045a19ec3394b4c
msgid "DetailView"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:84
#: ../../ref/class-based-views/flattened-index.txt:178
#: ../../ref/class-based-views/flattened-index.txt:217
#: ../../ref/class-based-views/flattened-index.txt:256
#: ../../ref/class-based-views/flattened-index.txt:536
# 1f6d9493438d48bb8c7e8140f100fb3f
# 0525ef81f4f245d6bfaaeaddb82d9c91
# 0ed56d3372ac4e5080c5bbdf02c00e33
# 47ee541bb97f40b59bc7b0f28eef1e51
# 286dcc23123d463691d93441c76c56f5
msgid ":attr:`~django.views.generic.detail.SingleObjectMixin.context_object_name` [:meth:`~django.views.generic.detail.SingleObjectMixin.get_context_object_name`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:86
#: ../../ref/class-based-views/flattened-index.txt:182
#: ../../ref/class-based-views/flattened-index.txt:221
#: ../../ref/class-based-views/flattened-index.txt:258
#: ../../ref/class-based-views/flattened-index.txt:541
# 65a78c710c734dce8e80a60014ab13eb
# 0c6bdf793f324543b378fffdf713fd49
# a1f39a0d5850410583bc59d165d214b4
# f6c9bb5d03364571be699ee38f0d538f
# 27b25dd4b49845028364f967fec80038
msgid ":attr:`~django.views.generic.detail.SingleObjectMixin.model`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:87
#: ../../ref/class-based-views/flattened-index.txt:183
#: ../../ref/class-based-views/flattened-index.txt:222
#: ../../ref/class-based-views/flattened-index.txt:259
#: ../../ref/class-based-views/flattened-index.txt:544
# b867e4fae79f46b19ea6288cac74983e
# 09874830af6a4efa8fdf6494e65d2d9c
# 6497c453ba1d4d6c85e9c75d972c2ce4
# c6e952ea3ebc47b1a9a714f41006e292
# 1f9c8cf105ea4396a5a954b3a111658f
msgid ":attr:`~django.views.generic.detail.SingleObjectMixin.pk_url_kwarg`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:88
#: ../../ref/class-based-views/flattened-index.txt:184
#: ../../ref/class-based-views/flattened-index.txt:223
#: ../../ref/class-based-views/flattened-index.txt:260
#: ../../ref/class-based-views/flattened-index.txt:545
# 97a4a004d11a41fb92ee32937716535c
# 150e0fa0fc6549cca3e1caf769375c30
# cc0a1d5dfc2f4f2898a777110129c8b5
# 4fd13fac36ce4e4d9657c27885411c20
# e3ceaad2c4c64c91aa5c80ef53d59fc1
msgid ":attr:`~django.views.generic.detail.SingleObjectMixin.queryset` [:meth:`~django.views.generic.detail.SingleObjectMixin.get_queryset`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:90
#: ../../ref/class-based-views/flattened-index.txt:186
#: ../../ref/class-based-views/flattened-index.txt:225
#: ../../ref/class-based-views/flattened-index.txt:262
#: ../../ref/class-based-views/flattened-index.txt:547
# bc61d88948ed4cfa8c6648e218f3d0c1
# c82d514f807f4aedb041137745178203
# a196e12beb2942e3b7355d245f27199a
# d7114ed99e5241e2aebc21c0936dcd90
# 7ab099938bc14d2d930d780f2a70829b
msgid ":attr:`~django.views.generic.detail.SingleObjectMixin.slug_field` [:meth:`~django.views.generic.detail.SingleObjectMixin.get_slug_field`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:91
#: ../../ref/class-based-views/flattened-index.txt:187
#: ../../ref/class-based-views/flattened-index.txt:226
#: ../../ref/class-based-views/flattened-index.txt:263
#: ../../ref/class-based-views/flattened-index.txt:548
# 9a640261bca14b269ef4a3027d62aa14
# 10e5466902f442bb82199df082ef7b42
# 52a10e182b39434fa72868907679042c
# ec5d16b5743d4354ae0201b91dda5726
# fbde91c29dc3493f8b140824a1105cdb
msgid ":attr:`~django.views.generic.detail.SingleObjectMixin.slug_url_kwarg`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:93
#: ../../ref/class-based-views/flattened-index.txt:190
#: ../../ref/class-based-views/flattened-index.txt:229
#: ../../ref/class-based-views/flattened-index.txt:266
#: ../../ref/class-based-views/flattened-index.txt:550
# 7ea57390149e42388e6d632b914084fc
# 85b8abb5aed548a7a3a339adc8097e9d
# 95c417baecb14ca79833c0ae43a82207
# b7ee4a509e124a35a88c39ba24332266
# 604259ab7ea9424baff4a3d70a9f513a
msgid ":attr:`~django.views.generic.detail.SingleObjectTemplateResponseMixin.template_name_field`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:94
#: ../../ref/class-based-views/flattened-index.txt:191
#: ../../ref/class-based-views/flattened-index.txt:230
#: ../../ref/class-based-views/flattened-index.txt:267
#: ../../ref/class-based-views/flattened-index.txt:551
# 3873d6f489404e349fe14ffe8cb3b515
# d31e6afc446c42b19bd526eab1ca88b4
# 71284b32703a4894a9e1a20ba3c7a99a
# d3243720235d4a369ed115e956942151
# fd782a385dbb48e4bf7eb280399ddad8
msgid ":attr:`~django.views.generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:101
#: ../../ref/class-based-views/flattened-index.txt:275
#: ../../ref/class-based-views/flattened-index.txt:560
# 8c84625bd67347bcb3848463dca2afca
# b954e9f40a3746edb6426fc26d37569e
# 611d5b33892a40dba8397ab8a5448d49
msgid ":meth:`~django.views.generic.detail.SingleObjectMixin.get_context_data`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:102
#: ../../ref/class-based-views/flattened-index.txt:203
#: ../../ref/class-based-views/flattened-index.txt:242
#: ../../ref/class-based-views/flattened-index.txt:276
#: ../../ref/class-based-views/flattened-index.txt:563
# af5b1f842404497b885ff6bd0c1eb584
# 0575957ce80f437c9a332c2cb4fa6a5b
# 93049a71758347d0b12cfd15f9a0b4cd
# f06c68f72f124010828249e1f4e9f873
# 221f6949bc664f8195fb2dbe3be96cf1
msgid ":meth:`~django.views.generic.detail.SingleObjectMixin.get_object`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:108
# 84febdd1abef4682862fe1f5e26a5ca6
msgid "List Views"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:111
#: ../../ref/class-based-views/generic-display.txt:66
# 61b03d720b5c41a1b1920af2e9d46184
# 02f83a44b095498081c9f952a42e26c2
msgid "ListView"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:116
#: ../../ref/class-based-views/flattened-index.txt:291
#: ../../ref/class-based-views/flattened-index.txt:326
#: ../../ref/class-based-views/flattened-index.txt:364
#: ../../ref/class-based-views/flattened-index.txt:405
#: ../../ref/class-based-views/flattened-index.txt:444
#: ../../ref/class-based-views/flattened-index.txt:489
# 5008dd9e952b48c89a302cd59fd48faa
# dfa70da5063043ee9c869ea8c1fc10d3
# 3807a9a8f1de425a8cf566e3af3975e7
# 7e1a3e7ecaea4fb6a9bc09d353f5ee47
# 7fa4f230dde34acfa5c64853eb9a4b95
# cb05dd26236c491abc319af516e6fad6
# c372325d6ebe4c51ab351e5f88000d40
msgid ":attr:`~django.views.generic.list.MultipleObjectMixin.allow_empty` [:meth:`~django.views.generic.list.MultipleObjectMixin.get_allow_empty`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:118
#: ../../ref/class-based-views/flattened-index.txt:294
#: ../../ref/class-based-views/flattened-index.txt:329
#: ../../ref/class-based-views/flattened-index.txt:367
#: ../../ref/class-based-views/flattened-index.txt:408
#: ../../ref/class-based-views/flattened-index.txt:447
#: ../../ref/class-based-views/flattened-index.txt:492
# 66c832cf79824827a73d6a8b4e47b531
# cc155f60c5af4122bbfbf9dbcb9b549a
# b4981738acc64181a4807dc536f60360
# 81717c5571dd4fd9a501af150765e316
# 59cb9751c7b04a6e8691cf2f50b85058
# 63f0cc15bf954d4592ab528d2ed8e5f5
# f952b65c6d3a4a40b1c590812c04625a
msgid ":attr:`~django.views.generic.list.MultipleObjectMixin.context_object_name` [:meth:`~django.views.generic.list.MultipleObjectMixin.get_context_object_name`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:120
#: ../../ref/class-based-views/flattened-index.txt:297
#: ../../ref/class-based-views/flattened-index.txt:333
#: ../../ref/class-based-views/flattened-index.txt:370
#: ../../ref/class-based-views/flattened-index.txt:411
#: ../../ref/class-based-views/flattened-index.txt:452
#: ../../ref/class-based-views/flattened-index.txt:497
# 6977b83ca9b849bf82d2d0505f47b2ec
# 3973d1b60b734173923a6bd08fcffd61
# 9735e1ef92c249a8af0397e386c76d09
# fb2aa5af61bb4c81bba483fc4856c0bb
# 624c82d4b8484f96a2af1bbfdd91ab9a
# 8456592929c74c8e8f9d57c1f33548c9
# e8ff2690a22b48e6a8bfe053ec4eb8d9
msgid ":attr:`~django.views.generic.list.MultipleObjectMixin.model`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:121
#: ../../ref/class-based-views/flattened-index.txt:298
#: ../../ref/class-based-views/flattened-index.txt:334
#: ../../ref/class-based-views/flattened-index.txt:373
#: ../../ref/class-based-views/flattened-index.txt:412
#: ../../ref/class-based-views/flattened-index.txt:455
#: ../../ref/class-based-views/flattened-index.txt:500
# baca1b7a813a4630b8c2afa33fb96aa5
# 92bb4c40a7db481ba4310b6ae9c9b887
# 0937adcfe026476986eb530a76da1d40
# 4cf4d9ed71104a2691f0479da7d82a8d
# ef8dead85f214ca7b61b5882dd44eeb3
# 2180c65750ef40e6857f54019bbb0c29
# 417bb0386696436dab1a42de91d29bc9
msgid ":attr:`~django.views.generic.list.MultipleObjectMixin.paginate_by` [:meth:`~django.views.generic.list.MultipleObjectMixin.get_paginate_by`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:122
#: ../../ref/class-based-views/flattened-index.txt:299
#: ../../ref/class-based-views/flattened-index.txt:335
#: ../../ref/class-based-views/flattened-index.txt:374
#: ../../ref/class-based-views/flattened-index.txt:413
#: ../../ref/class-based-views/flattened-index.txt:456
#: ../../ref/class-based-views/flattened-index.txt:501
# 1007fba602e04d8fa884e5d2d58bbd17
# 3037fe17793149dc93e17e74d3dde541
# 0e2650e9e2034d48963339c202572099
# 94f4685e472e49b0a35868f5c3bd45f1
# 2dfdbf94d77e4abd8d28b3d921a1eea1
# 42fce8e615c24d3eb858eeb76e267174
# dcbed1ecc3cf472786057ebb972734a9
msgid ":attr:`~django.views.generic.list.MultipleObjectMixin.paginator_class`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:123
#: ../../ref/class-based-views/flattened-index.txt:300
#: ../../ref/class-based-views/flattened-index.txt:336
#: ../../ref/class-based-views/flattened-index.txt:375
#: ../../ref/class-based-views/flattened-index.txt:414
#: ../../ref/class-based-views/flattened-index.txt:457
#: ../../ref/class-based-views/flattened-index.txt:502
# 9b7f3ec3df7e4f74b7bb4df417e33177
# c4c91ada14b14f52af560ec06de7d015
# 4f962cb973eb4cf8b59d5858f4568947
# b78183c5efd04dc5bdf0c3aaffadc636
# 8dbde50a46ab4b18b9ebe6529435a9f3
# 19d8d8da73854070bd1f4be67fdddb8e
# 05fa902ecb89407a83a954e27df95339
msgid ":attr:`~django.views.generic.list.MultipleObjectMixin.queryset` [:meth:`~django.views.generic.list.MultipleObjectMixin.get_queryset`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:126
#: ../../ref/class-based-views/flattened-index.txt:303
#: ../../ref/class-based-views/flattened-index.txt:339
#: ../../ref/class-based-views/flattened-index.txt:378
#: ../../ref/class-based-views/flattened-index.txt:417
#: ../../ref/class-based-views/flattened-index.txt:460
#: ../../ref/class-based-views/flattened-index.txt:505
# bf7f555b88c8408d9197d1e9b1487185
# 7088f538f4a742f6b31b281f6a3770b2
# f5fcfdbb5e09466986cc736b6b2f95a4
# 2b74c9041f2e4f928e49e9707e15f7fa
# de656b7b288e4c548a21eb7c2db6b485
# 711ced0694c84c269716cdeb3de52d82
# 970852a1908c4849b6efd7826a282476
msgid ":attr:`~django.views.generic.list.MultipleObjectTemplateResponseMixin.template_name_suffix`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:132
# 6c02f3b0c14f4fe9af2a4316efb39b52
msgid ":meth:`~django.views.generic.list.BaseListView.get`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:133
#: ../../ref/class-based-views/flattened-index.txt:310
#: ../../ref/class-based-views/flattened-index.txt:348
#: ../../ref/class-based-views/flattened-index.txt:387
#: ../../ref/class-based-views/flattened-index.txt:428
#: ../../ref/class-based-views/flattened-index.txt:469
#: ../../ref/class-based-views/flattened-index.txt:514
# 21e1ab3cc0284fb986cbec607461a3ff
# 9e5cd26208a94650a90ef258c91aded0
# 6c98978d89e14da68c0870669515ba17
# 8108cee2db464c1eafb73c4cc5b31c6f
# af2185913a3943f68cefaaf9862eda2c
# c03f5d6599f44feda3323714fd699679
# ffa46194059d4c57904f591c2f7976d4
msgid ":meth:`~django.views.generic.list.MultipleObjectMixin.get_context_data`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:134
#: ../../ref/class-based-views/flattened-index.txt:314
#: ../../ref/class-based-views/flattened-index.txt:352
#: ../../ref/class-based-views/flattened-index.txt:392
#: ../../ref/class-based-views/flattened-index.txt:432
#: ../../ref/class-based-views/flattened-index.txt:475
#: ../../ref/class-based-views/flattened-index.txt:520
# 806c69f732fb4ac3a1d3798c855cfc4d
# a169a9bf5ad44a57991c636237d8b8fa
# 3b43b395068d40158b157d4c182884e3
# 9701a64fd5f44affa24ae159b66de13e
# 6fdf23de0f9e42a8a0af3d8d74c22da9
# 033d637d83ac4f50b5e60dca4e4570a7
# e42680e7e6c2421d87de67bb45e9ead0
msgid ":meth:`~django.views.generic.list.MultipleObjectMixin.get_paginator`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:137
#: ../../ref/class-based-views/flattened-index.txt:317
#: ../../ref/class-based-views/flattened-index.txt:355
#: ../../ref/class-based-views/flattened-index.txt:396
#: ../../ref/class-based-views/flattened-index.txt:435
#: ../../ref/class-based-views/flattened-index.txt:480
#: ../../ref/class-based-views/flattened-index.txt:525
# a0b07f86751644daaffcc345a2b8d2f2
# 0fbcdd80cd074110b2a1772d65306b06
# 588fbbfdbc384256bf910028581da53e
# 4dc381f0f423488baf91b1465acc4ea7
# d2c2556bd23b46ec861468e89c07cb0f
# 658adc2ebe35406cbb6386604d2e8d5a
# 480925a57a694e53918664111d1422f2
msgid ":meth:`~django.views.generic.list.MultipleObjectMixin.paginate_queryset`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:141
# a514b20ba78c4f6db0bf7fd8cf484f4b
msgid "Editing views"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:144
#: ../../ref/class-based-views/generic-editing.txt:28
# bd37941affe7494a8e4bebf92010e25b
# 63e4f6115ef64ff38f19ee64e5abdf22
msgid "FormView"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:150
#: ../../ref/class-based-views/flattened-index.txt:179
#: ../../ref/class-based-views/flattened-index.txt:218
# 1e691bac1b1c40fda4b645a2c77f6ebc
# 54058477f0ea48dd803c3c34934b319f
# a15dba5ba2c84de2aeeee59785e7c571
msgid ":attr:`~django.views.generic.edit.FormMixin.form_class` [:meth:`~django.views.generic.edit.FormMixin.get_form_class`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:152
#: ../../ref/class-based-views/flattened-index.txt:181
#: ../../ref/class-based-views/flattened-index.txt:220
# 60fb34951c4445c4a4f39d7573d997ab
# 0efc7120140340b5beb4a7f2ffb79ffb
# 45dd694a0c754920849c5028e00eed8c
msgid ":attr:`~django.views.generic.edit.FormMixin.initial` [:meth:`~django.views.generic.edit.FormMixin.get_initial`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:154
#: ../../ref/class-based-views/flattened-index.txt:188
#: ../../ref/class-based-views/flattened-index.txt:227
# 3999486442644015bd5873391a23b392
# 852b2ff98c274810a676e25dd9a8eed7
# 6eab50d173d341a89f38c946335bc6a1
msgid ":attr:`~django.views.generic.edit.FormMixin.success_url` [:meth:`~django.views.generic.edit.FormMixin.get_success_url`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:161
#: ../../ref/class-based-views/flattened-index.txt:197
#: ../../ref/class-based-views/flattened-index.txt:236
# 3e5b0fe47cdc42e99693d7f9204743f0
# 244c58d8a4c74e83b487d56f3a181696
# f984495e85fb40ebbf6c7e479457e99e
msgid ":meth:`~django.views.generic.edit.FormMixin.form_invalid`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:162
#: ../../ref/class-based-views/flattened-index.txt:198
#: ../../ref/class-based-views/flattened-index.txt:237
# ba4a31bd08ff4ad6bf5131e63094b56a
# 94be7d57ae634d3ab438dd00ef90f27c
# 3ddaf766e58746fc87583c48a89162f3
msgid ":meth:`~django.views.generic.edit.FormMixin.form_valid`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:163
#: ../../ref/class-based-views/flattened-index.txt:199
#: ../../ref/class-based-views/flattened-index.txt:238
# d4f8219427894fbb93feac1b5684eaf0
# 94f5e11e8601443aac72720c1711febf
# 53785ddefa92463a8a16e20022a3876f
msgid ":meth:`~django.views.generic.edit.ProcessFormView.get`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:164
#: ../../ref/class-based-views/flattened-index.txt:200
#: ../../ref/class-based-views/flattened-index.txt:239
# 23e5bbbb0f0d421ea2209ec135d701bb
# 3fa4012d4b5f49108e0fa8d5f87836e4
# 41f42a0008494e5e8e15bb31874ebe0e
msgid ":meth:`~django.views.generic.edit.FormMixin.get_context_data`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:165
#: ../../ref/class-based-views/flattened-index.txt:201
#: ../../ref/class-based-views/flattened-index.txt:240
# 953626f2d53e4d98a400bb8ba847ad43
# 31667092681e4c4684125e7bfcac67ec
# 535df8d25df34bc9bf607549332949c8
msgid ":meth:`~django.views.generic.edit.FormMixin.get_form`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:166
#: ../../ref/class-based-views/flattened-index.txt:202
#: ../../ref/class-based-views/flattened-index.txt:241
# 846d0a81c3244987ba565eb1dc4eb03c
# cc0caf60521b46ee8cc79b98aca44a68
# c7ef87839fcb4379a375ed8288378a7a
msgid ":meth:`~django.views.generic.edit.FormMixin.get_form_kwargs`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:168
#: ../../ref/class-based-views/flattened-index.txt:206
#: ../../ref/class-based-views/flattened-index.txt:245
# 4b109e18b9a74aed80d3acd8cb5adffe
# 406f342dac8246d19e45b389fea1b5b5
# 0089a9ca7427404f91f0138ef12bf00d
msgid ":meth:`~django.views.generic.edit.ProcessFormView.post`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:169
# 3b247036812d493e95a6572d0ff98e14
msgid ":meth:`~django.views.generic.edit.ProcessFormView.put`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:172
#: ../../ref/class-based-views/generic-editing.txt:75
# c93af62d8d3e44fbb279a4d95c4aeae5
# d7faebbadd9b4f9584b8a41a399ba2a8
msgid "CreateView"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:211
#: ../../ref/class-based-views/generic-editing.txt:115
# 1c04627b5ba64efe86ffdf8ddceff1fa
# ad5e0907e7614fe791bcf35ba3b1a8e1
msgid "UpdateView"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:250
#: ../../ref/class-based-views/generic-editing.txt:157
# feaeec0d5948497781ef097feb0080d6
# eb60a49c6ee34e8990aa5b98552fd963
msgid "DeleteView"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:264
# d8c22c26282a4c4694832681fa663939
msgid ":attr:`~django.views.generic.edit.DeletionMixin.success_url` [:meth:`~django.views.generic.edit.DeletionMixin.get_success_url`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:283
# 5a36eb07a4cd414e8e904fff949da421
msgid "Date-based views"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:286
#: ../../ref/class-based-views/generic-date-based.txt:26
# 906b2d22093a43469a7feeaabd97a193
# 5a21a23a7f2f41d7a315ed238351a1fc
msgid "ArchiveIndexView"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:292
#: ../../ref/class-based-views/flattened-index.txt:327
#: ../../ref/class-based-views/flattened-index.txt:365
#: ../../ref/class-based-views/flattened-index.txt:406
#: ../../ref/class-based-views/flattened-index.txt:445
#: ../../ref/class-based-views/flattened-index.txt:490
#: ../../ref/class-based-views/flattened-index.txt:534
# 2bce4853bbef4b549af2f6adde09ea0c
# 08cb44e4b0df4e44860d9454d7175b55
# fa9198a201724c2caafc48a3a68725b8
# c450ac1a5b024aa1a998765d8e23d34a
# 7439da1885024daa8cc1c476853ab58e
# 482aa2ebe94046b19b5cfc2b8135ec52
# 1be30445a7e340499afe8d8b47f20319
msgid ":attr:`~django.views.generic.dates.DateMixin.allow_future` [:meth:`~django.views.generic.dates.DateMixin.get_allow_future`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:295
#: ../../ref/class-based-views/flattened-index.txt:330
#: ../../ref/class-based-views/flattened-index.txt:368
#: ../../ref/class-based-views/flattened-index.txt:409
#: ../../ref/class-based-views/flattened-index.txt:448
#: ../../ref/class-based-views/flattened-index.txt:493
#: ../../ref/class-based-views/flattened-index.txt:537
# 6fdc93c8fc024e60a57abf059ed7d2be
# 4a98cdb8473a432e98fa6d966ac8f787
# 5dd8e7f296de4da8af051ae99ffedfcc
# 9e63018ab9994f6ca73cdc0e3a67f08c
# 5f329673be104d30ade2bab072bea901
# 16d2e8713bb345c997ecfed21de878bc
# 07a61d71ea354debb0fd0417ff8ba621
msgid ":attr:`~django.views.generic.dates.DateMixin.date_field` [:meth:`~django.views.generic.dates.DateMixin.get_date_field`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:311
#: ../../ref/class-based-views/flattened-index.txt:349
#: ../../ref/class-based-views/flattened-index.txt:388
#: ../../ref/class-based-views/flattened-index.txt:429
#: ../../ref/class-based-views/flattened-index.txt:470
#: ../../ref/class-based-views/flattened-index.txt:515
# 39859e45fdab4fee855d6ff51bd2ea1c
# eb0a46b108dc4d6faebea4d0f9bc7e10
# 1aadb4776ce24687b971614c25c27bbf
# 4c35f745afa5430c9ff58288f2449e6e
# 192683bbb326486a98a24ce83107aae9
# 8cb8e898fe6d4d5fb3decd849d38dfe9
msgid ":meth:`~django.views.generic.dates.BaseDateListView.get_date_list`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:312
#: ../../ref/class-based-views/flattened-index.txt:350
#: ../../ref/class-based-views/flattened-index.txt:389
#: ../../ref/class-based-views/flattened-index.txt:430
#: ../../ref/class-based-views/flattened-index.txt:471
#: ../../ref/class-based-views/flattened-index.txt:516
# cd27134c99e341bc9048f08c9e71d5dc
# b8f1d9110c574e3391c5ba4e844ab587
# c8aef075ace747ff8049fe746ff063a3
# 2893a9681c794ed09d57f60ad2452b29
# 3f3fe683b2a2409a85d2ded671417513
# a24ee3b7d4654b9da657dbe8efbfb4a9
msgid ":meth:`~django.views.generic.dates.BaseDateListView.get_dated_items`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:313
#: ../../ref/class-based-views/flattened-index.txt:351
#: ../../ref/class-based-views/flattened-index.txt:390
#: ../../ref/class-based-views/flattened-index.txt:431
#: ../../ref/class-based-views/flattened-index.txt:472
#: ../../ref/class-based-views/flattened-index.txt:517
# 2e028f6892864e6981429b485703ec63
# 34232e32d0084d18a1f351c794e8db5d
# 6b5a32f3e2e041e9a5a2676f8293152b
# 3210f06087a141fe8a2381fea82d5bce
# d41d65260165461993665629e112f64a
# 7ec0d0f4b09141a682941146d6651fd0
msgid ":meth:`~django.views.generic.dates.BaseDateListView.get_dated_queryset`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:321
#: ../../ref/class-based-views/generic-date-based.txt:93
# 4e713580e8e34fe8b0066999aabc378a
# b362a1d697d148e5bcbf36c40199232a
msgid "YearArchiveView"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:332
# 6bd34a8276e34db0ae6730b6a80c63b5
msgid ":attr:`~django.views.generic.dates.YearArchiveView.make_object_list` [:meth:`~django.views.generic.dates.YearArchiveView.get_make_object_list`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:340
#: ../../ref/class-based-views/flattened-index.txt:379
#: ../../ref/class-based-views/flattened-index.txt:420
#: ../../ref/class-based-views/flattened-index.txt:461
#: ../../ref/class-based-views/flattened-index.txt:506
#: ../../ref/class-based-views/flattened-index.txt:552
# e2f213d990a5489ab226bc5f677cfb21
# 52b94534d6a548a78d1d2a5ab8b35e0f
# f87019b9eab547d397eb0ee9202b13ac
# a5f994b5dcd34b7193e2e098df7e51aa
# 03f2be9f371d4efe966cff11f3d03b25
# 86eb6feb94e2414882e475d056d34f37
msgid ":attr:`~django.views.generic.dates.YearMixin.year` [:meth:`~django.views.generic.dates.YearMixin.get_year`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:341
#: ../../ref/class-based-views/flattened-index.txt:380
#: ../../ref/class-based-views/flattened-index.txt:421
#: ../../ref/class-based-views/flattened-index.txt:462
#: ../../ref/class-based-views/flattened-index.txt:507
#: ../../ref/class-based-views/flattened-index.txt:553
# 5f15fcc2744e4e2998145cd24537f0ff
# 4f430c214e264d4aacbcd252c2474a5f
# 73a10b7786db4c69b50c2546eadad6c9
# 4e7880253ee24d6b819d46d9a7f046d3
# 590913e98ef541c4af620e7eba5ab8c7
# faf776c95e7e49d0a81a1ed76173caa7
msgid ":attr:`~django.views.generic.dates.YearMixin.year_format` [:meth:`~django.views.generic.dates.YearMixin.get_year_format`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:359
#: ../../ref/class-based-views/generic-date-based.txt:209
# 2b65f58c5fd4494cbb6c9f4e58fbb98b
# 6cf993be7e344bd49a4a702b1147ccb4
msgid "MonthArchiveView"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:371
#: ../../ref/class-based-views/flattened-index.txt:453
#: ../../ref/class-based-views/flattened-index.txt:498
#: ../../ref/class-based-views/flattened-index.txt:542
# 3d6cc30255414eaf8c4cafe0d11c2e1e
# 59e154abc84a446fbfbc735f43cba818
# b880f9cc305f4475a70e29eec010cd51
# 6a9580f4c805449ca7d2d49b2b885d53
msgid ":attr:`~django.views.generic.dates.MonthMixin.month` [:meth:`~django.views.generic.dates.MonthMixin.get_month`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:372
#: ../../ref/class-based-views/flattened-index.txt:454
#: ../../ref/class-based-views/flattened-index.txt:499
#: ../../ref/class-based-views/flattened-index.txt:543
# 6fe36f2a50a549d68ad08df19b6b2ce5
# 134886b8d2c34515a4b05eee751d1f97
# 0993584475aa4eca8daf3ff499bec928
# edb827fdc8594846a6b9ad21aa9f7357
msgid ":attr:`~django.views.generic.dates.MonthMixin.month_format` [:meth:`~django.views.generic.dates.MonthMixin.get_month_format`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:391
#: ../../ref/class-based-views/flattened-index.txt:474
#: ../../ref/class-based-views/flattened-index.txt:519
#: ../../ref/class-based-views/flattened-index.txt:562
# bcbdf1615ccc4b489553da262dcfb3f0
# a6489bd012b64098bf26a34b98de8b36
# 23117a0d80a94932b6d10b394c18a9cd
# d36f7ce9212d4570a1f30b791700695e
msgid ":meth:`~django.views.generic.dates.MonthMixin.get_next_month`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:393
#: ../../ref/class-based-views/flattened-index.txt:477
#: ../../ref/class-based-views/flattened-index.txt:522
#: ../../ref/class-based-views/flattened-index.txt:565
# 970bc44bd3c341ce87daae95a67fcd0c
# 880d1ef92d0e4781962c8b2ba072a933
# d1bb3684ffda4f5b8c9a388dc0fce9b1
# db20b4ab61a9487aafc32125224edd6b
msgid ":meth:`~django.views.generic.dates.MonthMixin.get_previous_month`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:400
#: ../../ref/class-based-views/generic-date-based.txt:310
# a348f7833307481bbbd34d2f4421a6cd
# e0503b51befb4a4fb0c014c2ad6ffff6
msgid "WeekArchiveView"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:418
# e916f2d56c5f49e1b11bd0dc89fb7141
msgid ":attr:`~django.views.generic.dates.WeekMixin.week` [:meth:`~django.views.generic.dates.WeekMixin.get_week`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:419
# a1102a89193b420f9c2f503d97078b1f
msgid ":attr:`~django.views.generic.dates.WeekMixin.week_format` [:meth:`~django.views.generic.dates.WeekMixin.get_week_format`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:439
#: ../../ref/class-based-views/generic-date-based.txt:415
# 567b1be060324c339cfbd9be8060475a
# 0d0cc2ce377b4f918c9eab432b70ebaf
msgid "DayArchiveView"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:449
#: ../../ref/class-based-views/flattened-index.txt:494
#: ../../ref/class-based-views/flattened-index.txt:538
# 048a811d77ef4eaa9e68cb02e564f2b7
# fc9722f68fac4ce2a9ca47ca1654e441
# 761722e2373544ed97ba7c7f55223ba2
msgid ":attr:`~django.views.generic.dates.DayMixin.day` [:meth:`~django.views.generic.dates.DayMixin.get_day`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:450
#: ../../ref/class-based-views/flattened-index.txt:495
#: ../../ref/class-based-views/flattened-index.txt:539
# 147e36ab452f46a7aff49ce251034712
# b04e533f45f94d519df5aa4d60e58bf3
# 47159083b6a74290a40db8ee88df81cc
msgid ":attr:`~django.views.generic.dates.DayMixin.day_format` [:meth:`~django.views.generic.dates.DayMixin.get_day_format`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:473
#: ../../ref/class-based-views/flattened-index.txt:518
#: ../../ref/class-based-views/flattened-index.txt:561
# d7051c067b8846008766486fb20fe783
# 4c9bf02969b042bb87379c7e2d9ea3c8
# d4c3c0c46ea74f46be1412fc2664d0fa
msgid ":meth:`~django.views.generic.dates.DayMixin.get_next_day`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:476
#: ../../ref/class-based-views/flattened-index.txt:521
#: ../../ref/class-based-views/flattened-index.txt:564
# c0945cca0e18420bbfd5e63fee0e2e4b
# 23a4240267ef4c4e9812fdb164732c22
# 0b0f21d2e9e742368f531e654aea8111
msgid ":meth:`~django.views.generic.dates.DayMixin.get_previous_day`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:484
#: ../../ref/class-based-views/generic-date-based.txt:519
# 406ffb2c021f4471a67fddc999ec1d2d
# 8a2a68c3299e4d288f34c8f73353bf0f
msgid "TodayArchiveView"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:529
#: ../../ref/class-based-views/generic-date-based.txt:578
# be7b5a6bd94444cdbe08f9501cb94326
# 997ae1b5b343448ea0c251b41c1aa21b
msgid "DateDetailView"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:3
# 0776e0e1568b4bf8a114b0272085dd6b
msgid "Generic date views"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:7
# 3511781042954964a3c22f8ccf147464
msgid "Date-based generic views, provided in :mod:`django.views.generic.dates`, are views for displaying drilldown pages for date-based data."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:12
#: ../../ref/class-based-views/generic-editing.txt:15
# 15f876accbae43aa8fac4556a5c9e0ab
# 5292f41f1a484bf7a18d7c9d0f0ff322
msgid "Some of the examples on this page assume that an ``Article`` model has been defined as follows in ``myapp/models.py``::"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:30
# 454fb6c64c014ba789af14224d38b208
msgid "A top-level index page showing the \"latest\" objects, by date. Objects with a date in the *future* are not included unless you set ``allow_future`` to ``True``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:36
# 3e8cf09ef8fd4e018d441410d4901847
msgid ":class:`django.views.generic.dates.ArchiveIndexView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:37
#: ../../ref/class-based-views/generic-date-based.txt:104
#: ../../ref/class-based-views/generic-date-based.txt:220
#: ../../ref/class-based-views/generic-date-based.txt:321
#: ../../ref/class-based-views/generic-date-based.txt:426
#: ../../ref/class-based-views/generic-date-based.txt:530
#: ../../ref/class-based-views/generic-display.txt:81
# 456df639cf3a4660b7cb37ea0e10c6de
# 1db21782bcb84cefbf037bf1e8536fc6
# 9f0a22eaa87446e880182167d2a6add7
# d4ccb53bb4f64a9c96eeee3704956990
# 34c787c7ee27408799e2e1a05b6a834f
# adcc4b4ff0d54b6faad87aeb464f10fd
# 4dad2a4b76004245ba2d1f396610a794
msgid ":class:`django.views.generic.list.MultipleObjectTemplateResponseMixin`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:39
# d28695afe3a44f649811c021e633fe5f
msgid ":class:`django.views.generic.dates.BaseArchiveIndexView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:40
#: ../../ref/class-based-views/generic-date-based.txt:108
#: ../../ref/class-based-views/generic-date-based.txt:225
#: ../../ref/class-based-views/generic-date-based.txt:326
#: ../../ref/class-based-views/generic-date-based.txt:432
#: ../../ref/class-based-views/generic-date-based.txt:537
# 4ab0b184c84c4fffbd3ed88523556c8e
# 1c62aae2e401494c8711dd4821f9008c
# 86da26b4f7bd439fbdb004d4e88e04b2
# b0f979c269134aa0bcbabd16aaba36a8
# b0a3271a87d04e759ef3e7f95ce98bf9
# a3175632d9b34419bcb66137b6df274d
msgid ":class:`django.views.generic.dates.BaseDateListView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:41
#: ../../ref/class-based-views/generic-date-based.txt:109
#: ../../ref/class-based-views/generic-date-based.txt:226
#: ../../ref/class-based-views/generic-date-based.txt:327
#: ../../ref/class-based-views/generic-date-based.txt:433
#: ../../ref/class-based-views/generic-date-based.txt:538
#: ../../ref/class-based-views/generic-display.txt:84
#: ../../ref/class-based-views/generic-display.txt:136
# 86eee85c40764f15a6502933640f5d8a
# 0985cd8c0b914f05a5c0e0772a096ba4
# d81d994934274074922dd8b6f150c595
# ea72d54364d84d7d9bad78700dfe6b7b
# 28a4da8473a04c5586af8d36db2b7113
# 415691e44e354791bd4291c49576e792
# beba80c0d66c4a378d0439e14ad76c9f
# b927ec10b93f4e6fb066c8e272f04820
msgid ":class:`django.views.generic.list.MultipleObjectMixin`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:42
#: ../../ref/class-based-views/generic-date-based.txt:110
#: ../../ref/class-based-views/generic-date-based.txt:227
#: ../../ref/class-based-views/generic-date-based.txt:328
#: ../../ref/class-based-views/generic-date-based.txt:434
#: ../../ref/class-based-views/generic-date-based.txt:539
#: ../../ref/class-based-views/generic-date-based.txt:595
# 847ee44732d54326b39ed5ce21bd9905
# 8bfd3c446371411b91412b486e58bf18
# a2aae0cbd5fd479b8103c3c1dcaedd1c
# 44f4af79e783446a988b781dc8486b6d
# 4a2fa4619c4e486b87d40d4b6d570a26
# 2dc02218f4ec4b8d8b8aede8cca04463
# 9074911399f246a596903d502c66c98f
msgid ":class:`django.views.generic.dates.DateMixin`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:47
#: ../../ref/class-based-views/generic-date-based.txt:128
# 909b6b82481d43c29408b579c7efb83c
# ca2f2878493345a8abc1624fd3e25a37
msgid "In addition to the context provided by :class:`django.views.generic.list.MultipleObjectMixin` (via :class:`django.views.generic.dates.BaseDateListView`), the template's context will be:"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:52
# 9a5a5ba8a7a44ac5a34cfed2d97d931a
msgid "``date_list``: A :meth:`DateQuerySet<django.db.models.query.QuerySet.dates>` object containing all years that have objects available according to ``queryset``, represented as :class:`datetime.datetime<python:datetime.datetime>` objects, in descending order."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:59
#: ../../ref/class-based-views/generic-date-based.txt:161
#: ../../ref/class-based-views/generic-date-based.txt:257
#: ../../ref/class-based-views/generic-date-based.txt:351
#: ../../ref/class-based-views/generic-date-based.txt:467
#: ../../ref/class-based-views/generic-date-based.txt:542
#: ../../ref/class-based-views/generic-date-based.txt:605
# 864beef4a74444d98655c3d65336179a
# 37b6240f94a64e81a532718c5f4d3490
# 2189f30f01ec4918be9bffc9cec123b7
# 02b42cb906664721bbec7b9555d65bc6
# 3431bedfe98d46f6941aab8491e38ca9
# 3d93c4fabdd34a6187a3d113778b8af8
# f5fca5769a6547c585a788a6cf05e4bb
msgid "**Notes**"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:61
# 0324214e3ca846f3afba08440bea65e6
msgid "Uses a default ``context_object_name`` of ``latest``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:62
# b1a128079b3d41bab3036062f702ca12
msgid "Uses a default ``template_name_suffix`` of ``_archive``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:63
# 50546c42d9b24046b39fb567f037f971
msgid "Defaults to providing ``date_list`` by year, but this can be altered to month or day using the attribute ``date_list_period``. This also applies to all subclass views."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:80
# 49587ebe6e9a4e639f8e557338fbba63
msgid "**Example myapp/article_archive.html**:"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:90
# 648ee5d4f8524ed09e41ae112ef60200
msgid "This will output all articles."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:97
# 6c4c898bb9cf46f4b71c18610df2705b
msgid "A yearly archive page showing all available months in a given year. Objects with a date in the *future* are not displayed unless you set ``allow_future`` to ``True``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:103
# 33df43c8d6cb42dc817c1f3e54d4c9b2
msgid ":class:`django.views.generic.dates.YearArchiveView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:106
# cf7bc75619094422b79e0df63afcd13b
msgid ":class:`django.views.generic.dates.BaseYearArchiveView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:107
#: ../../ref/class-based-views/generic-date-based.txt:223
#: ../../ref/class-based-views/generic-date-based.txt:324
#: ../../ref/class-based-views/generic-date-based.txt:429
#: ../../ref/class-based-views/generic-date-based.txt:534
#: ../../ref/class-based-views/generic-date-based.txt:592
# 2eba38e04b7342efa9cfc6ae05828ae8
# 659de33d4c0d4c5fb47e4192b73f8004
# efe56248b66347af9cb636c992a89fe2
# a6fa5d145c5f4cbd8e3148caf3d21e9c
# a350504f727b42bab7603acd24ea62ce
# d240c2136e1d4788808d3878bac8b0c8
msgid ":class:`django.views.generic.dates.YearMixin`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:115
# 334f7cd118ed4794a609e4bec486e21b
msgid "A boolean specifying whether to retrieve the full list of objects for this year and pass those to the template. If ``True``, the list of objects will be made available to the context. If ``False``, the ``None`` queryset will be used as the object list. By default, this is ``False``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:123
# 057eefb8dcbe489ca02d2b6259e2cf81
msgid "Determine if an object list will be returned as part of the context. Returns :attr:`~YearArchiveView.make_object_list` by default."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:133
# 3f99c614842a4a279b65cebaa89f212b
msgid "``date_list``: A :meth:`DateQuerySet<django.db.models.query.QuerySet.dates>` object containing all months that have objects available according to ``queryset``, represented as :class:`datetime.datetime<python:datetime.datetime>` objects, in ascending order."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:140
# 435170cb4e364c2c98b85c40a9550c38
msgid "``year``: A :class:`~datetime.date` object representing the given year."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:145
# 59234656479446708c927b1c70f7ba70
msgid "Previously, this returned a string."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:147
# b16eea15855945119a6c6c409eb9cd51
msgid "``next_year``: A :class:`~datetime.date` object representing the first day of the next year, according to :attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:154
# 2d50b508390f4584a4ebd04156229a8a
msgid "``previous_year``: A :class:`~datetime.date` object representing the first day of the previous year, according to :attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:163
# 4b3dff71c3d0418681dec816ab80eacb
msgid "Uses a default ``template_name_suffix`` of ``_archive_year``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:189
# 1983e1ebab874c91b73d3b1817e0692d
msgid "**Example myapp/article_archive_year.html**:"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:213
# 0ed769f4cfc44e1daa0e10be4e702472
msgid "A monthly archive page showing all objects in a given month. Objects with a date in the *future* are not displayed unless you set ``allow_future`` to ``True``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:219
# 91a37ba0d73242518b592c687ae32b7c
msgid ":class:`django.views.generic.dates.MonthArchiveView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:222
# ce9b8194e30d400a83c6858ea8206424
msgid ":class:`django.views.generic.dates.BaseMonthArchiveView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:224
#: ../../ref/class-based-views/generic-date-based.txt:430
#: ../../ref/class-based-views/generic-date-based.txt:535
#: ../../ref/class-based-views/generic-date-based.txt:593
# 7e5c191c10d64caa8eb79d1da28315dc
# 7f60b79cd78843808779db069ca729d8
# 2de2363993e94c9b921ce2ba25798b0e
# b130fbd93c1543aa81419e14bcfc11e0
msgid ":class:`django.views.generic.dates.MonthMixin`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:232
#: ../../ref/class-based-views/generic-date-based.txt:333
#: ../../ref/class-based-views/generic-date-based.txt:439
# 3dd3d27c3c354f2286651057532c1aa2
# a4b6d96321554e0fb06cf4a59af7ffa8
# 081eedaf64194b7aab06e4fd66b91b7b
msgid "In addition to the context provided by :class:`~django.views.generic.list.MultipleObjectMixin` (via :class:`~django.views.generic.dates.BaseDateListView`), the template's context will be:"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:237
# f6d176d8db9542be934ddebf0dc08037
msgid "``date_list``: A :meth:`DateQuerySet<django.db.models.query.QuerySet.dates>` object containing all days that have objects available in the given month, according to ``queryset``, represented as :class:`datetime.datetime<python:datetime.datetime>` objects, in ascending order."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:244
# 158a41a8b01644eda78e6e7041067e16
msgid "``month``: A :class:`~datetime.date` object representing the given month."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:247
#: ../../ref/class-based-views/generic-date-based.txt:457
# 8a73448802844b52aabb4a8e6525fd1c
# ff36f646e13b487cb28d1d0269af3a15
msgid "``next_month``: A :class:`~datetime.date` object representing the first day of the next month, according to :attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:252
#: ../../ref/class-based-views/generic-date-based.txt:462
# a060025ffd2d442ea31bbb7d5781f61e
# d7d31e4c6c914e9d9e9e199e4367b7c7
msgid "``previous_month``: A :class:`~datetime.date` object representing the first day of the previous month, according to :attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:259
# 9e5bd58c265643aeb23780a33509d0f0
msgid "Uses a default ``template_name_suffix`` of ``_archive_month``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:290
# d4e39ad9c2e44eceb6150eb4f616c170
msgid "**Example myapp/article_archive_month.html**:"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:314
# 526fff1f1e8e43d3b9e180d2a6f7c47e
msgid "A weekly archive page showing all objects in a given week. Objects with a date in the *future* are not displayed unless you set ``allow_future`` to ``True``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:320
# 2663288f8ea047dbbf98c0949c928a99
msgid ":class:`django.views.generic.dates.WeekArchiveView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:323
# 48701c2f737d4f81b97cb31c4b35aa49
msgid ":class:`django.views.generic.dates.BaseWeekArchiveView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:325
# c739a3199820476088d0cc6aa7682f4b
msgid ":class:`django.views.generic.dates.WeekMixin`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:338
# 58a09b516fe44a75ba9f3b46a8dfc807
msgid "``week``: A :class:`~datetime.date` object representing the first day of the given week."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:341
# 5a66b888b59c40fea879967dd2464cb8
msgid "``next_week``: A :class:`~datetime.date` object representing the first day of the next week, according to :attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:346
# d82fed54de4c4e38a120e97bf07df63f
msgid "``previous_week``: A :class:`~datetime.date` object representing the first day of the previous week, according to :attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:353
# e336b488a5474defbdaeb47bc16c8af6
msgid "Uses a default ``template_name_suffix`` of ``_archive_week``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:381
# ad6716988c0048c3b9500303313a2323
msgid "**Example myapp/article_archive_week.html**:"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:403
# 9cbc2b968dc84e20b88be1de527f5bf3
msgid "In this example, you are outputting the week number. The default ``week_format`` in the ``WeekArchiveView`` uses  week format ``'%U'`` which is based on the United States week system where the week begins on a Sunday. The ``'%W'`` format uses the ISO week format and its week begins on a Monday.  The ``'%W'`` format is the same in both the :func:`~time.strftime` and the :tfilter:`date`."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:410
# 5fd5fff0551b48bb86947ecf053e98d1
msgid "However, the :tfilter:`date` template filter does not have an equivalent output format that supports the US based week system. The :tfilter:`date` filter ``'%U'`` outputs the number of seconds since the Unix epoch."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:419
# a264c663fbc6460ebd3d3e8c19134115
msgid "A day archive page showing all objects in a given day. Days in the future throw a 404 error, regardless of whether any objects exist for future days, unless you set ``allow_future`` to ``True``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:425
# 6541160fd32a464eb792f3c1dc74a88e
msgid ":class:`django.views.generic.dates.DayArchiveView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:428
#: ../../ref/class-based-views/generic-date-based.txt:533
# b10e473953054155a8217f98b9a0bcea
# d30605d23e004629aafa2fd30d4a7083
msgid ":class:`django.views.generic.dates.BaseDayArchiveView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:431
#: ../../ref/class-based-views/generic-date-based.txt:536
#: ../../ref/class-based-views/generic-date-based.txt:594
# 9af55f7dce5b4523be6045178e3af0ed
# 3658b03f2d3a4f57ad2e960386edbd78
# 918809f7e9144ac98758cb4b5d7f416f
msgid ":class:`django.views.generic.dates.DayMixin`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:444
# 96fbbe6ad0a24c4391d3be8cb8121e66
msgid "``day``: A :class:`~datetime.date` object representing the given day."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:447
# 4d1fb2ec7f8f4542ac9935eb8873c4aa
msgid "``next_day``: A :class:`~datetime.date` object representing the next day, according to :attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:452
# c3deb85357344eb598b83c7eca1664c8
msgid "``previous_day``: A :class:`~datetime.date` object representing the previous day, according to :attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:469
# e5289ebc9e6244d691e3c6908fabb8e8
msgid "Uses a default ``template_name_suffix`` of ``_archive_day``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:496
# 814f6fa5312d495f8e386eb8472980de
msgid "**Example myapp/article_archive_day.html**:"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:523
# 322fb964ce8e4d61ad1b2ee43fa8d1f9
msgid "A day archive page showing all objects for *today*. This is exactly the same as :class:`django.views.generic.dates.DayArchiveView`, except today's date is used instead of the ``year``/``month``/``day`` arguments."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:529
# 6c8cb58fd30e4f9c9f849abc82ac4949
msgid ":class:`django.views.generic.dates.TodayArchiveView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:532
# fb93fa19e6224f32b6c3f74d7f9047b2
msgid ":class:`django.views.generic.dates.BaseTodayArchiveView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:544
# 276c0d78f6a94503ad6fb774ac99760c
msgid "Uses a default ``template_name_suffix`` of ``_archive_today``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:572
# e9c1cc422b9543d8b9aabce59509103f
msgid "This view uses by default the same template as the :class:`~DayArchiveView`, which is in the previous example. If you need a different template, set the ``template_name`` attribute to be the name of the new template."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:582
# 305b898e5ce540fcafb5edeaf214c799
msgid "A page representing an individual object. If the object has a date value in the future, the view will throw a 404 error by default, unless you set ``allow_future`` to ``True``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:588
# bbee730c06524cf8a9acdb19b6de0b92
msgid ":class:`django.views.generic.dates.DateDetailView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:589
#: ../../ref/class-based-views/generic-display.txt:20
#: ../../ref/class-based-views/generic-editing.txt:87
#: ../../ref/class-based-views/generic-editing.txt:129
#: ../../ref/class-based-views/generic-editing.txt:171
# 7cbc41f9270c4c03b7e409abc1fd3b8b
# 00e771c95ef7447d8914c1e0fe9e889e
# f3b0fefa051b4d7d893020bf02994a6f
# cdfa61351b6e475ea16da9135d7670a6
# ecd2c8360e9740d4a70d02aed7e2557b
msgid ":class:`django.views.generic.detail.SingleObjectTemplateResponseMixin`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:591
# 8e93cadc34d44f57a121021e2de99163
msgid ":class:`django.views.generic.dates.BaseDateDetailView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:596
#: ../../ref/class-based-views/generic-display.txt:22
#: ../../ref/class-based-views/generic-editing.txt:175
# 2ad5d8cf50dd45b0a0d8a3561a2a42ea
# f5b32f944e5349cb9013de61caf2232c
# 7260595ec8a24e1d8d12d39c9f52a776
msgid "``django.views.generic.detail.BaseDetailView``"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:597
#: ../../ref/class-based-views/generic-display.txt:23
#: ../../ref/class-based-views/generic-editing.txt:92
#: ../../ref/class-based-views/generic-editing.txt:134
#: ../../ref/class-based-views/generic-editing.txt:176
#: ../../ref/class-based-views/mixins-editing.txt:114
# a6457a5cf9b4436bbb08ddd033ab2edb
# cdcd5f6d300a4113b31eb0eb97892d6f
# 06101f4f838c44418fa1873858142b6a
# dbb412cff0f240f491bc7bcfcfb56bc7
# 0d5d23e5196f4da4a36726170d640c82
# f3616ff5114540d3b656ea2fa00ff17b
msgid ":class:`django.views.generic.detail.SingleObjectMixin`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:602
# 375b510c8ab2478da50fab58a5bed4a0
msgid "Includes the single object associated with the ``model`` specified in the ``DateDetailView``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:607
# a9c75329fecd4bfaa9936a28a7a2badd
msgid "Uses a default ``template_name_suffix`` of ``_detail``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:620
# 5d52f21b5c2d49d1b9462b2aa0ac09c4
msgid "**Example myapp/article_detail.html**:"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:628
# 5cd738edab9341849ec0e4e79b502519
msgid "All of the generic views listed above have matching ``Base`` views that only differ in that the they do not include the :class:`~django.views.generic.detail.SingleObjectTemplateResponseMixin`:"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:3
# eaaf255c8fdd44df9a2607762d3e0cb1
msgid "Generic display views"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:5
# bf272b54189547988371940852ef9b60
msgid "The two following generic class-based views are designed to display data. On many projects they are typically the most commonly used views."
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:13
# b9bf9ef597b044b699d0e31b40589a9b
msgid "While this view is executing, ``self.object`` will contain the object that the view is operating upon."
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:30
#: ../../ref/class-based-views/generic-display.txt:91
# 05135d7f96594528a3ccc3c15e437f37
# d6d4a1eb22654deb8072ca31bbddec5d
msgid ":meth:`~django.views.generic.base.TemplateResponseMixin.get_template_names()`"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:31
# aa5da4db6c914539bcbb98b52979b811
msgid ":meth:`~django.views.generic.detail.SingleObjectMixin.get_slug_field()`"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:32
# b9a8ab0b1a6646febd189890250cf4eb
msgid ":meth:`~django.views.generic.detail.SingleObjectMixin.get_queryset()`"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:33
# 0a97ba3139984083b363f8043b577dbc
msgid ":meth:`~django.views.generic.detail.SingleObjectMixin.get_object()`"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:34
# 17b6a033a4f748868061f791798aad31
msgid ":meth:`~django.views.generic.detail.SingleObjectMixin.get_context_object_name()`"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:35
# 7e34df6aeedb4c2e839872b90c820ccd
msgid ":meth:`~django.views.generic.detail.SingleObjectMixin.get_context_data()`"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:37
#: ../../ref/class-based-views/generic-display.txt:96
# 4b81f20a7e7b409e9000eadc57fb7a55
# e5ce823c53f3457c898b4ec7357855dd
msgid ":meth:`~django.views.generic.base.TemplateResponseMixin.render_to_response()`"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:70
# 746eb765162a48f2ba8386c01f8df686
msgid "A page representing a list of objects."
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:72
# 919db3e5b0184f41bacad5075b528315
msgid "While this view is executing, ``self.object_list`` will contain the list of objects (usually, but not necessarily a queryset) that the view is operating upon."
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:80
# 8630f351842245d289f5d2eaaf222968
msgid ":class:`django.views.generic.list.ListView`"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:83
# 7accd658dfdf4160b17b92cc9143f4dc
msgid ":class:`django.views.generic.list.BaseListView`"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:92
# ecb45c4ded4747399d4032748f854d29
msgid ":meth:`~django.views.generic.list.MultipleObjectMixin.get_queryset()`"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:93
# 848e9b37a9cf44db875949c354c30a69
msgid ":meth:`~django.views.generic.list.MultipleObjectMixin.get_context_object_name()`"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:94
# 2de1e77559084265adc448fa92e51603
msgid ":meth:`~django.views.generic.list.MultipleObjectMixin.get_context_data()`"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:127
# 1a15eed513684bf99caf44f6abac0c43
msgid "A base view for displaying a list of objects. It is not intended to be used directly, but rather as a parent class of the :class:`django.views.generic.list.ListView` or other views representing lists of objects."
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:143
# 2c931916cdc44f44b09e5b4525d915a1
msgid "Adds ``object_list`` to the context. If :attr:`~django.views.generic.list.MultipleObjectMixin.allow_empty` is True then display an empty list. If :attr:`~django.views.generic.list.MultipleObjectMixin.allow_empty` is False then raise a 404 error."
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:3
# b9702255c90f43c19192cac742ea3aee
msgid "Generic editing views"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:5
# 20c491a298bc4c63a22b0c188ef45bb2
msgid "The following views are described on this page and provide a foundation for editing content:"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:8
#: ../../ref/class-based-views/generic-editing.txt:39
# 39cf4280df5c45b6b673e5fc8de32337
# 958c1759962e46d0a4e31e77146140a1
msgid ":class:`django.views.generic.edit.FormView`"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:9
#: ../../ref/class-based-views/generic-editing.txt:86
# 666e9e9d5ea840bfae248278d2d94ae2
# 764d2d43392f48778f678dbe0ed8b642
msgid ":class:`django.views.generic.edit.CreateView`"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:10
#: ../../ref/class-based-views/generic-editing.txt:128
# fecd86e9c5aa41c5a424b1b41780fe74
# fab9d3390a8c433d94d7a0621f347a04
msgid ":class:`django.views.generic.edit.UpdateView`"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:11
#: ../../ref/class-based-views/generic-editing.txt:170
# 8f22f52d43c64261adac6e9b302c2093
# 97476106408145018fe70b978b1db6c6
msgid ":class:`django.views.generic.edit.DeleteView`"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:32
# c7c89a139174425e8c907a5bfb4f941f
msgid "A view that displays a form. On error, redisplays the form with validation errors; on success, redirects to a new URL."
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:41
# ec3465d24ab84247bc08bf779daf392d
msgid "``django.views.generic.edit.BaseFormView``"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:42
#: ../../ref/class-based-views/generic-editing.txt:91
#: ../../ref/class-based-views/generic-editing.txt:133
#: ../../ref/class-based-views/mixins-editing.txt:7
#: ../../ref/class-based-views/mixins-editing.txt:113
# 49651acfd3fb4de88d77e9c72e898744
# 856d5ced62534fe7a9aa826dc56ee7ff
# d2a55bba1d9b44228d9579878aca0483
# f3cc7a2af62c49b297ec65285b9f87c3
# 503111358d6643fc8282914356fa4a7f
msgid ":class:`django.views.generic.edit.FormMixin`"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:43
#: ../../ref/class-based-views/generic-editing.txt:93
#: ../../ref/class-based-views/generic-editing.txt:135
#: ../../ref/class-based-views/mixins-editing.txt:9
# cffb46155a944c0c9257f839e27ab259
# 8c1a4d4377a848e8b0729608bb902df1
# 36a796de0cd242e2afc78e534323d48f
# af5ffc20feaf4132b45799a0bd776acb
msgid ":class:`django.views.generic.edit.ProcessFormView`"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:46
# d4b3ed73b25b45dbb0e15767ad656456
msgid "**Example forms.py**::"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:79
# 9e7a0198fb7448efa1c040c6e36c9308
msgid "A view that displays a form for creating an object, redisplaying the form with validation errors (if there are any) and saving the object."
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:89
# e11728ba44684b90affb794e32a4a9a8
msgid "``django.views.generic.edit.BaseCreateView``"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:90
#: ../../ref/class-based-views/generic-editing.txt:132
#: ../../ref/class-based-views/mixins-editing.txt:8
# 1ba15a05c8424bd2a184f361b688ba2b
# f49a422e548e4571b9383c8650930925
# 1e7b39fe05eb442ebbd752669f2186ea
msgid ":class:`django.views.generic.edit.ModelFormMixin`"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:100
# b1a25ab24c114a948028e6e381aeffdc
msgid "The ``CreateView`` page displayed to a ``GET`` request uses a ``template_name_suffix`` of ``'_form'``. For example, changing this attribute to ``'_create_form'`` for a view creating objects for the example ``Author`` model would cause the default ``template_name`` to be ``'myapp/author_create_form.html'``."
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:119
# 66cd4147186a42a2a120837da256247d
msgid "A view that displays a form for editing an existing object, redisplaying the form with validation errors (if there are any) and saving changes to the object. This uses a form automatically generated from the object's model class (unless a form class is manually specified)."
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:131
# b8a421f261064c348bf92dc883fda9bb
msgid "``django.views.generic.edit.BaseUpdateView``"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:142
# 301c42f90edd40ae845423bb73e3e9b0
msgid "The ``UpdateView`` page displayed to a ``GET`` request uses a ``template_name_suffix`` of ``'_form'``. For example, changing this attribute to ``'_update_form'`` for a view updating objects for the example ``Author`` model would cause the default ``template_name`` to be ``'myapp/author_update_form.html'``."
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:161
# 8865ee102bc54979a9e04c7e8484862c
msgid "A view that displays a confirmation page and deletes an existing object. The given object will only be deleted if the request method is ``POST``. If this view is fetched via ``GET``, it will display a confirmation page that should contain a form that POSTs to the same URL."
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:173
# 5fc2de17ff7d4258b05b097aa0b4b6f6
msgid "``django.views.generic.edit.BaseDeleteView``"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:174
#: ../../ref/class-based-views/mixins-editing.txt:10
# 23495259f9014998b40b335231d95ca8
# 75aa8d4d49ba4bb7840936b1130d978b
msgid ":class:`django.views.generic.edit.DeletionMixin`"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:183
# 0ea5649632bc484f9665936d74c9eb1f
msgid "The ``DeleteView`` page displayed to a ``GET`` request uses a ``template_name_suffix`` of ``'_confirm_delete'``. For example, changing this attribute to ``'_check_delete'`` for a view deleting objects for the example ``Author`` model would cause the default ``template_name`` to be ``'myapp/author_check_delete.html'``."
msgstr ""

#: ../../ref/class-based-views/index.txt:3
# 90f1e8dfc3a0460fbf2089108102f606
msgid "Class-based views"
msgstr ""

#: ../../ref/class-based-views/index.txt:5
# ef21277a256e42ef922ad5398287dcc6
msgid "Class-based views API reference. For introductory material, see :doc:`/topics/class-based-views/index`."
msgstr ""

#: ../../ref/class-based-views/index.txt:19
# 912e8ddfb9024aaab094d0f8c68c3f8d
msgid "Specification"
msgstr ""

#: ../../ref/class-based-views/index.txt:21
# ed335775250944e5bea1f37e71edd29d
msgid "Each request served by a class-based view has an independent state; therefore, it is safe to store state variables on the instance (i.e., ``self.foo = 3`` is a thread-safe operation)."
msgstr ""

#: ../../ref/class-based-views/index.txt:25
# c036c7c6f4b04256b55b59eccd6b24f7
msgid "A class-based view is deployed into a URL pattern using the :meth:`~django.views.generic.base.View.as_view()` classmethod::"
msgstr ""

#: ../../ref/class-based-views/index.txt:34
# 7f079ae1807349bbbeea7b887d3fa3db
msgid "Arguments passed to a view are shared between every instance of a view. This means that you shoudn't use a list, dictionary, or any other mutable object as an argument to a view. If you do and the shared object is modified, the actions of one user visiting your view could have an effect on subsequent users visiting the same view."
msgstr ""

#: ../../ref/class-based-views/index.txt:40
# c5a34c608b384140b42f52f449bbde05
msgid "Arguments passed into :meth:`~django.views.generic.base.View.as_view()` will be assigned onto the instance that is used to service a request. Using the previous example, this means that every request on ``MyView`` is able to use ``self.size``. Arguments must correspond to attributes that already exist on the class (return ``True`` on a ``hasattr`` check)."
msgstr ""

#: ../../ref/class-based-views/index.txt:47
# c469d40e5e0d48f7bbe3257ac31d56d8
msgid "Base vs Generic views"
msgstr ""

#: ../../ref/class-based-views/index.txt:49
# 3b81ff746d2048fb8444bd8e65c4eaa1
msgid "Base class-based views can be thought of as *parent* views, which can be used by themselves or inherited from. They may not provide all the capabilities required for projects, in which case there are Mixins which extend what base views can do."
msgstr ""

#: ../../ref/class-based-views/index.txt:54
# bff1e3d13a2848948d55b597084c31e1
msgid "Django’s generic views are built off of those base views, and were developed as a shortcut for common usage patterns such as displaying the details of an object. They take certain common idioms and patterns found in view development and abstract them so that you can quickly write common views of data without having to repeat yourself."
msgstr ""

#: ../../ref/class-based-views/index.txt:60
# fc3a998fd6f6497c90bc0f42d5a137d2
msgid "Most generic views require the ``queryset`` key, which is a ``QuerySet`` instance; see :doc:`/topics/db/queries` for more information about ``QuerySet`` objects."
msgstr ""

#: ../../ref/class-based-views/mixins.txt:3
# 7ed56d6f5aaa44ec98ae208ab50c7785
msgid "Class-based views mixins"
msgstr ""

#: ../../ref/class-based-views/mixins.txt:5
# a84429ce06c546db892b6696d6261bb4
msgid "Class-based views API reference. For introductory material, see :doc:`/topics/class-based-views/mixins`."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:3
# b8786bca279c40f1baf092cc4c241043
msgid "Date-based mixins"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:8
# fdbdf94f9b6044ada119fa85c251a5c5
msgid "YearMixin"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:12
# abdaf3ee14174ce6a29c29c44849c371
msgid "A mixin that can be used to retrieve and provide parsing information for a year component of a date."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:15
#: ../../ref/class-based-views/mixins-date-based.txt:67
#: ../../ref/class-based-views/mixins-date-based.txt:119
#: ../../ref/class-based-views/mixins-date-based.txt:171
#: ../../ref/class-based-views/mixins-date-based.txt:223
#: ../../ref/class-based-views/mixins-date-based.txt:282
#: ../../ref/class-based-views/mixins-editing.txt:24
#: ../../ref/class-based-views/mixins-editing.txt:116
#: ../../ref/class-based-views/mixins-editing.txt:184
#: ../../ref/class-based-views/mixins-editing.txt:205
#: ../../ref/class-based-views/mixins-multiple-object.txt:46
#: ../../ref/class-based-views/mixins-multiple-object.txt:178
#: ../../ref/class-based-views/mixins-single-object.txt:13
#: ../../ref/class-based-views/mixins-single-object.txt:107
# 16cd73b5e55b4b1da606a7fca03b5d95
# 95c77149db8b46edbce5062ae03cd2ec
# eded54dc0d6049b187a4e711d4d3dc1b
# 6ed4706538f04e868d3ee0e2af3dc090
# 7572b66e4134469995d4d45f53b16880
# fc63341ebc374280bd533beebd79448b
# 05f79dadc83d459782973444fe7b4982
# 33ff560229ba4ad590722545d01afd1a
# d77fbec2cc434b15894399eddbc6ab66
# 2e4af857536a4d339dcf7897801a8406
# 061786ea0d0848a09884de8071aad097
# 74d0d6d9daf144f49adec7f002cb464d
# de2774ee13834b1990189498afa92278
# 3f530460c6e04bec93ce8545694d72fe
msgid "**Methods and Attributes**"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:19
# 54726123cafb48ccac678e00c81c7d3d
msgid "The :func:`~time.strftime` format to use when parsing the year. By default, this is ``'%Y'``."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:24
# cb76e4ba38ed478aa52e803b0ff9750a
msgid "**Optional** The value for the year, as a string. By default, set to ``None``, which means the year will be determined using other means."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:29
# bd293e377d534046bc527998e50f3dba
msgid "Returns the :func:`~time.strftime` format to use when parsing the year. Returns :attr:`~YearMixin.year_format` by default."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:34
# 8c8337b6e1ec4d2ca5297972b8ceebf3
msgid "Returns the year for which this view will display data, as a string. Tries the following sources, in order:"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:37
# 83ded85e656243a3a709786a84a14e1f
msgid "The value of the :attr:`YearMixin.year` attribute."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:38
# 2bb4aa65fd074daa99b60ae689f8b240
msgid "The value of the ``year`` argument captured in the URL pattern."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:39
# a46dcc4617f24bc58e8dea8a17e4b2ad
msgid "The value of the ``year`` ``GET`` query argument."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:41
# 33dc92594dbf4f4182db16705874f291
msgid "Raises a 404 if no valid year specification can be found."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:45
# 966a98e89daf4a679f5b1117a73b4a4e
msgid "Returns a date object containing the first day of the year after the date provided. This function can also return ``None`` or raise an :class:`~django.http.Http404` exception, depending on the values of :attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:53
# e57507a47e7048d4b0a595eb907dd98d
msgid "Returns a date object containing the first day of the year before the date provided. This function can also return ``None`` or raise an :class:`~django.http.Http404` exception, depending on the values of :attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:60
# 7638118a98c548a390f2ce5e5cc0f6b7
msgid "MonthMixin"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:64
# d117472783494b8cb750e5235fe81f25
msgid "A mixin that can be used to retrieve and provide parsing information for a month component of a date."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:71
# 678934082ec149c8be81ee98d5a68e0b
msgid "The :func:`~time.strftime` format to use when parsing the month. By default, this is ``'%b'``."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:76
# 2125de4dda384ffa89ccc148c88276e0
msgid "**Optional** The value for the month, as a string. By default, set to ``None``, which means the month will be determined using other means."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:81
# 6354c028403e42e49e2dc65281b5064b
msgid "Returns the :func:`~time.strftime` format to use when parsing the month. Returns :attr:`~MonthMixin.month_format` by default."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:86
# 2ab8c2cfa12a4b1d86ddc3ac34a774a2
msgid "Returns the month for which this view will display data, as a string. Tries the following sources, in order:"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:89
# c7d5097d3bb443cab442a3b813750273
msgid "The value of the :attr:`MonthMixin.month` attribute."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:90
# d7c5a16419154e99bb5745be1bd2cfc1
msgid "The value of the ``month`` argument captured in the URL pattern."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:91
# 63eb88165a3f48339293c92963ef7f1e
msgid "The value of the ``month`` ``GET`` query argument."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:93
# 419f5bb1594c48cca4c9ac5770c55d92
msgid "Raises a 404 if no valid month specification can be found."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:97
# b10ccc46111c481794433a1a6f243bed
msgid "Returns a date object containing the first day of the month after the date provided. This function can also return ``None`` or raise an :class:`~django.http.Http404` exception, depending on the values of :attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:105
# f1a1ccd59ba94179811f62b044445973
msgid "Returns a date object containing the first day of the month before the date provided. This function can also return ``None`` or raise an :class:`~django.http.Http404` exception, depending on the values of :attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:112
# c0bac870c5e943408fac1ad7ae7cc739
msgid "DayMixin"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:116
# f49656b085f744dba643fcd84cb550ed
msgid "A mixin that can be used to retrieve and provide parsing information for a day component of a date."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:123
# 16c7bb409d704713a0174077a40b7236
msgid "The :func:`~time.strftime` format to use when parsing the day. By default, this is ``'%d'``."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:128
# f0e57ed5dd454fb9bd88e1b508efa9ea
msgid "**Optional** The value for the day, as a string. By default, set to ``None``, which means the day will be determined using other means."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:133
# ba18811ca6334fd38727bc42b6ac282c
msgid "Returns the :func:`~time.strftime` format to use when parsing the day. Returns :attr:`~DayMixin.day_format` by default."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:138
# cf29b4add48b44e3906d3ab458f2e966
msgid "Returns the day for which this view will display data, as a string. Tries the following sources, in order:"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:141
# a46b60e7a5bc4e62ad08953bf90c11ed
msgid "The value of the :attr:`DayMixin.day` attribute."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:142
# 74fe36b5788048e9a481a00ccb051c19
msgid "The value of the ``day`` argument captured in the URL pattern."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:143
# 170ebff5bdad42ebaf590d2678d20128
msgid "The value of the ``day`` ``GET`` query argument."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:145
# 5d08bab66e824b37853998a0673d1ffe
msgid "Raises a 404 if no valid day specification can be found."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:149
# a7cae2e6e3754f7fa60d63d678b8db00
msgid "Returns a date object containing the next valid day after the date provided. This function can also return ``None`` or raise an :class:`~django.http.Http404` exception, depending on the values of :attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:157
# 55229c7ab0a146b2b1e3444ed4b77204
msgid "Returns a date object containing the previous valid day. This function can also return ``None`` or raise an :class:`~django.http.Http404` exception, depending on the values of :attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:164
# bb6897fa79884c72b44924a5468fea5a
msgid "WeekMixin"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:168
# cdeb9e01c4ab4931bbc28c7f72912d4d
msgid "A mixin that can be used to retrieve and provide parsing information for a week component of a date."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:175
# 21469d9391484fc7ac2a223d3db26fa7
msgid "The :func:`~time.strftime` format to use when parsing the week. By default, this is ``'%U'``, which means the week starts on Sunday. Set it to ``'%W'`` if your week starts on Monday."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:181
# 94a299fc47b94e7fa127cd5913fe6ec5
msgid "**Optional** The value for the week, as a string. By default, set to ``None``, which means the week will be determined using other means."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:186
# f016d7f812534abf93d0bcf030f8e98b
msgid "Returns the :func:`~time.strftime` format to use when parsing the week. Returns :attr:`~WeekMixin.week_format` by default."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:191
# fe2fcbda602949a18d3b7f3bd335540d
msgid "Returns the week for which this view will display data, as a string. Tries the following sources, in order:"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:194
# cfe25db6575c49398455d7660a3bc531
msgid "The value of the :attr:`WeekMixin.week` attribute."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:195
# f06540946c2b450199ac6feb99254855
msgid "The value of the ``week`` argument captured in the URL pattern"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:196
# 1edc154039954dbd9378af8bb1df76fc
msgid "The value of the ``week`` ``GET`` query argument."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:198
# b8a6d2c7a9d04c858e29f9c33972f8e0
msgid "Raises a 404 if no valid week specification can be found."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:202
# 5397d21629b7459daf237e6a6baad07a
msgid "Returns a date object containing the first day of the week after the date provided. This function can also return ``None`` or raise an :class:`~django.http.Http404` exception, depending on the values of :attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:210
# cf9a85fc30a943ce9b5a3dfefb1ad70c
msgid "Returns a date object containing the first day of the week before the date provided. This function can also return ``None`` or raise an :class:`~django.http.Http404` exception, depending on the values of :attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:217
# 6ec58539873e4a5393ef75eeedb38f9a
msgid "DateMixin"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:221
# f60516e90a0d4eef90ba54c93f20b330
msgid "A mixin class providing common behavior for all date-based views."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:227
# 86c7c8b850424fb0bed709c9b4539313
msgid "The name of the ``DateField`` or ``DateTimeField`` in the ``QuerySet``'s model that the date-based archive should use to determine the list of objects to display on the page."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:231
# a1d0c302babf46519c1f19070706942c
msgid "When :doc:`time zone support </topics/i18n/timezones>` is enabled and ``date_field`` is a ``DateTimeField``, dates are assumed to be in the current time zone. Otherwise, the queryset could include objects from the previous or the next day in the end user's time zone."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:238
# 1bbc7c7b90124349b9c9fb6802b20610
msgid "In this situation, if you have implemented per-user time zone selection, the same URL may show a different set of objects, depending on the end user's time zone. To avoid this, you should use a ``DateField`` as the ``date_field`` attribute."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:245
# 49c008b5aa3e4f1f852623c641a81b6c
msgid "A boolean specifying whether to include \"future\" objects on this page, where \"future\" means objects in which the field specified in ``date_field`` is greater than the current date/time. By default, this is ``False``."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:252
# 3d862d3bc73f4d86bde7b9a97743b109
msgid "Returns the name of the field that contains the date data that this view will operate on. Returns :attr:`~DateMixin.date_field` by default."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:257
# c1ede3d55cc448b09ec5edf9c233a928
msgid "Determine whether to include \"future\" objects on this page, where \"future\" means objects in which the field specified in ``date_field`` is greater than the current date/time. Returns :attr:`~DateMixin.allow_future` by default."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:263
# 5df49c3795af460b88eecf5d46eb9568
msgid "BaseDateListView"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:267
# 5281dc300aaa484eb77f4f7fa2840f85
msgid "A base class that provides common behavior for all date-based views. There won't normally be a reason to instantiate :class:`~django.views.generic.dates.BaseDateListView`; instantiate one of the subclasses instead."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:272
# be01b6f9b251438ba6549e47ffd6813b
msgid "While this view (and its subclasses) are executing, ``self.object_list`` will contain the list of objects that the view is operating upon, and ``self.date_list`` will contain the list of dates for which data is available."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:277
#: ../../ref/class-based-views/mixins-editing.txt:111
# 1ee31dfcaa6a452786f84447cbeda1d4
# 15a40eb832914183b71c931d26c3ef29
msgid "**Mixins**"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:279
# 724f07e8eb454cc58cbdfee5ec2973b1
msgid ":class:`~django.views.generic.dates.DateMixin`"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:280
# b6d0e97ec53c4d5a8c57156b6b8e75e8
msgid ":class:`~django.views.generic.list.MultipleObjectMixin`"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:286
# 46a332b76a1a4321a5ebb13cf570727c
msgid "A boolean specifying whether to display the page if no objects are available. If this is ``True`` and no objects are available, the view will display an empty page instead of raising a 404."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:290
# 40c5cae4745c44a5a297479bbf9eba97
msgid "This is identical to :attr:`django.views.generic.list.MultipleObjectMixin.allow_empty`, except for the default value, which is ``False``."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:296
# 7897b678ffb3495c9aedba409f860858
msgid "**Optional** A string defining the aggregation period for ``date_list``. It must be one of ``'year'`` (default), ``'month'``, or ``'day'``."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:302
# 0fc7ca797f9d40bfa3d8c61b85cbf5d9
msgid "Returns a 3-tuple containing (``date_list``, ``object_list``, ``extra_context``)."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:305
# 0cc493227a0e406fba5dafecc49ca9a3
msgid "``date_list`` is the list of dates for which data is available. ``object_list`` is the list of objects. ``extra_context`` is a dictionary of context data that will be added to any context data provided by the :class:`~django.views.generic.list.MultipleObjectMixin`."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:313
# 4fc9819c7641469a91ce7583ec819b69
msgid "Returns a queryset, filtered using the query arguments defined by ``lookup``. Enforces any restrictions on the queryset, such as ``allow_empty`` and ``allow_future``."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:319
# 7a22470fb1ce4e35a8d1ebb1a0a8e50e
msgid "Returns the aggregation period for ``date_list``. Returns :attr:`~BaseDateListView.date_list_period` by default."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:324
# 23ba6b8a4dda4a849109005f20574340
msgid "Returns the list of dates of type ``date_type`` for which ``queryset`` contains entries. For example, ``get_date_list(qs, 'year')`` will return the list of years for which ``qs`` has entries. If ``date_type`` isn't provided, the result of :meth:`~BaseDateListView.get_date_list_period` is used. ``date_type`` and ``ordering`` are simply passed to :meth:`QuerySet.dates()<django.db.models.query.QuerySet.dates>`."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:3
# 84f347e62a8e40d89b860d00fe6304bf
msgid "Editing mixins"
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:5
# 3721c6851ebd4a1483d4c9d64f526ee7
msgid "The following mixins are used to construct Django's editing views:"
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:14
# 04d8aa9dfd3f4f9ebe6b15fcfc6b7d8d
msgid "Examples of how these are combined into editing views can be found at the documentation on ``Generic editing views``."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:18
# 2d42b9a94bc0451bbdcc5c6960b36266
msgid "FormMixin"
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:22
# 0924cde8c096472fbe1166c55404993a
msgid "A mixin class that provides facilities for creating and displaying forms."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:28
# 3e8a6e6b05f148b084822cbfe01853b4
msgid "A dictionary containing initial data for the form."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:32
# 56a75cad420c44fabff3915de90e414b
msgid "The form class to instantiate."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:36
#: ../../ref/class-based-views/mixins-editing.txt:126
# d854258af2a84e2b88ea38841dd2aa13
# 7edb3e7130134a5a82582e81a6d72161
msgid "The URL to redirect to when the form is successfully processed."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:40
# 3336f7e3530542b2bba946c37f7540c7
msgid "Retrieve initial data for the form. By default, returns a copy of :attr:`~django.views.generic.edit.FormMixin.initial`."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:50
# ee72bea917e24d05af398e63aadffa0f
msgid "Retrieve the form class to instantiate. By default :attr:`.form_class`."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:55
# 6fba10b4196a433b903e7573a153662f
msgid "Instantiate an instance of ``form_class`` using :meth:`~django.views.generic.edit.FormMixin.get_form_kwargs`."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:60
# 5ef82d88cd844ab883c274edd5819096
msgid "Build the keyword arguments required to instantiate the form."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:62
# 2d7fb27786a8474fb23d3988cb134a3f
msgid "The ``initial`` argument is set to :meth:`.get_initial`. If the request is a ``POST`` or ``PUT``, the request data (``request.POST`` and ``request.FILES``) will also be provided."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:68
# 5d7ebceea6a14c4e8346085f5eee142d
msgid "Determine the URL to redirect to when the form is successfully validated. Returns :attr:`~django.views.generic.edit.FormMixin.success_url` by default."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:74
# fd9373aa3eb84a099c4ef7060409108b
msgid "Redirects to :meth:`~django.views.generic.edit.FormMixin.get_success_url`."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:79
#: ../../ref/class-based-views/mixins-editing.txt:164
# 98f14246be6b496b946fb13c7f5ebb81
# 169000de2f31444eae3aea5670926faa
msgid "Renders a response, providing the invalid form as context."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:83
# 15452d1810de472295bf88ce870b5810
msgid "Populates a context containing the contents of ``kwargs``."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:87
# 1e1cdae2cc1e47a0aca83c3a06d17531
msgid "``form``: The form instance that was generated for the view."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:91
# f40c410cb9994f6f801bf24ea75dc4ae
msgid "Views mixing ``FormMixin`` must provide an implementation of :meth:`form_valid` and :meth:`form_invalid`."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:96
# c36b059776514d1ca6725d5c40b13307
msgid "ModelFormMixin"
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:100
# 25136967b1174e89a0cbc49e3f76ff07
msgid "A form mixin that works on ``ModelForms``, rather than a standalone form."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:102
# 311bfee9f159486888bfb7331fd857df
msgid "Since this is a subclass of :class:`~django.views.generic.detail.SingleObjectMixin`, instances of this mixin have access to the :attr:`~django.views.generic.detail.SingleObjectMixin.model` and :attr:`~django.views.generic.detail.SingleObjectMixin.queryset` attributes, describing the type of object that the ``ModelForm`` is manipulating. The view also provides ``self.object``, the instance being manipulated. If the instance is being created, ``self.object`` will be ``None``."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:120
# 80bbc09c76c44bc497f61a391a2704a5
msgid "A model class. Can be explicitly provided, otherwise will be determined by examining ``self.object`` or :attr:`~django.views.generic.detail.SingleObjectMixin.queryset`."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:128
# 42ed5739a0a74dcdbb4e1a6749ebbac8
msgid "``success_url`` may contain dictionary string formatting, which will be interpolated against the object's field attributes. For example, you could use ``success_url=\"/polls/%(slug)s/\"`` to redirect to a URL composed out of the ``slug`` field on a model."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:135
# d5d8bae0a3604e89ba85d53574c83ce1
msgid "Retrieve the form class to instantiate. If :attr:`~django.views.generic.edit.FormMixin.form_class` is provided, that class will be used. Otherwise, a ``ModelForm`` will be instantiated using the model associated with the :attr:`~django.views.generic.detail.SingleObjectMixin.queryset`, or with the :attr:`~django.views.generic.detail.SingleObjectMixin.model`, depending on which attribute is provided."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:145
# 437e5a0ea1b747e08f1c4afdbed4a594
msgid "Add the current instance (``self.object``) to the standard :meth:`~django.views.generic.edit.FormMixin.get_form_kwargs`."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:150
# b3867eac67064d71ac7af34e2a67b6b6
msgid "Determine the URL to redirect to when the form is successfully validated. Returns :attr:`django.views.generic.edit.ModelFormMixin.success_url` if it is provided; otherwise, attempts to use the ``get_absolute_url()`` of the object."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:158
# cbcfd1ca086a4c658bd0dd31b144f6bf
msgid "Saves the form instance, sets the current object for the view, and redirects to :meth:`~django.views.generic.edit.FormMixin.get_success_url`."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:168
# 7638e1fccf2f4636a3d5476b2383a1f1
msgid "ProcessFormView"
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:172
# 3455c27fb5574cfeaba803921756c87b
msgid "A mixin that provides basic HTTP GET and POST workflow."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:176
# d098bf58024d49dbae86924d3834f3d9
msgid "This is named 'ProcessFormView' and inherits directly from :class:`django.views.generic.base.View`, but breaks if used independently, so it is more of a mixin."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:180
#: ../../ref/class-based-views/mixins-multiple-object.txt:42
#: ../../ref/class-based-views/mixins-multiple-object.txt:174
#: ../../ref/class-based-views/mixins-single-object.txt:103
# c76e146eadea4017bb29cb392e0d4262
# 3131cadd51f144bf9f16fae962408e20
# a3c34b8bc6df4f3598f7871a27aed99b
# 034eafe993094435950cdc63697b3f1b
msgid "**Extends**"
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:188
# 406427f5816446efbb2ada40fffb3e8d
msgid "Constructs a form, then renders a response using a context that contains that form."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:193
# 4025a4d265f24ce5a955243a2d048811
msgid "Constructs a form, checks the form for validity, and handles it accordingly."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:198
# c3d46cf368154a889b127cbe79ade1a4
msgid "The ``PUT`` action is also handled and just passes all parameters through to :meth:`post`."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:203
# c7dafa98767e4aa5ab81f46c0f7ad180
msgid "Enables handling of the ``DELETE`` http action."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:209
# 446b54e664e44969af30642b40bd71a0
msgid "The url to redirect to when the nominated object has been successfully deleted."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:214
# ad8c31cbed54496d8fa056c7f1b88e87
msgid "Returns the url to redirect to when the nominated object has been successfully deleted. Returns :attr:`~django.views.generic.edit.DeletionMixin.success_url` by default."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:3
# 6c235dc5e95d4b50a6bf65259447386c
msgid "Multiple object mixins"
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:6
# beaf70ecfb3e4ea093e55f8559362197
msgid "MultipleObjectMixin"
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:10
# 2a026f2458174303be0340a5f6078bc5
msgid "A mixin that can be used to display a list of objects."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:12
# 6f48a5e56b93461f9bfe5b74d10f6506
msgid "If ``paginate_by`` is specified, Django will paginate the results returned by this. You can specify the page number in the URL in one of two ways:"
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:15
# 7e3ae610f573477f8778f5e9d3d50418
msgid "Use the ``page`` parameter in the URLconf. For example, this is what your URLconf might look like::"
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:20
# a713bb643ef24027a8ee1c741d0a705a
msgid "Pass the page number via the ``page`` query-string parameter. For example, a URL would look like this::"
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:25
# cdd49a7c22d14248bf2ef887314f6757
msgid "These values and lists are 1-based, not 0-based, so the first page would be represented as page ``1``."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:28
# 599a16a73c9e44b6892f42e0cec7f04a
msgid "For more on pagination, read the :doc:`pagination documentation </topics/pagination>`."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:31
# b78c4e2c6f7043b8b2a7bef4985726d1
msgid "As a special case, you are also permitted to use ``last`` as a value for ``page``::"
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:36
# 434c392373544cce8c353b0e499d851c
msgid "This allows you to access the final page of results without first having to determine how many pages there are."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:39
# b5a1f46681614663a1986dadc865645e
msgid "Note that ``page`` *must* be either a valid page number or the value ``last``; any other value for ``page`` will result in a 404 error."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:44
# 8c0c37ecfd8a47c3a3bc0c71403749fb
msgid ":class:`django.views.generic.base.ContextMixin`"
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:50
# 3f5bb167908e4ad7bb08a99a7839b3a9
msgid "A boolean specifying whether to display the page if no objects are available. If this is ``False`` and no objects are available, the view will raise a 404 instead of displaying an empty page. By default, this is ``True``."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:57
#: ../../ref/class-based-views/mixins-single-object.txt:17
# e71af245e50e43228a6652126c77903d
# e992730dcd834036a30508e8ea7bcaea
msgid "The model that this view will display data for. Specifying ``model = Foo`` is effectively the same as specifying ``queryset = Foo.objects.all()``."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:63
#: ../../ref/class-based-views/mixins-single-object.txt:23
# 75539350d8d84bdb8ebf8f3f7e859ae8
# 78e198e640244534a44a08d610e24cc5
msgid "A ``QuerySet`` that represents the objects. If provided, the value of ``queryset`` supersedes the value provided for :attr:`model`."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:68
# c98e3df227eb400eaa8281b42aeff77b
msgid "An integer specifying how many objects should be displayed per page. If this is given, the view will paginate objects with ``paginate_by`` objects per page. The view will expect either a ``page`` query string parameter (via ``request.GET``) or a ``page`` variable specified in the URLconf."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:78
# a0cdda941b824fb3ac8ca6b231f05ac4
msgid "A string specifying the name to use for the page parameter. The view will expect this prameter to be available either as a query string parameter (via ``request.GET``) or as a kwarg variable specified in the URLconf. Defaults to ``page``."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:85
# 1b2c4db0cdc74410880f55f247bf97b8
msgid "The paginator class to be used for pagination. By default, :class:`django.core.paginator.Paginator` is used. If the custom paginator class doesn't have the same constructor interface as :class:`django.core.paginator.Paginator`, you will also need to provide an implementation for :meth:`get_paginator`."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:93
#: ../../ref/class-based-views/mixins-single-object.txt:47
# 409b8bf5780b4bfd8047f2dfd4274617
# 7c9294c4ee684e0a84ca453f097b5935
msgid "Designates the name of the variable to use in the context."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:97
# ffbc515773754b848dbc548522775a3d
msgid "Get the list of items for this view. This must be an iterable and may be a queryset (in which queryset-specific behavior will be enabled)."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:102
# b946e2132cb841de8cdcb467a30cbad5
msgid "Returns a 4-tuple containing (``paginator``, ``page``, ``object_list``, ``is_paginated``)."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:105
# 30b834c7c6104fc2a426c4b77fab18be
msgid "Constructed by paginating ``queryset`` into pages of size ``page_size``. If the request contains a ``page`` argument, either as a captured URL argument or as a GET argument, ``object_list`` will correspond to the objects from that page."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:112
# 3f416481755e43ec8d15213a235472df
msgid "Returns the number of items to paginate by, or ``None`` for no pagination. By default this simply returns the value of :attr:`paginate_by`."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:118
# e93934b3955944cdbdb2903bb960a50f
msgid "Returns an instance of the paginator to use for this view. By default, instantiates an instance of :attr:`paginator_class`."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:123
# 2702265603704308ba7acc966acbe072
msgid "Return a boolean specifying whether to display the page if no objects are available. If this method returns ``False`` and no objects are available, the view will raise a 404 instead of displaying an empty page. By default, this is ``True``."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:130
# 9fc41c03f84b46a38df667d0de45404c
msgid "Return the context variable name that will be used to contain the list of data that this view is manipulating. If ``object_list`` is a queryset of Django objects and :attr:`context_object_name` is not set, the context name will be the ``object_name`` of the model that the queryset is composed from, with postfix ``'_list'`` appended. For example, the model ``Article`` would have a context object named ``article_list``."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:141
#: ../../ref/class-based-views/mixins-single-object.txt:78
# e286724e420b4290aee69837718faf76
# 332d707f73ef48f2a9bd8959180ed913
msgid "Returns context data for displaying the list of objects."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:145
# 066de6e5674840a4aebc4aae81bb1a1b
msgid "``object_list``: The list of objects that this view is displaying. If ``context_object_name`` is specified, that variable will also be set in the context, with the same value as ``object_list``."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:149
# f29571ccff3f4aaea16b2c98c9693d10
msgid "``is_paginated``: A boolean representing whether the results are paginated. Specifically, this is set to ``False`` if no page size has been specified, or if the available objects do not span multiple pages."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:154
# 34aafe9011534d52a6aa9594d0b1cf9f
msgid "``paginator``: An instance of :class:`django.core.paginator.Paginator`. If the page is not paginated, this context variable will be ``None``."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:158
# 2f46966d9e904155a3ebc94569bed81f
msgid "``page_obj``: An instance of :class:`django.core.paginator.Page`. If the page is not paginated, this context variable will be ``None``."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:164
# 69b94939e52344559dcd01c6756fdcf3
msgid "MultipleObjectTemplateResponseMixin"
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:168
# 4f13ef9d23b74cffbfbe170e1fa9e1db
msgid "A mixin class that performs template-based response rendering for views that operate upon a list of object instances. Requires that the view it is mixed with provides ``self.object_list``, the list of object instances that the view is operating on. ``self.object_list`` may be, but is not required to be, a :class:`~django.db.models.query.QuerySet`."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:176
#: ../../ref/class-based-views/mixins-single-object.txt:105
# e2772e439bb04fe49c2f87689cd83178
# 28ee94db7b5b4ee285ada1fa7eff01a2
msgid ":class:`~django.views.generic.base.TemplateResponseMixin`"
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:182
# 44b3371c56b94c7e88e60ee0627d8f5f
msgid "The suffix to append to the auto-generated candidate template name. Default suffix is ``_list``."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:187
#: ../../ref/class-based-views/mixins-single-object.txt:124
# 6fde25c268b24edbb7abac70c62c02ed
# 1be3bce423004d5b80aa6546cee571a8
msgid "Returns a list of candidate template names. Returns the following list:"
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:189
#: ../../ref/class-based-views/mixins-single-object.txt:126
# 66845b858cc141e4a8af21bec0af238d
# f1fca6429bd646aeb56ecd85e60fc504
msgid "the value of ``template_name`` on the view (if provided)"
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:190
#: ../../ref/class-based-views/mixins-single-object.txt:129
# 65b59cf255af4bbeb4cd76ed95c5f976
# 715cecdafc34425da17743a6425863c6
msgid "``<app_label>/<object_name><template_name_suffix>.html``"
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:3
# 09dce47376a647d898633bcc1396cd9c
msgid "Simple mixins"
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:6
# bfa557c3b9a74eef8ab1efd49514bbc2
msgid "ContextMixin"
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:16
# 17d7e7d5da2c452f8b602955e0be494f
msgid "Returns a dictionary representing the template context. The keyword arguments provided will make up the returned context. Example usage::"
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:24
# f9374f65a3184e2ca5f2c6b37ac872d4
msgid "The template context of all class-based generic views include a ``view`` variable that points to the ``View`` instance."
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:29
# ba87282c7fea4d5f843d2aedd2b032f8
msgid "Note that having the view instance in the template context may expose potentially hazardous methods to template authors.  To prevent methods like this from being called in the template, set ``alters_data=True`` on those methods.  For more information, read the documentation on :ref:`rendering a template context <alters-data-description>`."
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:37
# 64a97cf0c52541e09aeb24d35e3071fd
msgid "TemplateResponseMixin"
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:41
# db50d979a7b446d98b470fa33ba1bdee
msgid "Provides a mechanism to construct a :class:`~django.template.response.TemplateResponse`, given suitable context. The template to use is configurable and can be further customized by subclasses."
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:50
# c65dd11967b341149e48d14539f4de4f
msgid "The full name of a template to use as defined by a string. Not defining a ``template_name`` will raise a :class:`django.core.exceptions.ImproperlyConfigured` exception."
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:56
# a0cb871b8426462787930facc6a765d1
msgid "The response class to be returned by ``render_to_response`` method. Default is :class:`TemplateResponse <django.template.response.TemplateResponse>`. The template and context of ``TemplateResponse`` instances can be altered later (e.g. in :ref:`template response middleware <template-response-middleware>`)."
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:63
# 0d26ce8e69004820866f5f23ee87f53e
msgid "If you need custom template loading or custom context object instantiation, create a ``TemplateResponse`` subclass and assign it to ``response_class``."
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:72
# 90d3cf3e52c64a97b71606f071604f19
msgid "The content type to use for the response. ``content_type`` is passed as a keyword argument to ``response_class``. Default is ``None`` -- meaning that Django uses :setting:`DEFAULT_CONTENT_TYPE`."
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:80
# 3422535d17e7452bb4b4ad46f3e35ffb
msgid "Returns a ``self.response_class`` instance."
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:82
# 92b844b47c4d4ae9a9a9fbdd77a7e548
msgid "If any keyword arguments are provided, they will be passed to the constructor of the response class."
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:85
# 70f9b770a4724fe5bdb86501b9c229ac
msgid "Calls :meth:`get_template_names()` to obtain the list of template names that will be searched looking for an existent template."
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:90
# 6c792869ad104351a3dc7506e27007f4
msgid "Returns a list of template names to search for when rendering the template."
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:93
# abf630b0686b4314b04b6328db7d8cd8
msgid "If :attr:`template_name` is specified, the default implementation will return a list containing :attr:`template_name` (if it is specified)."
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:3
# 21108626d7d5428f821d1903dae92e58
msgid "Single object mixins"
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:6
# 2d0ba0540daf4be4b93e52bee4f44942
msgid "SingleObjectMixin"
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:10
# 97e34f53d607404ca816ec3b0782b600
msgid "Provides a mechanism for looking up an object associated with the current HTTP request."
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:28
# b6b3599d9fb24c369b92e304d561ec08
msgid "The name of the field on the model that contains the slug. By default, ``slug_field`` is ``'slug'``."
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:35
# 8f739cb08de84eb79de3bd8be7fae1d4
msgid "The name of the URLConf keyword argument that contains the slug. By default, ``slug_url_kwarg`` is ``'slug'``."
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:42
# 631fbbf3eca543f78a40ce89da5d376b
msgid "The name of the URLConf keyword argument that contains the primary key. By default, ``pk_url_kwarg`` is ``'pk'``."
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:51
# ab6d5f1afc074b64822d090ea0ec8df8
msgid "Returns the single object that this view will display. If ``queryset`` is provided, that queryset will be used as the source of objects; otherwise, :meth:`get_queryset` will be used. ``get_object()`` looks for a :attr:`pk_url_kwarg` argument in the arguments to the view; if this argument is found, this method performs a primary-key based lookup using that value. If this argument is not found, it looks for a :attr:`slug_url_kwarg` argument, and performs a slug lookup using the :attr:`slug_field`."
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:62
# 9fdb023df8fe4942a0808b07103a4ded
msgid "Returns the queryset that will be used to retrieve the object that this view will display. By default, :meth:`get_queryset` returns the value of the :attr:`queryset` attribute if it is set, otherwise it constructs a :class:`~django.db.models.query.QuerySet` by calling the ``all()`` method on the :attr:`model` attribute's default manager."
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:70
# 2d5e2945fa8f45f191e5e58a84f7c213
msgid "Return the context variable name that will be used to contain the data that this view is manipulating. If :attr:`context_object_name` is not set, the context name will be constructed from the ``object_name`` of the model that the queryset is composed from. For example, the model ``Article`` would have context object named ``'article'``."
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:82
# 47f3e5c75483473cad67e834477c2304
msgid "Returns the name of a slug field to be used to look up by slug. By default this simply returns the value of :attr:`slug_field`."
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:87
# ed6949fd5b5942c89067d1ca86189c4e
msgid "``object``: The object that this view is displaying. If ``context_object_name`` is specified, that variable will also be set in the context, with the same value as ``object``."
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:92
# b030653b09e647f8b85c660f573bff7b
msgid "SingleObjectTemplateResponseMixin"
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:96
# 703f0ffd074c49b883a3dbd2ac418d39
msgid "A mixin class that performs template-based response rendering for views that operate upon a single object instance. Requires that the view it is mixed with provides ``self.object``, the object instance that the view is operating on. ``self.object`` will usually be, but is not required to be, an instance of a Django model. It may be ``None`` if the view is in the process of constructing a new instance."
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:111
# a9d2f9bbe5ab4b39a22b30dfd2b896ca
msgid "The field on the current object instance that can be used to determine the name of a candidate template. If either ``template_name_field`` itself or the value of the ``template_name_field`` on the current object instance is ``None``, the object will not be used for a candidate template name."
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:119
# 9a4a7a24ea5c4ca5a0dd6a2829a7bb4f
msgid "The suffix to append to the auto-generated candidate template name. Default suffix is ``_detail``."
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:127
# 48389de06f654a869bcacc1d7a52ef80
msgid "the contents of the ``template_name_field`` field on the object instance that the view is operating upon (if available)"
msgstr ""

#: ../../ref/clickjacking.txt:3
# 969b8cf85e184e94b5600810b50d7e7a
msgid "Clickjacking Protection"
msgstr ""

#: ../../ref/clickjacking.txt:8
# 7df289bd359341b2a430d76e3f0c527f
msgid "The clickjacking middleware and decorators provide easy-to-use protection against `clickjacking`_.  This type of attack occurs when a malicious site tricks a user into clicking on a concealed element of another site which they have loaded in a hidden frame or iframe."
msgstr ""

#: ../../ref/clickjacking.txt:19
# c9c4d12401e442a68936970d2663f2b7
msgid "An example of clickjacking"
msgstr ""

#: ../../ref/clickjacking.txt:21
# 46bde9dc2eac469aa0f06ca0fa9b88fe
msgid "Suppose an online store has a page where a logged in user can click \"Buy Now\" to purchase an item. A user has chosen to stay logged into the store all the time for convenience. An attacker site might create an \"I Like Ponies\" button on one of their own pages, and load the store's page in a transparent iframe such that the \"Buy Now\" button is invisibly overlaid on the \"I Like Ponies\" button. If the user visits the attacker site and clicks \"I Like Ponies\" he will inadvertently click on the online store's \"Buy Now\" button and unknowingly purchase the item."
msgstr ""

#: ../../ref/clickjacking.txt:32
# c96b0a67e2cb4b2ca29c3592f164f7d0
msgid "Preventing clickjacking"
msgstr ""

#: ../../ref/clickjacking.txt:34
# 0b4c3adfe117478cb5a401c091bb6887
msgid "Modern browsers honor the `X-Frame-Options`_ HTTP header that indicates whether or not a resource is allowed to load within a frame or iframe. If the response contains the header with a value of ``SAMEORIGIN`` then the browser will only load the resource in a frame if the request originated from the same site. If the header is set to ``DENY`` then the browser will block the resource from loading in a frame no matter which site made the request."
msgstr ""

#: ../../ref/clickjacking.txt:43
# 6cea5ab93c13437e80c16fa012e234df
msgid "Django provides a few simple ways to include this header in responses from your site:"
msgstr ""

#: ../../ref/clickjacking.txt:46
# 2fc8ffd468eb40a9b0cd9451984fa6ea
msgid "A simple middleware that sets the header in all responses."
msgstr ""

#: ../../ref/clickjacking.txt:48
# 94733b6fde1144cda2788a88d078e0b5
msgid "A set of view decorators that can be used to override the middleware or to only set the header for certain views."
msgstr ""

#: ../../ref/clickjacking.txt:52
#: ../../ref/contrib/csrf.txt:27
# 312db5b283a2410ab69c908d2d5df993
# c83e17322d6845108225bf4f987bd011
msgid "How to use it"
msgstr ""

#: ../../ref/clickjacking.txt:55
# c7a6170372bb41988d22a046b416d0cf
msgid "Setting X-Frame-Options for all responses"
msgstr ""

#: ../../ref/clickjacking.txt:57
# 004c993d8453453192e3abe4dc330875
msgid "To set the same X-Frame-Options value for all responses in your site, add ``'django.middleware.clickjacking.XFrameOptionsMiddleware'`` to :setting:`MIDDLEWARE_CLASSES`::"
msgstr ""

#: ../../ref/clickjacking.txt:68
# 6937c542234f448aae4d09139e3cb340
msgid "By default, the middleware will set the ``X-Frame-Options`` header to ``SAMEORIGIN`` for every outgoing ``HttpResponse``. If you want ``DENY`` instead, set the :setting:`X_FRAME_OPTIONS` setting::"
msgstr ""

#: ../../ref/clickjacking.txt:74
# aecb9a09d1f041cb920c0b0fa73b585a
msgid "When using the middleware there may be some views where you do **not** want the ``X-Frame-Options`` header set. For those cases, you can use a view decorator that tells the middleware not to set the header::"
msgstr ""

#: ../../ref/clickjacking.txt:87
# 7e8c3ae1075648189e845f5e5ca65d05
msgid "Setting X-Frame-Options per view"
msgstr ""

#: ../../ref/clickjacking.txt:89
# 538dad3b611744f6b297a2bb352a7bd0
msgid "To set the ``X-Frame-Options`` header on a per view basis, Django provides these decorators::"
msgstr ""

#: ../../ref/clickjacking.txt:104
# eb853420dd2e4780a5b24d5bade766d7
msgid "Note that you can use the decorators in conjunction with the middleware. Use of a decorator overrides the middleware."
msgstr ""

#: ../../ref/clickjacking.txt:108
#: ../../ref/contrib/csrf.txt:360
# c2448b6e5c52430f89a1855a289c5c4c
# 1e724fa3b2fd4d1489478a38ac068041
msgid "Limitations"
msgstr ""

#: ../../ref/clickjacking.txt:110
# 3ab9c4c0e3af46ef89034d8568510bdb
msgid "The ``X-Frame-Options`` header will only protect against clickjacking in a modern browser. Older browsers will quietly ignore the header and need `other clickjacking prevention techniques`_."
msgstr ""

#: ../../ref/clickjacking.txt:115
# 3e6b9ecaba3445ea92cf3c050fd28824
msgid "Browsers that support X-Frame-Options"
msgstr ""

#: ../../ref/clickjacking.txt:117
# a0a889f9d1214c50ab62c3a71d1d0bd9
msgid "Internet Explorer 8+"
msgstr ""

#: ../../ref/clickjacking.txt:118
# 24eeeb07a8754e93a7f9ce712391f312
msgid "Firefox 3.6.9+"
msgstr ""

#: ../../ref/clickjacking.txt:119
# 61d120609c904d6c8d31f900946fa817
msgid "Opera 10.5+"
msgstr ""

#: ../../ref/clickjacking.txt:120
# 01c7f81e6f2c4e8282b8fc389161a6bd
msgid "Safari 4+"
msgstr ""

#: ../../ref/clickjacking.txt:121
# cc2e2191fd814c9b97a401fbcc8c3af2
msgid "Chrome 4.1+"
msgstr ""

#: ../../ref/clickjacking.txt:124
# 734d8f6a6775412598164bd9adb35e60
msgid "See also"
msgstr ""

#: ../../ref/clickjacking.txt:126
# cff5626377534355bad699b231f67982
msgid "A `complete list`_ of browsers supporting ``X-Frame-Options``."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:3
# 4db33a3dd78d4f469833340f8dc1664e
msgid "Admin actions"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:7
# 8526a32e7ba64f28874968fe5271ebb3
msgid "The basic workflow of Django's admin is, in a nutshell, \"select an object, then change it.\" This works well for a majority of use cases. However, if you need to make the same change to many objects at once, this workflow can be quite tedious."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:12
# af6a042fde084f88b8dd1555e9022e5f
msgid "In these cases, Django's admin lets you write and register \"actions\" -- simple functions that get called with a list of objects selected on the change list page."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:16
# 8771498ef8a24bb58f41ed81bb469ea5
msgid "If you look at any change list in the admin, you'll see this feature in action; Django ships with a \"delete selected objects\" action available to all models. For example, here's the user module from Django's built-in :mod:`django.contrib.auth` app:"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:25
# 4efc1d9dc2b2410fbbea941a5f1a8ee0
msgid "The \"delete selected objects\" action uses :meth:`QuerySet.delete() <django.db.models.query.QuerySet.delete>` for efficiency reasons, which has an important caveat: your model's ``delete()`` method will not be called."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:30
# b204d633575244c59665b378e6687ee7
msgid "If you wish to override this behavior, simply write a custom action which accomplishes deletion in your preferred manner -- for example, by calling ``Model.delete()`` for each of the selected items."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:34
# 8f7dcc437aec4beaaf4494040406f5a9
msgid "For more background on bulk deletion, see the documentation on :ref:`object deletion <topics-db-queries-delete>`."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:37
# fdf331e390774b268e7e26a458b637bc
msgid "Read on to find out how to add your own actions to this list."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:40
# 34c38b6fbab2478f832fd2e9b5c4feb0
msgid "Writing actions"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:42
# 71aab351a6d74b3792bd27ae94b04e50
msgid "The easiest way to explain actions is by example, so let's dive in."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:44
# 5186bcf3478e4771af1f35b590b8cff6
msgid "A common use case for admin actions is the bulk updating of a model. Imagine a simple news application with an ``Article`` model::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:63
# e000aade6b484a03a6c2e66929414a02
msgid "A common task we might perform with a model like this is to update an article's status from \"draft\" to \"published\". We could easily do this in the admin one article at a time, but if we wanted to bulk-publish a group of articles, it'd be tedious. So, let's write an action that lets us change an article's status to \"published.\""
msgstr ""

#: ../../ref/contrib/admin/actions.txt:70
# 1eacfdd5189a4dbfa880e4752bea9112
msgid "Writing action functions"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:72
# 8933ce64e5f84e2d938048e67a29580d
msgid "First, we'll need to write a function that gets called when the action is trigged from the admin. Action functions are just regular functions that take three arguments:"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:76
# 041d440803114d71bce5c023800476f6
msgid "The current :class:`ModelAdmin`"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:77
# c3cde782af4f46b58df65b6a4f3ec657
msgid "An :class:`~django.http.HttpRequest` representing the current request,"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:78
# b32b3d259e0d4f90abdc80918756d0c0
msgid "A :class:`~django.db.models.query.QuerySet` containing the set of objects selected by the user."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:81
# 49942723bb7c46759577633f678fe6c3
msgid "Our publish-these-articles function won't need the :class:`ModelAdmin` or the request object, but we will use the queryset::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:89
# 77c70ac19e5d4bffb9d385ac551e2de9
msgid "For the best performance, we're using the queryset's :ref:`update method <topics-db-queries-update>`. Other types of actions might need to deal with each object individually; in these cases we'd just iterate over the queryset::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:97
# 2911498430404f99a096abcfee24ef1d
msgid "That's actually all there is to writing an action! However, we'll take one more optional-but-useful step and give the action a \"nice\" title in the admin. By default, this action would appear in the action list as \"Make published\" -- the function name, with underscores replaced by spaces. That's fine, but we can provide a better, more human-friendly name by giving the ``make_published`` function a ``short_description`` attribute::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:110
# 039580eafe3b43f9844d1f46c7afeb45
msgid "This might look familiar; the admin's ``list_display`` option uses the same technique to provide human-readable descriptions for callback functions registered there, too."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:115
# 631327b15c83427290752c99c188ca12
msgid "Adding actions to the :class:`ModelAdmin`"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:117
# 76968bb0e7c8489eb9e2f3d140240500
msgid "Next, we'll need to inform our :class:`ModelAdmin` of the action. This works just like any other configuration option. So, the complete ``admin.py`` with the action and its registration would look like::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:135
# e923af580ce544af9df931e05395a55f
msgid "That code will give us an admin change list that looks something like this:"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:139
# e793a9aaa157479795410e04a7d397b4
msgid "That's really all there is to it! If you're itching to write your own actions, you now know enough to get started. The rest of this document just covers more advanced techniques."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:144
# d073c9f9622d4330a99424a2820bd0c3
msgid "Handling errors in actions"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:146
# 320f1c09db564c11b3eef25ce47db0d7
msgid "If there are foreseeable error conditions that may occur while running your action, you should gracefully inform the user of the problem. This means handling exceptions and and using :meth:`django.contrib.admin.ModelAdmin.message_user` to display a user friendly description of the problem in the response."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:153
# 407fdb1974d54fe0802b9cd2223c41ff
msgid "Advanced action techniques"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:155
# 0d1f0b3d822e4348851d07bce549da07
msgid "There's a couple of extra options and possibilities you can exploit for more advanced options."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:159
# 3778d064690a44c396fa2d787cdd1533
msgid "Actions as :class:`ModelAdmin` methods"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:161
# feb405d52b3045fe961953db2e1e3e55
msgid "The example above shows the ``make_published`` action defined as a simple function. That's perfectly fine, but it's not perfect from a code design point of view: since the action is tightly coupled to the ``Article`` object, it makes sense to hook the action to the ``ArticleAdmin`` object itself."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:166
# 6499465c9e744cadbac9f573b97b3cbd
msgid "That's easy enough to do::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:177
# 440f16c930934eed8e141c59fee51813
msgid "Notice first that we've moved ``make_published`` into a method and renamed the ``modeladmin`` parameter to ``self``, and second that we've now put the string ``'make_published'`` in ``actions`` instead of a direct function reference. This tells the :class:`ModelAdmin` to look up the action as a method."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:182
# 19d6f8b597e24712aa5c5c9878b0ba0d
msgid "Defining actions as methods gives the action more straightforward, idiomatic access to the :class:`ModelAdmin` itself, allowing the action to call any of the methods provided by the admin."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:188
# 9cc7383b3bd14e1da017759f3b479caa
msgid "For example, we can use ``self`` to flash a message to the user informing her that the action was successful::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:202
# 6c24af16c2d9459987c6b98a3fb2f70e
msgid "This make the action match what the admin itself does after successfully performing an action:"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:208
# 90bb4cde655f4f8a86a0732941fba491
msgid "Actions that provide intermediate pages"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:210
# 63629af5469141bb963b6e0062e00ae4
msgid "By default, after an action is performed the user is simply redirected back to the original change list page. However, some actions, especially more complex ones, will need to return intermediate pages. For example, the built-in delete action asks for confirmation before deleting the selected objects."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:216
# ab64756b32d8431bbc99041a7f5ee465
msgid "To provide an intermediary page, simply return an :class:`~django.http.HttpResponse` (or subclass) from your action. For example, you might write a simple export function that uses Django's :doc:`serialization functions </topics/serialization>` to dump some selected objects as JSON::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:230
# 878ed4fca8e540768aac56ee2a22ee5b
msgid "Generally, something like the above isn't considered a great idea. Most of the time, the best practice will be to return an :class:`~django.http.HttpResponseRedirect` and redirect the user to a view you've written, passing the list of selected objects in the GET query string. This allows you to provide complex interaction logic on the intermediary pages. For example, if you wanted to provide a more complete export function, you'd want to let the user choose a format, and possibly a list of fields to include in the export. The best thing to do would be to write a small action that simply redirects to your custom export view::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:249
# 4de1622a77e6417aa39b157144c01229
msgid "As you can see, the action is the simple part; all the complex logic would belong in your export view. This would need to deal with objects of any type, hence the business with the ``ContentType``."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:253
# e9f2310e76b24ed99e40d3b1769021f6
msgid "Writing this view is left as an exercise to the reader."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:258
# 29b966e94a77436fb77c7e7e049dc845
msgid "Making actions available site-wide"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:262
# 8e8d25c5a9a14d1f9b9b8b765110fcde
msgid "Some actions are best if they're made available to *any* object in the admin site -- the export action defined above would be a good candidate. You can make an action globally available using :meth:`AdminSite.add_action()`. For example::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:271
# f806eeed08f243ec9aa4b418a83683da
msgid "This makes the `export_selected_objects` action globally available as an action named `\"export_selected_objects\"`. You can explicitly give the action a name -- good if you later want to programatically :ref:`remove the action <disabling-admin-actions>` -- by passing a second argument to :meth:`AdminSite.add_action()`::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:282
# 448bb9aeaf214040a78cb3a854ec5f3c
msgid "Disabling actions"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:284
# 4c3fea39bc4c49b7a5614280b6b1a8c2
msgid "Sometimes you need to disable certain actions -- especially those :ref:`registered site-wide <adminsite-actions>` -- for particular objects. There's a few ways you can disable actions:"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:289
# f158fc87dc1c4466b7742f50ed3f45e1
msgid "Disabling a site-wide action"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:293
# 623dd46522a743008f5c920aa744c6cf
msgid "If you need to disable a :ref:`site-wide action <adminsite-actions>` you can call :meth:`AdminSite.disable_action()`."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:296
# 08352f472fd94992bd64a59db96f3424
msgid "For example, you can use this method to remove the built-in \"delete selected objects\" action::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:301
# d8d31721a59c40c3bb88335b699be1cc
msgid "Once you've done the above, that action will no longer be available site-wide."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:304
# b0f3102c8db543468307e1a408efaec9
msgid "If, however, you need to re-enable a globally-disabled action for one particular model, simply list it explicitly in your ``ModelAdmin.actions`` list::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:323
# aa3cd9eec1a84ed4aea9900c6231e1ec
msgid "Disabling all actions for a particular :class:`ModelAdmin`"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:325
# 6ae4bb6faf93448485810e42216cd76a
msgid "If you want *no* bulk actions available for a given :class:`ModelAdmin`, simply set :attr:`ModelAdmin.actions` to ``None``::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:331
# 7ccd0f580e734216bba259a0a4503c2b
msgid "This tells the :class:`ModelAdmin` to not display or allow any actions, including any :ref:`site-wide actions <adminsite-actions>`."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:335
# 9f31e09cd68a437a8b40ff25b77af928
msgid "Conditionally enabling or disabling actions"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:339
# 389e053354804a74bae9a868e2d31f00
msgid "Finally, you can conditionally enable or disable actions on a per-request (and hence per-user basis) by overriding :meth:`ModelAdmin.get_actions`."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:342
# 4807ac37b0e949c9887f86eb24d4a9bc
msgid "This returns a dictionary of actions allowed. The keys are action names, and the values are ``(function, name, short_description)`` tuples."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:345
# 94e4b1298aeb41f78d2c73c38f947c0e
msgid "Most of the time you'll use this method to conditionally remove actions from the list gathered by the superclass. For example, if I only wanted users whose names begin with 'J' to be able to delete objects in bulk, I could do the following::"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:3
# 134d9bc06b42482c81f8ffc02eb1965b
msgid "The Django admin documentation generator"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:10
# ab50700e4fae4b4f86fd0f9414d25ee8
msgid "Django's :mod:`~django.contrib.admindocs` app pulls documentation from the docstrings of models, views, template tags, and template filters for any app in :setting:`INSTALLED_APPS` and makes that documentation available from the :mod:`Django admin <django.contrib.admin>`."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:15
# db58da54e3f3482ba8841d5cddb543d7
msgid "In addition to providing offline documentation for all template tags and template filters that ship with Django, you may utilize admindocs to quickly document your own code."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:20
#: ../../ref/contrib/admin/index.txt:15
#: ../../ref/contrib/comments/moderation.txt:19
#: ../../ref/contrib/contenttypes.txt:13
#: ../../ref/contrib/formtools/form-preview.txt:18
#: ../../ref/contrib/gis/gdal.txt:30
#: ../../ref/contrib/gis/install/index.txt:10
#: ../../ref/contrib/sitemaps.txt:14
#: ../../ref/contrib/syndication.txt:26
# 433e262d19854fd1a6acde031cde45b1
# 02b2820a041d48979acc3c15446927d5
# ea93829941164d24a6ed9d51f8b450a6
# 7d7438461f284edc90d7451630e96949
# fcc8469bba954d6c8e6521ac2ed38f92
# c4ddfe29f3784758bf9317b088c353bd
# a7373963e3f3401998215e114de15ec6
# 04289c7b93934ee7956c8be6b1e2d35c
# 2bfd1b406e0a48b09e0c1e42a6acf779
msgid "Overview"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:22
# 7d24c491d3c04262a6c57b5f6802f6b0
msgid "To activate the :mod:`~django.contrib.admindocs`, you will need to do the following:"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:25
# b202213c7ba444fdac2eaa467cca20c5
msgid "Add :mod:`django.contrib.admindocs` to your :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:26
# 3763037d0df74f3f9df0a5a8dc39e04d
msgid "Add ``(r'^admin/doc/', include('django.contrib.admindocs.urls'))`` to your ``urlpatterns``. Make sure it's included *before* the ``r'^admin/'`` entry, so that requests to ``/admin/doc/`` don't get handled by the latter entry."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:30
# e3cdd2e458b44af4905d0cc5264ac628
msgid "Install the docutils Python module (http://docutils.sf.net/)."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:31
# dca65434c4ab4d7383c407fb40d1ed9c
msgid "**Optional:** Linking to templates requires the :setting:`ADMIN_FOR` setting to be configured."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:33
# 77282eab947e43fcb8d46e5d67f5eb75
msgid "**Optional:** Using the admindocs bookmarklets requires the :mod:`XViewMiddleware<django.middleware.doc>` to be installed."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:36
# e312fa6578894530a1aa9bb0e465c7ad
msgid "Once those steps are complete, you can start browsing the documentation by going to your admin interface and clicking the \"Documentation\" link in the upper right of the page."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:41
# 23bc7cfdd09d42738c8e46c69ed36425
msgid "Documentation helpers"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:43
# 5b5cb2818c234bcc81f5f6d265f82ef7
msgid "The following special markup can be used in your docstrings to easily create hyperlinks to other components:"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:47
# 5e63272561ff4e4b96ab26a160c04427
msgid "Django Component"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:47
# eb157ae867a749bc8304411b10e53361
msgid "reStructuredText roles"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:49
#: ../../ref/models/index.txt:3
#: ../../ref/unicode.txt:230
# 84207d77bd0b4262a73a17f8885257ed
# 9fd65d52251b40619bf3f2b7f20ee299
# 74b28b66a13c4f288a414a599d783d5e
msgid "Models"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:49
# 9bd9b379f76a4b78a69c93902329d7ec
msgid "``:model:`appname.ModelName```"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:50
# 1193cd459b94452ea170d0a7697f64e9
msgid "Views"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:50
# dc8dadfa99b34fff8b173322cbedfaa3
msgid "``:view:`appname.view_name```"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:51
#: ../../ref/contrib/staticfiles.txt:367
#: ../../ref/contrib/webdesign.txt:19
# c9bb69dd6d57466099a63139d45b3287
# 4ac6b60d2ccb47b880b2bd06bed84f19
# d60b806450b149f9bce08611c7007d97
msgid "Template tags"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:51
# 70cac66c04e34905a177da0e85094225
msgid "``:tag:`tagname```"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:52
# 8178747a3d3e4220a388f6e85ef7cac0
msgid "Template filters"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:52
# 23cea4b161714bab9052c7d0b891b357
msgid "``:filter:`filtername```"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:53
#: ../../ref/templates/index.txt:3
#: ../../ref/unicode.txt:300
# a58e4fdd415f4b2cac853184bd7adafe
# dbe10f6c6a4846e4a1253f4eb20a944a
# af869037434b412db8a09998b7c2f699
msgid "Templates"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:53
# 318c3ad41ab345e0ba9f5497bc4d90f8
msgid "``:template:`path/to/template.html```"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:57
# ff621dfd57a04252b5286645ffee925e
msgid "Model reference"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:59
# e067b1014aa84ef3839940c46f07f1a5
msgid "The **models** section of the ``admindocs`` page describes each model in the system along with all the fields and methods available on it. Relationships to other models appear as hyperlinks. Descriptions are pulled from ``help_text`` attributes on fields or from docstrings on model methods."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:64
# 2a045a9468bd4c9ab41bd2d9f0348fe0
msgid "A model with useful documentation might look like this::"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:82
# 42222802ecc04a2881d80163c90e79f8
msgid "View reference"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:84
# 7a762e38a2d74eb59d9d757224849222
msgid "Each URL in your site has a separate entry in the ``admindocs`` page, and clicking on a given URL will show you the corresponding view. Helpful things you can document in your view function docstrings include:"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:88
# 8967c2b5d2ee4a3c8136856a290a4d01
msgid "A short description of what the view does."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:89
# 1fa352e238714aec9b211da62f86b4b1
msgid "The **context**, or a list of variables available in the view's template."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:90
# 57d92fd1d7e84e3885b680fddd7bbbe6
msgid "The name of the template or templates that are used for that view."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:92
#: ../../ref/contrib/admin/index.txt:520
#: ../../ref/contrib/comments/index.txt:95
#: ../../ref/contrib/comments/index.txt:111
#: ../../ref/contrib/comments/index.txt:143
#: ../../ref/contrib/comments/index.txt:171
#: ../../ref/contrib/comments/index.txt:194
#: ../../ref/contrib/gis/db-api.txt:106
#: ../../ref/contrib/gis/geos.txt:759
#: ../../ref/contrib/staticfiles.txt:213
#: ../../ref/django-admin.txt:873
#: ../../ref/django-admin.txt:949
#: ../../ref/models/instances.txt:433
#: ../../ref/models/instances.txt:479
#: ../../ref/models/instances.txt:488
#: ../../ref/models/instances.txt:632
#: ../../ref/models/querysets.txt:470
#: ../../ref/models/querysets.txt:1004
#: ../../ref/models/querysets.txt:1181
#: ../../ref/models/querysets.txt:1199
#: ../../ref/request-response.txt:283
#: ../../ref/templates/builtins.txt:1068
#: ../../ref/templates/builtins.txt:1085
#: ../../ref/templates/builtins.txt:1115
#: ../../ref/templates/builtins.txt:1145
#: ../../ref/templates/builtins.txt:1159
#: ../../ref/templates/builtins.txt:1172
#: ../../ref/templates/builtins.txt:1185
#: ../../ref/templates/builtins.txt:1285
#: ../../ref/templates/builtins.txt:1322
#: ../../ref/templates/builtins.txt:1339
#: ../../ref/templates/builtins.txt:1353
#: ../../ref/templates/builtins.txt:1393
#: ../../ref/templates/builtins.txt:1431
#: ../../ref/templates/builtins.txt:1446
#: ../../ref/templates/builtins.txt:1467
#: ../../ref/templates/builtins.txt:1485
#: ../../ref/templates/builtins.txt:1573
#: ../../ref/templates/builtins.txt:1591
#: ../../ref/templates/builtins.txt:1604
#: ../../ref/templates/builtins.txt:1618
#: ../../ref/templates/builtins.txt:1632
#: ../../ref/templates/builtins.txt:1645
#: ../../ref/templates/builtins.txt:1660
#: ../../ref/templates/builtins.txt:1675
#: ../../ref/templates/builtins.txt:1689
#: ../../ref/templates/builtins.txt:1714
#: ../../ref/templates/builtins.txt:1727
#: ../../ref/templates/builtins.txt:1743
#: ../../ref/templates/builtins.txt:1762
#: ../../ref/templates/builtins.txt:1813
#: ../../ref/templates/builtins.txt:1826
#: ../../ref/templates/builtins.txt:1847
#: ../../ref/templates/builtins.txt:1912
#: ../../ref/templates/builtins.txt:1930
#: ../../ref/templates/builtins.txt:1943
#: ../../ref/templates/builtins.txt:1965
#: ../../ref/templates/builtins.txt:2033
#: ../../ref/templates/builtins.txt:2051
#: ../../ref/templates/builtins.txt:2066
#: ../../ref/templates/builtins.txt:2086
#: ../../ref/templates/builtins.txt:2129
#: ../../ref/templates/builtins.txt:2142
#: ../../ref/templates/builtins.txt:2186
#: ../../ref/templates/builtins.txt:2215
#: ../../ref/templates/builtins.txt:2232
#: ../../ref/templates/builtins.txt:2247
#: ../../ref/templates/builtins.txt:2266
#: ../../ref/utils.txt:469
#: ../../ref/utils.txt:564
#: ../../ref/utils.txt:575
#: ../../ref/utils.txt:711
# 2581813686be422d986aab2bdb9045c4
# b58dc2d15e7d4432b1878ea6ab084d4c
# add95af2c33845ef830e30fd7938d887
# 999c44e877d24459aa80c70ed1595ff3
# b4495c0158cf4fe1bf11f69f8103d1de
# 6095b7ce0c4446d28977a6f76127f212
# 8bea67ded400472d9925bc4753f63ecf
# 1431823f553e4035b85f881ae3b8b641
# 00263e897b054d64b97140a0d00428b6
# d862ccd4e51848cfa3b856399b1a7e62
# d021226b7bb5406391f27a2e60a81195
# 05d21cc4fc8042ae8530e2b55d2638b3
# 141b31f125e143279e4b60fb20519c2c
# f3cad3a4925145c6a7b8b0969cc695f9
# c913b89dbdfe4cd980b3b4a790257ff0
# e32e9525bf24424b92b800f2a0690253
# ddde49e57af7494db3abd3c2be86366d
# 77a44d28cedc4ecda7b908cba3f4bc48
# 47ec21f1b1f448d38d90ceab46e998fd
# 30d9ee66506d426f87c6380a569d422a
# d6fa80caa605438e82cb9a64449a0ae1
# 0991fce247cd4b50b175899d98a32cf9
# da4b3cda0f1540f0827ecad64203f14c
# f4624b57cc0a469d856323a326a4977e
# f53939c5371f4d9ebabf402e23b11176
# 6427e2c3c7ac41b5a4dccc2c5b0cd7a1
# b6ce740c95b044d889432f951964eca8
# 65bad3a75ea54223a68eb782fd0cc88f
# f30f3f77ae4f4867970124c25e240c78
# 85fee73649bf45b6a133868853848d2a
# bd9a543852a249b68cf7c5022a635262
# 10582d94f7bb40f8bf14f1aeba39bead
# 3764ed38f2264f778ed1262acd6800de
# a45db9eb0c7b414d8b73ab2ebe7dcb9a
# 310d6c39f2724a448d3b757f3b2057ed
# 4a015cac0de040a581071e16b825a2c7
# b6214299c1ef49b28de6e89f5bab5d33
# e8cd073566ad48ebb020634c2ec5e56c
# 5789eb3e13e24856be29b1f470fe3eb4
# 573423e71f1344fdaefc504d74e3a379
# c686ac31a53c4cab8cb94047527f5c73
# 416e3a9ddec445cb83393e81dc7a8b56
# 284f176514c54ed3a8922f3706165d84
# a0e306c90164418e97e84b018a5ef154
# 9ce65695c8bc4e16a8f9edf68f85d9f2
# fd59e3834aff4b10a5fea6979887bf12
# 7f94cc27a6d9496b9a346c149e1c576e
# be25ef0d037d453d81d007b01972119e
# fa726fe01057428b83a3e6edcd89ccc3
# baa400c3dbcf4c3697d6bc2ccab842fd
# 3935fc27e739408da2677cccfc7238f4
# c3c53887e155405f84b94a1e1e628515
# 65be8128841a4671a1e69646165a4939
# 4485145cbf98408e9608ce2bbe27f5f8
# d72aa40679894c8380182f7f88a6e4a7
# 92737b2d9f61436f93da4a49818a1095
# 0bdba28512ef4a73908f2904ee29de2b
# 31045a45c288406a9fd6a0752f8bf78d
# 818fabf5e31148ed91370510a590e71a
# 15c84bb799904ee4949260d84218f4d3
# 1e8827cfeeb94769a8ea1121f6fae09d
# bfaac9bbf30649d0bb30e1f1f5f50259
# ce34f15bc6ec41c1bd7d71489c97a385
# c44f0074d3b34aec851db2f57c0fc506
# 4e5adb78053b424ab4576a71706c27bb
# 8c0cbf64291b4716ad5c0a13d3c55483
# b1fc0eddbb6a4407b396996c3331c33d
# 661fb4ac252c4351bd82025b2195daf1
# 9f70ccf94e1048fa96b8bd091d1b185e
# 6c8cfba152ec4ce3a8af6ea12601ff90
# befe2ef483d2483caf22a690dc0b0a52
# b7bf923e487142269a804706152aeb80
msgid "For example::"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:118
# a0a032a2bf374d46a21045f0520e3bd2
msgid "Template tags and filters reference"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:120
# df9c0a91f3f3497ea4a78ccf17c820ff
msgid "The **tags** and **filters** ``admindocs`` sections describe all the tags and filters that come with Django (in fact, the :ref:`built-in tag reference <ref-templates-builtins-tags>` and :ref:`built-in filter reference <ref-templates-builtins-filters>` documentation come directly from those pages). Any tags or filters that you create or are added by a third-party app will show up in these sections as well."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:129
# b079e84f53bc48e3830480711b523fe7
msgid "Template reference"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:131
# eed8e1aafea248c1a61e4c8a4f58368a
msgid "While ``admindocs`` does not include a place to document templates by themselves, if you use the ``:template:`path/to/template.html``` syntax in a docstring the resulting page will verify the path of that template with Django's :ref:`template loaders <template-loaders>`. This can be a handy way to check if the specified template exists and to show where on the filesystem that template is stored."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:140
# 8ebebb40c93341b89725f33d50da3a09
msgid "Included Bookmarklets"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:142
# f5feb8520eb447888e60eb6ad5f2f26d
msgid "Several useful bookmarklets are available from the ``admindocs`` page:"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:145
# ac4190c0dcc8416b83be492022de144a
msgid "Jumps you from any page to the documentation for the view that generates that page."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:149
# 822e9d768c234ad88b882f2fc6b8ee0f
msgid "Shows the content-type and unique ID for pages that represent a single object."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:153
# 57e22363e38542ebbac20d6f3596f67f
msgid "Jumps to the admin page for pages that represent a single object."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:155
# 3077b0dfbf694ef0862db164dce788cd
msgid "Using these bookmarklets requires that you are either logged into the :mod:`Django admin <django.contrib.admin>` as a :class:`~django.contrib.auth.models.User` with :attr:`~django.contrib.auth.models.User.is_staff` set to `True`, or that the :mod:`django.middleware.doc` middleware and :mod:`XViewMiddleware <django.middleware.doc>` are installed and you are accessing the site from an IP address listed in :setting:`INTERNAL_IPS`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:3
# 432ac69b39a444cf91b0331f778df0df
msgid "The Django admin site"
msgstr ""

#: ../../ref/contrib/admin/index.txt:8
# f2b62da689974dbc80a7f0601a9acb11
msgid "One of the most powerful parts of Django is the automatic admin interface. It reads metadata in your model to provide a powerful and production-ready interface that content producers can immediately use to start adding content to the site. In this document, we discuss how to activate, use and customize Django's admin interface."
msgstr ""

#: ../../ref/contrib/admin/index.txt:17
# b01051d406d14b9687c6d7f63429fb86
msgid "There are seven steps in activating the Django admin site:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:19
# 6e4570cd4d7243e28366feb2d0aecb70
msgid "Add ``'django.contrib.admin'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../ref/contrib/admin/index.txt:22
# 44c1a0ed75ca4e6098ff1a11cd8fea1f
msgid "The admin has four dependencies - :mod:`django.contrib.auth`, :mod:`django.contrib.contenttypes`, :mod:`django.contrib.messages` and :mod:`django.contrib.sessions`.  If these applications are not in your :setting:`INSTALLED_APPS` list, add them."
msgstr ""

#: ../../ref/contrib/admin/index.txt:28
# cc6beecb22ef46d597214add18c36f82
msgid "Add ``django.contrib.messages.context_processors.messages`` to :setting:`TEMPLATE_CONTEXT_PROCESSORS` as well as :class:`django.contrib.auth.middleware.AuthenticationMiddleware` and :class:`django.contrib.messages.middleware.MessageMiddleware` to :setting:`MIDDLEWARE_CLASSES`. (These are all active by default, so you only need to do this if you've manually tweaked the settings.)"
msgstr ""

#: ../../ref/contrib/admin/index.txt:35
# 7667b5db482249d08fd497288741a69b
msgid "Determine which of your application's models should be editable in the admin interface."
msgstr ""

#: ../../ref/contrib/admin/index.txt:38
# 19cbc01e2776466fa166e814cbe1b826
msgid "For each of those models, optionally create a ``ModelAdmin`` class that encapsulates the customized admin functionality and options for that particular model."
msgstr ""

#: ../../ref/contrib/admin/index.txt:42
# 409f9a89994e42e2a2ea619d8d7ead8c
msgid "Instantiate an ``AdminSite`` and tell it about each of your models and ``ModelAdmin`` classes."
msgstr ""

#: ../../ref/contrib/admin/index.txt:45
# 834d872d57cc432aaba02514aebd9abe
msgid "Hook the ``AdminSite`` instance into your URLconf."
msgstr ""

#: ../../ref/contrib/admin/index.txt:47
# 18af9bb58e8e42bf9ef7f11dcf2c9a42
msgid "After you've taken these steps, you'll be able to use your Django admin site by visiting the URL you hooked it into (``/admin/``, by default)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:51
# c2fb9f99a57e49f4970bdc200a9cdab5
msgid "Other topics"
msgstr ""

#: ../../ref/contrib/admin/index.txt:61
# 6cb7a6d2fdcf43b9b4ec9bbc506ffafb
msgid "For information about serving the static files (images, JavaScript, and CSS) associated with the admin in production, see :ref:`serving-files`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:64
# 31f986f4d94e488cb5ac889d4b14ebe8
msgid "Having problems?  Try :doc:`/faq/admin`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:67
# d340ce0c481b4ba7bdcb208e52bb6474
msgid "``ModelAdmin`` objects"
msgstr ""

#: ../../ref/contrib/admin/index.txt:71
# e145e23ce66d4b5ea287ee4699acf369
msgid "The ``ModelAdmin`` class is the representation of a model in the admin interface. These are stored in a file named ``admin.py`` in your application. Let's take a look at a very simple example of the ``ModelAdmin``::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:85
# adcd77b9a370480385065213a4991617
msgid "In the preceding example, the ``ModelAdmin`` class doesn't define any custom values (yet). As a result, the default admin interface will be provided. If you are happy with the default admin interface, you don't need to define a ``ModelAdmin`` object at all -- you can register the model class without providing a ``ModelAdmin`` description. The preceding example could be simplified to::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:98
# b54eb8e9200a4f8e81d09b178c0c610c
msgid "``ModelAdmin`` options"
msgstr ""

#: ../../ref/contrib/admin/index.txt:100
# 89fc6fbb5a4c4cc48a8f2aa1c232e95b
msgid "The ``ModelAdmin`` is very flexible. It has several options for dealing with customizing the interface. All options are defined on the ``ModelAdmin`` subclass::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:109
# 0cbc5ca2e54f40dea1a411269deb66cf
msgid "A list of actions to make available on the change list page. See :doc:`/ref/contrib/admin/actions` for details."
msgstr ""

#: ../../ref/contrib/admin/index.txt:115
# 8c62dbe01bc04227a293486bd4b7f2c8
msgid "Controls where on the page the actions bar appears. By default, the admin changelist displays actions at the top of the page (``actions_on_top = True; actions_on_bottom = False``)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:121
# feb3b19a20bd4ee3b0b4532caf0346ac
msgid "Controls whether a selection counter is displayed next to the action dropdown. By default, the admin changelist will display it (``actions_selection_counter = True``)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:127
# 504b2244b91b49f79ca1180c4bcae0f0
msgid "Set ``date_hierarchy`` to the name of a ``DateField`` or ``DateTimeField`` in your model, and the change list page will include a date-based drilldown navigation by that field."
msgstr ""

#: ../../ref/contrib/admin/index.txt:131
#: ../../ref/contrib/admin/index.txt:251
#: ../../ref/contrib/admin/index.txt:276
#: ../../ref/contrib/admin/index.txt:396
#: ../../ref/contrib/csrf.txt:400
#: ../../ref/contrib/gis/gdal.txt:894
#: ../../ref/contrib/gis/geoquerysets.txt:37
#: ../../ref/contrib/gis/geoquerysets.txt:59
#: ../../ref/contrib/gis/geoquerysets.txt:81
#: ../../ref/contrib/gis/geoquerysets.txt:102
#: ../../ref/contrib/gis/geoquerysets.txt:129
#: ../../ref/contrib/gis/geoquerysets.txt:149
#: ../../ref/contrib/gis/geoquerysets.txt:170
#: ../../ref/contrib/gis/geoquerysets.txt:190
#: ../../ref/contrib/gis/geoquerysets.txt:210
#: ../../ref/contrib/gis/geoquerysets.txt:245
#: ../../ref/contrib/gis/geoquerysets.txt:285
#: ../../ref/contrib/gis/geoquerysets.txt:309
#: ../../ref/contrib/gis/geoquerysets.txt:326
#: ../../ref/contrib/gis/geoquerysets.txt:348
#: ../../ref/contrib/gis/geoquerysets.txt:371
#: ../../ref/contrib/gis/geoquerysets.txt:389
#: ../../ref/contrib/gis/geoquerysets.txt:407
#: ../../ref/contrib/gis/geoquerysets.txt:426
#: ../../ref/contrib/gis/geoquerysets.txt:444
#: ../../ref/contrib/gis/geoquerysets.txt:462
#: ../../ref/contrib/gis/geoquerysets.txt:480
#: ../../ref/contrib/gis/geoquerysets.txt:498
#: ../../ref/contrib/gis/geoquerysets.txt:539
#: ../../ref/contrib/gis/geoquerysets.txt:559
#: ../../ref/contrib/gis/geoquerysets.txt:579
#: ../../ref/contrib/gis/geoquerysets.txt:599
#: ../../ref/contrib/gis/geoquerysets.txt:619
#: ../../ref/contrib/gis/geoquerysets.txt:867
#: ../../ref/contrib/gis/geoquerysets.txt:982
#: ../../ref/contrib/gis/geoquerysets.txt:1015
#: ../../ref/contrib/gis/geoquerysets.txt:1120
#: ../../ref/contrib/gis/geoquerysets.txt:1136
#: ../../ref/contrib/gis/geoquerysets.txt:1152
#: ../../ref/contrib/gis/geoquerysets.txt:1174
#: ../../ref/contrib/gis/geoquerysets.txt:1193
#: ../../ref/contrib/gis/geos.txt:792
#: ../../ref/contrib/gis/geos.txt:805
#: ../../ref/contrib/gis/geos.txt:821
#: ../../ref/contrib/gis/geos.txt:830
#: ../../ref/contrib/gis/geos.txt:885
#: ../../ref/contrib/gis/geos.txt:908
#: ../../ref/models/options.txt:91
#: ../../ref/models/querysets.txt:264
#: ../../ref/models/querysets.txt:452
#: ../../ref/models/querysets.txt:896
#: ../../ref/models/querysets.txt:965
#: ../../ref/models/querysets.txt:1023
#: ../../ref/models/querysets.txt:1406
#: ../../ref/models/querysets.txt:1432
#: ../../ref/models/querysets.txt:1746
#: ../../ref/models/querysets.txt:1771
#: ../../ref/models/querysets.txt:1796
#: ../../ref/models/querysets.txt:1817
#: ../../ref/models/querysets.txt:1874
#: ../../ref/models/querysets.txt:1910
#: ../../ref/models/querysets.txt:1928
#: ../../ref/models/querysets.txt:1949
#: ../../ref/models/querysets.txt:1970
#: ../../ref/models/querysets.txt:1991
#: ../../ref/models/querysets.txt:2022
#: ../../ref/models/querysets.txt:2040
#: ../../ref/models/querysets.txt:2057
#: ../../ref/models/querysets.txt:2080
#: ../../ref/models/querysets.txt:2106
#: ../../ref/models/querysets.txt:2122
#: ../../ref/models/querysets.txt:2149
#: ../../ref/models/querysets.txt:2173
#: ../../ref/models/relations.txt:41
#: ../../ref/settings.txt:1295
#: ../../ref/templates/builtins.txt:612
#: ../../ref/templates/builtins.txt:726
#: ../../ref/templates/builtins.txt:1776
#: ../../ref/templates/builtins.txt:1786
#: ../../ref/templates/builtins.txt:1793
#: ../../ref/templates/builtins.txt:1897
# 9d6523b6cc4d40d899b6b7827579b9b9
# 51cf14214a55470f9115b4ae5651b1c0
# 7a58f07b8cb141ecaaa5972019135829
# 4212662c2fa14ea794a21c921c0ec66f
# 0e0c9de715f24bd987a884ee1d579737
# ae33e1492a374ff38f64ec88b8827a34
# bff0aff3cbfc4755a08cd4ef68e24e01
# 6153bc9d33524b42bf912bdf978d4bd9
# cfb5c0a7f1814bdaa2a95385c467b2ab
# 89fa498686e14e4893772e7954ccdc3e
# ee6105358f404f1e8e3b63868a48fb96
# 4aa3f1b6cbf04b2996ae0aca031b5080
# e1dbc7fd1bf44205933f9373b51d6458
# 69906be58c70438d84c140d5f34e1276
# 29951ad8067743dcb4f6ea4f551fa9c9
# be750d588c584ac9a97dd619fe723738
# 78c02a2917e64beba695d56e61fc51bd
# cff2ded5091b41678647219f20235030
# 6fef7f0db5a44540979e48ee4df8c362
# 4ddb2deceb8e4a43aae395c441496289
# 0faef8c826364f9daf531e360fb478d3
# 1b401f7a535745938033e0a31dc40891
# 13e02b3cc10f4e838c8847f9a53b3175
# 6b71e7cd5e704fbcb12d5057e156cf58
# c8edae49e8ca49f5bef76f96382d9537
# 405ec1db154b433ab6344c1f1db77f16
# 2a3b22bdf4d04336a1756703dadccb7b
# de9b76e02d7c4ea0bbf629579fbe9328
# d550fdf6656f49bf953ec933d5196880
# 1c688c8db3e74a3ab4d86965446decf7
# b8085f3ad43c4b57ac5d03ca6be86f0f
# 55966b63cb384923afc4603873d4ab7b
# bfaad043d01243c9b122a39f467625e4
# d0dc031592f54e61826364e6ac791747
# 09628a2eb8be498d913f85d40c787447
# f67e17a7bce34e5cb1f5eaaf95d783ad
# bd595dacfd6e4f44858dd1bae384d88c
# 8cbdc30600474099adb138f7294d349e
# 9c24471d122d45a19b6d8cb59b37bf97
# 407c36a0d8f6455290484073625c4338
# 877441012c5c40a691cb2bdaad40ece3
# f096d1f447cd4d6d99fb5312e357acb8
# 59f4f8e82bfc4ad8886d6d5fb3b25115
# d649ce2e9403419fa7f7287655060aa7
# 52b5a077a187418e952685123638a49a
# 8ee9bac2e6b8404aaf5fe29270c15625
# 815cae15c1d24a238f885a783e6bc276
# 542f75da9cfd4b479a8932c469c1466b
# e8d3e30faca24c24b35e377f07e28521
# 288c0112ae67434ebcd419edda494f4a
# 4e03bce255274d04bb9f8f180ec44cd7
# 0f9d84e4d13c49138b284559ede88c1b
# 1fe7cf7f1ee44982943413a35bf86150
# e99465d285a047938f62f4895f4aa2cc
# 8d1da1cd9b854480a22bfdb82472ca84
# 0ea90b9d92504dc2a7efe0db4b88cd45
# b744a48f904a4376b1c3b3df9274f7cc
# a0db4fccc2ca49908f17199d971570f0
# f0a16ce40eff4f9aa57e2d8f421bb447
# 81ef4aea6fc04222ac4be1976c7ae737
# fa6218c9d0cc4691b810b4263da6d116
# 4724b4ff2ef440129e414bdb37117e6f
# 2a00560d71544f81ad97ecb2f73ba44c
# 17bcb60f9ee24b7da09db626121c528e
# 626129e1e3d14722be39ca88120d64ca
# 36126d7acc3b4efc9ede1c5a88c82bf8
# dcf1fb25644140b092eae5bd8ca382ae
# 67f0d992074741aab879f09173b70e83
# bc6ff7de59c94567886130b8da07406c
# d97b670c37cf4ac88918ad7b58444057
# 1b4f5bcd76454a608ce9d4697792bf8c
# 3c35ad5cda094bbf81f1f1702919a746
# b0178eb729474030a33795633163fa2b
# 880b120afd0e4071ad81ad296ae31f4d
# 73b9fc1586e54cad87d9ee5e560157c7
# 375247f83864469fa0b03f9e8f1c6a49
# ef84dd959c3c46e98c410ddf442d03a8
# 6ac27ad126d545739881f8ddce2676b9
# efd862db71f544899ea9210dc87ed620
# 3364c4bae79342fdbe82d882569af73c
# 8a239ff0044d42d3aea1c03df7634bf0
msgid "Example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:135
# 95243c0f51fd4c1d9ad866d0fe460cc2
msgid "This will intelligently populate itself based on available data, e.g. if all the dates are in one month, it'll show the day-level drill-down only."
msgstr ""

#: ../../ref/contrib/admin/index.txt:141
# 11828bf92a8441e79c920134b1860dea
msgid "This attribute, if given, should be a list of field names to exclude from the form."
msgstr ""

#: ../../ref/contrib/admin/index.txt:144
# c04f7fa674fe429c80e9a84d463282d2
msgid "For example, let's consider the following model::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:151
# 7448c17d39744c98ab29acc52f54c235
msgid "If you want a form for the ``Author`` model that includes only the ``name`` and ``title`` fields, you would specify ``fields`` or ``exclude`` like this::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:161
# 64f804be618b4818962e85c5b9f5bfaa
msgid "Since the Author model only has three fields, ``name``, ``title``, and ``birth_date``, the forms resulting from the above declarations will contain exactly the same fields."
msgstr ""

#: ../../ref/contrib/admin/index.txt:167
# d29e7ec81f5542e5979aa8445b147eec
msgid "If you need to achieve simple changes in the layout of fields in the forms of the \"add\" and \"change\" pages like only showing a subset of the available fields, modifying their order or grouping them in rows you can use the ``fields`` option (for more complex layout needs see the :attr:`~ModelAdmin.fieldsets` option described in the next section). For example, you could define a simpler version of the admin form for the :class:`django.contrib.flatpages.models.FlatPage` model as follows::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:178
# 4f28d5a85fe74f828b9ba5ca518b305c
msgid "In the above example, only the fields ``url``, ``title`` and ``content`` will be displayed, sequentially, in the form. ``fields`` can contain values defined in :attr:`ModelAdmin.readonly_fields` to be displayed as read-only."
msgstr ""

#: ../../ref/contrib/admin/index.txt:183
# 3251c671826849198016b8d7ae9600e8
msgid "The ``fields`` option, unlike :attr:`~ModelAdmin.list_display`, may only contain names of fields on the model or the form specified by :attr:`~ModelAdmin.form`. It may contain callables only if they are listed in :attr:`~ModelAdmin.readonly_fields`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:190
# 8a6571a662b14cd888931552939a23fe
msgid "To display multiple fields on the same line, wrap those fields in their own tuple. In this example, the ``url`` and ``title`` fields will display on the same line and the ``content`` field will be displayed below them in its own line::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:200
# 9cf5440ef4944ae39de92cba1cde0924
msgid "This ``fields`` option should not be confused with the ``fields`` dictionary key that is within the :attr:`~ModelAdmin.fieldsets` option, as described in the next section."
msgstr ""

#: ../../ref/contrib/admin/index.txt:204
# 62b5f5f181c74437af585a878d009bc1
msgid "If neither ``fields`` nor :attr:`~ModelAdmin.fieldsets` options are present, Django will default to displaying each field that isn't an ``AutoField`` and has ``editable=True``, in a single fieldset, in the same order as the fields are defined in the model."
msgstr ""

#: ../../ref/contrib/admin/index.txt:211
# 5377643cf73e44f0b30d58aaa12e5272
msgid "Set ``fieldsets`` to control the layout of admin \"add\" and \"change\" pages."
msgstr ""

#: ../../ref/contrib/admin/index.txt:213
# 8d4de3b12c9f4274956b678fab822c1f
msgid "``fieldsets`` is a list of two-tuples, in which each two-tuple represents a ``<fieldset>`` on the admin form page. (A ``<fieldset>`` is a \"section\" of the form.)"
msgstr ""

#: ../../ref/contrib/admin/index.txt:217
# 606a447209a44df4a8d74ad5caedaaa1
msgid "The two-tuples are in the format ``(name, field_options)``, where ``name`` is a string representing the title of the fieldset and ``field_options`` is a dictionary of information about the fieldset, including a list of fields to be displayed in it."
msgstr ""

#: ../../ref/contrib/admin/index.txt:222
# 8460f54795f34138851d213876f400fd
msgid "A full example, taken from the :class:`django.contrib.flatpages.models.FlatPage` model::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:236
# 691b713fb2c74be099f19d3bb540f34f
msgid "This results in an admin page that looks like:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:240
# 7ad800b9a702445f8d7d86b5b50a9f17
msgid "If neither ``fieldsets`` nor :attr:`~ModelAdmin.fields` options are present, Django will default to displaying each field that isn't an ``AutoField`` and has ``editable=True``, in a single fieldset, in the same order as the fields are defined in the model."
msgstr ""

#: ../../ref/contrib/admin/index.txt:245
# 9ea6968a479841e8b93e577d802d8f51
msgid "The ``field_options`` dictionary can have the following keys:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:248
# cc7e8aad3bc04539837f1cc5d2a12d1b
msgid "A tuple of field names to display in this fieldset. This key is required."
msgstr ""

#: ../../ref/contrib/admin/index.txt:257
# 4290c0ffbfc042b0baa4768ceb696c4f
msgid "As with the :attr:`~ModelAdmin.fields` option, to display multiple fields on the same line, wrap those fields in their own tuple. In this example, the ``first_name`` and ``last_name`` fields will display on the same line::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:266
# 18cb497013f242ca9bce5c64f7650633
msgid "``fields`` can contain values defined in :attr:`~ModelAdmin.readonly_fields` to be displayed as read-only."
msgstr ""

#: ../../ref/contrib/admin/index.txt:269
# 55f85a12e76f49999ec4cf2526bff3f5
msgid "If you add the name of a callable to ``fields``, the same rule applies as with the :attr:`~ModelAdmin.fields` option: the callable must be listed in :attr:`~ModelAdmin.readonly_fields`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:274
# 1a1417f894224442bd8401cf9845b1d0
msgid "A list containing extra CSS classes to apply to the fieldset."
msgstr ""

#: ../../ref/contrib/admin/index.txt:282
# a80df754de514627a4561adbfc7a0203
msgid "Two useful classes defined by the default admin site stylesheet are ``collapse`` and ``wide``. Fieldsets with the ``collapse`` style will be initially collapsed in the admin and replaced with a small \"click to expand\" link. Fieldsets with the ``wide`` style will be given extra horizontal space."
msgstr ""

#: ../../ref/contrib/admin/index.txt:289
# 6d25cd8baf8f4bbdb5a2810f2e35a6fd
msgid "A string of optional extra text to be displayed at the top of each fieldset, under the heading of the fieldset."
msgstr ""

#: ../../ref/contrib/admin/index.txt:292
# c63c1686424648c7916c668117909e2e
msgid "Note that this value is *not* HTML-escaped when it's displayed in the admin interface. This lets you include HTML if you so desire. Alternatively you can use plain text and ``django.utils.html.escape()`` to escape any HTML special characters."
msgstr ""

#: ../../ref/contrib/admin/index.txt:300
# e371ef95388d4eef8a16999d2bacb4fb
msgid "By default, a :class:`~django.db.models.ManyToManyField` is displayed in the admin site with a ``<select multiple>``. However, multiple-select boxes can be difficult to use when selecting many items. Adding a :class:`~django.db.models.ManyToManyField` to this list will instead use a nifty unobtrusive JavaScript \"filter\" interface that allows searching within the options. The unselected and selected options appear in two boxes side by side. See :attr:`~ModelAdmin.filter_vertical` to use a vertical interface."
msgstr ""

#: ../../ref/contrib/admin/index.txt:311
# a8466c30fb124a86b7b2f093abcf3db0
msgid "Same as :attr:`~ModelAdmin.filter_horizontal`, but uses a vertical display of the filter interface with the box of unselected options appearing above the box of selected options."
msgstr ""

#: ../../ref/contrib/admin/index.txt:317
# 95055ad3946140539004c0e0f649d744
msgid "By default a ``ModelForm`` is dynamically created for your model. It is used to create the form presented on both the add/change pages. You can easily provide your own ``ModelForm`` to override any default form behavior on the add/change pages. Alternatively, you can customize the default form rather than specifying an entirely new one by using the :meth:`ModelAdmin.get_form` method."
msgstr ""

#: ../../ref/contrib/admin/index.txt:324
# ef5470bc26ae47aebb84fc379aa14bdd
msgid "For an example see the section `Adding custom validation to the admin`_."
msgstr ""

#: ../../ref/contrib/admin/index.txt:328
# 9bc283014bde4f709b6c71775b1fe05e
msgid "If your ``ModelForm`` and ``ModelAdmin`` both define an ``exclude`` option then ``ModelAdmin`` takes precedence::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:341
# b742125c7734470e92f73601fc2a13b8
msgid "In the above example, the \"age\" field will be excluded but the \"name\" field will be included in the generated form."
msgstr ""

#: ../../ref/contrib/admin/index.txt:346
# 69d71c6db23e4a69a876b13f71f6a21e
msgid "This provides a quick-and-dirty way to override some of the :class:`~django.forms.Field` options for use in the admin. ``formfield_overrides`` is a dictionary mapping a field class to a dict of arguments to pass to the field at construction time."
msgstr ""

#: ../../ref/contrib/admin/index.txt:351
# dcfe8160e7ee4deea2d468a32c7940c1
msgid "Since that's a bit abstract, let's look at a concrete example. The most common use of ``formfield_overrides`` is to add a custom widget for a certain type of field. So, imagine we've written a ``RichTextEditorWidget`` that we'd like to use for large text fields instead of the default ``<textarea>``. Here's how we'd do that::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:369
# d3bc6d01a1a34056bb47f10682fea5ab
msgid "Note that the key in the dictionary is the actual field class, *not* a string. The value is another dictionary; these arguments will be passed to the form field's ``__init__()`` method. See :doc:`/ref/forms/api` for details."
msgstr ""

#: ../../ref/contrib/admin/index.txt:376
# 441e128706ab4d5ca58915ff4df371af
msgid "If you want to use a custom widget with a relation field (i.e. :class:`~django.db.models.ForeignKey` or :class:`~django.db.models.ManyToManyField`), make sure you haven't included that field's name in ``raw_id_fields`` or ``radio_fields``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:381
# 3644cc228be34002a727d3327926dd89
msgid "``formfield_overrides`` won't let you change the widget on relation fields that have ``raw_id_fields`` or ``radio_fields`` set. That's because ``raw_id_fields`` and ``radio_fields`` imply custom widgets of their own."
msgstr ""

#: ../../ref/contrib/admin/index.txt:388
# 49f0869e55eb4afaac923885c5c7ca05
msgid "See :class:`InlineModelAdmin` objects below as well as :meth:`ModelAdmin.get_formsets`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:393
# c7f1ceec8ac14eecbb3fc3153a8841ae
msgid "Set ``list_display`` to control which fields are displayed on the change list page of the admin."
msgstr ""

#: ../../ref/contrib/admin/index.txt:400
# 02e4127d6abf40b69cd916fa8fd1c8b3
msgid "If you don't set ``list_display``, the admin site will display a single column that displays the ``__unicode__()`` representation of each object."
msgstr ""

#: ../../ref/contrib/admin/index.txt:403
# 41e80a87d58d474ba0281c010205e149
msgid "You have four possible values that can be used in ``list_display``:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:405
# c37ec4bd652e45f5bacd068980778799
msgid "A field of the model. For example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:410
# c7a43539d94f4003b94137f06be6e517
msgid "A callable that accepts one parameter for the model instance. For example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:420
# b99985244295410d8a7981f1c6785843
msgid "A string representing an attribute on the ``ModelAdmin``. This behaves same as the callable. For example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:430
# 9cd89b5a109a4653867994f960af6be7
msgid "A string representing an attribute on the model. This behaves almost the same as the callable, but ``self`` in this context is the model instance. Here's a full model example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:445
# 8c4d28cc0bbb4f0bb8b09a6a3347eeac
msgid "A few special cases to note about ``list_display``:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:447
# eec8c92ce35b461e90d0e3cab6aa89a5
msgid "If the field is a ``ForeignKey``, Django will display the ``__unicode__()`` of the related object."
msgstr ""

#: ../../ref/contrib/admin/index.txt:450
# 927ade7e8bdd412897122f657aff219e
msgid "``ManyToManyField`` fields aren't supported, because that would entail executing a separate SQL statement for each row in the table. If you want to do this nonetheless, give your model a custom method, and add that method's name to ``list_display``. (See below for more on custom methods in ``list_display``.)"
msgstr ""

#: ../../ref/contrib/admin/index.txt:456
# 2d987a7a90274dacb157f5b277f5655c
msgid "If the field is a ``BooleanField`` or ``NullBooleanField``, Django will display a pretty \"on\" or \"off\" icon instead of ``True`` or ``False``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:460
# 8ac65f9ad9f040ff9a967adf8b8bc5f1
msgid "If the string given is a method of the model, ``ModelAdmin`` or a callable, Django will HTML-escape the output by default. If you'd rather not escape the output of the method, give the method an ``allow_tags`` attribute whose value is ``True``. However, to avoid an XSS vulnerability, you should use :func:`~django.utils.html.format_html` to escape user-provided inputs."
msgstr ""

#: ../../ref/contrib/admin/index.txt:467
#: ../../ref/contrib/admin/index.txt:492
# 4fc9115e2599448f956335b199b7a9b6
# 40b2a26f4b294a679098afbc3988686b
msgid "Here's a full example model::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:487
# c5f35a68676a4c65a95bc7cba71ed08e
msgid "If the string given is a method of the model, ``ModelAdmin`` or a callable that returns True or False Django will display a pretty \"on\" or \"off\" icon if you give the method a ``boolean`` attribute whose value is ``True``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:506
# 791e2a78d49e4550a096463f75fee992
msgid "The ``__str__()`` and ``__unicode__()`` methods are just as valid in ``list_display`` as any other model method, so it's perfectly OK to do this::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:512
# 217ddad94ff44dc6ad5c35f42578bd9a
msgid "Usually, elements of ``list_display`` that aren't actual database fields can't be used in sorting (because Django does all the sorting at the database level)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:516
# 1807e6709d404e78b788e66988ec81b9
msgid "However, if an element of ``list_display`` represents a certain database field, you can indicate this fact by setting the ``admin_order_field`` attribute of the item."
msgstr ""

#: ../../ref/contrib/admin/index.txt:539
# b9989a402c744cfa8cbe37dfc58ca07c
msgid "The above will tell Django to order by the ``first_name`` field when trying to sort by ``colored_first_name`` in the admin."
msgstr ""

#: ../../ref/contrib/admin/index.txt:544
# cf26135a37954852bb27eb0f9e64dc49
msgid "Set ``list_display_links`` to control which fields in ``list_display`` should be linked to the \"change\" page for an object."
msgstr ""

#: ../../ref/contrib/admin/index.txt:547
# e83c2422b0c5447e80ff666028b20837
msgid "By default, the change list page will link the first column -- the first field specified in ``list_display`` -- to the change page for each item. But ``list_display_links`` lets you change which columns are linked. Set ``list_display_links`` to a list or tuple of fields (in the same format as ``list_display``) to link."
msgstr ""

#: ../../ref/contrib/admin/index.txt:553
# e87827351a8a43fb8f33f2728714f738
msgid "``list_display_links`` can specify one or many fields. As long as the fields appear in ``list_display``, Django doesn't care how many (or how few) fields are linked. The only requirement is: If you want to use ``list_display_links``, you must define ``list_display``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:558
# 49cac1fb360648dc811c4407ccb4c7ff
msgid "In this example, the ``first_name`` and ``last_name`` fields will be linked on the change list page::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:569
# 28c10d20551b462f8d0bf87cab19eb88
msgid "Set ``list_editable`` to a list of field names on the model which will allow editing on the change list page. That is, fields listed in ``list_editable`` will be displayed as form widgets on the change list page, allowing users to edit and save multiple rows at once."
msgstr ""

#: ../../ref/contrib/admin/index.txt:576
# e794dc3dad06496ea4fa0e035e543a50
msgid "``list_editable`` interacts with a couple of other options in particular ways; you should note the following rules:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:579
# 4a369b790f6741a59bdee42bd6c495ce
msgid "Any field in ``list_editable`` must also be in ``list_display``. You can't edit a field that's not displayed!"
msgstr ""

#: ../../ref/contrib/admin/index.txt:582
# d8fe76fda3c74bc89b8a88dbadba543e
msgid "The same field can't be listed in both ``list_editable`` and ``list_display_links`` -- a field can't be both a form and a link."
msgstr ""

#: ../../ref/contrib/admin/index.txt:586
# bc12152f046e4036978fbe7743d06611
msgid "You'll get a validation error if either of these rules are broken."
msgstr ""

#: ../../ref/contrib/admin/index.txt:590
# 58304cbf91f9414cbe990b5fbbfc582e
msgid "Set ``list_filter`` to activate filters in the right sidebar of the change list page of the admin, as illustrated in the following screenshot:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:595
# 391b886f848a4f629db1bd9660ea07ba
msgid "``list_filter`` should be a list or tuple of elements, where each element should be of one of the following types:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:598
# c5126a070fb74fafbc9d7bb3ca27024e
msgid "a field name, where the specified field should be either a ``BooleanField``, ``CharField``, ``DateField``, ``DateTimeField``, ``IntegerField``, ``ForeignKey`` or ``ManyToManyField``, for example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:605
# 7fa65e5a63734f3684af4d7cc1607ace
msgid "Field names in ``list_filter`` can also span relations using the ``__`` lookup, for example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:613
# c8529ac4c31348f782a17cb90af55d21
msgid "a class inheriting from ``django.contrib.admin.SimpleListFilter``, which you need to provide the ``title`` and ``parameter_name`` attributes to and override the ``lookups`` and ``queryset`` methods, e.g.::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:664
# 0483ff9c4dd24b409eaf4b3fa8c2e851
msgid "As a convenience, the ``HttpRequest`` object is passed to the ``lookups`` and ``queryset`` methods, for example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:679
# 314a688c5e1348c49e3455c697c46920
msgid "Also as a convenience, the ``ModelAdmin`` object is passed to the ``lookups`` method, for example if you want to base the lookups on the available data::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:700
# 2c9d578c8eed4d39b7c7e7b69a5fe69f
msgid "a tuple, where the first element is a field name and the second element is a class inheriting from ``django.contrib.admin.FieldListFilter``, for example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:713
# 2dc7b98afa1e46a9806fe0cc8112f08c
msgid "The ``FieldListFilter`` API is considered internal and might be changed."
msgstr ""

#: ../../ref/contrib/admin/index.txt:718
# 59db8fa590834f84873438488c0c986e
msgid "It is possible to specify a custom template for rendering a list filter::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:723
# d9040c7c545740bc85e5d189f117aad0
msgid "See the default template provided by django (``admin/filter.html``) for a concrete example."
msgstr ""

#: ../../ref/contrib/admin/index.txt:730
# e437c4fb1fe24f62b16eee3d9a92f5a6
msgid "Set ``list_max_show_all`` to control how many items can appear on a \"Show all\" admin change list page. The admin will display a \"Show all\" link on the change list only if the total result count is less than or equal to this setting. By default, this is set to ``200``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:737
# 438d083a987c429c9109b61bc334bdbb
msgid "Set ``list_per_page`` to control how many items appear on each paginated admin change list page. By default, this is set to ``100``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:742
# 34aa6480f18342b081ab0da60a426f72
msgid "Set ``list_select_related`` to tell Django to use :meth:`~django.db.models.query.QuerySet.select_related` in retrieving the list of objects on the admin change list page. This can save you a bunch of database queries."
msgstr ""

#: ../../ref/contrib/admin/index.txt:747
# 53c9cab24bd043fb89492c6670c88e94
msgid "The value should be either ``True`` or ``False``. Default is ``False``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:749
# e37a586656d24a948310020f2ad24239
msgid "Note that Django will use :meth:`~django.db.models.query.QuerySet.select_related`, regardless of this setting if one of the ``list_display`` fields is a ``ForeignKey``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:756
# 296fcf9ceb9843fb86de7fcee179c8d2
msgid "Set ``ordering`` to specify how lists of objects should be ordered in the Django admin views. This should be a list or tuple in the same format as a model's :attr:`~django.db.models.Options.ordering` parameter."
msgstr ""

#: ../../ref/contrib/admin/index.txt:760
# 4b9fbe8fcc3b47e7985c1f3ac167f54c
msgid "If this isn't provided, the Django admin will use the model's default ordering."
msgstr ""

#: ../../ref/contrib/admin/index.txt:765
# 819f8230d5a74b929c1a957c6eeca3d4
msgid "If you need to specify a dynamic order (for example depending on user or language) you can implement a :meth:`~ModelAdmin.get_ordering` method."
msgstr ""

#: ../../ref/contrib/admin/index.txt:770
# 1e8134918c324e82baf0f9c75dd20d69
msgid "Django honors all elements in the list/tuple; before 1.4, only the first was respected."
msgstr ""

#: ../../ref/contrib/admin/index.txt:775
# 26136b31ea7040f1b48b045d49d02afc
msgid "The paginator class to be used for pagination. By default, :class:`django.core.paginator.Paginator` is used. If the custom paginator class doesn't have the same constructor interface as :class:`django.core.paginator.Paginator`, you will also need to provide an implementation for :meth:`ModelAdmin.get_paginator`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:783
# fc6d54a6d9484e73b3e143f3e10e8cee
msgid "Set ``prepopulated_fields`` to a dictionary mapping field names to the fields it should prepopulate from::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:789
# 35d864afd1334e60845e8576878fde7b
msgid "When set, the given fields will use a bit of JavaScript to populate from the fields assigned. The main use for this functionality is to automatically generate the value for ``SlugField`` fields from one or more other fields. The generated value is produced by concatenating the values of the source fields, and then by transforming that result into a valid slug (e.g. substituting dashes for spaces)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:796
# eb2f5239429146628bedf623cd346ad2
msgid "``prepopulated_fields`` doesn't accept ``DateTimeField``, ``ForeignKey``, nor ``ManyToManyField`` fields."
msgstr ""

#: ../../ref/contrib/admin/index.txt:801
# 9bc6238d7c064c85962f27de74ed189b
msgid "By default, Django's admin uses a select-box interface (<select>) for fields that are ``ForeignKey`` or have ``choices`` set. If a field is present in ``radio_fields``, Django will use a radio-button interface instead. Assuming ``group`` is a ``ForeignKey`` on the ``Person`` model::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:809
# 54480739bf394e76b532df77e1ec9b49
msgid "You have the choice of using ``HORIZONTAL`` or ``VERTICAL`` from the ``django.contrib.admin`` module."
msgstr ""

#: ../../ref/contrib/admin/index.txt:812
# 44585fe9214e41318160d9e6b1157ce4
msgid "Don't include a field in ``radio_fields`` unless it's a ``ForeignKey`` or has ``choices`` set."
msgstr ""

#: ../../ref/contrib/admin/index.txt:817
#: ../../ref/contrib/admin/index.txt:1622
# 37a48e44a7c54473adced79d08169e70
# bded57d4495e4226a10a7b53c1c8c04d
msgid "By default, Django's admin uses a select-box interface (<select>) for fields that are ``ForeignKey``. Sometimes you don't want to incur the overhead of having to select all the related instances to display in the drop-down."
msgstr ""

#: ../../ref/contrib/admin/index.txt:822
# e7bad0868b9c40a8ac01042abf9446f3
msgid "``raw_id_fields`` is a list of fields you would like to change into an ``Input`` widget for either a ``ForeignKey`` or ``ManyToManyField``::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:829
# fefd3b0462304bf2834bd53b25f88a70
msgid "The ``raw_id_fields`` ``Input`` widget should contain a primary key if the field is a ``ForeignKey`` or a comma separated list of values if the field is a ``ManyToManyField``.  The ``raw_id_fields`` widget shows a magnifying glass button next to the field which allows users to search for and select a value:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:839
# 089fe46e7fb8496385eea64589a4154e
msgid "By default the admin shows all fields as editable. Any fields in this option (which should be a ``list`` or ``tuple``) will display its data as-is and non-editable; they are also excluded from the :class:`~django.forms.ModelForm` used for creating and editing. Note that when specifying :attr:`ModelAdmin.fields` or :attr:`ModelAdmin.fieldsets` the read-only fields must be present to be shown (they are ignored otherwise)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:847
# 218ec8922fd34bdc956fe77bfdf8776e
msgid "If ``readonly_fields`` is used without defining explicit ordering through :attr:`ModelAdmin.fields` or :attr:`ModelAdmin.fieldsets` they will be added last after all editable fields."
msgstr ""

#: ../../ref/contrib/admin/index.txt:851
# 78fe925cf48a4b5e8073b5b5a5474622
msgid "A read-only field can not only display data from a model's field, it can also display the output of a model's method or a method of the ``ModelAdmin`` class itself. This is very similar to the way :attr:`ModelAdmin.list_display` behaves. This provides an easy way to use the admin interface to provide feedback on the status of the objects being edited, for example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:881
# eb2fa7660eea4c4bb6543fe04ec7afbd
msgid "Set ``save_as`` to enable a \"save as\" feature on admin change forms."
msgstr ""

#: ../../ref/contrib/admin/index.txt:883
# d091d497c0fb4522bf5ecf82ababb053
msgid "Normally, objects have three save options: \"Save\", \"Save and continue editing\" and \"Save and add another\". If ``save_as`` is ``True``, \"Save and add another\" will be replaced by a \"Save as\" button."
msgstr ""

#: ../../ref/contrib/admin/index.txt:887
# bd9d87ccb5804d1681264d14d07e387c
msgid "\"Save as\" means the object will be saved as a new object (with a new ID), rather than the old object."
msgstr ""

#: ../../ref/contrib/admin/index.txt:890
# 3d26f3e234d04ab6808d2c1251bd2722
msgid "By default, ``save_as`` is set to ``False``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:894
# 17a8e4761c514e68860a91f99a3bb1f7
msgid "Set ``save_on_top`` to add save buttons across the top of your admin change forms."
msgstr ""

#: ../../ref/contrib/admin/index.txt:897
# ce1ea08b647f4a338b9b6c3157359360
msgid "Normally, the save buttons appear only at the bottom of the forms. If you set ``save_on_top``, the buttons will appear both on the top and the bottom."
msgstr ""

#: ../../ref/contrib/admin/index.txt:901
# 6499505f9692442e9bcd72755c8d6d44
msgid "By default, ``save_on_top`` is set to ``False``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:905
# a3788fb59c3d44caa983638b6adf2eea
msgid "Set ``search_fields`` to enable a search box on the admin change list page. This should be set to a list of field names that will be searched whenever somebody submits a search query in that text box."
msgstr ""

#: ../../ref/contrib/admin/index.txt:909
# 8ff6c1a7f9254186847229d39d719f22
msgid "These fields should be some kind of text field, such as ``CharField`` or ``TextField``. You can also perform a related lookup on a ``ForeignKey`` or ``ManyToManyField`` with the lookup API \"follow\" notation::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:915
# 9b7c58b9f96c4ff8a64fde96d62a1a00
msgid "For example, if you have a blog entry with an author, the following definition would enable search blog entries by the email address of the author::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:921
# 8b76537ee118464da32a979fed415c45
msgid "When somebody does a search in the admin search box, Django splits the search query into words and returns all objects that contain each of the words, case insensitive, where each word must be in at least one of ``search_fields``. For example, if ``search_fields`` is set to ``['first_name', 'last_name']`` and a user searches for ``john lennon``, Django will do the equivalent of this SQL ``WHERE`` clause::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:931
# a6abe640545e46709faefd834aecac0c
msgid "For faster and/or more restrictive searches, prefix the field name with an operator:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:935
# c0171acfbb134d36b77bf6c314cb649c
msgid "Matches the beginning of the field. For example, if ``search_fields`` is set to ``['^first_name', '^last_name']`` and a user searches for ``john lennon``, Django will do the equivalent of this SQL ``WHERE`` clause::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:943
# 101e0e29faa3490fbdee8f886f469c61
msgid "This query is more efficient than the normal ``'%john%'`` query, because the database only needs to check the beginning of a column's data, rather than seeking through the entire column's data. Plus, if the column has an index on it, some databases may be able to use the index for this query, even though it's a ``LIKE`` query."
msgstr ""

#: ../../ref/contrib/admin/index.txt:950
# fe285e31615a41c787552a0becbf18fd
msgid "Matches exactly, case-insensitive. For example, if ``search_fields`` is set to ``['=first_name', '=last_name']`` and a user searches for ``john lennon``, Django will do the equivalent of this SQL ``WHERE`` clause::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:958
# 7bea249a53fd4622a8d076e1edfbd976
msgid "Note that the query input is split by spaces, so, following this example, it's currently not possible to search for all records in which ``first_name`` is exactly ``'john winston'`` (containing a space)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:963
# a20fc0701e7a463ea595d089482b6e2e
msgid "Performs a full-text match. This is like the default search method but uses an index. Currently this is only available for MySQL."
msgstr ""

#: ../../ref/contrib/admin/index.txt:967
# d37b6e1cc26840b39865fe2c8c3d7e48
msgid "Custom template options"
msgstr ""

#: ../../ref/contrib/admin/index.txt:969
# 6bfda79b77974e9997913b910978f405
msgid "The `Overriding Admin Templates`_ section describes how to override or extend the default admin templates.  Use the following options to override the default templates used by the :class:`ModelAdmin` views:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:975
# e6ca2e5f91434f49b13bd8e70909d8c3
msgid "Path to a custom template, used by :meth:`add_view`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:979
# cada18392469426fb0354c0704778fed
msgid "Path to a custom template, used by :meth:`change_view`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:983
# 2cf5bdd187404c328d263b3e828ee628
msgid "Path to a custom template, used by :meth:`changelist_view`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:987
# 78a8787f010d4f04b78c7a1e655ef759
msgid "Path to a custom template, used by :meth:`delete_view` for displaying a confirmation page when deleting one or more objects."
msgstr ""

#: ../../ref/contrib/admin/index.txt:992
# 43a75bdc95aa421fa17586e11e7f3d4d
msgid "Path to a custom template, used by the ``delete_selected`` action method for displaying a confirmation page when deleting one or more objects. See the :doc:`actions documentation</ref/contrib/admin/actions>`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:998
# b46239e51b9e44dca2e018d49e37b8bc
msgid "Path to a custom template, used by :meth:`history_view`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1004
# 48cdfe9352dc4aae8d821edcb4c6243b
msgid "``ModelAdmin`` methods"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1008
# 27e191bca92e439cb8a6550fbe2941ef
msgid ":meth:`ModelAdmin.save_model` and :meth:`ModelAdmin.delete_model` must save/delete the object, they are not for veto purposes, rather they allow you to perform extra operations."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1014
# 749972f08dee4edb908630fd4692b447
msgid "The ``save_model`` method is given the ``HttpRequest``, a model instance, a ``ModelForm`` instance and a boolean value based on whether it is adding or changing the object. Here you can do any pre- or post-save operations."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1018
# ed9d914c19424f6e86a0d64c6db2ec78
msgid "For example to attach ``request.user`` to the object prior to saving::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1027
# 03920dc019a949a7bb7d48b6f4203fa1
msgid "The ``delete_model`` method is given the ``HttpRequest`` and a model instance. Use this method to do pre- or post-delete operations."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1032
# 116b6613315c421bbeb05d7ead333759
msgid "The ``save_formset`` method is given the ``HttpRequest``, the parent ``ModelForm`` instance and a boolean value based on whether it is adding or changing the parent object."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1036
# e9ae8ee2adc344f3aef5a9ed12942ffb
msgid "For example to attach ``request.user`` to each changed formset model instance::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1051
# 2c8fe3645cb4444aa99c51a5e44f8c07
msgid "The ``get_ordering`` method takes a``request`` as parameter and is expected to return a ``list`` or ``tuple`` for ordering similar to the :attr:`ordering` attribute. For example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1067
# 9d8ac384fbdf4200ae16f72e2b583905
msgid "The ``save_related`` method is given the ``HttpRequest``, the parent ``ModelForm`` instance, the list of inline formsets and a boolean value based on whether the parent is being added or changed. Here you can do any pre- or post-save operations for objects related to the parent. Note that at this point the parent object and its form have already been saved."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1075
# ed7b4008b7dc4561814b8f518a65afe7
msgid "The ``get_readonly_fields`` method is given the ``HttpRequest`` and the ``obj`` being edited (or ``None`` on an add form) and is expected to return a ``list`` or ``tuple`` of field names that will be displayed as read-only, as described above in the :attr:`ModelAdmin.readonly_fields` section."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1084
# de2e8a69f1fa4a2085b4e981baa9e9b8
msgid "The ``get_prepopulated_fields`` method is given the ``HttpRequest`` and the ``obj`` being edited (or ``None`` on an add form) and is expected to return a ``dictionary``, as described above in the :attr:`ModelAdmin.prepopulated_fields` section."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1093
# e7013861eff9433b8a49ab263f1da61f
msgid "The ``get_list_display`` method is given the ``HttpRequest`` and is expected to return a ``list`` or ``tuple`` of field names that will be displayed on the changelist view as described above in the :attr:`ModelAdmin.list_display` section."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1102
# eb79b1f8b3604ad5acd3d506a08d1f89
msgid "The ``get_list_display_links`` method is given the ``HttpRequest`` and the ``list`` or ``tuple`` returned by :meth:`ModelAdmin.get_list_display`. It is expected to return a ``list`` or ``tuple`` of field names on the changelist that will be linked to the change view, as described in the :attr:`ModelAdmin.list_display_links` section."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1110
# 999691588bad482f8d0a5ebfc8602941
msgid "The ``get_fieldsets`` method is given the ``HttpRequest`` and the ``obj`` being edited (or ``None`` on an add form) and is expected to return a list of two-tuples, in which each two-tuple represents a ``<fieldset>`` on the admin form page, as described above in the :attr:`ModelAdmin.fieldsets` section."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1119
# 2079c6b3c3c9436694b714b70de344d6
msgid "The ``get_list_filter`` method is given the ``HttpRequest`` and is expected to return the same kind of sequence type as for the :attr:`~ModelAdmin.list_filter` attribute."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1127
# 3e08cf5c7f8846af92ebb63e74731e77
msgid "The ``get_inline_instances`` method is given the ``HttpRequest`` and the ``obj`` being edited (or ``None`` on an add form) and is expected to return a ``list`` or ``tuple`` of :class:`~django.contrib.admin.InlineModelAdmin` objects, as described below in the :class:`~django.contrib.admin.InlineModelAdmin` section."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1135
# 5cc2dbe9aba74112be5b6ee144909906
msgid "The ``get_urls`` method on a ``ModelAdmin`` returns the URLs to be used for that ModelAdmin in the same way as a URLconf.  Therefore you can extend them as documented in :doc:`/topics/http/urls`::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1153
# 3b794e9fe1fe4b0e8bb680ee6c06dc35
msgid "Notice that the custom patterns are included *before* the regular admin URLs: the admin URL patterns are very permissive and will match nearly anything, so you'll usually want to prepend your custom URLs to the built-in ones."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1158
# 75435c8a06584c4ba740ccf21cbd2f55
msgid "In this example, ``my_view`` will be accessed at ``/admin/myapp/mymodel/my_view/`` (assuming the admin URLs are included at ``/admin/``.)"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1162
# 0fe4b5f079de4d36a969e6763bca357d
msgid "However, the ``self.my_view`` function registered above suffers from two problems:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1165
# b53feabd343b4028a20c1921a1e711c3
msgid "It will *not* perform any permission checks, so it will be accessible to the general public."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1167
# fdc58b17c960498badd731c8f49b8b54
msgid "It will *not* provide any header details to prevent caching. This means if the page retrieves data from the database, and caching middleware is active, the page could show outdated information."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1171
# 9e30509d2fcc43a18bbc76498bb25b06
msgid "Since this is usually not what you want, Django provides a convenience wrapper to check permissions and mark the view as non-cacheable. This wrapper is ``AdminSite.admin_view()`` (i.e. ``self.admin_site.admin_view`` inside a ``ModelAdmin`` instance); use it like so::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1184
# 7ad950c3dd644b37921c03708ad8a143
msgid "Notice the wrapped view in the fifth line above::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1188
# af3922cdfd5a40f79ec72cc210dba8fe
msgid "This wrapping will protect ``self.my_view`` from unauthorized access and will apply the ``django.views.decorators.cache.never_cache`` decorator to make sure it is not cached if the cache middleware is active."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1192
# 56b1f53060074706bba668540977105d
msgid "If the page is cacheable, but you still want the permission check to be performed, you can pass a ``cacheable=True`` argument to ``AdminSite.admin_view()``::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1200
# 307105d9e09c4a0082915967c29a3411
msgid "Returns a :class:`~django.forms.ModelForm` class for use in the admin add and change views, see :meth:`add_view` and :meth:`change_view`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1203
# d8716b4d0af441168c487ab6510b7879
msgid "If you wanted to hide a field from non-superusers, for example, you could override ``get_form`` as follows::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1215
# 8eeb67645e714378b131c9dff859c074
msgid "Yields :class:`InlineModelAdmin`\\s for use in admin add and change views."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1217
# fde6bb75fc2e4a69a2919e48ebd559e4
msgid "For example if you wanted to display a particular inline only in the change view, you could override ``get_formsets`` as follows::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1232
# 1d2ea983f5fd46a4888452c36fd40c8e
msgid "The ``formfield_for_foreignkey`` method on a ``ModelAdmin`` allows you to override the default formfield for a foreign keys field. For example, to return a subset of objects for this foreign key field based on the user::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1242
# 5de62c5d6acf4494a563d2ac4ee7d0df
msgid "This uses the ``HttpRequest`` instance to filter the ``Car`` foreign key field to only display the cars owned by the ``User`` instance."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1247
# 229293cb40dd40b4856ad533abb38511
msgid "Like the ``formfield_for_foreignkey`` method, the ``formfield_for_manytomany`` method can be overridden to change the default formfield for a many to many field. For example, if an owner can own multiple cars and cars can belong to multiple owners -- a many to many relationship -- you could filter the ``Car`` foreign key field to only display the cars owned by the ``User``::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1262
# ecafed7f3624494d8f3d63407bdf7863
msgid "Like the ``formfield_for_foreignkey`` and ``formfield_for_manytomany`` methods, the ``formfield_for_choice_field`` method can be overridden to change the default formfield for a field that has declared choices. For example, if the choices available to a superuser should be different than those available to regular staff, you could proceed as follows::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1281
# fbc3cc5c6ea746c4b3d804942197a06a
msgid "Returns the ``Changelist`` class to be used for listing. By default, ``django.contrib.admin.views.main.ChangeList`` is used. By inheriting this class you can change the behavior of the listing."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1287
# eb5f79b668ca4def8c621e95ee10b31d
msgid "Returns a :class:`~django.forms.ModelForm` class for use in the ``Formset`` on the changelist page. To use a custom form, for example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1300
# c7fad1916cbf4b67816d05ffa9cc5ff6
msgid "Returns a :ref:`ModelFormSet <model-formsets>` class for use on the changelist page if :attr:`~ModelAdmin.list_editable` is used. To use a custom formset, for example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1316
# 7a09f6efe9244df09d74181dcc6c494f
msgid "Should return ``True`` if adding an object is permitted, ``False`` otherwise."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1321
# b7783d6b55b04f70b02e6cf8b53d41e7
msgid "Should return ``True`` if editing obj is permitted, ``False`` otherwise. If obj is ``None``, should return ``True`` or ``False`` to indicate whether editing of objects of this type is permitted in general (e.g., ``False`` will be interpreted as meaning that the current user is not permitted to edit any object of this type)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1329
# bd9ddeaf8a89422eabdae660dee8f7a5
msgid "Should return ``True`` if deleting obj is permitted, ``False`` otherwise. If obj is ``None``, should return ``True`` or ``False`` to indicate whether deleting objects of this type is permitted in general (e.g., ``False`` will be interpreted as meaning that the current user is not permitted to delete any object of this type)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1337
# ae4ccddbbd304df092e0add1c8f2096d
msgid "The ``queryset`` method on a ``ModelAdmin`` returns a :class:`~django.db.models.query.QuerySet` of all model instances that can be edited by the admin site. One use case for overriding this method is to show objects owned by the logged-in user::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1351
# fc351257f58a42099a96647ab6011541
msgid "Sends a message to the user using the :mod:`django.contrib.messages` backend.  See the :ref:`custom ModelAdmin example <custom-admin-action>`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1356
# cee36f93c4474b8db03772b7665a120d
msgid "Keyword arguments allow you to change the message level, add extra CSS tags, or fail silently if the ``contrib.messages`` framework is not installed. These keyword arguments match those for :func:`django.contrib.messages.add_message`, see that function's documentation for more details. One difference is that the level may be passed as a string label in addition to integer/constant."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1365
# 7f99da1b893f42d19d99b2f49d708510
msgid "Returns an instance of the paginator to use for this view. By default, instantiates an instance of :attr:`paginator`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1369
# 4e572280c2cc4d75b08f1256d28018c7
msgid "Other methods"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1373
# bcc2c24d0611498ea0a6ee9191d265d7
msgid "Django view for the model instance addition page. See note below."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1377
# 2ded1e42cb0141d79c2fd98c984e58a6
msgid "Django view for the model instance edition page. See note below."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1381
# 4b771fe5ff494ae5a0b163a6814d7c66
msgid "The ``form_url`` parameter was added."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1385
# 9966ddd6aef844ff8f66fd5027f0561b
msgid "Django view for the model instances change list/actions page. See note below."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1390
# be900a5876634f2abd85f2b6a5bb44d7
msgid "Django view for the model instance(s) deletion confirmation page. See note below."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1395
# 80821e8030b34b6fabedcbbdc14b4173
msgid "Django view for the page that shows the modification history for a given model instance."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1398
# 03c0a7a05c9b442f95f3a9ec7f7f9385
msgid "Unlike the hook-type ``ModelAdmin`` methods detailed in the previous section, these five methods are in reality designed to be invoked as Django views from the admin application URL dispatching handler to render the pages that deal with model instances CRUD operations. As a result, completely overriding these methods will significantly change the behavior of the admin application."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1404
# f3f72f384f17470286fece78f259405f
msgid "One common reason for overriding these methods is to augment the context data that is provided to the template that renders the view. In the following example, the change view is overridden so that the rendered template is provided some extra mapping data that would not otherwise be available::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1426
# 41ff1ad42bb64f09b7b985ef78958918
msgid "These views now return :class:`~django.template.response.TemplateResponse` instances which allow you to easily customize the response data before rendering. For more details, see the :doc:`TemplateResponse documentation </ref/template-response>`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1434
# 56518f65b84c41a5bec8d34ce27fe1bd
msgid "``ModelAdmin`` media definitions"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1436
# 8d4ca13c46494bea95347a89b21e9d8c
msgid "There are times where you would like add a bit of CSS and/or JavaScript to the add/change views. This can be accomplished by using a Media inner class on your ``ModelAdmin``::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1447
# bacf1d248205499bab455a1cc8102562
msgid "The :doc:`staticfiles app </ref/contrib/staticfiles>` prepends :setting:`STATIC_URL` (or :setting:`MEDIA_URL` if :setting:`STATIC_URL` is ``None``) to any media paths. The same rules apply as :ref:`regular media definitions on forms <form-media-paths>`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1453
# 4351d0ec476e4660a4a875bd72efcdec
msgid "jQuery"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1455
# be5ffda2ab9d41caa929b74c38348fef
msgid "Django admin Javascript makes use of the `jQuery`_ library."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1457
# ac494e199b5140c18858d793c426a684
msgid "To avoid conflicts with user-supplied scripts or libraries, Django's jQuery (version 1.4.2) is namespaced as ``django.jQuery``. If you want to use jQuery in your own admin JavaScript without including a second copy, you can use the ``django.jQuery`` object on changelist and add/edit views."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1462
# b54f38e07a204e9c8cc07226823ef220
msgid "The :class:`ModelAdmin` class requires jQuery by default, so there is no need to add jQuery to your ``ModelAdmin``'s list of media resources unless you have a specifc need. For example, if you require the jQuery library to be in the global namespace (for example when using third-party jQuery plugins) or if you need a newer version of jQuery, you will have to include your own copy."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1468
# 5b4c5f0875904288b49342c68fa44265
msgid "Django provides both uncompressed and 'minified' versions of jQuery, as ``jquery.js`` and ``jquery.min.js`` respectively."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1471
# a87fdae732e142e1b6b0855d50ae2584
msgid ":class:`ModelAdmin` and :class:`InlineModelAdmin` have a ``media`` property that returns a list of ``Media`` objects which store paths to the JavaScript files for the forms and/or formsets. If :setting:`DEBUG` is ``True`` it will return the uncompressed versions of the various JavaScript files, including ``jquery.js``; if not, it will return the 'minified' versions."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1480
# f651ee387743411795c818feea62b4ca
msgid "Adding custom validation to the admin"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1482
# d3d127bec36e48cc90054c7af0aa0821
msgid "Adding custom validation of data in the admin is quite easy. The automatic admin interface reuses :mod:`django.forms`, and the ``ModelAdmin`` class gives you the ability define your own form::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1489
# 1504cc29fceb4e48a897976755c7ebb7
msgid "``MyArticleAdminForm`` can be defined anywhere as long as you import where needed. Now within your form you can add your own custom validation for any field::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1501
# 73c2422f1442431eaa7a85032b36bd4a
msgid "It is important you use a ``ModelForm`` here otherwise things can break. See the :doc:`forms </ref/forms/index>` documentation on :doc:`custom validation </ref/forms/validation>` and, more specifically, the :ref:`model form validation notes <overriding-modelform-clean-method>` for more information."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1510
# 295976f214a74375b94aba1ad154dc11
msgid "``InlineModelAdmin`` objects"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1516
# 3f41b5fedafd458983abb0771e4de43e
msgid "The admin interface has the ability to edit models on the same page as a parent model. These are called inlines. Suppose you have these two models::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1526
# 39d8454b895a44c29d3a97ec864a36c1
msgid "You can edit the books authored by an author on the author page. You add inlines to a model by specifying them in a ``ModelAdmin.inlines``::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1537
# 718a239c1e3744faa505c98f6b55f8d8
msgid "Django provides two subclasses of ``InlineModelAdmin`` and they are:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1539
# 7a0fd1253a534622a9035ea24ab1149d
msgid ":class:`~django.contrib.admin.TabularInline`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1540
# b7b771aa8bd74a0395fbf12bcce40220
msgid ":class:`~django.contrib.admin.StackedInline`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1542
# 550808c189d2495d88bc24859f943234
msgid "The difference between these two is merely the template used to render them."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1546
# ed523b3c963748db8481f073087bd90b
msgid "``InlineModelAdmin`` options"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1548
# d5e4993d4b4a402eae1aec8c3b37183e
msgid "``InlineModelAdmin`` shares many of the same features as ``ModelAdmin``, and adds some of its own (the shared features are actually defined in the ``BaseModelAdmin`` superclass). The shared features are:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1552
# 9e1880c892d34292a21b8541e08855ff
msgid ":attr:`~InlineModelAdmin.form`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1553
# da01cb36e6d34c438dba8a08233c6264
msgid ":attr:`~ModelAdmin.fieldsets`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1554
# 3036b75036b146e4bbd7220d871b1a89
msgid ":attr:`~ModelAdmin.fields`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1555
# 28f3ce9cd0484070b5ce11950fe17ee6
msgid ":attr:`~ModelAdmin.formfield_overrides`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1556
# 848c8c01bbde447b9a8c12999347c8d4
msgid ":attr:`~ModelAdmin.exclude`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1557
# d9e4c9954faa4f9e835e15e49707436a
msgid ":attr:`~ModelAdmin.filter_horizontal`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1558
# d4171c47db894d13b720c7724e9c76e4
msgid ":attr:`~ModelAdmin.filter_vertical`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1559
# 509d682699ee48f38e2b9d03ed81e4b1
msgid ":attr:`~ModelAdmin.ordering`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1560
# 9a3b0304a1ad40819826de1e5623c4f6
msgid ":attr:`~ModelAdmin.prepopulated_fields`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1561
# c315121944304330a0c8bcba9507651d
msgid ":meth:`~ModelAdmin.queryset`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1562
# 2af3308cb77b4a26bee10b454bc4d2f3
msgid ":attr:`~ModelAdmin.radio_fields`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1563
# 47fc5c3e311444aa982dd6cac37d3383
msgid ":attr:`~ModelAdmin.readonly_fields`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1564
# dfee4eeb89064b888dbb022fb0ddf283
msgid ":attr:`~InlineModelAdmin.raw_id_fields`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1565
# 610f8486c0c54400b930d16a80e73a9b
msgid ":meth:`~ModelAdmin.formfield_for_foreignkey`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1566
# 060508b353dc424885281c1db0c54a14
msgid ":meth:`~ModelAdmin.formfield_for_manytomany`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1570
# a2b0c0d37e2f491db7c396d86901acdf
msgid ":meth:`~ModelAdmin.has_add_permission`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1571
# d736e9af1046460d9248fc9d7fb5cf04
msgid ":meth:`~ModelAdmin.has_change_permission`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1572
# a8b076da9d7348f6a7cf45817c0988c2
msgid ":meth:`~ModelAdmin.has_delete_permission`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1574
# d05e17223c9e4442a2f4cb3288331db9
msgid "The ``InlineModelAdmin`` class adds:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1578
# c8e15fecc21b47b1b1a73c75f57e2116
msgid "The model which the inline is using. This is required."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1582
# 54123eae64e04102b296e1826863060d
msgid "The name of the foreign key on the model. In most cases this will be dealt with automatically, but ``fk_name`` must be specified explicitly if there are more than one foreign key to the same parent model."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1588
# fa31184bc39646a7a1bf6b9bd1d9df8b
msgid "This defaults to ``BaseInlineFormSet``. Using your own formset can give you many possibilities of customization. Inlines are built around :ref:`model formsets <model-formsets>`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1594
# 063782b69ce64f848ccb44f47ecc9c9e
msgid "The value for ``form`` defaults to ``ModelForm``. This is what is passed through to :func:`~django.forms.models.inlineformset_factory` when creating the formset for this inline."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1600
# 796a9ef720274caa9a6ad1dbc7e63bcd
msgid "This controls the number of extra forms the formset will display in addition to the initial forms. See the :doc:`formsets documentation </topics/forms/formsets>` for more information."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1605
# 993d440e520b4956aed17d9651e3e115
msgid "For users with JavaScript-enabled browsers, an \"Add another\" link is provided to enable any number of additional inlines to be added in addition to those provided as a result of the ``extra`` argument."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1609
# 2f8f7d4ce17e47d28ae62e373080b5a8
msgid "The dynamic link will not appear if the number of currently displayed forms exceeds ``max_num``, or if the user does not have JavaScript enabled."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1616
# 39ad22d87ed64d27866f8f7e4a77a7ac
msgid "This controls the maximum number of forms to show in the inline. This doesn't directly correlate to the number of objects, but can if the value is small enough. See :ref:`model-formsets-max-num` for more information."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1627
# 6f3c5b7e38e04de9a8a4fc1054c7cad6
msgid "``raw_id_fields`` is a list of fields you would like to change into a ``Input`` widget for either a ``ForeignKey`` or ``ManyToManyField``::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1637
# a8851f3bcd264d759d44580e3aed050c
msgid "The template used to render the inline on the page."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1641
# 904d82a422444a4191ea9e89939cd527
msgid "An override to the ``verbose_name`` found in the model's inner ``Meta`` class."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1646
# 92293a95d9244527939911bf653cee23
msgid "An override to the ``verbose_name_plural`` found in the model's inner ``Meta`` class."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1651
# 165fcf046d68404f96c7feb63cc09b37
msgid "Specifies whether or not inline objects can be deleted in the inline. Defaults to ``True``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1656
# 4f3947d6b1db4493b6268d57dec81206
msgid "Returns a ``BaseInlineFormSet`` class for use in admin add/change views. See the example for :class:`ModelAdmin.get_formsets`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1660
# 45efd24cb72f4821b690ff98d6a382a7
msgid "Working with a model with two or more foreign keys to the same parent model"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1662
# f89abc9debe0442b8f373e1bf29d8364
msgid "It is sometimes possible to have more than one foreign key to the same model. Take this model for instance::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1669
# f7ef9636581746d39e8e866ffd869bb1
msgid "If you wanted to display an inline on the ``Person`` admin add/change pages you need to explicitly define the foreign key since it is unable to do so automatically::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1683
# c265b0bf2c6a44cc897a33ca49651d7b
msgid "Working with many-to-many models"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1685
# 483302227e1840d4beaa410a77316a2f
msgid "By default, admin widgets for many-to-many relations will be displayed on whichever model contains the actual reference to the :class:`~django.db.models.ManyToManyField`. Depending on your ``ModelAdmin`` definition, each many-to-many field in your model will be represented by a standard HTML ``<select multiple>``, a horizontal or vertical filter, or a ``raw_id_admin`` widget. However, it is also possible to replace these widgets with inlines."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1693
# 23ac7a898b514d95a15cd92d3c20181a
msgid "Suppose we have the following models::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1702
# b2951575f71b46ce9d28792cd7e74073
msgid "If you want to display many-to-many relations using an inline, you can do so by defining an ``InlineModelAdmin`` object for the relationship::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1719
# d8d0d13cc5b449d4b9dded135b39058a
msgid "There are two features worth noting in this example."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1721
# 8b4078e35e0c4606ac816cecd22de06f
msgid "Firstly - the ``MembershipInline`` class references ``Group.members.through``. The ``through`` attribute is a reference to the model that manages the many-to-many relation. This model is automatically created by Django when you define a many-to-many field."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1726
# 58ce5e35f7a740bd92f52c0a16863496
msgid "Secondly, the ``GroupAdmin`` must manually exclude the ``members`` field. Django displays an admin widget for a many-to-many field on the model that defines the relation (in this case, ``Group``). If you want to use an inline model to represent the many-to-many relationship, you must tell Django's admin to *not* display this widget - otherwise you will end up with two widgets on your admin page for managing the relation."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1733
# 0b62f3cbf4ab45509b031038b7e629a1
msgid "In all other respects, the ``InlineModelAdmin`` is exactly the same as any other. You can customize the appearance using any of the normal ``ModelAdmin`` properties."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1738
# f1007fa0a4534b0b85d6fa9cb8146207
msgid "Working with many-to-many intermediary models"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1740
# 970eadf5a0ac49189cdc1eded545733a
msgid "When you specify an intermediary model using the ``through`` argument to a :class:`~django.db.models.ManyToManyField`, the admin will not display a widget by default. This is because each instance of that intermediary model requires more information than could be displayed in a single widget, and the layout required for multiple widgets will vary depending on the intermediate model."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1747
# 41f92482c2894b0c81f0a2fcf383cbe9
msgid "However, we still want to be able to edit that information inline. Fortunately, this is easy to do with inline admin models. Suppose we have the following models::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1764
# c6ae7271092448819904b2881019cc28
msgid "The first step in displaying this intermediate model in the admin is to define an inline class for the ``Membership`` model::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1771
# 8664b3d032d346678042be9b29b28bd9
msgid "This simple example uses the default ``InlineModelAdmin`` values for the ``Membership`` model, and limits the extra add forms to one. This could be customized using any of the options available to ``InlineModelAdmin`` classes."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1775
# 320614faa4994a5a88762b5049de6fe7
msgid "Now create admin views for the ``Person`` and ``Group`` models::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1783
# f299b01134134fe68f69e890ff42b863
msgid "Finally, register your ``Person`` and ``Group`` models with the admin site::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1788
# 3755d4b9e656492badd20d41f3abf32c
msgid "Now your admin site is set up to edit ``Membership`` objects inline from either the ``Person`` or the ``Group`` detail pages."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1794
# ec0e4823a3e14118b1f48f21e01c99c5
msgid "Using generic relations as an inline"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1796
# e3c71ffde4dc49bbba5cdd256f8e2950
msgid "It is possible to use an inline with generically related objects. Let's say you have the following models::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1808
# 9905e3d102624a9085201c64ee7a809c
msgid "If you want to allow editing and creating ``Image`` instance on the ``Product`` add/change views you can use ``GenericTabularInline`` or ``GenericStackedInline`` (both subclasses of ``GenericInlineModelAdmin``) provided by ``django.contrib.contenttypes.generic``, they implement tabular and stacked visual layouts for the forms representing the inline objects respectively just like their non-generic counterparts and behave just like any other inline. In your ``admin.py`` for this example app::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1831
# 9d1122bd83ed4c3191c7ea042336813c
msgid "See the :doc:`contenttypes documentation </ref/contrib/contenttypes>` for more specific information."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1835
# 00710798c54a49abad51fb7743b0ecf2
msgid "Overriding admin templates"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1837
# 73cb5a3ee4374e2fa3931e61bb442030
msgid "It is relatively easy to override many of the templates which the admin module uses to generate the various pages of an admin site. You can even override a few of these templates for a specific app, or a specific model."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1842
# dea7d62f37294ae08510daaefb4737c7
msgid "Set up your projects admin template directories"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1844
# 0fc43b694b974d6a8492fdacf4cdec02
msgid "The admin template files are located in the ``contrib/admin/templates/admin`` directory."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1847
# 621068315be24ede929ac3e9b935a012
msgid "In order to override one or more of them, first create an ``admin`` directory in your project's ``templates`` directory. This can be any of the directories you specified in :setting:`TEMPLATE_DIRS`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1851
# 535ec48d30eb4c2fb1d1ea8d615f04b1
msgid "Within this ``admin`` directory, create sub-directories named after your app. Within these app subdirectories create sub-directories named after your models. Note, that the admin app will lowercase the model name when looking for the directory, so make sure you name the directory in all lowercase if you are going to run your app on a case-sensitive filesystem."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1857
# 4dfd0395f7b8427f9265b003f65493ff
msgid "To override an admin template for a specific app, copy and edit the template from the ``django/contrib/admin/templates/admin`` directory, and save it to one of the directories you just created."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1861
# 1b187ac0e4d348b9a64c31b462d2b9ea
msgid "For example, if we wanted to add a tool to the change list view for all the models in an app named ``my_app``, we would copy ``contrib/admin/templates/admin/change_list.html`` to the ``templates/admin/my_app/`` directory of our project, and make any necessary changes."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1867
# d57b1074f9c9490db56a7de8c5e9344d
msgid "If we wanted to add a tool to the change list view for only a specific model named 'Page', we would copy that same file to the ``templates/admin/my_app/page`` directory of our project."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1872
# d50e1a5553fa48189a62899b0b5999b5
msgid "Overriding vs. replacing an admin template"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1874
# 3b13cf21c1324750a70cef2ff3fc3821
msgid "Because of the modular design of the admin templates, it is usually neither necessary nor advisable to replace an entire template. It is almost always better to override only the section of the template which you need to change."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1878
# 2b3e3e7c43984d6d836c515734da390b
msgid "To continue the example above, we want to add a new link next to the ``History`` tool for the ``Page`` model. After looking at ``change_form.html`` we determine that we only need to override the ``object-tools-items`` block. Therefore here is our new ``change_form.html`` :"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1901
# 6fa098bbba204e719267aba92d2bff57
msgid "And that's it! If we placed this file in the ``templates/admin/my_app`` directory, our link would appear on the change form for all models within my_app."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1906
# 3710cfbbc45a4ceab569b05aa6c5633d
msgid "Templates which may be overridden per app or model"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1908
# 10b161376fc64d909b9c7b08af86f529
msgid "Not every template in ``contrib/admin/templates/admin`` may be overridden per app or per model. The following can:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1911
# 3e9e61c9a61840fda71f4e9ec53edf73
msgid "``app_index.html``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1912
# 396ca7be0ff64607ae52a95e474ba6bb
msgid "``change_form.html``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1913
# 6b14202aaff94a4b84254899cd1d44d9
msgid "``change_list.html``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1914
# f939331a08814315b7445f9b7268f9c9
msgid "``delete_confirmation.html``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1915
# cceb5c7ab71f44be8d5e814b4158cd3a
msgid "``object_history.html``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1917
# d0f78c69648246ba8ae6eeac29ef8f5a
msgid "For those templates that cannot be overridden in this way, you may still override them for your entire project. Just place the new version in your ``templates/admin`` directory. This is particularly useful to create custom 404 and 500 pages."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1924
# d9c89c92627e4ceb8ab7de7b88322526
msgid "Some of the admin templates, such as ``change_list_results.html`` are used to render custom inclusion tags. These may be overridden, but in such cases you are probably better off creating your own version of the tag in question and giving it a different name. That way you can use it selectively."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1931
# 28d1527689f049adba13874971df7caa
msgid "Root and login templates"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1933
# a9083f93940e4c44b20a421413889121
msgid "If you wish to change the index, login or logout templates, you are better off creating your own ``AdminSite`` instance (see below), and changing the :attr:`AdminSite.index_template` , :attr:`AdminSite.login_template` or :attr:`AdminSite.logout_template` properties."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1939
# b21c9582049e43ccb1cfc7ca9a10c38b
msgid "``AdminSite`` objects"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1943
# 8dd515daad4940fb81b7247fa0a4ad67
msgid "A Django administrative site is represented by an instance of ``django.contrib.admin.sites.AdminSite``; by default, an instance of this class is created as ``django.contrib.admin.site`` and you can register your models and ``ModelAdmin`` instances with it."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1948
# e3f3a2aa60934c698d6c65c796755f58
msgid "If you'd like to set up your own administrative site with custom behavior, however, you're free to subclass ``AdminSite`` and override or add anything you like. Then, simply create an instance of your ``AdminSite`` subclass (the same way you'd instantiate any other Python class), and register your models and ``ModelAdmin`` subclasses with it instead of using the default."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1955
# 5ac80ae3bb6b428794aaa84ca9be6c91
msgid "When constructing an instance of an ``AdminSite``, you are able to provide a unique instance name using the ``name`` argument to the constructor. This instance name is used to identify the instance, especially when :ref:`reversing admin URLs <admin-reverse-urls>`. If no instance name is provided, a default instance name of ``admin`` will be used."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1962
# 01dd80130bc34290a4c23aebf2bf5369
msgid "``AdminSite`` attributes"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1964
# dc366b8276f844d6868e5c95371e5317
msgid "Templates can override or extend base admin templates as described in `Overriding Admin Templates`_."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1969
# 4bbab3f9765a4efb83970fb3ba1092e2
msgid "Path to a custom template that will be used by the admin site main index view."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1974
# cb193648436c46dbb36469e00867b78d
msgid "Path to a custom template that will be used by the admin site login view."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1978
# 98edc5613fa74cda9fb28330ff0266dc
msgid "Subclass of :class:`~django.contrib.auth.forms.AuthenticationForm` that will be used by the admin site login view."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1983
# 8806795fa8b84d03b3f93e7cb14ae569
msgid "Path to a custom template that will be used by the admin site logout view."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1987
# c731076bc7aa4956b465c7281c36584d
msgid "Path to a custom template that will be used by the admin site password change view."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1992
# 82cf8936caaf4798918f31e86e1e6683
msgid "Path to a custom template that will be used by the admin site password change done view."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1996
# a11bddff630e4f03b2e9e5e8b268e212
msgid "Hooking ``AdminSite`` instances into your URLconf"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1998
# fa8c71f8b1904c5382dd81eca057e9d6
msgid "The last step in setting up the Django admin is to hook your ``AdminSite`` instance into your URLconf. Do this by pointing a given URL at the ``AdminSite.urls`` method."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2002
# ca19de1d87c446bab5b03abe98a77ef7
msgid "In this example, we register the default ``AdminSite`` instance ``django.contrib.admin.site`` at the URL ``/admin/`` ::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2015
# bf62225c6252425fbe96d6bb8c34d3f6
msgid "Above we used ``admin.autodiscover()`` to automatically load the :setting:`INSTALLED_APPS` admin.py modules."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2018
# 8d87cb97e0de4e3489283470c1d1f336
msgid "In this example, we register the ``AdminSite`` instance ``myproject.admin.admin_site`` at the URL ``/myadmin/`` ::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2029
# 41fc0b7b5d684b5f848c93d025dbc87f
msgid "There is really no need to use autodiscover when using your own ``AdminSite`` instance since you will likely be importing all the per-app admin.py modules in your ``myproject.admin`` module."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2034
# b7f73c4c7ad842c6820cc522af01988b
msgid "Multiple admin sites in the same URLconf"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2036
# 62298be2bd2b420380fd48e8fffac2fb
msgid "It's easy to create multiple instances of the admin site on the same Django-powered Web site. Just create multiple instances of ``AdminSite`` and root each one at a different URL."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2040
# 0b3de59395b94a58b2fe02ecc880bdd2
msgid "In this example, the URLs ``/basic-admin/`` and ``/advanced-admin/`` feature separate versions of the admin site -- using the ``AdminSite`` instances ``myproject.admin.basic_site`` and ``myproject.admin.advanced_site``, respectively::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2054
# fcddd236e4ae41b788ce9227880cd557
msgid "``AdminSite`` instances take a single argument to their constructor, their name, which can be anything you like. This argument becomes the prefix to the URL names for the purposes of :ref:`reversing them<admin-reverse-urls>`. This is only necessary if you are using more than one ``AdminSite``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2060
# 3bd11c44feca45dc95c44c47419f6869
msgid "Adding views to admin sites"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2062
# 32b0b3cf49f44605bc5bfdf9452a66e3
msgid "Just like :class:`ModelAdmin`, :class:`AdminSite` provides a :meth:`~django.contrib.admin.ModelAdmin.get_urls()` method that can be overridden to define additional views for the site. To add a new view to your admin site, extend the base :meth:`~django.contrib.admin.ModelAdmin.get_urls()` method to include a pattern for your new view."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2071
# ba8232e1e159438bab14c72e3dfacfc5
msgid "Any view you render that uses the admin templates, or extends the base admin template, should provide the ``current_app`` argument to :class:`~django.template.RequestContext` or :class:`~django.template.Context` when rendering the template.  It should be set to either ``self.name`` if your view is on an ``AdminSite`` or ``self.admin_site.name`` if your view is on a ``ModelAdmin``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2081
# 24f6b11aa3ae4f6c997919659a1c2abd
msgid "Adding a password-reset feature"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2083
# 187e578601dc45c3997b1ef7fce3cb53
msgid "You can add a password-reset feature to the admin site by adding a few lines to your URLconf. Specifically, add these four patterns:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2093
# 49c65f2463ce4661b82f99487eab12db
msgid "(This assumes you've added the admin at ``admin/`` and requires that you put the URLs starting with ``^admin/`` before the line that includes the admin app itself)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2099
# 9233cf3aaca941c2a5d60a38d07e480a
msgid "The presence of the ``admin_password_reset`` named URL will cause a \"forgotten your password?\" link to appear on the default admin log-in page under the password box."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2106
# 2dd5a3fe61794f32aa965d33881a3882
msgid "Reversing admin URLs"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2108
# 99eefc505b5446e39768f5312152cf5e
msgid "When an :class:`AdminSite` is deployed, the views provided by that site are accessible using Django's :ref:`URL reversing system <naming-url-patterns>`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2111
# 015794a9bb1e4916977a51d060755268
msgid "The :class:`AdminSite` provides the following named URL patterns:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2114
#: ../../ref/contrib/admin/index.txt:2128
# 21e0fd474544475bb9d7ad50bafebc12
# e20fe1d0fec246e88128ec7eaa589942
msgid "Page"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2114
#: ../../ref/contrib/admin/index.txt:2128
# 71e6c799e54242249a4079e52fb28a96
# 00642af8df86433b9c3896f99696afb4
msgid "URL name"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2114
#: ../../ref/contrib/admin/index.txt:2128
# bce21f3b9dbe41e9856125499e8b3434
# 0754b3e18355407c95f9a4275d2b733a
msgid "Parameters"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2116
#: ../../ref/contrib/sitemaps.txt:369
# d39fbddbeecb44d0a57585693ad188c5
# bc51476c37564581b8931694bcc34971
msgid "Index"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2116
# 64e54e5a03dd485a996c9a4fc288533a
msgid "``index``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2117
# 3644a6ac6706410a9ad82c1c61e27c46
msgid "Logout"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2117
# 344e5ea437be4b1391dbb97320c9f8fc
msgid "``logout``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2118
# 66fa6571091c405f90c04b48f15e0570
msgid "Password change"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2118
# 677cb7febb574977889899b54170d67f
msgid "``password_change``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2119
# 209b9281fe67473e8f3edb168b1a6d77
msgid "Password change done"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2119
# 72b5f46baaaf44e084580738c3f6c941
msgid "``password_change_done``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2120
# 01cb85b2a5b9426e983e5bb04dd0424d
msgid "i18n javascript"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2120
# 194e71b627ac4876a0d1cdf37247b04f
msgid "``jsi18n``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2121
# d7aa85dbb43942728e1c87cfff6ee797
msgid "Application index page"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2121
# 561869c9dedc4a31b73ed72e7758b581
msgid "``app_list``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2121
#: ../../ref/models/options.txt:23
# 7ca4d85cbc554a90b50e2fcb9e8f4c0d
# 69197a0eb64b40439e75d256b11b4935
msgid "``app_label``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2122
# 067b3d44d035457d9ea3534499d27894
msgid "Redirect to object's page"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2122
# 51aca720ec69457082753e6e3e3712f5
msgid "``view_on_site``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2122
# 5701346b12754ffaafa2881414820fb8
msgid "``content_type_id``, ``object_id``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2125
# 760ba586c4ce49a1a8ed53bde7a248fe
msgid "Each :class:`ModelAdmin` instance provides an additional set of named URLs:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2130
# dd5cca6ae8ac45ddba478733df589e94
msgid "Changelist"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2130
# 4ec45a69edac4cf7af825b556ab60ed5
msgid "``{{ app_label }}_{{ model_name }}_changelist``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2131
# eab5bc24a61946cdbe02bc9d9517f59b
msgid "Add"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2131
# b2cb89ac5bf14e6bb38914b3befc497e
msgid "``{{ app_label }}_{{ model_name }}_add``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2132
# 951aed4165da4fccab67e5869602d32c
msgid "History"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2132
# 3c0b1eae6a304c349d01b5dce7032757
msgid "``{{ app_label }}_{{ model_name }}_history``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2132
#: ../../ref/contrib/admin/index.txt:2133
#: ../../ref/contrib/admin/index.txt:2134
# c670d188ac284acd891aa3b395cfee87
# beba4d2878e94f63ac9434373953a794
# f3154ced3a204e0ea20c8bfef36c89a7
msgid "``object_id``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2133
# 856085b35520482abbcb7fae41211381
msgid "Delete"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2133
# be5d43aea47c47029e2ebb4ae075b026
msgid "``{{ app_label }}_{{ model_name }}_delete``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2134
# 891e0c211e574203b86ca322948f3bd5
msgid "Change"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2134
# 6b91bc83d28c487b853b199be77e474a
msgid "``{{ app_label }}_{{ model_name }}_change``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2137
# 1d564528f2cc4b50a7d07e895ec35f64
msgid "These named URLs are registered with the application namespace ``admin``, and with an instance namespace corresponding to the name of the Site instance."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2140
# 6f66d84294df458b98ee99ca612f5a5d
msgid "So - if you wanted to get a reference to the Change view for a particular ``Choice`` object (from the polls application) in the default admin, you would call::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2148
# 66ce6deee3604927a4b3e622550a5d50
msgid "This will find the first registered instance of the admin application (whatever the instance name), and resolve to the view for changing ``poll.Choice`` instances in that instance."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2152
# 9ea63f06ada24b29be0b8387697e9754
msgid "If you want to find a URL in a specific admin instance, provide the name of that instance as a ``current_app`` hint to the reverse call. For example, if you specifically wanted the admin view from the admin instance named ``custom``, you would need to call::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2159
# b8a6862aefbc4714b8553bda40778368
msgid "For more details, see the documentation on :ref:`reversing namespaced URLs <topics-http-reversing-url-namespaces>`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2164
# a588d058eff64cd3bcdb0ab74214a28d
msgid "To allow easier reversing of the admin urls in templates, Django provides an ``admin_urlname`` filter which takes an action as argument:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2173
# 49a035f0c4e34c94acc92d5074715fa3
msgid "The action in the examples above match the last part of the URL names for :class:`ModelAdmin` instances described above. The ``opts`` variable can be any object which has an ``app_label`` and ``module_name`` and is usually supplied by the admin views for the current model."
msgstr ""

#: ../../ref/contrib/auth.txt:2
#: ../../ref/django-admin.txt:1144
# 7cbb0085e7594ab6a5d38dbda5f9cb90
# bffbe851b4ef4491bbfc4214a31430dd
msgid "``django.contrib.auth``"
msgstr ""

#: ../../ref/contrib/auth.txt:4
# 75674b879c8d4c719954eab8ea159e9e
msgid "This document provides API reference material for the components of Django's authentication system. For more details on the usage of these components or how to customize authentication and authorization see the :doc:`authentication topic guide </topics/auth/index>`."
msgstr ""

#: ../../ref/contrib/auth.txt:12
# 29ec04aad2514967b693716c9ed83036
msgid "User"
msgstr ""

#: ../../ref/contrib/auth.txt:15
#: ../../ref/contrib/auth.txt:298
#: ../../ref/contrib/auth.txt:328
# f4ac7ad15eba46eeb3e9c46207e014a8
# 487d71116c654817833569eeaf181d2a
# 24f81c94bdd445fd976f1fe7166eaba7
msgid "Fields"
msgstr ""

#: ../../ref/contrib/auth.txt:19
# f2467fc959484bf9a6200c1e409f22fb
msgid ":class:`~django.contrib.auth.models.User` objects have the following fields:"
msgstr ""

#: ../../ref/contrib/auth.txt:24
# 0e33d244bbcd4e7bbaf1bb4dd9cb00d7
msgid "Required. 30 characters or fewer. Usernames may contain alphanumeric, ``_``, ``@``, ``+``, ``.`` and ``-`` characters."
msgstr ""

#: ../../ref/contrib/auth.txt:29
#: ../../ref/contrib/auth.txt:33
# ccb5a0f2a72e48f8af3d2d601729da1c
# 56277e1f4df34a85adc42204f6dee73e
msgid "Optional. 30 characters or fewer."
msgstr ""

#: ../../ref/contrib/auth.txt:37
# 1d01db8f7d2c4326b2458013ee007bc1
msgid "Optional. Email address."
msgstr ""

#: ../../ref/contrib/auth.txt:41
# 376d396f8435460f84d554793f9768a4
msgid "Required. A hash of, and metadata about, the password. (Django doesn't store the raw password.) Raw passwords can be arbitrarily long and can contain any character. See the :doc:`password documentation </topics/auth/passwords>`."
msgstr ""

#: ../../ref/contrib/auth.txt:48
# d68ee69e6f3145ffb839441b19866735
msgid "Many-to-many relationship to :class:`~django.contrib.auth.models.Group`"
msgstr ""

#: ../../ref/contrib/auth.txt:52
# 5bbed1d4c6274fa3bfa01c2f13d977ca
msgid "Many-to-many relationship to :class:`~django.contrib.auth.models.Permission`"
msgstr ""

#: ../../ref/contrib/auth.txt:56
# 3e122f06094346ccaa501cb489288a7f
msgid "Boolean. Designates whether this user can access the admin site."
msgstr ""

#: ../../ref/contrib/auth.txt:60
# aa6b1d920f3447cfa13bf956042ca862
msgid "Boolean. Designates whether this user account should be considered active. We recommend that you set this flag to ``False`` instead of deleting accounts; that way, if your applications have any foreign keys to users, the foreign keys won't break."
msgstr ""

#: ../../ref/contrib/auth.txt:65
# de8a7ed868eb45fc86ae8a96c4f65413
msgid "This doesn't necessarily control whether or not the user can log in. Authentication backends aren't required to check for the ``is_active`` flag, and the default backends do not. If you want to reject a login based on ``is_active`` being ``False``, it's up to you to check that in your own login view or a custom authentication backend. However, the :class:`~django.contrib.auth.forms.AuthenticationForm` used by the :func:`~django.contrib.auth.views.login` view (which is the default) *does* perform this check, as do the permission-checking methods such as :meth:`~django.contrib.auth.models.User.has_perm` and the authentication in the Django admin. All of those functions/methods will return ``False`` for inactive users."
msgstr ""

#: ../../ref/contrib/auth.txt:79
# 78127fd5531d442ca92b80a4214e8c0b
msgid "Boolean. Designates that this user has all permissions without explicitly assigning them."
msgstr ""

#: ../../ref/contrib/auth.txt:84
# d2414b4aeeb94d3aa639f63d281eb0ad
msgid "A datetime of the user's last login. Is set to the current date/time by default."
msgstr ""

#: ../../ref/contrib/auth.txt:89
# b2d526901e4d4b56bca7b8f0d96f698e
msgid "A datetime designating when the account was created. Is set to the current date/time by default when the account is created."
msgstr ""

#: ../../ref/contrib/auth.txt:93
#: ../../ref/contrib/auth.txt:317
#: ../../ref/request-response.txt:212
#: ../../ref/request-response.txt:356
#: ../../ref/request-response.txt:384
#: ../../ref/request-response.txt:640
#: ../../ref/template-response.txt:57
#: ../../ref/template-response.txt:148
# 1f85327ffdfa4f5aaf5455c848c00d67
# 6371420fedad49a0a7d4f3942c810cc8
# 014614239bbe49138bb996c297b28374
# 51cb1ece82c14fbf91f6c64228d46be0
# b38f980b5d0341b686f1f8d2bc2a9ffd
# 2bb969cb31c245e6b974dd93d39d4d71
# 0ae4c29af36943109889fc8d40a41003
# 7f4ad122569d441cb5c77cf366d7a43b
msgid "Methods"
msgstr ""

#: ../../ref/contrib/auth.txt:99
# 550a15789d7d484abc16f8d56e3fa5f5
msgid "Returns the username for the user. Since the User model can be swapped out, you should use  this method instead of referencing the username attribute directly."
msgstr ""

#: ../../ref/contrib/auth.txt:105
# 7dd0d3dea0d24bf997af417d2bf72ac3
msgid "Always returns ``False``. This is a way of differentiating :class:`~django.contrib.auth.models.User` and :class:`~django.contrib.auth.models.AnonymousUser` objects. Generally, you should prefer using :meth:`~django.contrib.auth.models.User.is_authenticated()` to this method."
msgstr ""

#: ../../ref/contrib/auth.txt:114
# d8216baca6fa412f88274d1750e83360
msgid "Always returns ``True`` (as opposed to ``AnonymousUser.is_authenticated()`` which always returns ``False``). This is a way to tell if the user has been authenticated. This does not imply any permissions, and doesn't check if the user is active - it only indicates that ``request.user`` has been populated by the :class:`~django.contrib.auth.middleware.AuthenticationMiddleware` with a :class:`~django.contrib.auth.models.User` object representing the currently logged-in user."
msgstr ""

#: ../../ref/contrib/auth.txt:125
# 7b58f9b536864c68881afc421190eeab
msgid "Returns the :attr:`~django.contrib.auth.models.User.first_name` plus the :attr:`~django.contrib.auth.models.User.last_name`, with a space in between."
msgstr ""

#: ../../ref/contrib/auth.txt:131
# bbd320c2b596486f8555211e3fe6eb40
msgid "Sets the user's password to the given raw string, taking care of the password hashing. Doesn't save the :class:`~django.contrib.auth.models.User` object."
msgstr ""

#: ../../ref/contrib/auth.txt:137
# e6c8ed176cd94a71af3fbb27288ca926
msgid "Returns ``True`` if the given raw string is the correct password for the user. (This takes care of the password hashing in making the comparison.)"
msgstr ""

#: ../../ref/contrib/auth.txt:143
# 1701008d36ae4435a4f80ba4139cd256
msgid "Marks the user as having no password set.  This isn't the same as having a blank string for a password. :meth:`~django.contrib.auth.models.User.check_password()` for this user will never return ``True``. Doesn't save the :class:`~django.contrib.auth.models.User` object."
msgstr ""

#: ../../ref/contrib/auth.txt:149
# 890fe17f30ae4287899c298daecec5d6
msgid "You may need this if authentication for your application takes place against an existing external source such as an LDAP directory."
msgstr ""

#: ../../ref/contrib/auth.txt:154
# 910ccbb5c94041fbba20fc92742b16e0
msgid "Returns ``False`` if :meth:`~django.contrib.auth.models.User.set_unusable_password()` has been called for this user."
msgstr ""

#: ../../ref/contrib/auth.txt:160
# dcd9e945087045e9b59207734c57abe2
msgid "Returns a set of permission strings that the user has, through his/her groups."
msgstr ""

#: ../../ref/contrib/auth.txt:163
# dcb88eb56d2f43e290afa7ac1c5dc90c
msgid "If ``obj`` is passed in, only returns the group permissions for this specific object."
msgstr ""

#: ../../ref/contrib/auth.txt:168
# df003843554d48179f7dead395716728
msgid "Returns a set of permission strings that the user has, both through group and user permissions."
msgstr ""

#: ../../ref/contrib/auth.txt:171
# cb298f91dcbc478aa50dc099d4f281aa
msgid "If ``obj`` is passed in, only returns the permissions for this specific object."
msgstr ""

#: ../../ref/contrib/auth.txt:176
# 225f093982744343b73305019e480fe1
msgid "Returns ``True`` if the user has the specified permission, where perm is in the format ``\"<app label>.<permission codename>\"``. (see documentation on :ref:`permissions <topic-authorization>`). If the user is inactive, this method will always return ``False``."
msgstr ""

#: ../../ref/contrib/auth.txt:181
# 57ccf58fbce843a7bf234d02339c6588
msgid "If ``obj`` is passed in, this method won't check for a permission for the model, but for this specific object."
msgstr ""

#: ../../ref/contrib/auth.txt:186
# 4e7e9584254d45cfb3f93ea80e00a40d
msgid "Returns ``True`` if the user has each of the specified permissions, where each perm is in the format ``\"<app label>.<permission codename>\"``. If the user is inactive, this method will always return ``False``."
msgstr ""

#: ../../ref/contrib/auth.txt:191
# 2fdd2bb3cad547309537a02ae6fcf6a0
msgid "If ``obj`` is passed in, this method won't check for permissions for the model, but for the specific object."
msgstr ""

#: ../../ref/contrib/auth.txt:196
# 2e65f999178c43ba87ca64e999301656
msgid "Returns ``True`` if the user has any permissions in the given package (the Django app label). If the user is inactive, this method will always return ``False``."
msgstr ""

#: ../../ref/contrib/auth.txt:202
# a81bcf41e37f493eafd6733b03440305
msgid "Sends an email to the user. If ``from_email`` is ``None``, Django uses the :setting:`DEFAULT_FROM_EMAIL`."
msgstr ""

#: ../../ref/contrib/auth.txt:213
# bb789d5de1a049f595ff967f8cad93b8
msgid "Returns a site-specific profile for this user. Raises ``django.contrib.auth.models.SiteProfileNotAvailable`` if the current site doesn't allow profiles, or :exc:`django.core.exceptions.ObjectDoesNotExist` if the user does not have a profile."
msgstr ""

#: ../../ref/contrib/auth.txt:220
# 62c5365c6cb74b3e9c56a31ed3b7d8b5
msgid "Manager methods"
msgstr ""

#: ../../ref/contrib/auth.txt:224
# 04f6e6d7cd504550acffeb4de4da62a2
msgid "The :class:`~django.contrib.auth.models.User` model has a custom manager that has the following helper methods (in addition to the methods provided by :class:`~django.contrib.auth.models.BaseUserManager`):"
msgstr ""

#: ../../ref/contrib/auth.txt:235
# 9f12fd66a801433ebb6ffc6f08737454
msgid "Creates, saves and returns a :class:`~django.contrib.auth.models.User`."
msgstr ""

#: ../../ref/contrib/auth.txt:237
# 32502e3b0d604bbab00c7e19f58832e6
msgid "The :attr:`~django.contrib.auth.models.User.username` and :attr:`~django.contrib.auth.models.User.password` are set as given. The domain portion of :attr:`~django.contrib.auth.models.User.email` is automatically converted to lowercase, and the returned :class:`~django.contrib.auth.models.User` object will have :attr:`~django.contrib.auth.models.User.is_active` set to ``True``."
msgstr ""

#: ../../ref/contrib/auth.txt:244
# 414214601ed5429ebde746b84c6d3665
msgid "If no password is provided, :meth:`~django.contrib.auth.models.User.set_unusable_password()` will be called."
msgstr ""

#: ../../ref/contrib/auth.txt:248
# 8cbfcf47d60b4761923c8580a41b1eea
msgid "The ``extra_fields`` keyword arguments are passed through to the :class:`~django.contrib.auth.models.User`'s ``__init__`` method to allow setting arbitrary fields on a :ref:`custom User model <auth-custom-user>`."
msgstr ""

#: ../../ref/contrib/auth.txt:253
# a0c91c785e4b4757a9d7a91f5a451ce9
msgid "See :ref:`Creating users <topics-auth-creating-users>` for example usage."
msgstr ""

#: ../../ref/contrib/auth.txt:257
# 6d108ad35a0e470b8ac89897a6b563bd
msgid "Same as :meth:`create_user`, but sets :attr:`~models.User.is_staff` and :attr:`~models.User.is_superuser` to ``True``."
msgstr ""

#: ../../ref/contrib/auth.txt:262
# f6ce273e7879409bbb94cf677538fe35
msgid "Anonymous users"
msgstr ""

#: ../../ref/contrib/auth.txt:266
# 2c620f4b75de418594070c175edd3ac2
msgid ":class:`django.contrib.auth.models.AnonymousUser` is a class that implements the :class:`django.contrib.auth.models.User` interface, with these differences:"
msgstr ""

#: ../../ref/contrib/auth.txt:270
# 9d0cefa43f61419886fc1278cf2b34ac
msgid ":ref:`id <automatic-primary-key-fields>` is always ``None``."
msgstr ""

#: ../../ref/contrib/auth.txt:271
# 4d8f3c6f76a04e4a80695a336df912be
msgid ":attr:`~django.contrib.auth.models.User.is_staff` and :attr:`~django.contrib.auth.models.User.is_superuser` are always ``False``."
msgstr ""

#: ../../ref/contrib/auth.txt:274
# 5c243731b1934e179198d1d2c1377231
msgid ":attr:`~django.contrib.auth.models.User.is_active` is always ``False``."
msgstr ""

#: ../../ref/contrib/auth.txt:275
# 9f2852216ab6493695435148ee8fa0b4
msgid ":attr:`~django.contrib.auth.models.User.groups` and :attr:`~django.contrib.auth.models.User.user_permissions` are always empty."
msgstr ""

#: ../../ref/contrib/auth.txt:278
# 54e48d042cba4fe3a74f9716b02ce811
msgid ":meth:`~django.contrib.auth.models.User.is_anonymous()` returns ``True`` instead of ``False``."
msgstr ""

#: ../../ref/contrib/auth.txt:280
# 993757558c1b4706896b212471966ff8
msgid ":meth:`~django.contrib.auth.models.User.is_authenticated()` returns ``False`` instead of ``True``."
msgstr ""

#: ../../ref/contrib/auth.txt:282
# 9f029b369e204910ba1a37d3cc011145
msgid ":meth:`~django.contrib.auth.models.User.set_password()`, :meth:`~django.contrib.auth.models.User.check_password()`, :meth:`~django.db.models.Model.save` and :meth:`~django.db.models.Model.delete()` raise :exc:`~exceptions.NotImplementedError`."
msgstr ""

#: ../../ref/contrib/auth.txt:288
# 904cf7a2715a4727a28d3739c3f1e1b9
msgid "In practice, you probably won't need to use :class:`~django.contrib.auth.models.AnonymousUser` objects on your own, but they're used by Web requests, as explained in the next section."
msgstr ""

#: ../../ref/contrib/auth.txt:293
# 48d0171ecff4487f94c14cb2217cbef1
msgid "Permission"
msgstr ""

#: ../../ref/contrib/auth.txt:300
# 5758f6fa6e144c83b295c52601d6d008
msgid ":class:`~django.contrib.auth.models.Permission` objects have the following fields:"
msgstr ""

#: ../../ref/contrib/auth.txt:305
# b920e3d8ace744ac8d6ca8b5f4660581
msgid "Required. 50 characters or fewer. Example: ``'Can vote'``."
msgstr ""

#: ../../ref/contrib/auth.txt:309
# d2e72a0a382c47d6b4b816524bd80fb0
msgid "Required. A reference to the ``django_content_type`` database table, which contains a record for each installed Django model."
msgstr ""

#: ../../ref/contrib/auth.txt:314
# a7ad8d579dc244a2a3532d20746b1dfa
msgid "Required. 100 characters or fewer. Example: ``'can_vote'``."
msgstr ""

#: ../../ref/contrib/auth.txt:319
# 99819a7874bb4c08aea799893fdc25bf
msgid ":class:`~django.contrib.auth.models.Permission` objects have the standard data-access methods like any other :doc:`Django model </ref/models/instances>`."
msgstr ""

#: ../../ref/contrib/auth.txt:323
# a35a8b604a4d439fb2899d749c462ea5
msgid "Group"
msgstr ""

#: ../../ref/contrib/auth.txt:330
# 7645fff6a1664830a10971015704ae79
msgid ":class:`~django.contrib.auth.models.Group` objects have the following fields:"
msgstr ""

#: ../../ref/contrib/auth.txt:334
# 061f6ae298854b18ab607c658f87f1a0
msgid "Required. 80 characters or fewer. Any characters are permitted. Example: ``'Awesome Users'``."
msgstr ""

#: ../../ref/contrib/auth.txt:339
# 9fe8b9b101c64cb6a1d9ab3b3b2dfc46
msgid "Many-to-many field to :class:`~django.contrib.auth.models.Permission`::"
msgstr ""

#: ../../ref/contrib/auth.txt:349
# 6424bd6ccdc84c5a865649ee346f5c11
msgid "Login and logout signals"
msgstr ""

#: ../../ref/contrib/auth.txt:353
# caf241f114d54aa4852772cb1c9c8b07
msgid "The auth framework uses the following :doc:`signals </topics/signals>` that can be used for notification when a user logs in or out."
msgstr ""

#: ../../ref/contrib/auth.txt:358
# 96363877cc3f4879bf17a9a60edf89d6
msgid "Sent when a user logs in successfully."
msgstr ""

#: ../../ref/contrib/auth.txt:360
#: ../../ref/contrib/comments/signals.txt:29
#: ../../ref/contrib/comments/signals.txt:50
#: ../../ref/contrib/comments/signals.txt:73
#: ../../ref/signals.txt:51
#: ../../ref/signals.txt:87
#: ../../ref/signals.txt:104
#: ../../ref/signals.txt:136
#: ../../ref/signals.txt:171
#: ../../ref/signals.txt:192
#: ../../ref/signals.txt:218
#: ../../ref/signals.txt:380
#: ../../ref/signals.txt:436
#: ../../ref/signals.txt:462
#: ../../ref/signals.txt:475
#: ../../ref/signals.txt:506
#: ../../ref/signals.txt:527
#: ../../ref/signals.txt:558
# ab088bcf85c547bc9ad19471059d7899
# 39f58ae1574c49069cb342de59183ea0
# 7dfa0f8efed646faba46ca140808e72c
# 4af3dabeda284228abbd46ae32a88aed
# a5bdb1db49db41a4b6f87c1c3e8ef110
# af86086cfe33485493932e386fdd93e7
# 15c2570c4c234e8bbb66202b16b4b866
# ecd5114dc03e4122aa81082c267be14e
# 7631ad4869fe4edba2a1f4bd0c76998a
# f9d7d7a79362454a99113cdde87ec2e0
# 77923e84491c4bc0b06443198af8ebdc
# c1dcd390f43b4cb8b0a2fe6cd9efb417
# af388b19ec9b4525af5266ab3d32d18e
# 51de67c9edbc4f36a8e7d1ec099224fe
# df2aa179b8ba4158bef38721bebafd9b
# 8f382236234b49c58ea4bb444ecd92fd
# 3ce3660f209948ec9217261f06e6e48a
# 5dc0e572ac6249a491b1c7532d2d5e17
msgid "Arguments sent with this signal:"
msgstr ""

#: ../../ref/contrib/auth.txt:363
# f9cadc55fe484ac8a60232dc1a0a498b
msgid "The class of the user that just logged in."
msgstr ""

#: ../../ref/contrib/auth.txt:366
#: ../../ref/contrib/auth.txt:380
# a7a10db87cc24de994d00ff019dc20f1
# 415651d0a28c4a0d97720d4997271293
msgid "The current :class:`~django.http.HttpRequest` instance."
msgstr ""

#: ../../ref/contrib/auth.txt:369
# e326d777e8924ae68a54b0bdc8a8786f
msgid "The user instance that just logged in."
msgstr ""

#: ../../ref/contrib/auth.txt:373
# 4137515d8f9b4dff8878b83f0bedf217
msgid "Sent when the logout method is called."
msgstr ""

#: ../../ref/contrib/auth.txt:376
# 8da0498f61294090a4c9fceb35c5f267
msgid "As above: the class of the user that just logged out or ``None`` if the user was not authenticated."
msgstr ""

#: ../../ref/contrib/auth.txt:383
# fcea93493ef4400ea9855d19c8fdf5ac
msgid "The user instance that just logged out or ``None`` if the user was not authenticated."
msgstr ""

#: ../../ref/contrib/auth.txt:390
# 9f517038d2d04675af1a002862402858
msgid "Sent when the user failed to login successfully"
msgstr ""

#: ../../ref/contrib/auth.txt:393
# bd0770e23db94f1ca5e6a4ada1c4cd3e
msgid "The name of the module used for authentication."
msgstr ""

#: ../../ref/contrib/auth.txt:396
# 5c1b8157740b4a8380445ad71d1dd33d
msgid "A dictionary of keyword arguments containing the user credentials that were passed to :func:`~django.contrib.auth.authenticate()` or your own custom authentication backend. Credentials matching a set of 'sensitive' patterns, (including password) will not be sent in the clear as part of the signal."
msgstr ""

#: ../../ref/contrib/auth.txt:404
# 621b4716b594489188bbfa51ed730023
msgid "Authentication backends"
msgstr ""

#: ../../ref/contrib/auth.txt:409
# 4326d999812d46bb8272d85117d61d6f
msgid "This section details the authentication backends that come with Django. For information on how to use them and how to write your own authentication backends, see the :ref:`Other authentication sources section <authentication-backends>` of the :doc:`User authentication guide </topics/auth/index>`."
msgstr ""

#: ../../ref/contrib/auth.txt:417
# d8e5cb77fdbc4389a30742d8a1092bc3
msgid "Available authentication backends"
msgstr ""

#: ../../ref/contrib/auth.txt:419
# 2207ce724f1b4af1a2293e2dcc241849
msgid "The following backends are available in :mod:`django.contrib.auth.backends`:"
msgstr ""

#: ../../ref/contrib/auth.txt:423
# dc6830e64e5745c1b53c1278a0731698
msgid "This is the default authentication backend used by Django.  It authenticates using credentials consisting of a user identifier and password.  For Django's default user model, the user identifier is the username, for custom user models it is the field specified by USERNAME_FIELD (see :doc:`Customizing Users and authentication </topics/auth/customizing>`)."
msgstr ""

#: ../../ref/contrib/auth.txt:430
# 536b12cfbdb64fc9b30c260b2864de21
msgid "It also handles the default permissions model as defined for :class:`~django.contrib.auth.models.User` and :class:`~django.contrib.auth.models.PermissionsMixin`."
msgstr ""

#: ../../ref/contrib/auth.txt:436
# d9ae1bf91f2b433e81438806c513cf1e
msgid "Use this backend to take advantage of external-to-Django-handled authentication.  It authenticates using usernames passed in :attr:`request.META['REMOTE_USER'] <django.http.HttpRequest.META>`.  See the :doc:`Authenticating against REMOTE_USER </howto/auth-remote-user>` documentation."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:3
# f03fcbcdb9644fd38792e82dda9e1706
msgid "Customizing the comments framework"
msgstr ""

#: ../../ref/contrib/comments/custom.txt:7
# b2bccee9273a4ff8814228a7c491fc30
msgid "If the built-in comment framework doesn't quite fit your needs, you can extend the comment app's behavior to add custom data and logic. The comments framework lets you extend the built-in comment model, the built-in comment form, and the various comment views."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:12
# 08d6f5c2f68d4dd793aa2987432a53c6
msgid "The :setting:`COMMENTS_APP` setting is where this customization begins. Set :setting:`COMMENTS_APP` to the name of the app you'd like to use to provide custom behavior. You'll use the same syntax as you'd use for :setting:`INSTALLED_APPS`, and the app given must also be in the :setting:`INSTALLED_APPS` list."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:18
# 2e333d6eda7047c186af50195de2eaa9
msgid "For example, if you wanted to use an app named ``my_comment_app``, your settings file would contain::"
msgstr ""

#: ../../ref/contrib/comments/custom.txt:29
# 9548bb7f8e424f2c8948e9310acb7ac5
msgid "The app named in :setting:`COMMENTS_APP` provides its custom behavior by defining some module-level functions in the app's ``__init__.py``. The :ref:`complete list of these functions <custom-comment-app-api>` can be found below, but first let's look at a quick example."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:35
# 80d5bcb761e54809bd1f461d74784639
msgid "An example custom comments app"
msgstr ""

#: ../../ref/contrib/comments/custom.txt:37
# 2735d04700624cbd99323c798efaf781
msgid "One of the most common types of customization is modifying the set of fields provided on the built-in comment model. For example, some sites that allow comments want the commentator to provide a title for their comment; the built-in comment model has no field for that title."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:42
# af9658fe4b714564886cd2861c6ace74
msgid "To make this kind of customization, we'll need to do three things:"
msgstr ""

#: ../../ref/contrib/comments/custom.txt:44
# 55658223517d4df1934a76e15da734cd
msgid "Create a custom comment :class:`~django.db.models.Model` that adds on the \"title\" field."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:47
# e4a6e1780dd04d8d975bb7c1730cc234
msgid "Create a custom comment :class:`~django.forms.Form` that also adds this \"title\" field."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:50
# c3850b20c3574c16a91990cc7ac69351
msgid "Inform Django of these objects by defining a few functions in a custom :setting:`COMMENTS_APP`."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:53
# 3657edf8b6c14daca220a7283d2b75b7
msgid "So, carrying on the example above, we're dealing with a typical app structure in the ``my_comment_app`` directory::"
msgstr ""

#: ../../ref/contrib/comments/custom.txt:61
# 8faf955d33cc4029b78a3a63504f9143
msgid "In the ``models.py`` we'll define a ``CommentWithTitle`` model::"
msgstr ""

#: ../../ref/contrib/comments/custom.txt:69
# e82dc51254d14506bfd833ffa1877f37
msgid "Most custom comment models will subclass the :class:`~django.contrib.comments.models.Comment` model. However, if you want to substantially remove or change the fields available in the :class:`~django.contrib.comments.models.Comment` model, but don't want to rewrite the templates, you could try subclassing from ``BaseCommentAbstractModel``."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:76
# 1a96e0596b324203b3e4336e0cc6f830
msgid "Next, we'll define a custom comment form in ``forms.py``. This is a little more tricky: we have to both create a form and override ``CommentForm.get_comment_model()`` and ``CommentForm.get_comment_create_data()`` to return deal with our custom title field::"
msgstr ""

#: ../../ref/contrib/comments/custom.txt:99
# a84852e78a1c491da9ab1b2e885a4554
msgid "Django provides a couple of \"helper\" classes to make writing certain types of custom comment forms easier; see :mod:`django.contrib.comments.forms` for more."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:103
# d48ac4ea8199410ea2288c7445688956
msgid "Finally, we'll define a couple of methods in ``my_comment_app/__init__.py`` to point Django at these classes we've created::"
msgstr ""

#: ../../ref/contrib/comments/custom.txt:118
# 890b4f4dd9ad451c8143e5a67411b693
msgid "Be careful not to create cyclic imports in your custom comments app. If you feel your comment configuration isn't being used as defined -- for example, if your comment moderation policy isn't being applied -- you may have a cyclic import problem."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:123
# 67de743495784aaeadb862990899e864
msgid "If you are having unexplained problems with comments behavior, check if your custom comments application imports (even indirectly) any module that itself imports Django's comments module."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:127
# 79b1f4c06cea4e56adccb5126ca179b7
msgid "The above process should take care of most common situations. For more advanced usage, there are additional methods you can define. Those are explained in the next section."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:134
# d219be52b8ca43cf90d3f41466e76a3a
msgid "Custom comment app API"
msgstr ""

#: ../../ref/contrib/comments/custom.txt:136
# f3a7574788bc461795bb4212694a92da
msgid "The :mod:`django.contrib.comments` app defines the following methods; any custom comment app must define at least one of them. All are optional, however."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:142
# 5f02002aae4f4f2f806056a2bdce008d
msgid "Return the :class:`~django.db.models.Model` class to use for comments. This model should inherit from ``django.contrib.comments.models.BaseCommentAbstractModel``, which defines necessary core fields."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:147
# d0ad5be56ce74e1f9e36112f46e422cd
msgid "The default implementation returns :class:`django.contrib.comments.models.Comment`."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:152
# 2fc4d2f24dfa4c799e14a4d6cd88289e
msgid "Return the :class:`~django.forms.Form` class you want to use for creating, validating, and saving your comment model.  Your custom comment form should accept an additional first argument, ``target_object``, which is the object the comment will be attached to."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:158
# 28d83d238a084456b48e2c8ca8adca67
msgid "The default implementation returns :class:`django.contrib.comments.forms.CommentForm`."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:163
# 901b69c169bb4ba5a255a555b2366972
msgid "The default comment form also includes a number of unobtrusive spam-prevention features (see :ref:`notes-on-the-comment-form`).  If replacing it with your own form, you may want to look at the source code for the built-in form and consider incorporating similar features."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:171
# 42ca52930bd84c23bb372a97457ef2d5
msgid "Return the URL for POSTing comments. This will be the ``<form action>`` attribute when rendering your comment form."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:174
# b3fd1840084e46008f37b4fb75cdc7f0
msgid "The default implementation returns a reverse-resolved URL pointing to the ``post_comment()`` view."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:179
# 1a1d06efd8904065a8d889f7fa0fd318
msgid "If you provide a custom comment model and/or form, but you want to use the default ``post_comment()`` view, you will need to be aware that it requires the model and form to have certain additional attributes and methods: see the ``django.contrib.comments.views.post_comment()`` view for details."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:187
# f5898346ff244aaaa1ea81f85dcc2989
msgid "Return the URL for the \"flag this comment\" view."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:189
# 9501f1725bfb466dbda731f0bdf3aac7
msgid "The default implementation returns a reverse-resolved URL pointing to the ``django.contrib.comments.views.moderation.flag()`` view."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:194
# d73fd46054a04c45bbd507857ac0dee3
msgid "Return the URL for the \"delete this comment\" view."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:196
# 042bce2bf1764adbb6350669d8edaf3c
msgid "The default implementation returns a reverse-resolved URL pointing to the ``django.contrib.comments.views.moderation.delete()`` view."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:201
# b937930722c04815896421984b447cd1
msgid "Return the URL for the \"approve this comment from moderation\" view."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:203
# 8a69b680f3764f3fbc6af6368f8c8b48
msgid "The default implementation returns a reverse-resolved URL pointing to the ``django.contrib.comments.views.moderation.approve()`` view."
msgstr ""

#: ../../ref/contrib/comments/example.txt:5
# f30677830ad8402f8e1a979803ce6ab3
msgid "Example of using the built-in comments app"
msgstr ""

#: ../../ref/contrib/comments/example.txt:7
# 85a7447fed8449258d0c32464e68acc3
msgid "Follow the first three steps of the quick start guide in the :doc:`documentation </ref/contrib/comments/index>`."
msgstr ""

#: ../../ref/contrib/comments/example.txt:10
# e49e3210ecac4dd894ccea9daa82663a
msgid "Now suppose, you have an app (``blog``) with a model (``Post``) to which you want to attach comments. Let's also suppose that you have a template called ``blog_detail.html`` where you want to display the comments list and comment form."
msgstr ""

#: ../../ref/contrib/comments/example.txt:16
#: ../../ref/templates/builtins.txt:1508
#: ../../ref/templates/builtins.txt:1519
#: ../../ref/templates/builtins.txt:1530
#: ../../ref/templates/builtins.txt:1542
# bb7f44d0bd0c4a6a9c4beac738344684
# ba69431922de4592bb4a9d6d8c5f6716
# e5016ca7284c44148339352374e2ebec
# 40c9e77b3d7046d7bcf76e8f3c779077
# 38fddde4cb144d5fa9c9db21c07c5694
msgid "Template"
msgstr ""

#: ../../ref/contrib/comments/example.txt:18
# 44362ccd3f02485baf343b050b9f4116
msgid "First, we should load the ``comment`` template tags in the ``blog_detail.html`` so that we can use its functionality. So just like all other custom template tag libraries::"
msgstr ""

#: ../../ref/contrib/comments/example.txt:24
# d41bbf3adbd5443b8edce0951acd4099
msgid "Next, let's add the number of comments attached to the particular model instance of ``Post``. For this we assume that a context variable ``object_pk`` is present which gives the ``id`` of the instance of ``Post``."
msgstr ""

#: ../../ref/contrib/comments/example.txt:29
# cb490a1196a844b0a9a47f2b37f581fa
msgid "The usage of the :ttag:`get_comment_count` tag is like below::"
msgstr ""

#: ../../ref/contrib/comments/example.txt:34
# 2208b720175b44d5aa81c2b0dbca6815
msgid "If you have the instance (say ``entry``) of the model (``Post``) available in the context, then you can refer to it directly::"
msgstr ""

#: ../../ref/contrib/comments/example.txt:40
# 2be947982eef416497e31a228ecaf7e3
msgid "Next, we can use the :ttag:`render_comment_list` tag, to render all comments to the given instance (``entry``) by using the ``comments/list.html`` template::"
msgstr ""

#: ../../ref/contrib/comments/example.txt:45
# e0715486a0dc4fb78333e4153595a3d2
msgid "Django will will look for the ``list.html`` under the following directories (for our example)::"
msgstr ""

#: ../../ref/contrib/comments/example.txt:52
# 5eec8eec28554cc4a15c0a364a48ddd7
msgid "To get a list of comments, we make use of the :ttag:`get_comment_list` tag. Using this tag is very similar to the :ttag:`get_comment_count` tag. We need to remember that :ttag:`get_comment_list` returns a list of comments and hence we have to iterate through them to display them::"
msgstr ""

#: ../../ref/contrib/comments/example.txt:65
# 3a993cea1d504ddb9c10f321ed5068b6
msgid "Finally, we display the comment form, enabling users to enter their comments. There are two ways of doing so. The first is when you want to display the comments template available under your ``comments/form.html``. The other method gives you a chance to customize the form."
msgstr ""

#: ../../ref/contrib/comments/example.txt:70
# c64cedc8d19d4fb5b6021eb5f5bf818f
msgid "The first method makes use of the :ttag:`render_comment_form` tag. Its usage too is similar to the other three tags we have discussed above::"
msgstr ""

#: ../../ref/contrib/comments/example.txt:75
# 136c4b030d784cd6aeefe60ad92f9bd1
msgid "It looks for the ``form.html`` under the following directories (for our example)::"
msgstr ""

#: ../../ref/contrib/comments/example.txt:82
# 3610a5acb2b9428dab949497b49e934d
msgid "Since we customize the form in the second method, we make use of another tag called :ttag:`comment_form_target`. This tag on rendering gives the URL where the comment form is posted. Without any :doc:`customization </ref/contrib/comments/custom>`, :ttag:`comment_form_target` evaluates to ``/comments/post/``. We use this tag in the form's ``action`` attribute."
msgstr ""

#: ../../ref/contrib/comments/example.txt:88
# 968fddf7bcb9461eb97adfda93dadf91
msgid "The :ttag:`get_comment_form` tag renders a ``form`` for a model instance by creating a context variable. One can iterate over the ``form`` object to get individual fields. This gives you fine-grain control over the form::"
msgstr ""

#: ../../ref/contrib/comments/example.txt:98
# 93b6b4a8217b481696639641f298271b
msgid "But let's look at a simple example::"
msgstr ""

#: ../../ref/contrib/comments/example.txt:117
# 5bd8c8bd0ab04c65b4c72209a7bc5ec7
msgid "Flagging"
msgstr ""

#: ../../ref/contrib/comments/example.txt:119
# 02c04c32c0ca469ca5c9b5fb2af41672
msgid "If you want your users to be able to flag comments (say for profanity), you can just direct them (by placing a link in your comment list) to ``/flag/{{ comment.id }}/``. Similarly, a user with requisite permissions (``\"Can moderate comments\"``) can approve and delete comments. This can also be done through the ``admin`` as you'll see later. You might also want to customize the following templates:"
msgstr ""

#: ../../ref/contrib/comments/example.txt:126
# 2818c725383c4c75b37dc60f6e717174
msgid "``flag.html``"
msgstr ""

#: ../../ref/contrib/comments/example.txt:127
# 412ca564f1cc46499a561e94ebb4ffb4
msgid "``flagged.html``"
msgstr ""

#: ../../ref/contrib/comments/example.txt:128
# 66ec048567f749deb53a18a6701b10c8
msgid "``approve.html``"
msgstr ""

#: ../../ref/contrib/comments/example.txt:129
# 9247f9a6057642ecae6a7c6722d49754
msgid "``approved.html``"
msgstr ""

#: ../../ref/contrib/comments/example.txt:130
# 247a2f69344a44a4a56ac274184ff5c1
msgid "``delete.html``"
msgstr ""

#: ../../ref/contrib/comments/example.txt:131
# 7b02c39a2f3940c687e04c9cb8f15da5
msgid "``deleted.html``"
msgstr ""

#: ../../ref/contrib/comments/example.txt:133
# 10123c4fd4d84d3eb9ecea3e0b7f0303
msgid "found under the directory structure we saw for ``form.html``."
msgstr ""

#: ../../ref/contrib/comments/example.txt:136
# fea5cb3a39274f9f9ded6bd980e22c1a
msgid "Feeds"
msgstr ""

#: ../../ref/contrib/comments/example.txt:138
# e65c45e7b73c4b0aa34153b0c11fc2be
msgid "Suppose you want to export a :doc:`feed </ref/contrib/syndication>` of the latest comments, you can use the built-in ``LatestCommentFeed``. Just enable it in your project's ``urls.py``:"
msgstr ""

#: ../../ref/contrib/comments/example.txt:153
# 402d9511537648338c9ff759ec47aae5
msgid "Now you should have the latest comment feeds being served off ``/feeds/latest/``."
msgstr ""

#: ../../ref/contrib/comments/example.txt:157
# 9e90c163893a4c3a866f8a8c1ee6e77b
msgid "Moderation"
msgstr ""

#: ../../ref/contrib/comments/example.txt:159
# 9e39b6adaacf45df8ba3a7ba6060454d
msgid "Now that we have the comments framework working, we might want to have some moderation setup to administer the comments. The comments framework comes built-in with :doc:`generic comment moderation </ref/contrib/comments/moderation>`. The comment moderation has the following features (all of which or only certain can be enabled):"
msgstr ""

#: ../../ref/contrib/comments/example.txt:165
# 37a2c25e8a984d6ba2f56320ec8f445a
msgid "Enable comments for a particular model instance."
msgstr ""

#: ../../ref/contrib/comments/example.txt:166
# 38639d2e936443a9b266d608c7024d45
msgid "Close comments after a particular (user-defined) number of days."
msgstr ""

#: ../../ref/contrib/comments/example.txt:167
# fb9312c1cda34e25957215688989d348
msgid "Email new comments to the site-staff."
msgstr ""

#: ../../ref/contrib/comments/example.txt:169
# e636a6deffd04243b3bfad40f964c44e
msgid "To enable comment moderation, we subclass the ``CommentModerator`` and register it with the moderation features we want. Let's suppose we want to close comments after 7 days of posting and also send out an email to the site staff. In ``blog/models.py``, we register a comment moderator in the following way:"
msgstr ""

#: ../../ref/contrib/comments/example.txt:193
# c5a82a96cb5340b3a90dd01230e6e151
msgid "The generic comment moderation also has the facility to remove comments. These comments can then be moderated by any user who has access to the ``admin`` site and the ``Can moderate comments`` permission (can be set under the ``Users`` page in the ``admin``)."
msgstr ""

#: ../../ref/contrib/comments/example.txt:198
# 62fadf517ba8441ba06de47e7d173c82
msgid "The moderator can ``Flag``, ``Approve`` or ``Remove`` comments using the ``Action`` drop-down in the ``admin`` under the ``Comments`` page."
msgstr ""

#: ../../ref/contrib/comments/example.txt:203
# ad7b1102c99e46b3bbf67aab544b9c1d
msgid "Only a super-user will be able to delete comments from the database. ``Remove Comments`` only sets the ``is_public`` attribute to ``False``."
msgstr ""

#: ../../ref/contrib/comments/forms.txt:3
# 07f5cccd34174812bc474e26713929c1
msgid "Comment form classes"
msgstr ""

#: ../../ref/contrib/comments/forms.txt:8
# 0580041a31f64c89893d3aedb121aa9d
msgid "The ``django.contrib.comments.forms`` module contains a handful of forms you'll use when writing custom views dealing with comments, or when writing :doc:`custom comment apps </ref/contrib/comments/custom>`."
msgstr ""

#: ../../ref/contrib/comments/forms.txt:14
# 92afce7883d0439d8b107b6587f67ec0
msgid "The main comment form representing the standard, built-in way of handling submitted comments. This is the class used by all the views :mod:`django.contrib.comments` to handle submitted comments."
msgstr ""

#: ../../ref/contrib/comments/forms.txt:18
# 088eb4bdb5a545b4ac9665cffd00ba59
msgid "If you want to build custom views that are similar to Django's built-in comment handling views, you'll probably want to use this form."
msgstr ""

#: ../../ref/contrib/comments/forms.txt:22
# 3446bf617ae444be846d00ccd78e6326
msgid "Abstract comment forms for custom comment apps"
msgstr ""

#: ../../ref/contrib/comments/forms.txt:24
# b8d0eed9c2ab4aa2af544dda7be1d696
msgid "If you're building a :doc:`custom comment app </ref/contrib/comments/custom>`, you might want to replace *some* of the form logic but still rely on parts of the existing form."
msgstr ""

#: ../../ref/contrib/comments/forms.txt:28
# f6bae03797b24cba96a040153c023267
msgid ":class:`CommentForm` is actually composed of a couple of abstract base class forms that you can subclass to reuse pieces of the form handling logic:"
msgstr ""

#: ../../ref/contrib/comments/forms.txt:33
# f4c769a5239a49b2acbfc0f13f58c16d
msgid "Handles the anti-spoofing protection aspects of the comment form handling."
msgstr ""

#: ../../ref/contrib/comments/forms.txt:35
# 6d0f30156ca94ed4b2de26a9053b8ea5
msgid "This class contains the ``content_type`` and ``object_pk`` fields pointing to the object the comment is attached to, along with a ``timestamp`` and a ``security_hash`` of all the form data. Together, the timestamp and the security hash ensure that spammers can't \"replay\" form submissions and flood you with comments."
msgstr ""

#: ../../ref/contrib/comments/forms.txt:43
# d64b610df7fd42569b4b119980f93592
msgid "Handles the details of the comment itself."
msgstr ""

#: ../../ref/contrib/comments/forms.txt:45
# 75cfc3d140e74c83add3a22ff394f582
msgid "This class contains the ``name``, ``email``, ``url``, and the ``comment`` field itself, along with the associated validation logic."
msgstr ""

#: ../../ref/contrib/comments/index.txt:3
# af82b7b45ef2439693aab3afb7e03161
msgid "Django's comments framework"
msgstr ""

#: ../../ref/contrib/comments/index.txt:10
# a0d67a95600942e782007da053c73263
msgid "Django includes a simple, yet customizable comments framework. The built-in comments framework can be used to attach comments to any model, so you can use it for comments on blog entries, photos, book chapters, or anything else."
msgstr ""

#: ../../ref/contrib/comments/index.txt:15
# eabf75e6df2943b695efc3a6d0c0e2bc
msgid "Quick start guide"
msgstr ""

#: ../../ref/contrib/comments/index.txt:17
# 17bef188702a41e8afec3f44a0676d54
msgid "To get started using the ``comments`` app, follow these steps:"
msgstr ""

#: ../../ref/contrib/comments/index.txt:19
# c825f66bb07d47089ed06c2ab480e73b
msgid "Install the comments framework by adding ``'django.contrib.comments'`` to :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../ref/contrib/comments/index.txt:22
# d4a22a70d9054a428e69013faae86658
msgid "Run ``manage.py syncdb`` so that Django will create the comment tables."
msgstr ""

#: ../../ref/contrib/comments/index.txt:24
# 7e8632f0047c4b3490e99dfc890a57bf
msgid "Add the comment app's URLs to your project's ``urls.py``:"
msgstr ""

#: ../../ref/contrib/comments/index.txt:34
# 362fd61e697546a9a25ae93ca355c75d
msgid "Use the `comment template tags`_ below to embed comments in your templates."
msgstr ""

#: ../../ref/contrib/comments/index.txt:37
# bbedef75a4464fb7bb4d82ecc6682e13
msgid "You might also want to examine :doc:`/ref/contrib/comments/settings`."
msgstr ""

#: ../../ref/contrib/comments/index.txt:40
# 8ad6e5bf979a4bcbbb2532c677d0d821
msgid "Comment template tags"
msgstr ""

#: ../../ref/contrib/comments/index.txt:42
# 2147c0570d6540fc844eb81123c40dcb
msgid "You'll primarily interact with the comment system through a series of template tags that let you embed comments and generate forms for your users to post them."
msgstr ""

#: ../../ref/contrib/comments/index.txt:45
# 532a9f2a712d46b1967b19f2b527441c
msgid "Like all custom template tag libraries, you'll need to :ref:`load the custom tags <loading-custom-template-libraries>` before you can use them::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:50
# 94b5ffd6b1ab467fa3b126fae2572e11
msgid "Once loaded you can use the template tags below."
msgstr ""

#: ../../ref/contrib/comments/index.txt:53
# a556c9bc04a94c8f88e5ebada3e713d3
msgid "Specifying which object comments are attached to"
msgstr ""

#: ../../ref/contrib/comments/index.txt:55
# 84e7a4c9f4d74d07aa558c3d7662a2b7
msgid "Django's comments are all \"attached\" to some parent object. This can be any instance of a Django model. Each of the tags below gives you a couple of different ways you can specify which object to attach to:"
msgstr ""

#: ../../ref/contrib/comments/index.txt:59
# 2dc580732a3f41c3aaf6720352306600
msgid "Refer to the object directly -- the more common method. Most of the time, you'll have some object in the template's context you want to attach the comment to; you can simply use that object."
msgstr ""

#: ../../ref/contrib/comments/index.txt:63
# ec2d449dee6644368c7ab9cf4affd467
msgid "For example, in a blog entry page that has a variable named ``entry``, you could use the following to load the number of comments::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:68
# f32c6c1b546949d28581bd544eb348ab
msgid "Refer to the object by content-type and object id. You'd use this method if you, for some reason, don't actually have direct access to the object."
msgstr ""

#: ../../ref/contrib/comments/index.txt:71
# 292d4bad1d214554a19c3d393c0969cc
msgid "Following the above example, if you knew the object ID was ``14`` but didn't have access to the actual object, you could do something like::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:76
# 7faa39420e9540118d9f251d4477865f
msgid "In the above, ``blog.entry`` is the app label and (lower-cased) model name of the model class."
msgstr ""

#: ../../ref/contrib/comments/index.txt:80
# c949975dca52480e863c2465a2a60e2a
msgid "Displaying comments"
msgstr ""

#: ../../ref/contrib/comments/index.txt:82
# 04841d0755724e799d2644aa63fba864
msgid "To display a list of comments, you can use the template tags :ttag:`render_comment_list` or :ttag:`get_comment_list`."
msgstr ""

#: ../../ref/contrib/comments/index.txt:88
# f02d51fa9b3841048864a31897d1ba3b
msgid "Quickly rendering a comment list"
msgstr ""

#: ../../ref/contrib/comments/index.txt:90
# ba52268b74284c87b1a65d285d9ab859
msgid "The easiest way to display a list of comments for some object is by using :ttag:`render_comment_list`::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:99
# f0f5ac62d4fc4ae88e4edc0e032db777
msgid "This will render comments using a template named ``comments/list.html``, a default version of which is included with Django."
msgstr ""

#: ../../ref/contrib/comments/index.txt:105
# c73fe635e41b4f73892b6b6523eb963e
msgid "Rendering a custom comment list"
msgstr ""

#: ../../ref/contrib/comments/index.txt:107
# 9307a8faf7b7476796f1d0f0eb2272dd
msgid "To get the list of comments for some object, use :ttag:`get_comment_list`::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:118
# ded09373d74544e08af61d15c50f643e
msgid "This returns a list of :class:`~django.contrib.comments.models.Comment` objects; see :doc:`the comment model documentation </ref/contrib/comments/models>` for details."
msgstr ""

#: ../../ref/contrib/comments/index.txt:125
# 2df9dda18f3a43aba75b5f753b92859c
msgid "Linking to comments"
msgstr ""

#: ../../ref/contrib/comments/index.txt:127
# ba8716e6a10544ed9e8c412676a5138d
msgid "To provide a permalink to a specific comment, use :ttag:`get_comment_permalink`::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:131
# 48f71026496645e79124d8b131aeff81
msgid "By default, the named anchor that will be appended to the URL will be the letter 'c' followed by the comment id, for example 'c82'. You may specify a custom format string if you wish to override this behavior::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:137
# f64369bcf2704f0ba25f8c433d449e3a
msgid "The format string is a standard python format string. Valid mapping keys include any attributes of the comment object."
msgstr ""

#: ../../ref/contrib/comments/index.txt:140
# 10db93c1093948b0be68d993fa3a7056
msgid "Regardless of whether you specify a custom anchor pattern, you must supply a matching named anchor at a suitable place in your template."
msgstr ""

#: ../../ref/contrib/comments/index.txt:155
# 91eb22d364fb43759923a264689530c7
msgid "There's a `known bug`_ in Safari/Webkit which causes the named anchor to be forgotten following a redirect. The practical impact for comments is that the Safari/webkit browsers will arrive at the correct page but will not scroll to the named anchor."
msgstr ""

#: ../../ref/contrib/comments/index.txt:165
# 0ce7962e01554fbf9f1af86f4ad340b1
msgid "Counting comments"
msgstr ""

#: ../../ref/contrib/comments/index.txt:167
# 243e90164bbb4248a68c1577ea9bb909
msgid "To count comments attached to an object, use :ttag:`get_comment_count`::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:179
# 821285fe3d414fc2a186934dfe908ae9
msgid "Displaying the comment post form"
msgstr ""

#: ../../ref/contrib/comments/index.txt:181
# 9b997b61d5db4eadb53d2c3263322685
msgid "To show the form that users will use to post a comment, you can use :ttag:`render_comment_form` or :ttag:`get_comment_form`"
msgstr ""

#: ../../ref/contrib/comments/index.txt:187
# 34acb1ef1d054bb5a2538f7ead2dd084
msgid "Quickly rendering the comment form"
msgstr ""

#: ../../ref/contrib/comments/index.txt:189
# 9b601ef3aee24c85b419478ecee4343b
msgid "The easiest way to display a comment form is by using :ttag:`render_comment_form`::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:198
# 11dc5aec5ccd4dbcb5a9dc8d1b105280
msgid "This will render comments using a template named ``comments/form.html``, a default version of which is included with Django."
msgstr ""

#: ../../ref/contrib/comments/index.txt:204
# 22c82a64f4674cac9791f2617975a6ae
msgid "Rendering a custom comment form"
msgstr ""

#: ../../ref/contrib/comments/index.txt:206
# 500e1f0d89c9470eae0e38a37d17199a
msgid "If you want more control over the look and feel of the comment form, you may use :ttag:`get_comment_form` to get a :doc:`form object </topics/forms/index>` that you can use in the template::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:212
# a3d7278c3ca948ccaf49cb934065ae1b
msgid "A complete form might look like::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:228
# 9bfae98b2452497483a99c195491d495
msgid "Be sure to read the `notes on the comment form`_, below, for some special considerations you'll need to make if you're using this approach."
msgstr ""

#: ../../ref/contrib/comments/index.txt:234
# 40346937c97a4462a126c8ebeddb9290
msgid "Getting the comment form target"
msgstr ""

#: ../../ref/contrib/comments/index.txt:236
# b7d434d0cea14980b07b71a359b3c3c2
msgid "You may have noticed that the above example uses another template tag -- :ttag:`comment_form_target` -- to actually get the ``action`` attribute of the form. This will always return the correct URL that comments should be posted to; you'll always want to use it like above::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:244
# 9e6045af545a45ef9cb2f368cff8361f
msgid "Redirecting after the comment post"
msgstr ""

#: ../../ref/contrib/comments/index.txt:246
# 431824c0365a46608a4f7e31043ca331
msgid "To specify the URL you want to redirect to after the comment has been posted, you can include a hidden form input called ``next`` in your comment form. For example::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:252
# fe9294c242294355ae5bf9591b6498e1
msgid "Providing a comment form for authenticated users"
msgstr ""

#: ../../ref/contrib/comments/index.txt:254
# 29ea34a1c65a4c1c947ce1bbf194cbfb
msgid "If a user is already authenticated, it makes little sense to display the name, email, and URL fields, since these can already be retrieved from their login data and profile. In addition, some sites will only accept comments from authenticated users."
msgstr ""

#: ../../ref/contrib/comments/index.txt:259
# 221d8c89fc234e1787a506e1e4bdf418
msgid "To provide a comment form for authenticated users, you can manually provide the additional fields expected by the Django comments framework. For example, assuming comments are attached to the model \"object\"::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:280
# b43068238fda4cbfbe9806ac4b832379
msgid "The honeypot, content_type, object_pk, timestamp, and security_hash fields are fields that would have been created automatically if you had simply used ``{{ form }}`` in your template, and are referred to in `Notes on the comment form`_ below."
msgstr ""

#: ../../ref/contrib/comments/index.txt:285
# 42ad5b8224f0479f8d6ebb1a16084def
msgid "Note that we do not need to specify the user to be associated with comments submitted by authenticated users. This is possible because the :doc:`Built-in Comment Models</ref/contrib/comments/models>` that come with Django associate comments with authenticated users by default."
msgstr ""

#: ../../ref/contrib/comments/index.txt:290
# 5e873715bf5f4f0e9c61415f45109cf9
msgid "In this example, the honeypot field will still be visible to the user; you'll need to hide that field in your CSS::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:297
# f59c8f8a0d084ba8bcb90bbe287a87ae
msgid "If you want to accept either anonymous or authenticated comments, replace the contents of the \"else\" clause above with a standard comment form and the right thing will happen whether a user is logged in or not."
msgstr ""

#: ../../ref/contrib/comments/index.txt:304
# d85b0078a69449b694a833085f5c9886
msgid "Notes on the comment form"
msgstr ""

#: ../../ref/contrib/comments/index.txt:306
# 68088fceec464ab7b6183252c2cb73c1
msgid "The form used by the comment system has a few important anti-spam attributes you should know about:"
msgstr ""

#: ../../ref/contrib/comments/index.txt:309
# 8c7152aec65d44a1aa84cbdb5566978c
msgid "It contains a number of hidden fields that contain timestamps, information about the object the comment should be attached to, and a \"security hash\" used to validate this information. If someone tampers with this data -- something comment spammers will try -- the comment submission will fail."
msgstr ""

#: ../../ref/contrib/comments/index.txt:314
# 90ca4c1213714a238326a8dc3ad85bba
msgid "If you're rendering a custom comment form, you'll need to make sure to pass these values through unchanged."
msgstr ""

#: ../../ref/contrib/comments/index.txt:317
# 64fe292e080d438490decfd56da9d102
msgid "The timestamp is used to ensure that \"reply attacks\" can't continue very long. Users who wait too long between requesting the form and posting a comment will have their submissions refused."
msgstr ""

#: ../../ref/contrib/comments/index.txt:321
# 37ab5f8a56754d7cbee92ad6f0b37ea8
msgid "The comment form includes a \"honeypot_\" field. It's a trap: if any data is entered in that field, the comment will be considered spam (spammers often automatically fill in all fields in an attempt to make valid submissions)."
msgstr ""

#: ../../ref/contrib/comments/index.txt:325
# 12ac67085e984b73aae4d27d9419e9fd
msgid "The default form hides this field with a piece of CSS and further labels it with a warning field; if you use the comment form with a custom template you should be sure to do the same."
msgstr ""

#: ../../ref/contrib/comments/index.txt:329
# f3808dc6f5ee49fd92d831cd5ba03a76
msgid "The comments app also depends on the more general :doc:`Cross Site Request Forgery protection </ref/contrib/csrf>` that comes with Django.  As described in the documentation, it is best to use ``CsrfViewMiddleware``.  However, if you are not using that, you will need to use the ``csrf_protect`` decorator on any views that include the comment form, in order for those views to be able to output the CSRF token and cookie."
msgstr ""

#: ../../ref/contrib/comments/index.txt:339
# e070654b60d74a8d8d27b23b7ae45263
msgid "More information"
msgstr ""

#: ../../ref/contrib/comments/models.txt:3
# 6c4ad0e33f874175bb5ae50bf7a9ad31
msgid "The built-in comment models"
msgstr ""

#: ../../ref/contrib/comments/models.txt:10
# ba09f0809f084e78be32624e99f022da
msgid "Django's built-in comment model. Has the following fields:"
msgstr ""

#: ../../ref/contrib/comments/models.txt:14
# 697f70cd5c024a7e88319a925dbc80d1
msgid "A :class:`~django.contrib.contenttypes.generic.GenericForeignKey` attribute pointing to the object the comment is attached to. You can use this to get at the related object (i.e. ``my_comment.content_object``)."
msgstr ""

#: ../../ref/contrib/comments/models.txt:18
# 78cbfccb28af436aac3d4a78227fa48c
msgid "Since this field is a :class:`~django.contrib.contenttypes.generic.GenericForeignKey`, it's actually syntactic sugar on top of two underlying attributes, described below."
msgstr ""

#: ../../ref/contrib/comments/models.txt:25
# 6098370d5c8345faa1bac5c950f2dd0a
msgid "A :class:`~django.db.models.ForeignKey` to :class:`~django.contrib.contenttypes.models.ContentType`; this is the type of the object the comment is attached to."
msgstr ""

#: ../../ref/contrib/comments/models.txt:31
# 5aa986c4d7a34cd2a5638b3808e6caa4
msgid "A :class:`~django.db.models.TextField` containing the primary key of the object the comment is attached to."
msgstr ""

#: ../../ref/contrib/comments/models.txt:36
# d3c7d335f7224fe59be04194af4745c0
msgid "A :class:`~django.db.models.ForeignKey` to the :class:`~django.contrib.sites.models.Site` on which the comment was posted."
msgstr ""

#: ../../ref/contrib/comments/models.txt:42
# e36aa892448744f3acccc01878b1cb1b
msgid "A :class:`~django.db.models.ForeignKey` to the :class:`~django.contrib.auth.models.User` who posted the comment. May be blank if the comment was posted by an unauthenticated user."
msgstr ""

#: ../../ref/contrib/comments/models.txt:48
# 1475adf6bd054737986db2e9b7ab339d
msgid "The name of the user who posted the comment."
msgstr ""

#: ../../ref/contrib/comments/models.txt:52
# 0b112a5db17e4eb48e2243d665581236
msgid "The email of the user who posted the comment."
msgstr ""

#: ../../ref/contrib/comments/models.txt:56
# 133be7bf1aae406e9392a308f3b9ab12
msgid "The URL entered by the person who posted the comment."
msgstr ""

#: ../../ref/contrib/comments/models.txt:60
# 627d4d8eddf446bfa2d8d6b514528ef9
msgid "The actual content of the comment itself."
msgstr ""

#: ../../ref/contrib/comments/models.txt:64
# a8013434476d4b6a845ba9359a6768a1
msgid "The date the comment was submitted."
msgstr ""

#: ../../ref/contrib/comments/models.txt:68
# 0a787948fe6148c6820eaf84abe855ff
msgid "The IP address of the user posting the comment."
msgstr ""

#: ../../ref/contrib/comments/models.txt:72
# cd39ac45590b48a19036aa9638002c14
msgid "``False`` if the comment is in moderation (see :doc:`/ref/contrib/comments/moderation`); If ``True``, the comment will be displayed on the site."
msgstr ""

#: ../../ref/contrib/comments/models.txt:78
# 0b149b6e73884645ab2a66e1c4eb8dad
msgid "``True`` if the comment was removed. Used to keep track of removed comments instead of just deleting them."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:3
# 8a36a4e624654fb7811854ad0eefbc4b
msgid "Generic comment moderation"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:8
# 82737d9f29d44af490a14c094815932a
msgid "Django's bundled comments application is extremely useful on its own, but the amount of comment spam circulating on the Web today essentially makes it necessary to have some sort of automatic moderation system in place for any application which makes use of comments. To make this easier to handle in a consistent fashion, ``django.contrib.comments.moderation`` provides a generic, extensible comment-moderation system which can be applied to any model or set of models which want to make use of Django's comment system."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:21
# 915b61d252da40fbaf6a2ad3ae641ff0
msgid "The entire system is contained within ``django.contrib.comments.moderation``, and uses a two-step process to enable moderation for any given model:"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:24
# ed40effaa8c348f08cc26606ab5ea7ad
msgid "A subclass of :class:`CommentModerator` is defined which specifies the moderation options the model wants to enable."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:28
# 6ed60b62d1124f26946dcfd8641119c6
msgid "The model is registered with the moderation system, passing in the model class and the class which specifies its moderation options."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:31
# 9684affd171242d585ff69c717c380be
msgid "A simple example is the best illustration of this. Suppose we have the following model, which would represent entries in a Weblog::"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:42
# 56f583e9ca534b7aa0e92f6f7b23d0be
msgid "Now, suppose that we want the following steps to be applied whenever a new comment is posted on an ``Entry``:"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:45
# 4bb0d1c4e5ca435481a829e90cffc9e3
msgid "If the ``Entry``'s ``enable_comments`` field is ``False``, the comment will simply be disallowed (i.e., immediately deleted)."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:48
# 377475133daf4c7a86c021866f62a0a6
msgid "If the ``enable_comments`` field is ``True``, the comment will be allowed to save."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:51
# 51fd1b5d23504792a29514e366eb98ae
msgid "Once the comment is saved, an email should be sent to site staff notifying them of the new comment."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:54
# f9e32aa265ba46c3a42c37606389400a
msgid "Accomplishing this is fairly straightforward and requires very little code::"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:65
# 67e6f94968774f5980d96cd50666e1de
msgid "The :class:`CommentModerator` class pre-defines a number of useful moderation options which subclasses can enable or disable as desired, and ``moderator`` knows how to work with them to determine whether to allow a comment, whether to moderate a comment which will be allowed to post, and whether to email notifications of new comments."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:72
# 0d988ffc371f445b88b869f7a3293aa5
msgid "Built-in moderation options"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:76
# 125a32de05f34339b8931cb44d6ea756
msgid "Most common comment-moderation needs can be handled by subclassing :class:`CommentModerator` and changing the values of pre-defined attributes; the full range of built-in options is as follows."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:83
# 2781423059fd4fb48f49697c0f404e4f
msgid "If this is set to the name of a :class:`~django.db.models.DateField` or :class:`~django.db.models.DateTimeField` on the model for which comments are being moderated, new comments for objects of that model will be disallowed (immediately deleted) when a certain number of days have passed after the date specified in that field. Must be used in conjunction with :attr:`close_after`, which specifies the number of days past which comments should be disallowed. Default value is ``None``."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:95
# 9ba1c1b13b0d4e4cb1e3e3dc8cf54e00
msgid "Like :attr:`auto_close_field`, but instead of outright deleting new comments when the requisite number of days have elapsed, it will simply set the ``is_public`` field of new comments to ``False`` before saving them. Must be used in conjunction with :attr:`moderate_after`, which specifies the number of days past which comments should be moderated. Default value is ``None``."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:104
# c47c3f1d0faa4952bed4c1d72a8b1c03
msgid "If :attr:`auto_close_field` is used, this must specify the number of days past the value of the field specified by :attr:`auto_close_field` after which new comments for an object should be disallowed. Allowed values are ``None``, 0 (which disallows comments immediately), or any positive integer. Default value is ``None``."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:113
# 36dce8ade1b74e1abc64f9e3afe2fb49
msgid "If ``True``, any new comment on an object of this model which survives moderation (i.e., is not deleted) will generate an email to site staff. Default value is ``False``."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:119
# 1408c213b9b445ef872d76c0542239c2
msgid "If this is set to the name of a :class:`~django.db.models.BooleanField` on the model for which comments are being moderated, new comments on objects of that model will be disallowed (immediately deleted) whenever the value of that field is ``False`` on the object the comment would be attached to. Default value is ``None``."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:128
# d131b484d6084f10811031757631812d
msgid "If :attr:`auto_moderate_field` is used, this must specify the number of days past the value of the field specified by :attr:`auto_moderate_field` after which new comments for an object should be marked non-public. Allowed values are ``None``, 0 (which moderates comments immediately), or any positive integer. Default value is ``None``."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:135
# 6d22f73063974a04a81d9803430a8fec
msgid "Simply subclassing :class:`CommentModerator` and changing the values of these options will automatically enable the various moderation methods for any models registered using the subclass."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:140
# e5615b964a9b4eb5a706926c405fbb87
msgid "Adding custom moderation methods"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:142
# f2ef4712ce87487892aa9faac7c2d682
msgid "For situations where the built-in options listed above are not sufficient, subclasses of :class:`CommentModerator` can also override the methods which actually perform the moderation, and apply any logic they desire.  :class:`CommentModerator` defines three methods which determine how moderation will take place; each method will be called by the moderation system and passed two arguments: ``comment``, which is the new comment being posted, ``content_object``, which is the object the comment will be attached to, and ``request``, which is the :class:`~django.http.HttpRequest` in which the comment is being submitted:"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:154
# 875002d1291a430398ecd8f0f194455d
msgid "Should return ``True`` if the comment should be allowed to post on the content object, and ``False`` otherwise (in which case the comment will be immediately deleted)."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:160
# 43e2621237de4e99840f5c91d4daece6
msgid "If email notification of the new comment should be sent to site staff or moderators, this method is responsible for sending the email."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:166
# a26f85a6cb7c4b0babf1024bfbe4afcd
msgid "Should return ``True`` if the comment should be moderated (in which case its ``is_public`` field will be set to ``False`` before saving), and ``False`` otherwise (in which case the ``is_public`` field will not be changed)."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:173
# 4e65e98112764d78b3b5879082844b41
msgid "Registering models for moderation"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:175
# 34aa685ae82a4e3fa74842657059795d
msgid "The moderation system, represented by ``django.contrib.comments.moderation.moderator`` is an instance of the class :class:`Moderator`, which allows registration and \"unregistration\" of models via two methods:"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:182
# 2498ca239be647d582833a08c2d4d8b3
msgid "Takes two arguments: the first should be either a model class or list of model classes, and the second should be a subclass of ``CommentModerator``, and register the model or models to be moderated using the options defined in the ``CommentModerator`` subclass. If any of the models are already registered for moderation, the exception ``AlreadyModerated`` will be raised."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:192
# 85b93f1087cb49e587508b6cb3b335cf
msgid "Takes one argument: a model class or list of model classes, and removes the model or models from the set of models which are being moderated. If any of the models are not currently being moderated, the exception ``NotModerated`` will be raised."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:199
# 3aa62bdc30bf49e0b4e85e942d73c84a
msgid "Customizing the moderation system"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:201
# 82490784598e4435b4bf666a86edcf48
msgid "Most use cases will work easily with simple subclassing of :class:`CommentModerator` and registration with the provided :class:`Moderator` instance, but customization of global moderation behavior can be achieved by subclassing :class:`Moderator` and instead registering models with an instance of the subclass."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:209
# a078fe941c4347368c189c9b36bd758d
msgid "In addition to the :func:`moderator.register` and :func:`moderator.unregister` methods detailed above, the following methods on :class:`Moderator` can be overridden to achieve customized behavior:"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:215
# 5a5c37d3f315480fba7b7d930b471cdd
msgid "Determines how moderation is set up globally. The base implementation in :class:`Moderator` does this by attaching listeners to the :data:`~django.contrib.comments.signals.comment_will_be_posted` and :data:`~django.contrib.comments.signals.comment_was_posted` signals from the comment models."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:224
# 5f5bb998f03b4bff9f520779f1f94464
msgid "In the base implementation, applies all pre-save moderation steps (such as determining whether the comment needs to be deleted, or whether it needs to be marked as non-public or generate an email)."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:231
# 0a1ede07c5be4796b11a565684bc3353
msgid "In the base implementation, applies all post-save moderation steps (currently this consists entirely of deleting comments which were disallowed)."
msgstr ""

#: ../../ref/contrib/comments/settings.txt:3
# 027e9a1e0ba24b61bf73f5f6c52f013c
msgid "Comment settings"
msgstr ""

#: ../../ref/contrib/comments/settings.txt:5
# 9a0235556abd4a5b861a3b769205dd6a
msgid "These settings configure the behavior of the comments framework:"
msgstr ""

#: ../../ref/contrib/comments/settings.txt:10
# 0a819d9f90484131b4e6be110ae0d836
msgid "COMMENTS_HIDE_REMOVED"
msgstr ""

#: ../../ref/contrib/comments/settings.txt:12
# 24a1691692004a52a0791b35e179932a
msgid "If ``True`` (default), removed comments will be excluded from comment lists/counts (as taken from template tags). Otherwise, the template author is responsible for some sort of a \"this comment has been removed by the site staff\" message."
msgstr ""

#: ../../ref/contrib/comments/settings.txt:20
# 4885c5385c0a406d9e2d727d4faba172
msgid "COMMENT_MAX_LENGTH"
msgstr ""

#: ../../ref/contrib/comments/settings.txt:22
# 77da73ceb1644bdca7be5fc24fb51aa4
msgid "The maximum length of the comment field, in characters. Comments longer than this will be rejected. Defaults to 3000."
msgstr ""

#: ../../ref/contrib/comments/settings.txt:28
# b7a4ea5b3355489f80f42fc9fb88f677
msgid "COMMENTS_APP"
msgstr ""

#: ../../ref/contrib/comments/settings.txt:30
# 65b2b919ea0d424e8c97134bb0f898d8
msgid "An app which provides :doc:`customization of the comments framework </ref/contrib/comments/custom>`.  Use the same dotted-string notation as in :setting:`INSTALLED_APPS`.  Your custom :setting:`COMMENTS_APP` must also be listed in :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:3
# ddaa2b667ba6480f93bb8f5a94a27e03
msgid "Signals sent by the comments app"
msgstr ""

#: ../../ref/contrib/comments/signals.txt:8
# 994d7db53b944dfcb38baf1243f5f1c2
msgid "The comment app sends a series of :doc:`signals </topics/signals>` to allow for comment moderation and similar activities. See :doc:`the introduction to signals </topics/signals>` for information about how to register for and receive these signals."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:14
# ef75ba509b8e46619cb7a597092d79c8
msgid "comment_will_be_posted"
msgstr ""

#: ../../ref/contrib/comments/signals.txt:19
# bb2b99adc1384a1fafe869750b3a0a50
msgid "Sent just before a comment will be saved, after it's been sanity checked and submitted. This can be used to modify the comment (in place) with posting details or other such actions."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:23
# 148580caf9564b05855358f8fbe56fb7
msgid "If any receiver returns ``False`` the comment will be discarded and a 400 response will be returned."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:26
# b8bcc727f1a44fe8a9a08c95a4d1f255
msgid "This signal is sent at more or less the same time (just before, actually) as the ``Comment`` object's :data:`~django.db.models.signals.pre_save` signal."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:32
#: ../../ref/contrib/comments/signals.txt:53
#: ../../ref/contrib/comments/signals.txt:76
# c8d8768a4de04d1dbe198f5a3f1735f0
# de75be989b094f7590aae42f4397799c
# 4cf8a213eea443d6b2dbf8434dc70b6e
msgid "The comment model."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:35
# 9843842c7d024c11a4334ca655f42c56
msgid "The comment instance about to be posted. Note that it won't have been saved into the database yet, so it won't have a primary key, and any relations might not work correctly yet."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:40
#: ../../ref/contrib/comments/signals.txt:61
#: ../../ref/contrib/comments/signals.txt:91
# 53d8126963b241a58b1b70b9f42d04a5
# f7c840a9da3547d6996dbed9367eb31c
# 840f3b873e5e4afabb958b7647521182
msgid "The :class:`~django.http.HttpRequest` that posted the comment."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:43
# bb236b893d524305b6090532b309ff39
msgid "comment_was_posted"
msgstr ""

#: ../../ref/contrib/comments/signals.txt:48
# 13b34f33e3c44bbc94967488558724f5
msgid "Sent just after the comment is saved."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:56
#: ../../ref/contrib/comments/signals.txt:79
# a07a2cc0a6dc496cae1241fd71171b71
# 160e8e05624a40e6b91b91008c828e55
msgid "The comment instance that was posted. Note that it will have already been saved, so if you modify it you'll need to call :meth:`~django.db.models.Model.save` again."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:64
# 7eebd246fed940dda2e9b9eed955ad73
msgid "comment_was_flagged"
msgstr ""

#: ../../ref/contrib/comments/signals.txt:69
# 12165d97cb05406eadba4f4e630995bf
msgid "Sent after a comment was \"flagged\" in some way. Check the flag to see if this was a user requesting removal of a comment, a moderator approving/removing a comment, or some other custom user flag."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:84
# b36ec891a5364a4090ad39c1bcda7b71
msgid "The ``django.contrib.comments.models.CommentFlag`` that's been attached to the comment."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:88
# 1217069027ae45459b314c8427d372dc
msgid "``True`` if this is a new flag; ``False`` if it's a duplicate flag."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:3
# 46a50c666fbf4f238ddf2393df158d5e
msgid "The contenttypes framework"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:8
# 7f14e05b5fb64f718369e97b10b6f59f
msgid "Django includes a :mod:`~django.contrib.contenttypes` application that can track all of the models installed in your Django-powered project, providing a high-level, generic interface for working with your models."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:15
# f70cc02e8dd84c058ea2adb6a1c81143
msgid "At the heart of the contenttypes application is the :class:`~django.contrib.contenttypes.models.ContentType` model, which lives at ``django.contrib.contenttypes.models.ContentType``. Instances of :class:`~django.contrib.contenttypes.models.ContentType` represent and store information about the models installed in your project, and new instances of :class:`~django.contrib.contenttypes.models.ContentType` are automatically created whenever new models are installed."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:23
# 216d77cc8a4d4f00a63527846ef84dc3
msgid "Instances of :class:`~django.contrib.contenttypes.models.ContentType` have methods for returning the model classes they represent and for querying objects from those models. :class:`~django.contrib.contenttypes.models.ContentType` also has a :ref:`custom manager <custom-managers>` that adds methods for working with :class:`~django.contrib.contenttypes.models.ContentType` and for obtaining instances of :class:`~django.contrib.contenttypes.models.ContentType` for a particular model."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:31
# c42f2dbfab1a4fb6a7e4a7adb6b2357c
msgid "Relations between your models and :class:`~django.contrib.contenttypes.models.ContentType` can also be used to enable \"generic\" relationships between an instance of one of your models and instances of any model you have installed."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:37
# 215132714bd245d4ace2b6e9bea20cd1
msgid "Installing the contenttypes framework"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:39
# 15a9aec6ee7d4673a0dc47480a7144a7
msgid "The contenttypes framework is included in the default :setting:`INSTALLED_APPS` list created by ``django-admin.py startproject``, but if you've removed it or if you manually set up your :setting:`INSTALLED_APPS` list, you can enable it by adding ``'django.contrib.contenttypes'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:45
# 3d5a445ae5a944e58c964091174fe2bf
msgid "It's generally a good idea to have the contenttypes framework installed; several of Django's other bundled applications require it:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:48
# 28f881c086f14e5ea1f90f17bd2f62bf
msgid "The admin application uses it to log the history of each object added or changed through the admin interface."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:51
# 14625911a4904ad9a0e2c1d6ca82e64a
msgid "Django's :mod:`authentication framework <django.contrib.auth>` uses it to tie user permissions to specific models."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:54
# 297fa8b4b7f043a6ae8e193d8553e724
msgid "Django's comments system (:mod:`django.contrib.comments`) uses it to \"attach\" comments to any installed model."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:60
# ca7db17d6d1c411dba78e2d4b7adb579
msgid "The ``ContentType`` model"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:64
# c0c794be00ac49ef82da1378b30a0f69
msgid "Each instance of :class:`~django.contrib.contenttypes.models.ContentType` has three fields which, taken together, uniquely describe an installed model:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:70
# 75d436a5212448c0888955378d48d20e
msgid "The name of the application the model is part of. This is taken from the :attr:`app_label` attribute of the model, and includes only the *last* part of the application's Python import path; \"django.contrib.contenttypes\", for example, becomes an :attr:`app_label` of \"contenttypes\"."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:78
# 33411f519f654d9da6b6b5fc4c8899cf
msgid "The name of the model class."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:82
# b6af2624b18a4d93a9531c10c32f0f26
msgid "The human-readable name of the model. This is taken from the :attr:`verbose_name <django.db.models.Field.verbose_name>` attribute of the model."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:86
# 455aafad6d424b52a4649eb401254d4b
msgid "Let's look at an example to see how this works. If you already have the :mod:`~django.contrib.contenttypes` application installed, and then add :mod:`the sites application <django.contrib.sites>` to your :setting:`INSTALLED_APPS` setting and run ``manage.py syncdb`` to install it, the model :class:`django.contrib.sites.models.Site` will be installed into your database. Along with it a new instance of :class:`~django.contrib.contenttypes.models.ContentType` will be created with the following values:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:95
# 90b8faa97cd2479abe031bddbcfaf8bd
msgid ":attr:`~django.contrib.contenttypes.models.ContentType.app_label` will be set to ``'sites'`` (the last part of the Python path \"django.contrib.sites\")."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:99
# db80aa7e48cd4fb8ad5043caa1347807
msgid ":attr:`~django.contrib.contenttypes.models.ContentType.model` will be set to ``'site'``."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:102
# bc87d1436b764578bd3ed00bc04e5881
msgid ":attr:`~django.contrib.contenttypes.models.ContentType.name` will be set to ``'site'``."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:108
# ad341bac5a82405d9685bceeea28e340
msgid "Methods on ``ContentType`` instances"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:110
# 27e9c496afed4cd38eb3ca67f6b10ac9
msgid "Each :class:`~django.contrib.contenttypes.models.ContentType` instance has methods that allow you to get from a :class:`~django.contrib.contenttypes.models.ContentType` instance to the model it represents, or to retrieve objects from that model:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:117
# 857ad25419604390a2485c8d11c945ff
msgid "Takes a set of valid :ref:`lookup arguments <field-lookups-intro>` for the model the :class:`~django.contrib.contenttypes.models.ContentType` represents, and does :meth:`a get() lookup <django.db.models.query.QuerySet.get>` on that model, returning the corresponding object."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:125
# 8b5056c8e3fc46459748223861d8d2c9
msgid "Returns the model class represented by this :class:`~django.contrib.contenttypes.models.ContentType` instance."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:128
# 52babc02daa74518a18dc64002633522
msgid "For example, we could look up the :class:`~django.contrib.contenttypes.models.ContentType` for the :class:`~django.contrib.auth.models.User` model::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:137
# 3f8717ddf812408ab6578cc62159518a
msgid "And then use it to query for a particular :class:`~django.contrib.auth.models.User`, or to get access to the ``User`` model class::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:146
# 27686ace879149feada6211d58bcdfe0
msgid "Together, :meth:`~django.contrib.contenttypes.models.ContentType.get_object_for_this_type` and :meth:`~django.contrib.contenttypes.models.ContentType.model_class` enable two extremely important use cases:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:151
# 970531739de44ce99ad7aecf56dd5a96
msgid "Using these methods, you can write high-level generic code that performs queries on any installed model -- instead of importing and using a single specific model class, you can pass an ``app_label`` and ``model`` into a :class:`~django.contrib.contenttypes.models.ContentType` lookup at runtime, and then work with the model class or retrieve objects from it."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:158
# 29aeacebb8ba46d4b3ce354100544d9f
msgid "You can relate another model to :class:`~django.contrib.contenttypes.models.ContentType` as a way of tying instances of it to particular model classes, and use these methods to get access to those model classes."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:163
# 9f7e5506298e44dfa250e866c71838c1
msgid "Several of Django's bundled applications make use of the latter technique. For example, :class:`the permissions system <django.contrib.auth.models.Permission>` in Django's authentication framework uses a :class:`~django.contrib.auth.models.Permission` model with a foreign key to :class:`~django.contrib.contenttypes.models.ContentType`; this lets :class:`~django.contrib.auth.models.Permission` represent concepts like \"can add blog entry\" or \"can delete news story\"."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:173
# 3a9fe3e1bab9442bad58e1b0a153af58
msgid "The ``ContentTypeManager``"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:177
# 0f49eb43cb524f49a26bbacf88da3ee2
msgid ":class:`~django.contrib.contenttypes.models.ContentType` also has a custom manager, :class:`~django.contrib.contenttypes.models.ContentTypeManager`, which adds the following methods:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:183
# 490229167cac476f9c2f617805686f7a
msgid "Clears an internal cache used by :class:`~django.contrib.contenttypes.models.ContentType` to keep track of models for which it has created :class:`~django.contrib.contenttypes.models.ContentType` instances. You probably won't ever need to call this method yourself; Django will call it automatically when it's needed."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:192
# 3155a475c48642f08a888a163a0259da
msgid "Lookup a :class:`~django.contrib.contenttypes.models.ContentType` by ID. Since this method uses the same shared cache as :meth:`~django.contrib.contenttypes.models.ContentTypeManager.get_for_model`, it's preferred to use this method over the usual ``ContentType.objects.get(pk=id)``"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:200
# a327391c92794bbca9ec8a71e88c9a17
msgid "Takes either a model class or an instance of a model, and returns the :class:`~django.contrib.contenttypes.models.ContentType` instance representing that model."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:206
# 8f38c9074cc94a28945aaed1988d900d
msgid "Takes a variadic number of model classes, and returns a dictionary mapping the model classes to the :class:`~django.contrib.contenttypes.models.ContentType` instances representing them."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:213
# 6e3e7cfe2ce8481a84a45ba5520e233f
msgid "Returns the :class:`~django.contrib.contenttypes.models.ContentType` instance uniquely identified by the given application label and model name. The primary purpose of this method is to allow :class:`~django.contrib.contenttypes.models.ContentType` objects to be referenced via a :ref:`natural key<topics-serialization-natural-keys>` during deserialization."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:220
# a9e13566c0534488a4efdb9daaf5779f
msgid "The :meth:`~ContentTypeManager.get_for_model()` method is especially useful when you know you need to work with a :class:`ContentType <django.contrib.contenttypes.models.ContentType>` but don't want to go to the trouble of obtaining the model's metadata to perform a manual lookup::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:237
# 14ba5e8f3b9b4c969baad2562c0c51b3
msgid "Prior to Django 1.5, :meth:`~django.contrib.contenttypes.models.ContentTypeManager.get_for_model` and :meth:`~django.contrib.contenttypes.models.ContentTypeManager.get_for_models` always returned the :class:`~django.contrib.contenttypes.models.ContentType` associated with the concrete model of the specified one(s). That means there was no way to retrieve the :class:`~django.contrib.contenttypes.models.ContentType` of a proxy model using those methods. As of Django 1.5 you can now pass a boolean flag – ``for_concrete_model`` and ``for_concrete_models`` respectively – to specify wether or not you want to retrieve the :class:`~django.contrib.contenttypes.models.ContentType` for the concrete or direct model."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:251
# fa112a961cba43c9a942530b506b9c53
msgid "Generic relations"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:253
# 6de5e9764b4f4ca688fc1593413a0cd7
msgid "Adding a foreign key from one of your own models to :class:`~django.contrib.contenttypes.models.ContentType` allows your model to effectively tie itself to another model class, as in the example of the :class:`~django.contrib.auth.models.Permission` model above. But it's possible to go one step further and use :class:`~django.contrib.contenttypes.models.ContentType` to enable truly generic (sometimes called \"polymorphic\") relationships between models."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:261
# a365f4d22c7844e9a5a6d54e6dbcadd6
msgid "A simple example is a tagging system, which might look like this::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:276
# 9c3515cd31b9456aab235819d9b277cb
msgid "A normal :class:`~django.db.models.ForeignKey` can only \"point to\" one other model, which means that if the ``TaggedItem`` model used a :class:`~django.db.models.ForeignKey` it would have to choose one and only one model to store tags for. The contenttypes application provides a special field type (``GenericForeignKey``) which works around this and allows the relationship to be with any model:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:286
# c104ad7d927d4b6fa9a971c499a4f62a
msgid "There are three parts to setting up a :class:`~django.contrib.contenttypes.generic.GenericForeignKey`:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:289
# 6cac9bfbae5a4b55b0db3d2b436612cc
msgid "Give your model a :class:`~django.db.models.ForeignKey` to :class:`~django.contrib.contenttypes.models.ContentType`. The usual name for this field is \"content_type\"."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:293
# 24eb9c1107c046b79f30f4650139c2a1
msgid "Give your model a field that can store primary key values from the models you'll be relating to. For most models, this means a :class:`~django.db.models.PositiveIntegerField`. The usual name for this field is \"object_id\"."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:298
# 122b6029ffa8486ea56685e6c5b80ad4
msgid "Give your model a :class:`~django.contrib.contenttypes.generic.GenericForeignKey`, and pass it the names of the two fields described above. If these fields are named \"content_type\" and \"object_id\", you can omit this -- those are the default field names :class:`~django.contrib.contenttypes.generic.GenericForeignKey` will look for."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:308
# dffe5e4affda45998c200cc9b16c7326
msgid "The \"object_id\" field doesn't have to be the same type as the primary key fields on the related models, but their primary key values must be coercible to the same type as the \"object_id\" field by its :meth:`~django.db.models.Field.get_db_prep_value` method."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:313
# 00c54d6076b84dac900a4fc6f8894b94
msgid "For example, if you want to allow generic relations to models with either :class:`~django.db.models.IntegerField` or :class:`~django.db.models.CharField` primary key fields, you can use :class:`~django.db.models.CharField` for the \"object_id\" field on your model since integers can be coerced to strings by :meth:`~django.db.models.Field.get_db_prep_value`."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:320
# e592542098d24f4c9f1985e7b2df1ebb
msgid "For maximum flexibility you can use a :class:`~django.db.models.TextField` which doesn't have a maximum length defined, however this may incur significant performance penalties depending on your database backend."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:325
# 0d5312530fce49a7a6b98460d283941c
msgid "There is no one-size-fits-all solution for which field type is best. You should evaluate the models you expect to be pointing to and determine which solution will be most effective for your use case."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:331
# 9767af30243c4b43bd04aaa200a444d9
msgid "If you're serializing data (for example, when generating :class:`~django.test.TestCase.fixtures`) from a model that implements generic relations, you should probably be using a natural key to uniquely identify related :class:`~django.contrib.contenttypes.models.ContentType` objects. See :ref:`natural keys<topics-serialization-natural-keys>` and :djadminopt:`dumpdata --natural <--natural>` for more information."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:338
# 592a9ee565524b35ad74479b5b064a14
msgid "This will enable an API similar to the one used for a normal :class:`~django.db.models.ForeignKey`; each ``TaggedItem`` will have a ``content_object`` field that returns the object it's related to, and you can also assign to that field or use it when creating a ``TaggedItem``::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:351
# 08d72386b05745e78f1293207a54ab6e
msgid "Due to the way :class:`~django.contrib.contenttypes.generic.GenericForeignKey` is implemented, you cannot use such fields directly with filters (``filter()`` and ``exclude()``, for example) via the database API. Because a :class:`~django.contrib.contenttypes.generic.GenericForeignKey` isn't a normal field object, these examples will *not* work::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:363
# 6ab21fa5c1ae4678a711c636ef72fbac
msgid "Reverse generic relations"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:367
# 0c7f28a323e54d71a9310865781568c2
msgid "If you know which models you'll be using most often, you can also add a \"reverse\" generic relationship to enable an additional API. For example::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:374
# a83b85b61b604b2b9c52209f1de33cfb
msgid "``Bookmark`` instances will each have a ``tags`` attribute, which can be used to retrieve their associated ``TaggedItems``::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:386
# 7cca10c7f7c0418cbdd667941ff3472d
msgid "Just as :class:`~django.contrib.contenttypes.generic.GenericForeignKey` accepts the names of the content-type and object-ID fields as arguments, so too does :class:`~django.contrib.contenttypes.generic.GenericRelation`; if the model which has the generic foreign key is using non-default names for those fields, you must pass the names of the fields when setting up a :class:`.GenericRelation` to it. For example, if the ``TaggedItem`` model referred to above used fields named ``content_type_fk`` and ``object_primary_key`` to create its generic foreign key, then a :class:`.GenericRelation` back to it would need to be defined like so::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:401
# cd4c494ec1194faca300cf9ba6b6c7ad
msgid "Of course, if you don't add the reverse relationship, you can do the same types of lookups manually::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:410
# b7586f428c56493e9786a91a8d8fbd1f
msgid "Note that if the model in a :class:`~django.contrib.contenttypes.generic.GenericRelation` uses a non-default value for ``ct_field`` or ``fk_field`` in its :class:`~django.contrib.contenttypes.generic.GenericForeignKey` (e.g. the :mod:`django.contrib.comments` app uses ``ct_field=\"object_pk\"``), you'll need to set ``content_type_field`` and/or ``object_id_field`` in the :class:`~django.contrib.contenttypes.generic.GenericRelation` to match the ``ct_field`` and ``fk_field``, respectively, in the :class:`~django.contrib.contenttypes.generic.GenericForeignKey`::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:422
# a81d6c809e12452285860d4a30ae6ce4
msgid "Note also, that if you delete an object that has a :class:`~django.contrib.contenttypes.generic.GenericRelation`, any objects which have a :class:`~django.contrib.contenttypes.generic.GenericForeignKey` pointing at it will be deleted as well. In the example above, this means that if a ``Bookmark`` object were deleted, any ``TaggedItem`` objects pointing at it would be deleted at the same time."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:429
# e6d1bec4710041a982a4f3e95d7f2cca
msgid "Unlike :class:`~django.db.models.ForeignKey`, :class:`~django.contrib.contenttypes.generic.GenericForeignKey` does not accept an :attr:`~django.db.models.ForeignKey.on_delete` argument to customize this behavior; if desired, you can avoid the cascade-deletion simply by not using :class:`~django.contrib.contenttypes.generic.GenericRelation`, and alternate behavior can be provided via the :data:`~django.db.models.signals.pre_delete` signal."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:438
# f7e1338c99d24a6fbc54092545ec0611
msgid "Generic relations and aggregation"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:440
# 88c6e90960ac4d83adbf956e712436ae
msgid ":doc:`Django's database aggregation API </topics/db/aggregation>` doesn't work with a :class:`~django.contrib.contenttypes.generic.GenericRelation`. For example, you might be tempted to try something like::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:447
# aed95af73c3641a4af3d07b617df0808
msgid "This will not work correctly, however. The generic relation adds extra filters to the queryset to ensure the correct content type, but the :meth:`~django.db.models.query.QuerySet.aggregate` method doesn't take them into account. For now, if you need aggregates on generic relations, you'll need to calculate them without using the aggregation API."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:454
# a458cd7f51f1487b8e1dfb68a7c60128
msgid "Generic relations in forms and admin"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:456
# 9c86c94fedd74ec0ad078978835f08bd
msgid "The :mod:`django.contrib.contenttypes.generic` module provides:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:458
# 446d6cadf569478c9bff6c8fcc19a14b
msgid "``BaseGenericInlineFormSet``"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:459
# 120c0b1dd2624edd818f7bc8c7db9a1f
msgid ":class:`~django.contrib.contenttypes.generic.GenericTabularInline` and :class:`~django.contrib.contenttypes.generic.GenericStackedInline` (subclasses of :class:`~django.contrib.contenttypes.generic.GenericInlineModelAdmin`)"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:463
# 3ff42cd4a9f6426fb132431af9d24c01
msgid "A formset factory, :func:`generic_inlineformset_factory`, for use with :class:`GenericForeignKey`"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:466
# d1393a411ffc4808a2631083021e41f0
msgid "These classes and functions enable the use of generic relations in forms and the admin. See the :doc:`model formset </topics/forms/modelforms>` and :ref:`admin <using-generic-relations-as-an-inline>` documentation for more information."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:473
# 1a0eda6576e4484cacdd7e238c72f21f
msgid "The :class:`~django.contrib.contenttypes.generic.GenericInlineModelAdmin` class inherits all properties from an :class:`~django.contrib.admin.InlineModelAdmin` class. However, it adds a couple of its own for working with the generic relation:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:480
# d8438659f026427eb89e193e27ec4ed5
msgid "The name of the :class:`~django.contrib.contenttypes.models.ContentType` foreign key field on the model. Defaults to ``content_type``."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:486
# 007996d3df5b40d5918353b97ef5b8c9
msgid "The name of the integer field that represents the ID of the related object. Defaults to ``object_id``."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:492
# fd3443a85f7e403a8cb88827ea8eb546
msgid "Subclasses of :class:`GenericInlineModelAdmin` with stacked and tabular layouts, respectively."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:497
# 4cfb8cf9c1b7419785fb51f56bbb59ee
msgid "Returns a ``GenericInlineFormSet`` using :func:`~django.forms.models.modelformset_factory`."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:500
# 9db7372522624ea18335119c323459bc
msgid "You must provide ``ct_field`` and ``object_id`` if they different from the defaults, ``content_type`` and ``object_id`` respectively. Other parameters are similar to those documented in :func:`~django.forms.models.modelformset_factory` and :func:`~django.forms.models.inlineformset_factory`."
msgstr ""

#: ../../ref/contrib/csrf.txt:3
# d68d5c758db14532b4e78ce58710560e
msgid "Cross Site Request Forgery protection"
msgstr ""

#: ../../ref/contrib/csrf.txt:8
# eac7019df75f4bc6b4e1e8ce88019738
msgid "The CSRF middleware and template tag provides easy-to-use protection against `Cross Site Request Forgeries`_.  This type of attack occurs when a malicious Web site contains a link, a form button or some javascript that is intended to perform some action on your Web site, using the credentials of a logged-in user who visits the malicious site in their browser.  A related type of attack, 'login CSRF', where an attacking site tricks a user's browser into logging into a site with someone else's credentials, is also covered."
msgstr ""

#: ../../ref/contrib/csrf.txt:16
# 7cf1229f985e4eacae7dcafad0ecdb75
msgid "The first defense against CSRF attacks is to ensure that GET requests (and other 'safe' methods, as defined by 9.1.1 Safe Methods, HTTP 1.1, :rfc:`2616#section-9.1.1`) are side-effect free. Requests via 'unsafe' methods, such as POST, PUT and DELETE, can then be protected by following the steps below."
msgstr ""

#: ../../ref/contrib/csrf.txt:29
# 4a2cf59abf5b4c5d8fb7d53983c7e11d
msgid "To enable CSRF protection for your views, follow these steps:"
msgstr ""

#: ../../ref/contrib/csrf.txt:31
# 4878364dd5d04de28cceba52527fd8fd
msgid "Add the middleware ``'django.middleware.csrf.CsrfViewMiddleware'`` to your list of middleware classes, :setting:`MIDDLEWARE_CLASSES`.  (It should come before any view middleware that assume that CSRF attacks have been dealt with.)"
msgstr ""

#: ../../ref/contrib/csrf.txt:37
# 0dedd25f9a78459f9304a83e66948f09
msgid "Alternatively, you can use the decorator :func:`~django.views.decorators.csrf.csrf_protect` on particular views you want to protect (see below)."
msgstr ""

#: ../../ref/contrib/csrf.txt:41
# 69e9f7b8ce5d426080ab0ca848b57f01
msgid "In any template that uses a POST form, use the :ttag:`csrf_token` tag inside the ``<form>`` element if the form is for an internal URL, e.g.::"
msgstr ""

#: ../../ref/contrib/csrf.txt:46
# 1a597b485ec2400d86ee13f164494c15
msgid "This should not be done for POST forms that target external URLs, since that would cause the CSRF token to be leaked, leading to a vulnerability."
msgstr ""

#: ../../ref/contrib/csrf.txt:49
# 06360b11bc0040f9a3afc27e4abdcee7
msgid "In the corresponding view functions, ensure that the ``'django.core.context_processors.csrf'`` context processor is being used. Usually, this can be done in one of two ways:"
msgstr ""

#: ../../ref/contrib/csrf.txt:53
# 9692c2a57fcf42ceb95b7b38135cc6d9
msgid "Use RequestContext, which always uses ``'django.core.context_processors.csrf'`` (no matter what your TEMPLATE_CONTEXT_PROCESSORS setting).  If you are using generic views or contrib apps, you are covered already, since these apps use RequestContext throughout."
msgstr ""

#: ../../ref/contrib/csrf.txt:59
# ee7423af0d324b0a853997254c282624
msgid "Manually import and use the processor to generate the CSRF token and add it to the template context. e.g.::"
msgstr ""

#: ../../ref/contrib/csrf.txt:71
# e7366654511247729bd3ff904c3d8948
msgid "You may want to write your own :func:`~django.shortcuts.render_to_response()` wrapper that takes care of this step for you."
msgstr ""

#: ../../ref/contrib/csrf.txt:75
# 7f1e24cdc8b04efd92d87d496f883300
msgid "The utility script ``extras/csrf_migration_helper.py`` (located in the Django distribution, but not installed) can help to automate the finding of code and templates that may need these steps. It contains full help on how to use it."
msgstr ""

#: ../../ref/contrib/csrf.txt:82
# 79571261db2b4a3aa8b8fcb6adbe05a1
msgid "AJAX"
msgstr ""

#: ../../ref/contrib/csrf.txt:84
# a01d1ba901ff4390bdb1bdc6b9566722
msgid "While the above method can be used for AJAX POST requests, it has some inconveniences: you have to remember to pass the CSRF token in as POST data with every POST request. For this reason, there is an alternative method: on each XMLHttpRequest, set a custom ``X-CSRFToken`` header to the value of the CSRF token. This is often easier, because many javascript frameworks provide hooks that allow headers to be set on every request."
msgstr ""

#: ../../ref/contrib/csrf.txt:91
# e2e6c079a0ce4082a2c2f51289517c42
msgid "As a first step, you must get the CSRF token itself. The recommended source for the token is the ``csrftoken`` cookie, which will be set if you've enabled CSRF protection for your views as outlined above."
msgstr ""

#: ../../ref/contrib/csrf.txt:97
# ab1da426a4574b4c9e8192a78e529b59
msgid "The CSRF token cookie is named ``csrftoken`` by default, but you can control the cookie name via the :setting:`CSRF_COOKIE_NAME` setting."
msgstr ""

#: ../../ref/contrib/csrf.txt:100
# a1054c766ceb4f20b04e41cf9dcc8b73
msgid "Acquiring the token is straightforward:"
msgstr ""

#: ../../ref/contrib/csrf.txt:122
# 6bafac4f0cc84817b7eaa20e6819f370
msgid "The above code could be simplified by using the `jQuery cookie plugin <http://plugins.jquery.com/project/Cookie>`_ to replace ``getCookie``:"
msgstr ""

#: ../../ref/contrib/csrf.txt:131
# 549ee6ef8e5a45ea8c0ba1c9c4ad5b9c
msgid "The CSRF token is also present in the DOM, but only if explicitly included using :ttag:`csrf_token` in a template. The cookie contains the canonical token; the ``CsrfViewMiddleware`` will prefer the cookie to the token in the DOM. Regardless, you're guaranteed to have the cookie if the token is present in the DOM, so you should use the cookie!"
msgstr ""

#: ../../ref/contrib/csrf.txt:139
# 2e391eae150d49d8afaea7547e9ba596
msgid "If your view is not rendering a template containing the :ttag:`csrf_token` template tag, Django might not set the CSRF token cookie. This is common in cases where forms are dynamically added to the page. To address this case, Django provides a view decorator which forces setting of the cookie: :func:`~django.views.decorators.csrf.ensure_csrf_cookie`."
msgstr ""

#: ../../ref/contrib/csrf.txt:145
# fa3511e4997a495e864dcc426b1dfc1b
msgid "Finally, you'll have to actually set the header on your AJAX request, while protecting the CSRF token from being sent to other domains."
msgstr ""

#: ../../ref/contrib/csrf.txt:180
# b85f326c936d4bd89db2c75728482081
msgid "Due to a bug introduced in jQuery 1.5, the example above will not work correctly on that version. Make sure you are running at least jQuery 1.5.1."
msgstr ""

#: ../../ref/contrib/csrf.txt:183
# cc5ea1e60ddb485baebb23619847656a
msgid "You can use `settings.crossDomain <http://api.jquery.com/jQuery.ajax>`_ in jQuery 1.5 and newer in order to replace the ``sameOrigin`` logic above:"
msgstr ""

#: ../../ref/contrib/csrf.txt:203
# 2c5de70e70e84b03b1c257b3767c5cc5
msgid "In a `security release blogpost`_, a simpler \"same origin test\" example was provided which only checked for a relative URL. The ``sameOrigin`` test above supersedes that example—it works for edge cases like scheme-relative or absolute URLs for the same domain."
msgstr ""

#: ../../ref/contrib/csrf.txt:211
# 66ac59b49e0045b0bcde66f3eaf0db13
msgid "Other template engines"
msgstr ""

#: ../../ref/contrib/csrf.txt:213
# 8c97e518a32148f694624db358192c0e
msgid "When using a different template engine than Django's built-in engine, you can set the token in your forms manually after making sure it's available in the template context."
msgstr ""

#: ../../ref/contrib/csrf.txt:217
# 9f0fd8118cb64328b98a8c88f4335cee
msgid "For example, in the Cheetah template language, your form could contain the following:"
msgstr ""

#: ../../ref/contrib/csrf.txt:226
# 1c38ff79fe1148f497992489189e78f3
msgid "You can use JavaScript similar to the :ref:`AJAX code <csrf-ajax>` above to get the value of the CSRF token."
msgstr ""

#: ../../ref/contrib/csrf.txt:230
# daaebd1b5c3341debb24f21246bf55b5
msgid "The decorator method"
msgstr ""

#: ../../ref/contrib/csrf.txt:234
# f5d1042e7dea49cda560e6be331aaae0
msgid "Rather than adding ``CsrfViewMiddleware`` as a blanket protection, you can use the ``csrf_protect`` decorator, which has exactly the same functionality, on particular views that need the protection. It must be used **both** on views that insert the CSRF token in the output, and on those that accept the POST form data. (These are often the same view function, but not always)."
msgstr ""

#: ../../ref/contrib/csrf.txt:240
# 79f93610bea1402bbd658cd4b048ca69
msgid "Use of the decorator by itself is **not recommended**, since if you forget to use it, you will have a security hole. The 'belt and braces' strategy of using both is fine, and will incur minimal overhead."
msgstr ""

#: ../../ref/contrib/csrf.txt:246
# e72ffaed303149f88551aef42261aab1
msgid "Decorator that provides the protection of ``CsrfViewMiddleware`` to a view."
msgstr ""

#: ../../ref/contrib/csrf.txt:248
#: ../../ref/contrib/webdesign.txt:32
# db3e25a926fe4bd884fa26fc47821ac4
# 7672e818c6874ca7bd83f0b39b04bb3c
msgid "Usage::"
msgstr ""

#: ../../ref/contrib/csrf.txt:260
# bd28c8f818c24da78a8b08ecb2118994
msgid "Rejected requests"
msgstr ""

#: ../../ref/contrib/csrf.txt:262
# 60b7ff4642184225a3adb41fccd3e64b
msgid "By default, a '403 Forbidden' response is sent to the user if an incoming request fails the checks performed by ``CsrfViewMiddleware``.  This should usually only be seen when there is a genuine Cross Site Request Forgery, or when, due to a programming error, the CSRF token has not been included with a POST form."
msgstr ""

#: ../../ref/contrib/csrf.txt:268
# a1999f90a8de46c28511823b09bb809f
msgid "The error page, however, is not very friendly, so you may want to provide your own view for handling this condition.  To do this, simply set the :setting:`CSRF_FAILURE_VIEW` setting."
msgstr ""

#: ../../ref/contrib/csrf.txt:275
#: ../../ref/contrib/flatpages.txt:63
#: ../../ref/contrib/formtools/form-wizard.txt:23
#: ../../ref/contrib/redirects.txt:24
# 8c2a17b579714151a48f261284374c5d
# afd4baf5b8de4d7a8662e312afd7b3db
# f6f958de03c04350b72e4175596d8117
# fb52852a8eec44a79aaa0aca19f29477
msgid "How it works"
msgstr ""

#: ../../ref/contrib/csrf.txt:277
# 0e9363e3f3b84e09b5fe5ebc1bbc8883
msgid "The CSRF protection is based on the following things:"
msgstr ""

#: ../../ref/contrib/csrf.txt:279
# 03211756e9054411b70d2d4960652751
msgid "A CSRF cookie that is set to a random value (a session independent nonce, as it is called), which other sites will not have access to."
msgstr ""

#: ../../ref/contrib/csrf.txt:282
# cee83b58fce345e3ab2fd037488619b8
msgid "This cookie is set by ``CsrfViewMiddleware``.  It is meant to be permanent, but since there is no way to set a cookie that never expires, it is sent with every response that has called ``django.middleware.csrf.get_token()`` (the function used internally to retrieve the CSRF token)."
msgstr ""

#: ../../ref/contrib/csrf.txt:287
# 4071675941ad4365ba69fff97020039e
msgid "A hidden form field with the name 'csrfmiddlewaretoken' present in all outgoing POST forms.  The value of this field is the value of the CSRF cookie."
msgstr ""

#: ../../ref/contrib/csrf.txt:291
# 6f2bf75fcfce4bb797a6c49e699ebe94
msgid "This part is done by the template tag."
msgstr ""

#: ../../ref/contrib/csrf.txt:293
# ded3f754276b425595642a98b2c16c9b
msgid "For all incoming requests that are not using HTTP GET, HEAD, OPTIONS or TRACE, a CSRF cookie must be present, and the 'csrfmiddlewaretoken' field must be present and correct. If it isn't, the user will get a 403 error."
msgstr ""

#: ../../ref/contrib/csrf.txt:297
# 09582c88cf244f55bd54e74e3cc03bdf
msgid "This check is done by ``CsrfViewMiddleware``."
msgstr ""

#: ../../ref/contrib/csrf.txt:299
# 2ede0e80ab6f463caaf44426200ee4c3
msgid "In addition, for HTTPS requests, strict referer checking is done by ``CsrfViewMiddleware``.  This is necessary to address a Man-In-The-Middle attack that is possible under HTTPS when using a session independent nonce, due to the fact that HTTP 'Set-Cookie' headers are (unfortunately) accepted by clients that are talking to a site under HTTPS.  (Referer checking is not done for HTTP requests because the presence of the Referer header is not reliable enough under HTTP.)"
msgstr ""

#: ../../ref/contrib/csrf.txt:307
# cde7964dc36b432caa1bd4ba692bdc10
msgid "This ensures that only forms that have originated from your Web site can be used to POST data back."
msgstr ""

#: ../../ref/contrib/csrf.txt:310
# da0ee970a4c34662818216682c021c1a
msgid "It deliberately ignores GET requests (and other requests that are defined as 'safe' by :rfc:`2616`). These requests ought never to have any potentially dangerous side effects , and so a CSRF attack with a GET request ought to be harmless. :rfc:`2616` defines POST, PUT and DELETE as 'unsafe', and all other methods are assumed to be unsafe, for maximum protection."
msgstr ""

#: ../../ref/contrib/csrf.txt:317
# 35b3a2e734934f68b57dbbf4ebffc112
msgid "Caching"
msgstr ""

#: ../../ref/contrib/csrf.txt:319
# af1f38d8c135482fa375498d734fe652
msgid "If the :ttag:`csrf_token` template tag is used by a template (or the ``get_token`` function is called some other way), ``CsrfViewMiddleware`` will add a cookie and a ``Vary: Cookie`` header to the response. This means that the middleware will play well with the cache middleware if it is used as instructed (``UpdateCacheMiddleware`` goes before all other middleware)."
msgstr ""

#: ../../ref/contrib/csrf.txt:325
# bd9b85de2af34e2d85ac33bfec2293a5
msgid "However, if you use cache decorators on individual views, the CSRF middleware will not yet have been able to set the Vary header or the CSRF cookie, and the response will be cached without either one. In this case, on any views that will require a CSRF token to be inserted you should use the :func:`django.views.decorators.csrf.csrf_protect` decorator first::"
msgstr ""

#: ../../ref/contrib/csrf.txt:341
# b6f0107eaa1c49e09a18c4e494fc5c53
msgid "Testing"
msgstr ""

#: ../../ref/contrib/csrf.txt:343
# 1e82e86e3d9d4fde90b2292e77a67b6b
msgid "The ``CsrfViewMiddleware`` will usually be a big hindrance to testing view functions, due to the need for the CSRF token which must be sent with every POST request.  For this reason, Django's HTTP client for tests has been modified to set a flag on requests which relaxes the middleware and the ``csrf_protect`` decorator so that they no longer rejects requests.  In every other respect (e.g. sending cookies etc.), they behave the same."
msgstr ""

#: ../../ref/contrib/csrf.txt:350
# a6a79febf22a4885be6f4306f564a149
msgid "If, for some reason, you *want* the test client to perform CSRF checks, you can create an instance of the test client that enforces CSRF checks::"
msgstr ""

#: ../../ref/contrib/csrf.txt:362
# 090354fb8d6846628f948fdef5312aeb
msgid "Subdomains within a site will be able to set cookies on the client for the whole domain.  By setting the cookie and using a corresponding token, subdomains will be able to circumvent the CSRF protection.  The only way to avoid this is to ensure that subdomains are controlled by trusted users (or, are at least unable to set cookies).  Note that even without CSRF, there are other vulnerabilities, such as session fixation, that make giving subdomains to untrusted parties a bad idea, and these vulnerabilities cannot easily be fixed with current browsers."
msgstr ""

#: ../../ref/contrib/csrf.txt:371
# d1bbeae094644011936ec7876769cd51
msgid "Edge cases"
msgstr ""

#: ../../ref/contrib/csrf.txt:373
# 39f98fe3757943958d025b678c163978
msgid "Certain views can have unusual requirements that mean they don't fit the normal pattern envisaged here. A number of utilities can be useful in these situations. The scenarios they might be needed in are described in the following section."
msgstr ""

#: ../../ref/contrib/csrf.txt:379
# e616458cd4664787b17ef73d9b1fd43b
msgid "Utilities"
msgstr ""

#: ../../ref/contrib/csrf.txt:383
# 9f5cc581d26941b1a441038f2faa665a
msgid "This decorator marks a view as being exempt from the protection ensured by the middleware. Example::"
msgstr ""

#: ../../ref/contrib/csrf.txt:394
# 1354977140c04fce9bc3822ccccd0af6
msgid "Normally the :ttag:`csrf_token` template tag will not work if ``CsrfViewMiddleware.process_view`` or an equivalent like ``csrf_protect`` has not run. The view decorator ``requires_csrf_token`` can be used to ensure the template tag does work. This decorator works similarly to ``csrf_protect``, but never rejects an incoming request."
msgstr ""

#: ../../ref/contrib/csrf.txt:415
# 661ef950f2e842eca6497cfc3b87dd75
msgid "This decorator forces a view to send the CSRF cookie."
msgstr ""

#: ../../ref/contrib/csrf.txt:418
# 81ccbea3557d4f9b8485b4707f44fc60
msgid "Scenarios"
msgstr ""

#: ../../ref/contrib/csrf.txt:421
# 2c9abdcf1a18405fb071c825a1f5c527
msgid "CSRF protection should be disabled for just a few views"
msgstr ""

#: ../../ref/contrib/csrf.txt:423
# 8a2f8113d27a4ad8ad20c40b172ac669
msgid "Most views requires CSRF protection, but a few do not."
msgstr ""

#: ../../ref/contrib/csrf.txt:425
# 7d561888871949908424449d3bbfc3f1
msgid "Solution: rather than disabling the middleware and applying ``csrf_protect`` to all the views that need it, enable the middleware and use :func:`~django.views.decorators.csrf.csrf_exempt`."
msgstr ""

#: ../../ref/contrib/csrf.txt:430
# fe2567001e6c468585dc7a20d6d203cd
msgid "CsrfViewMiddleware.process_view not used"
msgstr ""

#: ../../ref/contrib/csrf.txt:432
# 6e309598f87b431790d183cfc15abbf7
msgid "There are cases when ``CsrfViewMiddleware.process_view`` may not have run before your view is run - 404 and 500 handlers, for example - but you still need the CSRF token in a form."
msgstr ""

#: ../../ref/contrib/csrf.txt:436
# 8d881e99fdc4468e887d5686d3e5513e
msgid "Solution: use :func:`~django.views.decorators.csrf.requires_csrf_token`"
msgstr ""

#: ../../ref/contrib/csrf.txt:439
# 66967ac4ab0e45dfa62ea3ca6d5ef721
msgid "Unprotected view needs the CSRF token"
msgstr ""

#: ../../ref/contrib/csrf.txt:441
# ef6679d432d744049eb1666c0e386758
msgid "There may be some views that are unprotected and have been exempted by ``csrf_exempt``, but still need to include the CSRF token."
msgstr ""

#: ../../ref/contrib/csrf.txt:444
# cd4dcddc24744f25b62ae850f8dd65c3
msgid "Solution: use :func:`~django.views.decorators.csrf.csrf_exempt` followed by :func:`~django.views.decorators.csrf.requires_csrf_token`. (i.e. ``requires_csrf_token`` should be the innermost decorator)."
msgstr ""

#: ../../ref/contrib/csrf.txt:449
# 634333e4420f4ce9a081a3f0e83b1b53
msgid "View needs protection for one path"
msgstr ""

#: ../../ref/contrib/csrf.txt:451
# 686ea4b149de4d0abb78da455b1840d7
msgid "A view needs CRSF protection under one set of conditions only, and mustn't have it for the rest of the time."
msgstr ""

#: ../../ref/contrib/csrf.txt:454
# 81fcfcc9fa53470d8ee77bade8581781
msgid "Solution: use :func:`~django.views.decorators.csrf.csrf_exempt` for the whole view function, and :func:`~django.views.decorators.csrf.csrf_protect` for the path within it that needs protection. Example::"
msgstr ""

#: ../../ref/contrib/csrf.txt:473
# 3ac4a39173a34911a9d223aa108702ee
msgid "Page uses AJAX without any HTML form"
msgstr ""

#: ../../ref/contrib/csrf.txt:475
# bee0715b6bb64477b28e064b1f6169f9
msgid "A page makes a POST request via AJAX, and the page does not have an HTML form with a :ttag:`csrf_token` that would cause the required CSRF cookie to be sent."
msgstr ""

#: ../../ref/contrib/csrf.txt:478
# 9e2e5668434f42c4ac6e0c819c16dae6
msgid "Solution: use :func:`~django.views.decorators.csrf.ensure_csrf_cookie` on the view that sends the page."
msgstr ""

#: ../../ref/contrib/csrf.txt:482
# 33038fe79e344778bb97ec32588b2e0c
msgid "Contrib and reusable apps"
msgstr ""

#: ../../ref/contrib/csrf.txt:484
# c079343419314484bfe51ea0aefc7290
msgid "Because it is possible for the developer to turn off the ``CsrfViewMiddleware``, all relevant views in contrib apps use the ``csrf_protect`` decorator to ensure the security of these applications against CSRF.  It is recommended that the developers of other reusable apps that want the same guarantees also use the ``csrf_protect`` decorator on their views."
msgstr ""

#: ../../ref/contrib/csrf.txt:491
#: ../../ref/contrib/gis/gdal.txt:1087
#: ../../ref/contrib/gis/geos.txt:953
#: ../../ref/contrib/gis/testing.txt:14
#: ../../ref/contrib/gis/testing.txt:115
#: ../../ref/contrib/messages.txt:317
#: ../../ref/contrib/staticfiles.txt:21
#: ../../ref/settings.txt:3
# 9d311d05d2194bf4b68304df224d1923
# 82233fff91024d58a5a0dc8ef12045cf
# 430dc27bbf884c0990ee9a0b04d95ecb
# 044c5d3072d247fc93e5e571cccf8911
# 4592f699ea7e4b88b4eb33bf47aa3efa
# 3fa213f326e44d5382233b936e6c6dc5
# c19919f8cc7e4ebb9e7151cedfb9ef8d
# a0cd75b8462c4e718df9d26aec904d99
msgid "Settings"
msgstr ""

#: ../../ref/contrib/csrf.txt:493
# 540b990b216d473da17228aa5846b701
msgid "A number of settings can be used to control Django's CSRF behavior."
msgstr ""

#: ../../ref/contrib/csrf.txt:496
#: ../../ref/settings.txt:335
# 0fad4410b5f54fa48613e66955312482
# 37ea54d9958e4711a6e71bb4e3e8a6e9
msgid "CSRF_COOKIE_DOMAIN"
msgstr ""

#: ../../ref/contrib/csrf.txt:498
#: ../../ref/contrib/messages.txt:388
#: ../../ref/settings.txt:337
#: ../../ref/settings.txt:535
#: ../../ref/settings.txt:552
#: ../../ref/settings.txt:578
#: ../../ref/settings.txt:593
#: ../../ref/settings.txt:620
#: ../../ref/settings.txt:644
#: ../../ref/settings.txt:656
#: ../../ref/settings.txt:668
#: ../../ref/settings.txt:1061
#: ../../ref/settings.txt:1087
#: ../../ref/settings.txt:1129
#: ../../ref/settings.txt:1141
#: ../../ref/settings.txt:1614
#: ../../ref/settings.txt:1720
#: ../../ref/settings.txt:1827
#: ../../ref/settings.txt:1936
#: ../../ref/settings.txt:2255
# 0cb47be6c55747899d45f63db41c59ba
# 2bb67478ae4a4b509a828fa7c23e2fa1
# 13b4ea29b1a04d6bad55ec9d447d022c
# 3112802d7e844847a89dfa73b9fcc341
# 9800e8918632447fa431cb1985ae043a
# 29cb9e431a034fcca1f0e2285049fd3a
# 90c144b84138489daabed7b6747da472
# 26c33863d8d3466eb70ea52b72b29a10
# 0ba4dc872b73440c96644cdd11d673a4
# 9d904ed394ce4b7383162c87b78294d4
# 7c42cee17bc54490a44f20cbfad59c14
# 81b6f00b5ffc489d93ece4035205755b
# 6001675072b14e19be07bc7b4f4531e6
# b3a0a8342f8f4b2790964413a070238d
# 3bf6a3e098324b7bb34e7280dccb12dd
# a6ac43f043184293bfcab1008a3f0eaf
# f483b1a6d594434383d4d47c86e3f631
# 083a48087b9b40668b903f182dac0e74
# 00111ac0ce9647e587d721bf9384f837
# 367d82c080c14d3e8a7d2f471d6202ab
msgid "Default: ``None``"
msgstr ""

#: ../../ref/contrib/csrf.txt:500
# 53b97d48794c4db0b95ded68f8e0ac2f
msgid "The domain to be used when setting the CSRF cookie.  This can be useful for easily allowing cross-subdomain requests to be excluded from the normal cross site request forgery protection.  It should be set to a string such as ``\".example.com\"`` to allow a POST request from a form on one subdomain to be accepted by a view served from another subdomain."
msgstr ""

#: ../../ref/contrib/csrf.txt:506
# d0d67987506c4a46a7bd6881a9db6a63
msgid "Please note that, with or without use of this setting, this CSRF protection mechanism is not safe against cross-subdomain attacks -- see `Limitations`_."
msgstr ""

#: ../../ref/contrib/csrf.txt:510
#: ../../ref/settings.txt:352
# ccd8e66806df482ca7bb684d6a8c2ec6
# 4a615cc71b8448caa7d82d22a362d74f
msgid "CSRF_COOKIE_NAME"
msgstr ""

#: ../../ref/contrib/csrf.txt:512
#: ../../ref/settings.txt:354
# 0295f483cf0044b39b546008d0cc3cf2
# 45ca32f3768143d6b358c020cdf56db6
msgid "Default: ``'csrftoken'``"
msgstr ""

#: ../../ref/contrib/csrf.txt:514
# 87b3788c18b54615aa979a023fd83894
msgid "The name of the cookie to use for the CSRF authentication token. This can be whatever you want."
msgstr ""

#: ../../ref/contrib/csrf.txt:518
#: ../../ref/settings.txt:362
# 833b1dee2b9d445794e7148e0366d5aa
# da4c6a4df9bf4a92b84977d08adbbcb1
msgid "CSRF_COOKIE_PATH"
msgstr ""

#: ../../ref/contrib/csrf.txt:522
#: ../../ref/settings.txt:366
#: ../../ref/settings.txt:1764
# efdf764dbad14ebaa443fc4f8058b429
# 5a76c720e2a548268ef09f634a92a1b1
# 7e7b6f03a4cb42eeab727fa019609f8e
msgid "Default: ``'/'``"
msgstr ""

#: ../../ref/contrib/csrf.txt:524
#: ../../ref/settings.txt:368
# 024e0583a7674cd786318690be122fa8
# 77e224123c524e9cb0468eeb0a51683c
msgid "The path set on the CSRF cookie. This should either match the URL path of your Django installation or be a parent of that path."
msgstr ""

#: ../../ref/contrib/csrf.txt:527
#: ../../ref/settings.txt:371
# 765070c010cb473492bb72ced9a3a82a
# a2801d5aaf76483fb6ca0f7a54473f66
msgid "This is useful if you have multiple Django instances running under the same hostname. They can use different cookie paths, and each instance will only see its own CSRF cookie."
msgstr ""

#: ../../ref/contrib/csrf.txt:532
#: ../../ref/settings.txt:378
# 6a5da21e09094ef6b6f98d5ff3a82930
# b31687a7e3c64352b847993df9cd6196
msgid "CSRF_COOKIE_SECURE"
msgstr ""

#: ../../ref/contrib/csrf.txt:536
#: ../../ref/settings.txt:298
#: ../../ref/settings.txt:382
#: ../../ref/settings.txt:782
#: ../../ref/settings.txt:831
#: ../../ref/settings.txt:1020
#: ../../ref/settings.txt:1540
#: ../../ref/settings.txt:1675
#: ../../ref/settings.txt:1788
#: ../../ref/settings.txt:1817
#: ../../ref/settings.txt:1839
#: ../../ref/settings.txt:1978
#: ../../ref/settings.txt:2152
#: ../../ref/settings.txt:2162
#: ../../ref/settings.txt:2188
#: ../../ref/settings.txt:2206
#: ../../ref/settings.txt:2223
#: ../../ref/settings.txt:2242
# 2331bed4110c4e0caaea8cd72731d3be
# c7b252c0f8934f2fbab720f088c6e67e
# 623a031aee7c4a8b85b8e4743e183a80
# daa1563b163343b2915241c92cf181dc
# eb086b7afcef4ec3ab1f074ec29a2484
# ba11781f36f942f487336dbf738787d1
# bd063ee6fb444cae9f18bb49c1a20638
# 6ef83ae273e94972b45347a636eff4f4
# 7a95bb09313b4167bd57ca684554081d
# 3061bf818245472ba51c85bbdbf7649f
# 0ad3f5088f64484abe317d0d17c52219
# 31fa0472db02455a9e3aa396c1439944
# b6dcb63a448a47bda12b9c7cec784c63
# 8d3ecd93e7a44e8aa0f324691890322e
# 7246f21f4b4b4a49b644c59f7ec5e913
# 202b055969054ae487c23ce30dadf078
# 0bcf355c33c64bada67d77ce85be1143
# a0bc633ab05d43aa89075b7d27a4c7bb
msgid "Default: ``False``"
msgstr ""

#: ../../ref/contrib/csrf.txt:538
#: ../../ref/settings.txt:384
# 189c7c874bf84e01afa981718ed7341b
# bd8dd94e4f5e48f590f6394388c32c97
msgid "Whether to use a secure cookie for the CSRF cookie. If this is set to ``True``, the cookie will be marked as \"secure,\" which means browsers may ensure that the cookie is only sent under an HTTPS connection."
msgstr ""

#: ../../ref/contrib/csrf.txt:543
#: ../../ref/settings.txt:391
# 812135b28a0246d19ffe8f1224b4ad12
# 1ca34eaab3b544eabaed563da50e55b5
msgid "CSRF_FAILURE_VIEW"
msgstr ""

#: ../../ref/contrib/csrf.txt:545
#: ../../ref/settings.txt:393
# d4f3d3a4cc054b049b1fd8b070bd8b97
# bd4331b9256249b9a618c8ece1516638
msgid "Default: ``'django.views.csrf.csrf_failure'``"
msgstr ""

#: ../../ref/contrib/csrf.txt:547
#: ../../ref/settings.txt:395
# 94c4d2244d5245d0bc82ec914064222d
# 80be980bfb46449e92ad4fe0cd3b5b44
msgid "A dotted path to the view function to be used when an incoming request is rejected by the CSRF protection.  The function should have this signature::"
msgstr ""

#: ../../ref/contrib/csrf.txt:552
# cd38518c749847d197b0c57b1c7d68d1
msgid "where ``reason`` is a short message (intended for developers or logging, not for end users) indicating the reason the request was rejected."
msgstr ""

#: ../../ref/contrib/databrowse.txt:3
# f7398292cef44bbd82bc93007b425751
msgid "Databrowse"
msgstr ""

#: ../../ref/contrib/databrowse.txt:11
# 3812fb2bf91d4b0b82d86b13f11a86cc
msgid "Databrowse is a Django application that lets you browse your data."
msgstr ""

#: ../../ref/contrib/databrowse.txt:13
# 07b760ca9fd6400289c1c04bb8f55133
msgid "As the Django admin dynamically creates an admin interface by introspecting your models, Databrowse dynamically creates a rich, browsable Web site by introspecting your models."
msgstr ""

#: ../../ref/contrib/databrowse.txt:18
# 813513fdc77d49bba71fcca51c0b065b
msgid "How to use Databrowse"
msgstr ""

#: ../../ref/contrib/databrowse.txt:20
# bfb6e7b52d394a2891cfdc59825d4e76
msgid "Point Django at the default Databrowse templates. There are two ways to do this:"
msgstr ""

#: ../../ref/contrib/databrowse.txt:23
# b9e7daa58cac42779f2de63d011ba638
msgid "Add ``'django.contrib.databrowse'`` to your :setting:`INSTALLED_APPS` setting. This will work if your :setting:`TEMPLATE_LOADERS` setting includes the ``app_directories`` template loader (which is the case by default). See the :ref:`template loader docs <template-loaders>` for more."
msgstr ""

#: ../../ref/contrib/databrowse.txt:29
# b58d0d6d91704dc0a53b926567ee679c
msgid "Otherwise, determine the full filesystem path to the :file:`django/contrib/databrowse/templates` directory, and add that directory to your :setting:`TEMPLATE_DIRS` setting."
msgstr ""

#: ../../ref/contrib/databrowse.txt:33
# cadbe1de5cb44790812e7bfd2458e70d
msgid "Register a number of models with the Databrowse site::"
msgstr ""

#: ../../ref/contrib/databrowse.txt:41
# 27c197ce44fc446ab7e9e0bafa43f31b
msgid "Note that you should register the model *classes*, not instances."
msgstr ""

#: ../../ref/contrib/databrowse.txt:45
# 0c5ed752956e4479ba9b8729f2386cd1
msgid "Since Django 1.4, it is possible to register several models in the same call to ``databrowse.site.register()``."
msgstr ""

#: ../../ref/contrib/databrowse.txt:48
# 9e1a42b421f741bfaaf0eb29030cb374
msgid "It doesn't matter where you put this, as long as it gets executed at some point. A good place for it is in your :doc:`URLconf file </topics/http/urls>` (``urls.py``)."
msgstr ""

#: ../../ref/contrib/databrowse.txt:52
# 3c29d2c5efb549b08f92adebaeba5787
msgid "Change your URLconf to import the :mod:`~django.contrib.databrowse` module::"
msgstr ""

#: ../../ref/contrib/databrowse.txt:56
# abaaceb0c34648358c0626cfee2660a8
msgid "...and add the following line to your URLconf::"
msgstr ""

#: ../../ref/contrib/databrowse.txt:60
# 86c2e9db934643d9acde9e2c5f163a91
msgid "The prefix doesn't matter -- you can use ``databrowse/`` or ``db/`` or whatever you'd like."
msgstr ""

#: ../../ref/contrib/databrowse.txt:63
# 7de16fedefbf4727bf7fc926b726f33d
msgid "Run the Django server and visit ``/databrowse/`` in your browser."
msgstr ""

#: ../../ref/contrib/databrowse.txt:66
# c62ce6701ede42f287fe23787862020d
msgid "Requiring user login"
msgstr ""

#: ../../ref/contrib/databrowse.txt:68
# 23c717723e304144bf58c26cf5f74e10
msgid "You can restrict access to logged-in users with only a few extra lines of code. Simply add the following import to your URLconf::"
msgstr ""

#: ../../ref/contrib/databrowse.txt:73
# dd1141dcb6594f15b2dbf89a8ea93442
msgid "Then modify the :doc:`URLconf </topics/http/urls>` so that the ``databrowse.site.root()`` view is decorated with :func:`django.contrib.auth.decorators.login_required`::"
msgstr ""

#: ../../ref/contrib/databrowse.txt:79
# 65d4ac723bb14262bb28028d6aa88919
msgid "If you haven't already added support for user logins to your :doc:`URLconf </topics/http/urls>`, as described in the :doc:`user authentication docs </ref/contrib/auth>`, then you will need to do so now with the following mapping::"
msgstr ""

#: ../../ref/contrib/databrowse.txt:86
# c271ddbb9c9049cc8fe62c54b9dcf0dd
msgid "The final step is to create the login form required by :func:`django.contrib.auth.views.login`. The :doc:`user authentication docs </ref/contrib/auth>` provide full details and a sample template that can be used for this purpose."
msgstr ""

#: ../../ref/contrib/flatpages.txt:3
# 778cca38e2e5473fafdcada1cfa1b8b7
msgid "The flatpages app"
msgstr ""

#: ../../ref/contrib/flatpages.txt:8
# 115cc3d14f19466fb55527992fac125e
msgid "Django comes with an optional \"flatpages\" application. It lets you store simple \"flat\" HTML content in a database and handles the management for you via Django's admin interface and a Python API."
msgstr ""

#: ../../ref/contrib/flatpages.txt:12
# eb64941947914a258835cefc1f6ed4ee
msgid "A flatpage is a simple object with a URL, title and content. Use it for one-off, special-case pages, such as \"About\" or \"Privacy Policy\" pages, that you want to store in a database but for which you don't want to develop a custom Django application."
msgstr ""

#: ../../ref/contrib/flatpages.txt:17
# fa3ca24c761f49028478321a0ebb6e86
msgid "A flatpage can use a custom template or a default, systemwide flatpage template. It can be associated with one, or multiple, sites."
msgstr ""

#: ../../ref/contrib/flatpages.txt:20
# a1ade213ca1e448c90176d0dfdfafcb7
msgid "The content field may optionally be left blank if you prefer to put your content in a custom template."
msgstr ""

#: ../../ref/contrib/flatpages.txt:23
# 239b1e8c5206494d963597ee56b749f3
msgid "Here are some examples of flatpages on Django-powered sites:"
msgstr ""

#: ../../ref/contrib/flatpages.txt:25
# bb90429532c8430eb432c1b0dd43e0eb
msgid "http://www.lawrence.com/about/contact/"
msgstr ""

#: ../../ref/contrib/flatpages.txt:26
# ec2c774ed6394b80855e5cb0515b1011
msgid "http://www2.ljworld.com/site/rules/"
msgstr ""

#: ../../ref/contrib/flatpages.txt:29
#: ../../ref/contrib/gis/install/index.txt:76
#: ../../ref/contrib/redirects.txt:12
#: ../../ref/contrib/sitemaps.txt:30
# 2a118477661148dab1258d828b0bbc36
# 97c7047a086f4929989f0193947e64a0
# e795fbb758544faa9c83e6f418138f5b
# 207fbc1373bf4675b899685849a406d5
msgid "Installation"
msgstr ""

#: ../../ref/contrib/flatpages.txt:31
# ea8e0592572d4930bac5efab118b2c3f
msgid "To install the flatpages app, follow these steps:"
msgstr ""

#: ../../ref/contrib/flatpages.txt:33
# 4715bcacf30c478685b00401df33480f
msgid "Install the :mod:`sites framework <django.contrib.sites>` by adding ``'django.contrib.sites'`` to your :setting:`INSTALLED_APPS` setting, if it's not already in there."
msgstr ""

#: ../../ref/contrib/flatpages.txt:37
# 74587a16ec56471b96a4df16a6cc3226
msgid "Also make sure you've correctly set :setting:`SITE_ID` to the ID of the site the settings file represents. This will usually be ``1`` (i.e. ``SITE_ID = 1``, but if you're using the sites framework to manage multiple sites, it could be the ID of a different site."
msgstr ""

#: ../../ref/contrib/flatpages.txt:42
# 9e16f684e47643779d4c7f278e5a8ca2
msgid "Add ``'django.contrib.flatpages'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../ref/contrib/flatpages.txt:45
# 483dd552fc0c43018ebdb0e413718d9c
msgid "Then either:"
msgstr ""

#: ../../ref/contrib/flatpages.txt:47
# 7716f408fb114285a623c8edf7f948ec
msgid "Add an entry in your URLconf. For example::"
msgstr ""

#: ../../ref/contrib/flatpages.txt:53
# b78066c0b4ab4291a2f797db7b8b6958
msgid "or:"
msgstr ""

#: ../../ref/contrib/flatpages.txt:55
# d935738e36e2474f957df985b286067b
msgid "Add ``'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware'`` to your :setting:`MIDDLEWARE_CLASSES` setting."
msgstr ""

#: ../../ref/contrib/flatpages.txt:58
#: ../../ref/contrib/redirects.txt:21
# 4e3268c9897a4cdca1fd79152e392eaf
# c10ca562efb6479bbdb7918f10528392
msgid "Run the command :djadmin:`manage.py syncdb <syncdb>`."
msgstr ""

#: ../../ref/contrib/flatpages.txt:65
# cc1f02dc94b7411b9dad0c7916e92dd0
msgid "``manage.py syncdb`` creates two tables in your database: ``django_flatpage`` and ``django_flatpage_sites``. ``django_flatpage`` is a simple lookup table that simply maps a URL to a title and bunch of text content. ``django_flatpage_sites`` associates a flatpage with a site."
msgstr ""

#: ../../ref/contrib/flatpages.txt:71
# 31ded18ff1ca49d392d755df1bb39e0a
msgid "Using the URLconf"
msgstr ""

#: ../../ref/contrib/flatpages.txt:73
# ca664281de744140933b3d250511acf2
msgid "There are several ways to include the flat pages in your URLconf. You can dedicate a particular path to flat pages::"
msgstr ""

#: ../../ref/contrib/flatpages.txt:80
# f5c4f4141a204434985bc5b517db0445
msgid "You can also set it up as a \"catchall\" pattern. In this case, it is important to place the pattern at the end of the other urlpatterns::"
msgstr ""

#: ../../ref/contrib/flatpages.txt:88
# fe2618f277c94174ba1bc6f7df4c2fc5
msgid "Another common setup is to use flat pages for a limited set of known pages and to hard code the urls, so you can reference them with the :ttag:`url` template tag::"
msgstr ""

#: ../../ref/contrib/flatpages.txt:98
# cec3d4032923472699473695711be031
msgid "Using the middleware"
msgstr ""

#: ../../ref/contrib/flatpages.txt:100
# e9e165bc91e94dbe9801d9b920425137
msgid "The :class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` can do all of the work."
msgstr ""

#: ../../ref/contrib/flatpages.txt:105
# 89d3a6fb6be449d29555bf1db42c812c
msgid "Each time any Django application raises a 404 error, this middleware checks the flatpages database for the requested URL as a last resort. Specifically, it checks for a flatpage with the given URL with a site ID that corresponds to the :setting:`SITE_ID` setting."
msgstr ""

#: ../../ref/contrib/flatpages.txt:110
# 31f6443e572a40bc86fbe22ca10dc6f9
msgid "If it finds a match, it follows this algorithm:"
msgstr ""

#: ../../ref/contrib/flatpages.txt:112
# 25a9fae13fd544909fd8b1090129b827
msgid "If the flatpage has a custom template, it loads that template. Otherwise, it loads the template :file:`flatpages/default.html`."
msgstr ""

#: ../../ref/contrib/flatpages.txt:115
# ce3df8ee6f3c410caab52b8fd0d4e0cf
msgid "It passes that template a single context variable, ``flatpage``, which is the flatpage object. It uses :class:`~django.template.RequestContext` in rendering the template."
msgstr ""

#: ../../ref/contrib/flatpages.txt:132
#: ../../ref/contrib/redirects.txt:39
# 34e131bcd6cd4fa8ad2ad08d63e5ac99
# c2c7b0a53b0145d395f16d59ed04851e
msgid "If it doesn't find a match, the request continues to be processed as usual."
msgstr ""

#: ../../ref/contrib/flatpages.txt:134
#: ../../ref/contrib/redirects.txt:42
# 8a6b5b78a6554c099a3f8c6c06b08ae4
# d0ef81e9cfed435693772538843a6eb3
msgid "The middleware only gets activated for 404s -- not for 500s or responses of any other status code."
msgstr ""

#: ../../ref/contrib/flatpages.txt:139
# 74e7111e707145efac1067415f95014b
msgid "Because the ``FlatpageFallbackMiddleware`` is applied only after URL resolution has failed and produced a 404, the response it returns will not apply any :ref:`view middleware <view-middleware>` methods. Only requests which are successfully routed to a view via normal URL resolution apply view middleware."
msgstr ""

#: ../../ref/contrib/flatpages.txt:145
# a0dd4a1e72074910a20ef1e2cecbb00f
msgid "Note that the order of :setting:`MIDDLEWARE_CLASSES` matters. Generally, you can put :class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` at the end of the list. This means it will run first when processing the response, and ensures that any other response-processing middlewares see the real flatpage response rather than the 404."
msgstr ""

#: ../../ref/contrib/flatpages.txt:152
#: ../../ref/contrib/redirects.txt:49
# 05e62c0e1acd459caf3ed967002f8674
# fce4693711f14ab2abf6ee534fce86ca
msgid "For more on middleware, read the :doc:`middleware docs </topics/http/middleware>`."
msgstr ""

#: ../../ref/contrib/flatpages.txt:157
# 04b7e32b2b204202b60e49766c4e3f65
msgid "Note that the :class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` only steps in once another view has successfully produced a 404 response. If another view or middleware class attempts to produce a 404 but ends up raising an exception instead, the response will become an HTTP 500 (\"Internal Server Error\") and the :class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` will not attempt to serve a flat page."
msgstr ""

#: ../../ref/contrib/flatpages.txt:169
# 5f02e3bca8594ecab7596e58f68edce8
msgid "How to add, change and delete flatpages"
msgstr ""

#: ../../ref/contrib/flatpages.txt:172
#: ../../ref/contrib/redirects.txt:56
# 24f6eadb8e9f4e658c691b228457d2cc
# b76b7f37331749afb32ca41a0499413c
msgid "Via the admin interface"
msgstr ""

#: ../../ref/contrib/flatpages.txt:174
# f51115af98f243b384d6b465c4589372
msgid "If you've activated the automatic Django admin interface, you should see a \"Flatpages\" section on the admin index page. Edit flatpages as you edit any other object in the system."
msgstr ""

#: ../../ref/contrib/flatpages.txt:179
#: ../../ref/contrib/redirects.txt:63
# d3f5dd2e10714d09a7599f633ee78a22
# d3ac8034f8e34272846905f15c355407
msgid "Via the Python API"
msgstr ""

#: ../../ref/contrib/flatpages.txt:183
# 02b0ccafb83b44c5b01507d00c39fa33
msgid "Flatpages are represented by a standard :doc:`Django model </topics/db/models>`, which lives in `django/contrib/flatpages/models.py`_. You can access flatpage objects via the :doc:`Django database API </topics/db/queries>`."
msgstr ""

#: ../../ref/contrib/flatpages.txt:194
# e6b2d86b8739415a840d5786bfc8be00
msgid "If you add or modify flatpages via your own code, you will likely want to check for duplicate flatpage URLs within the same site. The flatpage form used in the admin performs this validation check, and can be imported from ``django.contrib.flatpages.forms.FlatPageForm`` and used in your own views."
msgstr ""

#: ../../ref/contrib/flatpages.txt:201
# e50529bbb6b54e68a7d23720b545469d
msgid "Flatpage templates"
msgstr ""

#: ../../ref/contrib/flatpages.txt:203
# 9cad0567500a48d284392ddb17422a12
msgid "By default, flatpages are rendered via the template :file:`flatpages/default.html`, but you can override that for a particular flatpage: in the admin, a collapsed fieldset titled \"Advanced options\" (clicking will expand it) contains a field for specifying a template name. If you're creating a flat page via the Python API you can simply set the template name as the field ``template_name`` on the ``FlatPage`` object."
msgstr ""

#: ../../ref/contrib/flatpages.txt:211
# 0591f4329ec74b06b25d2d7ad0e20adf
msgid "Creating the :file:`flatpages/default.html` template is your responsibility; in your template directory, just create a :file:`flatpages` directory containing a file :file:`default.html`."
msgstr ""

#: ../../ref/contrib/flatpages.txt:215
# 0ee7926fb3d14202bd4c8f457490595a
msgid "Flatpage templates are passed a single context variable, ``flatpage``, which is the flatpage object."
msgstr ""

#: ../../ref/contrib/flatpages.txt:218
# 0f0566bf256048d69a7fd9f1817f0df7
msgid "Here's a sample :file:`flatpages/default.html` template:"
msgstr ""

#: ../../ref/contrib/flatpages.txt:232
# 0b51a8e3456040609489b1105ddca1cf
msgid "Since you're already entering raw HTML into the admin page for a flatpage, both ``flatpage.title`` and ``flatpage.content`` are marked as **not** requiring :ref:`automatic HTML escaping <automatic-html-escaping>` in the template."
msgstr ""

#: ../../ref/contrib/flatpages.txt:238
# b6fc80ce15e549a39aae40dac65623d4
msgid "Getting a list of :class:`~django.contrib.flatpages.models.FlatPage` objects in your templates"
msgstr ""

#: ../../ref/contrib/flatpages.txt:240
# c79e59617b82409a9b06fd5b739d38c8
msgid "The flatpages app provides a template tag that allows you to iterate over all of the available flatpages on the :ref:`current site <hooking-into-current-site-from-views>`."
msgstr ""

#: ../../ref/contrib/flatpages.txt:244
# cfe84e2366ec40d19f16b1ac7ac6649a
msgid "Like all custom template tags, you'll need to :ref:`load its custom tag library <loading-custom-template-libraries>` before you can use it. After loading the library, you can retrieve all current flatpages via the :ttag:`get_flatpages` tag:"
msgstr ""

#: ../../ref/contrib/flatpages.txt:262
# 37fe0b660a3544dba4920980e5787246
msgid "Displaying ``registration_required`` flatpages"
msgstr ""

#: ../../ref/contrib/flatpages.txt:264
# ce4b34d96e1b458f876775106c08457f
msgid "By default, the :ttag:`get_flatpages` templatetag will only show flatpages that are marked ``registration_required = False``. If you want to display registration-protected flatpages, you need to specify an authenticated user using a ``for`` clause."
msgstr ""

#: ../../ref/contrib/flatpages.txt:269
#: ../../ref/contrib/flatpages.txt:287
# 12793759a06f404f8dc9471f62c5866b
# c7627fe9acaa4aa386f2940e8deb9abf
msgid "For example:"
msgstr ""

#: ../../ref/contrib/flatpages.txt:275
# b92a6ac2a44b43869a71afa7e193291c
msgid "If you provide an anonymous user, :ttag:`get_flatpages` will behave the same as if you hadn't provided a user -- i.e., it will only show you public flatpages."
msgstr ""

#: ../../ref/contrib/flatpages.txt:280
# cef9128037384c9a828f3b038b26330a
msgid "Limiting flatpages by base URL"
msgstr ""

#: ../../ref/contrib/flatpages.txt:282
# d0190657ab004742a077fa8b432440cd
msgid "An optional argument, ``starts_with``, can be applied to limit the returned pages to those beginning with a particular base URL. This argument may be passed as a string, or as a variable to be resolved from the context."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:3
# 805975914e7d41c79eacf1cbcfb47d2e
msgid "Form preview"
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:9
# ea35f291bda5488fafa2b544acca2e01
msgid "Django comes with an optional \"form preview\" application that helps automate the following workflow:"
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:12
#: ../../ref/contrib/index.txt:100
# 771a7788302447bdb8042752bea709a8
# 9cd0a138848c4560b8b08e0dc4a6de8c
msgid "\"Display an HTML form, force a preview, then do something with the submission.\""
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:14
# f4863409628344b7a9b1f368775d80b7
msgid "To force a preview of a form submission, all you have to do is write a short Python class."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:20
# 19704db712f044869a6fb04a80b36193
msgid "Given a :class:`django.forms.Form` subclass that you define, this application takes care of the following workflow:"
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:23
# 1eda4111957447fe92335635887f38cf
msgid "Displays the form as HTML on a Web page."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:24
# f7220c5f6e6f40b3a17580b756651c25
msgid "Validates the form data when it's submitted via POST. a. If it's valid, displays a preview page. b. If it's not valid, redisplays the form with error messages."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:27
# 4c695e47f91f406d8845c3889e3e4063
msgid "When the \"confirmation\" form is submitted from the preview page, calls a hook that you define -- a ``done()`` method that gets passed the valid data."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:31
# 782d8e1ee86f4b4ca8878261c517c7ce
msgid "The framework enforces the required preview by passing a shared-secret hash to the preview page via hidden form fields. If somebody tweaks the form parameters on the preview page, the form submission will fail the hash-comparison test."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:36
# 24d322a15785415391f99c0c27301693
msgid "How to use ``FormPreview``"
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:38
# c2f753725ad747d480f0071f5b9b2109
msgid "Point Django at the default FormPreview templates. There are two ways to do this:"
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:41
# 273820e31ac944fab90591c78a3a401e
msgid "Add ``'django.contrib.formtools'`` to your :setting:`INSTALLED_APPS` setting. This will work if your :setting:`TEMPLATE_LOADERS` setting includes the ``app_directories`` template loader (which is the case by default). See the :ref:`template loader docs <template-loaders>` for more."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:48
# 5ee964973f504380863a4c22f52e58e0
msgid "Otherwise, determine the full filesystem path to the :file:`django/contrib/formtools/templates` directory, and add that directory to your :setting:`TEMPLATE_DIRS` setting."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:52
# 35eb312336ee422dbb0fb64e9866e0a7
msgid "Create a :class:`~django.contrib.formtools.preview.FormPreview` subclass that overrides the ``done()`` method::"
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:65
# 5586b1aa765e4e58b50ff3d6eb526e59
msgid "This method takes an :class:`~django.http.HttpRequest` object and a dictionary of the form data after it has been validated and cleaned. It should return an :class:`~django.http.HttpResponseRedirect` that is the end result of the form being submitted."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:70
# 6a1feda496d1408a8bd1835e802998fa
msgid "Change your URLconf to point to an instance of your :class:`~django.contrib.formtools.preview.FormPreview` subclass::"
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:77
# 5a243532b9754d7298a7e741b73cd242
msgid "...and add the following line to the appropriate model in your URLconf::"
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:81
# 29741f3d92624866b42a99583e075ce4
msgid "where ``SomeModelForm`` is a Form or ModelForm class for the model."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:83
# ebb5916d4cd14a29b5f1671bb3c37881
msgid "Run the Django server and visit :file:`/post/` in your browser."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:86
# 61321a5d75d04f81b341c866533dba94
msgid "``FormPreview`` classes"
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:90
# aded6dd28dfd4a60a3cbe7a44c3b4fcd
msgid "A :class:`~django.contrib.formtools.preview.FormPreview` class is a simple Python class that represents the preview workflow. :class:`~django.contrib.formtools.preview.FormPreview` classes must subclass ``django.contrib.formtools.preview.FormPreview`` and override the ``done()`` method. They can live anywhere in your codebase."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:97
# ba121a68c9eb4531990c53b0a6c802f7
msgid "``FormPreview`` templates"
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:102
# 04b62bb9dccc48b9a16dec1520918eec
msgid "By default, the form is rendered via the template :file:`formtools/form.html`, and the preview page is rendered via the template :file:`formtools/preview.html`. These values can be overridden for a particular form preview by setting :attr:`~django.contrib.formtools.preview.FormPreview.preview_template` and :attr:`~django.contrib.formtools.preview.FormPreview.form_template` attributes on the FormPreview subclass. See :file:`django/contrib/formtools/templates` for the default templates."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:111
# 6d6916021b0f4d1f8ff55591edb719b8
msgid "Advanced ``FormPreview`` methods"
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:115
# fab1ff254fd049ad91274417157f88a4
msgid "Given a validated form, performs any extra processing before displaying the preview page, and saves any extra data in context."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:118
# 7b988f2a8e2f471cab26d1ebe61b5f44
msgid "By default, this method is empty.  It is called after the form is validated, but before the context is modified with hash information and rendered."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:3
# 3b79d932a2d24825bb50179ba94de9a7
msgid "Form wizard"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:8
# a683f4805d0e470baadf0389bad9e8ee
msgid "Django comes with an optional \"form wizard\" application that splits :doc:`forms </topics/forms/index>` across multiple Web pages. It maintains state in one of the backends so that the full server-side processing can be delayed until the submission of the final form."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:13
# aca7c4a46efe46e7867975a3dc1f6e94
msgid "You might want to use this if you have a lengthy form that would be too unwieldy for display on a single page. The first page might ask the user for core information, the second page might ask for less important information, etc."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:18
# 71b2c86a3c724b1f83cd6819fd89b398
msgid "The term \"wizard\", in this context, is `explained on Wikipedia`_."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:25
# 61cfc552d9a946bbaed4523d89eff930
msgid "Here's the basic workflow for how a user would use a wizard:"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:27
# 34427a6ec4ca4c19b1419cf4baaf428f
msgid "The user visits the first page of the wizard, fills in the form and submits it."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:29
# c4e5b053120f4927adf03a05686c2f95
msgid "The server validates the data. If it's invalid, the form is displayed again, with error messages. If it's valid, the server saves the current state of the wizard in the backend and redirects to the next step."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:32
# 53a9adc929b84c098cd395d102ab68b1
msgid "Step 1 and 2 repeat, for every subsequent form in the wizard."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:33
# b1855b9d1f2a448d93e863c7e973f219
msgid "Once the user has submitted all the forms and all the data has been validated, the wizard processes the data -- saving it to the database, sending an email, or whatever the application needs to do."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:38
#: ../../ref/django-admin.txt:36
#: ../../ref/request-response.txt:547
# 31f7f6f4017244c4bb20805709a867ce
# 844e13b4c51c44b2bbcc7c83f40ca462
# c2080ed504e74612a73754bb7b2669c3
msgid "Usage"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:40
# 084d4b033c0f4d65ae02a6cc616da32c
msgid "This application handles as much machinery for you as possible. Generally, you just have to do these things:"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:43
# ba1ac4fa33a54d41977cd86cb32270af
msgid "Define a number of :class:`~django.forms.Form` classes -- one per wizard page."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:46
# ea719dfc26b14fd18bc5b5b4c8b77452
msgid "Create a :class:`WizardView` subclass that specifies what to do once all of your forms have been submitted and validated. This also lets you override some of the wizard's behavior."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:50
# f95a5bf128a04c648f7b18e8ff2f418f
msgid "Create some templates that render the forms. You can define a single, generic template to handle every one of the forms, or you can define a specific template for each form."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:54
# c8b8e324873e43fd9e2e38b9eba1536a
msgid "Add ``django.contrib.formtools`` to your :setting:`INSTALLED_APPS` list in your settings file."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:57
# 8c898d4aeb214c5c95f3ae72e72f6ccf
msgid "Point your URLconf at your :class:`WizardView` :meth:`~WizardView.as_view` method."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:61
# f3e7dc685f884b65ab7671eed44892ea
msgid "Defining ``Form`` classes"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:63
# 5f3a19e6879447bd8417069bcc2be7c0
msgid "The first step in creating a form wizard is to create the :class:`~django.forms.Form` classes.  These should be standard :class:`django.forms.Form` classes, covered in the :doc:`forms documentation </topics/forms/index>`.  These classes can live anywhere in your codebase, but convention is to put them in a file called :file:`forms.py` in your application."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:70
# ceb7198cda70454180a68c42fa6b3572
msgid "For example, let's write a \"contact form\" wizard, where the first page's form collects the sender's email address and subject, and the second page collects the message itself. Here's what the :file:`forms.py` might look like::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:86
# ab127500c70b42aba75c8912005b35da
msgid "In order to use :class:`~django.forms.FileField` in any form, see the section :ref:`Handling files <wizard-files>` below to learn more about what to do."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:91
# 321bd243658a4c5a8bd26c77194e2209
msgid "Creating a ``WizardView`` subclass"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:96
# 84d7db1cbb2745e99f26675954f6e458
msgid "The next step is to create a :class:`django.contrib.formtools.wizard.views.WizardView` subclass. You can also use the :class:`SessionWizardView` or :class:`CookieWizardView` classes which preselect the backend used for storing information during execution of the wizard (as their names indicate, server-side sessions and browser cookies respectively)."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:105
# 82ae1fc9101647fbbf3e32831a5c0c75
msgid "To use the :class:`SessionWizardView` follow the instructions in the :doc:`sessions documentation </topics/http/sessions>` on how to enable sessions."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:109
# 007dc6b2b8294a80ab5625f4c6c3c40d
msgid "We will use the :class:`SessionWizardView` in all examples but is is completely fine to use the :class:`CookieWizardView` instead. As with your :class:`~django.forms.Form` classes, this :class:`WizardView` class can live anywhere in your codebase, but convention is to put it in :file:`views.py`."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:114
# 84910feec69143e3b37d56e0c9558421
msgid "The only requirement on this subclass is that it implement a :meth:`~WizardView.done()` method."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:119
# 3e8865cd2d3349f3a40bb16964a94387
msgid "This method specifies what should happen when the data for *every* form is submitted and validated. This method is passed a list of validated :class:`~django.forms.Form` instances."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:123
# bdab36856c5641488d07104124b56581
msgid "In this simplistic example, rather than performing any database operation, the method simply renders a template of the validated data::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:135
# 4d425b8c240144f19d78c68fbb4c6817
msgid "Note that this method will be called via ``POST``, so it really ought to be a good Web citizen and redirect after processing the data. Here's another example::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:147
# 59fc442ff61a44daa7fbb138c24cdf73
msgid "See the section :ref:`Advanced WizardView methods <wizardview-advanced-methods>` below to learn about more :class:`WizardView` hooks."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:151
# bb88b31a9e5d4aa0b693f85036230602
msgid "Creating templates for the forms"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:153
# 896bc9a719b24a5e8bf7e9baeef6ae69
msgid "Next, you'll need to create a template that renders the wizard's forms. By default, every form uses a template called :file:`formtools/wizard/wizard_form.html`. You can change this template name by overriding either the :attr:`~django.views.generic.base.TemplateResponseMixin.template_name` attribute or the :meth:`~django.views.generic.base.TemplateResponseMixin.get_template_names()` method, which are documented in the :class:`~django.views.generic.base.TemplateResponseMixin` documentation.  The latter one allows you to use a different template for each form (:ref:`see the example below <wizard-template-for-each-form>`)."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:165
# 48980db7068f4989ada1fa348ac650ae
msgid "This template expects a ``wizard`` object that has various items attached to it:"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:168
# c0948b8a75764b7ca998a47d8c34938f
msgid "``form`` -- The :class:`~django.forms.Form` or :class:`~django.forms.formset.BaseFormSet` instance for the current step (either empty or with errors)."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:172
# b95f82f9c6c84168b23dd74105f91ba7
msgid "``steps`` -- A helper object to access the various steps related data:"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:174
# 78cd090d584844f6a41fbbd4bb170412
msgid "``step0`` -- The current step (zero-based)."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:175
# 405b6abb10344c25b21d67061d58c2b0
msgid "``step1`` -- The current step (one-based)."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:176
# f7b0e8e3728641e7b820095dca1a7abd
msgid "``count`` -- The total number of steps."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:177
# 8b9cc6548c9744cabdad8698819272e9
msgid "``first`` -- The first step."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:178
# 80e92ca14263484fa32d0278f9d7db6e
msgid "``last`` -- The last step."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:179
# 98984268c37441deb14d6690c5785652
msgid "``current`` -- The current (or first) step."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:180
# cb0ac44da4c4467889c3c0e63333501e
msgid "``next`` -- The next step."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:181
# ada802e3f4f04370b28651aa7aa1dee3
msgid "``prev`` -- The previous step."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:182
# 457a29d7e0a740618ccd0e1390bbd1c5
msgid "``index`` -- The index of the current step."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:183
# b15a49d0e5294f9b8f8d9afbd36d8d5e
msgid "``all`` -- A list of all steps of the wizard."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:185
# 98871ad8854c42dc8b765d0b41d6ab46
msgid "You can supply additional context variables by using the :meth:`~WizardView.get_context_data` method of your :class:`WizardView` subclass."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:189
# c4adf8fbe92241188962368891de8121
msgid "Here's a full example template:"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:224
# 7511265130b84e14b8f6986f70c0398a
msgid "Note that ``{{ wizard.management_form }}`` **must be used** for the wizard to work properly."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:230
# 9e2204035fbb44dd98fa11ad79582281
msgid "Hooking the wizard into a URLconf"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:234
# ec9b80215a1646d89973c8ce42f58df0
msgid "Finally, we need to specify which forms to use in the wizard, and then deploy the new :class:`WizardView` object at a URL in the ``urls.py``. The wizard's ``as_view()`` method takes a list of your :class:`~django.forms.Form` classes as an argument during instantiation::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:251
# a2e780a2c1ce431a80a75d5f038b5f74
msgid "Using a different template for each form"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:253
# f918471500cd401ea6ebadae34ce5946
msgid "As mentioned above, you may specify a different template for each form. Consider an example using a form wizard to implement a multi-step checkout process for an online store. In the first step, the user specifies a billing and shipping address. In the second step, the user chooses payment type. If they chose to pay by credit card, they will enter credit card information in the next step. In the final step, they will confirm the purchase."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:260
# 47b5eb46eaae4d70867dd5d3c80b34eb
msgid "Here's what the view code might look like::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:292
# 98a832da30124f778177deeaf1cac1c4
msgid "The ``urls.py`` file would contain something like::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:298
# 63f3dbdd849548e9968b21f47275fc94
msgid "Note that the ``OrderWizard`` object is initialized with a list of pairs. The first element in the pair is a string that corresponds to the name of the step and the second is the form class."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:302
# b3b24d0a43ef4662b7b3056ca09b9067
msgid "In this example, the :meth:`~django.views.generic.base.TemplateResponseMixin.get_template_names()` method returns a list containing a single template, which is selected based on the name of the current step."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:310
# 24e09d949d3441dcbb5fddd98f9a7aaa
msgid "Advanced ``WizardView`` methods"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:314
# 6d7a749785a24e1b99d4b0a239a5cddd
msgid "Aside from the :meth:`~done()` method, :class:`WizardView` offers a few advanced method hooks that let you customize how your wizard works."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:317
# a51f87e6404a4eb49a1a3dfacc53da69
msgid "Some of these methods take an argument ``step``, which is a zero-based counter as string representing the current step of the wizard. (E.g., the first form is ``'0'`` and the second form is ``'1'``)"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:323
# d965b317ff4b4867aa9c1d78ccba87e9
msgid "Returns the prefix which will be used when calling the form for the given step. ``step`` contains the step name, ``form`` the form class which will be called with the returned prefix."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:327
# 1de421b8c2004b9a9206fdfb42c1f039
msgid "If no ``step`` is given, it will be determined automatically. By default, this simply uses the step itself and the ``form`` parameter is not used."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:330
# 61575087c58b449abf2d1cc2ea37b656
msgid "For more, see the :ref:`form prefix documentation <form-prefix>`."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:334
# 8cec52e7f2d34121959cf5e3cfff1ab7
msgid "Returns a dictionary which will be passed as the :attr:`~django.forms.Form.initial` argument when instantiating the Form instance for step ``step``. If no initial data was provided while initializing the form wizard, an empty dictionary should be returned."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:339
#: ../../ref/contrib/formtools/form-wizard.txt:349
#: ../../ref/contrib/formtools/form-wizard.txt:364
#: ../../ref/contrib/formtools/form-wizard.txt:439
# d3abf735531742d9b9250bd4a5b0ff1e
# 244520dc0e4b46a9ad84983c6a522cf7
# e240686c3e3f46d6ade358b23c22dd11
# d8432f371dc7402bac4522c0763d4885
msgid "The default implementation::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:346
# b58a1c6780a1430d8d7eadd7b57067da
msgid "Returns a dictionary which will be used as the keyword arguments when instantiating the form instance on given ``step``."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:356
# 8823eeeff1b548d38b2d8810a4db4696
msgid "This method will be called only if a :class:`~django.forms.ModelForm` is used as the form for step ``step``."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:359
# 5192e8b226ac48698ae41b13b5ff8e0e
msgid "Returns an :class:`~django.db.models.Model` object which will be passed as the ``instance`` argument when instantiating the ``ModelForm`` for step ``step``.  If no instance object was provided while initializing the form wizard, ``None`` will be returned."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:371
# dd289dacbd43457182fbb2209aa4fcfe
msgid "Returns the template context for a step. You can overwrite this method to add more data for all or some steps. This method returns a dictionary containing the rendered form step."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:375
# 82d017cdc595440c975f12b829d331b6
msgid "The default template context variables are:"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:377
# 39fd3c3d490449319d1ce2f801017870
msgid "Any extra data the storage backend has stored"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:378
# 7af274abd7c043c2a3115dea42f3c0ac
msgid "``form`` -- form instance of the current step"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:379
# 5f60d1d102394ee2987170f3e75a08a4
msgid "``wizard`` -- the wizard instance itself"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:381
# fa4e42c069fb4642830d46e6df62e1ea
msgid "Example to add extra variables for a specific step::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:391
# bf8e1314262b435bbdad459d258fb8d7
msgid "This method returns a prefix for use by the storage backends. Backends use the prefix as a mechanism to allow data to be stored separately for each wizard. This allows wizards to store their data in a single backend without overwriting each other."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:396
# f843d64073b94f9fa1b376192efebd5f
msgid "You can change this method to make the wizard data prefix more unique to, e.g. have multiple instances of one wizard in one session."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:399
#: ../../ref/contrib/formtools/form-wizard.txt:452
#: ../../ref/contrib/formtools/form-wizard.txt:468
#: ../../ref/contrib/formtools/form-wizard.txt:480
#: ../../ref/contrib/formtools/form-wizard.txt:490
#: ../../ref/contrib/formtools/form-wizard.txt:500
#: ../../ref/contrib/formtools/form-wizard.txt:711
# a460327e29634f038856570263e2d765
# 7f26609dfb054383919994a93b834e80
# 978f4338ad3e499f9aca000141c79496
# 36ea17b28fef4f17abf9001f68d67a73
# f366aabff1824cf2a327485c55b28b00
# c8a4afc1f92640af831e06aef80b8b54
# d2ac230eea874878b0e178a0cdcc60d2
msgid "Default implementation::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:407
# 244b8e6950be49719d531b078d9cf07e
msgid "This method constructs the form for a given ``step``. If no ``step`` is defined, the current step will be determined automatically. The method gets three arguments:"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:411
# 0aa05261014949f48a3fb8fd17e6b93e
msgid "``step`` -- The step for which the form instance should be generated."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:412
# f324614fb85a4f91b57f6aae8918e571
msgid "``data`` -- Gets passed to the form's data argument"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:413
# 4c93d2dddd6f4c5d843126bae3b054f5
msgid "``files`` -- Gets passed to the form's files argument"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:415
# 02157adb6eda4617b8f7cd32dd6206e5
msgid "You can override this method to add extra arguments to the form instance."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:417
# 6e8279560d844ca283123efe0ef75b6a
msgid "Example code to add a user attribute to the form on step 2::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:427
# ea7c14a4e39f403684b786c97150b925
msgid "Hook for modifying the wizard's internal state, given a fully validated :class:`~django.forms.Form` object. The Form is guaranteed to have clean, valid data."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:431
# 2d7b39f4fc4840feab7d6c2666ca328b
msgid "This method gives you a way to post-process the form data before the data gets stored within the storage backend. By default it just returns the ``form.data`` dictionary. You should not manipulate the data here but you can use it to do some extra work if needed (e.g. set storage extra data)."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:436
# 75e6ff877bbe46119c8ca1896762719c
msgid "Note that this method is called every time a page is rendered for *all* submitted steps."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:446
# 8154efe0f3e4447fa673a6354a3d1c20
msgid "This method gives you a way to post-process the form files before the files gets stored within the storage backend. By default it just returns the ``form.files`` dictionary. You should not manipulate the data here but you can use it to do some extra work if needed (e.g. set storage extra data)."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:459
# 3fd9dde0c5d54273b8e102aae4de428c
msgid "When the wizard thinks all steps have passed it revalidates all forms with the data from the backend storage."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:462
# 1c4917c01152442e89c06c73a6df94b3
msgid "If any of the forms don't validate correctly, this method gets called. This method expects two arguments, ``step`` and ``form``."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:465
# 5a6ceca9750941f49cb3364966865843
msgid "The default implementation resets the current step to the first failing form and redirects the user to the invalid form."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:476
# d8a889873213469c9e57948e537ef186
msgid "This method fetches the data from the ``form`` Form instance and returns the dictionary. You can use this method to manipulate the values before the data gets stored in the storage backend."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:487
# 8a84f0dab5664e7c859fa9d02ee6bcc3
msgid "This method returns the form files. You can use this method to manipulate the files before the data gets stored in the storage backend."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:497
# 32952ccfdb814b0fb68bd2c6dc1bf8bb
msgid "This method gets called after the GET or POST request has been handled. You can hook in this method to, e.g. change the type of HTTP response."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:509
# 93b9466e8fbb4dc59892b96d843ee87f
msgid "This method returns the cleaned data for a given ``step``. Before returning the cleaned data, the stored values are revalidated through the form. If the data doesn't validate, ``None`` will be returned."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:515
# bfecdd0a5bb14aa39f5c860fc6aa0ae4
msgid "This method returns a merged dictionary of all form steps' ``cleaned_data`` dictionaries. If a step contains a ``FormSet``, the key will be prefixed with ``formset-`` and contain a list of the formset's ``cleaned_data`` dictionaries. Note that if two or more steps have a field with the same name, the value for that field from the latest step will overwrite the value from any earlier steps."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:523
# 6ffe5e6d12e6477e969651a73185f9ce
msgid "Providing initial data for the forms"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:527
# 650e6b689ac54df39fb5d81e4ae18380
msgid "Initial data for a wizard's :class:`~django.forms.Form` objects can be provided using the optional :attr:`~WizardView.initial_dict` keyword argument. This argument should be a dictionary mapping the steps to dictionaries containing the initial data for each step. The dictionary of initial data will be passed along to the constructor of the step's :class:`~django.forms.Form`::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:550
# 386b1d83505e4e0c8366d8fe4eed373b
msgid "The ``initial_dict`` can also take a list of dictionaries for a specific step if the step is a ``FormSet``."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:556
# 8832a35233774721a240efb0aa7c2170
msgid "Handling files"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:560
# 56f4e7b4b6264fdbad370defe362067a
msgid "To handle :class:`~django.forms.FileField` within any step form of the wizard, you have to add a ``file_storage`` to your :class:`WizardView` subclass."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:563
# 475da32fda4f4a62b6bea7dfbf09dc8a
msgid "This storage will temporarily store the uploaded files for the wizard. The ``file_storage`` attribute should be a :class:`~django.core.files.storage.Storage` subclass."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:567
# b5ae79730f6d41ccbcb9d67e689502f6
msgid "Django provides a built-in storage class (see :ref:`the built-in filesystem storage class <builtin-fs-storage>`)::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:579
# 1ac1ff71b30e49629616369f7fe2d1bc
msgid "Please remember to take care of removing old files as the :class:`WizardView` won't remove any files, whether the wizard gets finished correctly or not."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:584
# e487693adb244740ae8d70936ded28db
msgid "Conditionally view/skip specific steps"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:588
# fca5b9369f61434899603fec764d78c0
msgid "The :meth:`~WizardView.as_view` method accepts a ``condition_dict`` argument. You can pass a dictionary of boolean values or callables. The key should match the steps names (e.g. '0', '1')."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:592
# 661cac81e52a4a2baede9fc89566cbbc
msgid "If the value of a specific step is callable it will be called with the :class:`WizardView` instance as the only argument. If the return value is true, the step's form will be used."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:596
# 2ddc2427c4e2487e8132548b61ab4e0f
msgid "This example provides a contact form including a condition. The condition is used to show a message form only if a checkbox in the first step was checked."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:599
# ada8c56154244887973de72f9826c92d
msgid "The steps are defined in a ``forms.py`` file::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:611
# 6dc70dfcb11e401caaf0ebec2dddf7f0
msgid "We define our wizard in a ``views.py``::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:629
# 039c971ef80146e5b54698e7ee813e0b
msgid "We need to add the ``ContactWizard`` to our ``urls.py`` file::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:644
# d1f83d4e0dd44b9ea9c9a773a9212139
msgid "As you can see, we defined a ``show_message_form_condition`` next to our :class:`WizardView` subclass and added a ``condition_dict`` argument to the :meth:`~WizardView.as_view` method. The key refers to the second wizard step (because of the zero based step index)."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:650
# 76237e0db969451d81fbd36537d428ed
msgid "How to work with ModelForm and ModelFormSet"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:654
# 694763630f1f4d2c9960efacee0bfb0d
msgid "WizardView supports :doc:`ModelForms </topics/forms/modelforms>` and :ref:`ModelFormSets <model-formsets>`. Additionally to :attr:`~WizardView.initial_dict`, the :meth:`~WizardView.as_view` method takes an ``instance_dict`` argument that should contain model instances for steps based on ``ModelForm`` and querysets for steps based on ``ModelFormSet``."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:661
# c1efc545d2344110b60a15fd05eb6012
msgid "Usage of ``NamedUrlWizardView``"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:667
# ce6d6bea2b8b4a9894dfed96cf82c186
msgid "There is a :class:`WizardView` subclass which adds named-urls support to the wizard. By doing this, you can have single urls for every step. You can also use the :class:`NamedUrlSessionWizardView` or :class:`NamedUrlCookieWizardView` classes which preselect the backend used for storing information (server-side sessions and browser cookies respectively)."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:673
# 047135d0ebd54575955f4ece229257c6
msgid "To use the named urls, you have to change the ``urls.py``."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:675
# 0f8f478e0fba4359bb44e6f6e0e9680c
msgid "Below you will see an example of a contact wizard with two steps, step 1 with \"contactdata\" as its name and step 2 with \"leavemessage\" as its name."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:678
# 90311efe3376439f97dd8b2170854379
msgid "Additionally you have to pass two more arguments to the :meth:`~WizardView.as_view` method:"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:681
# 77253d645fbb4b77a0e2fe078809cec3
msgid "``url_name`` -- the name of the url (as provided in the urls.py)"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:682
# 649b68fe549846c296e1b2e1f3cd9654
msgid "``done_step_name`` -- the name in the url for the done step"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:684
# 3e6c9e57af8f4539912d6babf3407db9
msgid "Example code for the changed ``urls.py`` file::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:705
# a726bc0b67834c349e63c10ea03b7f72
msgid "Advanced ``NamedUrlWizardView`` methods"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:709
# a8745bb038514278a41fae32c1f9c9b9
msgid "This method returns the URL for a specific step."
msgstr ""

#: ../../ref/contrib/formtools/index.txt:2
# 157fb2f6a5f34ec185e8e7ceeaa25514
msgid "django.contrib.formtools"
msgstr ""

#: ../../ref/contrib/formtools/index.txt:6
# 645a514ec47b4d7fab834b911f14cab0
msgid "A set of high-level abstractions for Django forms (:mod:`django.forms`)."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:5
# 502baa597a424f22aad8267ed6b56dc3
msgid "GeoDjango's admin site"
msgstr ""

#: ../../ref/contrib/gis/admin.txt:12
# 3a19fa57e8d14c88971c124165623e3c
msgid "``GeoModelAdmin``"
msgstr ""

#: ../../ref/contrib/gis/admin.txt:18
# 45bed270d89941519f7a01141ee9ec35
msgid "The default center longitude."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:22
# 2111cd070c1a41bfbbc0eb5c5669ff5e
msgid "The default center latitude."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:26
# 18d11d94c7124c3e98b02146c69b16ac
msgid "The default zoom level to use.  Defaults to 18."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:30
# 269480456a1049fa97f0a6743d3cbfcc
msgid "Sequence of URLs to any extra JavaScript to include."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:34
# 02e4e327ab5b4cc4a978cf5a691f6207
msgid "Override the template used to generate the JavaScript slippy map. Default is ``'gis/admin/openlayers.html'``."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:39
# 0a92855032294135839d383420830ec1
msgid "Width of the map, in pixels.  Defaults to 600."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:43
# c98e1444df3b4f8fb54022a784146eff
msgid "Height of the map, in pixels.  Defaults to 400."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:47
# 84c51d8848e74a449ed8f6385b7f424c
msgid "Link to the URL of the OpenLayers JavaScript.  Defaults to ``'http://openlayers.org/api/2.11/OpenLayers.js'``."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:53
# 5b8de70bc91b4ec1a631eca7d520b685
msgid "Defaults to ``True``.  When set to ``False``, disables editing of existing geometry fields in the admin."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:58
# 89103bbd62de4ddd965146a396715d9c
msgid "This is different from adding the geometry field to :attr:`~django.contrib.admin.ModelAdmin.readonly_fields`, which will only display the WKT of the geometry. Setting ``modifiable=False``, actually displays the geometry in a map, but disables the ability to edit its vertices."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:65
#: ../../ref/contrib/gis/tutorial.txt:758
# 6a122527d4d94f818bd5328372f99d69
# f0707eb1560a4abf83b29f74aa1d8067
msgid "``OSMGeoAdmin``"
msgstr ""

#: ../../ref/contrib/gis/admin.txt:69
# 44ed3c30b3f84b34a98e592f8c13bf94
msgid "A subclass of :class:`GeoModelAdmin` that uses a spherical mercator projection with `OpenStreetMap <http://openstreetmap.org/>`_ street data tiles. See the :ref:`OSMGeoAdmin introduction <osmgeoadmin-intro>` in the tutorial for a usage example."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:5
# 8932bc75010e461c9ce69078503da172
msgid "GeoDjango Management Commands"
msgstr ""

#: ../../ref/contrib/gis/commands.txt:8
#: ../../ref/django-admin.txt:240
# 6a6d5f904cf642d9878758b39eca62b3
# 474211fa8c044f8680cfe20df6e60e25
msgid "inspectdb"
msgstr ""

#: ../../ref/contrib/gis/commands.txt:12
# 37bdb5c7521843dda14675ad1a907253
msgid "When :mod:`django.contrib.gis` is in your :setting:`INSTALLED_APPS`, the :djadmin:`inspectdb` management command is overridden with one from GeoDjango. The overridden command is spatially-aware, and places geometry fields in the auto-generated model definition, where appropriate."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:18
# 7be641e3558548b482c077bac7556d48
msgid "ogrinspect <data_source> <model_name>"
msgstr ""

#: ../../ref/contrib/gis/commands.txt:22
# 860028e85c354f62bc68bfc959c858d5
msgid "The ``ogrinpsect`` management command will inspect the given OGR-compatible :class:`~django.contrib.gis.gdal.DataSource` (e.g., a shapefile) and will output a GeoDjango model with the given model name.  There's a detailed example of using ``ogrinspect`` :ref:`in the tutorial <ogrinspect-intro>`."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:29
# 88115109df9a42ad925589cd4e370e3b
msgid "Use a comma separated list of OGR field names to add the ``blank=True`` keyword option to the field definition.  Set with ``true`` to apply to all applicable fields."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:35
# 7b834323255f4827b976af3e4150602a
msgid "Use a comma separated list of OGR float fields to generate :class:`~django.db.models.DecimalField` instead of the default :class:`~django.db.models.FloatField`. Set to ``true`` to apply to all OGR float fields."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:42
# ce1a47a669574e529eb281c87fd60172
msgid "Specifies the model attribute name to use for the geometry field. Defaults to ``'geom'``."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:47
# cb54b63e24df41ee95c6c12c135a2f41
msgid "The key for specifying which layer in the OGR :class:`~django.contrib.gis.gdal.DataSource` source to use. Defaults to 0 (the first layer). May be an integer or a string identifier for the :class:`~django.contrib.gis.gdal.Layer`."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:54
# 574c0ff877ff465f8a49e1488db351e8
msgid "Automatically generate a mapping dictionary for use with :class:`~django.contrib.gis.utils.LayerMapping`."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:59
# 537074f744e342118ec0052d2cceadea
msgid "When generating the geometry field, treat it as a geometry collection. For example, if this setting is enabled then a :class:`~django.contrib.gis.db.models.MultiPolygonField` will be placed in the generated model rather than :class:`~django.contrib.gis.db.models.PolygonField`."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:67
# 32d1ce4cdcc8416e8d97d5e50579860a
msgid "Generates a ``__unicode__`` routine on the model that will return the the given field name."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:72
# 33578aa157514e458b998c050f5a6600
msgid "Suppresses the ``from django.contrib.gis.db import models`` import statement."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:76
# ad2c39eac9a54accbbf35e272ed7fe64
msgid "Use a comma separated list of OGR field names to add the ``null=True`` keyword option to the field definition.  Set with ``true`` to apply to all applicable fields."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:82
# d59a5a4875b645379b936da2c41d0e93
msgid "The SRID to use for the geometry field.  If not set, ``ogrinspect`` attempts to automatically determine of the SRID of the data source."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:5
# 33f858a90a09403bb04d675f797157e7
msgid "GeoDjango Database API"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:10
# 3d624e06b9a346999d3691824471e986
msgid "Spatial Backends"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:15
# 50eafefb50e446f990e180e0880f8c28
msgid "GeoDjango currently provides the following spatial database backends:"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:17
# 91165e4d2924482ea3702d45974b837d
msgid "``django.contrib.gis.db.backends.postgis``"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:18
# e3b04462beec4df288229778c45e6865
msgid "``django.contrib.gis.db.backends.mysql``"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:19
# f2fc355f466847e69ea8cddb8c8d6940
msgid "``django.contrib.gis.db.backends.oracle``"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:20
# 4c4d744244594c209d660491a577c578
msgid "``django.contrib.gis.db.backends.spatialite``"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:28
# d97a4aaf13b1423bb1545930a2331d70
msgid "MySQL Spatial Limitations"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:30
# b03b0d13d3374ebaab8e69fc74bd43f0
msgid "MySQL's spatial extensions only support bounding box operations (what MySQL calls minimum bounding rectangles, or MBR).  Specifically, `MySQL does not conform to the OGC standard <http://dev.mysql.com/doc/refman/5.1/en/functions-for-testing-spatial-relations-between-geometric-objects.html>`_:"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:34
# b180eff95fbd4dcc91d0ba88e94dd299
msgid "Currently, MySQL does not implement these functions [``Contains``, ``Crosses``, ``Disjoint``, ``Intersects``, ``Overlaps``, ``Touches``, ``Within``] according to the specification.  Those that are implemented return the same result as the corresponding MBR-based functions."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:40
# cfa03e52abde41619fff390e0a148c85
msgid "In other words, while spatial lookups such as :lookup:`contains <gis-contains>` are available in GeoDjango when using MySQL, the results returned are really equivalent to what would be returned when using :lookup:`bbcontains` on a different spatial backend."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:47
# a233210fc72b49beb52646d7bbd079fc
msgid "True spatial indexes (R-trees) are only supported with MyISAM tables on MySQL. [#fnmysqlidx]_ In other words, when using MySQL spatial extensions you have to choose between fast spatial lookups and the integrity of your data -- MyISAM tables do not support transactions or foreign key constraints."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:54
# c4f62596bff043e7be8515693f72458c
msgid "Creating and Saving Geographic Models"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:55
# 28e8de137e0844098d3ece0c3f97b6c1
msgid "Here is an example of how to create a geometry object (assuming the ``Zipcode`` model)::"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:62
# 19e3c1c275884d5ca292e3009597d752
msgid ":class:`~django.contrib.gis.geos.GEOSGeometry` objects may also be used to save geometric models::"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:69
# 25c475bc88f042b1be9fffda48f81e44
msgid "Moreover, if the ``GEOSGeometry`` is in a different coordinate system (has a different SRID value) than that of the field, then it will be implicitly transformed into the SRID of the model's field, using the spatial database's transform procedure::"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:81
# 5013cd6ce70c46bebe257a278cfb5126
msgid "Thus, geometry parameters may be passed in using the ``GEOSGeometry`` object, WKT (Well Known Text [#fnwkt]_), HEXEWKB (PostGIS specific -- a WKB geometry in hexadecimal [#fnewkb]_), and GeoJSON [#fngeojson]_ (requires GDAL). Essentially, if the input is not a ``GEOSGeometry`` object, the geometry field will attempt to create a ``GEOSGeometry`` instance from the input."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:87
# 8e00179cb12a47be83351f1ec80ffa10
msgid "For more information creating :class:`~django.contrib.gis.geos.GEOSGeometry` objects, refer to the :ref:`GEOS tutorial <geos-tutorial>`."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:93
#: ../../ref/contrib/gis/db-api.txt:227
#: ../../ref/contrib/gis/geoquerysets.txt:15
#: ../../ref/contrib/gis/tutorial.txt:590
# a134dba4e3314f22ba2ce8c4931b3576
# bb1e53a32dda48229c986078a60e938d
# 55641f4bc9564f4f8635a4b993f23f13
# f4a1d396695f4b869ecac4e2cfd3ead8
msgid "Spatial Lookups"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:95
# eff28ac82cd84176a3b2d069636bb5a5
msgid "GeoDjango's lookup types may be used with any manager method like ``filter()``, ``exclude()``, etc.  However, the lookup types unique to GeoDjango are only available on geometry fields. Filters on 'normal' fields (e.g. :class:`~django.db.models.CharField`) may be chained with those on geographic fields.  Thus, geographic queries take the following general form (assuming  the ``Zipcode`` model used in the :ref:`ref-gis-model-api`)::"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:110
# 9efbccbeea724b978d849b11e271f830
msgid "In this case, ``poly`` is the geographic field, :lookup:`contains <gis-contains>` is the spatial lookup type, and ``pnt`` is the parameter (which may be a :class:`~django.contrib.gis.geos.GEOSGeometry` object or a string of GeoJSON , WKT, or HEXEWKB)."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:115
# 999c9874ca5045bfb8f64f27edb1182d
msgid "A complete reference can be found in the :ref:`spatial lookup reference <spatial-lookups>`."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:120
# e75a544829b946bbb527a2e0f4aa43a4
msgid "GeoDjango constructs spatial SQL with the :class:`GeoQuerySet`, a subclass of :class:`~django.db.models.query.QuerySet`.  The :class:`GeoManager` instance attached to your model is what enables use of :class:`GeoQuerySet`."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:128
# 219df11c693940a18a311a101c638f17
msgid "Distance Queries"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:131
#: ../../ref/contrib/gis/tutorial.txt:6
# 2452735a010740038003bfbbbdfadd34
# 69f6d349c9a947139cff5717617c7580
msgid "Introduction"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:132
# f7643c6fd7c842deb6999459a7793645
msgid "Distance calculations with spatial data is tricky because, unfortunately, the Earth is not flat.  Some distance queries with fields in a geographic coordinate system may have to be expressed differently because of limitations in PostGIS.  Please see the :ref:`selecting-an-srid` section in the :ref:`ref-gis-model-api` documentation for more details."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:141
#: ../../ref/contrib/gis/geoquerysets.txt:510
# 14aa5bd2232841748b6f9e100f0bf6c3
# 0e7c258bffc54ac1a9c1daaa524adaa4
msgid "Distance Lookups"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:142
#: ../../ref/contrib/gis/geoquerysets.txt:270
#: ../../ref/contrib/gis/geoquerysets.txt:512
#: ../../ref/contrib/gis/geoquerysets.txt:691
#: ../../ref/contrib/gis/geoquerysets.txt:770
#: ../../ref/contrib/gis/geoquerysets.txt:790
#: ../../ref/contrib/gis/geoquerysets.txt:849
#: ../../ref/contrib/gis/geoquerysets.txt:887
#: ../../ref/contrib/gis/geoquerysets.txt:977
#: ../../ref/contrib/gis/geoquerysets.txt:1073
#: ../../ref/contrib/gis/geoquerysets.txt:1085
#: ../../ref/contrib/gis/geoquerysets.txt:1162
# 1c69207e7bb241938ad303dd55f9c081
# 38c9e35599b94e479fc6a8920867711c
# 67f720c0c8b24b239d65d0751e1614ca
# 9ae889500dbd4327a0fd1cca8e19cf28
# c13305db21bb43f198f1bbac546ca2d5
# 10a08618c6e04b8faceff49f9d177c4f
# 1c32202873d2491bbac819698796421b
# 449a5a6b849948e991430b04f5f1a0f9
# 974e5f5357144dd6b3a1121a8192f16c
# 76568184641c431fb6e0561b38838097
# 71908b9a4e334f4f9fab3f2b2fcbd2ee
# 7c4b36cc288a4ae5993274bf61fcd952
msgid "*Availability*: PostGIS, Oracle, SpatiaLite"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:144
# 023c3f3f075e4815afd086009df1f0ba
msgid "The following distance lookups are available:"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:146
#: ../../ref/contrib/gis/db-api.txt:246
# eae71b7a0f0947d6817eb3fe721a0e9a
# 363fc651815d41c6a5434340ce69575c
msgid ":lookup:`distance_lt`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:147
#: ../../ref/contrib/gis/db-api.txt:247
# a05106775bb8469eb9c1adb5b4635d9a
# ebe3a7512ca844e58dd292c876efd846
msgid ":lookup:`distance_lte`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:148
#: ../../ref/contrib/gis/db-api.txt:244
# fcf595e4dc4c47aa9064b14a913f0c1d
# 5fc0565f7b004b8cbf7898d58481ffa6
msgid ":lookup:`distance_gt`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:149
#: ../../ref/contrib/gis/db-api.txt:245
# 2becdd7ab126419ca577297387cf3805
# e60f7eeee40940f09b223ef50c7e70ff
msgid ":lookup:`distance_gte`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:150
#: ../../ref/contrib/gis/db-api.txt:248
# 1d2aabdbb9ce410386717ae5d74ebf88
# 11310d3b138b4731b22d19a47df9a1ec
msgid ":lookup:`dwithin`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:154
# 69d7e5a2b2124e10954ff8a9611a262e
msgid "For *measuring*, rather than querying on distances, use the :meth:`GeoQuerySet.distance` method."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:157
# d229682249fe4d44b61aa1cdc72850ce
msgid "Distance lookups take a tuple parameter comprising:"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:159
# b18b96489c49437c81bf35a0230f8980
msgid "A geometry to base calculations from; and"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:160
# f23b5fef35854eaab7ef9ecf1837968b
msgid "A number or :class:`~django.contrib.gis.measure.Distance` object containing the distance."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:162
# b1c45f4cecf44e60b3b4c38a033be59d
msgid "If a :class:`~django.contrib.gis.measure.Distance` object is used, it may be expressed in any units (the SQL generated will use units converted to those of the field); otherwise, numeric parameters are assumed to be in the units of the field."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:169
# 446cf381d6284e44bb4000f433e2dae2
msgid "For users of PostGIS 1.4 and below, the routine ``ST_Distance_Sphere`` is used by default for calculating distances on geographic coordinate systems (e.g., WGS84) -- which may only be called with point geometries [#fndistsphere14]_. Thus, geographic distance lookups on traditional PostGIS geometry columns are only allowed on :class:`PointField` model fields using a point for the geometry parameter."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:178
# 4b469ea2b19c419f96946755ff3c199f
msgid "In PostGIS 1.5, ``ST_Distance_Sphere`` does *not* limit the geometry types geographic distance queries are performed with. [#fndistsphere15]_  However, these queries may take a long time, as great-circle distances must be calculated on the fly for *every* row in the query.  This is because the spatial index on traditional geometry fields cannot be used."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:184
# 3039ccdb244845aab96a0a092edf2fb3
msgid "For much better performance on WGS84 distance queries, consider using :ref:`geography columns <geography-type>` in your database instead because they are able to use their spatial index in distance queries. You can tell GeoDjango to use a geography column by setting ``geography=True`` in your field definition."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:190
# 9d0d5102acc242e49d82c5fcdab0151c
msgid "For example, let's say we have a ``SouthTexasCity`` model (from the `GeoDjango distance tests`__ ) on a *projected* coordinate system valid for cities in southern Texas::"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:203
# 3e98cadfb9354df8bb86b92185dfe945
msgid "Then distance queries may be performed as follows::"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:222
# 0c12e604dc314d97acce6156022ffd8d
msgid "Compatibility Tables"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:229
# 813b51c2d1434bf4846f53403cdf2351
msgid "The following table provides a summary of what spatial lookups are available for each spatial database backend."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:233
# 36aa0f9f63264157b8d84c6f85852d60
msgid "Lookup Type"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:233
#: ../../ref/contrib/gis/db-api.txt:276
#: ../../ref/contrib/gis/geoquerysets.txt:44
#: ../../ref/contrib/gis/geoquerysets.txt:66
#: ../../ref/contrib/gis/geoquerysets.txt:88
#: ../../ref/contrib/gis/geoquerysets.txt:109
#: ../../ref/contrib/gis/geoquerysets.txt:136
#: ../../ref/contrib/gis/geoquerysets.txt:156
#: ../../ref/contrib/gis/geoquerysets.txt:177
#: ../../ref/contrib/gis/geoquerysets.txt:197
#: ../../ref/contrib/gis/geoquerysets.txt:217
#: ../../ref/contrib/gis/geoquerysets.txt:252
#: ../../ref/contrib/gis/geoquerysets.txt:333
#: ../../ref/contrib/gis/geoquerysets.txt:355
#: ../../ref/contrib/gis/geoquerysets.txt:546
#: ../../ref/contrib/gis/geoquerysets.txt:566
#: ../../ref/contrib/gis/geoquerysets.txt:586
#: ../../ref/contrib/gis/geoquerysets.txt:606
#: ../../ref/contrib/gis/geoquerysets.txt:626
#: ../../ref/contrib/gis/install/index.txt:448
#: ../../ref/contrib/gis/testing.txt:11
# a9536a290c37491d8a6831eefb13e7c9
# d6e936e713f741aba99630c800a90b45
# b997efb9a81248e284b3228f042805f0
# 8d4eaa55a0ef4bfeb979b519f444f8bb
# 9f94281ca2d542ee806853e60b7d0e3a
# 8e6cf3627a204737b80a6006e4902b04
# 7c3afab2e2db4f348db30e857ba2c453
# 6a4b6d51e3434c98b9813bf21e109b12
# 7178cf9f4b174f7a8df126bc116cb613
# 2a933cd303de462c8e2d29e3dfab8445
# 213894db266946ecb95157c90e4689f9
# 65d10a195bfd406bb0bdf5416577e845
# f5b833abbf2b4cab89494569b53b5e73
# 28156f952b4c4aae99947518bb8d25c4
# 22a8ee202492406aae663d27a19d0521
# 65d0efa1cd0c4e5aa90bfaf0b07f6c1e
# 2939b34711364f49bd19f4eaca262ff0
# e9d96a0154b3489fa7829adcbe8ba69d
# 3fafa203954843d5a5b4402cc1dce10e
# 358c74e3eb9a44e09af5bc95bf6632c1
# f85eda083c9b4010a3bd06e195796604
msgid "PostGIS"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:233
#: ../../ref/contrib/gis/db-api.txt:276
#: ../../ref/contrib/gis/geoquerysets.txt:110
#: ../../ref/contrib/gis/geoquerysets.txt:157
#: ../../ref/contrib/gis/geoquerysets.txt:178
#: ../../ref/contrib/gis/geoquerysets.txt:218
#: ../../ref/contrib/gis/geoquerysets.txt:253
#: ../../ref/contrib/gis/geoquerysets.txt:300
#: ../../ref/contrib/gis/geoquerysets.txt:335
#: ../../ref/contrib/gis/geoquerysets.txt:357
#: ../../ref/contrib/gis/geoquerysets.txt:547
#: ../../ref/contrib/gis/geoquerysets.txt:567
#: ../../ref/contrib/gis/geoquerysets.txt:587
#: ../../ref/contrib/gis/geoquerysets.txt:607
#: ../../ref/contrib/gis/geoquerysets.txt:627
#: ../../ref/contrib/gis/install/index.txt:66
# 3cc355a07eef4af6be3bcafbde8ff2c8
# ada62e5d945b43c78e529b12d741a662
# 6a60c305e9e04e4897e43190bd249067
# d22607f473cd46ca93b646eccbe99546
# cc74114aad3a4a2498a6342ca419ceda
# f4dfe1a08b914ab1bf0019bbf6d5e9b4
# eff455189b9b4bf5a7519b1ad72d467d
# 4e0528566dec4677891426eeeb49e23e
# e51e2bf3124248f580a55cc52ec155a3
# dd4ddb0c41954e469f194d9a0eef8540
# b9c0312086d24f8890a665ecb66f7296
# 9fd53a12cdf1492a95cf148e86b438b6
# 1d8902b6dcbb4403aa0454e61d78f021
# 36f5d5867a464da8911de70a711f2be9
# 1f7eb87f8f494205a2835fd68b646ee1
# 620d684c7e1c4edd9df81e03bd9c8f0c
msgid "Oracle"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:233
# 8b9ffca1cbda45d1a73fd00d9b623026
msgid "MySQL [#]_"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:233
#: ../../ref/contrib/gis/db-api.txt:276
#: ../../ref/contrib/gis/geoquerysets.txt:46
#: ../../ref/contrib/gis/geoquerysets.txt:68
#: ../../ref/contrib/gis/geoquerysets.txt:90
#: ../../ref/contrib/gis/geoquerysets.txt:112
#: ../../ref/contrib/gis/geoquerysets.txt:198
#: ../../ref/contrib/gis/geoquerysets.txt:220
#: ../../ref/contrib/gis/geoquerysets.txt:255
#: ../../ref/contrib/gis/geoquerysets.txt:336
#: ../../ref/contrib/gis/geoquerysets.txt:358
#: ../../ref/contrib/gis/geoquerysets.txt:548
#: ../../ref/contrib/gis/geoquerysets.txt:568
#: ../../ref/contrib/gis/geoquerysets.txt:588
#: ../../ref/contrib/gis/geoquerysets.txt:608
#: ../../ref/contrib/gis/testing.txt:107
# 5cd557626a07465e84da4dbb08890058
# f6483bd3ab1141c0bba03ae2ce41dbac
# 6c52040b8cda47338b16d696d786dc4c
# fe9c0772e8e6499e80be9b14af6f3c73
# e96076bf4f724b3c9f81714dcd7f666f
# a2df67c3287745178e4d68da249e1c2d
# c0af01ff1b3f46b0b52e5cbd159f9659
# e54560146ffa430eb739cae8388733a7
# 040dc3a767b84bdb81f8b753ec8e92d5
# 929170e6ec614b5d9f9ffd8411f7b37b
# 7fe3d3d320804f43b074b5bdef3ac3f4
# e8ffdaea761e4964b83658e1f50dbfa6
# 5f186ad3500f44bebe3d04c0aab5ffb1
# e08eba10eb0d4ac9a63096faa3c41e0e
# 6b7e0a483071496b91d736519c8f16a9
# 8e77bf12af1f419b8073e3df1a284bc9
msgid "SpatiaLite"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:235
# 303368bc21214bdc9dcdeaa90cf80b62
msgid ":lookup:`bbcontains`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:235
#: ../../ref/contrib/gis/db-api.txt:235
#: ../../ref/contrib/gis/db-api.txt:235
#: ../../ref/contrib/gis/db-api.txt:236
#: ../../ref/contrib/gis/db-api.txt:236
#: ../../ref/contrib/gis/db-api.txt:236
#: ../../ref/contrib/gis/db-api.txt:237
#: ../../ref/contrib/gis/db-api.txt:237
#: ../../ref/contrib/gis/db-api.txt:237
#: ../../ref/contrib/gis/db-api.txt:238
#: ../../ref/contrib/gis/db-api.txt:238
#: ../../ref/contrib/gis/db-api.txt:238
#: ../../ref/contrib/gis/db-api.txt:238
#: ../../ref/contrib/gis/db-api.txt:239
#: ../../ref/contrib/gis/db-api.txt:240
#: ../../ref/contrib/gis/db-api.txt:240
#: ../../ref/contrib/gis/db-api.txt:241
#: ../../ref/contrib/gis/db-api.txt:241
#: ../../ref/contrib/gis/db-api.txt:242
#: ../../ref/contrib/gis/db-api.txt:242
#: ../../ref/contrib/gis/db-api.txt:243
#: ../../ref/contrib/gis/db-api.txt:243
#: ../../ref/contrib/gis/db-api.txt:243
#: ../../ref/contrib/gis/db-api.txt:243
#: ../../ref/contrib/gis/db-api.txt:244
#: ../../ref/contrib/gis/db-api.txt:244
#: ../../ref/contrib/gis/db-api.txt:244
#: ../../ref/contrib/gis/db-api.txt:245
#: ../../ref/contrib/gis/db-api.txt:245
#: ../../ref/contrib/gis/db-api.txt:245
#: ../../ref/contrib/gis/db-api.txt:246
#: ../../ref/contrib/gis/db-api.txt:246
#: ../../ref/contrib/gis/db-api.txt:246
#: ../../ref/contrib/gis/db-api.txt:247
#: ../../ref/contrib/gis/db-api.txt:247
#: ../../ref/contrib/gis/db-api.txt:247
#: ../../ref/contrib/gis/db-api.txt:248
#: ../../ref/contrib/gis/db-api.txt:248
#: ../../ref/contrib/gis/db-api.txt:249
#: ../../ref/contrib/gis/db-api.txt:249
#: ../../ref/contrib/gis/db-api.txt:249
#: ../../ref/contrib/gis/db-api.txt:249
#: ../../ref/contrib/gis/db-api.txt:250
#: ../../ref/contrib/gis/db-api.txt:250
#: ../../ref/contrib/gis/db-api.txt:250
#: ../../ref/contrib/gis/db-api.txt:250
#: ../../ref/contrib/gis/db-api.txt:251
#: ../../ref/contrib/gis/db-api.txt:251
#: ../../ref/contrib/gis/db-api.txt:251
#: ../../ref/contrib/gis/db-api.txt:251
#: ../../ref/contrib/gis/db-api.txt:252
#: ../../ref/contrib/gis/db-api.txt:252
#: ../../ref/contrib/gis/db-api.txt:252
#: ../../ref/contrib/gis/db-api.txt:252
#: ../../ref/contrib/gis/db-api.txt:253
#: ../../ref/contrib/gis/db-api.txt:253
#: ../../ref/contrib/gis/db-api.txt:253
#: ../../ref/contrib/gis/db-api.txt:254
#: ../../ref/contrib/gis/db-api.txt:254
#: ../../ref/contrib/gis/db-api.txt:254
#: ../../ref/contrib/gis/db-api.txt:254
#: ../../ref/contrib/gis/db-api.txt:255
#: ../../ref/contrib/gis/db-api.txt:255
#: ../../ref/contrib/gis/db-api.txt:255
#: ../../ref/contrib/gis/db-api.txt:255
#: ../../ref/contrib/gis/db-api.txt:256
#: ../../ref/contrib/gis/db-api.txt:256
#: ../../ref/contrib/gis/db-api.txt:256
#: ../../ref/contrib/gis/db-api.txt:256
#: ../../ref/contrib/gis/db-api.txt:257
#: ../../ref/contrib/gis/db-api.txt:258
#: ../../ref/contrib/gis/db-api.txt:259
#: ../../ref/contrib/gis/db-api.txt:260
#: ../../ref/contrib/gis/db-api.txt:261
#: ../../ref/contrib/gis/db-api.txt:262
#: ../../ref/contrib/gis/db-api.txt:263
#: ../../ref/contrib/gis/db-api.txt:264
#: ../../ref/contrib/gis/db-api.txt:278
#: ../../ref/contrib/gis/db-api.txt:278
#: ../../ref/contrib/gis/db-api.txt:278
#: ../../ref/contrib/gis/db-api.txt:279
#: ../../ref/contrib/gis/db-api.txt:279
#: ../../ref/contrib/gis/db-api.txt:279
#: ../../ref/contrib/gis/db-api.txt:280
#: ../../ref/contrib/gis/db-api.txt:281
#: ../../ref/contrib/gis/db-api.txt:281
#: ../../ref/contrib/gis/db-api.txt:281
#: ../../ref/contrib/gis/db-api.txt:282
#: ../../ref/contrib/gis/db-api.txt:282
#: ../../ref/contrib/gis/db-api.txt:282
#: ../../ref/contrib/gis/db-api.txt:283
#: ../../ref/contrib/gis/db-api.txt:283
#: ../../ref/contrib/gis/db-api.txt:284
#: ../../ref/contrib/gis/db-api.txt:284
#: ../../ref/contrib/gis/db-api.txt:285
#: ../../ref/contrib/gis/db-api.txt:286
#: ../../ref/contrib/gis/db-api.txt:287
#: ../../ref/contrib/gis/db-api.txt:288
#: ../../ref/contrib/gis/db-api.txt:288
#: ../../ref/contrib/gis/db-api.txt:289
#: ../../ref/contrib/gis/db-api.txt:289
#: ../../ref/contrib/gis/db-api.txt:289
#: ../../ref/contrib/gis/db-api.txt:290
#: ../../ref/contrib/gis/db-api.txt:290
#: ../../ref/contrib/gis/db-api.txt:290
#: ../../ref/contrib/gis/db-api.txt:291
#: ../../ref/contrib/gis/db-api.txt:291
#: ../../ref/contrib/gis/db-api.txt:292
#: ../../ref/contrib/gis/db-api.txt:292
#: ../../ref/contrib/gis/db-api.txt:292
#: ../../ref/contrib/gis/db-api.txt:293
#: ../../ref/contrib/gis/db-api.txt:294
#: ../../ref/contrib/gis/db-api.txt:295
#: ../../ref/contrib/gis/db-api.txt:295
#: ../../ref/contrib/gis/db-api.txt:295
#: ../../ref/contrib/gis/db-api.txt:296
#: ../../ref/contrib/gis/db-api.txt:296
#: ../../ref/contrib/gis/db-api.txt:296
#: ../../ref/contrib/gis/db-api.txt:297
#: ../../ref/contrib/gis/db-api.txt:297
#: ../../ref/contrib/gis/db-api.txt:298
#: ../../ref/contrib/gis/db-api.txt:298
#: ../../ref/contrib/gis/db-api.txt:298
#: ../../ref/contrib/gis/db-api.txt:299
#: ../../ref/contrib/gis/db-api.txt:299
#: ../../ref/contrib/gis/db-api.txt:300
#: ../../ref/contrib/gis/db-api.txt:300
#: ../../ref/contrib/gis/db-api.txt:301
#: ../../ref/contrib/gis/db-api.txt:302
#: ../../ref/contrib/gis/db-api.txt:302
#: ../../ref/contrib/gis/db-api.txt:303
#: ../../ref/contrib/gis/db-api.txt:303
#: ../../ref/contrib/gis/db-api.txt:303
#: ../../ref/contrib/gis/db-api.txt:304
#: ../../ref/contrib/gis/db-api.txt:304
#: ../../ref/contrib/gis/db-api.txt:304
#: ../../ref/contrib/gis/db-api.txt:305
#: ../../ref/contrib/gis/db-api.txt:305
#: ../../ref/contrib/gis/db-api.txt:306
#: ../../ref/contrib/gis/db-api.txt:306
#: ../../ref/contrib/gis/db-api.txt:306
#: ../../ref/contrib/gis/db-api.txt:307
#: ../../ref/contrib/gis/db-api.txt:307
#: ../../ref/contrib/gis/db-api.txt:307
# f1ed5ce1079e4cd88131c03edcd97ac6
# 4096333559354304ba02ef5f0ad0600c
# dfb5ca7d8d1b4d708fa83a71f585400c
# c4e64bd86fd548f89b17980faff6bd3a
# b7b9152cdfd14d36bbe16480abdbd8e0
# 08337f2d72534cc6ae63bb4d67d73bad
# b697dc95568a41efb1e9616ef3e9d0d9
# 359b13ae15e54adf96c94e6f8c8f715e
# a55a71cba09c4bdfa3b04ec0a191bae6
# dbddc949c0af498fb7c7078c9a8eb3ef
# 4243b52327e04ed7b853249cdb76cc31
# 6ababc27172f409e9d1f88f1c4308a8b
# afc197ab5cbe4e52be03f9ec9673303f
# 80ec980892c84ec3be1ccc03bcf382c9
# 27af755382c54199a7ff8e547d79b84e
# d9fed0bc81024cd9855d99f747fc1ce9
# a4edfa8df3ea4304aaf89dea56be14f0
# 8e8f340170cf4daab48094076794b8ad
# 2693a4d7f2344af5956c02a19ec693fd
# 579e934e8b98441ba5454f337a758e7c
# 3ca1cd934b0e4068bc4125b728186fd4
# ca365637a1db423ab854b4dd1bfef45a
# 45a4ad7382404fed8fe4001276e32553
# 5aae8d11e5994770b6adc9f72f7f4998
# 6d838166e4eb4630ae26c27c6f6e043a
# 1752b49a770243c6b8e359e9b7959ef3
# 4c6195a6a9c74d15b90043e66cf266db
# 765bd6c496ab44899adc1a858d022c1e
# a943c2d3d8a143cd917bff81a912336c
# e5d52c8d82ce44d8a55dc7e97bd054b7
# 2966920f4019433893fb41454253edac
# b43caf55fcc342b580ca0050d67eb2da
# 061dbb3630714185ab7b0567c0f319b3
# 5f014c2079074ed89d6adc82a30fb4f9
# e71c322e66954f45bbab3fa90086ffd6
# 944b225273704c899560d4eb6dede582
# 81b3e7446514453f9fd29d20bfbf0835
# b22a61612e704967b3116d812aacc3e9
# 68f26145e023429c9ee01be416768c7c
# 9110c7ffa4bb411d9f9dc38df7cb3238
# 24a1170a02714a27a7b63e53a43a01bd
# 326d1e028937495b9df49992e15cdca0
# 74590db0257b453983b72c54e1dc2214
# 889eb48c43c74dfba6bd31d20a3c8c0b
# b92807ce3ac44188989996ee48228e3b
# ce0afe62d40040bfa35a760fbdecd9f1
# 212f93ec476d43f8bdda40407c997932
# f6645800fd8a48a899d3bf9683e3a415
# a8c429494ecf47808ab91cc8ad6b9cf3
# 71c6e3c968c14f1d8af4287a69888a3d
# cfb6e5eec25c4f0aa4614c8434d8284e
# 8b368f58f6894055973c829a3c4e4f09
# 58a97daca76b4fb3a3acdeda41426006
# ace132b1a2fd4c66aa93ca3b28b9a9ac
# 01b9131a6dc641e2b1e94b7ae24960ef
# c765768d1fc64479a62fa1d2aebe3a44
# 843a42cf2140445194169e360abde4b1
# fb208a2bf54f43e3a81ddb6dc3fae1ba
# 093b80de6b12493b9ee40a89a1c6b11e
# d8d7a80d078a4aa08f4b0541f312e486
# 2bd10d3ba05f497e8679d4276d99670a
# 2d5fc2cced7a4e2598acd6afa7c4dff7
# 6e23942321e84a6d86bb74d52fe1bc71
# ea95d3a7a52d42a7ad035fb34f62605c
# 55ba6fa1981e41e0acb92c162c88e9f5
# 786eaf5f8f2a476fb538039642a088ec
# c314a5276480418ba1efa96006b84414
# f6bdbe38e36f42a6a034338fdc6e8315
# 41fd6d5e939c4502b558c42040e37585
# 56c5c8effc2d455fb35f8341a2381fed
# 161d6994a2e2487c9740569d67ca2174
# 846e314e89ed41f79eca41c9d9f97506
# 813334bc7aea4405954bf1dde4e43df6
# 049c1de239374661abae56e029f01c3e
# 78db15bc38bf4524b406385ab31189c3
# 1f078247436045c2bab2682c438a6340
# 2d04a1eb4c954a079fb0b61bc8a9b3fb
# 81f15107b8784594942b609ab22a7f20
# 5884f1003e0b4034af36de6f617184e7
# 8a51eb3a42164e98b8c7172407c8fc10
# c35290122a9f4e9cab454565d7a2f741
# 8cb8328079114337845cb5c26e0dc418
# 448d518121414c849ed4d1e3ee8f8a0a
# afdf48082ecd4fdd8216eb73969a3cb9
# 01b577c2d1ec411cb43b2669df5725a1
# 2ca709b670cf40ca915d41f0871fa49e
# efc9173345444ae1afb588af7ff73860
# 72504876608142ac871b5a67cb1cae61
# 0079de44b176471e9aa069a2e348d81a
# 203d862f5b8f49578227cd6bdc68ee8e
# f468b1e3a0b146a6a12482e51fd21ff1
# 25a75dd966f9447980c22563af4e63a3
# 062b7a2ef6814ab59971e4111bff6710
# 4f2aea3dc26346be8bd7cee86608bb90
# a8bebf41d48048ee95e14a6022f0a78f
# c81b9ee18b0c441abe40988d5b233a90
# ef8e11d8c13f40b1bbf2ad7be1c58cb7
# e26384be94d6499097e0a0a8900ec3bf
# ab1c42d9828d4eea87f5276c481b53d8
# e9f7dd6383d243b6af8d79ddc0385dc5
# fbee14b1de524351986dd71969739a7b
# dfd36d430b59433a8ac6074676e40775
# ee218652a1fe433cac47eb7cb79c5821
# f407999af17d459e8e05914abe4e4136
# 513fef2578154fe68f5dd0f011d49aef
# 438592f782004e20ba755438d34b7e89
# ab0cece2e9d7443b82e604c837265086
# 16b5cd7266f343a79f4a5958d6c8eaf3
# 90cafde9e6834a99bbb21854c506cabe
# 7b2037544ce348cb9cf2bebeb3ae7a07
# a634758ce10b41c49ca51197aa4b74f3
# 29ac44595a6b40fdaac0d4619bde77c7
# 638b1bde8c1f49b49ca827418d7aa080
# 2ddb4b84d7684079b5fa3003068254f5
# fac151fa57ed42c8b81f93786f4e1970
# 9789352712654d6eb440c1ce0dd5a0a1
# cd7120f094fb46158a792e11dab373bd
# 5453ffd445774a439b406080fce191c1
# 3a66c77bdc2a437f8c9f868b35ed409f
# 2720e631b9f64d699579d45c339c2817
# a3a21a6ecb7b46daae58914aebdf4b56
# 727d141a127b483f968888b224d36f4f
# f99e35a842f3476b8704b7e7ed006dd1
# 598d08b663194e5f8dfd8a36b75dde19
# e4ecf977f5d24742bbe9da108ea90f8d
# 40b11a6d624a4cb49e41b47c38624afa
# accc40708eb74bcda15b32c56b952b72
# c07493ca39534aa3947bacbd2794c6f1
# 22cc2502afac4b348663d7b3c41e6796
# e565d1a12ee14e90b02ef5e66fa8072d
# 2cd9350ad86a4c1fb79aceb074920342
# 7191ba399b9144ee9ea9d00c9fb8d864
# 250c8cc684b2438b87b9366debd1d81c
# 244a20a5e7d44cbc91ab6c444e5548a3
# 1c5a75a58ce84879ba35569eef400e76
# 314008f0233042f890c6bd0b7eeb12f8
# 8dd6790475914d8aa7c56faa398bd6a7
# 16dac595b32242b6b633efba0a6634b1
# ce87c8b6f9db4d9b81a4ee002aa50546
# a5a4ef433e4b4ad9a25e586d43d3a418
# 611cf5daf7434af29940ef085b064488
# fd4472de26dd454abb3708e39e209c4e
# 55adc6b8076a45f8a6cef3756e62b5fb
# 206cf6836bd94d809d9c88f3dd6bd8d0
msgid "X"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:236
#: ../../ref/contrib/gis/model-api.txt:214
# 7194a6855b50433d9a31513cbbd93e91
# a305c29408d046a68bb8c4efc54a1e79
msgid ":lookup:`bboverlaps`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:237
# a5d874a10634414eb9cee7665de1a858
msgid ":lookup:`contained`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:238
# 69ef1df64ab543f18827ec6b4efc7d2b
msgid ":lookup:`contains <gis-contains>`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:239
# b30f11d1b9184b6d986c0da1c7817997
msgid ":lookup:`contains_properly`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:240
#: ../../ref/contrib/gis/model-api.txt:215
# c71202921d0d4f7bac3ded2388dd7afb
# 5e6d48d0e4344e1b976152c4e396da8a
msgid ":lookup:`coveredby`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:241
#: ../../ref/contrib/gis/model-api.txt:216
# ac14330054c64049a6fa38fce0ccd029
# d128feab25274c10a45d978de0d13cb0
msgid ":lookup:`covers`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:242
# 0ac60562a5764b368835555fda2837a9
msgid ":lookup:`crosses`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:243
# d4559526dfcc4db8aeb9078eea26ba1a
msgid ":lookup:`disjoint`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:249
# 8bf66650e18e4859894da281b4f28333
msgid ":lookup:`equals`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:250
# d9a309a27577424e82b9e65e450183fc
msgid ":lookup:`exact`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:251
#: ../../ref/contrib/gis/model-api.txt:217
# 27952a5a513849f7b1520ba249e1e44e
# 8b06cb33e81d44598768eadc016dc3f2
msgid ":lookup:`intersects`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:252
# 5d1d506c3f9949e4a39dce4d094384f5
msgid ":lookup:`overlaps`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:253
# eac1267490d443aba58ffa3f83a0709d
msgid ":lookup:`relate`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:254
# 262817d5bf0a491bb619ac6766ff637d
msgid ":lookup:`same_as`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:255
# aece0ce6c72247aaab161ae52679e89b
msgid ":lookup:`touches`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:256
# bf2b347cc2f1406bae35ba9a90e2d452
msgid ":lookup:`within`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:257
# 44b887633af8443ea63b7b74c384e9af
msgid ":lookup:`left`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:258
# 83ec3f72c4d642fbb138fcd333453e68
msgid ":lookup:`right`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:259
# 9e8a9c79ff7243209d753854d23c6109
msgid ":lookup:`overlaps_left`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:260
# ee9baadd87434cd7a528b70f286fb541
msgid ":lookup:`overlaps_right`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:261
# e43b1daa21324727a7994889888cdbc4
msgid ":lookup:`overlaps_above`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:262
# b751ae1f66d44cef9a3bf3033055ed81
msgid ":lookup:`overlaps_below`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:263
# 3004e9c4c20048e08fc8f546e4565e65
msgid ":lookup:`strictly_above`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:264
# c01504eb14ef4a2b83816a0b9730eee2
msgid ":lookup:`strictly_below`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:270
#: ../../ref/contrib/gis/geoquerysets.txt:638
#: ../../ref/contrib/gis/tutorial.txt:702
# 360e063dc4364306a06a3542fc5c3d36
# 1d151d8bdd2142c39f81204c2326b135
# 212f182735c24cdba9ea17fb9476a5ca
msgid "``GeoQuerySet`` Methods"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:271
# 9ba2479ae6b44d5c959134c109c50f50
msgid "The following table provides a summary of what :class:`GeoQuerySet` methods are available on each spatial backend.  Please note that MySQL does not support any of these methods, and is thus excluded from the table."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:276
# c1cc5278b9124c2b878fa76881c521f6
msgid "Method"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:278
# e8c3d8e4ffc34bf29bb0a8138f3da626
msgid ":meth:`GeoQuerySet.area`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:279
# 9161e3e56d9c4fdb9bf08f42c167e1cc
msgid ":meth:`GeoQuerySet.centroid`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:280
# 1ab6d05525614bd09769868882e58ef0
msgid ":meth:`GeoQuerySet.collect`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:281
# 0fc21376c8724facad44f47e5db1835a
msgid ":meth:`GeoQuerySet.difference`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:282
# fdcee2684a2d42138f801cbfd172a678
msgid ":meth:`GeoQuerySet.distance`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:283
# 26b718149d2c4ababc537d65f36dd5fa
msgid ":meth:`GeoQuerySet.envelope`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:284
# 31414f95a38d4967b6466314dced1faf
msgid ":meth:`GeoQuerySet.extent`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:285
# bf86ca0f8f8b4d33931172db00276886
msgid ":meth:`GeoQuerySet.extent3d`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:286
# 2183eaec1a4d49a8b8ba5bd24ab74721
msgid ":meth:`GeoQuerySet.force_rhr`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:287
# dd40e1528df34baeb17629596906bfc2
msgid ":meth:`GeoQuerySet.geohash`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:288
# a01a81a155254bb1be99af34a53b3e45
msgid ":meth:`GeoQuerySet.geojson`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:289
# 4874edb9e8384bab9eb8a93214942085
msgid ":meth:`GeoQuerySet.gml`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:290
# 320b18f0fb3344a3bf283a12ec1e0357
msgid ":meth:`GeoQuerySet.intersection`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:291
# e89fcc407e0f499a9707a1bb4870b958
msgid ":meth:`GeoQuerySet.kml`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:292
# d71f6935fac34d2bb270d3eaf5311d70
msgid ":meth:`GeoQuerySet.length`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:293
# 22faee8b9e67430192a907144855339c
msgid ":meth:`GeoQuerySet.make_line`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:294
# 72deeae792ea499b89b56a72ee27372c
msgid ":meth:`GeoQuerySet.mem_size`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:295
# 610d6117b1cb43fcaff5a4ae73dc9a0a
msgid ":meth:`GeoQuerySet.num_geom`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:296
# a5ac1543bbf84e93883ca7bffed1609e
msgid ":meth:`GeoQuerySet.num_points`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:297
# a727cb28662e4268b298978751c75aa1
msgid ":meth:`GeoQuerySet.perimeter`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:298
# 2d3cdfbb982b4e64aa1b0c8c0f3de227
msgid ":meth:`GeoQuerySet.point_on_surface`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:299
# a2f72fdcad674e6eab839a3c581631d5
msgid ":meth:`GeoQuerySet.reverse_geom`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:300
# 9fe7ca5796c64c0c8b33570688f5ac00
msgid ":meth:`GeoQuerySet.scale`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:301
# c29ec1792649433cb6dc1e9d0fca01dd
msgid ":meth:`GeoQuerySet.snap_to_grid`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:302
# 7fc232404dca458c8250cacd61b525ac
msgid ":meth:`GeoQuerySet.svg`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:303
# 692a8a35055840d287cd19de0dd2faf6
msgid ":meth:`GeoQuerySet.sym_difference`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:304
# 0ec2fab194e44a9c8b1099722b3029e6
msgid ":meth:`GeoQuerySet.transform`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:305
# 224a90c1c26348988094d8bd4ddc3f1a
msgid ":meth:`GeoQuerySet.translate`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:306
# 30799ef3a74149cd80ce570a7d5f571d
msgid ":meth:`GeoQuerySet.union`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:307
# 6ddf261046e54d308ccb7a6135220a79
msgid ":meth:`GeoQuerySet.unionagg`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:310
#: ../../ref/contrib/gis/geoip.txt:229
#: ../../ref/contrib/gis/geoquerysets.txt:1233
#: ../../ref/contrib/gis/geos.txt:948
#: ../../ref/contrib/gis/install/geolibs.txt:271
#: ../../ref/contrib/gis/install/index.txt:531
#: ../../ref/contrib/gis/measure.txt:177
#: ../../ref/contrib/gis/model-api.txt:254
#: ../../ref/contrib/gis/sitemaps.txt:25
#: ../../ref/contrib/gis/tutorial.txt:780
# 2c2b8af5c2a149cdb87a0413084014a1
# b5af21cd932340c58b10cc3b39e74f84
# 0489dd2e93dd4e8593b0ade50cc7feab
# 473350eb681a4ad891e273a07b70c636
# a8a8ea7e8205424ba9b015b8f6dea896
# 64da18cf86ff44c19ff0bea5012255af
# 377bd7e3f16940ebab288c85e6fef9c9
# ad1884cf10424728a0877915d565f675
# 545f2a7174a74910866103c8aae584ed
# b510864220c14d3db73c4129fffac374
msgid "Footnotes"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:311
# 88cd2a0cbcbb49d89f1552ffb83efb99
msgid "*See* Open Geospatial Consortium, Inc., `OpenGIS Simple Feature Specification For SQL <http://www.opengis.org/docs/99-049.pdf>`_, Document 99-049 (May 5, 1999), at  Ch. 3.2.5, p. 3-11 (SQL Textual Representation of Geometry)."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:312
# ee1e82fbe17848c180de5c5e1a88adf7
msgid "*See* `PostGIS EWKB, EWKT and Canonical Forms <http://postgis.refractions.net/documentation/manual-1.5/ch04.html#EWKB_EWKT>`_, PostGIS documentation at Ch. 4.1.2."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:313
# bd003ee8396f475db5754e4220ed41d2
msgid "*See* Howard Butler, Martin Daly, Allan Doyle, Tim Schaub, & Christopher Schmidt, `The GeoJSON Format Specification <http://geojson.org/geojson-spec.html>`_, Revision 1.0 (June 16, 2008)."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:314
# 5037641d82d843bab719726814da8bd9
msgid "*See* `PostGIS 1.4 documentation <http://postgis.refractions.net/documentation/manual-1.4/ST_Distance_Sphere.html>`_ on ``ST_distance_sphere``."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:315
# 28773f1c626549ea993d5ea94e3302da
msgid "*See* `PostGIS 1.5 documentation <http://postgis.refractions.net/documentation/manual-1.5/ST_Distance_Sphere.html>`_ on ``ST_distance_sphere``."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:316
# b68ec4ec50be47b999b001acf29c0a54
msgid "*See* `Creating Spatial Indexes <http://dev.mysql.com/doc/refman/5.1/en/creating-spatial-indexes.html>`_ in the MySQL 5.1 Reference Manual:"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:319
# 702c4f7d23534dd188aa57480433dfd5
msgid "For MyISAM tables, ``SPATIAL INDEX`` creates an R-tree index. For storage engines that support nonspatial indexing of spatial columns, the engine creates a B-tree index. A B-tree index on spatial values will be useful for exact-value lookups, but not for range scans."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:324
# 354934a8bd0c4171acc7b491bbff155f
msgid "Refer :ref:`mysql-spatial-limitations` section for more details."
msgstr ""

#: ../../ref/contrib/gis/deployment.txt:3
# afa263a7ac8443dda136bbfea6ffed1f
msgid "Deploying GeoDjango"
msgstr ""

#: ../../ref/contrib/gis/deployment.txt:5
# 06d8b81e9b5e4925a78cb6bb0691f3c6
msgid "Basically, the deployment of a GeoDjango application is not different from the deployment of a normal Django application. Please consult Django's :doc:`deployment documentation </howto/deployment/index>`."
msgstr ""

#: ../../ref/contrib/gis/deployment.txt:11
# 786dcac0f7034d7a91b6a4a9b9537542
msgid "GeoDjango uses the GDAL geospatial library which is not thread safe at this time.  Thus, it is *highly* recommended to not use threading when deploying -- in other words, use an appropriate configuration of Apache or the prefork method when using FastCGI through another Web server."
msgstr ""

#: ../../ref/contrib/gis/deployment.txt:17
# 566138d4e35f402f92f72bb01a2b1c07
msgid "For example, when configuring your application with ``mod_wsgi``, set the ``WSGIDaemonProcess`` attribute ``threads`` to ``1``, unless Apache may crash when running your GeoDjango application.  Increase the number of ``processes`` instead."
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:3
# 3fd1fb04cefb4d2f9244c4acaf4c0c83
msgid "Geographic Feeds"
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:8
# 876024ea0669402d9abccac427a141ee
msgid "GeoDjango has its own :class:`Feed` subclass that may embed location information in RSS/Atom feeds formatted according to either the `Simple GeoRSS`__ or `W3C Geo`_ standards.  Because GeoDjango's syndication API is a superset of Django's, please consult :doc:`Django's syndication documentation </ref/contrib/syndication>` for details on general usage."
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:19
#: ../../ref/contrib/gis/geoip.txt:38
#: ../../ref/contrib/gis/layermapping.txt:34
#: ../../ref/contrib/gis/measure.txt:17
#: ../../ref/contrib/gis/sitemaps.txt:11
#: ../../ref/contrib/gis/testing.txt:152
#: ../../ref/contrib/gis/testing.txt:187
#: ../../ref/contrib/sitemaps.txt:257
# 7156521bb4614b2683dbaef5b7544aa3
# c7da8c2919904ea591a8fc0bb333dbc3
# 6ac14f686ee54450b4d6e0a5089ff9ae
# 8eec0fddaada4512bc0dea374de6b6f0
# c333b67aa41646a19fe86c463e4cd952
# 427f2acca24b40c4bc018b7760a056fb
# f9cd051e69c440849230d0afe9880b19
# 55d92debcd7c4a1aa2a16cd0d7e60a3b
msgid "Example"
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:22
#: ../../ref/index.txt:3
# cd6d16f6660b414f9963be0fb02cb201
# fe851e0160af4cbc91eb246e432e192b
msgid "API Reference"
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:25
# a543596031cc439cac7c73d7be7330bc
msgid "``Feed`` Subclass"
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:29
# cfe87a979cbf4daa81acdc3c24fbb963
msgid "In addition to methods provided by the :class:`django.contrib.syndication.views.Feed` base class, GeoDjango's ``Feed`` class provides the following overrides.  Note that these overrides may be done in multiple ways::"
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:58
# 81b5716ee9364d8995b9a94d36f26e3d
msgid "Takes the object returned by ``get_object()`` and returns the *feed's* geometry.  Typically this is a ``GEOSGeometry`` instance, or can be a tuple to represent a point or a box.  For example::"
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:70
# 85feabfbf875452797afa6780827a435
msgid "Set this to return the geometry for each *item* in the feed.  This can be a ``GEOSGeometry`` instance, or a tuple that represents a point coordinate or bounding box.  For example::"
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:81
# 6909f2c2d2144a968753bdfddb497872
msgid "``SyndicationFeed`` Subclasses"
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:83
# 4066718bde8346e18d396709499f7e1f
msgid "The following :class:`django.utils.feedgenerator.SyndicationFeed` subclasses are available:"
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:94
# af01c134ff134a83a60c2423afbe4614
msgid "`W3C Geo`_ formatted feeds only support :class:`~django.contrib.gis.db.models.PointField` geometries."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:5
# b616764ee77442cc92e7e8e3b02d535d
msgid "GDAL API"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:10
# 9c02137e6fb046da90b374ec2f6ebeb1
msgid "`GDAL`__ stands for **G**\\ eospatial **D**\\ ata **A**\\ bstraction **L**\\ ibrary, and is a veritable \"swiss army knife\" of GIS data functionality.  A subset of GDAL is the `OGR`__ Simple Features Library, which specializes in reading and writing vector geographic data in a variety of standard formats."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:16
# e3dcb0d038dc4d1e95f41eda0dad7a6a
msgid "GeoDjango provides a high-level Python interface for some of the capabilities of OGR, including the reading and coordinate transformation of vector spatial data."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:22
# 9e9ed599169747128d800e671f120b64
msgid "Although the module is named ``gdal``, GeoDjango only supports some of the capabilities of OGR.  Thus, none of GDAL's features with respect to raster (image) data are supported at this time."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:33
# f97e761582184f30818097c9eb4b9124
msgid "Sample Data"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:35
# 2dae5d3cd8c64de38b0bc5b9130c1ccd
msgid "The GDAL/OGR tools described here are designed to help you read in your geospatial data, in order for most of them to be useful you have to have some data to work with.  If you're starting out and don't yet have any data of your own to use, GeoDjango comes with a number of simple data sets that you can use for testing.  This snippet will determine where these sample files are installed on your computer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:48
# aa24adf1d7034647b0a1e900450a0273
msgid "Vector Data Source Objects"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:51
# d7c6a39ce305431db53ee6ec744caa2a
msgid "``DataSource``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:53
# a0478d9ce8de45328d947f5b918e5d4f
msgid ":class:`DataSource` is a wrapper for the OGR data source object that supports reading data from a variety of OGR-supported geospatial file formats and data sources using a simple, consistent interface.  Each data source is represented by a :class:`DataSource` object which contains one or more layers of data.  Each layer, represented by a :class:`Layer` object, contains some number of geographic features (:class:`Feature`), information about the type of features contained in that layer (e.g. points, polygons, etc.), as well as the names and types of any additional fields (:class:`Field`) of data that may be associated with each feature in that layer."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:66
# 4b28f029e5634cdb8493b087c0b7f00a
msgid "The constructor for ``DataSource`` just a single parameter: the path of the file you want to read.  However, OGR also supports a variety of more complex data sources, including databases, that may be accessed by passing a special name string instead of a path.  For more information, see the `OGR Vector Formats`__ documentation.  The :attr:`name` property of a ``DataSource`` instance gives the OGR name of the underlying data source that it is using."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:75
# e69a00c897f047f4981ea4c1ea38e541
msgid "Once you've created your ``DataSource``, you can find out how many layers of data it contains by accessing the :attr:`layer_count` property, or (equivalently) by using the ``len()`` function.  For information on accessing the layers of data themselves, see the next section::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:89
# ee342dcd2f794d749836d615bf6545e5
msgid "Returns the number of layers in the data source."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:93
# 21c7d874e9f048dbbfc330291bc113c0
msgid "Returns the name of the data source."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:98
# cab1460e60d444cbbbaa29530f1ef076
msgid "``Layer``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:102
# 1da9d766e7b441a581c9cd4fe5bec561
msgid "``Layer`` is a wrapper for a layer of data in a ``DataSource`` object. You never create a ``Layer`` object directly.  Instead, you retrieve them from a :class:`DataSource` object, which is essentially a standard Python container of ``Layer`` objects.  For example, you can access a specific layer by its index (e.g. ``ds[0]`` to access the first layer), or you can iterate over all the layers in the container in a ``for`` loop.  The ``Layer`` itself acts as a container for geometric features."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:111
# d979b87834064a618f33b0e4dc7db94a
msgid "Typically, all the features in a given layer have the same geometry type. The :attr:`geom_type` property of a layer is an :class:`OGRGeomType` that identifies the feature type.  We can use it to print out some basic information about each layer in a :class:`DataSource`::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:121
# d4a810923000468e906d0771bc26c5c2
msgid "The example output is from the cities data source, loaded above, which evidently contains one layer, called ``\"cities\"``, which contains three point features.  For simplicity, the examples below assume that you've stored that layer in the variable ``layer``::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:130
# e2aafcc1a3ab442895cccd36e32a86f4
msgid "Returns the name of this layer in the data source."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:137
# 930d9dbd0fd04f9b89ff8c0b7a3364e7
msgid "Returns the number of features in the layer.  Same as ``len(layer)``::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:144
# 2ee6dc814031494a8c96b83a0c430191
msgid "Returns the geometry type of the layer, as an :class:`OGRGeomType` object::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:152
# 14dec5fd897b4023aee93706bb5b0913
msgid "Returns the number of fields in the layer, i.e the number of fields of data associated with each feature in the layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:160
# 361a9314cac242a0a4dca42bd315aa72
msgid "Returns a list of the names of each of the fields in this layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:167
# 67b640d808d44b78a4bc83378f84172d
msgid "Returns a list of the data types of each of the fields in this layer. These are subclasses of ``Field``, discussed below::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:175
# 6cb9aa13731a4649bcc8b2199341cd65
msgid "Returns a list of the maximum field widths for each of the fields in this layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:183
# bdeab92aefdb4f5ca0d6e346fef56765
msgid "Returns a list of the numeric precisions for each of the fields in this layer.  This is meaningless (and set to zero) for non-numeric fields::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:192
# 9b37b745d25a40cb80d914c2f721a05e
msgid "Returns the spatial extent of this layer, as an :class:`Envelope` object::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:200
# e4e68c3e6aa34b9dae9d9e721ac27834
msgid "Property that returns the :class:`SpatialReference` associated with this layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:210
# 4353b6258ab14111a24b30ef4831923d
msgid "If the :class:`Layer` has no spatial reference information associated with it, ``None`` is returned."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:215
# 9f7d6049ad8449dc9b9bd53e8df1983c
msgid "Property that may be used to retrieve or set a spatial filter for this layer.  A spatial filter can only be set with an :class:`OGRGeometry` instance, a 4-tuple extent, or ``None``.  When set with something other than ``None``, only features that intersect the filter will be returned when iterating over the layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:239
# c4df95d6ba7d4d3f9eabff305982bbc7
msgid "A method that returns a list of the values of a given field for each feature in the layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:247
# 9fd94954429d4d57a301753ddc50c142
msgid "A method that returns a list containing the geometry of each feature in the layer.  If the optional argument ``geos`` is set to ``True`` then the geometries are converted to :class:`~django.contrib.gis.geos.GEOSGeometry` objects. Otherwise, they are returned as :class:`OGRGeometry` objects::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:257
# 7be8b9dc3f054440a74acd3123d035d4
msgid "Returns a boolean indicating whether this layer supports the given capability (a string).  Examples of valid capability strings include: ``'RandomRead'``, ``'SequentialWrite'``, ``'RandomWrite'``, ``'FastSpatialFilter'``, ``'FastFeatureCount'``, ``'FastGetExtent'``, ``'CreateField'``, ``'Transactions'``, ``'DeleteFeature'``, and ``'FastSetNextByIndex'``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:265
# dbbbaa4551644cd9b3e5829f2c8a00f5
msgid "``Feature``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:270
# b914214538d341cfa7ccf42b2cc3168a
msgid "``Feature`` wraps an OGR feature.  You never create a ``Feature`` object directly.  Instead, you retrieve them from a :class:`Layer` object. Each feature consists of a geometry and a set of fields containing additional properties.  The geometry of a field is accessible via its ``geom`` property, which returns an :class:`OGRGeometry` object.  A ``Feature`` behaves like a standard Python container for its fields, which it returns as :class:`Field` objects: you can access a field directly by its index or name, or you can iterate over a feature's fields, e.g. in a ``for`` loop."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:281
# 99601767388942a48b6169decdb871e2
msgid "Returns the geometry for this feature, as an ``OGRGeometry`` object::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:288
# 64d84f82ea654ce9bcc00387f28547f6
msgid "A method that returns the value of the given field (specified by name) for this feature, **not** a ``Field`` wrapper object::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:296
# 47238d76252d41b89d7976bb00a9daff
msgid "Returns the type of geometry for this feature, as an :class:`OGRGeomType` object.  This will be the same for all features in a given layer, and is equivalent to the :attr:`Layer.geom_type` property of the :class:`Layer` object the feature came from."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:303
# 703da6e65b5141fbb26b5ff9dd0ffe9c
msgid "Returns the number of fields of data associated with the feature. This will be the same for all features in a given layer, and is equivalent to the :attr:`Layer.num_fields` property of the :class:`Layer` object the feature came from."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:310
# f2fe4c0636f0494db061f167959b926f
msgid "Returns a list of the names of the fields of data associated with the feature.  This will be the same for all features in a given layer, and is equivalent to the :attr:`Layer.fields` property of the :class:`Layer` object the feature came from."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:317
# 8ac3922496834f14a17c72d461aec0dc
msgid "Returns the feature identifier within the layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:324
# ab43fd35351f48a59a5b25a8d396780e
msgid "Returns the name of the :class:`Layer` that the feature came from. This will be the same for all features in a given layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:332
# b954ab90ec3c4f548d4bf330f6a057d6
msgid "A method that returns the index of the given field name.  This will be the same for all features in a given layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:339
# 8f35f0a2d333407fb0c967d4b5c66110
msgid "``Field``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:345
# bdb777285d494efca7545b9976893be2
msgid "Returns the name of this field::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:352
# ab20085c24ea491b960ef81fbffc7597
msgid "Returns the OGR type of this field, as an integer.  The ``FIELD_CLASSES`` dictionary maps these values onto subclasses of ``Field``::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:361
# a1581e55f689479ba8f4692fd1c181c5
msgid "Returns a string with the name of the data type of this field::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:368
# 9f3aff742a524a79878e0a4dd8437e27
msgid "Returns the value of this field.  The ``Field`` class itself returns the value as a string, but each subclass returns the value in the most appropriate form::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:377
# b1dcf1dcab9b4977bd8ea0d3468a7870
msgid "Returns the width of this field::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:384
# 37e20f99031c47bd8cb3b323b1f0b8c3
msgid "Returns the numeric precision of this field.  This is meaningless (and set to zero) for non-numeric fields::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:392
# a9a5f32b46d242fc8d0e5f2acf2fd636
msgid "Returns the value of the field as a double (float)::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:399
# 4ccbbe36631645889be7ec124139af63
msgid "Returns the value of the field as an integer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:406
# a0df0d4d3d604d1690e2a9b21474e5ca
msgid "Returns the value of the field as a string::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:413
# 2ddf9a925d4e4220bb9b8a0cac5125e2
msgid "Returns the value of the field as a tuple of date and time components::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:419
# c6c58569849641f080af0c2756a56c9b
msgid "``Driver``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:423
# 07dd5a038884427bbc8c019050ff2def
msgid "The ``Driver`` class is used internally to wrap an OGR :class:`DataSource` driver."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:427
# ad74cc06dacb4927a77a5033466d0d05
msgid "Returns the number of OGR vector drivers currently registered."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:431
# a27a7dd41a0549929311f0c587e0d7f1
msgid "OGR Geometries"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:434
# 03281b9701d445cdb96d50e5255ac594
msgid "``OGRGeometry``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:436
# 75fad168a1a14cc08f3c3f92e8406d73
msgid ":class:`OGRGeometry` objects share similar functionality with :class:`~django.contrib.gis.geos.GEOSGeometry` objects, and are thin wrappers around OGR's internal geometry representation.  Thus, they allow for more efficient access to data when using :class:`DataSource`. Unlike its GEOS counterpart, :class:`OGRGeometry` supports spatial reference systems and coordinate transformation::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:448
# 4fe0769ecf084411a0e6537d65f74d36
msgid "This object is a wrapper for the `OGR Geometry`__ class. These objects are instantiated directly from the given ``geom_input`` parameter, which may be a string containing WKT, HEX, GeoJSON, a ``buffer`` containing WKB data, or an :class:`OGRGeomType` object. These objects are also returned from the :class:`Feature.geom` attribute, when reading vector data from :class:`Layer` (which is in turn a part of a :class:`DataSource`)."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:460
# 2743cd1527424dedbb90efabd3d8bafa
msgid "Constructs a :class:`Polygon` from the given bounding-box (a 4-tuple)."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:464
# 96063ad72a3a4fdd86f0a20b6162599c
msgid "Returns the number of points in a :class:`LineString`, the number of rings in a :class:`Polygon`, or the number of geometries in a :class:`GeometryCollection`. Not applicable to other geometry types."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:470
# 250fcadc2e1c49d69c34d5220930595f
msgid "Iterates over the points in a :class:`LineString`, the rings in a :class:`Polygon`, or the geometries in a :class:`GeometryCollection`. Not applicable to other geometry types."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:476
# fca2039e1ad64864877a5b814f285adb
msgid "Returns the point at the specified index for a :class:`LineString`, the interior ring at the specified index for a :class:`Polygon`, or the geometry at the specified index in a :class:`GeometryCollection`.  Not applicable to other geometry types."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:483
# 9363af5f30cb41e3af0c8869f77bd1d3
msgid "Returns the number of coordinated dimensions of the geometry, i.e. 0 for points, 1 for lines, and so forth::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:491
# 94d0e93fea6a470780b45c8dacf3de83
msgid "Returns or sets the coordinate dimension of this geometry.  For example, the value would be 2 for two-dimensional geometries."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:496
# 92f01722eb1c415bb18284565681b34f
msgid "Returns the number of elements in this geometry::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:503
# 364297a24aaf4c71ae74faeef61ffec1
msgid "Returns the number of points used to describe this geometry::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:510
#: ../../ref/contrib/gis/gdal.txt:514
# 33ed9571bd334968a3acdd63f22dbf56
# 060b4521fa5c4eb891a9120f5aa51d8c
msgid "Alias for :attr:`point_count`."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:518
# f30b4168be8448e3a6672d2aef2cd9ed
msgid "Returns the type of this geometry, as an :class:`OGRGeomType` object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:522
# bd26f182307441b4a99d4408dcf90b07
msgid "Returns the name of the type of this geometry::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:529
# f45f40d5a22e4836bc1698ad790451bd
msgid "Returns the area of this geometry, or 0 for geometries that do not contain an area::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:537
# 7dc432dfca09455f8b78fbba10d14278
msgid "Returns the envelope of this geometry, as an :class:`Envelope` object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:541
# 9cabbf5146104cfd87f26276b5cb0731
msgid "Returns the envelope of this geometry as a 4-tuple, instead of as an :class:`Envelope` object::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:549
# 5e16b4a2ef6d4b98bcfa7e985ef43d28
msgid "This property controls the spatial reference for this geometry, or ``None`` if no spatial reference system has been assigned to it. If assigned, accessing this property returns a :class:`SpatialReference` object.  It may be set with another :class:`SpatialReference` object, or any input that :class:`SpatialReference` accepts. Example::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:560
# b48fb3e2e983477faa5efa115da226c6
msgid "Returns or sets the spatial reference identifier corresponding to :class:`SpatialReference` of this geometry.  Returns ``None`` if there is no spatial reference information associated with this geometry, or if an SRID cannot be determined."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:567
# cc28d9fe73a24fc7ba5aac6c6313dcf3
msgid "Returns a :class:`~django.contrib.gis.geos.GEOSGeometry` object corresponding to this geometry."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:572
# 630897f0e1dd43f3874f28abb55540b5
msgid "Returns a string representation of this geometry in GML format::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:579
# a8a7e0555adf48a8931123f3d1e4e41d
msgid "Returns a string representation of this geometry in HEX WKB format::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:586
# a556b25c3dfe4b3fae9a9f3c8ecfa309
msgid "Returns a string representation of this geometry in JSON format::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:594
# 8720d7a1f97c45ec8c2c5770f0f51916
msgid "Returns a string representation of this geometry in KML format."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:598
# 11a309fcb771452498e3dabe942a3622
msgid "Returns the size of the WKB buffer needed to hold a WKB representation of this geometry::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:606
# e6e6dbedf8eb4c018e76213bee164243
msgid "Returns a ``buffer`` containing a WKB representation of this geometry."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:610
# df754c7e30814f43be9e037ec3d9f2a0
msgid "Returns a string representation of this geometry in WKT format."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:614
# ce43195491a14ca783f5c7b5f0f6aa74
msgid "Returns the EWKT representation of this geometry."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:618
# b3870b29f80e4221950ab7a84226db45
msgid "Returns a new :class:`OGRGeometry` clone of this geometry object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:622
# fffe5d8291a54534b13ec8d9905ba6cd
msgid "If there are any rings within this geometry that have not been closed, this routine will do so by adding the starting point to the end::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:632
# aaa34940cd5d445a93a238547bc328f3
msgid "Transforms this geometry to a different spatial reference system.  May take a :class:`CoordTransform` object, a :class:`SpatialReference` object, or any other input accepted by :class:`SpatialReference` (including spatial reference WKT and PROJ.4 strings, or an integer SRID). By default nothing is returned and the geometry is transformed in-place. However, if the ``clone`` keyword is set to ``True`` then a transformed clone of this geometry is returned instead."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:642
# e7e6c01552eb4b23adfd9e0cf6a1af7e
msgid "Returns ``True`` if this geometry intersects the other, otherwise returns ``False``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:647
# b3bdad7e43ba409faa5e273de56a2030
msgid "Returns ``True`` if this geometry is equivalent to the other, otherwise returns ``False``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:652
# 1a957f90faaf48c49ffb926d46432e14
msgid "Returns ``True`` if this geometry is spatially disjoint to (i.e. does not intersect) the other, otherwise returns ``False``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:657
# 6514c643a9764c738489f6e798e7afed
msgid "Returns ``True`` if this geometry touches the other, otherwise returns ``False``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:662
# 694ce27511aa419ab2d259709a7b7399
msgid "Returns ``True`` if this geometry crosses the other, otherwise returns ``False``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:667
# 8dfc842f8bf743c98be0ee4f93f7d30f
msgid "Returns ``True`` if this geometry is contained within the other, otherwise returns ``False``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:672
# 9212f673e5cd402b9b88783482d06357
msgid "Returns ``True`` if this geometry contains the other, otherwise returns ``False``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:677
# 39ae94b7e2cf433fb240051e677f0cad
msgid "Returns ``True`` if this geometry overlaps the other, otherwise returns ``False``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:682
# 542723d1c3d34628b05e237ddb26f652
msgid "The boundary of this geometry, as a new :class:`OGRGeometry` object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:686
# 36c1e253ef824a3fb0353c1c4eaf1059
msgid "The smallest convex polygon that contains this geometry, as a new :class:`OGRGeometry` object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:691
# 17fbb62e935c45c19995eb9a86c01c29
msgid "Returns the region consisting of the difference of this geometry and the other, as a new :class:`OGRGeometry` object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:696
# 91a8e14e87ff4e9c9654665cc427fc4e
msgid "Returns the region consisting of the intersection of this geometry and the other, as a new :class:`OGRGeometry` object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:701
# 952e72d1163d416cb7fca8f927bce46b
msgid "Returns the region consisting of the symmetric difference of this geometry and the other, as a new :class:`OGRGeometry` object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:706
# dcabdedab0b9481e819580797aabaa66
msgid "Returns the region consisting of the union of this geometry and the other, as a new :class:`OGRGeometry` object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:711
# 87768dffec454dfb9d5726707e08caf3
msgid "Returns the coordinates of a point geometry as a tuple, the coordinates of a line geometry as a tuple of tuples, and so forth::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:721
# 8699e9a1e40644f4ab282092f1dd0f11
msgid "An alias for :attr:`tuple`."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:727
# 81452df3440247458d803ce22fa500f5
msgid "Returns the X coordinate of this point::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:734
# 6f183bc7dbb44cc395813ae1901ce223
msgid "Returns the Y coordinate of this point::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:741
# 4a03100df07f408e8ab68d6a952712d5
msgid "Returns the Z coordinate of this point, or ``None`` if the the point does not have a Z coordinate::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:751
# 9d2aaeae26764b12981bb387eece6576
msgid "Returns a list of X coordinates in this line::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:758
# 31decde4a7564a8292ed54b2fb979fec
msgid "Returns a list of Y coordinates in this line::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:765
# 32bcdabea4424a46873213dff5710136
msgid "Returns a list of Z coordinates in this line, or ``None`` if the line does not have Z coordinates::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:776
# 66d6efe764644cbc84400fd0316c373f
msgid "Returns the shell or exterior ring of this polygon, as a ``LinearRing`` geometry."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:781
# 1210438389174924b9cbf6a18a62e438
msgid "An alias for :attr:`shell`."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:785
# 564037793803487fb9d7c7b192ff95bf
msgid "Returns a :class:`Point` representing the centroid of this polygon."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:791
# ef72214f315549e9a6c9b5d06f559203
msgid "Adds a geometry to this geometry collection.  Not applicable to other geometry types."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:796
# e267f9171d804294a009faae9df5f7ca
msgid "``OGRGeomType``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:800
# bef64954b6174d85a043cbc075434f34
msgid "This class allows for the representation of an OGR geometry type in any of several ways::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:812
# 62597ca452954179a771545609196268
msgid "Returns a short-hand string form of the OGR Geometry type::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:819
# a435f0d4a57b4ba4b055cf7ba22a065d
msgid "Returns the number corresponding to the OGR geometry type::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:826
# 15b5173b10b34ab08e9ed8389f6e7bf2
msgid "Returns the Django field type (a subclass of GeometryField) to use for storing this OGR type, or ``None`` if there is no appropriate Django type::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:834
# f532b3c7e20d4facb1b9bf285e4885d2
msgid "``Envelope``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:838
# f388d6fa51a242518e7042d5c8efd20d
msgid "Represents an OGR Envelope structure that contains the minimum and maximum X, Y coordinates for a rectangle bounding box. The naming of the variables is compatible with the OGR Envelope C structure."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:845
# 15d0f8118d2547c9828d7949af6d8859
msgid "The value of the minimum X coordinate."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:849
# ff5ac3f3838d485caf2fa5b35eb979b8
msgid "The value of the maximum X coordinate."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:853
# 54557faefa9f4d6ea926d73402087034
msgid "The value of the minimum Y coordinate."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:857
# 8a5197d595824bd7bf73b28b65f70537
msgid "The value of the maximum Y coordinate."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:861
# eebddfd750a246df85af961de948716b
msgid "The upper-right coordinate, as a tuple."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:865
# 32a196e907524c12ace9ca940d6ef59d
msgid "The lower-left coordinate, as a tuple."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:869
# 4583c020d53c4a79ba32f49f643ca2ef
msgid "A tuple representing the envelope."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:873
# ba9923cbe1484e5e9c06aada84ccffb1
msgid "A string representing this envelope as a polygon in WKT format."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:879
# e5f79baa556c4f6c8b5dbf619a3efd37
msgid "Coordinate System Objects"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:882
# 8e9ef786558a4ca888e20d54c26ba440
msgid "``SpatialReference``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:886
# 3585f6d704834e11967eacfe8703d49e
msgid "Spatial reference objects are initialized on the given ``srs_input``, which may be one of the following:"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:889
# 133bac8be1be46e691e711642f11f07c
msgid "OGC Well Known Text (WKT) (a string)"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:890
# 3eca9ea28a9445db8606d30ffd7eeffe
msgid "EPSG code (integer or string)"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:891
# ad8917fe08d64275a9e9665d2f526c4a
msgid "PROJ.4 string"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:892
# eefa5612ba124fa6918f691beb06e3c9
msgid "A shorthand string for well-known standards (``'WGS84'``, ``'WGS72'``, ``'NAD27'``, ``'NAD83'``)"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:914
# 9aa017f9943948548791aa1f47f04ae8
msgid "Returns the value of the given string attribute node, ``None`` if the node doesn't exist.  Can also take a tuple as a parameter, (target, child), where child is the index of the attribute in the WKT.  For example::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:937
# 0dae5a26e39c4509942f45014b2a9db1
msgid "The attribute value for the given target node (e.g. ``'PROJCS'``). The index keyword specifies an index of the child node to return."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:942
# ed1eb7f9d55e4359bc8da096ea8693fa
msgid "Returns the authority name for the given string target node."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:946
# bdfd38db8c4046ecb0709e6e29448ac7
msgid "Returns the authority code for the given string target node."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:950
# 08f740b44c6d4e1ab7965cb796107967
msgid "Returns a clone of this spatial reference object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:954
# 63b8ea967a4749c9b93feda23e03f203
msgid "This method inspects the WKT of this SpatialReference, and will add EPSG authority nodes where an EPSG identifier is applicable."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:959
# 1dfecf43a4644a1ba5dac74f05d32421
msgid "Morphs this SpatialReference from ESRI's format to EPSG"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:963
# f7185245137c4b39818f202f2f418861
msgid "Morphs this SpatialReference to ESRI's format."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:967
# eb97699c31dd4fd993e485c338a9c50b
msgid "Checks to see if the given spatial reference is valid, if not an exception will be raised."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:972
# 41f378ec285f49c3a6b74c57a0ef95e0
msgid "Import spatial reference from EPSG code."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:976
# 960749ad78e34060a8f829a99e600942
msgid "Import spatial reference from PROJ.4 string."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:982
# e63a5e9861974b1faa3cddb55b974db1
msgid "Import spatial reference from WKT."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:986
# d1bb18e0c9ce46d48e6a4485fc944e36
msgid "Import spatial reference from XML."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:990
# ab37d823f85d402e8ce642308f9a0862
msgid "Returns the name of this Spatial Reference."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:994
# 634cb810f98e499ea1186966e3b32267
msgid "Returns the SRID of top-level authority, or ``None`` if undefined."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:998
# 58e55ec2872b4a4aaf3805dcb7f8a72c
msgid "Returns the name of the linear units."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1002
# 1c7592d737824d09911730e14e41c9ac
msgid "Returns the value of the linear units."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1006
# 5c41df2f15a444c69829c0d7237cc81d
msgid "Returns the name of the angular units.\""
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1010
# 58afb16a043e42b381783e7318d32442
msgid "Returns the value of the angular units."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1014
# 404812e614b748048fc63090821ef5eb
msgid "Returns a 2-tuple of the units value and the units name, and will automatically determines whether to return the linear or angular units."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1020
# 609e54abee2a4360b77b19d2c82d324b
msgid "Returns a tuple of the ellipsoid parameters for this spatial reference: (semimajor axis, semiminor axis, and inverse flattening)"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1025
# 1953147c70e644b6a561092374268723
msgid "Returns the semi major axis of the ellipsoid for this spatial reference."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1029
# 3a2cbf7e349845b4925550c58c63b32a
msgid "Returns the semi minor axis of the ellipsoid for this spatial reference."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1033
# 1e064f9e4db24a9aa569fcc6c28288b6
msgid "Returns the inverse flattening of the ellipsoid for this spatial reference."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1037
# fdc8a92e33e4485d962f4e7418d680e4
msgid "Returns ``True`` if this spatial reference is geographic (root node is ``GEOGCS``)."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1042
# 9c479a24189f4094afa6948ac2c2eae8
msgid "Returns ``True`` if this spatial reference is local (root node is ``LOCAL_CS``)."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1047
# b09720fd136148a89c326921dbc9e2e2
msgid "Returns ``True`` if this spatial reference is a projected coordinate system (root node is ``PROJCS``)."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1052
# d3c7de84e84245428e65fa001d997a52
msgid "Returns the WKT representation of this spatial reference."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1056
# 902cd66c38f74e15ad307d95a174bcfe
msgid "Returns the 'pretty' representation of the WKT."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1060
# b09b37ff659f4422a13229bf77a3f7e9
msgid "Returns the PROJ.4 representation for this spatial reference."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1064
# a310d98780694788ac4386932ff3a749
msgid "Alias for :attr:`SpatialReference.proj`."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1068
# 2d807bb857644eccaa54b34f98411784
msgid "Returns the XML representation of this spatial reference."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1072
# 4b566dd5faad4a9185bccaaa65378b4b
msgid "``CoordTransform``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1076
# fdd26c309f0d428aa11ce1d3cfd92fc1
msgid "Represents a coordinate system transform.  It is initialized with two :class:`SpatialReference`, representing the source and target coordinate systems, respectively.  These objects should be used when performing the same coordinate transformation repeatedly on different geometries::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1092
# ba7469e38f6e478ca3af4b8bb7b33d03
msgid "GDAL_LIBRARY_PATH"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1094
# 45b27454ba9e4976ad5cc59f9b856b84
msgid "A string specifying the location of the GDAL library.  Typically, this setting is only used if the GDAL library is in a non-standard location (e.g., ``/home/john/lib/libgdal.so``)."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:5
# 1a1101cace074226a848d0400270278f
msgid "Geolocation with GeoIP"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:14
# b6e3c83027894a05b3bc1e59f176bf28
msgid "In Django 1.4, the :class:`GeoIP` object was moved out of :mod:`django.contrib.gis.utils` and into its own module, :mod:`django.contrib.gis.geoip`. A shortcut is still provided in ``utils``, but will be removed in Django 1.6."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:19
# 686231a422404101a2879fa6d318d0ea
msgid "The :class:`GeoIP` object is a ctypes wrapper for the `MaxMind GeoIP C API`__. [#]_  This interface is a BSD-licensed alternative to the GPL-licensed `Python GeoIP`__ interface provided by MaxMind."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:23
# ec5bfc5484d34701be85e0ff5c186672
msgid "In order to perform IP-based geolocation, the :class:`GeoIP` object requires the GeoIP C libary and either the GeoIP `Country`__ or `City`__ datasets in binary format (the CSV files will not work!).  These datasets may be `downloaded from MaxMind`__.  Grab the ``GeoLiteCountry/GeoIP.dat.gz`` and ``GeoLiteCity.dat.gz`` files and unzip them in a directory corresponding to what you set :setting:`GEOIP_PATH` with in your settings.  See the example and reference below for more details."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:40
# 4a03955669bb41529c839fef19bbb5d9
msgid "Assuming you have the GeoIP C library installed, here is an example of its usage::"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:66
# 2e0a70c0dd65487eab7e4079a994ee2c
msgid "``GeoIP`` Settings"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:71
# 6de15f68cffd4deb8e82388dc7a1d800
msgid "GEOIP_PATH"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:73
# 30007584772446f5831e1a12ff736f14
msgid "A string specifying the directory where the GeoIP data files are located.  This setting is *required* unless manually specified with ``path`` keyword when initializing the :class:`GeoIP` object."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:80
# fcb05f524e3b4bbf81cfffe5c1991f62
msgid "GEOIP_LIBRARY_PATH"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:82
# 451bc150c0b14c648c257ceafb4eccd7
msgid "A string specifying the location of the GeoIP C library.  Typically, this setting is only used if the GeoIP C library is in a non-standard location (e.g., ``/home/sue/lib/libGeoIP.so``)."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:89
# ddce836df6e04e67803c53355403a7bf
msgid "GEOIP_COUNTRY"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:91
# f66db97eee6c4017a3ebda07a27d98e3
msgid "The basename to use for the GeoIP country data file. Defaults to ``'GeoIP.dat'``."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:97
# 6c460bca3b9d4c428fc7bc05449689ab
msgid "GEOIP_CITY"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:99
# a8423c199b664e94bbdfd2b83a2d56d9
msgid "The basename to use for the GeoIP city data file. Defaults to ``'GeoLiteCity.dat'``."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:103
# 64cb93420646446f90c659bc553dda7b
msgid "``GeoIP`` API"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:107
# 74fb4ffd7dc143a79cf420d009c1b139
msgid "The ``GeoIP`` object does not require any parameters to use the default settings.  However, at the very least the :setting:`GEOIP_PATH` setting should be set with the path of the location of your GeoIP data sets.  The following intialization keywords may be used to customize any of the defaults."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:114
#: ../../ref/contrib/gis/layermapping.txt:112
# 3800ef367aa24c42807624ac116e50ba
# eef487a4374b4b9d9f176c7982f79e12
msgid "Keyword Arguments"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:114
#: ../../ref/contrib/gis/geoquerysets.txt:659
#: ../../ref/contrib/gis/geoquerysets.txt:837
#: ../../ref/contrib/gis/geoquerysets.txt:956
#: ../../ref/contrib/gis/geoquerysets.txt:989
#: ../../ref/contrib/gis/geoquerysets.txt:1022
#: ../../ref/contrib/gis/geoquerysets.txt:1042
#: ../../ref/contrib/gis/geoquerysets.txt:1180
#: ../../ref/contrib/gis/geos.txt:879
#: ../../ref/contrib/gis/geos.txt:902
#: ../../ref/contrib/gis/install/geolibs.txt:11
#: ../../ref/contrib/gis/layermapping.txt:95
#: ../../ref/contrib/gis/layermapping.txt:157
#: ../../ref/contrib/webdesign.txt:40
#: ../../ref/models/fields.txt:529
#: ../../ref/templates/builtins.txt:312
#: ../../ref/templates/builtins.txt:1205
# 4c77d7b8d2b9411d901890838391a114
# 8b38d07ccc394340adc2dec00b8dbd14
# 2b8be4d0856b42529df33ec666d165aa
# e6c37b323f2248948370ca853ef4326d
# 088751d11bdf4f4b848fd7e10ae3e24c
# 9c3477ead2444a178d682af804d015c6
# 6721cbbbc5a94c39b89be99ee750e9b2
# 17ed6bbc84844025ac0322912e9dea2b
# 45ce25ae7f60435986e8f16ad1adba8f
# ada848e0778a4402901ef2eb853c936d
# 983e5d3ba52d4654805e5faaef5c1fcd
# 29ef99f9e84e4257a99de8489c245ff2
# 6dd6291c45394f0ebf86392ffa388e02
# 1c0cbf3f666f47e69464ee69ff9ab841
# c44fea2410b54be7a292c44852a3cb83
# eee9d179e707495086ad58c87c8a587d
# 6c876525d4c34bbe8dbd2a72fd3754a2
msgid "Description"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:116
# e76e6f0790b34831bed43d367a59d136
msgid "``path``"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:116
# d0735252b28c49789ba54891295ad91e
msgid "Base directory to where GeoIP data is located or the full path to where the city or country data files (.dat) are located.  Assumes that both the city and country data sets are located in this directory; overrides the :setting:`GEOIP_PATH` settings attribute."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:122
# a5d13c2067ed4edd9762437b3755ecaa
msgid "``cache``"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:122
# c4bbf3fbd6354210a78127468bcfdf5e
msgid "The cache settings when opening up the GeoIP datasets, and may be an integer in (0, 1, 2, 4) corresponding to the ``GEOIP_STANDARD``, ``GEOIP_MEMORY_CACHE``, ``GEOIP_CHECK_CACHE``, and ``GEOIP_INDEX_CACHE`` ``GeoIPOptions`` C API settings, respectively. Defaults to 0 (``GEOIP_STANDARD``)."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:129
# 0a18dd4124614b1989128496e31b70a5
msgid "``country``"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:129
# 785a97fa6ab04135bb24d0614e8f430c
msgid "The name of the GeoIP country data file.  Defaults to ``GeoIP.dat``.  Setting this keyword overrides the :setting:`GEOIP_COUNTRY` settings attribute."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:133
# 220a44b82edc4f4d9d6c5d10124f51f6
msgid "``city``"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:133
# 64ac1ac508674fb8a75af582c6248c91
msgid "The name of the GeoIP city data file.  Defaults to ``GeoLiteCity.dat``.  Setting this keyword overrides the :setting:`GEOIP_CITY` settings attribute."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:139
# 997913d77f18486a997b91f365ec66d1
msgid "``GeoIP`` Methods"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:142
# 776b8316fdc148a28a9258933083ec52
msgid "Querying"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:144
# f510e56d71ed4f798b5d7b9d34808015
msgid "All the following querying routines may take either a string IP address or a fully qualified domain name (FQDN).  For example, both ``'205.186.163.125'`` and ``'djangoproject.com'`` would be valid query parameters."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:151
# 8fd46926bf8b496084401ce46bb7fc2b
msgid "Returns a dictionary of city information for the given query.  Some of the values in the dictionary may be undefined (``None``)."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:156
# aa66ae734fc74a0082dcce677fe71b96
msgid "Returns a dictionary with the country code and country for the given query."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:161
# b1875a41cd5a46008c7078fb198f6572
msgid "Returns only the country code corresponding to the query."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:165
# f4e21f60f27d40bc9fb8b7214fee01b9
msgid "Returns only the country name corresponding to the query."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:168
# 0cb3fa4fefb94b91a3935eb69ee3d5c6
msgid "Coordinate Retrieval"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:172
#: ../../ref/contrib/gis/geoip.txt:176
# 5d0947ef29d14871b0bedda08e98ab8d
# 73dc0369df6a4767ba41a414dc9b9d7a
msgid "Returns a coordinate tuple of (longitude, latitude)."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:180
# 6eb966b96df24a2eb859f1b320dfe1d8
msgid "Returns a coordinate tuple of (latitude, longitude),"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:184
# 4c157ea3bf50423ca3d9eaee3a760140
msgid "Returns a :class:`django.contrib.gis.geos.Point` object corresponding to the query."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:187
# bb261d67945e4f2a848f1d755f454dc9
msgid "Database Information"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:191
# 6ddb84c4044043b7b77ba4f41842414e
msgid "This property returns information about the GeoIP country database."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:195
# 51dde1ee517a4fe3b4c1b0ec6a40e6f1
msgid "This property returns information about the GeoIP city database."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:199
# dfacedcb848a4ab397076a05c2637c21
msgid "This property returns information about all GeoIP databases (both city and country), and the version of the GeoIP C library (if supported)."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:203
# 26e74b3671c44353806922d393bc2cf2
msgid "GeoIP-Python API compatibility methods"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:205
# c7497dc4b59e40c088510688bb775d22
msgid "These methods exist to ease compatibility with any code using MaxMind's existing Python API."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:210
# 2ace4c794fec46a1aa5f86d7546ed940
msgid "This classmethod instantiates the GeoIP object from the given database path and given cache setting."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:230
# 8bb62e589e6a4a83a1e308e1fccc702a
msgid "GeoIP(R) is a registered trademark of MaxMind, LLC of Boston, Massachusetts."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:5
# 16b6236316f842efa6569fbf46d13926
msgid "GeoQuerySet API Reference"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:17
# 74acdaf0a917467fbdbde4c2349a38c4
msgid "Just like when using the :ref:`queryset-api`, interaction with ``GeoQuerySet`` by :ref:`chaining filters <chaining-filters>`. Instead of the regular Django :ref:`field-lookups`, the spatial lookups in this section are available for :class:`GeometryField`."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:22
# eef6b035b49f4c30a67d5361c9b7ad5d
msgid "For an introduction, see the :ref:`spatial lookups introduction <spatial-lookups-intro>`.  For an overview of what lookups are compatible with a particular spatial backend, refer to the :ref:`spatial lookup compatibility table <spatial-lookup-compatibility>`."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:30
# c293c378679f4b28a2a1f3dbd0ca4a3a
msgid "bbcontains"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:32
#: ../../ref/contrib/gis/geoquerysets.txt:54
#: ../../ref/contrib/gis/geoquerysets.txt:76
# f3743c6f04444f078b9a358e6982468e
# 6d7edfe83c124ffeb4fd4344df163f77
# 2695a494a6e14e5ba9698f2f834c08b7
msgid "*Availability*: PostGIS, MySQL, SpatiaLite"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:34
# 7ce862e03dbb431d94d8c4c3d6d054e7
msgid "Tests if the geometry field's bounding box completely contains the lookup geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:42
#: ../../ref/contrib/gis/geoquerysets.txt:64
#: ../../ref/contrib/gis/geoquerysets.txt:86
#: ../../ref/contrib/gis/geoquerysets.txt:107
#: ../../ref/contrib/gis/geoquerysets.txt:134
#: ../../ref/contrib/gis/geoquerysets.txt:154
#: ../../ref/contrib/gis/geoquerysets.txt:175
#: ../../ref/contrib/gis/geoquerysets.txt:195
#: ../../ref/contrib/gis/geoquerysets.txt:215
#: ../../ref/contrib/gis/geoquerysets.txt:250
#: ../../ref/contrib/gis/geoquerysets.txt:331
#: ../../ref/contrib/gis/geoquerysets.txt:353
#: ../../ref/contrib/gis/geoquerysets.txt:544
#: ../../ref/contrib/gis/geoquerysets.txt:564
#: ../../ref/contrib/gis/geoquerysets.txt:584
#: ../../ref/contrib/gis/geoquerysets.txt:604
#: ../../ref/contrib/gis/geoquerysets.txt:624
# 4a3cc60dec7a4322821a5f4c5b8bed27
# fabb4d84647141869b01f7509ad5117c
# 6931a029d12b4bbe89a6f6e4a7e1fcb6
# 28c165e409824680af24e79907aeea72
# 04ff7e197b794c2eb630819eba110460
# dd9ec9838c7845bf8cb61d9d7a27771f
# 137edbfca4c14ced935c5a07b401899f
# 465d258329714f0db286ba21da401d5e
# 5e38fe6728a84499851a3a7fbbf1ffc0
# e3bb5efece804a2eba5561ff32c7a6ec
# fbbdbfbdb8c84c828dba6b61471c7b86
# 2bee67ab32f04be58315efce534b4d3c
# ab4bbbeafc3d4513b40e1aaa0b322441
# 87f688d0edc744adaa6e29452fa85f9f
# fb92d4292c6f40d383c91bb408c023b4
# 9d84905a7d3f4a2199ac180f675f6278
# 035fd6318be2445bae21df36db70437e
msgid "Backend"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:42
#: ../../ref/contrib/gis/geoquerysets.txt:64
#: ../../ref/contrib/gis/geoquerysets.txt:86
#: ../../ref/contrib/gis/geoquerysets.txt:107
#: ../../ref/contrib/gis/geoquerysets.txt:134
#: ../../ref/contrib/gis/geoquerysets.txt:154
#: ../../ref/contrib/gis/geoquerysets.txt:175
#: ../../ref/contrib/gis/geoquerysets.txt:195
#: ../../ref/contrib/gis/geoquerysets.txt:215
#: ../../ref/contrib/gis/geoquerysets.txt:250
#: ../../ref/contrib/gis/geoquerysets.txt:331
#: ../../ref/contrib/gis/geoquerysets.txt:353
#: ../../ref/contrib/gis/geoquerysets.txt:544
#: ../../ref/contrib/gis/geoquerysets.txt:564
#: ../../ref/contrib/gis/geoquerysets.txt:584
#: ../../ref/contrib/gis/geoquerysets.txt:604
#: ../../ref/contrib/gis/geoquerysets.txt:624
# 8bd7a13c72fc4b8596e6eab4cc062b9c
# 9ab605a8546b4690981ee43ef51c81d6
# 198a47e731374d5a809d4597397dcde5
# ae23b86a12434f89b2bd17abac4e8855
# 97d3be89c1f94c05838c6f8e50cd630c
# f24fe5732a274903a94c872ea4588a84
# c34134d9512144c3920c5fc9ba79f714
# 425b9d73150b4624bb3e166e510473ca
# b678833601d94244ad240341403c71c5
# d2f3bc1ff486401fb95fdd03dec6fe74
# 77475c22f7fa4825bb91617a7e55ca85
# 1f76a545e7374384937a466b4c510b93
# 212208f10e5c4329a20a630e69baa5a7
# 41d228244e7746bbbb3d7063a08fbea2
# a31dc9d1b0e64608a2bfb8460f933929
# bafeb1afaaf542e09d1401d34a5402fd
# 25a9476b2c5d4fb6a1c883018578a4aa
msgid "SQL Equivalent"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:44
# e098e6bd01d64964975af336002bfc7b
msgid "``poly ~ geom``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:45
#: ../../ref/contrib/gis/geoquerysets.txt:67
#: ../../ref/contrib/gis/geoquerysets.txt:89
#: ../../ref/contrib/gis/geoquerysets.txt:111
#: ../../ref/contrib/gis/geoquerysets.txt:219
#: ../../ref/contrib/gis/geoquerysets.txt:254
#: ../../ref/contrib/gis/geoquerysets.txt:334
#: ../../ref/contrib/gis/geoquerysets.txt:356
#: ../../ref/contrib/gis/install/index.txt:65
# 8fa68d10fa8245d0b8e10661b3325db4
# 3c72d0a6e49c47a7a7006de518ff07fc
# c51a4db804d8490f8642ca209a9af08e
# e2d5ed5b03bf46deaccf10d8060b7fd9
# 80c4d80a92b14ce8bc5d740f8e8a91bb
# 4c12c3cb84114642bca5f41fd0628f78
# 9b2a564d849b4f5a9dbf2c2eb7259d95
# e249f62694ba40f3a4eedd347802d0fb
# fb58f5e2ea99472ba54056da325b389d
msgid "MySQL"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:45
#: ../../ref/contrib/gis/geoquerysets.txt:111
# 03778fff1da647788eacddf39cdd60bc
# 9e8ed9b366a04d888472a8bc45ee52ed
msgid "``MBRContains(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:46
# 8f3b173f4fbc41d0a8602261ae96feff
msgid "``MbrContains(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:52
# 349416441b9d48ea9092aac151d0cd4f
msgid "bboverlaps"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:56
# 9030c07d2c0f401c916dce5f4f061d4b
msgid "Tests if the geometry field's bounding box overlaps the lookup geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:66
# 18e5b0a0f2f8439fa8f931bdc956e972
msgid "``poly && geom``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:67
# 6273be222e494cb0a2eae764fbce697d
msgid "``MBROverlaps(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:68
# 6dcc5898d8a4407daae4cd1f7ded89b9
msgid "``MbrOverlaps(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:74
# a8e90e0996a04ddd9bef1733883ac754
msgid "contained"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:78
# ee73efe8b1c349009910eb6cd47d8ea7
msgid "Tests if the geometry field's bounding box is completely contained by the lookup geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:88
# 6bf5e81c01ea48359ca2c006920bfe0b
msgid "``poly @ geom``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:89
#: ../../ref/contrib/gis/geoquerysets.txt:356
# 1d0c3f29359544289b6583343449adc5
# 8be0f3ad2f134b788d522c139a9b0a7c
msgid "``MBRWithin(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:90
# b74e4eb2d1c64915bab2598f9390b780
msgid "``MbrWithin(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:96
#: ../../ref/models/querysets.txt:1767
# 046351f2edfe4d7a87b544bf9a0cbb7d
# 0d03a861210f4c6f97518bbbb20b61e7
msgid "contains"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:98
#: ../../ref/contrib/gis/geoquerysets.txt:206
#: ../../ref/contrib/gis/geoquerysets.txt:226
#: ../../ref/contrib/gis/geoquerysets.txt:234
#: ../../ref/contrib/gis/geoquerysets.txt:241
#: ../../ref/contrib/gis/geoquerysets.txt:263
#: ../../ref/contrib/gis/geoquerysets.txt:322
#: ../../ref/contrib/gis/geoquerysets.txt:344
# 9f455d0950e8488cb2d7f25746c9a1b7
# bc381d6ca6bf4ba6a60e623de8f7fea2
# 85c84f41ae6b423e9909b3cbcd24ea1f
# 0e8017582420467c842b9095b4ddd0de
# 9f3bdb2d527a4ba0bd09d53e1b6686ff
# 7489fc5b0d154882bbcb03b04de46cea
# da58f0fc9aea4c4ca21c40f02f504546
# 59e0e570ec734a33be18d20420a4895b
msgid "*Availability*: PostGIS, Oracle, MySQL, SpatiaLite"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:100
# 878c89f0757e49eaaf732a5ca865509b
msgid "Tests if the geometry field spatially contains the lookup geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:109
# 047b8ad32d9c453989bd588520f491e1
msgid "``ST_Contains(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:110
# 704b0c23dac146b7ac1bdbae0be76ece
msgid "``SDO_CONTAINS(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:112
# 3364efe08e1e47238138288de551406e
msgid "``Contains(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:118
# 929b6c41cb0d4f2698f353d46fa3bfb2
msgid "contains_properly"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:120
#: ../../ref/contrib/gis/geoquerysets.txt:366
#: ../../ref/contrib/gis/geoquerysets.txt:384
#: ../../ref/contrib/gis/geoquerysets.txt:402
#: ../../ref/contrib/gis/geoquerysets.txt:421
#: ../../ref/contrib/gis/geoquerysets.txt:439
#: ../../ref/contrib/gis/geoquerysets.txt:457
#: ../../ref/contrib/gis/geoquerysets.txt:475
#: ../../ref/contrib/gis/geoquerysets.txt:493
#: ../../ref/contrib/gis/geoquerysets.txt:804
#: ../../ref/contrib/gis/geoquerysets.txt:1063
#: ../../ref/contrib/gis/geoquerysets.txt:1102
#: ../../ref/contrib/gis/geoquerysets.txt:1131
#: ../../ref/contrib/gis/geoquerysets.txt:1147
# 852bb6f7ed124a39829c149ce8829651
# 6260db79688d465780e205d53a69b612
# 72ec1d06632e48f49f07f1a41b621c95
# c96f141667f945e59400a9acb624d600
# c95c4b497cd445dbb08412981aa5e44f
# b2a07af315254f019a774df063f8ab1c
# e5297a0e1fbe4861a52a634318904f38
# 6cc1e8f4a7ee49f488efc69f975ee6ea
# 49e253ab32bc42ec8079ba17bcab0e4b
# d085c00d7f4c4d929c00283aa92d247d
# d7dd1e4187f24db78debb6279c8aeccc
# 0891cf923bdb467ab30b33f129cd4be8
# ab99855066a74081a74672310fe74c18
# 8066cb1f431b463aa4d4445f87fe28f7
msgid "*Availability*: PostGIS"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:122
# cba78f09e30f4443bf4ca0997849b555
msgid "Returns true if the lookup geometry intersects the interior of the geometry field, but not the boundary (or exterior). [#fncontainsproperly]_"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:127
# ec08846c52794c22952cc9baa9171e74
msgid "Requires PostGIS 1.4 and above."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:136
# d054130f30b2409f9b59b05245051f40
msgid "``ST_ContainsProperly(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:142
# 68a77837c4cd487ea332d557ae71fa59
msgid "coveredby"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:144
#: ../../ref/contrib/gis/geoquerysets.txt:165
#: ../../ref/contrib/gis/geoquerysets.txt:815
#: ../../ref/contrib/gis/geoquerysets.txt:1115
# 2ae66dbc79ee4656ae44e2986c055f34
# f35c4b5b97824eea94ab0a9733dba97f
# 74136839d3e748c6a4c1f8749daa98b9
# 59831c1f4d044ab286753b01a279537d
msgid "*Availability*: PostGIS, Oracle"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:146
# 758a71c4c59e4eab8b4d7e3fd0eae8a1
msgid "Tests if no point in the geometry field is outside the lookup geometry. [#fncovers]_"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:156
# 2edec1c66be64b4087b811249c7152dc
msgid "``ST_CoveredBy(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:157
# 1c8705e3b00c4519be98cb7d18b996f2
msgid "``SDO_COVEREDBY(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:163
# 31ab872632234ac1b1ad1af3128a981c
msgid "covers"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:167
# 45bf3fba04bb46d88352e5143de702a1
msgid "Tests if no point in the lookup geometry is outside the geometry field. [#fncovers]_"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:177
# 16de40f24bd842f9a3afda61f65d7c90
msgid "``ST_Covers(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:178
# 4d317ac8a3ce47f185860e97ae6c628d
msgid "``SDO_COVERS(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:184
# 8ef21af1f0ec41299446a102311bc270
msgid "crosses"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:186
#: ../../ref/contrib/gis/geoquerysets.txt:780
#: ../../ref/contrib/gis/geoquerysets.txt:825
#: ../../ref/contrib/gis/geoquerysets.txt:880
#: ../../ref/contrib/gis/geoquerysets.txt:950
#: ../../ref/contrib/gis/geoquerysets.txt:1008
#: ../../ref/contrib/gis/geoquerysets.txt:1036
# 9030d75026464ee7a8eade1324a6b00b
# d99a51fea1d04996862735973b268dd7
# 13fbd398db5643babb9d5207528edf7c
# de2f3d15427f481d9661a3ea79b828c7
# de529ef5717e4690a75016962af57437
# bd7483596cd54466919c434bfc9c93ad
# 7750be9d29404091b90e5de61c176569
msgid "*Availability*: PostGIS, SpatiaLite"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:188
# f67a41a294c8440cbf3fde429fc322c9
msgid "Tests if the geometry field spatially crosses the lookup geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:197
# bd722cd08acf43cc8dbc781c2973b9b6
msgid "``ST_Crosses(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:198
# e87bedc790804b95a53473aa4845e529
msgid "``Crosses(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:204
# 05a514f08da94bebb7015e5a6fc37bd0
msgid "disjoint"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:208
# 909842f8330544eca8638e234d3b2ede
msgid "Tests if the geometry field is spatially disjoint from the lookup geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:217
# d3425849848e4232bf2d68fa8b1da4fd
msgid "``ST_Disjoint(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:218
# da20d10ab3744804a8df35ffd05da141
msgid "``SDO_GEOM.RELATE(poly, 'DISJOINT', geom, 0.05)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:219
# 54e6a78551544e019a69dd555da63dab
msgid "``MBRDisjoint(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:220
# 67d1fc6d62fb411a9e51770612f2ee7b
msgid "``Disjoint(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:224
# c56c6751fb6543189172d20a77d1485d
msgid "equals"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:232
# 3304f5ad861241159205eda6161fab65
msgid "exact, same_as"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:239
# 86c0950ba1ed4a06bcac1c1041505b8c
msgid "intersects"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:243
# 6191640ebd61487a8de18198977486bd
msgid "Tests if the geometry field spatially intersects the lookup geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:252
# be13c91501b649799dd9e981b6c84131
msgid "``ST_Intersects(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:253
# da206824bf9d4b69b13e6654b897db14
msgid "``SDO_OVERLAPBDYINTERSECT(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:254
# 1139f855edca4a50a06f73c9ce196d14
msgid "``MBRIntersects(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:255
# 3526e0ac29ba4900bdbee9e043c2fcfd
msgid "``Intersects(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:261
# c0ec5ce8e23f450aac563fc701ddbe0f
msgid "overlaps"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:268
# b8a48d03e08749a1b88989c193c2bfe0
msgid "relate"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:272
# cbafb6a3063d4dcc965f59a2801e393a
msgid "Tests if the geometry field is spatially related to the lookup geometry by the values given in the given pattern.  This lookup requires a tuple parameter, ``(geom, pattern)``; the form of ``pattern`` will depend on the spatial backend:"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:277
# 5b6cc13914544e27bd3b65c7ea43599f
msgid "PostGIS & SpatiaLite"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:278
# 399bb904194f48f880a3ec66204a76ed
msgid "On these spatial backends the intersection pattern is a string comprising nine characters, which  define intersections between  the interior, boundary, and exterior of the geometry field and the lookup geometry. The intersection pattern matrix may only use the following characters: ``1``, ``2``, ``T``, ``F``, or ``*``.  This lookup type allows users to \"fine tune\" a specific geometric relationship consistent with the DE-9IM model. [#fnde9im]_"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:291
# 53b7a9a9a47c4e56aea4fbb1913bd335
msgid "PostGIS SQL equivalent::"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:295
# f44587a2b40f44639cb7e78bd89e7b96
msgid "SpatiaLite SQL equivalent::"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:302
# 8eea716abc234d0ba393e34740cd7bda
msgid "Here the relation pattern is comprised at least one of the nine relation strings: ``TOUCH``, ``OVERLAPBDYDISJOINT``, ``OVERLAPBDYINTERSECT``, ``EQUAL``, ``INSIDE``, ``COVEREDBY``, ``CONTAINS``, ``COVERS``, ``ON``, and ``ANYINTERACT``.   Multiple strings may be combined with the logical Boolean operator OR, for example, ``'inside+touch'``. [#fnsdorelate]_  The relation strings are case-insensitive."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:313
# 7831fb1b7503466c8fb98bc3a5ccbc60
msgid "Oracle SQL equivalent::"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:320
# 9e54bf594de643819d666f0c96ccb1ec
msgid "touches"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:324
# 8978c77cef2448cf830c866761c7bed7
msgid "Tests if the geometry field spatially touches the lookup geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:333
# 27c1b4ad3add487681c0776f8758cb84
msgid "``ST_Touches(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:334
# 7c4e6bff62284ec9b7a3ca6240ba1950
msgid "``MBRTouches(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:335
# 291bd72029a94d2d8cf1a88f7131f8d8
msgid "``SDO_TOUCH(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:336
# 0ef88732be2d4e78913f20544161e4f2
msgid "``Touches(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:342
# 3323f2fd90c14598936d8e6ff19ead6d
msgid "within"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:346
# f77bb1c9b91b40c0a7180f221744ec15
msgid "Tests if the geometry field is spatially within the lookup geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:355
# 64f314af11214df8b36d92cfa77b5dc6
msgid "``ST_Within(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:357
# 3948d257848b40ecaad5834d333ad355
msgid "``SDO_INSIDE(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:358
# 4c1742e3926a4695800a83b1cbcd1f82
msgid "``Within(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:364
# 26c0f1fbfebc4b9ea025bcac678398ff
msgid "left"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:368
# c8d4774536fc4325bc5fabd2e819ca32
msgid "Tests if the geometry field's bounding box is strictly to the left of the lookup geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:375
#: ../../ref/contrib/gis/geoquerysets.txt:393
#: ../../ref/contrib/gis/geoquerysets.txt:411
#: ../../ref/contrib/gis/geoquerysets.txt:430
#: ../../ref/contrib/gis/geoquerysets.txt:448
#: ../../ref/contrib/gis/geoquerysets.txt:466
#: ../../ref/contrib/gis/geoquerysets.txt:484
#: ../../ref/contrib/gis/geoquerysets.txt:502
# 8f50aafb024f455993d87147ae18d891
# 7dd870a43444497495ab1c24ea386074
# b951505cd643414a859fa1feac969292
# 745708e15ad845f0b73aa746c38f92a0
# 92f5ac0d06f741b892906f7a69a7411d
# b18e74d6fd51447bac5cac6f66cd6e16
# 01c4d05b4e0544d09ae2f64ddfd5d594
# e113eab70cb84225afee9e5436609d2f
msgid "PostGIS equivalent::"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:382
# b688f4e9897c41e6871786e6a74a379d
msgid "right"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:386
# 39e107758e0f423295ad1265b068d621
msgid "Tests if the geometry field's bounding box is strictly to the right of the lookup geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:400
# f19fc47f43c2413fba6cae52c1dbde83
msgid "overlaps_left"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:404
# cbcef072bbd04c3194db0bdd08aec908
msgid "Tests if the geometry field's bounding box overlaps or is to the left of the lookup geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:419
# 507cdc090d6a4ab5a64c8bdd9e66fdff
msgid "overlaps_right"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:423
# 52a1e13eb30e43adb4f2b917b8747e41
msgid "Tests if the geometry field's bounding box overlaps or is to the right of the lookup geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:437
# eaefd8453b1d4e738056de9547c8e819
msgid "overlaps_above"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:441
# f7178d02e39c47d491bba86fa163d3e7
msgid "Tests if the geometry field's bounding box overlaps or is above the lookup geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:455
# 565ae25dbda54811947c54419e68dbab
msgid "overlaps_below"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:459
# 9ba21dd50aba4076b411d794e2458b5b
msgid "Tests if the geometry field's bounding box overlaps or is below the lookup geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:473
# 0bcbc891562c4ddb9dd9475e279498c0
msgid "strictly_above"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:477
#: ../../ref/contrib/gis/geoquerysets.txt:495
# 1f34f5542cdd4734ae2e20f76a67182b
# 1d1119eb518c4822a3dc2f848cfd176b
msgid "Tests if the geometry field's bounding box is strictly above the lookup geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:491
# e11c0e6a5cf8445c84d8e482b2610d12
msgid "strictly_below"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:514
# 82580e7002fa48598963d28f6a2533ed
msgid "For an overview on performing distance queries, please refer to the :ref:`distance queries introduction <distance-queries>`."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:517
# 70c71671797044debad7e6d3571cb997
msgid "Distance lookups take the following form::"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:521
# 3175cdcb44404ce594d59935b439e0e9
msgid "The value passed into a distance lookup is a tuple; the first two values are mandatory, and are the geometry to calculate distances to, and a distance value (either a number in units of the field or a :class:`~django.contrib.gis.measure.Distance` object).  On every distance lookup but :lookup:`dwithin`, an optional third element, ``'spheroid'``, may be included to tell GeoDjango to use the more accurate spheroid distance calculation functions on fields with a geodetic coordinate system (e.g., ``ST_Distance_Spheroid`` would be used instead of ``ST_Distance_Sphere``)."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:534
# 87ace3612af14ad99317bf1945ab7a4a
msgid "distance_gt"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:536
# 7f57155147264dbc8f5ea008e9fdcbc0
msgid "Returns models where the distance to the geometry field from the lookup geometry is greater than the given distance value."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:546
# 5a5ef7735f044424a3b88bb97c99d31a
msgid "``ST_Distance(poly, geom) > 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:547
# 18b4a7d2e98c4300b345adb1cf068f8e
msgid "``SDO_GEOM.SDO_DISTANCE(poly, geom, 0.05) > 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:548
# 1f7352b10c664fc386381387fe8b9e96
msgid "``Distance(poly, geom) > 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:554
# 0d31aeda7b984b8fa0c3af3639b01e69
msgid "distance_gte"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:556
# 86c699086753465e8cb9b5399bc390b1
msgid "Returns models where the distance to the geometry field from the lookup geometry is greater than or equal to the given distance value."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:566
# 1d06ba0343504862a917b690b2ffa666
msgid "``ST_Distance(poly, geom) >= 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:567
# b18a8158685d4c9dba69891a7ae7cc8e
msgid "``SDO_GEOM.SDO_DISTANCE(poly, geom, 0.05) >= 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:568
# 0742811fd0fd4e5f9f89b3852a8c8815
msgid "``Distance(poly, geom) >= 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:574
# a61edbb2874e48528a31b891c5ab9dc4
msgid "distance_lt"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:576
# 75c1c225c1bd449492be9f6ebe1bdab8
msgid "Returns models where the distance to the geometry field from the lookup geometry is less than the given distance value."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:586
# 50719e821a804dbb9d6b810bdacc65b9
msgid "``ST_Distance(poly, geom) < 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:587
# 1ab4df34d58340fa90a08f2774b04c16
msgid "``SDO_GEOM.SDO_DISTANCE(poly, geom, 0.05) < 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:588
# eeb6041fce5a4c2f9d502c2c7d48e683
msgid "``Distance(poly, geom) < 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:594
# 1543592a368143a7992c0388836dff4c
msgid "distance_lte"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:596
# 4f6a29c3f50045b89cfb65433ad089fb
msgid "Returns models where the distance to the geometry field from the lookup geometry is less than or equal to the given distance value."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:606
# b457c951a4d9482195956ce4509e09f0
msgid "``ST_Distance(poly, geom) <= 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:607
# 83ec561e9c3441d7975c0326cc3a0ad3
msgid "``SDO_GEOM.SDO_DISTANCE(poly, geom, 0.05) <= 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:608
# 9590d0f8d0704717998458eddf07b321
msgid "``Distance(poly, geom) <= 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:614
# 70d4253b305442778505f738ed53df01
msgid "dwithin"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:616
# 7175026f617b4532a9ecc5d9c75dc3e5
msgid "Returns models where the distance to the geometry field from the lookup geometry are within the given distance from one another."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:626
# be51205471244a95be854e8a05164758
msgid "``ST_DWithin(poly, geom, 5)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:627
# 55604a1390e545068c352a12647216bb
msgid "``SDO_WITHIN_DISTANCE(poly, geom, 5)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:632
# b9ff63fe1a794f44a1fa904ff3e46784
msgid "This lookup is not available on SpatiaLite."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:640
# 0826e1da4f0d4e579402105ce3003c32
msgid "``GeoQuerySet`` methods specify that a spatial operation be performed on each patial operation on each geographic field in the queryset and store its output in a new attribute on the model (which is generally the name of the ``GeoQuerySet`` method)."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:645
# 34c71f4129d34848acb85474e2d6d535
msgid "There are also aggregate ``GeoQuerySet`` methods which return a single value instead of a queryset.  This section will describe the API and availability of every ``GeoQuerySet`` method available in GeoDjango."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:651
# b3c4cb86b2404a7a847365b684658a11
msgid "What methods are available depend on your spatial backend.  See the :ref:`compatibility table <geoqueryset-method-compatibility>` for more details."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:655
# 9b7b701aec6f482784e15022e205a842
msgid "With a few exceptions, the following keyword arguments may be used with all ``GeoQuerySet`` methods:"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:659
#: ../../ref/contrib/gis/geoquerysets.txt:956
#: ../../ref/contrib/gis/geoquerysets.txt:989
#: ../../ref/contrib/gis/geoquerysets.txt:1022
#: ../../ref/contrib/gis/geoquerysets.txt:1042
#: ../../ref/contrib/gis/geoquerysets.txt:1180
# 67756b4f75ca4c98bb0d1bc50430c220
# 9bd73de85c5448a1b9ebc99551494dd2
# 191bef49aa9645a2bb3cbdbaa1d27d7b
# 95a1669c058c47bd9cf2ca7308b3fa0f
# da337216b8064b24b748149e8698b89b
# 7d999cb8ba7040d380f94fb6e811dc87
msgid "Keyword Argument"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:661
# 39099d48190d4adca257e137d352ffe3
msgid "``field_name``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:661
# e0f010b96346489db68167310066e067
msgid "By default, ``GeoQuerySet`` methods use the first geographic field encountered in the model.  This keyword should be used to specify another geographic field (e.g., ``field_name='point2'``) when there are multiple geographic fields in a model."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:667
# bd866f722c534839a505f25602885724
msgid "On PostGIS, the ``field_name`` keyword may also be used on geometry fields in models that are related via a ``ForeignKey`` relation (e.g., ``field_name='related__point'``)."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:672
# c3779ad04f17461891b53d79cd8c57c0
msgid "``model_att``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:672
# 8107a07faef246bba57e75298577873e
msgid "By default, ``GeoQuerySet`` methods typically attach their output in an attribute with the same name as the ``GeoQuerySet`` method.  Setting this keyword with the desired attribute name will override this default behavior.  For example, ``qs = Zipcode.objects.centroid(model_att='c')`` will attach the centroid of the ``Zipcode`` geometry field in a ``c`` attribute on every model rather than in a ``centroid`` attribute."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:682
# e7544874643741df990139e1b6b02bb0
msgid "This keyword is required if a method name clashes with an existing ``GeoQuerySet`` method -- if you wanted to use the ``area()`` method on model with a ``PolygonField`` named ``area``, for example."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:690
# 2dabe776d8ff471e9c76aba73c6ce363
msgid "Measurement"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:694
# c75b92e4535d48199f6ae5ba72bdeb1b
msgid "``area``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:698
# 3a26bc800f714172be1c832a9f37d8eb
msgid "Returns the area of the geographic field in an ``area`` attribute on each element of this GeoQuerySet."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:702
# f547f9a12e7644478c0655ea7959b4ca
msgid "``distance``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:706
# f6acb311e8b74db68f516184ef640b0c
msgid "This method takes a geometry as a parameter, and attaches a ``distance`` attribute to every model in the returned queryset that contains the distance (as a :class:`~django.contrib.gis.measure.Distance` object) to the given geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:710
# cebfb8feeef843d6b9f5db81578d0e53
msgid "In the following example (taken from the `GeoDjango distance tests`__), the distance from the `Tasmanian`__ city of Hobart to every other :class:`PointField` in the ``AustraliaCity`` queryset is calculated::"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:730
# 5b157a9a9f7848749a2db0a7be3b0d7c
msgid "Because the ``distance`` attribute is a :class:`~django.contrib.gis.measure.Distance` object, you can easily express the value in the units of your choice.  For example, ``city.distance.mi`` is the distance value in miles and ``city.distance.km`` is the distance value in kilometers.  See the :ref:`ref-measure` for usage details and the list of :ref:`supported_units`."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:741
# cf98fd22ab3e4586a762514dd49d49fc
msgid "``length``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:745
# 744b7781f9384cc7a61d92115a054bfe
msgid "Returns the length of the geometry field in a ``length`` attribute (a :class:`~django.contrib.gis.measure.Distance` object) on each model in the queryset."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:750
# 36f2785de3bd476885d68438dac64cdd
msgid "``perimeter``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:754
# 85cdf84fb513424280d144298252e56f
msgid "Returns the perimeter of the geometry field in a ``perimeter`` attribute (a :class:`~django.contrib.gis.measure.Distance` object) on each model in the queryset."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:759
# 0fda5d50d5a84ce38791f2d7872cdcf5
msgid "Geometry Relationships"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:761
# 9f43e5ea0f34407d8e6c579b94811654
msgid "The following methods take no arguments, and attach geometry objects each element of the :class:`GeoQuerySet` that is the result of relationship function evaluated on the geometry field."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:766
# df93660a45b74fc19db3408f89f34c8b
msgid "``centroid``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:772
# 9af8001a3bfc452aaadddd4439cd6be3
msgid "Returns the ``centroid`` value for the geographic field in a ``centroid`` attribute on each element of the ``GeoQuerySet``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:776
# 7e10da6efbdb404f9185dcdffde5cc72
msgid "``envelope``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:782
# 6fd3953c0f9b4926a5082529a8f0a755
msgid "Returns a geometry representing the bounding box of the geometry field in an ``envelope`` attribute on each element of the ``GeoQuerySet``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:786
# 51b52cb7dde74a4b9733b308dafd1ec2
msgid "``point_on_surface``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:792
# 4e789397dc3d4de6aed527d97bd23b9e
msgid "Returns a Point geometry guaranteed to lie on the surface of the geometry field in a ``point_on_surface`` attribute on each element of the queryset; otherwise sets with None."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:797
# 10cd6407799b4034b07a319dcb4eabd6
msgid "Geometry Editors"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:800
# 905260db9d79492ab9c33ff872a86db0
msgid "``force_rhr``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:806
# 04db14c7a9364252a50f8c4c55d8db1c
msgid "Returns a modified version of the polygon/multipolygon in which all of the vertices follow the Right-Hand-Rule, and attaches as a ``force_rhr`` attribute on each element of the queryset."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:811
# c36ac4522de34a7ea089c673f88165b1
msgid "``reverse_geom``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:817
# 951c9cff14884b209d7fc15016a86760
msgid "Reverse the coordinate order of the geometry field, and attaches as a ``reverse`` attribute on each element of the queryset."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:821
# 7a26fdbc05b441fa8be9489937ef6b45
msgid "``scale``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:828
# 3f81ad5956ef47419bd3a26650a93fa2
msgid "``snap_to_grid``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:832
# 795939478c7e46da90ed4422eaaf275a
msgid "Snap all points of the input geometry to the grid.  How the geometry is snapped to the grid depends on how many numeric (either float, integer, or long) arguments are given."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:837
# c364dadd58af459dbd910db420663ad8
msgid "Number of Arguments"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:839
#: ../../ref/contrib/gis/geos.txt:198
#: ../../ref/contrib/gis/geos.txt:882
# f5960e2469cb475e8b275206fe28a3bf
# 9b9eaa14e8454dad994d2a28cb3f27ae
# c0bf7dc4b9c04bcaaa3af368ede6bb7c
msgid "1"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:839
# 4df5e5739bce4c5e919f97578d241a5c
msgid "A single size to snap bot the X and Y grids to."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:840
#: ../../ref/contrib/gis/geos.txt:199
#: ../../ref/contrib/gis/geos.txt:904
# 68dda28aecc54264a34a946153e3ae5c
# f7a5b24f6f4848b2b7afaf1e9cae2c61
# 9187c15aa407410c98903f234674afe4
msgid "2"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:840
# 91aee45223ca4cf89435c2d46e75fb9e
msgid "X and Y sizes to snap the grid to."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:841
#: ../../ref/contrib/gis/geos.txt:201
# 1df89a125128416294f11bc1ac6d9265
# 4e9b664efc1e44ac8b9200650ee5b4c5
msgid "4"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:841
# 285af824ef7a42728667501db75ec33f
msgid "X, Y sizes and the corresponding X, Y origins."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:845
#: ../../ref/contrib/gis/layermapping.txt:131
# e176b275f4324c58907c3e89b792f2f5
# 1f7e0f47eb7344ebaf3d7acff8318df6
msgid "``transform``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:851
# 1aa91dda5abd49b5b0d743a1fc028b56
msgid "The ``transform`` method transforms the geometry field of a model to the spatial reference system specified by the ``srid`` parameter.  If no ``srid`` is given, then 4326 (WGS84) is used by default."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:857
# 2eadf7a3de834bdbba49ce1d93f0efde
msgid "Unlike other ``GeoQuerySet`` methods, ``transform`` stores its output \"in-place\".  In other words, no new attribute for the transformed geometry is placed on the models."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:863
# f0c20a28f98a43b1a304ca0bb63659b6
msgid "What spatial reference system an integer SRID corresponds to may depend on the spatial database used.  In other words, the SRID numbers used for Oracle are not necessarily the same as those used by PostGIS."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:877
# c8fa08bb79354cc9a0ab0468fa39e29a
msgid "``translate``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:882
# f5412b17ab3f4a51af38f4ca0aecb951
msgid "Translates the geometry field to a new location using the given numeric parameters as offsets."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:886
# 1a907954a5ae422ab7313a7da65a108f
msgid "Geometry Operations"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:889
# b49ca5e8f5c9452cb29642c152398d33
msgid "The following methods all take a geometry as a parameter and attach a geometry to each element of the ``GeoQuerySet`` that is the result of the operation."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:893
# f187b81d98534fc98fb8bee393d020c8
msgid "``difference``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:897
# ac37ca6ed40043ba9f9ba09b130f2258
msgid "Returns the spatial difference of the geographic field with the given geometry in a ``difference`` attribute on each element of the ``GeoQuerySet``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:903
# 43f723b7ec46458c8ceeb39520a12955
msgid "``intersection``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:907
# d11a0700497b4d7dadedf038916fcd76
msgid "Returns the spatial intersection of the geographic field with the given geometry in an ``intersection`` attribute on each element of the ``GeoQuerySet``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:912
# 73414474dac24d16aa2ce5d2ddc8a999
msgid "``sym_difference``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:916
# 8c04fd3937314dafb01b6e33e2687141
msgid "Returns the symmetric difference of the geographic field with the given geometry in a ``sym_difference`` attribute on each element of the ``GeoQuerySet``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:921
# 024d89731e004bfdb72684723f4ca4b6
msgid "``union``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:925
# dbcbc0d4194e491791f73f8af244819d
msgid "Returns the union of the geographic field with the given geometry in an ``union`` attribute on each element of the ``GeoQuerySet``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:930
# 1255b3454c7048ff8053586727432ed1
msgid "Geometry Output"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:932
# 9c68dafcdbdf4766a98aa419230e40dd
msgid "The following ``GeoQuerySet`` methods will return an attribute that has the value of the geometry field in each model converted to the requested output format."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:936
# b8cf7894d68b4b5cb4fc2a05449738f0
msgid "``geohash``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:940
# 042ad2428b0b4c00906cb9ba3eaed8ae
msgid "Attaches a ``geohash`` attribute to every model the queryset containing the `GeoHash`__ representation of the geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:946
# c7dca9e57d474e848af52eaccd9dd7a9
msgid "``geojson``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:952
# b5609f5515784f8d82f25c50017d6178
msgid "Attaches a ``geojson`` attribute to every model in the queryset that contains the `GeoJSON`__ representation of the geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:958
#: ../../ref/contrib/gis/geoquerysets.txt:991
#: ../../ref/contrib/gis/geoquerysets.txt:1024
#: ../../ref/contrib/gis/geoquerysets.txt:1048
# 50add40153bf4fb6bf5a10a2ec5dca4f
# a49323f68f5a4b24957606c18f62d474
# 19a8e73ac759435187f0ea51b4ceb9f8
# 84725739cdac4aeb9df40bd3f7bb434a
msgid "``precision``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:958
# 5a8c25d5f6f0439fa1df1852ec29c75e
msgid "It may be used to specify the number of significant digits for the coordinates in the GeoJSON representation -- the default value is 8."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:962
# 62489b8ff7114fea989b5886001db014
msgid "``crs``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:962
# 380e97123cee4f5e9fb6cbb4551f268e
msgid "Set this to ``True`` if you want the coordinate reference system to be included in the returned GeoJSON."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:966
# 662e19ffa35a497db315cdb9975a7895
msgid "``bbox``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:966
# 68f0e3d266944d1b831a688b64f8bbf3
msgid "Set this to ``True`` if you want the bounding box to be included in the returned GeoJSON."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:973
# adf8c30ea2a048af98b234eaeed22c3c
msgid "``gml``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:979
# 6bb8f72f001942c79305c680202a53c1
msgid "Attaches a ``gml`` attribute to every model in the queryset that contains the `Geographic Markup Language (GML)`__ representation of the geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:991
# daa4cedcb2474412bbeab133a1b87190
msgid "This keyword is for PostGIS only.  It may be used to specify the number of significant digits for the coordinates in the GML representation -- the default value is 8."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:996
# 4ba5e329b104419a8de2ea028c9e4278
msgid "``version``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:996
# ca4a024345b04b19b35f4b25be50810f
msgid "This keyword is for PostGIS only.  It may be used to specify the GML version used, and may only be values of 2 or 3.  The default value is 2."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1004
# 06a4b909a976443288935df1c35aa73e
msgid "``kml``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1010
# 5e2f8c425e0d48ae930339d99d63a3fb
msgid "Attaches a ``kml`` attribute to every model in the queryset that contains the `Keyhole Markup Language (KML)`__ representation of the geometry fields. It should be noted that the contents of the KML are transformed to WGS84 if necessary."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1024
# b9b44fa19f4c4c54b4be0fae28aaec89
msgid "This keyword may be used to specify the number of significant digits for the coordinates in the KML representation -- the default value is 8."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1032
# f8d75de42edf48cfbd0ceb8f1ae4aca9
msgid "``svg``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1038
# e6c850514ffe48efa8a3d677bdbd6f48
msgid "Attaches a ``svg`` attribute to every model in the queryset that contains the `Scalable Vector Graphics (SVG)`__ path data of the geometry fields."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1044
# 69188393eede48f5a6dd148d216bc80f
msgid "``relative``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1044
# d74aab4e405b45e3b8d320d48f6ac1a4
msgid "If set to ``True``, the path data will be implemented in terms of relative moves.  Defaults to ``False``, meaning that absolute moves are used instead."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1048
# 6a0775e048ad40c79d174563b61110a8
msgid "This keyword may be used to specify the number of significant digits for the coordinates in the SVG representation -- the default value is 8."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1056
# 3a21da9ab089476f8c62d711ab1996dd
msgid "Miscellaneous"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1059
# 5564f6ff96ce433dafac3a59c716ba00
msgid "``mem_size``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1065
# d574dde760ca4e83b5ad3bcc6544fc0f
msgid "Returns the memory size (number of bytes) that the geometry field takes in a ``mem_size`` attribute  on each element of the ``GeoQuerySet``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1069
# 5fe5bb36efe947439a5339c8d0cc63ed
msgid "``num_geom``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1075
# 8e716413180640849bdc5b7ce2ff3735
msgid "Returns the number of geometries in a ``num_geom`` attribute on each element of the ``GeoQuerySet`` if the geometry field is a collection (e.g., a ``GEOMETRYCOLLECTION`` or ``MULTI*`` field); otherwise sets with ``None``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1081
# bb5ca0cf13e24cb689d6f68f938c12b2
msgid "``num_points``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1087
# fc83664cd8484055aba68e3f123bdf5a
msgid "Returns the number of points in the first linestring in the geometry field in a ``num_points`` attribute on each element of the ``GeoQuerySet``; otherwise sets with ``None``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1092
# e99506b39ad1452aa460588d42da94f9
msgid "Spatial Aggregates"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1095
# c6c82856772343328ae7ddbafc083843
msgid "Aggregate Methods"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1098
# 6439f9a8b4ca49839268d3d93b9e5428
msgid "``collect``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1104
# ac53842e570741238b242833c0675427
msgid "Returns a ``GEOMETRYCOLLECTION`` or a ``MULTI`` geometry object from the geometry column.  This is analagous to a simplified version of the :meth:`GeoQuerySet.unionagg` method, except it can be several orders of magnitude faster than peforming a union because it simply rolls up geometries into a collection or multi object, not caring about dissolving boundaries."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1111
# 22fbc5fc82c3429b91ea2ffce118c73f
msgid "``extent``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1117
# 7f9b46c920954c93aac7522f7f5cba9b
msgid "Returns the extent of the ``GeoQuerySet`` as a four-tuple, comprising the lower left coordinate and the upper right coordinate."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1127
# 241f32af4f7344c7ba6cd57aaa3ca56b
msgid "``extent3d``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1133
# f0e8aa71447f4253807ba323dd95c220
msgid "Returns the 3D extent of the ``GeoQuerySet`` as a six-tuple, comprising the lower left coordinate and upper right coordinate."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1143
# 9cd4b6aab5be4796bc4a9f94f4d6f61f
msgid "``make_line``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1149
# d27d29e107764b82a5fd9ff6f50b180f
msgid "Returns a ``LineString`` constructed from the point field geometries in the ``GeoQuerySet``.  Currently, ordering the queryset has no effect."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1158
# ef52fd19421447d8809cab8ee5d3d2d5
msgid "``unionagg``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1164
# a966d1beefc24f81a50eeeb0b7679947
msgid "This method returns a :class:`~django.contrib.gis.geos.GEOSGeometry` object comprising the union of every geometry in the queryset.  Please note that use of ``unionagg`` is processor intensive and may take a significant amount of time on large querysets."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1171
# 8c9fdbdfd93042a682977aaa374c86e0
msgid "If the computation time for using this method is too expensive, consider using :meth:`GeoQuerySet.collect` instead."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1182
# 5a78f84c15324b23a26c863de75538fd
msgid "``tolerance``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1182
# f97eab6440bc4cfdb615b093e1ea96fa
msgid "This keyword is for Oracle only.  It is for the tolerance value used by the ``SDOAGGRTYPE`` procedure; the  `Oracle documentation`__ has more details."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1191
# 3143bd25c98540a3948293b14e4a2373
msgid "Aggregate Functions"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1199
# abad95e5e1134141b58a654930215336
msgid "``Collect``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1203
# d88c6396ee314a949d7161a562a7326e
msgid "Returns the same as the :meth:`GeoQuerySet.collect` aggregate method."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1206
# 51f6d2fa84234c08b9323f1a0126e739
msgid "``Extent``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1210
# 7fb9457cfc674262b2483aee3c63f2be
msgid "Returns the same as the :meth:`GeoQuerySet.extent` aggregate method."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1213
# 51a43218d5de4632857f17bc9cf45834
msgid "``Extent3D``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1217
# 11a7a0948d144d199d567585a983c311
msgid "Returns the same as the :meth:`GeoQuerySet.extent3d` aggregate method."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1220
# ffa58fc7e4f445d4a877b678f83f6008
msgid "``MakeLine``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1224
# da4d3305e5c740be89d29cd5547280be
msgid "Returns the same as the :meth:`GeoQuerySet.make_line` aggregate method."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1227
# ef1ded80178948c28c69233767b08704
msgid "``Union``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1231
# a4b760c4499d4e8da73076dd269326bc
msgid "Returns the same as the :meth:`GeoQuerySet.union` aggregate method."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1234
# 3b2a1f71e4cf4a7286af7eae3fd6db8c
msgid "*See* `OpenGIS Simple Feature Specification For SQL <http://www.opengis.org/docs/99-049.pdf>`_, at Ch. 2.1.13.2, p. 2-13 (The Dimensionally Extended Nine-Intersection Model)."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1235
# e6fd709b7c2b4e26b3878e457d979eec
msgid "*See* `SDO_RELATE documentation <http://docs.oracle.com/cd/B19306_01/appdev.102/b14255/sdo_operat.htm#sthref845>`_, from Ch. 11 of the Oracle Spatial User's Guide and Manual."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1236
# e3eed9b5ce1d4d7e896732a7c99c94b7
msgid "For an explanation of this routine, read `Quirks of the \"Contains\" Spatial Predicate <http://lin-ear-th-inking.blogspot.com/2007/06/subtleties-of-ogc-covers-spatial.html>`_ by Martin Davis (a PostGIS developer)."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1237
# e732071ba1bf45fab1f6f6156696e609
msgid "Refer to the PostGIS ``ST_ContainsProperly`` `documentation <http://postgis.refractions.net/documentation/manual-1.4/ST_ContainsProperly.html>`_ for more details."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:5
# f5eeb1dcbc574ccebc467cf02edce528
msgid "GEOS API"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:11
# 51d35a8119fe41eb830599f1e1b7995a
msgid "Background"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:14
# 408d3c79848847ac83b2f6ec52af5aa0
msgid "What is GEOS?"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:16
# ff5b3a4c35b24a229287d97b9a8da897
msgid "`GEOS`__ stands for **G**\\ eometry **E**\\ ngine - **O**\\ pen **S**\\ ource, and is a C++ library, ported from the  `Java Topology Suite`__.  GEOS implements the OpenGIS `Simple Features for SQL`__ spatial predicate functions and spatial operators. GEOS, now an OSGeo project, was initially developed and maintained by `Refractions Research`__ of Victoria, Canada."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:28
# 0427e8c8ca2542d18a89ba3c2c277d72
msgid "Features"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:30
# f46980467852490781b1884f19341fe9
msgid "GeoDjango implements a high-level Python wrapper for the GEOS library, its features include:"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:33
# 1fb1252abea244429d3cc549e1f83346
msgid "A BSD-licensed interface to the GEOS geometry routines, implemented purely in Python using ``ctypes``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:35
# 26e2f86aa11e42879bb1da10ed072a5b
msgid "Loosely-coupled to GeoDjango.  For example, :class:`GEOSGeometry` objects may be used outside of a django project/application.  In other words, no need to have ``DJANGO_SETTINGS_MODULE`` set or use a database, etc."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:38
# 04a424a7d9d84731b0ef40fbf3820ce8
msgid "Mutability: :class:`GEOSGeometry` objects may be modified."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:39
# e09ddfe041b943169c1a263599e4e7c3
msgid "Cross-platform and tested; compatible with Windows, Linux, Solaris, and Mac OS X platforms."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:45
# 010c098b7a204ac6a1b6284caf10450c
msgid "Tutorial"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:47
# e18018d661784234acef86f37cd16dd5
msgid "This section contains a brief introduction and tutorial to using :class:`GEOSGeometry` objects."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:51
# 2520c1b46ab046ffa544fd36a7f05f78
msgid "Creating a Geometry"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:53
# 9634b682101d4166982e479a0306e979
msgid ":class:`GEOSGeometry` objects may be created in a few ways.  The first is to simply instantiate the object on some spatial input -- the following are examples of creating the same geometry from WKT, HEX, WKB, and GeoJSON::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:63
# 4309d97cf8454d1fa3bd3c9e0a1a15d6
msgid "Another option is to use the constructor for the specific geometry type that you wish to create.  For example, a :class:`Point` object may be created by passing in the X and Y coordinates into its constructor::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:70
# e70b5d48e3474e55842ae56581414157
msgid "Finally, there are :func:`fromstr` and :func:`fromfile` factory methods, which return a :class:`GEOSGeometry` object from an input string or a file::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:82
# 26fd131e11dd433cbec94c728268e447
msgid "You find many ``TypeError`` or ``AttributeError`` exceptions filling your Web server's log files. This generally means that you are creating GEOS objects at the top level of some of your Python modules. Then, due to a race condition in the garbage collector, your module is garbage collected before the GEOS object. To prevent this, create :class:`GEOSGeometry` objects inside the local scope of your functions/methods."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:90
# b13b9e67fd1d4336b938ab5daeab57c6
msgid "Geometries are Pythonic"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:91
# cd0ac56bac434974a94ac36a74e0c67f
msgid ":class:`GEOSGeometry` objects are 'Pythonic', in other words components may be accessed, modified, and iterated over using standard Python conventions. For example, you can iterate over the coordinates in a :class:`Point`::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:99
# 539cdfc5c4844a1f825867d1ebdd686e
msgid "With any geometry object, the :attr:`GEOSGeometry.coords` property may be used to get the geometry coordinates as a Python tuple::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:105
# 1509f5968050451486ecace4a6b771c1
msgid "You can get/set geometry components using standard Python indexing techniques.  However, what is returned depends on the geometry type of the object.  For example, indexing on a :class:`LineString` returns a coordinate tuple::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:117
# 503f14be24f940449f7c883ff26217b9
msgid "Whereas indexing on a :class:`Polygon` will return the ring (a :class:`LinearRing` object) corresponding to the index::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:127
# ada34b3fedb443e5bb776d659b517af8
msgid "In addition, coordinates/components of the geometry may added or modified, just like a Python list::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:138
# 60cd4d25fa5b458abcfa5f629236a47a
msgid "Geometry Objects"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:141
# 7e3ecfb3359b49619784fb4531f38a11
msgid "``GEOSGeometry``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:149
# cefd88f50eb6463aad622856f6da28a8
msgid "This is the base class for all GEOS geometry objects.  It initializes on the given ``geo_input`` argument, and then assumes the proper geometry subclass (e.g., ``GEOSGeometry('POINT(1 1)')`` will create a :class:`Point` object)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:153
# e053c14984e94b529dc481df8394e32b
msgid "The following input formats, along with their corresponding Python types, are accepted:"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:157
# 9f182c3bfda846779d3e36479868fd1c
msgid "Format"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:157
# 2c137bc70cb04a4da4f5673bde06fd0c
msgid "Input Type"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:159
# 512a57642bb14730bda39350bc3e841a
msgid "WKT / EWKT"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:159
#: ../../ref/contrib/gis/geos.txt:160
#: ../../ref/contrib/gis/geos.txt:162
# b5f8e64f53c346b580577ab6727b5f6d
# 05fcabc199d44797abda39bb3d471c53
# e21fd271730d452d9e73beab033363ab
msgid "``str`` or ``unicode``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:160
# bb0f7b8a10f34b8e8d81e75bbd17a5d9
msgid "HEX / HEXEWKB"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:161
# 195b08afcdc1453fb94360c4d6e16fa3
msgid "WKB / EWKB"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:161
# c07690e192cb4e13b5cca97dd03eeebf
msgid "``buffer``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:162
# 6010cc4e681f443a96b479601ed50ddd
msgid "GeoJSON"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:167
# f5f61f5752f24199afb1d8a87c4b9e8c
msgid "The new 3D/4D WKT notation with an intermediary Z or M (like ``POINT Z (3, 4, 5)``) is only supported with GEOS 3.3.0 or later."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:171
# 1294003de4ad48c9b9e56c2ce8d5d350
msgid "Properties"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:175
# cbff36e3452740e7a6f888872480d2a5
msgid "Returns the coordinates of the geometry as a tuple."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:179
# af90bdb3f242474ebea9e3f0e2c08627
msgid "Returns whether or not the set of points in the geometry is empty."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:183
# a98c756fa0b849379146239029633a0b
msgid "Returns a string corresponding to the type of geometry.  For example::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:191
# 74a676a60a984005920a1989ae283ee9
msgid "Returns the GEOS geometry type identification number.  The following table shows the value for each geometry type:"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:195
# 0c6fb43f53ad4668964a85edd869b809
msgid "Geometry"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:195
# 745e2efc0c864e36b79a8c892dc36a61
msgid "ID"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:197
# b3c8fab8674d49a4879292a437585896
msgid ":class:`Point`"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:197
#: ../../ref/contrib/gis/geos.txt:881
# 8cd6f69c32094903bf035e19894552b8
# e50a49e9fdee42e2a4da6dc91d2e1009
msgid "0"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:198
# eeb81e90ad924ad3ba5bb3dcd98c72df
msgid ":class:`LineString`"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:199
# 1c82faa098a04079a51d22d2d8e5f6c3
msgid ":class:`LinearRing`"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:200
# c04ad400eaa642baaf1a2d9a494d9922
msgid ":class:`Polygon`"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:200
#: ../../ref/contrib/gis/geos.txt:905
# 6388a45698ba4038ac70164f281fb4a8
# e2a5b32173324b91864e7b7b8b6eb891
msgid "3"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:201
# 3d4fb92fbac54f31925e85694ceee3ea
msgid ":class:`MultiPoint`"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:202
# 8300353a78684a7bbce6dd76725e3750
msgid ":class:`MultiLineString`"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:202
# 8f0bb9fb10a24c659d3648fce1548340
msgid "5"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:203
# 98a6bf17e3c2425f85a3672631b98e7c
msgid ":class:`MultiPolygon`"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:203
# f5061310195c4d1394728f843b2be1c1
msgid "6"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:204
# caee233081b147b7984dbd7a3ad71e60
msgid ":class:`GeometryCollection`"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:204
# ad86151976094a2b9c305a596fefff27
msgid "7"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:209
# 27f573c24cbf4206bf56e6cbbfb193ce
msgid "Returns the number of coordinates in the geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:213
# 17a0a80ef4e143b094c571655a9031d5
msgid "Returns the number of geometries in this geometry.  In other words, will return 1 on anything but geometry collections."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:218
# 8954be2cc1e742d8ae18fbd44ce87c50
msgid "Returns a boolean indicating whether the geometry is three-dimensional."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:222
# 601032c0a252431a83e195fcab399230
msgid "Returns a boolean indicating whether the geometry is a ``LinearRing``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:226
# 9ff06d4ac4634381b23f16d414ad564c
msgid "Returns a boolean indicating whether the geometry is 'simple'. A geometry is simple if and only if it does not intersect itself (except at boundary points).  For example, a :class:`LineString` object is not simple if it intersects itself. Thus, :class:`LinearRing` and :class`Polygon` objects are always simple because they do cannot intersect themselves, by definition."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:235
# 141abb3ea8fb4365a7def5d37f3f5af5
msgid "Returns a boolean indicating whether the geometry is valid."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:239
# d280c8cf8cc34f3bb2cf4f0da4f387c4
msgid "Returns a string describing the reason why a geometry is invalid."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:243
# 8e991ddafe04442698ab84bec304bc0c
msgid "Property that may be used to retrieve or set the SRID associated with the geometry.  For example::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:254
# bbe54d1d00114f6fb39a937ce286d454
msgid "Output Properties"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:256
# 97ab9b5f952e49f9a0bb0abec43dd242
msgid "The properties in this section export the :class:`GEOSGeometry` object into a different.  This output may be in the form of a string, buffer, or even another object."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:262
# 9218ca9d33f246c892c56ec8298276e9
msgid "Returns the \"extended\" Well-Known Text of the geometry.  This representation is specific to PostGIS and is a super set of the OGC WKT standard. [#fnogc]_ Essentially the SRID is prepended to the WKT representation, for example ``SRID=4326;POINT(5 23)``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:269
# 62a668b5aa3a4fdab95165c98cfa45a2
msgid "The output from this property does not include the 3dm, 3dz, and 4d information that PostGIS supports in its EWKT representations."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:274
# 8a815b13680e46ada1dd323481b5d978
msgid "Returns the WKB of this Geometry in hexadecimal form.  Please note that the SRID value is not included in this representation because it is not a part of the OGC specification (use the :attr:`GEOSGeometry.hexewkb` property instead)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:285
# 08d2466af11746f78e937e6985ffa73b
msgid "Returns the EWKB of this Geometry in hexadecimal form.  This is an extension of the WKB specification that includes the SRID value that are a part of this geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:291
# cf3268e5a7474c96bc3d4c024cc48946
msgid "GEOS 3.1 is *required* if you want valid 3D HEXEWKB."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:295
# 18b31a2014ae49cb95290c16505ba01c
msgid "Returns the GeoJSON representation of the geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:299
#: ../../ref/contrib/gis/geos.txt:318
#: ../../ref/contrib/gis/geos.txt:564
#: ../../ref/contrib/gis/geos.txt:578
# 2f70dc2a41774a61a9f2199a28c459eb
# 3c43d8750f1f4447ba38f59048498e76
# 1b5a1aa794f54d84b2a9f0d5ea266bfd
# c05293103f194b88b247a7e3ac7bcc82
msgid "Requires GDAL."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:303
# 3b48f5ab7c834b11a2d900ffa96fac7f
msgid "Alias for :attr:`GEOSGeometry.json`."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:307
# c105208e25da48d88a6add8024ceff52
msgid "Returns a `KML`__ (Keyhole Markup Language) representation of the geometry.  This should only be used for geometries with an SRID of 4326 (WGS84), but this restriction is not enforced."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:313
# 775cdb2da5c0408888c942145ea1c0bd
msgid "Returns an :class:`~django.contrib.gis.gdal.OGRGeometry` object correspondg to the GEOS geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:324
# 21004463c10749ee880308f551a12833
msgid "Returns the WKB (Well-Known Binary) representation of this Geometry as a Python buffer.  SRID value is not included, use the :attr:`GEOSGeometry.ewkb` property instead."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:336
# 69fb02c8533e4fb2974aed6a094f83e9
msgid "Return the EWKB representation of this Geometry as a Python buffer. This is an extension of the WKB specification that includes any SRID value that are a part of this geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:342
# 01d0c0d2a43c49a88dcf2d5983c55f5f
msgid "GEOS 3.1 is *required* if you want valid 3D EWKB."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:346
# 22a017f073924706816847618774e844
msgid "Returns the Well-Known Text of the geometry (an OGC standard)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:351
# eb9f3f01363e4759b726b2b8edee66ac
msgid "Spatial Predicate Methods"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:353
# e8292b8632a542af91bf920524d8a459
msgid "All of the following spatial predicate methods take another :class:`GEOSGeometry` instance (``other``) as a parameter, and return a boolean."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:359
# 3a792e67ebc3443eb7ff5afeaebae95f
msgid "Returns ``True`` if :meth:`GEOSGeometry.within` is ``False``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:363
# 6202b237f235448586efece2b3c67dec
msgid "Returns ``True`` if the DE-9IM intersection matrix for the two Geometries is ``T*T******`` (for a point and a curve,a point and an area or a line and an area) ``0********`` (for two curves)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:369
# 19da6af1bc9141ada3d942e2b9581cb0
msgid "Returns ``True`` if the DE-9IM intersection matrix for the two geometries is ``FF*FF****``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:374
# 4d0b51f00252452bad90cb977f46f510
msgid "Returns ``True`` if the DE-9IM intersection matrix for the two geometries is ``T*F**FFF*``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:379
# e3c7c908a99e466c9064f06e79a8bb7e
msgid "Returns true if the two geometries are exactly equal, up to a specified tolerance.  The ``tolerance`` value should be a floating point number representing the error tolerance in the comparison, e.g., ``poly1.equals_exact(poly2, 0.001)`` will compare equality to within one thousandth of a unit."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:387
# 11255ce49519406e92ca4cb866b39114
msgid "Returns ``True`` if :meth:`GEOSGeometry.disjoint` is ``False``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:391
# a84f9a8cad724aa1873ddcf7c2fb2e7b
msgid "Returns true if the DE-9IM intersection matrix for the two geometries is ``T*T***T**`` (for two points or two surfaces) ``1*T***T**`` (for two curves)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:397
# ce2c586bba18407990500bdd229b7354
msgid "Returns ``True`` if the elements in the DE-9IM intersection matrix for this geometry and the other matches the given ``pattern`` -- a string of nine characters from the alphabet: {``T``, ``F``, ``*``, ``0``}."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:403
# 20bcde39e21b494281c344c9a84d052d
msgid "Returns ``True`` if the DE-9IM intersection matrix for the two geometries is ``FT*******``, ``F**T*****`` or ``F***T****``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:408
# c8e00468dc8e42ddbcbd57cca44f4489
msgid "Returns ``True`` if the DE-9IM intersection matrix for the two geometries is ``T*F**F***``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:412
# 5bb2ffc882774b68a4fb475739ccbf2a
msgid "Topological Methods"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:416
# e0fb394242d74304a42ee0ce691d512d
msgid "Returns a :class:`GEOSGeometry` that represents all points whose distance from this geometry is less than or equal to the given ``width``. The optional ``quadsegs`` keyword sets the number of segments used to approximate a quarter circle (defaults is 8)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:423
# c3900e5364a545adac04e595fbff541d
msgid "Returns a :class:`GEOSGeometry` representing the points making up this geometry that do not make up other."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:431
# bb9f7efe65ce470797411937aacac368
msgid "Given a distance (float), returns the point (or closest point) within the geometry (:class:`LineString` or :class:`MultiLineString`) at that distance. The normalized version takes the distance as a float between 0 (origin) and 1 (endpoint)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:436
# 3ddb0150eeb04bef939728d98558c9eb
msgid "Reverse of :meth:`GEOSGeometry.project`."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:440
# c67a8572b9004487bfb582364c3fa6c9
msgid "Returns a :class:`GEOSGeometry` representing the points shared by this geometry and other."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:448
# 4fdb486c48d44e93b9de1e605edad89d
msgid "Returns the distance (float) from the origin of the geometry (:class:`LineString` or :class:`MultiLineString`) to the point projected on the geometry (that is to a point of the line the closest to the given point). The normalized version returns the distance as a float between 0 (origin) and 1 (endpoint)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:454
# 3808d4b2aeb947b1a434975d3682e501
msgid "Reverse of :meth:`GEOSGeometry.interpolate`."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:458
# daf2732249904ac98dc892c49f81ed2e
msgid "Returns the DE-9IM intersection matrix (a string) representing the topological relationship between this geometry and the other."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:463
# a58093b2054a41feb1a75e3b2c9d1416
msgid "Returns a new :class:`GEOSGeometry`, simplified using the Douglas-Peucker algorithm to the specified tolerance.  A higher tolerance value implies less points in the output.  If no tolerance is tolerance provided, it defaults to 0."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:468
# b5598ac2c17a4f2fadddb902bac4e3c4
msgid "By default, this function does not preserve topology - e.g., :class:`Polygon` objects can be split, collapsed into lines or disappear. :class:`Polygon` holes can be created or disappear, and lines can cross. By specifying ``preserve_topology=True``, the result will have the same dimension and number of components as the input, however, this is significantly slower."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:477
# b816ccd9c86a46f7924d3577b73b9bb7
msgid "Returns a :class:`GEOSGeometry` combining the points in this geometry not in other, and the points in other not in this geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:482
# 88379afe90cf49409da3f0c9abeed71b
msgid "Returns a :class:`GEOSGeometry` representing all the points in this geometry and the other."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:486
# 5d3b0e36d46a4f70b56934e97f4695dd
msgid "Topological Properties"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:490
# a76153f04a7c48b1a68dcd4f4e461fbd
msgid "Returns the boundary as a newly allocated Geometry object."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:494
# ebcfa6838f534a5f837830f82c989826
msgid "Returns a :class:`Point` object representing the geometric center of the geometry.  The point is not guaranteed to be on the interior of the geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:500
# 097711c7916548aebb30b1a00778e2c9
msgid "Returns the smallest :class:`Polygon` that contains all the points in the geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:505
# cce44e3a4bca441c9d9398fe6f0e54c0
msgid "Returns a :class:`Polygon` that represents the bounding envelope of this geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:510
# 8ff5692bf9d64b95bbb3382e73c5dffd
msgid "Computes and returns a :class:`Point` guaranteed to be on the interior of this geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:514
# 0bd9b54a4bc84ca988b3b887231521cc
msgid "Other Properties & Methods"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:518
# eb3a2a35cb0f4cc395228166da65e9ae
msgid "This property returns the area of the Geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:522
# cc05f0f063bb477e906a3b384d0c96b1
msgid "This property returns the extent of this geometry as a 4-tuple, consisting of (xmin, ymin, xmax, ymax)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:527
# 654625b65d424accb532e241cf5e1541
msgid "This method returns a :class:`GEOSGeometry` that is a clone of the original."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:531
# e347669afeed46ee930610f83ae2252d
msgid "Returns the distance between the closest points on this geometry and the given ``geom`` (another :class:`GEOSGeometry` object)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:536
# a5baa40c85254573b62e128b1878396e
msgid "GEOS distance calculations are  linear -- in other words, GEOS does not perform a spherical calculation even if the SRID specifies a geographic coordinate system."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:542
# a8ad17bd01d5469aa8d1c329fb526cfc
msgid "Returns the length of this geometry (e.g., 0 for a :class:`Point`, the length of a :class:`LineString`, or the circumference of a :class:`Polygon`)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:550
# 390f803c9c254016a3cd8a921a45ed30
msgid "Support for prepared geometries requires GEOS 3.1."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:552
# 35d11776f5ca4fc88c6e6f32a2acb031
msgid "Returns a GEOS ``PreparedGeometry`` for the contents of this geometry. ``PreparedGeometry`` objects are optimized for the contains, intersects, and covers operations.  Refer to the :ref:`prepared-geometries` documentation for more information."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:559
# e44d137a89344dcea210fb0e593182c1
msgid "Returns a :class:`~django.contrib.gis.gdal.SpatialReference` object corresponding to the SRID of the geometry or ``None``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:568
# f9f5dd3620c345df940b54c18beaa976
msgid "Transforms the geometry according to the given coordinate transformation paramter (``ct``), which may be an integer SRID, spatial reference WKT string, a PROJ.4 string, a :class:`~django.contrib.gis.gdal.SpatialReference` object, or a :class:`~django.contrib.gis.gdal.CoordTransform` object. By default, the geometry is transformed in-place and nothing is returned. However if the ``clone`` keyword is set, then the geometry is not modified and a transformed clone of the geometry is returned instead."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:582
# 72414f0fa1704e06828beb969992cfbc
msgid "Prior to 1.3, this method would silently no-op if GDAL was not available. Now, a :class:`~django.contrib.gis.geos.GEOSException` is raised as application code relying on this behavior is in error. In addition, use of this method when the SRID is ``None`` or less than 0 now also generates a :class:`~django.contrib.gis.geos.GEOSException`."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:590
# 58340b148a85497597d78d4a3b64337f
msgid "``Point``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:594
# 5dd86fef664a40178b93d9188bf1e80b
msgid "``Point`` objects are instantiated using arguments that represent the component coordinates of the point or with a single sequence coordinates.  For example, the following are equivalent::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:602
# 91137a7d6ee64bedb1e441aa2fa1acb3
msgid "``LineString``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:606
# 0edceda8be014165becd5de2dd942091
msgid "``LineString`` objects are instantiated using arguments that are either a sequence of coordinates or :class:`Point` objects. For example, the following are equivalent::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:613
# 1b4d04ef5e8742968830fbfc899dc4af
msgid "In addition, ``LineString`` objects may also be created by passing in a single sequence of coordinate or :class:`Point` objects::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:620
# f174a761231c440585ed24c2332f7754
msgid "``LinearRing``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:624
# 9aedd980c0a343b598d1a2abfcdef2f8
msgid "``LinearRing`` objects are constructed in the exact same way as :class:`LineString` objects, however the coordinates must be *closed*, in other words, the first coordinates must be the same as the last coordinates.  For example::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:631
# 284b8a3e9b2e486092feb49a5de74ab8
msgid "Notice that ``(0, 0)`` is the first and last coordinate -- if they were not equal, an error would be raised."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:635
# 905b5565787d430dac726f8b8f335505
msgid "``Polygon``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:639
# a45e74f58d1842e3973674a2b8837185
msgid "``Polygon`` objects may be instantiated by passing in one or more parameters that represent the rings of the polygon.  The parameters must either be :class:`LinearRing` instances, or a sequence that may be used to construct a :class:`LinearRing`::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:651
# 872ee2482d874f689c4f8f325c683aaf
msgid "Returns a polygon object from the given bounding-box, a 4-tuple comprising (xmin, ymin, xmax, ymax)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:656
# 8656b21b66bc4bafa14cc75e23ca687c
msgid "Returns the number of interior rings in this geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:660
# 7bd7b1c856e34b9caf7b70f2905c8e06
msgid "Note that it is possible to compare ``Polygon`` objects directly with ``<`` or ``>``, but as the comparison is made through Polygon's :class:`LineString`, it does not mean much (but is consistent and quick). You can always force the comparison with the :attr:`~GEOSGeometry.area` property::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:670
# 0014bd0312884ae58b5d0f8649729478
msgid "Geometry Collections"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:673
# 4f2929431d1e493b8aaeecb26595fffe
msgid "``MultiPoint``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:677
# 3d4be1afd6644745acd776db194759c5
msgid "``MultiPoint`` objects may be instantiated by passing in one or more :class:`Point` objects as arguments, or a single sequence of :class:`Point` objects::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:685
# b267247bc9f3489f995e1d2d1fb9cf13
msgid "``MultiLineString``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:689
# 9d20ea72ed1448e8875551b24d8263de
msgid "``MultiLineString`` objects may be instantiated by passing in one or more :class:`LineString` objects as arguments, or a single sequence of :class:`LineString` objects::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:700
# e83b2633dde84b76aaa0e447ff0ec011
msgid "Returns a :class:`LineString` representing the line merge of all the components in this ``MultiLineString``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:705
# b333fe7560304fe1ab27d46db1474395
msgid "``MultiPolygon``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:709
# a6319d6922034faabad9e2549a83b8ea
msgid "``MultiPolygon`` objects may be instantiated by passing one or more :class:`Polygon` objects as arguments, or a single sequence of :class:`Polygon` objects::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:720
# 771faec833da4ab79b63676c3011ce9a
msgid "Returns a :class:`Polygon` that is the union of all of the component polygons in this collection.  The algorithm employed is significantly more efficient (faster) than trying to union the geometries together individually. [#fncascadedunion]_"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:727
# 6e2ef0a256e240ee97fad1360b1ec2ad
msgid "GEOS 3.1 is *required* to peform cascaded unions."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:730
# ca01d0ab6bae4b1392309fb554f5e46f
msgid "``GeometryCollection``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:734
# 4d3bd57ea29d4359acc1c9792d18944b
msgid "``GeometryCollection`` objects may be instantiated by passing in one or more other :class:`GEOSGeometry` as arguments, or a single sequence of :class:`GEOSGeometry` objects::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:745
# 189cda174fff4f7e9bb8b2a54019d458
msgid "Prepared Geometries"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:747
# 7138843303924b628cd44422efc6e30b
msgid "In order to obtain a prepared geometry, just access the :attr:`GEOSGeometry.prepared` property.  Once you have a ``PreparedGeometry`` instance its spatial predicate methods, listed below, may be used with other ``GEOSGeometry`` objects.  An operation with a prepared geometry can be orders of magnitude faster -- the more complex the geometry that is prepared, the larger the speedup in the operation.  For more information, please consult the `GEOS wiki page on prepared geometries <http://trac.osgeo.org/geos/wiki/PreparedGeometry>`_."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:757
# 58c05f3ef54a48149dcd40d01e72cca4
msgid "GEOS 3.1 is *required* in order to use prepared geometries."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:768
# 862aa25eed8a462d92c75e98a620c829
msgid "``PreparedGeometry``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:772
# 2d105d999f9d47538f06dbf080748912
msgid "All methods on ``PreparedGeometry`` take an ``other`` argument, which must be a :class:`GEOSGeometry` instance."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:784
# dbbaf8d6dd3a4a678f8d2aac150b1651
msgid "Geometry Factories"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:811
# c097ea829519499e9c27f2a713792aa9
msgid "I/O Objects"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:814
# 8dc92ab5abf3485eb1daa4cc92b33711
msgid "Reader Objects"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:816
# af6bad93707f4c5dad61619f9cc2da7d
msgid "The reader I/O classes simply return a :class:`GEOSGeometry` instance from the WKB and/or WKT input given to their ``read(geom)`` method."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:838
# 849a5aa253f143fe8c2346da607460c9
msgid "Writer Objects"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:840
# 10230c4781fd403a8826b58f6905584c
msgid "All writer objects have a ``write(geom)`` method that returns either the WKB or WKT of the given geometry.  In addition, :class:`WKBWriter` objects also have properties that may be used to change the byte order, and or include the SRID value (in other words, EWKB)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:847
# f623a623d387472db4da62d76250d3e4
msgid "``WKBWriter`` provides the most control over its output.  By default it returns OGC-compliant WKB when it's ``write`` method is called.  However, it has properties that allow for the creation of EWKB, a superset of the WKB standard that includes additional information."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:854
# f6fc65e44a52438b8dcd7bb2d85833a0
msgid "Returns the WKB of the given geometry as a Python ``buffer`` object. Example::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:865
# 7bafd6d2047c4f5a805cb6c774978b63
msgid "Returns WKB of the geometry in hexadecimal.  Example::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:875
# 64e0554084204385bdefd10f2ca50b34
msgid "This property may be be set to change the byte-order of the geometry representation."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:879
# dbe7bd0dca9a4737bc27112d41477dfb
msgid "Byteorder Value"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:881
# bdcd702e542745598c3e686a371f3307
msgid "Big Endian (e.g., compatible with RISC systems)"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:882
# de0f37a2ece949d698dc3a1c5b217ce4
msgid "Little Endian (e.g., compatible with x86 systems)"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:897
# 52cf2d90cec842a282929a46c7d3b683
msgid "This property may be set to change the output dimension of the geometry representation.  In other words, if you have a 3D geometry then set to 3 so that the Z value is included in the WKB."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:902
# bce38bc063464070a7f7de8715c9761a
msgid "Outdim Value"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:904
# d0473e7ed6694813b5f0d61604d05f51
msgid "The default, output 2D WKB."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:905
# 13d9bb73006e49d89c1cb04615d2df2e
msgid "Output 3D WKB."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:923
# 95a6b365fe474513bfbc121217b74f1d
msgid "Set this property with a boolean to indicate whether the SRID of the geometry should be included with the WKB representation.  Example::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:939
# e143cf6a9ad54a8e873d6680412f4658
msgid "Returns the WKT of the given geometry. Example::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:949
# f6fc376cdbbb48e9b45ad1bf75eb6590
msgid "*See* `PostGIS EWKB, EWKT and Canonical Forms <http://postgis.refractions.net/docs/using_postgis_dbmanagement.html#EWKB_EWKT>`_, PostGIS documentation at Ch. 4.1.2."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:950
# 9a45132f46fc4f9089dcc81991609c34
msgid "For more information, read Paul Ramsey's blog post about `(Much) Faster Unions in PostGIS 1.4 <http://blog.cleverelephant.ca/2009/01/must-faster-unions-in-postgis-14.html>`_ and Martin Davis' blog post on `Fast polygon merging in JTS using Cascaded Union <http://lin-ear-th-inking.blogspot.com/2007/11/fast-polygon-merging-in-jts-using.html>`_."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:958
# 7b57e4c7d3a442848f731952df9f35e2
msgid "GEOS_LIBRARY_PATH"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:960
# 955c9ceeacc64bfc83f4dfdb5a4c8435
msgid "A string specifying the location of the GEOS C library.  Typically, this setting is only used if the GEOS C library is in a non-standard location (e.g., ``/home/bob/lib/libgeos_c.so``)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:966
#: ../../ref/contrib/gis/install/geolibs.txt:139
# b97701a8975a48a1b1a9c70c5cf1de03
# 155278647f354e7e965090ad6dffda2f
msgid "The setting must be the *full* path to the **C** shared library; in other words you want to use ``libgeos_c.so``, not ``libgeos.so``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:970
# 2a6387c63224445e9ada7e76c03075ff
msgid "Exceptions"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:974
# e2de186d8edd40a9904a0e49f67d93ba
msgid "The base GEOS exception, indicates a GEOS-related error."
msgstr ""

#: ../../ref/contrib/gis/index.txt:5
# 9d2985ea132c40c5aa05891a6cd15fed
msgid "GeoDjango"
msgstr ""

#: ../../ref/contrib/gis/index.txt:10
# b91988151a8f40dc8f8b05fe94e065fb
msgid "GeoDjango intends to be a world-class geographic Web framework. Its goal is to make it as easy as possible to build GIS Web applications and harness the power of spatially enabled data."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:5
# 37bb6e21dd474e58a508a42698ab8c3e
msgid "Installing Geospatial libraries"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:7
# cc2150f1d1e543dcac6c5f1479b9d8de
msgid "GeoDjango uses and/or provides interfaces for the following open source geospatial libraries:"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:11
# 8f59618b7d334c39bcbce814619b0d47
msgid "Program"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:11
# 357d2d113caf4208a4228a1263645e7d
msgid "Required"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:11
#: ../../ref/contrib/gis/install/index.txt:62
# 4a2263df87d84e7d82dd97491c423f27
# f1445f59fb004cb6bbaa1c9bda51b0dc
msgid "Supported Versions"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:13
# c1e59408d7684bc0b78e82c8fd44b408
msgid ":ref:`GEOS <ref-geos>`"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:13
# 8f39a5425d9f411ea6966d5b4e910483
msgid "Geometry Engine Open Source"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:13
# 43f164f20c6543d58e16afa603e8bc0a
msgid "Yes"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:13
# 8f08a74ccfe7493db73eb5763f02769c
msgid "3.3, 3.2, 3.1, 3.0"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:14
# 8116d7f9d126439ba3910d9c71a3b5a3
msgid "`PROJ.4`_"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:14
# 65b0426a36e5484ca6f1dd8b62c78604
msgid "Cartographic Projections library"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:14
# 27752b9435264f2caef3b23b5e26f8d6
msgid "Yes (PostgreSQL and SQLite only)"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:14
# a895b66310604516b285b81b568e2deb
msgid "4.8, 4.7, 4.6, 4.5, 4.4"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:15
# a24e108e4a184d588dc00c27f21dfca8
msgid ":ref:`GDAL <ref-gdal>`"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:15
# fb2ab63c4ac048e9adcd47377ada2d70
msgid "Geospatial Data Abstraction Library"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:15
# 12724b7d6b9c41f1af84467ffc1ce82c
msgid "No (but, required for SQLite)"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:15
# 0339ef5b3d7346afa8e5af76bf6d038e
msgid "1.9, 1.8, 1.7, 1.6, 1.5"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:16
# 24ac4a72e4a4460aa841aafce4e6a73d
msgid ":ref:`GeoIP <ref-geoip>`"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:16
# ad7910947bd549d3bd7830eec51359e1
msgid "IP-based geolocation library"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:16
# c8a1f24781a141f68091f1985ce9851d
msgid "No"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:16
#: ../../ref/contrib/gis/install/postgis.txt:132
# 85e82902cdcc41539220dbf5bbc3bdca
# 69afd117a98e4a328ce204708a0a682f
msgid "1.4"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:17
# b7b0f5073091465fbb08514a3561a2f6
msgid "`PostGIS`__"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:17
# de987a1aa526436690a3112aa9a9dea8
msgid "Spatial extensions for PostgreSQL"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:17
# 0d981a544e5740b6a942b781ddee76ca
msgid "Yes (PostgreSQL only)"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:17
# fc2bcd8760a247d7a4184b7592d48300
msgid "2.0, 1.5, 1.4, 1.3"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:18
# 1a4ab5c389fb4fd79a0a5deee361d335
msgid "`SpatiaLite`__"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:18
# e7231c70391c45138bc163dccee6bcf5
msgid "Spatial extensions for SQLite"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:18
# 0c0e371ba9004436aaf2c988ca1f8f2d
msgid "Yes (SQLite only)"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:18
# dfb1757d3dfa4269be3adeeb2e567912
msgid "3.0, 2.4, 2.3"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:23
# 3a4ae9dca3a6468f9ae820394718471e
msgid "While :ref:`gdalbuild` is technically not required, it is *recommended*. Important features of GeoDjango (including the :ref:`ref-layermapping`, geometry reprojection, and the geographic admin) depend on its functionality."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:30
# 566339c2a406444e96627d61fb6bb369
msgid "The GeoDjango interfaces to GEOS, GDAL, and GeoIP may be used independently of Django.  In other words, no database or settings file required -- just import them as normal from :mod:`django.contrib.gis`."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:39
# 638257e0d0004f668d671305f5f433f0
msgid "On Debian/Ubuntu, you are advised to install the following packages which will install, directly or by dependency, the required geospatial libraries:"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:46
# 817f72e8c6e8447982456d94be958a92
msgid "Optional packages to consider:"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:48
# f3886b2358d94e079286042e1b959aa2
msgid "``libgeoip1``: for :ref:`GeoIP <ref-geoip>` support"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:49
# 25447023a8fc429fbaba79597f101b39
msgid "``gdal-bin``: for GDAL command line programs like ``ogr2ogr``"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:50
# c6cc49a7cd1d471f9ac264516ef397e6
msgid "``python-gdal`` for GDAL's own Python bindings -- includes interfaces for raster manipulation"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:52
# 1d0784b1436a4efd9fbd4536dba5ce03
msgid "Please also consult platform-specific instructions if you are on :ref:`macosx` or :ref:`windows`."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:58
#: ../../ref/contrib/gis/install/postgis.txt:27
# f975ca48bc1b4b4a9c80c6b162850d7d
# 79411f3578e44fffb14a616a1d426e1a
msgid "Building from source"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:60
# 3d29839e2c3549489e5a87d49b2f6624
msgid "When installing from source on UNIX and GNU/Linux systems, please follow the installation instructions carefully, and install the libraries in the given order.  If using MySQL or Oracle as the spatial database, only GEOS is required."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:67
# 76a73f8aab884f79b22286dc03f22329
msgid "On Linux platforms, it may be necessary to run the ``ldconfig`` command after installing each library.  For example::"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:75
# c557237019b4447b8e5b1a610081369d
msgid "OS X users are required to install `Apple Developer Tools`_ in order to compile software from source.  This is typically included on your OS X installation DVDs."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:84
#: ../../ref/contrib/gis/install/index.txt:65
#: ../../ref/contrib/gis/install/index.txt:66
#: ../../ref/contrib/gis/install/index.txt:298
# 4deaca61cd014abc870e45754ad022a5
# e649457149d4436283c1a2284442365d
# 725911a2ef294628ae66b870f3355f89
# 91776e5628ee41e98c93b726f9028a46
msgid "GEOS"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:86
# 57724e5fa1ce400db30d0804164d5f6c
msgid "GEOS is a C++ library for performing geometric operations, and is the default internal geometry representation used by GeoDjango (it's behind the \"lazy\" geometries).  Specifically, the C API library is called (e.g., ``libgeos_c.so``) directly from Python using ctypes."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:91
# a472c3c956034cf384f3b8e9c3acbdda
msgid "First, download GEOS 3.3.5 from the refractions Web site and untar the source archive::"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:97
# e7c05ba9d7d14daca30d2b3b105c984d
msgid "Next, change into the directory where GEOS was unpacked, run the configure script, compile, and install::"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:107
#: ../../ref/contrib/gis/install/geolibs.txt:211
#: ../../ref/contrib/gis/install/index.txt:130
#: ../../ref/contrib/gis/layermapping.txt:199
# 5449427498004d2f8430cef086a8dc7e
# 7eca790882bb458a970cb4933b5586a4
# 427ca0451e424820ba00d0aec1f4a2ee
# 8850708eeef942abbdd7046b941ebe32
msgid "Troubleshooting"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:110
# c713a30d67154c4a9efba318bb81026f
msgid "Can't find GEOS library"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:112
# 95afc511888646a5aadd4401cf05d0e7
msgid "When GeoDjango can't find GEOS, this error is raised:"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:118
# 0b09b4ee8740418290b955df675e7b42
msgid "The most common solution is to properly configure your :ref:`libsettings` *or* set :ref:`geoslibrarypath` in your settings."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:121
# c45cb71d234c4bce9730f84395d67792
msgid "If using a binary package of GEOS (e.g., on Ubuntu), you may need to :ref:`binutils`."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:126
# fcea9c69f1a245a781f2f1170c34be27
msgid "``GEOS_LIBRARY_PATH``"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:128
# 4812815bf2384b4885abd7ba2a4957c6
msgid "If your GEOS library is in a non-standard location, or you don't want to modify the system's library path then the :setting:`GEOS_LIBRARY_PATH` setting may be added to your Django settings file with the full path to the GEOS C library.  For example:"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:142
# f751c91c0bb647ff987156f47f36d0e2
msgid "See also :ref:`My logs are filled with GEOS-related errors <geos-exceptions-in-logfile>`."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:147
# f833fedbeaba4a808ce3156fa92ffb8e
msgid "PROJ.4"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:149
# fab67664dee249a7879075a7b76924ad
msgid "`PROJ.4`_ is a library for converting geospatial data to different coordinate reference systems."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:152
# a149e071fa374cbeba949edbed92bbcd
msgid "First, download the PROJ.4 source code and datum shifting files [#]_::"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:157
# e6ad22ab9e1d4fb2a6aa8550118aec94
msgid "Next, untar the source code archive, and extract the datum shifting files in the ``nad`` subdirectory.  This must be done *prior* to configuration::"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:165
# e23d1d4b1f0d428c8bea071fa7c8e460
msgid "Finally, configure, make and install PROJ.4::"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:175
#: ../../ref/contrib/gis/install/index.txt:300
# 515036ab639d478da83a661ad34b0b6c
# 7b434d1bb289427c8d53018855b44b19
msgid "GDAL"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:177
# d5396f507a8f4392a46a514da40050ea
msgid "`GDAL`__ is an excellent open source geospatial library that has support for reading most vector and raster spatial data formats.  Currently, GeoDjango only supports :ref:`GDAL's vector data <ref-gdal>` capabilities [#]_. :ref:`geosbuild` and :ref:`proj4` should be installed prior to building GDAL."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:182
# fe9f4e8ca45e40aea5ec263a0ca791c9
msgid "First download the latest GDAL release version and untar the archive::"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:188
# e1f3658f80a2472f8f324ef6652488b7
msgid "Configure, make and install::"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:197
# 71aaf78ef18c4cd1abb73e5c36783c02
msgid "Because GeoDjango has it's own Python interface, the preceding instructions do not build GDAL's own Python bindings.  The bindings may be built by adding the ``--with-python`` flag when running ``configure``.  See `GDAL/OGR In Python`__ for more information on GDAL's bindings."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:202
# fa835cf6012b4e3eb47a2964efc7d83e
msgid "If you have any problems, please see the troubleshooting section below for suggestions and solutions."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:214
# dc068ddf784f4d04bc1e87062e1f8986
msgid "Can't find GDAL library"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:216
# 1e59e7621eaa4ff889c0f739cd3db2ce
msgid "When GeoDjango can't find the GDAL library, the ``HAS_GDAL`` flag will be false:"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:225
# eed9e4cf48ae4ab6a917527398ca4ffd
msgid "The solution is to properly configure your :ref:`libsettings` *or* set :ref:`gdallibrarypath` in your settings."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:231
# ca42bc2e6d6249c5af1c19e2cbc5841f
msgid "``GDAL_LIBRARY_PATH``"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:233
# b77f0021d09d47afbffc25c8937c0330
msgid "If your GDAL library is in a non-standard location, or you don't want to modify the system's library path then the :setting:`GDAL_LIBRARY_PATH` setting may be added to your Django settings file with the full path to the GDAL library.  For example:"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:245
# 52f09388c56b4e6ca1e3060fa41515f9
msgid "Can't find GDAL data files (``GDAL_DATA``)"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:247
# 3868fde97ac2480b8bd1ed495fb8e17b
msgid "When installed from source, GDAL versions 1.5.1 and below have an autoconf bug that places data in the wrong location. [#]_   This can lead to error messages like this:"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:257
# c8595dfc38e44f56848f958772838888
msgid "The solution is to set the ``GDAL_DATA`` environment variable to the location of the GDAL data files before invoking Python  (typically ``/usr/local/share``; use ``gdal-config --datadir`` to find out). For example::"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:264
# dab69e8995964919ba9f3c1e14bd285a
msgid "If using Apache, you may need to add this environment variable to your configuration file:"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:272
# fc453c992a1649d5a2109f6b3e040317
msgid "The datum shifting files are needed for converting data to and from certain projections. For example, the PROJ.4 string for the `Google projection (900913 or 3857) <http://spatialreference.org/ref/sr-org/6864/prj/>`_ requires the ``null`` grid file only included in the extra datum shifting files. It is easier to install the shifting files now, then to have debug a problem caused by their absence later."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:279
# 59c2a74f7c084362aafdd8ece3674ebc
msgid "Specifically, GeoDjango provides support for the `OGR <http://gdal.org/ogr>`_ library, a component of GDAL."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:281
# 953d5bca91b14028aa72fbe06a940710
msgid "See `GDAL ticket #2382 <http://trac.osgeo.org/gdal/ticket/2382>`_."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:5
# 76138b6afabe46b2bbcabcd2668d86c3
msgid "GeoDjango Installation"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:11
# a7be1f6067e146dc9521df8be4b1fab6
msgid "In general, GeoDjango installation requires:"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:13
# 006e60efe3334a15a9cece049a0932ad
msgid ":ref:`Python and Django <django>`"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:14
# 05f61980abf149dc9e10e548d63a5c19
msgid ":ref:`spatial_database`"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:15
# 4be8b7ac8a8b4b2dbf25e12df3d25416
msgid ":ref:`geospatial_libs`"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:17
# e4ae4791b55b4498a1e27e1bd71d588f
msgid "Details for each of the requirements and installation instructions are provided in the sections below. In addition, platform-specific instructions are available for:"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:21
# 81db9eb6b09e42f1b6f2973f95e82d66
msgid ":ref:`macosx`"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:22
# 0d4871e1a77448fa8c4c4926012ae33d
msgid ":ref:`windows`"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:26
# ca070f87b9744101881f610bce392ce9
msgid "Because GeoDjango takes advantage of the latest in the open source geospatial software technology, recent versions of the libraries are necessary. If binary packages aren't available for your platform, installation from source may be required. When compiling the libraries from source, please follow the directions closely, especially if you're a beginner."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:33
# 89b802995d634a378d72e98273c358a4
msgid "Requirements"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:38
# ac75d3f32f9d43ddb19d67590df0cecb
msgid "Python and Django"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:40
# 93bd84cca6504036857e2e5c1743a7a3
msgid "Because GeoDjango is included with Django, please refer to Django's :ref:`installation instructions <installing-official-release>` for details on how to install."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:48
# 269d9a8e87b4485fb43c862df192cc9b
msgid "Spatial database"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:49
# 7567d2af4db741baa1bfb532d36cd838
msgid "PostgreSQL (with PostGIS), MySQL (mostly with MyISAM engine), Oracle, and SQLite (with SpatiaLite) are the spatial databases currently supported."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:54
# a71bbc781bea4bb7a8b5db4fe049c882
msgid "PostGIS is recommended, because it is the most mature and feature-rich open source spatial database."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:57
# e2f668be4ff443b28d086ab472272080
msgid "The geospatial libraries required for a GeoDjango installation depends on the spatial database used.  The following lists the library requirements, supported versions, and any notes for each of the supported database backends:"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:62
# 3e5d069be54c49acbfb0077e1883ff5e
msgid "Database"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:62
# 2c477903d44949f588208f7cb0d885af
msgid "Library Requirements"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:62
# 056e169e32bb4afda5258cd22b306f0a
msgid "Notes"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:64
#: ../../ref/contrib/gis/install/index.txt:416
# 729105cda7aa4f53befe524bd3bb9b52
# a4547c26c49a4f5cbd0cf2b76358cde1
msgid "PostgreSQL"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:64
# 62d513b7c2fd4f5bb08ffa236c8ebbf2
msgid "GEOS, PROJ.4, PostGIS"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:64
# 768f61acb72b4773869a82e7accc79f2
msgid "8.2+"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:64
# d35d676d77a445d3b0a83a8b1b349f22
msgid "Requires PostGIS."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:65
# 4af11e8e3df3440ab2723300256bc3d2
msgid "5.x"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:65
# de9d2da622d14081a393cb5d7aecf8ae
msgid "Not OGC-compliant; :ref:`limited functionality <mysql-spatial-limitations>`."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:66
# 9efeeabc959b40fbb74df5694ee7bb5e
msgid "10.2, 11"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:66
# 878d2755a48343bab6b72f7bd737d265
msgid "XE not supported; not tested with 9."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:67
#: ../../ref/contrib/gis/install/spatialite.txt:31
# 507d0f4051f54f619bc9b940a4c12599
# 14182477fb234db5ba77c421f0af12cc
msgid "SQLite"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:67
# 3a7783428adf4ad5a2618e9755290f1b
msgid "GEOS, GDAL, PROJ.4, SpatiaLite"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:67
# 5cc8c7d34330472381f68a17dd2d587a
msgid "3.6.+"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:67
# 93872c12680a4c4e9c4175055a59e49f
msgid "Requires SpatiaLite 2.3+, pysqlite2 2.5+"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:70
# b00ff3da41464c6f9936bf4d085f402b
msgid "See also `this comparison matrix`__ on the OSGeo Wiki for PostgreSQL/PostGIS/GEOS/GDAL possible combinations."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:79
# c326d17dca7e44f7a76e4a993825d095
msgid "Geospatial libraries"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:87
# 604ac390d5ed4e6e9126b7b9f0b7f892
msgid "Database installation"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:96
# 4c0f8a94128c403f96caaa09a4edad23
msgid "Add ``django.contrib.gis`` to :setting:`INSTALLED_APPS`"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:98
# d33e0c87d4c544ddbd453b75deddb865
msgid "Like other Django contrib applications, you will *only* need to add :mod:`django.contrib.gis` to :setting:`INSTALLED_APPS` in your settings. This is the so that ``gis`` templates can be located -- if not done, then features such as the geographic admin or KML sitemaps will not function properly."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:106
# ba7f2b4e880a47979d78e2808f099c6a
msgid "Add Google projection to ``spatial_ref_sys`` table"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:110
# e2b9f37055514799a8733788f088e849
msgid "If you're running PostGIS 1.4 or above, you can skip this step. The entry is already included in the default ``spatial_ref_sys`` table."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:113
# 204efa590c8044b88ec14ab889fdc82b
msgid "In order to conduct database transformations to the so-called \"Google\" projection (a spherical mercator projection used by Google Maps), an entry must be added to your spatial database's ``spatial_ref_sys`` table. Invoke the Django shell from your project and execute the ``add_srs_entry`` function:"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:125
# d945dd43d305407389f19972c6f8b0eb
msgid "This adds an entry for the 900913 SRID to the ``spatial_ref_sys`` (or equivalent) table, making it possible for the spatial database to transform coordinates in this projection.  You only need to execute this command *once* per spatial database."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:132
# b730b32dff324156b0edf3854f5b4c1e
msgid "If you can't find the solution to your problem here then participate in the community!  You can:"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:135
# 9be6a5d2a9f34bbbb0b2b6d9fa755e92
msgid "Join the ``#geodjango`` IRC channel on FreeNode. Please be patient and polite -- while you may not get an immediate response, someone will attempt to answer your question as soon as they see it."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:138
# 782c49e514eb4f6c83e161d5e3f89ef8
msgid "Ask your question on the `GeoDjango`__ mailing list."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:139
# c4915a170ef14a5e95ad7644cb791d02
msgid "File a ticket on the `Django trac`__ if you think there's a bug.  Make sure to provide a complete description of the problem, versions used, and specify the component as \"GIS\"."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:149
# d02345d39ba24b318df1b273c09ea937
msgid "Library environment settings"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:151
# 14d4cc4421924c47be9261fd0d94dd92
msgid "By far, the most common problem when installing GeoDjango is that the external shared libraries (e.g., for GEOS and GDAL) cannot be located. [#]_ Typically, the cause of this problem is that the operating system isn't aware of the directory where the libraries built from source were installed."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:156
# e7dc0886f56c4191845a13e70e601d16
msgid "In general, the library path may be set on a per-user basis by setting an environment variable, or by configuring the library path for the entire system."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:161
# b0ea3259bf54414baa5a20d2eff05548
msgid "``LD_LIBRARY_PATH`` environment variable"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:163
# 4bd6faad375648ee99c349ab51c7745d
msgid "A user may set this environment variable to customize the library paths they want to use.  The typical library directory for software built from source is ``/usr/local/lib``.  Thus, ``/usr/local/lib`` needs to be included in the ``LD_LIBRARY_PATH`` variable.  For example, the user could place the following in their bash profile::"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:172
# e78b52f58f314a7493f533a1d2d3ecfe
msgid "Setting system library path"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:174
# b0c0e83f660441129e9b0399b31531a4
msgid "On GNU/Linux systems, there is typically a file in ``/etc/ld.so.conf``, which may include additional paths from files in another directory, such as ``/etc/ld.so.conf.d``. As the root user, add the custom library path (like ``/usr/local/lib``) on a new line in ``ld.so.conf``.  This is *one* example of how to do so::"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:182
# efe5b9e6be53421896fe976087a31fe7
msgid "For OpenSolaris users, the system library path may be modified using the ``crle`` utility.  Run ``crle`` with no options to see the current configuration and use ``crle -l`` to set with the new library path.  Be *very* careful when modifying the system library path::"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:192
# deeac2f74b1d49f59f3f96abe04abb03
msgid "Install ``binutils``"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:194
# 3b11fddc5d7f4b4185be2d4952fb33f4
msgid "GeoDjango uses the ``find_library`` function (from the ``ctypes.util`` Python module) to discover libraries.  The ``find_library`` routine uses a program called ``objdump`` (part of the ``binutils`` package) to verify a shared library on GNU/Linux systems.  Thus, if ``binutils`` is not installed on your Linux system then Python's ctypes may not be able to find your library even if your library path is set correctly and geospatial libraries were built perfectly."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:201
# 1eda28961d024ba288f5b50cdc3863ff
msgid "The ``binutils`` package may be installed on Debian and Ubuntu systems using the following command::"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:206
# 85f7051ced7643eaa4378f921d156d1d
msgid "Similarly, on Red Hat and CentOS systems::"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:211
# 9e0a96b7c2ce411c88646e68b19b6c88
msgid "Platform-specific instructions"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:216
# 87907bbd7ead44538e854e8e7b5555c3
msgid "Mac OS X"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:218
# b6f7f93923034cc0ab9d8481d80f9f06
msgid "Because of the variety of packaging systems available for OS X, users have several different options for installing GeoDjango. These options are:"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:221
# bb1ea6a192aa468baff40da179485be4
msgid ":ref:`homebrew`"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:222
# 8b207402c965479c8cf08ad327e1059a
msgid ":ref:`kyngchaos`"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:223
# 2054e62719d64e6f84c524e5be0e4321
msgid ":ref:`fink`"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:224
# 2b6506163fad424aa5898ca9aeabf9c2
msgid ":ref:`macports`"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:225
# 529d8370ddac47abbe283bb36b4d847d
msgid ":ref:`build_from_source`"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:229
# ba574597b4704ec38ef8a1ea9bdbbf00
msgid "Currently, the easiest and recommended approach for installing GeoDjango on OS X is to use the KyngChaos packages."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:232
# d467702351a941f3a43f128e6b41e283
msgid "This section also includes instructions for installing an upgraded version of :ref:`macosx_python` from packages provided by the Python Software Foundation, however, this is not required."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:239
#: ../../ref/contrib/gis/install/index.txt:400
# b99907bc95da4b4bbfe8bc2e00c6bba9
# 36b17154687b44afaf1abf003c922fc8
msgid "Python"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:241
# 6929168f44504794bf4102f3066d02e6
msgid "Although OS X comes with Python installed, users can use framework installers (`2.6`__ and `2.7`__ are available) provided by the Python Software Foundation.  An advantage to using the installer is that OS X's Python will remain \"pristine\" for internal operating system use."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:252
# 205e788c509e406aaa6155fe33680dac
msgid "You will need to modify the ``PATH`` environment variable in your ``.profile`` file so that the new version of Python is used when ``python`` is entered at the command-line::"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:261
# 33047cc912b1451bae95e9a733d90aa2
msgid "Homebrew"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:263
# 998c1b36655b4e06bbab94ae0c702ec6
msgid "`Homebrew`__ provides \"recipes\" for building binaries and packages from source. It provides recipes for the GeoDjango prerequisites on Macintosh computers running OS X. Because Homebrew still builds the software from source, the `Apple Developer Tools`_ are required."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:268
#: ../../ref/contrib/gis/install/index.txt:361
# 4c95b87352e342cd9bba1f6bb19a5023
# 99afb99845b54ae3952486663a18a6b7
msgid "Summary::"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:281
# 4011bb3ea64047909a53e9bad5bbe193
msgid "KyngChaos packages"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:283
# ef065193982d46858d1d55d81bff4be5
msgid "William Kyngesburye provides a number of `geospatial library binary packages`__ that make it simple to get GeoDjango installed on OS X without compiling them from source.  However, the `Apple Developer Tools`_ are still necessary for compiling the Python database adapters :ref:`psycopg2_kyngchaos` (for PostGIS) and :ref:`pysqlite2` (for SpatiaLite)."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:291
# 9662c74bad474b80b9670bf3ee750424
msgid "SpatiaLite users should consult the :ref:`spatialite_macosx` section after installing the packages for additional instructions."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:294
# a28ababbde454aa2adc49fa4c33e4c10
msgid "Download the framework packages for:"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:296
# f9e01f0cc187487d9fd6431e69ea5d60
msgid "UnixImageIO"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:297
# 1e2d6ba58c384e6bac2b8af97ed95fa1
msgid "PROJ"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:299
# 90b83450a366460486151ab22c1da35c
msgid "SQLite3 (includes the SpatiaLite library)"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:302
# e4ddf209182c4b1daa8dc4c98b5fb084
msgid "Install the packages in the order they are listed above, as the GDAL and SQLite packages require the packages listed before them."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:305
# 130a739d894d4bf5a1233170fbccdc2a
msgid "Afterwards, you can also install the KyngChaos binary packages for `PostgreSQL and PostGIS`__."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:308
# 0ebb218c237c49ab8e01ff2e04a1768c
msgid "After installing the binary packages, you'll want to add the following to your ``.profile`` to be able to run the package programs from the command-line::"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:324
#: ../../ref/contrib/gis/install/index.txt:467
# 3b011a76764b42889b657cdebfdbbdb4
# f8563eca35364625beef8de8ad35abf0
msgid "psycopg2"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:326
# 77310bd3470c4a8191ef1cf1e1de7e0b
msgid "After you've installed the KyngChaos binaries and modified your ``PATH``, as described above, ``psycopg2`` may be installed using the following command::"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:333
# b79e1b63519d4855915f33b45c65eb4e
msgid "If you don't have ``pip``, follow the :ref:`installation instructions <installing-official-release>` to install it."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:339
# e05365ba6ca445758f19dccd62b903cb
msgid "Fink"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:341
# f87e2d55027041059380294867f1f52b
msgid "`Kurt Schwehr`__ has been gracious enough to create GeoDjango packages for users of the `Fink`__ package system.  The following packages are available, depending on which version of Python you want to use:"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:345
# 41c29a69942b4428bae99c8554d7e914
msgid "``django-gis-py26``"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:346
# 0d54e869eaac44b38bf6d143f912948c
msgid "``django-gis-py25``"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:347
# 8f904f39619d43c095a211897e81476a
msgid "``django-gis-py24``"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:355
# cfb2f7c1da904960b3f44df0f44d2cc1
msgid "MacPorts"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:357
# 89fdac5ce1ae45c4984bf44744208d0c
msgid "`MacPorts`__ may be used to install GeoDjango prerequisites on Macintosh computers running OS X.  Because MacPorts still builds the software from source, the `Apple Developer Tools`_ are required."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:372
# 78d176e24f894ddba21af757673af0e1
msgid "You will also have to modify the ``PATH`` in your ``.profile`` so that the MacPorts programs are accessible from the command-line::"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:377
# 65224820de5f4a79a290531adf736361
msgid "In addition, add the ``DYLD_FALLBACK_LIBRARY_PATH`` setting so that the libraries can be found by Python::"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:387
#: ../../ref/contrib/gis/testing.txt:96
# 69bf444a8e974166865293d13ca315c3
# 5cd9e4b02f90403aab227f7778e6c33b
msgid "Windows"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:389
# 8df8f09550ce46528d43174e11e79885
msgid "Proceed through the following sections sequentially in order to install GeoDjango on Windows."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:394
# 8fe83487a95549f690bca1622b0bb734
msgid "These instructions assume that you are using 32-bit versions of all programs.  While 64-bit versions of Python and PostgreSQL 9.x are available, 64-bit versions of spatial libraries, like GEOS and GDAL, are not yet provided by the :ref:`OSGeo4W` installer."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:402
# 2ee5cb10478c493dafb99dd4dd571ef1
msgid "First, download the latest `Python 2.7 installer`__ from the Python Web site. Next, run the installer and keep the defaults -- for example, keep 'Install for all users' checked and the installation path set as ``C:\\Python27``."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:409
# 8065972460304a8ebb2bebacf4f12346
msgid "You may already have a version of Python installed in ``C:\\python`` as ESRI products sometimes install a copy there.  *You should still install a fresh version of Python 2.7.*"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:418
# b765bc77764b49ea901178f4514931dc
msgid "First, download the latest `PostgreSQL 9.x installer`__ from the `EnterpriseDB`__ Web site.  After downloading, simply run the installer, follow the on-screen directions, and keep the default options unless you know the consequences of changing them."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:425
# 095e63850326473d8b810ae2aad61079
msgid "The PostgreSQL installer creates both a new Windows user to be the 'postgres service account' and a ``postgres`` database superuser You will be prompted once to set the password for both accounts -- make sure to remember it!"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:430
# 508a0f906a4c4b1da523592338498509
msgid "When the installer completes, it will ask to launch the Application Stack Builder (ASB) on exit -- keep this checked, as it is necessary to install :ref:`postgisasb`."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:436
# b7f90808473d42bb96d80cd8c3b251f6
msgid "If installed successfully, the PostgreSQL server will run in the background each time the system as started as a Windows service. A :menuselection:`PostgreSQL 9.x` start menu group will created and contains shortcuts for the ASB as well as the 'SQL Shell', which will launch a ``psql`` command window."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:450
# b4be996528094793b5c4eff04788787b
msgid "From within the Application Stack Builder (to run outside of the installer, :menuselection:`Start --> Programs --> PostgreSQL 9.x`), select :menuselection:`PostgreSQL Database Server 9.x on port 5432` from the drop down menu.  Next, expand the :menuselection:`Categories --> Spatial Extensions` menu tree and select :menuselection:`PostGIS 1.5 for PostgreSQL 9.x`."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:456
# d27b84cc3f4c47d68b5a0b23902dbe0e
msgid "After clicking next, you will be prompted to select your mirror, PostGIS will be downloaded, and the PostGIS installer will begin.  Select only the default options during install (e.g., do not uncheck the option to create a default PostGIS database)."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:463
# f611183417ae4999ac0011697e312b36
msgid "You will be prompted to enter your ``postgres`` database superuser password in the 'Database Connection Information' dialog."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:469
# 2a2e6132342641a487b64971da5aa4f8
msgid "The ``psycopg2`` Python module provides the interface between Python and the PostgreSQL database.  Download the latest `Windows installer`__ for your version of Python and PostgreSQL and run using the default settings. [#]_"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:478
# b1cfaf56ec9c414683bfa28a3d689851
msgid "OSGeo4W"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:480
# 06e1d8a3a0c44ce98d49d954b74e8986
msgid "The `OSGeo4W installer`_ makes it simple to install the PROJ.4, GDAL, and GEOS libraries required by GeoDjango.  First, download the `OSGeo4W installer`_, and run it.  Select :menuselection:`Express Web-GIS Install` and click next. In the 'Select Packages' list, ensure that GDAL is selected; MapServer and Apache are also enabled by default, but are not required by GeoDjango and may be unchecked safely.  After clicking next, the packages will be automatically downloaded and installed, after which you may exit the installer."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:492
# c46940f07e224e529cbfc439e76bb70e
msgid "Modify Windows environment"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:494
# cb2873988d9c4b8dac525a27abbd3a77
msgid "In order to use GeoDjango, you will need to add your Python and OSGeo4W directories to your Windows system ``Path``, as well as create ``GDAL_DATA`` and ``PROJ_LIB`` environment variables.  The following set of commands, executable with ``cmd.exe``, will set this up:"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:510
# aeebaf12557c480c93f1a7f897be4e00
msgid "For your convenience, these commands are available in the executable batch script, :download:`geodjango_setup.bat`."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:515
# 9ff12fd3dd1b4be0b439bfadbea60380
msgid "Administrator privileges are required to execute these commands. To do this, right-click on :download:`geodjango_setup.bat` and select :menuselection:`Run as administrator`. You need to log out and log back in again for the settings to take effect."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:522
# 977df0368c6e4d5f9abe0bea036f0a93
msgid "If you customized the Python or OSGeo4W installation directories, then you will need to modify the ``OSGEO4W_ROOT`` and/or ``PYTHON_ROOT`` variables accordingly."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:527
# 4e05b33a18bf40b8ac30ae6b127fed98
msgid "Install Django and set up database"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:529
# fd603c0d8c344e1793f0a7fe89a1cad6
msgid "Finally, :ref:`install Django <installing-official-release>` on your system."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:532
# 4869a0f55c4a465992b8c75e0e2ba37f
msgid "GeoDjango uses the :func:`~ctypes.util.find_library` routine from ``ctypes.util`` to locate shared libraries."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:534
# d2dea5afc1da4abc87332a2c1d73402e
msgid "The ``psycopg2`` Windows installers are packaged and maintained by `Jason Erickson <http://www.stickpeople.com/projects/python/win-psycopg/>`_."
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:5
# 8588ec196c96441b9a131d92e88d9535
msgid "Installing PostGIS"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:7
# 5c52c92313a643cfaa0e65c92d7cd5cc
msgid "`PostGIS`__ adds geographic object support to PostgreSQL, turning it into a spatial database. :ref:`geosbuild`, :ref:`proj4` and :ref:`gdalbuild` should be installed prior to building PostGIS. You might also need additional libraries, see `PostGIS requirements`_."
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:14
# 39635b48810d48ffac32bbe611627634
msgid "The `psycopg2`_ module is required for use as the database adaptor when using GeoDjango with PostGIS."
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:20
# 8771b0fc98214654807533bcb52c44b9
msgid "On Debian/Ubuntu, you are advised to install the following packages: postgresql-x.x, postgresql-x.x-postgis, postgresql-server-dev-x.x, python-psycopg2 (x.x matching the PostgreSQL version you want to install). Please also consult platform-specific instructions if you are on :ref:`macosx` or :ref:`windows`."
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:29
# 821e95cff1f84de1a286c4e5b23023be
msgid "First download the source archive, and extract::"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:35
# 125d4fc15b3145b0926519e540ee141e
msgid "Next, configure, make and install PostGIS::"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:39
# 6532983ec6ba48fb910ef89833ed5bc9
msgid "Finally, make and install::"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:47
# 9422ecd795b94ccba24238fe61afc888
msgid "GeoDjango does not automatically create a spatial database.  Please consult the section on :ref:`spatialdb_template91` or :ref:`spatialdb_template_earlier` for more information."
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:54
# d2fdd679559b4cb5ba798434220c7516
msgid "Post-installation"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:60
# 85a894abe0954a38ab20d11abbd1b91a
msgid "Creating a spatial database with PostGIS 2.0 and PostgreSQL 9.1+"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:62
# 5cd2dcf4cc634fa48d4c5eb108f36fb7
msgid "PostGIS 2 includes an extension for Postgres 9.1+ that can be used to enable spatial functionality::"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:70
# d1d2856d97ad4f6493a57bcc6f24f9bc
msgid "No PostGIS topology functionalities are yet available from GeoDjango, so the creation of the ``postgis_topology`` extension is entirely optional."
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:76
# e5288f81aa3143f084e30de8d961d883
msgid "Creating a spatial database template for earlier versions"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:78
# 65ce948a460f41079b7a156158b62a38
msgid "If you have an earlier version of PostGIS or PostgreSQL, the CREATE EXTENSION isn't available and you need to create the spatial database using the following instructions."
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:82
# 08d543a1127243c89962f0e3fe6aa236
msgid "Creating a spatial database with PostGIS is different than normal because additional SQL must be loaded to enable spatial functionality.  Because of the steps in this process, it's better to create a database template that can be reused later."
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:87
# 6be5a19fae8e4f35af79c5579d924802
msgid "First, you need to be able to execute the commands as a privileged database user.  For example, you can use the following to become the ``postgres`` user::"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:94
# 7b61c527add84710b574e11d1c67de12
msgid "The location *and* name of the PostGIS SQL files (e.g., from ``POSTGIS_SQL_PATH`` below) depends on the version of PostGIS. PostGIS versions 1.3 and below use ``<pg_sharedir>/contrib/lwpostgis.sql``; whereas version 1.4 uses ``<sharedir>/contrib/postgis.sql`` and version 1.5 uses ``<sharedir>/contrib/postgis-1.5/postgis.sql``."
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:100
# 4d9eb5c2dbd849c7b076e4ace507694d
msgid "To complicate matters, Debian/Ubuntu distributions have their own separate directory naming system that might change with time. In this case, use the :download:`create_template_postgis-debian.sh` script."
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:104
# 9df82a1b96274583aaddb1e3d4803bd1
msgid "The example below assumes PostGIS 1.5, thus you may need to modify ``POSTGIS_SQL_PATH`` and the name of the SQL file for the specific version of PostGIS you are using."
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:108
# 6f7b332efa6c481eb8530aedd5364919
msgid "Once you're a database super user, then you may execute the following commands to create a PostGIS spatial database template::"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:125
# eacec5e4ccea4a83bcf7d0940c82d5b7
msgid "These commands may be placed in a shell script for later use; for convenience the following scripts are available:"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:129
# 383aabb0d80f45d9923eb78bef5b6f32
msgid "PostGIS version"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:129
# fadbec9ca7364eddb2bcb72ef3970a9d
msgid "Bash shell script"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:131
# b2b9e99bb02e4296a337c531263a23f8
msgid "1.3"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:131
# 2bfde920fcf142ffbe64544e2e77051b
msgid ":download:`create_template_postgis-1.3.sh`"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:132
# 0a500aaf857c49b4a062755d304179df
msgid ":download:`create_template_postgis-1.4.sh`"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:133
# 0517b1bbde214498a3c3da76842d2154
msgid "1.5"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:133
# a162132a3af14f1883aee875d3815af1
msgid ":download:`create_template_postgis-1.5.sh`"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:134
# cae65d42569c4d24a440cfd7ad6a678d
msgid "Debian/Ubuntu"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:134
# 871d911f77534cdcae8d667d2e713ddb
msgid ":download:`create_template_postgis-debian.sh`"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:137
# 252d36b5bc4e4116a20acc4374a4423a
msgid "Afterwards, you may create a spatial database by simply specifying ``template_postgis`` as the template to use (via the ``-T`` option)::"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:144
# 70f27430e3074279a5235994704a5d76
msgid "While the ``createdb`` command does not require database super-user privileges, it must be executed by a database user that has permissions to create databases. You can create such a user with the following command::"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:151
# c0bf745b619d423c99f2e4198977fe44
msgid "PostgreSQL's createdb fails"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:153
# ef137fcd21fc4342b2211b58002a8f4b
msgid "When the PostgreSQL cluster uses a non-UTF8 encoding, the :file:`create_template_postgis-*.sh` script will fail when executing ``createdb``::"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:160
# 8832cb3909044f59b7b46b8e0e5af37f
msgid "The `current workaround`__ is to re-create the cluster using UTF8 (back up any databases before dropping the cluster)."
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:166
# 9122e5935ea242bda88c2ad0db8bdfec
msgid "Managing the database"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:168
# 0eeb0c202df34ceb994a1130da88a73b
msgid "To administer the database, you can either use the pgAdmin III program (:menuselection:`Start --> PostgreSQL 9.x --> pgAdmin III`) or the SQL Shell (:menuselection:`Start --> PostgreSQL 9.x --> SQL Shell`). For example, to create a ``geodjango`` spatial database and user, the following may be executed from the SQL Shell as the ``postgres`` user::"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:5
# 1ecf913249144dbaa7a7dc5c91c1299b
msgid "Installing Spatialite"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:7
# 40a85f3c65464d6da85a4f9311bfd670
msgid "`SpatiaLite`__ adds spatial support to SQLite, turning it into a full-featured spatial database."
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:10
# 3f9e92523c934423b9020bf72010bf92
msgid "Check first if you can install Spatialite from system packages or binaries. For example, on Debian-based distributions, try to install the ``spatialite-bin`` package. For Mac OS X, follow the :ref:`specific instructions below<spatialite_macosx>`. For Windows, you may find binaries on `Gaia-SINS`__ home page. In any case, you should always be able to :ref:`install from source<spatialite_source>`."
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:17
# 363b7b89e6e2464ab61ec1a789f4a972
msgid "When you are done with the installation process, skip to :ref:`create_spatialite_db`."
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:25
# f86cef05013648f3aec1d6209207ce9d
msgid "Installing from source"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:27
# b99b1c0b33d24c729d3e5fd02188153e
msgid ":ref:`GEOS and PROJ.4<geospatial_libs>` should be installed prior to building SpatiaLite."
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:33
# 19ea08b34b81453faeb08f0c43afb1bd
msgid "Check first if SQLite is compiled with the `R*Tree module`__. Run the sqlite3 command line interface and enter the following query::"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:38
# f62613c0861244c38834266ca3eda156
msgid "If you obtain an error, you will have to recompile SQLite from source. Otherwise, just skip this section."
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:41
# e77c1c0b6f7a43fe908a7c2675c86a5c
msgid "To install from sources, download the latest amalgamation source archive from the `SQLite download page`__, and extract::"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:48
# 895746dcc8f74ede84cb5d9fc1a3f8f8
msgid "Next, run the ``configure`` script -- however the ``CFLAGS`` environment variable needs to be customized so that SQLite knows to build the R*Tree module::"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:62
# 3572ab61c9a3477bb3f140e61a89b356
msgid "SpatiaLite library (``libspatialite``) and tools (``spatialite``)"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:64
# afa3c380c2b24ef4a818a83fae60f037
msgid "Get the latest SpatiaLite library source and tools bundle from the `download page`__::"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:72
# 94b3ca8cc9394b19b819e3c26ec2a330
msgid "Prior to attempting to build, please read the important notes below to see if customization of the ``configure`` command is necessary.  If not, then run the ``configure`` script, make, and install for the SpatiaLite library::"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:82
# fcd7569040c4494ab22df8ab7566bbd5
msgid "Finally, do the same for the SpatiaLite tools::"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:92
# 0c5055aad4604e059c7edf7e230ee03e
msgid "If you've installed GEOS and PROJ.4 from binary packages, you will have to specify their paths when running the ``configure`` scripts for *both* the library and the tools (the configure scripts look, by default, in ``/usr/local``).  For example, on Debian/Ubuntu distributions that have GEOS and PROJ.4 packages, the command would be::"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:101
# 9248de4ce60c45d5a870debfbb4ad9cb
msgid "For Mac OS X users building from source, the SpatiaLite library *and* tools need to have their ``target`` configured::"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:111
# c513386e347048fe9a121bd424e7a372
msgid "pysqlite2"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:113
# ee38d7bea5b544aaba2651e18b63d79a
msgid "If you are on Python 2.6, you will also have to compile pysqlite2, because ``SpatiaLite`` must be loaded as an external extension, and the required ``enable_load_extension`` method is only available in versions 2.5+ of pysqlite2. Thus, download pysqlite2 2.6, and untar::"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:122
# af7667f5c1a247dfa5e6775cad6a3465
msgid "Next, use a text editor (e.g., ``emacs`` or ``vi``) to edit the ``setup.cfg`` file to look like the following:"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:134
# cebbfa2a93c44985bd44c2ca0fd359d2
msgid "or if you are on Mac OS X:"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:147
# fe18a523f11b42b597907ff7bab20e8b
msgid "The important thing here is to make sure you comment out the ``define=SQLITE_OMIT_LOAD_EXTENSION`` flag and that the ``include_dirs`` and ``library_dirs`` settings are uncommented and set to the appropriate path if the SQLite header files and libraries are not in ``/usr/include`` and ``/usr/lib``, respectively."
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:153
# 65df1ba47324474a8d8faf030fe82a70
msgid "After modifying ``setup.cfg`` appropriately, then run the ``setup.py`` script to build and install::"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:161
# 6c9a6abdc0ff45dda36c0a2fb7ea4e3d
msgid "Mac OS X-specific instructions"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:163
# ecf0cbbc5ff44eb79e812b13b74f52ae
msgid "Mac OS X users should follow the instructions in the :ref:`kyngchaos` section, as it is much easier than building from source."
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:166
# a26a13f7dc6c42f4bad8293753a35233
msgid "When :ref:`create_spatialite_db`, the ``spatialite`` program is required. However, instead of attempting to compile the SpatiaLite tools from source, download the `SpatiaLite Binaries`__ for OS X, and install ``spatialite`` in a location available in your ``PATH``.  For example::"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:176
# a744fcbb3e39418a8be521f6b3a7a83f
msgid "Finally, for GeoDjango to be able to find the KyngChaos SpatiaLite library, add the following to your ``settings.py``:"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:188
# 548f3073151645439e5767774bff1ae6
msgid "Creating a spatial database for SpatiaLite"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:190
# d230efbb084546f3ab8c98119ff07189
msgid "After you've installed SpatiaLite, you'll need to create a number of spatial metadata tables in your database in order to perform spatial queries."
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:193
# 70cac1a838ad46d7b908857b02960002
msgid "If you're using SpatiaLite 2.4 or newer, use the ``spatialite`` utility to call the ``InitSpatialMetaData()`` function, like this::"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:201
# 43bf6ef3c98a40ffaec9347357206d57
msgid "You can safely ignore the error messages shown. When you've done this, you can skip the rest of this section."
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:204
# 0a044d00a683499e9a4669c26a8d6e08
msgid "If you're using SpatiaLite 2.3, you'll need to download a database-initialization file and execute its SQL queries in your database."
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:207
# 059f32c0f9ab4c7b8db36de1f8095bc8
msgid "First, get it from the `SpatiaLite Resources`__ page::"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:212
# 6ddba0b26106449caed5cf7be51da92a
msgid "Then, use the ``spatialite`` command to initialize a spatial database::"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:218
# 03c18d9546624b00a95a1e085e8f4bfd
msgid "The parameter ``geodjango.db`` is the *filename* of the SQLite database you want to use.  Use the same in the :setting:`DATABASES` ``\"name\"`` key inside your ``settings.py``."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:5
# 8a66080ec82048418d451986da16a9c0
msgid "``LayerMapping`` data import utility"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:12
# 78fd473384314ea78fd5e0d12d93b44e
msgid "The :class:`LayerMapping` class provides a way to map the contents of vector spatial data files (e.g. shapefiles) into GeoDjango models."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:15
# b17444912b634282b625b75ade11ab13
msgid "This utility grew out of the author's personal needs to eliminate the code repetition that went into pulling geometries and fields out of a vector layer, converting to another coordinate system (e.g. WGS84), and then inserting into a GeoDjango model."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:22
# 66ebde6ddfac4a28b3a0c1a889ef46bb
msgid "Use of :class:`LayerMapping` requires GDAL."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:26
# cee212e4a1734b31a40ba98efd4f7ed4
msgid "GIS data sources, like shapefiles, may be very large.  If you find that :class:`LayerMapping` is using too much memory, set :setting:`DEBUG` to ``False`` in your settings.  When :setting:`DEBUG` is set to ``True``, Django :ref:`automatically logs <faq-see-raw-sql-queries>` *every* SQL query -- thus, when SQL statements contain geometries, it is easy to consume more memory than is typical."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:36
# cbb5ada057e043478e91232a42a87aa7
msgid "You need a GDAL-supported data source, like a shapefile (here we're using a simple polygon shapefile, ``test_poly.shp``, with three features)::"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:55
# c93409a9eb5c424fadec648bcd35a81f
msgid "Now we define our corresponding Django model (make sure to use ``syncdb``)::"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:66
# f3056287c0c74ee7bd31f51feb1cf23e
msgid "Use :class:`LayerMapping` to extract all the features and place them in the database::"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:80
# 01c559bc5c264069a94b9423bacc00ad
msgid "Here, :class:`LayerMapping` just transformed the three geometries from the shapefile in their original spatial reference system (WGS84) to the spatial reference system of the GeoDjango model (NAD83).  If no spatial reference system is defined for the layer, use the ``source_srs`` keyword with a :class:`~django.contrib.gis.gdal.SpatialReference` object to specify one."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:87
# 54d63070370c4dc4b495c94caf827a34
msgid "``LayerMapping`` API"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:91
# 559cb63ba53742eab2b711c633097e05
msgid "The following are the arguments and keywords that may be used during instantiation of ``LayerMapping`` objects."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:95
#: ../../ref/contrib/webdesign.txt:40
#: ../../ref/models/fields.txt:529
#: ../../ref/signals.txt:69
#: ../../ref/signals.txt:295
#: ../../ref/signals.txt:322
#: ../../ref/templates/builtins.txt:938
#: ../../ref/templates/builtins.txt:2271
# 2c5b3cc628d0474e893af40f55dc96dd
# b7bf7e7ceafa42f6a367be988aa881b8
# 11ad8f93f2534e6693461c993287c453
# dfcf19c313f34c9cabbe39360408008b
# 2a2fef5ee06d4e879236c5293067524f
# 3c5140ed36184f1fbc0d5f455957c2de
# cb9fa3e3b0ef4aad8130f70cd2e2240b
# bdde43ea99fe472cb6c09a2fcd065db8
msgid "Argument"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:97
#: ../../ref/signals.txt:307
#: ../../ref/signals.txt:334
# bda4d49a044c4c0385cbfcc82df5dd5b
# ab6355bb1de24012b27a621fd6f6a52e
# 5a102e8f9f414a37a867e4b93e93b281
msgid "``model``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:97
# 4d03218ecd0b4c109140f042ba888cfa
msgid "The geographic model, *not* an instance."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:99
# d4bd1bcf8c324f17a83c942446a81ccc
msgid "``data_source``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:99
# 8de665af229247b3a07bbf48b53bbb51
msgid "The path to the OGR-supported data source file (e.g., a shapefile).  Also accepts :class:`django.contrib.gis.gdal.DataSource` instances."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:103
#: ../../ref/contrib/gis/ogrinspect.txt:19
# 1b3ae11c56f44130bbd5906c1513eac9
# 10f24e1a40f64fd7bc4beecb79b6b08f
msgid "``mapping``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:103
# c47c6a04d6b14106ba2bd803b6ea2e64
msgid "A dictionary: keys are strings corresponding to the model field, and values correspond to string field names for the OGR feature, or if the model field is a geographic then it should correspond to the OGR geometry type, e.g., ``'POINT'``, ``'LINESTRING'``, ``'POLYGON'``."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:114
# 1946ba02b0264deb92dc0bad426ef5f9
msgid "``layer``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:114
# 6a05bb2b94f7410e943dc8f006557dde
msgid "The index of the layer to use from the Data Source (defaults to 0)"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:117
# b25c6044f52a4655ad3c03fca0da12bf
msgid "``source_srs``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:117
# 4cf8b45bc30940f984a12faff6b4fce9
msgid "Use this to specify the source SRS manually (for example, some shapefiles don't come with a '.prj' file).  An integer SRID, WKT or PROJ.4 strings, and :class:`django.contrib.gis.gdal.SpatialReference` objects are accepted."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:123
# 2599a61a93a44f2d87db191ba36ba88e
msgid "``encoding``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:123
# fa206549551b4e1eb7127f9ae4c7699c
msgid "Specifies the character set encoding of the strings in the OGR data source.  For example, ``'latin-1'``, ``'utf-8'``, and ``'cp437'`` are all valid encoding parameters."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:128
# 629647be44c9448b9f42acbdf73a25a1
msgid "``transaction_mode``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:128
# 7ab30e7355c940bcb08510a3f4b25c3f
msgid "May be ``'commit_on_success'`` (default) or ``'autocommit'``."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:131
# 5ce82766f8a14894abc38a4fe41c7f80
msgid "Setting this to False will disable coordinate transformations.  In other words, geometries will be inserted into the database unmodified from their original state in the data source."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:136
#: ../../ref/models/fields.txt:261
# 81ae1d50d6114296bc842733a81ce13c
# 1c55e486c74b485d834f17c9bbe16521
msgid "``unique``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:136
# 6529b18c600e4c8b8be59f77e23025b8
msgid "Setting this to the name, or a tuple of names, from the given  model will create models unique only to the given name(s). Geometries will from each feature will be added into the collection associated with the unique model.  Forces the transaction mode to be ``'autocommit'``."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:143
#: ../../ref/signals.txt:312
#: ../../ref/signals.txt:340
# 579a2008a8e74f0ab6865a66b38350d7
# dfc4b3248e9c463096a413cbd53b3928
# 82262a73514442bba530792e2712db14
msgid "``using``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:143
# b067d1a91ca045d99e014fdddd853869
msgid "New in version 1.2.  Sets the database to use when importing spatial data.  Default is ``'default'``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:148
# 22b0dd1cb3114f5691a55007f3ea93d3
msgid "``save()`` Keyword Arguments"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:152
# a958aec247e045e19096a67707a24247
msgid "The ``save()`` method also accepts keywords.  These keywords are used for controlling output logging, error handling, and for importing specific feature ranges."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:157
# 95bd24aca26e4578992f9f58db513b3d
msgid "Save Keyword Arguments"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:159
# b6019c878eed4973b40649eb6770f629
msgid "``fid_range``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:159
# 92872d5b7c7141d7a588bdc871fe2e82
msgid "May be set with a slice or tuple of (begin, end) feature ID's to map from the data source.  In other words, this keyword enables the user to selectively import a subset range of features in the geographic data source."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:166
# e15bd54ce7bb48ef8dd3ff9a475e1bd1
msgid "``progress``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:166
# 06632384328649849bfde7a0b72b3742
msgid "When this keyword is set, status information will be printed giving the number of features processed and successfully saved.  By default, progress information will be printed every 1000 features processed, however, this default may be overridden by setting this keyword with an integer for the desired interval."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:174
# 01241728f9e04c73a9a84a0052e9d56a
msgid "``silent``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:174
# bd02b65061494e8cb8deaedf6b5fded1
msgid "By default, non-fatal error notifications are printed to ``sys.stdout``, but this keyword may be set to disable these notifications."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:178
# c8d008bdbecb455dbfc50cc31e6afc9e
msgid "``step``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:178
# 9fab16dc1cf44279bc076ee21b8f72d2
msgid "If set with an integer, transactions will occur at every step interval. For example, if ``step=1000``, a commit would occur after the 1,000th feature, the 2,000th feature etc."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:184
# b9eca2f6a0944d2098b42b93d3426615
msgid "``stream``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:184
# 3b4b076ab0404f9c90721f8f763f35fd
msgid "Status information will be written to this file handle.  Defaults to using ``sys.stdout``, but any object with a ``write`` method is supported."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:188
# 06c0c7a2c4fe47d199911f3c7bc13fb1
msgid "``strict``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:188
# 357fb8c25b8840d89bc3d7d60fe631f8
msgid "Execution of the model mapping will cease upon the first error encountered.  The default value (``False``) behavior is to attempt to continue."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:193
# d1c55d1e3eaf42b1bb52eebd96fbb29a
msgid "``verbose``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:193
# f1098a670714483e891158ff7d56c4f8
msgid "If set, information will be printed subsequent to each model save executed on the database."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:202
# 5d7a1f230f9c4bd99afa650c5aefcd41
msgid "Running out of memory"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:204
# f55e7f15a12a48839fb32ccf5d86018a
msgid "As noted in the warning at the top of this section, Django stores all SQL queries when ``DEBUG=True``.  Set ``DEBUG=False`` in your settings, and this should stop excessive memory use when running ``LayerMapping`` scripts."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:209
# 885f0f17782d4c6ea24082d779123ae2
msgid "MySQL: ``max_allowed_packet`` error"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:211
# e90a4c5c607d456ca3fcdfe1bed81e59
msgid "If you encounter the following error when using ``LayerMapping`` and MySQL::"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:215
# f4c6a4e2c8944dfa8c58fe3125f9bb41
msgid "Then the solution is to increase the value of the ``max_allowed_packet`` setting in your MySQL configuration.  For example, the default value may be something low like one megabyte -- the setting may be modified in MySQL's configuration file (``my.cnf``) in the ``[mysqld]`` section::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:5
# 3e3d13fc308b45a7b38da06bf22286cc
msgid "Measurement Objects"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:10
# eacc2f657d304df0983dcfca1665fd4e
msgid "The :mod:`django.contrib.gis.measure` module contains objects that allow for convenient representation of distance and area units of measure. [#]_ Specifically, it implements two objects, :class:`Distance` and :class:`Area` -- both of which may be accessed via the :class:`D` and :class:`A` convenience aliases, respectively."
msgstr ""

#: ../../ref/contrib/gis/measure.txt:19
# 8a80b0649f4443188f2e19c6f37abd15
msgid ":class:`Distance` objects may be instantiated using a keyword argument indicating the context of the units.  In the example below, two different distance objects are instantiated in units of kilometers (``km``) and miles (``mi``)::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:31
# f2ebe548d1a74129984ffda43d3a0c47
msgid "Conversions are easy, just access the preferred unit attribute to get a converted distance quantity::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:39
# fbfa34146b1f426fab14deedfd57ea84
msgid "Moreover, arithmetic operations may be performed between the distance objects::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:47
# ecfa199a425d4f2daa49f09385234b1a
msgid "Two :class:`Distance` objects multiplied together will yield an :class:`Area` object, which uses squared units of measure::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:54
# 90510a0bb728442e8d81a000d510ad32
msgid "To determine what the attribute abbreviation of a unit is, the ``unit_attname`` class method may be used::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:65
# d6d76bc1ba044282a352855efe80adb2
msgid "Supported units"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:68
# d6c01e5b63fb4be89c32d70dc20013b1
msgid "Unit Attribute"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:68
# 2aedaa3bb5ec4cb380dc4d7b539d7a3b
msgid "Full name or alias(es)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:70
# 2121aff85d7f4b5e953a49918b0dad49
msgid "``km``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:70
# 280fb1fb09944ec095c8a4e458deaf9c
msgid "Kilometre, Kilometer"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:71
# 298e887b3fa0478eb7526f7b850fe25a
msgid "``mi``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:71
# 5f69b41ac22047bea0fa41114dfa2ed8
msgid "Mile"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:72
# 4032cd04cebf4f7d84570e3620250c26
msgid "``m``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:72
# 570f274018b54f3e999e38a6e8331a8c
msgid "Meter, Metre"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:73
# f5ee8bae112f4d8485b595100b7b5ade
msgid "``yd``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:73
# 8f6bebe190a64a74a0a1d80b6a16e69a
msgid "Yard"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:74
# a61e6968e44745d980b982a3b097fc10
msgid "``ft``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:74
# 3e2de0e8d68d402195aed3719c4eebac
msgid "Foot, Foot (International)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:75
# a45b0a0980ae40e29b2e83c29a3e2c58
msgid "``survey_ft``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:75
# 9d550b831f744814b1f66500e68901a3
msgid "U.S. Foot, US survey foot"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:76
# 644affcb836a4d858f0070f8ec972683
msgid "``inch``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:76
# f222642fea374c4694754869899c4f27
msgid "Inches"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:77
# 2d4d2a70c2b9461dbadc8ce26a6dc900
msgid "``cm``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:77
# cc10e22859854b569ad3805b82c3a8a5
msgid "Centimeter"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:78
# 02b22b8b4e1a466a8bf34c0b01b366fc
msgid "``mm``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:78
# 4bbf787b16db40948d6dfb1519a3fd67
msgid "Millimetre, Millimeter"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:79
# d2c88dbe487c4200ad8735dbf2d1dcae
msgid "``um``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:79
# 9a5d58d7e0e148d2b86c6378ca2c754e
msgid "Micrometer, Micrometre"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:80
# db5d7c22126f4152a32f527a31551e52
msgid "``british_ft``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:80
# 09f116f85023414aaa9460cfefe5929d
msgid "British foot (Sears 1922)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:81
# 3f9f17f2f5824b0592baa5ffda3ba1da
msgid "``british_yd``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:81
# 993aae816fc14ef4a2d2601e6daea237
msgid "British yard (Sears 1922)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:82
# e425f236def3444d8d614c3178e0b93a
msgid "``british_chain_sears``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:82
# afb863147df04c57a86a7dcf32c0e1b8
msgid "British chain (Sears 1922)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:83
# 8a016f984fd9495da20020ef215c6e93
msgid "``indian_yd``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:83
# 40b37882e2194b8caf2d74a523f5e263
msgid "Indian yard, Yard (Indian)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:84
# aa073359502e4589b5df473387a2c2c5
msgid "``sears_yd``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:84
# 8112a5404960487f9a336a6ab1f1cd85
msgid "Yard (Sears)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:85
# a45af549aa80475691a57c1430d52f0a
msgid "``clarke_ft``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:85
# f6738880c80a4671b6a564d2dbf4d59d
msgid "Clarke's Foot"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:86
# 2140a7b0cc0f4c6cada4a24ca8e75839
msgid "``chain``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:86
# ed983588bdd14b449ed89b233760b687
msgid "Chain"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:87
# ead626e18f7348699fa540a6c29fffe9
msgid "``chain_benoit``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:87
# 12e7b615862c47dba256b968f55fd47e
msgid "Chain (Benoit)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:88
# c685a20ea2a74f25aa54adb47d44b8d1
msgid "``chain_sears``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:88
# 33a4f20782754cbca9151ff134ba16ae
msgid "Chain (Sears)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:89
# e3bf55f8780c43ac8cf89ae3b91c10ac
msgid "``british_chain_benoit``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:89
# 016eec61beee455fb7c2fa2fa892f79d
msgid "British chain (Benoit 1895 B)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:90
# d71d3dd38e1b49ef9b21923af98f3879
msgid "``british_chain_sears_truncated``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:90
# b32d221be07e4726a63c621a5c0bc34c
msgid "British chain (Sears 1922 truncated)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:91
# 0158fefe6ac44f8b8f101f43117afc94
msgid "``gold_coast_ft``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:91
# 78c5622224d64462ac734fedfa8506a6
msgid "Gold Coast foot"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:92
#: ../../ref/contrib/syndication.txt:818
#: ../../ref/contrib/syndication.txt:846
# 2784c7b616204e02a84bdd4f46c72d23
# acb2b4fb8e5142eea9a5792e09c83c36
# 292c97c667144813b4604b4debafc9d1
msgid "``link``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:92
# 9a012f1046614cdeb7e0d8f52df969ac
msgid "Link"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:93
# 1d48c5bc38c5443097e6e1fa6142db12
msgid "``link_benoit``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:93
# 7783b83624054edc9971c322a4919a67
msgid "Link (Benoit)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:94
# 2a61802bc1044f3885714edef4c482f6
msgid "``link_sears``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:94
# 6cad1a15aad74e34a66fe1feb841ce56
msgid "Link (Sears)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:95
# a6c96c3f93874d66802a50142f45cfa1
msgid "``clarke_link``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:95
# 727f1919996c4058b4d859e79d5aa375
msgid "Clarke's link"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:96
# b037bfd903d042c7a346e286e9ca139a
msgid "``fathom``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:96
# e64354d92c23498f8f1e6cb96fd3faeb
msgid "Fathom"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:97
# b65b9d70cfa440bd90e67d5df2a8f03e
msgid "``rod``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:97
# c6807d10512f4a2e991d7cac77e203b1
msgid "Rod"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:98
# 4b3909221ffd4822b82f3fcf0dfeae54
msgid "``nm``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:98
# b8bdb52396224e2daccc1205f0d3aeda
msgid "Nautical Mile"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:99
# 1d01c92917594a0299385e08f3d8fa65
msgid "``nm_uk``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:99
# 214771c5258d4eb9a9dd0b06517b194b
msgid "Nautical Mile (UK)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:100
# f733cfdc898c47dc8a589b2869c95c44
msgid "``german_m``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:100
# 1a5f045d177a4432b41f29ca278f9a54
msgid "German legal metre"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:105
# db2dd4d726c44cb5ab25ac6fde4533d5
msgid ":class:`Area` attributes are the same as :class:`Distance` attributes, except they are prefixed with ``sq_`` (area units are square in nature). For example, ``Area(sq_m=2)`` creates an :class:`Area` object representing two square meters."
msgstr ""

#: ../../ref/contrib/gis/measure.txt:111
# 09d6a6d992cc40469395760d9e8518a3
msgid "Measurement API"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:114
# fc05abf59bbe49d0833431bdeebe801d
msgid "``Distance``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:118
# 76b847303cd449b681658ac64d7cf9ae
msgid "To initialize a distance object, pass in a keyword corresponding to the desired :ref:`unit attribute name <supported_units>` set with desired value.  For example, the following creates a distance object representing 5 miles::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:127
# beaac902d19a46f8bc9efe42836aea04
msgid "Returns the distance value in units corresponding to the given unit attribute.  For example::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:135
# 741a1b72d5b842e8b6980ef00114d455
msgid "Returns the distance unit attribute name for the given full unit name. For example::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:143
# 00173f5f39cb4775aa478963edc35e59
msgid "Alias for :class:`Distance` class."
msgstr ""

#: ../../ref/contrib/gis/measure.txt:146
# 91d40a3a266444da965ed841f1337e29
msgid "``Area``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:150
# f2016219b32745fb9bdc3c2e92bae17f
msgid "To initialize a distance object, pass in a keyword corresponding to the desired :ref:`unit attribute name <supported_units>` set with desired value.  For example, the following creates a distance object representing 5 square miles::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:159
# 28b3257c374c4a53bd6d820ed3202bfc
msgid "Returns the area value in units corresponding to the given unit attribute.  For example::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:167
# cc9a872efbd64916aba4e1eebbeb6aa8
msgid "Returns the area unit attribute name for the given full unit name. For example::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:175
# 461cd7d93da14f549147a75c32d077b6
msgid "Alias for :class:`Area` class."
msgstr ""

#: ../../ref/contrib/gis/measure.txt:178
# 11d28517dfc54ca3a44fe1f2d041e1cc
msgid "`Robert Coup <http://koordinates.com/>`_ is the initial author of the measure objects, and was inspired by Brian Beck's work in `geopy <http://code.google.com/p/geopy/>`_ and Geoff Biggs' PhD work on dimensioned units for robotics."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:5
# c7ebf44102de446bb554e270d0fc41ca
msgid "GeoDjango Model API"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:10
# 26f4f5feb24640ee915e7c1bbd3ccd57
msgid "This document explores the details of the GeoDjango Model API.  Throughout this section, we'll be using the following geographic model of a `ZIP code`__ as our example::"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:24
# cb2715ad861b4f8ab0a4f5aa97a4d2c8
msgid "Geometry Field Types"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:26
# dd6e45d4e347451c850d47d33c97143c
msgid "Each of the following geometry field types correspond with the OpenGIS Simple Features specification [#fnogc]_."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:30
# 1037f22a6a6d46cba5c403b2bbcd886c
msgid "``GeometryField``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:35
# d06d10dcbb1745b3a0d387b116c77cdb
msgid "``PointField``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:40
# ee0aa24886d44082b4a8e9621a87631d
msgid "``LineStringField``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:45
# 722bddce76424694b06a789711962b68
msgid "``PolygonField``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:50
# 533493c8b2ca40768e29c48b9faa0709
msgid "``MultiPointField``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:55
# 7629fee6a89e42158d9fa1942ba05f6d
msgid "``MultiLineStringField``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:60
# 69f2175a1e4e4a29800505d150ef142b
msgid "``MultiPolygonField``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:65
# 76a31c1c27854f2d9c43b2866ef8a62a
msgid "``GeometryCollectionField``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:72
# f96c0fdba6184b9bb91be56d78766b63
msgid "Geometry Field Options"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:74
# 4b0a4574eced4d52aafd9cda92c22459
msgid "In addition to the regular :ref:`common-model-field-options` available for Django model fields, geometry fields have the following additional options. All are optional."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:79
# 4f2feafa25bc412dbed81951bdd00172
msgid "``srid``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:83
# 37573536aff24096873cabf3636a8f1a
msgid "Sets the SRID [#fnogcsrid]_ (Spatial Reference System Identity) of the geometry field to the given value. Defaults to 4326 (also known as `WGS84`__, units are in degrees of longitude and latitude)."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:92
# b20a0d0bef3d40a9aa4779217cf29558
msgid "Selecting an SRID"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:94
# 414f1663abba4d3284f8a2da55da3f18
msgid "Choosing an appropriate SRID for your model is an important decision that the developer should consider carefully.  The SRID is an integer specifier that corresponds to the projection system that will be used to interpret the data in the spatial database. [#fnsrid]_  Projection systems give the context to the coordinates that specify a location.  Although the details of `geodesy`__ are beyond the scope of this documentation, the general problem is that the earth is spherical and representations of the earth (e.g., paper maps, Web maps) are not."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:103
# 38e9dc5c856c41b4b528cc15d505fa67
msgid "Most people are familiar with using latitude and longitude to reference a location on the earth's surface.  However, latitude and longitude are angles, not distances. [#fnharvard]_  In other words, while the shortest path between two points on a flat surface is a straight line, the shortest path between two points on a curved surface (such as the earth) is an *arc* of a `great circle`__. [#fnthematic]_  Thus, additional computation is required to obtain distances in planar units (e.g., kilometers and miles).  Using a geographic coordinate system may introduce complications for the developer later on.  For example, PostGIS versions 1.4 and below do not have the capability to perform distance calculations between non-point geometries using geographic coordinate systems, e.g., constructing a query to  find all points within 5 miles of a county boundary stored as WGS84. [#fndist]_"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:116
# 3ad9a133c25947ea960acc386cbd20cc
msgid "Portions of the earth's surface may projected onto a two-dimensional, or Cartesian, plane.  Projected coordinate systems are especially convenient for region-specific applications, e.g., if you know that your database will only cover geometries in `North Kansas`__, then you may consider using projection system specific to that region.  Moreover, projected coordinate systems are defined in Cartesian units (such as meters or feet), easing distance calculations."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:126
# fddbda062e1b45d88e8a5f12113c1ba1
msgid "If you wish to peform arbitrary distance queries using non-point geometries in WGS84, consider upgrading to PostGIS 1.5. For better performance, enable the :attr:`GeometryField.geography` keyword so that :ref:`geography database type <geography-type>` is used instead."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:132
# ce87d38ccd914653b02f29b8ec3f1acd
msgid "Additional Resources:"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:134
# 3707872660fb467aba314053c8e1623e
msgid "`spatialreference.org`__: A Django-powered database of spatial reference systems."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:136
# d1b0e113893e4076bdd84cb922446347
msgid "`The State Plane Coordinate System`__: A Web site covering the various projection systems used in the United States.  Much of the U.S. spatial data encountered will be in one of these coordinate systems rather than in a geographic coordinate system such as WGS84."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:148
# d31248d82e3d4749a20d003c6326e4dd
msgid "``spatial_index``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:152
# 295546a23076478e8009cee617a446da
msgid "Defaults to ``True``.  Creates a spatial index for the given geometry field."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:157
# 55a811630a9d45a68a0b3f92b2eb6a87
msgid "This is different from the ``db_index`` field option because spatial indexes are created in a different manner than regular database indexes.  Specifically, spatial indexes are typically created using a variant of the R-Tree, while regular database indexes typically use B-Trees."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:164
# b7778569699f4ecbbc82140e1d7eacd4
msgid "``dim``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:168
# bca525104ba441f587ec8d03e74b7ebe
msgid "This option may be used for customizing the coordinate dimension of the geometry field.  By default, it is set to 2, for representing two-dimensional geometries.  For spatial backends that support it, it may be set to 3 for three-dimensonal support."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:175
# 5f66064dc1db4a82bbc02db9762d76ff
msgid "At this time 3D support requires that GEOS 3.1 be installed, and is limited only to the PostGIS spatial backend."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:179
# 1e6fd64d8a084a66b24920b1a75b6836
msgid "``geography``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:183
# fbe8e78687b9439fba40dc4c84097bd3
msgid "If set to ``True``, this option will create a database column of type geography, rather than geometry.  Please refer to the :ref:`geography type <geography-type>` section below for more details."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:190
# 58021ba3768b4918934905754706b5c0
msgid "Geography support is limited only to PostGIS 1.5+, and will force the SRID to be 4326."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:196
# 62ad41c9d5694e41b811c74902c50902
msgid "Geography Type"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:198
# d1406a2aa63f4d2b9239514d9ba8b570
msgid "In PostGIS 1.5, the geography type was introduced -- it provides native support for spatial features represented with geographic coordinates (e.g., WGS84 longitude/latitude). [#fngeography]_ Unlike the plane used by a geometry type, the geography type uses a spherical representation of its data.  Distance and measurement operations performed on a geography column automatically employ great circle arc calculations and return linear units.  In other words, when ``ST_Distance`` is called on two geographies, a value in meters is returned (as opposed to degrees if called on a geometry column in WGS84)."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:208
# b93c9c480ba34ba0aecda2aeaefe0b1b
msgid "Because geography calculations involve more mathematics, only a subset of the PostGIS spatial lookups are available for the geography type. Practically, this means that in addition to the :ref:`distance lookups <distance-lookups>` only the following additional :ref:`spatial lookups <spatial-lookups>` are available for geography columns:"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:219
# 6a3cc281fa9c48bb9259460f5909d8f2
msgid "For more information, the PostGIS documentation contains a helpful section on determining `when to use geography data type over geometry data type <http://postgis.refractions.net/documentation/manual-1.5/ch04.html#PostGIS_GeographyVSGeometry>`_."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:224
# a27dad54bcc04b9daf9b8815f7ab0891
msgid "``GeoManager``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:229
# 6e138b37e7a945d78d319470c6bc28b0
msgid "In order to conduct geographic queries, each geographic model requires a ``GeoManager`` model manager.  This manager allows for the proper SQL construction for geographic queries; thus, without it, all geographic filters will fail.  It should also be noted that ``GeoManager`` is required even if the model does not have a geographic field itself, e.g., in the case of a ``ForeignKey`` relation to a model with a geographic field.  For example, if we had an ``Address`` model with a ``ForeignKey`` to our ``Zipcode`` model::"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:249
# 5d2e1fb9ca714ab78e92762655e9db5f
msgid "The geographic manager is needed to do spatial queries on related ``Zipcode`` objects, for example::"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:255
# b82205ee2585484cbdfc5c8a37f5e346
msgid "OpenGIS Consortium, Inc., `Simple Feature Specification For SQL <http://www.opengeospatial.org/standards/sfs>`_."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:256
# fc65ec0b040541c1ac1c36c6fef291bd
msgid "*See id.* at Ch. 2.3.8, p. 39 (Geometry Values and Spatial Reference Systems)."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:257
# baa12940662f43acb9b94ff9171e4def
msgid "Typically, SRID integer corresponds to an EPSG (`European Petroleum Survey Group <http://www.epsg.org>`_) identifier.  However, it may also be associated with custom projections defined in spatial database's spatial reference systems table."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:258
# c16d8ae521b743cda972233b0ee224d1
msgid "Harvard Graduate School of Design, `An Overview of Geodesy and Geographic Referencing Systems <http://www.gsd.harvard.edu/gis/manual/projections/fundamentals/>`_.  This is an excellent resource for an overview of principles relating to geographic and Cartesian coordinate systems."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:259
# f98676d2217242ee97ac48154355f7ac
msgid "Terry A. Slocum, Robert B. McMaster, Fritz C. Kessler, & Hugh H. Howard, *Thematic Cartography and Geographic Visualization* (Prentice Hall, 2nd edition), at Ch. 7.1.3."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:260
# dac24f39444b46f88b6496f52ff34334
msgid "This limitation does not apply to PostGIS 1.5.  It should be noted that even in previous versions of PostGIS, this isn't impossible using GeoDjango; you could for example, take a known point in a projected coordinate system, buffer it to the appropriate radius, and then perform an intersection operation with the buffer transformed to the geographic coordinate system."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:261
# 57615633eb424d7eb4b5eba0d3387e1f
msgid "Please refer to the `PostGIS Geography Type <http://postgis.refractions.net/documentation/manual-1.5/ch04.html#PostGIS_Geography>`_ documentation for more details."
msgstr ""

#: ../../ref/contrib/gis/ogrinspect.txt:5
# cd5bd0d2cedd484daae7ad42aae6ec02
msgid "OGR Inspection"
msgstr ""

#: ../../ref/contrib/gis/ogrinspect.txt:13
# a513b0fdd70c4360b3a9e3c8665a4d62
msgid "``ogrinspect``"
msgstr ""

#: ../../ref/contrib/gis/sitemaps.txt:3
# 6992a1e6254b4e7fb7324f304090c295
msgid "Geographic Sitemaps"
msgstr ""

#: ../../ref/contrib/gis/sitemaps.txt:5
# a3f75704d38648bcbb7f377d6cf4b1d0
msgid "Google's sitemap protocol used to include geospatial content support. [#]_ This included the addition of the ``<url>`` child element ``<geo:geo>``, which tells Google that the content located at the URL is geographic in nature. This is now obsolete."
msgstr ""

#: ../../ref/contrib/gis/sitemaps.txt:14
# f6b472af78b64fc08bf9699acab4bbd2
msgid "Reference"
msgstr ""

#: ../../ref/contrib/gis/sitemaps.txt:17
# 9776453f6b3e4aaca5d5896022c354f1
msgid "``KMLSitemap``"
msgstr ""

#: ../../ref/contrib/gis/sitemaps.txt:20
# a1d8a78f83744e4f948a6b7cc3b78cad
msgid "``KMZSitemap``"
msgstr ""

#: ../../ref/contrib/gis/sitemaps.txt:23
# aed0f50a32fd4e0d850cdb033a7c4500
msgid "``GeoRSSSitemap``"
msgstr ""

#: ../../ref/contrib/gis/sitemaps.txt:26
# 8e66c046cb534cafbf0020c9413e076e
msgid "Google, Inc., `What is a Geo Sitemap? <http://support.google.com/webmasters/bin/answer.py?answer=94555>`_."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:3
# b4e727d307334b619863cbcfc628b7c7
msgid "Testing GeoDjango apps"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:5
# 384d52fb94e245cda95cee13d6838127
msgid "Included in this documentation are some additional notes and settings for :ref:`testing-postgis` and :ref:`testing-spatialite` users."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:18
# 28609e835d384652babdeda7f6d2a224
msgid "The settings below have sensible defaults, and shouldn't require manual setting."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:23
# e80afe1c7cff4bc686e38d416571e1b1
msgid "``POSTGIS_TEMPLATE``"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:25
# 30beaf1307bc4b8ca91a9bd350558de9
msgid "This setting may be used to customize the name of the PostGIS template database to use. It automatically defaults to ``'template_postgis'`` (the same name used in the :ref:`installation documentation <spatialdb_template>`)."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:33
# 17524229ce6c4b4c8725e2b81eebd6be
msgid "``POSTGIS_VERSION``"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:35
# 54fca86ac8d24e1ba529bdc69dd06780
msgid "When GeoDjango's spatial backend initializes on PostGIS, it has to perform a SQL query to determine the version in order to figure out what features are available. Advanced users wishing to prevent this additional query may set the version manually using a 3-tuple of integers specifying the major, minor, and subminor version numbers for PostGIS. For example, to configure for PostGIS 1.5.2 you would use::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:45
# aeabfd7e244a439eae94021d34ad2f99
msgid "Obtaining sufficient privileges"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:47
# 198b8128d22a416aa4586162dcf9d190
msgid "Depending on your configuration, this section describes several methods to configure a database user with sufficient privileges to run tests for GeoDjango applications on PostgreSQL. If your :ref:`spatial database template <spatialdb_template>` was created like in the instructions, then your testing database user only needs to have the ability to create databases. In other configurations, you may be required to use a database superuser."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:56
# f6e1ca2a76774e98b0b4ab68af8e6807
msgid "Create database user"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:58
# abba3c96f4674f55997bea79bb3161e9
msgid "To make a database user with the ability to create databases, use the following command::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:63
# 3916daf2517a483bbea0b1125b8b611a
msgid "The ``-R -S`` flags indicate that we do not want the user to have the ability to create additional users (roles) or to be a superuser, respectively."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:66
# a7bf68f772fa42ab8599cb5fc9db8809
msgid "Alternatively, you may alter an existing user's role from the SQL shell (assuming this is done from an existing superuser account)::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:72
# e11c61448e3c4d5e91411f7190b60b9e
msgid "Create database superuser"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:74
# e0142431d7c44a30baa6739a525c8dde
msgid "This may be done at the time the user is created, for example::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:78
# da0505d83a784b7b8e5e1bdfcf99cc40
msgid "Or you may alter the user's role from the SQL shell (assuming this is done from an existing superuser account)::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:85
# 2124f04c161042fbb47016bf1cbec11f
msgid "Create local PostgreSQL database"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:87
# c02e9cbe6f2441a0a76f1b97d31089f9
msgid "Initialize database: ``initdb -D /path/to/user/db``"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:89
# e5bd3e5b805e4e358d76a4e59ca435f7
msgid "If there's already a Postgres instance on the machine, it will need to use a different TCP port than 5432. Edit ``postgresql.conf`` (in ``/path/to/user/db``) to change the database port (e.g. ``port = 5433``)."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:93
# 2113cfe07d5b456fa64f6b1f0c1fdf88
msgid "Start this database ``pg_ctl -D /path/to/user/db start``"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:98
# 95c96b49a36c4e44aaf1d01f9289437a
msgid "On Windows platforms the pgAdmin III utility may also be used as a simple way to add superuser privileges to your database user."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:101
# 7b143403b40d4a16b00ba4989c75af4a
msgid "By default, the PostGIS installer on Windows includes a template spatial database entitled ``template_postgis``."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:109
# 81de0916b16b4a179b4911c93f16c8b2
msgid "Make sure the necessary spatial tables are created in your test spatial database, as described in :ref:`create_spatialite_db`. Then just do this::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:120
# 109f29c51f604427ad2a635e6b754a85
msgid "``SPATIALITE_SQL``"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:122
# 9348a3c6c6604ccc943e4cf581354cd2
msgid "Only relevant when using a SpatiaLite version 2.3."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:124
# 95e6e41292904759b6fcd3cb454dce1b
msgid "By default, the GeoDjango test runner looks for the :ref:`file containing the SpatiaLite dababase-initialization SQL code <create_spatialite_db>` in the same directory where it was invoked (by default the same directory where ``manage.py`` is located). To use a different location, add the following to your settings::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:135
# a2a798f4fc0a49f0afdc1a047f94bfac
msgid "GeoDjango tests"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:137
# 9fa01187d2734a9393f9244625b32a67
msgid "GeoDjango's test suite may be run in one of two ways, either by itself or with the rest of :ref:`Django's unit tests <running-unit-tests>`."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:141
# 584a9886973640ebacd2c89c487451e6
msgid "Run only GeoDjango tests"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:145
# e6b1e8d4cec34291bdbbab4586de933e
msgid "To run *only* the tests for GeoDjango, the :setting:`TEST_RUNNER` setting must be changed to use the :class:`~django.contrib.gis.tests.GeoDjangoTestSuiteRunner`::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:154
# 48593286af974ac48cf7794eae7eca9e
msgid "First, you'll need a bare-bones settings file, like below, that is customized with your spatial database name and user::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:167
# 8fec92407d244d25a143a605b2a13d73
msgid "Assuming the above is in a file called ``postgis.py`` that is in the the same directory as ``manage.py`` of your Django project, then you may run the tests with the following command::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:174
# 59d4888ce3ab40b0a08504d7b3135894
msgid "Run with ``runtests.py``"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:176
# 3fac09eb31bc4a919a9dc217d2257dde
msgid "To have the GeoDjango tests executed when :ref:`running the Django test suite <running-unit-tests>` with ``runtests.py`` all of the databases in the settings file must be using one of the :ref:`spatial database backends <spatial-backends>`."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:183
# 4180568bb14d4257b253ccfbbbc3ad43
msgid "Do not change the :setting:`TEST_RUNNER` setting when running the GeoDjango tests with ``runtests.py``."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:189
# 7c876fef8a934d91945f0289b9cde463
msgid "The following is an example bare-bones settings file with spatial backends that can be used to run the entire Django test suite, including those in :mod:`django.contrib.gis`::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:206
# 998e8f7898d54114a21841a5616cb905
msgid "Assuming the settings above were in a ``postgis.py`` file in the same directory as ``runtests.py``, then all Django and GeoDjango tests would be performed when executing the command::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:3
# f14c9e1ebbdc49caa6c661b2471f2bf5
msgid "GeoDjango Tutorial"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:8
# a28f2c72dd4e4fe08adc3b5764361a48
msgid "GeoDjango is an included contrib module for Django that turns it into a world-class geographic Web framework.  GeoDjango strives to make it as simple as possible to create geographic Web applications, like location-based services. Its features include:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:13
# ab9c5fd1b241440b9a07ed8d2377ab20
msgid "Django model fields for `OGC`_ geometries."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:14
# 8e44b83db2e94779a9227db022cfed20
msgid "Extensions to Django's ORM for querying and manipulating spatial data."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:15
# 3e18829a15f14a96b1b5f5ae012c8bfa
msgid "Loosely-coupled, high-level Python interfaces for GIS geometry operations and data formats."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:17
# 34852b3bfbcd458099d744c6f0ad0761
msgid "Editing geometry fields from the admin."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:19
# 547bf661529a4359a49309ccbf3615f8
msgid "This tutorial assumes familiarity with Django; thus, if you're brand new to Django, please read through the :doc:`regular tutorial </intro/tutorial01>` to familiarize yourself with Django first."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:25
# 1a7fb562c5874913892a3d28b6e5ea1f
msgid "GeoDjango has additional requirements beyond what Django requires -- please consult the :ref:`installation documentation <ref-gis-install>` for more details."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:29
# e941f98a0dd34e78941328b750fd2346
msgid "This tutorial will guide you through the creation of a geographic web application for viewing the `world borders`_. [#]_ Some of the code used in this tutorial is taken from and/or inspired by the `GeoDjango basic apps`_ project. [#]_"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:36
# eaebef875fd84e8a8c3e3b2b55ee9b76
msgid "Proceed through the tutorial sections sequentially for step-by-step instructions."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:44
# 0ded6e48f06c46b3b581f7f91fc27100
msgid "Setting Up"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:47
# 0279c967dea2411881b821bda18777c7
msgid "Create a Spatial Database"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:51
# 0b654fb5867b4959baa7aff3cc1cde15
msgid "MySQL and Oracle users can skip this section because spatial types are already built into the database."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:54
# ab5901519d3748d1b302dae9a1fe51ad
msgid "First, create a spatial database for your project."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:56
# 2c78e87df3d04c8099d9e49f8640cce6
msgid "If you are using PostGIS, create the database from the :ref:`spatial database template <spatialdb_template>`:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:65
# 8a951ff246e14944a38cd8646f320035
msgid "This command must be issued by a database user with enough privileges to create a database.  To create a user with ``CREATE DATABASE`` privileges in PostgreSQL, use the following commands:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:75
# f870387c96a5460c9a254a4754f8b1c4
msgid "Replace ``geo`` with your Postgres database user's username. (In PostgreSQL, this user will also be an OS-level user.)"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:78
# 0d9a917eef29497abe87d3acd8d42915
msgid "If you are using SQLite and SpatiaLite, consult the instructions on how to create a :ref:`SpatiaLite database <create_spatialite_db>`."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:82
# 9cd893676dcd41d5a14a7cd530004a98
msgid "Create a New Project"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:84
# 7049a6e506c8416ca6ff512bf4e492b9
msgid "Use the standard ``django-admin.py`` script to create a project called ``geodjango``:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:91
# 50655e17e060405fbd78e7713b279c5c
msgid "This will initialize a new project. Now, create a ``world`` Django application within the ``geodjango`` project:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:100
# ce74611fc7164b8f8871c83adc21dcc8
msgid "Configure ``settings.py``"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:102
# 7264e0e6eb3841f5a88f951501da0047
msgid "The ``geodjango`` project settings are stored in the ``geodjango/settings.py`` file. Edit the database connection settings to match your setup::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:113
# 0f7a9328af4941eaa806bd2c67afd837
msgid "In addition, modify the :setting:`INSTALLED_APPS` setting to include :mod:`django.contrib.admin`, :mod:`django.contrib.gis`, and ``world`` (your newly created application)::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:130
# 78ea2ccb200f45a0bd5b2e4feb71482d
msgid "Geographic Data"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:135
# 42e61e8617214beb8b58a765eb46c847
msgid "World Borders"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:137
# 9e634874b2974049a4f42f5393bda4d8
msgid "The world borders data is available in this `zip file`__.  Create a ``data`` directory in the ``world`` application, download the world borders data, and unzip. On GNU/Linux platforms, use the following commands:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:149
# 85d30e5ba38d49bfa88090e8cae46ad9
msgid "The world borders ZIP file contains a set of data files collectively known as an `ESRI Shapefile`__, one of the most popular geospatial data formats.  When unzipped, the world borders dataset includes files with the following extensions:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:154
# 60ed19e905f840acb091286ff8d2c77d
msgid "``.shp``: Holds the vector data for the world borders geometries."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:155
# 9ced3c9136294188abdade0e3911367e
msgid "``.shx``: Spatial index file for geometries stored in the ``.shp``."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:156
# 7e31eea12cd244eba17c8c7d48ae1932
msgid "``.dbf``: Database file for holding non-geometric attribute data (e.g., integer and character fields)."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:158
# dd46b541c8aa4e2284f0592ef2e45850
msgid "``.prj``: Contains the spatial reference information for the geographic data stored in the shapefile."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:165
# b8442858d2d645e6905d3e8b2d2b1905
msgid "Use ``ogrinfo`` to examine spatial data"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:167
# faf83e62d2e044e3b9b0198ae843f9ba
msgid "The GDAL ``ogrinfo`` utility allows examining the metadata of shapefiles or other vector data sources:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:177
# 8f12eba8fd7240b5a228892becbb8624
msgid "``ogrinfo`` tells us that the shapefile has one layer, and that this layer contains polygon data.  To find out more, we'll specify the layer name and use the ``-so`` option to get only the important summary information:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:209
# 12c201febd6641e286065d366fe1656d
msgid "This detailed summary information tells us the number of features in the layer (246), the geographic bounds of the data, the spatial reference system (\"SRS WKT\"), as well as type information for each attribute field. For example, ``FIPS: String (2.0)`` indicates that the ``FIPS`` character field has a maximum length of 2.  Similarly, ``LON: Real (8.3)`` is a floating-point field that holds a maximum of 8 digits up to three decimal places."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:217
# d2e810be5a674fb68c739a51c54eaa82
msgid "Geographic Models"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:220
# 92fa0edcdf34483a98e0652abbe2f8fc
msgid "Defining a Geographic Model"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:222
# b98ef608d93c4bcd93d59796d82e0a5a
msgid "Now that you've examined your dataset using ``ogrinfo``, create a GeoDjango model to represent this data::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:251
# 7c84d98f2cd64035bb4960351a4ad058
msgid "Please note two important things:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:253
# f804a2e85a4443798f6b2cd7f112db5c
msgid "The ``models`` module is imported from ``django.contrib.gis.db``."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:254
# bf7c5bce858b48a4a83ec97c7b64c125
msgid "You must override the model's default manager with :class:`~django.contrib.gis.db.models.GeoManager` to perform spatial queries."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:257
# 1af4a400087d4b899e0a6a86fa62f1b3
msgid "The default spatial reference system for geometry fields is WGS84 (meaning the `SRID`__ is 4326) -- in other words, the field coordinates are in longitude, latitude pairs in units of degrees.  To use a different coordinate system, set the SRID of the geometry field with the ``srid`` argument. Use an integer representing the coordinate system's EPSG code."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:266
# 9e80e8b3524b4881a5c331cd7989d6a5
msgid "Run ``syncdb``"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:268
# 2496ae9a23c64e5b8d0ebb10d005f8d2
msgid "After defining your model, you need to sync it with the database. First, let's look at the SQL that will generate the table for the ``WorldBorder`` model::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:274
# 5ae8b30253f64b8abccf1456e9d7caf5
msgid "This command should produce the following output:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:299
# 465f7ae4234446b0b42c2db368137b73
msgid "If this looks correct, run ``syncdb`` to create this table in the database::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:305
# 311d485e7808483196b02b85a1feb03a
msgid "The ``syncdb`` command may also prompt you to create an admin user. Either do so now, or later by running ``django-admin.py createsuperuser``."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:309
# a8520d48610b43498f4ddda185f8fe0f
msgid "Importing Spatial Data"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:311
# 4e0e278258124ff0b3f94b2da3199597
msgid "This section will show you how to import the world borders shapefile into the database via GeoDjango models using the :ref:`ref-layermapping`. There are many different ways to import data into a spatial database -- besides the tools included within GeoDjango, you may also use the following:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:317
# a2943035a25444479e27e8de0a8b2810
msgid "`ogr2ogr`_: A command-line utility included with GDAL that can import many vector data formats into PostGIS, MySQL, and Oracle databases."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:319
# 408834c9406047e3a7745fb922aded6f
msgid "`shp2pgsql`_: This utility included with PostGIS imports ESRI shapefiles into PostGIS."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:328
# 70224f5cdc894377b8cca62cb876f99b
msgid "GDAL Interface"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:330
# 54a855b3c6e748d0b879091c2f6e9ec3
msgid "Earlier, you used ``ogrinfo`` to examine the contents of the world borders shapefile.  GeoDjango also includes a Pythonic interface to GDAL's powerful OGR library that can work with all the vector data sources that OGR supports."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:334
# 9a8807eea4e04a539b13775ef7b02130
msgid "First, invoke the Django shell:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:340
# 1a447391ada545338ae5fbeedba1e4b0
msgid "If you downloaded the :ref:`worldborders` data earlier in the tutorial, then you can determine its path using Python's built-in ``os`` module::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:349
# ea831d2e81f1416cae237317bfc97372
msgid "Now, open the world borders shapefile using GeoDjango's :class:`~django.contrib.gis.gdal.DataSource` interface::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:357
# 6807d75bb7ae4e71b4cf865a388a4ae6
msgid "Data source objects can have different layers of geospatial features; however, shapefiles are only allowed to have one layer::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:366
# dc07109911064d999c7fc1348591ceeb
msgid "You can see the layer's geometry type and how many features it contains::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:375
# 48ebabcbcd6a4a80a32b8affc9711cc8
msgid "Unfortunately, the shapefile data format does not allow for greater specificity with regards to geometry types.  This shapefile, like many others, actually includes ``MultiPolygon`` geometries, not Polygons. It's important to use a more general field type in models: a GeoDjango ``MultiPolygonField`` will accept a ``Polygon`` geometry, but a ``PolygonField`` will not accept a ``MultiPolygon`` type geometry.  This is why the ``WorldBorder`` model defined above uses a ``MultiPolygonField``."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:383
# 78e72fc9ae6b47caba05e8ad7815590e
msgid "The :class:`~django.contrib.gis.gdal.Layer` may also have a spatial reference system associated with it.  If it does, the ``srs`` attribute will return a :class:`~django.contrib.gis.gdal.SpatialReference` object::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:397
# eb944534623944bca0305eb61443715b
msgid "This shapefile is in the popular WGS84 spatial reference system -- in other words, the data uses longitude, latitude pairs in units of degrees."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:401
# e3e0eac6f6204877b3e82706631105f2
msgid "In addition, shapefiles also support attribute fields that may contain additional data.  Here are the fields on the World Borders layer:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:407
# 42fe36a5536b4f25be470b604b8e5440
msgid "The following code will let you examine the OGR types (e.g. integer or string) associated with each of the fields:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:413
# 6861a651fa16412bb88b0ae0e675daf9
msgid "You can iterate over each feature in the layer and extract information from both the feature's geometry (accessed via the ``geom`` attribute) as well as the feature's attribute fields (whose **values** are accessed via ``get()`` method)::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:426
# d91080c95aaf4afb9dc37a48e9229714
msgid ":class:`~django.contrib.gis.gdal.Layer` objects may be sliced::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:431
# 916d79fdd2a7413894d31008feb13617
msgid "And individual features may be retrieved by their feature ID::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:437
# 9a5bb75c290e4802a207316420e0ef47
msgid "Boundary geometries may be exported as WKT and GeoJSON::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:447
# 203306cdf2a14497bfff04b512d0017b
msgid "``LayerMapping``"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:449
# 07825aaaabd841a0867e5376a641202f
msgid "To import the data, use a LayerMapping in a Python script. Create a file called ``load.py`` inside the ``world`` application, with the following code::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:480
# 58d4791cfc884090b818e9c6f8e9e745
msgid "A few notes about what's going on:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:482
# aa644ddb62954ab5b1a20bc90c4a6fcd
msgid "Each key in the ``world_mapping`` dictionary corresponds to a field in the ``WorldBorder`` model.  The value is the name of the shapefile field that data will be loaded from."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:485
# 2f4c0f25f5cd41099c30bd4789c5cbb7
msgid "The key ``mpoly`` for the geometry field is ``MULTIPOLYGON``, the geometry type GeoDjango will import the field as.  Even simple polygons in the shapefile will automatically be converted into collections prior to insertion into the database."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:489
# 9917cd5a107c4372a05e572d89d1a782
msgid "The path to the shapefile is not absolute -- in other words, if you move the ``world`` application (with ``data`` subdirectory) to a different location, the script will still work."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:492
# ee125e9bdfb441688abb1be74dcdda55
msgid "The ``transform`` keyword is set to ``False`` because the data in the shapefile does not need to be converted -- it's already in WGS84 (SRID=4326)."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:494
# 948bd3f8580145c3b09dc8c5d2142cd6
msgid "The ``encoding`` keyword is set to the character encoding of the string values in the shapefile. This ensures that string values are read and saved correctly from their original encoding system."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:498
# c31138fe8c37495d9f86119080f7c2b1
msgid "Afterwards, invoke the Django shell from the ``geodjango`` project directory:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:504
# 3c82874a2d8142f48e5a790b89fa9713
msgid "Next, import the ``load`` module, call the ``run`` routine, and watch ``LayerMapping`` do the work::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:514
# 2d7f12fd99b444d8b698731800f31676
msgid "Try ``ogrinspect``"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:515
# 1e35111b01e948049d43f12b10d904ff
msgid "Now that you've seen how to define geographic models and import data with the :ref:`ref-layermapping`, it's possible to further automate this process with use of the :djadmin:`ogrinspect` management command.  The :djadmin:`ogrinspect` command  introspects a GDAL-supported vector data source (e.g., a shapefile) and generates a model definition and ``LayerMapping`` dictionary automatically."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:521
# 328a95cc5aff4777a1249506ee2a4e89
msgid "The general usage of the command goes as follows:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:527
# 2ef3461401ce4f379dfac44dfc9665e1
msgid "``data_source`` is the path to the GDAL-supported data source and ``model_name`` is the name to use for the model.  Command-line options may be used to further define how the model is generated."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:531
# 1ff2665aed2e406daf8dd694552e68a7
msgid "For example, the following command nearly reproduces the ``WorldBorder`` model and mapping dictionary created above, automatically:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:539
# 1566057fbe604045a550566ff8a06c77
msgid "A few notes about the command-line options given above:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:541
# cd20da4e10954e3f80e60c4551bdcc70
msgid "The ``--srid=4326`` option sets the SRID for the geographic field."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:542
# 0bd139671e5b42df861130c766dda649
msgid "The ``--mapping`` option tells ``ogrinspect`` to also generate a mapping dictionary for use with :class:`~django.contrib.gis.utils.LayerMapping`."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:545
# 75aa1546583c4e3fae0d68ddb342741e
msgid "The ``--multi`` option is specified so that the geographic field is a :class:`~django.contrib.gis.db.models.MultiPolygonField` instead of just a :class:`~django.contrib.gis.db.models.PolygonField`."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:549
# 62b4950e57ab4b648e1e141e677c5e38
msgid "The command produces the following output, which may be copied directly into the ``models.py`` of a GeoDjango application::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:587
# 3785a75b0856427da1377a2a654c1bb6
msgid "Spatial Queries"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:591
# 8653df9f7974446eb0ffa46ab2612555
msgid "GeoDjango adds spatial lookups to the Django ORM.  For example, you can find the country in the ``WorldBorder`` table that contains a particular point.  First, fire up the management shell:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:599
# b51980e1d6774b78a91e29dda4258300
msgid "Now, define a point of interest [#]_::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:603
# ea5dd3ca3f9044d095167062b73c96c5
msgid "The ``pnt_wkt`` string represents the point at -95.3385 degrees longitude, 29.7245 degrees latitude.  The geometry is in a format known as Well Known Text (WKT), a standard issued by the Open Geospatial Consortium (OGC). [#]_  Import the ``WorldBorder`` model, and perform a ``contains`` lookup using the ``pnt_wkt`` as the parameter::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:614
# 77d6ba13755f49b69feacdf810ca1b0c
msgid "Here, you retrieved a ``GeoQuerySet`` with only one model: the border of the United States (exactly what you would expect)."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:617
# 235a1c8a4b7344878d3b7db8ad15f38c
msgid "Similarly, you may also use a :ref:`GEOS geometry object <ref-geos>`. Here, you can combine the ``intersects`` spatial lookup with the ``get`` method to retrieve only the ``WorldBorder`` instance for San Marino instead of a queryset::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:628
# 2fdd026900ec4dbaad7a1d5793bacf06
msgid "The ``contains`` and ``intersects`` lookups are just a subset of the available queries -- the :ref:`ref-gis-db-api` documentation has more."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:632
# 8da5030cba53478bba00e384ff33b9c2
msgid "Automatic Spatial Transformations"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:633
# 65d0f6bc1f334c528a27571a02e4f0b3
msgid "When doing spatial queries, GeoDjango automatically transforms geometries if they're in a different coordinate system.  In the following example, coordinates will be expressed in `EPSG SRID 32140`__, a coordinate system specific to south Texas **only** and in units of **meters**, not degrees::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:642
# 66417acb2aec45c399beb1349cd426ce
msgid "Note that ``pnt`` may also be constructed with EWKT, an \"extended\" form of WKT that includes the SRID::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:647
# 9fd5c324ce154900b0b3e679fb6e669a
msgid "GeoDjango's ORM will automatically wrap geometry values in transformation SQL, allowing the developer to work at a higher level of abstraction::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:666
# ea3bbbce5f084ce7b33b3642ed2021da
msgid "When using :doc:`raw queries </topics/db/sql>`, you should generally wrap your geometry fields with the ``asText()`` SQL function (or ``ST_AsText`` for PostGIS) so that the field value will be recognized by GEOS::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:672
# 9d7a45914d0d403fbb45e1b653d5c0b6
msgid "This is not absolutely required by PostGIS, but generally you should only use raw queries when you know exactly what you are doing."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:676
# 8d9fecfc12e74544b540b2aa4e64312c
msgid "Lazy Geometries"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:677
# 75f3f2d400f849b99ac155acc0392203
msgid "GeoDjango loads geometries in a standardized textual representation.  When the geometry field is first accessed, GeoDjango creates a `GEOS geometry object <ref-geos>`, exposing powerful functionality, such as serialization properties for popular geospatial formats::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:692
# 95f154d5864e40c98b36a0a03a103043
msgid "This includes access to all of the advanced geometric operations provided by the GEOS library::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:706
# 82850a6f867f40f6ac951de1e90242e7
msgid "Putting your data on the map"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:709
# 62fe11a126c740f6bcf8cfb9f05a2e2c
msgid "Geographic Admin"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:711
# 1e3e21a05c264899a3ccff0032eb1525
msgid "GeoDjango extends :doc:`Django's admin application </ref/contrib/admin/index>` with support for editing geometry fields."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:715
#: ../../ref/templates/api.txt:16
# 369b598ef2244bfd8c2c58426f8471c2
# d77a5d7114004efeac136d460a7a6a5b
msgid "Basics"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:717
# 5fc483dd57b64c2ab47d875afb0ae393
msgid "GeoDjango also supplements the Django admin by allowing users to create and modify geometries on a JavaScript slippy map (powered by `OpenLayers`_)."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:720
# 2cab63834b0149339b82228ce3c5949a
msgid "Let's dive right in.  Create a file called ``admin.py`` inside the ``world`` application with the following code::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:728
# 16a7d39fe7a74c72bb44e1aebf103e1b
msgid "Next, edit your ``urls.py`` in the ``geodjango`` application folder as follows::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:739
# f62faa3bd918405ead7876dbe0d7da1b
msgid "Start up the Django development server:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:745
# 613c2ea572c7436d97acabde17b8672f
msgid "Finally, browse to ``http://localhost:8000/admin/``, and log in with the admin user created after running ``syncdb``.  Browse to any of the ``WorldBorder`` entries -- the borders may be edited by clicking on a polygon and dragging the vertexes to the desired position."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:760
# 128c679dc4a4470c888aa1209fa0166d
msgid "With the :class:`~django.contrib.gis.admin.OSMGeoAdmin`, GeoDjango uses a `Open Street Map`_ layer in the admin. This provides more context (including street and thoroughfare details) than available with the :class:`~django.contrib.gis.admin.GeoModelAdmin` (which uses the `Vector Map Level 0`_ WMS dataset hosted at `OSGeo`_)."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:766
# f00077119ba84f2c80da8d1cc5d7081e
msgid "First, there are some important requirements:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:768
# f53bb62fab014eba91774266a40761ef
msgid ":class:`~django.contrib.gis.admin.OSMGeoAdmin` requires that the :ref:`spherical mercator projection be added <addgoogleprojection>` to the ``spatial_ref_sys`` table (PostGIS 1.3 and below, only)."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:771
# c7d0cda79c074d6b88ee13f7e99cd2aa
msgid "The PROJ.4 datum shifting files must be installed (see the :ref:`PROJ.4 installation instructions <proj4>` for more details)."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:774
# 497ed71997c3491c93ceae1a33a6bc5b
msgid "If you meet these requirements, then just substitute the ``OSMGeoAdmin`` option class in your ``admin.py`` file::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:781
# f4e395ba9ab644f8bbe8594a7827073b
msgid "Special thanks to Bjørn Sandvik of `thematicmapping.org <http://thematicmapping.org>`_ for providing and maintaining this dataset."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:784
# f34e7354cdd341d6a46ba3b89784fab3
msgid "GeoDjango basic apps was written by Dane Springmeyer, Josh Livni, and Christopher Schmidt."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:786
# f9d4cf2a9b53455aa1c7f17f174e5eec
msgid "This point is the `University of Houston Law Center <http://www.law.uh.edu/>`_."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:788
# 5c85b2a4e6634d7d9f63b1de0005faf4
msgid "Open Geospatial Consortium, Inc., `OpenGIS Simple Feature Specification For SQL <http://www.opengeospatial.org/standards/sfs>`_."
msgstr ""

#: ../../ref/contrib/gis/utils.txt:5
# af847b2ec43d4a6c876a949a76b67ffb
msgid "GeoDjango Utilities"
msgstr ""

#: ../../ref/contrib/gis/utils.txt:10
# 584cc17959c54c7392c0c3665654d4fd
msgid "The :mod:`django.contrib.gis.utils` module contains various utilities that are useful in creating geospatial Web applications."
msgstr ""

#: ../../ref/contrib/humanize.txt:3
#: ../../ref/templates/builtins.txt:2326
# de8592b9bef7488bba556f358f8fc4d1
# 54d32d665b4b4992b49bcb6218029968
msgid "django.contrib.humanize"
msgstr ""

#: ../../ref/contrib/humanize.txt:9
#: ../../ref/contrib/index.txt:122
# 6101fb7f16234ee1962a185fc504383a
# ff3ee504c8f14f0fa5dc0b366d65fedd
msgid "A set of Django template filters useful for adding a \"human touch\" to data."
msgstr ""

#: ../../ref/contrib/humanize.txt:11
# 3836516ec6f54e738dde339eaab8fda5
msgid "To activate these filters, add ``'django.contrib.humanize'`` to your :setting:`INSTALLED_APPS` setting. Once you've done that, use ``{% load humanize %}`` in a template, and you'll have access to the following filters."
msgstr ""

#: ../../ref/contrib/humanize.txt:19
# ea73bd07c1d3417f9cf22268c14c603e
msgid "apnumber"
msgstr ""

#: ../../ref/contrib/humanize.txt:21
# 1a15e703b52c43adb082c9d2f8fff9ca
msgid "For numbers 1-9, returns the number spelled out. Otherwise, returns the number. This follows Associated Press style."
msgstr ""

#: ../../ref/contrib/humanize.txt:24
#: ../../ref/contrib/humanize.txt:39
#: ../../ref/contrib/humanize.txt:62
#: ../../ref/contrib/humanize.txt:134
#: ../../ref/contrib/webdesign.txt:51
#: ../../ref/django-admin.txt:1109
# 60a287ae5b29493f9340e27f33103c98
# e35ec3fc41a04c97b3321915481856e0
# 89e2b46b10c04f0ab1a6fe9cf82dc224
# 4ad31ab4d50c48eebdc153d21ed7252c
# aabdf38d284346f2b78b01f2dd1d1b83
# 4719a3bb4c66400bbcac804fa92cc15d
msgid "Examples:"
msgstr ""

#: ../../ref/contrib/humanize.txt:26
# 99c52c5d9cfc400fac51578bbf4e2386
msgid "``1`` becomes ``one``."
msgstr ""

#: ../../ref/contrib/humanize.txt:27
# 631b8a772747425d9268c22db9947da6
msgid "``2`` becomes ``two``."
msgstr ""

#: ../../ref/contrib/humanize.txt:28
# 7baf4fead6ca4ab9bb582fca6d6fcc9d
msgid "``10`` becomes ``10``."
msgstr ""

#: ../../ref/contrib/humanize.txt:30
#: ../../ref/contrib/humanize.txt:52
#: ../../ref/contrib/humanize.txt:77
#: ../../ref/contrib/humanize.txt:140
# 0c2f38f9cdea4765947f282b7822bf57
# 755b3da7619a4430bdde6c5d99bd89c7
# ff3dc4f285914202aa4f709218a49d6b
# aafef853e9c447f0a1ef5d43899e8f69
msgid "You can pass in either an integer or a string representation of an integer."
msgstr ""

#: ../../ref/contrib/humanize.txt:35
# 191bd5af7d3347c38ace749d13379d92
msgid "intcomma"
msgstr ""

#: ../../ref/contrib/humanize.txt:37
# 0709f1817f42402392c2e6561ade9bcd
msgid "Converts an integer to a string containing commas every three digits."
msgstr ""

#: ../../ref/contrib/humanize.txt:41
# 23e2d0c712bc4a8ca294e67ae04a43a7
msgid "``4500`` becomes ``4,500``."
msgstr ""

#: ../../ref/contrib/humanize.txt:42
# 0f0b2ffdc77a4decbf60a997aea538c2
msgid "``45000`` becomes ``45,000``."
msgstr ""

#: ../../ref/contrib/humanize.txt:43
# 24bc6fd3a5d3464f8c98154fb564adf6
msgid "``450000`` becomes ``450,000``."
msgstr ""

#: ../../ref/contrib/humanize.txt:44
# 9090c1be2c504ea1b7d0bdc62f289fdf
msgid "``4500000`` becomes ``4,500,000``."
msgstr ""

#: ../../ref/contrib/humanize.txt:46
#: ../../ref/contrib/humanize.txt:70
# 030b2bd984544bc5b1a13e22378c8ee6
# 60ee453a39be41a98924b1b799078fbd
msgid ":ref:`Format localization <format-localization>` will be respected if enabled, e.g. with the ``'de'`` language:"
msgstr ""

#: ../../ref/contrib/humanize.txt:49
# ef96395e0b6b4e3d97666d76573fe762
msgid "``45000`` becomes ``'45.000'``."
msgstr ""

#: ../../ref/contrib/humanize.txt:50
# 7486a06e1e324bcf8397068597c4034b
msgid "``450000`` becomes ``'450.000'``."
msgstr ""

#: ../../ref/contrib/humanize.txt:57
# 460eccc3668c4b74920a4279f613a3cb
msgid "intword"
msgstr ""

#: ../../ref/contrib/humanize.txt:59
# afad943b32f949a58971efad8784f06b
msgid "Converts a large integer to a friendly text representation. Works best for numbers over 1 million."
msgstr ""

#: ../../ref/contrib/humanize.txt:64
# 5f656f0b1f6e4433b240480c39e55fb4
msgid "``1000000`` becomes ``1.0 million``."
msgstr ""

#: ../../ref/contrib/humanize.txt:65
# ea3a322fc1e642dfadc12c33909bd179
msgid "``1200000`` becomes ``1.2 million``."
msgstr ""

#: ../../ref/contrib/humanize.txt:66
# adeef8480dad4d7c9350a915f7611cf4
msgid "``1200000000`` becomes ``1.2 billion``."
msgstr ""

#: ../../ref/contrib/humanize.txt:68
# 8f34099c55ec4c509a35c5f56905406e
msgid "Values up to 10^100 (Googol) are supported."
msgstr ""

#: ../../ref/contrib/humanize.txt:73
# 029a5d9b31f74329b166e948131a4f85
msgid "``1000000`` becomes ``'1,0 Million'``."
msgstr ""

#: ../../ref/contrib/humanize.txt:74
# a0ca32c0c69648669d80ede22bf4c0c3
msgid "``1200000`` becomes ``'1,2 Million'``."
msgstr ""

#: ../../ref/contrib/humanize.txt:75
# 102cd3b7877e40eab6439e05c7d7cbf2
msgid "``1200000000`` becomes ``'1,2 Milliarden'``."
msgstr ""

#: ../../ref/contrib/humanize.txt:82
# e3dd83849c324d399b2340e3468dd160
msgid "naturalday"
msgstr ""

#: ../../ref/contrib/humanize.txt:84
# 536018157c6549a0b952796377869d2d
msgid "For dates that are the current day or within one day, return \"today\", \"tomorrow\" or \"yesterday\", as appropriate. Otherwise, format the date using the passed in format string."
msgstr ""

#: ../../ref/contrib/humanize.txt:88
# dc7564e6001544f6b5b33e415af8adad
msgid "**Argument:** Date formatting string as described in the :tfilter:`date` tag."
msgstr ""

#: ../../ref/contrib/humanize.txt:90
# 4ac2375044644ff9a3b178ee41ea503c
msgid "Examples (when 'today' is 17 Feb 2007):"
msgstr ""

#: ../../ref/contrib/humanize.txt:92
# 885a2b5992c84cacb18dd7822ddd81fe
msgid "``16 Feb 2007`` becomes ``yesterday``."
msgstr ""

#: ../../ref/contrib/humanize.txt:93
# 0eb178b5b23e4656b39487fe88b16401
msgid "``17 Feb 2007`` becomes ``today``."
msgstr ""

#: ../../ref/contrib/humanize.txt:94
# 407e47a3488b4d47a5c395732756137d
msgid "``18 Feb 2007`` becomes ``tomorrow``."
msgstr ""

#: ../../ref/contrib/humanize.txt:95
# 8bfbcdccdf024fcc81615ba044330512
msgid "Any other day is formatted according to given argument or the :setting:`DATE_FORMAT` setting if no argument is given."
msgstr ""

#: ../../ref/contrib/humanize.txt:101
# dd7e95ba281a4ac8b358057446ad8f3a
msgid "naturaltime"
msgstr ""

#: ../../ref/contrib/humanize.txt:105
# 761d651f70ff432e8481b25f3759ceb0
msgid "For datetime values, returns a string representing how many seconds, minutes or hours ago it was -- falling back to the :tfilter:`timesince` format if the value is more than a day old. In case the datetime value is in the future the return value will automatically use an appropriate phrase."
msgstr ""

#: ../../ref/contrib/humanize.txt:110
# 8134ae906b324031b03ae0ded75cba08
msgid "Examples (when 'now' is 17 Feb 2007 16:30:00):"
msgstr ""

#: ../../ref/contrib/humanize.txt:112
# 52e47fc2aaac4f73a2d7c42d2e449f56
msgid "``17 Feb 2007 16:30:00`` becomes ``now``."
msgstr ""

#: ../../ref/contrib/humanize.txt:113
# 09197bb1d62648a889079c99e252a6d7
msgid "``17 Feb 2007 16:29:31`` becomes ``29 seconds ago``."
msgstr ""

#: ../../ref/contrib/humanize.txt:114
# 320417ee84984abaa9e84088a01199e8
msgid "``17 Feb 2007 16:29:00`` becomes ``a minute ago``."
msgstr ""

#: ../../ref/contrib/humanize.txt:115
# 756a953f92574f33b8d485c231ed13b9
msgid "``17 Feb 2007 16:25:35`` becomes ``4 minutes ago``."
msgstr ""

#: ../../ref/contrib/humanize.txt:116
# aae6387137fd4b49a611b776da4b3373
msgid "``17 Feb 2007 15:30:29`` becomes ``an hour ago``."
msgstr ""

#: ../../ref/contrib/humanize.txt:117
# f739b49e4df246eb90e1a5c73caef5a3
msgid "``17 Feb 2007 13:31:29`` becomes ``2 hours ago``."
msgstr ""

#: ../../ref/contrib/humanize.txt:118
# 4db261a4fcef49a4bef81c10042f1b93
msgid "``16 Feb 2007 13:31:29`` becomes ``1 day, 3 hours ago``."
msgstr ""

#: ../../ref/contrib/humanize.txt:119
# 3ed3b0b58b12460ba7ff6909bb564c97
msgid "``17 Feb 2007 16:30:30`` becomes ``29 seconds from now``."
msgstr ""

#: ../../ref/contrib/humanize.txt:120
# d501daf0514f4b8aac2ae83b11c5ad9f
msgid "``17 Feb 2007 16:31:00`` becomes ``a minute from now``."
msgstr ""

#: ../../ref/contrib/humanize.txt:121
# bc80750a71b94bfb89d3870a4a1bc0c4
msgid "``17 Feb 2007 16:34:35`` becomes ``4 minutes from now``."
msgstr ""

#: ../../ref/contrib/humanize.txt:122
# 440cedd6d2a34d48a8302ae34eef5009
msgid "``17 Feb 2007 16:30:29`` becomes ``an hour from now``."
msgstr ""

#: ../../ref/contrib/humanize.txt:123
# b2f21adc6d5d4b8d9f408942fe07d92a
msgid "``17 Feb 2007 18:31:29`` becomes ``2 hours from now``."
msgstr ""

#: ../../ref/contrib/humanize.txt:124
# 1eaee423228f4bb3bfb687f3efef153a
msgid "``18 Feb 2007 16:31:29`` becomes ``1 day from now``."
msgstr ""

#: ../../ref/contrib/humanize.txt:125
# c69aafc7100f4ae8810a7f236120cd3c
msgid "``26 Feb 2007 18:31:29`` becomes ``1 week, 2 days from now``."
msgstr ""

#: ../../ref/contrib/humanize.txt:130
# 04113ab08ad24a37b14a876ed8f28264
msgid "ordinal"
msgstr ""

#: ../../ref/contrib/humanize.txt:132
# e0bce07c17474865ab7ea6151263dce2
msgid "Converts an integer to its ordinal as a string."
msgstr ""

#: ../../ref/contrib/humanize.txt:136
# 996351a2c5fa4006a36c7ddd18040612
msgid "``1`` becomes ``1st``."
msgstr ""

#: ../../ref/contrib/humanize.txt:137
# 323b456469314c58a8e54fa9e862fbb9
msgid "``2`` becomes ``2nd``."
msgstr ""

#: ../../ref/contrib/humanize.txt:138
# 3123b84ebbd141e99cbc6827a3859931
msgid "``3`` becomes ``3rd``."
msgstr ""

#: ../../ref/contrib/index.txt:3
# 8870dc1a8a1e433f8bfff79486fc9286
msgid "``contrib`` packages"
msgstr ""

#: ../../ref/contrib/index.txt:5
# fd984cb9e67d459380d95836992624f4
msgid "Django aims to follow Python's `\"batteries included\" philosophy`_. It ships with a variety of extra, optional tools that solve common Web-development problems."
msgstr ""

#: ../../ref/contrib/index.txt:9
# 3bd283560f7b4d6eaa281081b97b361e
msgid "This code lives in ``django/contrib`` in the Django distribution. This document gives a rundown of the packages in ``contrib``, along with any dependencies those packages have."
msgstr ""

#: ../../ref/contrib/index.txt:15
# d7db2aac16f144078cdfabee602f45b5
msgid "For most of these add-ons -- specifically, the add-ons that include either models or template tags -- you'll need to add the package name (e.g., ``'django.contrib.admin'``) to your :setting:`INSTALLED_APPS` setting and re-run ``manage.py syncdb``."
msgstr ""

#: ../../ref/contrib/index.txt:46
# 48644fdeb8114adea45f18d5979ec682
msgid "admin"
msgstr ""

#: ../../ref/contrib/index.txt:48
# f5661617728d47c0a7f342c9965c37e5
msgid "The automatic Django administrative interface. For more information, see :doc:`Tutorial 2 </intro/tutorial02>` and the :doc:`admin documentation </ref/contrib/admin/index>`."
msgstr ""

#: ../../ref/contrib/index.txt:52
# f3728462a26e45299c6c3eb688a7c8d2
msgid "Requires the auth_ and contenttypes_ contrib packages to be installed."
msgstr ""

#: ../../ref/contrib/index.txt:55
# defc1fb679f9498a891847e220446205
msgid "auth"
msgstr ""

#: ../../ref/contrib/index.txt:57
# 79e1b87983164541acedcd3fca1cb577
msgid "Django's authentication framework."
msgstr ""

#: ../../ref/contrib/index.txt:59
# afb917bd064d42d49eeb0de11c89db2b
msgid "See :doc:`/topics/auth/index`."
msgstr ""

#: ../../ref/contrib/index.txt:62
# 8692f5116d1a45cd853979ac779a0ca1
msgid "comments"
msgstr ""

#: ../../ref/contrib/index.txt:64
# ef4d58f74c414ddea9370d1a75718755
msgid "A simple yet flexible comments system. See :doc:`/ref/contrib/comments/index`."
msgstr ""

#: ../../ref/contrib/index.txt:67
# 5e1c7123d4264b0caf934f2303b3fe3f
msgid "contenttypes"
msgstr ""

#: ../../ref/contrib/index.txt:69
# 9f2b4bd143ca492a8cce4e3583e8bd95
msgid "A light framework for hooking into \"types\" of content, where each installed Django model is a separate content type."
msgstr ""

#: ../../ref/contrib/index.txt:72
# b11f8cfb5eca4baab117c4f805e7a892
msgid "See the :doc:`contenttypes documentation </ref/contrib/contenttypes>`."
msgstr ""

#: ../../ref/contrib/index.txt:75
# 088affc93b1e47369a3cc90c6870e1c7
msgid "csrf"
msgstr ""

#: ../../ref/contrib/index.txt:77
# 996e9a9bd4394e98b98f4e1d0c587e85
msgid "A middleware for preventing Cross Site Request Forgeries"
msgstr ""

#: ../../ref/contrib/index.txt:79
# 52902b57b05543cfa32cbef8e0cdaf7a
msgid "See the :doc:`csrf documentation </ref/contrib/csrf>`."
msgstr ""

#: ../../ref/contrib/index.txt:82
# c306d61cda75455495c0db917722e880
msgid "flatpages"
msgstr ""

#: ../../ref/contrib/index.txt:84
# bf7bf194a01a46259f0679b804e32ce8
msgid "A framework for managing simple \"flat\" HTML content in a database."
msgstr ""

#: ../../ref/contrib/index.txt:86
# f2de25bf09724408a6168042507779d4
msgid "See the :doc:`flatpages documentation </ref/contrib/flatpages>`."
msgstr ""

#: ../../ref/contrib/index.txt:88
# 1a9cbf1baf3b4f9db6d7c158dfd2c5a3
msgid "Requires the sites_ contrib package to be installed as well."
msgstr ""

#: ../../ref/contrib/index.txt:91
# 64f4e75052314318aaa4c141ab32ad19
msgid "formtools"
msgstr ""

#: ../../ref/contrib/index.txt:93
# 9a4f232fecf1430d8589903acd3ed411
msgid "A set of high-level abstractions for Django forms (django.forms)."
msgstr ""

#: ../../ref/contrib/index.txt:96
# fc19c837d3704eb7a8a5fe1930870d5c
msgid "django.contrib.formtools.preview"
msgstr ""

#: ../../ref/contrib/index.txt:98
# 9b18c4d220c24736bd9125478b72532a
msgid "An abstraction of the following workflow:"
msgstr ""

#: ../../ref/contrib/index.txt:102
# 5262197c448e414abebce7cdbadef768
msgid "See the :doc:`form preview documentation </ref/contrib/formtools/form-preview>`."
msgstr ""

#: ../../ref/contrib/index.txt:105
# a58e3d1479cf4ecba82969a1c3a33c86
msgid "django.contrib.formtools.wizard"
msgstr ""

#: ../../ref/contrib/index.txt:107
# 155f810874824a25a3dccdaf51f393c8
msgid "Splits forms across multiple Web pages."
msgstr ""

#: ../../ref/contrib/index.txt:109
# ea824399e89c410c950ca4ac0f3dcb14
msgid "See the :doc:`form wizard documentation </ref/contrib/formtools/form-wizard>`."
msgstr ""

#: ../../ref/contrib/index.txt:112
# 35673d76619a4f29be6a7089e238b83e
msgid "gis"
msgstr ""

#: ../../ref/contrib/index.txt:114
# c47ab08a156342709761f1c9e2089a71
msgid "A world-class geospatial framework built on top of Django, that enables storage, manipulation and display of spatial data."
msgstr ""

#: ../../ref/contrib/index.txt:117
# 3cc89df7d158445bbe771e5cecd4031a
msgid "See the :doc:`/ref/contrib/gis/index` documentation for more."
msgstr ""

#: ../../ref/contrib/index.txt:120
# e90c95d996444c74b04b099cfa21f8e8
msgid "humanize"
msgstr ""

#: ../../ref/contrib/index.txt:124
# c13e1071133b456cac2408fd68d70514
msgid "See the :doc:`humanize documentation </ref/contrib/humanize>`."
msgstr ""

#: ../../ref/contrib/index.txt:127
# c599cd545d7a4b59b639065e54858dc9
msgid "localflavor"
msgstr ""

#: ../../ref/contrib/index.txt:129
# b776d6e70c254df8a4d8aec7d9a56e29
msgid "A collection of various Django snippets that are useful only for a particular country or culture. For example, ``django.contrib.localflavor.us.forms`` contains a ``USZipCodeField`` that you can use to validate U.S. zip codes."
msgstr ""

#: ../../ref/contrib/index.txt:133
# 8efaff9cc3444884a14f0ad94d7c98cc
msgid "See the :doc:`localflavor documentation </ref/contrib/localflavor>`."
msgstr ""

#: ../../ref/contrib/index.txt:136
# 87fae43651a1474eb4416bc65f28875b
msgid "markup"
msgstr ""

#: ../../ref/contrib/index.txt:138
# b566500e8ac34dfdb7c638a175bfb0d7
msgid "A collection of template filters that implement common markup languages"
msgstr ""

#: ../../ref/contrib/index.txt:140
#: ../../ref/templates/builtins.txt:2340
# a2d0fff50c3944ddbddcbc66f2770eb5
# 1e77b9aa1ca34d8ea633084b8f1d0f3f
msgid "See the :doc:`markup documentation </ref/contrib/markup>`."
msgstr ""

#: ../../ref/contrib/index.txt:143
# 57e9ba8a5398413c869a1453b8834cd3
msgid "messages"
msgstr ""

#: ../../ref/contrib/index.txt:145
# 57cd48163187428b801e9ef92fcdf4c0
msgid "A framework for storing and retrieving temporary cookie- or session-based messages"
msgstr ""

#: ../../ref/contrib/index.txt:148
# 8ce3d8e5230e4aaeb96dc499d96e8876
msgid "See the :doc:`messages documentation </ref/contrib/messages>`."
msgstr ""

#: ../../ref/contrib/index.txt:151
# 4badc8957959499f942965c23525eb1d
msgid "redirects"
msgstr ""

#: ../../ref/contrib/index.txt:153
# 1478e9f2ccde4a43becc5097686ee94c
msgid "A framework for managing redirects."
msgstr ""

#: ../../ref/contrib/index.txt:155
# d066526f929e4cb39843205942c5bde6
msgid "See the :doc:`redirects documentation </ref/contrib/redirects>`."
msgstr ""

#: ../../ref/contrib/index.txt:158
# 84903c56b55240298ab6a614dd18a523
msgid "sessions"
msgstr ""

#: ../../ref/contrib/index.txt:160
# 01a4daa7909a4b63b4d63787f4408a7a
msgid "A framework for storing data in anonymous sessions."
msgstr ""

#: ../../ref/contrib/index.txt:162
# 3f6f56cd6b16449fa9a1945773fc9601
msgid "See the :doc:`sessions documentation </topics/http/sessions>`."
msgstr ""

#: ../../ref/contrib/index.txt:165
# 85be6be8c94f43269d622d3f61cb40d5
msgid "sites"
msgstr ""

#: ../../ref/contrib/index.txt:167
# bdc8a4943ef04d0e82223ad737913aae
msgid "A light framework that lets you operate multiple Web sites off of the same database and Django installation. It gives you hooks for associating objects to one or more sites."
msgstr ""

#: ../../ref/contrib/index.txt:171
# ec639b56a6014641b9a04386f4c96719
msgid "See the :doc:`sites documentation </ref/contrib/sites>`."
msgstr ""

#: ../../ref/contrib/index.txt:174
# 3ab8295f19f14473a760ed5926f4bd15
msgid "sitemaps"
msgstr ""

#: ../../ref/contrib/index.txt:176
# 8d4e47c5153c4d51b6f294de57d9362b
msgid "A framework for generating Google sitemap XML files."
msgstr ""

#: ../../ref/contrib/index.txt:178
# 20ac4f6d8cec4017b6fb464cac46b304
msgid "See the :doc:`sitemaps documentation </ref/contrib/sitemaps>`."
msgstr ""

#: ../../ref/contrib/index.txt:181
# 68464dd4c91b451a92eac686822336a6
msgid "syndication"
msgstr ""

#: ../../ref/contrib/index.txt:183
# c524620356f547b7bb46b36cf28544fe
msgid "A framework for generating syndication feeds, in RSS and Atom, quite easily."
msgstr ""

#: ../../ref/contrib/index.txt:185
# 3ed40343816c40f2bfd7f7cfe441097f
msgid "See the :doc:`syndication documentation </ref/contrib/syndication>`."
msgstr ""

#: ../../ref/contrib/index.txt:188
# 1c6d8a53821c4e4ab6d8bb43fb9b02b5
msgid "webdesign"
msgstr ""

#: ../../ref/contrib/index.txt:190
# ec476c6d53bd41a7bbe8c9b3a2c128fd
msgid "Helpers and utilities targeted primarily at Web *designers* rather than Web *developers*."
msgstr ""

#: ../../ref/contrib/index.txt:193
# fcc71e66a96c47ddb2931ea372a0b895
msgid "See the :doc:`Web design helpers documentation </ref/contrib/webdesign>`."
msgstr ""

#: ../../ref/contrib/index.txt:196
# 2722ca8ea17e48ba9163a90520d3ce32
msgid "Other add-ons"
msgstr ""

#: ../../ref/contrib/index.txt:198
# 709ecf3c7bd240eabf72e8b2652ed4d4
msgid "If you have an idea for functionality to include in ``contrib``, let us know! Code it up, and post it to the `django-users mailing list`_."
msgstr ""

#: ../../ref/contrib/localflavor.txt:3
# 7f3388ce3f114cf1b6c014189e9ebbfd
msgid "The \"local flavor\" add-ons"
msgstr ""

#: ../../ref/contrib/localflavor.txt:9
# f411aaa7269b4a3e8c5f316d08e7cf14
msgid "Historically, Django has shipped with ``django.contrib.localflavor`` -- assorted pieces of code that are useful for particular countries or cultures. Starting with Django 1.5, we've started the process of moving the code to outside packages (i.e., packages distributed separately from Django), for easier maintenance and to trim the size of Django's codebase."
msgstr ""

#: ../../ref/contrib/localflavor.txt:15
# 31de8cee26a04bcfbcc8e54e52f200e1
msgid "The localflavor packages are named ``django-localflavor-*``, where the asterisk is an `ISO 3166 country code`_. For example: ``django-localflavor-us`` is the localflavor package for the U.S.A."
msgstr ""

#: ../../ref/contrib/localflavor.txt:19
# f2f6c2f419c6419a832ba20d1ad316d2
msgid "Most of these ``localflavor`` add-ons are country-specific fields for the :doc:`forms </topics/forms/index>` framework -- for example, a ``USStateField`` that knows how to validate U.S. state abbreviations and a ``FISocialSecurityNumber`` that knows how to validate Finnish social security numbers."
msgstr ""

#: ../../ref/contrib/localflavor.txt:25
# a93fd380c6ba4109b456abf0e2c62c46
msgid "To use one of these localized components, just import the relevant subpackage. For example, here's how you can create a form with a field representing a French telephone number::"
msgstr ""

#: ../../ref/contrib/localflavor.txt:35
# 29a16caeb121482496087508a23839a5
msgid "For documentation on a given country's localflavor helpers, see its README file."
msgstr ""

#: ../../ref/contrib/localflavor.txt:43
# 2d871c0067dc445b94f493f4cb69ae46
msgid "How to migrate"
msgstr ""

#: ../../ref/contrib/localflavor.txt:45
# 75e46789202a413b846683cc6609685b
msgid "If you've used the old ``django.contrib.localflavor`` package, follow these two easy steps to update your code:"
msgstr ""

#: ../../ref/contrib/localflavor.txt:48
# 1b52dad4118b411ca6b8698f9d4e7c15
msgid "Install the appropriate third-party ``django-localflavor-*`` package(s). Go to https://github.com/django/ and find the package for your country."
msgstr ""

#: ../../ref/contrib/localflavor.txt:51
# 78f737199bf94a359443010015073c26
msgid "Change your app's import statements to reference the new packages."
msgstr ""

#: ../../ref/contrib/localflavor.txt:53
# 866cb8de306245c88f047622dc9b1eff
msgid "For example, change this::"
msgstr ""

#: ../../ref/contrib/localflavor.txt:57
# 57d6b1a77a56486e925eb33af08f40c7
msgid "...to this::"
msgstr ""

#: ../../ref/contrib/localflavor.txt:61
# 9b357294486b4e34b316156bf0f7df31
msgid "The code in the new packages is the same (it was copied directly from Django), so you don't have to worry about backwards compatibility in terms of functionality. Only the imports have changed."
msgstr ""

#: ../../ref/contrib/localflavor.txt:68
# bdfd4b2d688f40cca58033cf4f333b12
msgid "Deprecation policy"
msgstr ""

#: ../../ref/contrib/localflavor.txt:70
# c9ef51ffc13740659b59eb89adddf5ca
msgid "In Django 1.5, importing from ``django.contrib.localflavor`` will result in a ``DeprecationWarning``. This means your code will still work, but you should change it as soon as possible."
msgstr ""

#: ../../ref/contrib/localflavor.txt:74
# 9e2624bced7c4aab8c69c5d37bbe7884
msgid "In Django 1.6, importing from ``django.contrib.localflavor`` will no longer work."
msgstr ""

#: ../../ref/contrib/localflavor.txt:80
# d0ba88ecc6fd46c68a7902c5be782be9
msgid "Supported countries"
msgstr ""

#: ../../ref/contrib/localflavor.txt:82
# 87d1ce3ec2ff45349bc50dfee7de98f7
msgid "The following countries have django-localflavor- packages."
msgstr ""

#: ../../ref/contrib/localflavor.txt:84
# 093a3998eb6547afba670f1a066eea12
msgid "Argentina: https://github.com/django/django-localflavor-ar"
msgstr ""

#: ../../ref/contrib/localflavor.txt:85
# 7c868eeb204d4ce8933708f9dad92e61
msgid "Australia: https://github.com/django/django-localflavor-au"
msgstr ""

#: ../../ref/contrib/localflavor.txt:86
# 9eada572d33d4cbe9df3ef3b2cdfdbd4
msgid "Austria: https://github.com/django/django-localflavor-at"
msgstr ""

#: ../../ref/contrib/localflavor.txt:87
# 8b5f7042bc0e4dc081909e05a0628093
msgid "Belgium: https://github.com/django/django-localflavor-be"
msgstr ""

#: ../../ref/contrib/localflavor.txt:88
# 30545e27463c4c1db7ca37309ae67821
msgid "Brazil: https://github.com/django/django-localflavor-br"
msgstr ""

#: ../../ref/contrib/localflavor.txt:89
# 0a681fd789024053857a3665b3c78e7c
msgid "Canada: https://github.com/django/django-localflavor-ca"
msgstr ""

#: ../../ref/contrib/localflavor.txt:90
# 991ebf4384b445a29514263c1ca71792
msgid "Chile: https://github.com/django/django-localflavor-cl"
msgstr ""

#: ../../ref/contrib/localflavor.txt:91
# ee4dca064cd94dfda33c3ba0ee60bc82
msgid "China: https://github.com/django/django-localflavor-cn"
msgstr ""

#: ../../ref/contrib/localflavor.txt:92
# f4ee171f7ec84969afa10b562972e5d6
msgid "Colombia: https://github.com/django/django-localflavor-co"
msgstr ""

#: ../../ref/contrib/localflavor.txt:93
# ef2dfb8a1c3d4a0695bbbeca76b64deb
msgid "Croatia: https://github.com/django/django-localflavor-cr"
msgstr ""

#: ../../ref/contrib/localflavor.txt:94
# 081e2f3aaa6546aabee493badaa5e80f
msgid "Czech Republic: https://github.com/django/django-localflavor-cz"
msgstr ""

#: ../../ref/contrib/localflavor.txt:95
# d6641e4b715f404b82e0e0544c2ada8d
msgid "Ecuador: https://github.com/django/django-localflavor-ec"
msgstr ""

#: ../../ref/contrib/localflavor.txt:96
# 738936d219bf44f49102c16a9d95611f
msgid "Finland: https://github.com/django/django-localflavor-fi"
msgstr ""

#: ../../ref/contrib/localflavor.txt:97
# 77a81ce4e84c47d09ac92fbcc34253b9
msgid "France: https://github.com/django/django-localflavor-fr"
msgstr ""

#: ../../ref/contrib/localflavor.txt:98
# 75cbd897d3654124bed9e4e0cba0151c
msgid "Germany: https://github.com/django/django-localflavor-de"
msgstr ""

#: ../../ref/contrib/localflavor.txt:99
# d4947b612f494618a30e4474b844cbd6
msgid "Greece: https://github.com/spapas/django-localflavor-gr"
msgstr ""

#: ../../ref/contrib/localflavor.txt:100
# bd278713f97a41efbe46d7fc12ae9bad
msgid "Hong Kong: https://github.com/django/django-localflavor-hk"
msgstr ""

#: ../../ref/contrib/localflavor.txt:101
# 691e7316cd9343fbb2ab560e0a967b74
msgid "Iceland: https://github.com/django/django-localflavor-is"
msgstr ""

#: ../../ref/contrib/localflavor.txt:102
# d701038b3f6642d6ad947580cade4f52
msgid "India: https://github.com/django/django-localflavor-in"
msgstr ""

#: ../../ref/contrib/localflavor.txt:103
# a858e7bbf06c4f46849446bfcb0779c1
msgid "Indonesia: https://github.com/django/django-localflavor-id"
msgstr ""

#: ../../ref/contrib/localflavor.txt:104
# 0fe6065a74d24ea09e5cc2801f0c2b86
msgid "Ireland: https://github.com/django/django-localflavor-ie"
msgstr ""

#: ../../ref/contrib/localflavor.txt:105
# 48e2ece43cfe4a7c9ced901713c2d46d
msgid "Israel: https://github.com/django/django-localflavor-il"
msgstr ""

#: ../../ref/contrib/localflavor.txt:106
# 922259e571d042519ae1930fa7d78867
msgid "Italy: https://github.com/django/django-localflavor-it"
msgstr ""

#: ../../ref/contrib/localflavor.txt:107
# 296ee20f92ac4dd4919c8d4b1eebd860
msgid "Japan: https://github.com/django/django-localflavor-jp"
msgstr ""

#: ../../ref/contrib/localflavor.txt:108
# 3f59ce5fb2bc4c1a8ebd30977b15504f
msgid "Kuwait: https://github.com/django/django-localflavor-kw"
msgstr ""

#: ../../ref/contrib/localflavor.txt:109
# bbaab0b8f44d4202a42748497d3dde2a
msgid "Lithuania: https://github.com/simukis/django-localflavor-lt"
msgstr ""

#: ../../ref/contrib/localflavor.txt:110
# ca29ff0b7c914a64b6f1876af64721a2
msgid "Macedonia: https://github.com/django/django-localflavor-mk"
msgstr ""

#: ../../ref/contrib/localflavor.txt:111
# 10e8c84d98074940b3fb20beabb45c3a
msgid "Mexico: https://github.com/django/django-localflavor-mx"
msgstr ""

#: ../../ref/contrib/localflavor.txt:112
# c4e0f7345ee84f95aa82b71897cf65e7
msgid "The Netherlands: https://github.com/django/django-localflavor-nl"
msgstr ""

#: ../../ref/contrib/localflavor.txt:113
# 44f0aaeb16484ad6973ced8bc8bd667d
msgid "Norway: https://github.com/django/django-localflavor-no"
msgstr ""

#: ../../ref/contrib/localflavor.txt:114
# 08e7c856d8af43d8b3d502fbe74c6ebc
msgid "Peru: https://github.com/django/django-localflavor-pe"
msgstr ""

#: ../../ref/contrib/localflavor.txt:115
# 1a75224269b142b1ac9de0d08e2a51af
msgid "Poland: https://github.com/django/django-localflavor-pl"
msgstr ""

#: ../../ref/contrib/localflavor.txt:116
# 3e140c61072d48dca673bb2208edbe22
msgid "Portugal: https://github.com/django/django-localflavor-pt"
msgstr ""

#: ../../ref/contrib/localflavor.txt:117
# 07a2fbf5e27e4cf89c41972c28783d5b
msgid "Paraguay: https://github.com/django/django-localflavor-py"
msgstr ""

#: ../../ref/contrib/localflavor.txt:118
# fc52e40910b84cce83dead8a56d2417a
msgid "Romania: https://github.com/django/django-localflavor-ro"
msgstr ""

#: ../../ref/contrib/localflavor.txt:119
# 5dd373e4c59048d99f86e6859e5fc6cb
msgid "Russia: https://github.com/django/django-localflavor-ru"
msgstr ""

#: ../../ref/contrib/localflavor.txt:120
# 67068807d58c45eba510a33a5e7c8854
msgid "Slovakia: https://github.com/django/django-localflavor-sk"
msgstr ""

#: ../../ref/contrib/localflavor.txt:121
# 6a59211ebf054672beb84339c907330d
msgid "Slovenia: https://github.com/django/django-localflavor-si"
msgstr ""

#: ../../ref/contrib/localflavor.txt:122
# 441e4f3c96e346aeb9a5313ec72ac088
msgid "South Africa: https://github.com/django/django-localflavor-za"
msgstr ""

#: ../../ref/contrib/localflavor.txt:123
# 1fbabda2c0a84676962fc4e42086f048
msgid "Spain: https://github.com/django/django-localflavor-es"
msgstr ""

#: ../../ref/contrib/localflavor.txt:124
# 23cd09a9a66f44d889c0be13357bbef6
msgid "Sweden: https://github.com/django/django-localflavor-se"
msgstr ""

#: ../../ref/contrib/localflavor.txt:125
# 204b0f8dc9984d8db022d780bde37766
msgid "Switzerland: https://github.com/django/django-localflavor-ch"
msgstr ""

#: ../../ref/contrib/localflavor.txt:126
# 404d2e624ad04f02bc1ba00c7bd2d6e2
msgid "Turkey: https://github.com/django/django-localflavor-tr"
msgstr ""

#: ../../ref/contrib/localflavor.txt:127
# 851e42eb3d9f44b08a774b1813aa4a0e
msgid "United Kingdom: https://github.com/django/django-localflavor-gb"
msgstr ""

#: ../../ref/contrib/localflavor.txt:128
# 239198e640ce4339bf3ec8fb61ca86e5
msgid "United States of America: https://github.com/django/django-localflavor-us"
msgstr ""

#: ../../ref/contrib/localflavor.txt:129
# 7f175f8e92024363bd1f293bf4d00250
msgid "Uruguay: https://github.com/django/django-localflavor-uy"
msgstr ""

#: ../../ref/contrib/localflavor.txt:132
# 8dc1f88a06744d13a2bfa65f8c42bbc1
msgid "django.contrib.localflavor.generic"
msgstr ""

#: ../../ref/contrib/localflavor.txt:134
# 09e8ffa3a6d948398e96958bc8d92596
msgid "The ``django.contrib.localflavor.generic`` package, which hasn't been removed from Django yet, contains useful code that is not specific to one particular country or culture. Currently, it defines date, datetime and split datetime input fields based on those from :doc:`forms </topics/forms/index>`, but with non-US default formats. Here's an example of how to use them::"
msgstr ""

#: ../../ref/contrib/localflavor.txt:147
# 6b3e7b1f475a4b8ea80cd8f2addeb589
msgid "Internationalization of localflavors"
msgstr ""

#: ../../ref/contrib/localflavor.txt:149
# ba9572d8c264498c994741ea8db75d0f
msgid "To activate translations for a newly-created ``localflavor`` application, you must include the application's name (e.g. ``django_localflavor_jp``) in the :setting:`INSTALLED_APPS` setting, so the internationalization system can find the catalog, as explained in :ref:`how-django-discovers-translations`."
msgstr ""

#: ../../ref/contrib/localflavor.txt:154
# 45fb7ef9297a42f39b53fb4562290489
msgid "If you're still using the legacy ``localflavor`` application, you must include :mod:`django.contrib.localflavor` in :setting:`INSTALLED_APPS` (that will raise a ``DeprecationWarning``)."
msgstr ""

#: ../../ref/contrib/markup.txt:3
#: ../../ref/templates/builtins.txt:2332
# 402d148105534cd2aa97f4d3d15d01e0
# 3b683e68efd745ea96045bcedbf14724
msgid "django.contrib.markup"
msgstr ""

#: ../../ref/contrib/markup.txt:11
# df1874325dc34e79bd82beee62ad9a3e
msgid "Django provides template filters that implement the following markup languages:"
msgstr ""

#: ../../ref/contrib/markup.txt:14
# fa6ef8af86c5453883ac91f5c48a9a0d
msgid "``textile`` -- implements `Textile`_ -- requires `PyTextile`_"
msgstr ""

#: ../../ref/contrib/markup.txt:15
# 36c6ee7c15b44b5687d4faba0aee0d0c
msgid "``markdown`` -- implements `Markdown`_ -- requires `Python-markdown`_ (>=2.1)"
msgstr ""

#: ../../ref/contrib/markup.txt:16
# baccd67a6b0a408c8d5d49de2464b386
msgid "``restructuredtext`` -- implements `reST (reStructured Text)`_ -- requires `doc-utils`_"
msgstr ""

#: ../../ref/contrib/markup.txt:19
# 3ed82d40395b451d85ebbecfdee0c0e7
msgid "In each case, the filter expects formatted markup as a string and returns a string representing the marked-up text. For example, the ``textile`` filter converts text that is marked-up in Textile format to HTML."
msgstr ""

#: ../../ref/contrib/markup.txt:24
# 636440a6088e43b6ba13cbbd0688df0e
msgid "To activate these filters, add ``'django.contrib.markup'`` to your :setting:`INSTALLED_APPS` setting. Once you've done that, use ``{% load markup %}`` in a template, and you'll have access to these filters. For more documentation, read the source code in :file:`django/contrib/markup/templatetags/markup.py`."
msgstr ""

#: ../../ref/contrib/markup.txt:32
# 514b9f83d5014675b2ce7aab105b78ff
msgid "The output of markup filters is marked \"safe\" and will not be escaped when rendered in a template. Always be careful to sanitize your inputs and make sure you are not leaving yourself vulnerable to cross-site scripting or other types of attacks."
msgstr ""

#: ../../ref/contrib/markup.txt:45
# df7406fb9c5b490bbeb8c4013f401ed0
msgid "reStructured Text"
msgstr ""

#: ../../ref/contrib/markup.txt:47
# 09b7d83565104d939a1a7b0184aa14f2
msgid "When using the ``restructuredtext`` markup filter you can define a :setting:`RESTRUCTUREDTEXT_FILTER_SETTINGS` in your django settings to override the default writer settings. See the `restructuredtext writer settings`_ for details on what these settings are."
msgstr ""

#: ../../ref/contrib/markup.txt:54
# 2173e557362a48a098fdc4260b42a960
msgid "reStructured Text has features that allow raw HTML to be included, and that allow arbitrary files to be included. These can lead to XSS vulnerabilities and leaking of private information. It is your responsibility to check the features of this library and configure appropriately to avoid this. See the `Deploying Docutils Securely <http://docutils.sourceforge.net/docs/howto/security.html>`_ documentation."
msgstr ""

#: ../../ref/contrib/markup.txt:64
#: ../../ref/templates/builtins.txt:2337
# 91eff0791ecf49f88a2ef3bb4497b19c
# d0801f89a45e4b6296b992c2fe72ae5d
msgid "Markdown"
msgstr ""

#: ../../ref/contrib/markup.txt:66
# 94e38b82435b496b8cbe251c273abe7c
msgid "The Python Markdown library supports options named \"safe_mode\" and \"enable_attributes\". Both relate to the security of the output. To enable both options in tandem, the markdown filter supports the \"safe\" argument::"
msgstr ""

#: ../../ref/contrib/markup.txt:74
# 87e217acc75546bfbffdcccacf994800
msgid "Versions of the Python-Markdown library prior to 2.1 do not support the optional disabling of attributes. This is a security flaw. Therefore, ``django.contrib.markup`` has dropped support for versions of Python-Markdown < 2.1 in Django 1.5."
msgstr ""

#: ../../ref/contrib/messages.txt:3
# 9b4d511232e34ae6814cf78b3ea0b757
msgid "The messages framework"
msgstr ""

#: ../../ref/contrib/messages.txt:8
# 0297cd4be4d441d3bdf52ed232ae9bdc
msgid "Quite commonly in web applications, you need to display a one-time notification message (also known as \"flash message\") to the user after processing a form or some other types of user input."
msgstr ""

#: ../../ref/contrib/messages.txt:12
# 4f45897b52ce40d6a0788809df349948
msgid "For this, Django provides full support for cookie- and session-based messaging, for both anonymous and authenticated users. The messages framework allows you to temporarily store messages in one request and retrieve them for display in a subsequent request (usually the next one). Every message is tagged with a specific ``level`` that determines its priority (e.g., ``info``, ``warning``, or ``error``)."
msgstr ""

#: ../../ref/contrib/messages.txt:20
# c6505821484f4f6c8a2f5edb8b10b714
msgid "Enabling messages"
msgstr ""

#: ../../ref/contrib/messages.txt:22
# 3c82face4eba4ea7b67b7e77ff020c09
msgid "Messages are implemented through a :doc:`middleware </ref/middleware>` class and corresponding :doc:`context processor </ref/templates/api>`."
msgstr ""

#: ../../ref/contrib/messages.txt:25
# 77ca869db5fa4921a836f890b07aa775
msgid "The default ``settings.py`` created by ``django-admin.py startproject`` already contains all the settings required to enable message functionality:"
msgstr ""

#: ../../ref/contrib/messages.txt:28
# 461492fc1cd64e6e812fd92eb9effaa6
msgid "``'django.contrib.messages'`` is in :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../ref/contrib/messages.txt:30
# e723fc8799224433b64a78203d86f746
msgid ":setting:`MIDDLEWARE_CLASSES` contains ``'django.contrib.sessions.middleware.SessionMiddleware'`` and ``'django.contrib.messages.middleware.MessageMiddleware'``."
msgstr ""

#: ../../ref/contrib/messages.txt:34
# 2b00b067bb2d42b290d866877eb1f98b
msgid "The default :ref:`storage backend <message-storage-backends>` relies on :doc:`sessions </topics/http/sessions>`. That's why ``SessionMiddleware`` must be enabled and appear before ``MessageMiddleware`` in :setting:`MIDDLEWARE_CLASSES`."
msgstr ""

#: ../../ref/contrib/messages.txt:39
# 9d9f6bb6ed9a4ac89927418531592785
msgid ":setting:`TEMPLATE_CONTEXT_PROCESSORS`   contains ``'django.contrib.messages.context_processors.messages'``."
msgstr ""

#: ../../ref/contrib/messages.txt:42
# 3407eb3bc4fa4893adeafd787138373e
msgid "If you don't want to use messages, you can remove ``'django.contrib.messages'`` from your :setting:`INSTALLED_APPS`, the ``MessageMiddleware`` line from :setting:`MIDDLEWARE_CLASSES`, and the ``messages`` context processor from :setting:`TEMPLATE_CONTEXT_PROCESSORS`."
msgstr ""

#: ../../ref/contrib/messages.txt:48
# 17dc4c2f8aa947498187683076da7326
msgid "Configuring the message engine"
msgstr ""

#: ../../ref/contrib/messages.txt:53
# 5fc61489c55f4394a6e1876850e45712
msgid "Storage backends"
msgstr ""

#: ../../ref/contrib/messages.txt:55
# feb428c512324133893229ec0af6657b
msgid "The messages framework can use different backends to store temporary messages."
msgstr ""

#: ../../ref/contrib/messages.txt:57
# 0399c6d7cae54b98be76f62d9edbd883
msgid "Django provides three built-in storage classes:"
msgstr ""

#: ../../ref/contrib/messages.txt:61
# 104560643d0d42b39a47b904d2fa5928
msgid "This class stores all messages inside of the request's session. Therefore it requires Django's ``contrib.sessions`` application."
msgstr ""

#: ../../ref/contrib/messages.txt:66
# 08c1456b4b974e10a5ae67c98f4c8d41
msgid "This class stores the message data in a cookie (signed with a secret hash to prevent manipulation) to persist notifications across requests. Old messages are dropped if the cookie data size would exceed 2048 bytes."
msgstr ""

#: ../../ref/contrib/messages.txt:72
# 8658ca07f4864173aeea08f5e0dd7958
msgid "This class first uses ``CookieStorage``, and falls back to using ``SessionStorage`` for the messages that could not fit in a single cookie. It also requires Django's ``contrib.sessions`` application."
msgstr ""

#: ../../ref/contrib/messages.txt:76
# 88d774e0649c4a72b293184a1a89960d
msgid "This behavior avoids writing to the session whenever possible. It should provide the best performance in the general case."
msgstr ""

#: ../../ref/contrib/messages.txt:79
# fb607d8aa4ef43788ae9750704f931f6
msgid ":class:`~django.contrib.messages.storage.fallback.FallbackStorage` is the default storage class. If it isn't suitable to your needs, you can select another storage class by setting `MESSAGE_STORAGE`_ to its full import path, for example::"
msgstr ""

#: ../../ref/contrib/messages.txt:86
# e3efdd048bfa475aa75680c8e25414a2
msgid "To write your own storage class, subclass the ``BaseStorage`` class in ``django.contrib.messages.storage.base`` and implement the ``_get`` and ``_store`` methods."
msgstr ""

#: ../../ref/contrib/messages.txt:91
# d1e88eb5e94a4f579fe84ceebc4c714c
msgid "Message levels"
msgstr ""

#: ../../ref/contrib/messages.txt:93
# 4658d5d35cc94676a3339021b623c282
msgid "The messages framework is based on a configurable level architecture similar to that of the Python logging module. Message levels allow you to group messages by type so they can be filtered or displayed differently in views and templates."
msgstr ""

#: ../../ref/contrib/messages.txt:98
# 7ae075347b6a4556ab90b223ccce319c
msgid "The built-in levels, which can be imported from ``django.contrib.messages`` directly, are:"
msgstr ""

#: ../../ref/contrib/messages.txt:102
# ac3b84c16c1b40b4bea6b6defa3f43a1
msgid "Constant"
msgstr ""

#: ../../ref/contrib/messages.txt:102
# 962f852e27a44795a7f1f6c5c9093a41
msgid "Purpose"
msgstr ""

#: ../../ref/contrib/messages.txt:104
#: ../../ref/contrib/messages.txt:131
#: ../../ref/contrib/messages.txt:211
# 1699e5d3c1f74ac4a3aa4d5cb4db53c3
# 67f552d156be45d5b1d4296026e19919
# e9666a6d2aeb4ded9012814d07be4fff
msgid "``DEBUG``"
msgstr ""

#: ../../ref/contrib/messages.txt:104
# 545be5d95ed440a89e5191b4d8d84398
msgid "Development-related messages that will be ignored (or removed) in a production deployment"
msgstr ""

#: ../../ref/contrib/messages.txt:105
#: ../../ref/contrib/messages.txt:132
#: ../../ref/contrib/messages.txt:212
# dae78cbd4d364d53b3ef24e8202b5d3b
# e909a925ab00403d9fd74a579a2a8a6e
# 8d95abff51854a57a0f32e9b73435e32
msgid "``INFO``"
msgstr ""

#: ../../ref/contrib/messages.txt:105
# 9caa418262894326a4390d22080f118d
msgid "Informational messages for the user"
msgstr ""

#: ../../ref/contrib/messages.txt:106
#: ../../ref/contrib/messages.txt:133
#: ../../ref/contrib/messages.txt:213
# 02e5db979bea4a87b46d1a1015d3e552
# 938bb0d6515c489a824df7aebfd7b2c6
# 5298d00d6bf545a389951d3de4844ca1
msgid "``SUCCESS``"
msgstr ""

#: ../../ref/contrib/messages.txt:106
# 752790660451435290530eef18f94e21
msgid "An action was successful, e.g. \"Your profile was updated successfully\""
msgstr ""

#: ../../ref/contrib/messages.txt:107
#: ../../ref/contrib/messages.txt:134
#: ../../ref/contrib/messages.txt:214
# ecb32854845b44068b07469fb5e9b2e1
# f1e83604a9ba49e8a8506ab1e8fa2461
# 4cd80a0d20f846d19c7716252dbcda88
msgid "``WARNING``"
msgstr ""

#: ../../ref/contrib/messages.txt:107
# 1b219626a2364072a6cf0b975b958a8f
msgid "A failure did not occur but may be imminent"
msgstr ""

#: ../../ref/contrib/messages.txt:108
#: ../../ref/contrib/messages.txt:135
#: ../../ref/contrib/messages.txt:215
# 03ed0ef5c70446c6a6251466f9a295f1
# b957886a77c84c168956e714c9ca066b
# ff1d8ba1c8e74120ba90e8d97a6f13c1
msgid "``ERROR``"
msgstr ""

#: ../../ref/contrib/messages.txt:108
# 10ff53f66dd14926babfd1edc7a21195
msgid "An action was **not** successful or some other failure occurred"
msgstr ""

#: ../../ref/contrib/messages.txt:111
# 4a0cea58cc03487bbd23a7de7c3f0294
msgid "The `MESSAGE_LEVEL`_ setting can be used to change the minimum recorded level (or it can be `changed per request`_). Attempts to add messages of a level less than this will be ignored."
msgstr ""

#: ../../ref/contrib/messages.txt:118
# f5e7d22210874f9aa426c27d082fffd4
msgid "Message tags"
msgstr ""

#: ../../ref/contrib/messages.txt:120
# c97ca3e8f0f34c0bab2cc7c651365879
msgid "Message tags are a string representation of the message level plus any extra tags that were added directly in the view (see `Adding extra message tags`_ below for more details). Tags are stored in a string and are separated by spaces. Typically, message tags are used as CSS classes to customize message style based on message type. By default, each level has a single tag that's a lowercase version of its own constant:"
msgstr ""

#: ../../ref/contrib/messages.txt:129
#: ../../ref/contrib/messages.txt:209
# c821d8ba079b4a4ab2e2ad527bd91255
# 7740b63d68bc49fdbf1a90e07a4fa225
msgid "Level Constant"
msgstr ""

#: ../../ref/contrib/messages.txt:129
# 59408007fbe54b6db92ce95f90bf5c72
msgid "Tag"
msgstr ""

#: ../../ref/contrib/messages.txt:131
# b0251ad9028b43bcac8a8a866eac4c7b
msgid "``debug``"
msgstr ""

#: ../../ref/contrib/messages.txt:132
# 396ec99bed4c4c59b01df7ab0a6c6196
msgid "``info``"
msgstr ""

#: ../../ref/contrib/messages.txt:133
# 25d3060f04ec45369d2e45011b47cbd2
msgid "``success``"
msgstr ""

#: ../../ref/contrib/messages.txt:134
# 5d4dc6db40e3438494e4c6e251126702
msgid "``warning``"
msgstr ""

#: ../../ref/contrib/messages.txt:135
# fa02e6f0fbca4da990b75797d68cadf0
msgid "``error``"
msgstr ""

#: ../../ref/contrib/messages.txt:138
# 1337108189ac4da79b067da38b6d3ca0
msgid "To change the default tags for a message level (either built-in or custom), set the `MESSAGE_TAGS`_ setting to a dictionary containing the levels you wish to change. As this extends the default tags, you only need to provide tags for the levels you wish to override::"
msgstr ""

#: ../../ref/contrib/messages.txt:150
# 799ced2406ca4c518e6d4de64f4eeb8d
msgid "Using messages in views and templates"
msgstr ""

#: ../../ref/contrib/messages.txt:155
# d7602c68cab543128e9ffbfd48fe23d1
msgid "Adding a message"
msgstr ""

#: ../../ref/contrib/messages.txt:157
# 9a474dad625d4ceb9b5e9ab8b94ce193
msgid "To add a message, call::"
msgstr ""

#: ../../ref/contrib/messages.txt:162
# 0b2adaa3bfc64f4eb0311d5a20107acb
msgid "Some shortcut methods provide a standard way to add messages with commonly used tags (which are usually represented as HTML classes for the message)::"
msgstr ""

#: ../../ref/contrib/messages.txt:172
# a5eaf99faca24b239f97f1bf63a48c5a
msgid "Displaying messages"
msgstr ""

#: ../../ref/contrib/messages.txt:174
# f10e7141a884433fbc42a648e7bb496d
msgid "In your template, use something like::"
msgstr ""

#: ../../ref/contrib/messages.txt:184
# ee3ffeb794054ccca6260bf66d59f2d1
msgid "If you're using the context processor, your template should be rendered with a ``RequestContext``. Otherwise, ensure ``messages`` is available to the template context."
msgstr ""

#: ../../ref/contrib/messages.txt:188
# 373d528913194242a36df14fe8b25593
msgid "Even if you know there is only just one message, you should still iterate over the ``messages`` sequence, because otherwise the message storage will not be cleared for the next request."
msgstr ""

#: ../../ref/contrib/messages.txt:193
# cdb7d289ffb44e4ea336ae2ee1006477
msgid "Creating custom message levels"
msgstr ""

#: ../../ref/contrib/messages.txt:195
# 8172e70e8307468fa8afcb1db3a67936
msgid "Messages levels are nothing more than integers, so you can define your own level constants and use them to create more customized user feedback, e.g.::"
msgstr ""

#: ../../ref/contrib/messages.txt:203
# 1507ec16efcd45aa8b9b068cfb095941
msgid "When creating custom message levels you should be careful to avoid overloading existing levels. The values for the built-in levels are:"
msgstr ""

#: ../../ref/contrib/messages.txt:209
#: ../../ref/signals.txt:69
#: ../../ref/signals.txt:295
#: ../../ref/signals.txt:322
#: ../../ref/templates/builtins.txt:2271
# 05288e76772b4239b805db3959250b79
# 8c9a73e82ccf46bbaaaaac5ac52e7a87
# cd13aa4930e048c29a02886f7b29aae6
# 4319953a265e4ea09e1b4af998644573
# d5c1fb054c3a4b5caebceb459650e736
msgid "Value"
msgstr ""

#: ../../ref/contrib/messages.txt:211
# 42772de8c92847dca4cca413004e1650
msgid "10"
msgstr ""

#: ../../ref/contrib/messages.txt:212
# bd1a18b758a04ed4956604d60a6bfc6b
msgid "20"
msgstr ""

#: ../../ref/contrib/messages.txt:213
# 9539af831166405884819ec39eccc316
msgid "25"
msgstr ""

#: ../../ref/contrib/messages.txt:214
# 8e6881936a2f4c57aff7308e7be5d894
msgid "30"
msgstr ""

#: ../../ref/contrib/messages.txt:215
# a34d82caf192426aab399ed306680a7e
msgid "40"
msgstr ""

#: ../../ref/contrib/messages.txt:218
# fd2857e70c8544a08716c5f2ec9bc695
msgid "If you need to identify the custom levels in your HTML or CSS, you need to provide a mapping via the `MESSAGE_TAGS`_ setting."
msgstr ""

#: ../../ref/contrib/messages.txt:222
# 29aa8ce402b54028ac5837d50422fc88
msgid "If you are creating a reusable application, it is recommended to use only the built-in `message levels`_ and not rely on any custom levels."
msgstr ""

#: ../../ref/contrib/messages.txt:226
# 1a836bea8be248b4ab5854561dd0e6b6
msgid "Changing the minimum recorded level per-request"
msgstr ""

#: ../../ref/contrib/messages.txt:228
# 09bc487369cc4378ad18e92f81171c16
msgid "The minimum recorded level can be set per request via the ``set_level`` method::"
msgstr ""

#: ../../ref/contrib/messages.txt:245
# 3479cdc607794fd9951cfa8f6370e65d
msgid "Similarly, the current effective level can be retrieved with ``get_level``::"
msgstr ""

#: ../../ref/contrib/messages.txt:250
# c7f079c622f14d11be2a3b7f07a6bc0f
msgid "For more information on how the minimum recorded level functions, see `Message levels`_ above."
msgstr ""

#: ../../ref/contrib/messages.txt:254
# 3e72da2a701f4001b05bb3016def722e
msgid "Adding extra message tags"
msgstr ""

#: ../../ref/contrib/messages.txt:256
# ae0708fcb4b94731827a1efc9d795b90
msgid "For more direct control over message tags, you can optionally provide a string containing extra tags to any of the add methods::"
msgstr ""

#: ../../ref/contrib/messages.txt:263
# ba6975dba40c4e66ac88b9ce4a5ff9df
msgid "Extra tags are added before the default tag for that level and are space separated."
msgstr ""

#: ../../ref/contrib/messages.txt:267
# d8ed93dd13834b2c8afc93db7cf01f98
msgid "Failing silently when the message framework is disabled"
msgstr ""

#: ../../ref/contrib/messages.txt:269
# 04e87fee6318447ab6b74175db93345e
msgid "If you're writing a reusable app (or other piece of code) and want to include messaging functionality, but don't want to require your users to enable it if they don't want to, you may pass an additional keyword argument ``fail_silently=True`` to any of the ``add_message`` family of methods. For example::"
msgstr ""

#: ../../ref/contrib/messages.txt:280
# 0b092c5982bc47ae92ea9c819dd0eb42
msgid "Setting ``fail_silently=True`` only hides the ``MessageFailure`` that would otherwise occur when the messages framework disabled and one attempts to use one of the ``add_message`` family of methods. It does not hide failures that may occur for other reasons."
msgstr ""

#: ../../ref/contrib/messages.txt:286
# 48283cc2228a4bb6a0bf602bbbab77d8
msgid "Expiration of messages"
msgstr ""

#: ../../ref/contrib/messages.txt:288
# ab49210e70bb4938bc2f7d35a19a4eca
msgid "The messages are marked to be cleared when the storage instance is iterated (and cleared when the response is processed)."
msgstr ""

#: ../../ref/contrib/messages.txt:291
# 87e1c72fa7124f49a57035aeedc7200c
msgid "To avoid the messages being cleared, you can set the messages storage to ``False`` after iterating::"
msgstr ""

#: ../../ref/contrib/messages.txt:300
# 9d84b56ef5dc493fb7f7b5978c1b2144
msgid "Behavior of parallel requests"
msgstr ""

#: ../../ref/contrib/messages.txt:302
# b7e6c63a391c4cec8908052be542676a
msgid "Due to the way cookies (and hence sessions) work, **the behavior of any backends that make use of cookies or sessions is undefined when the same client makes multiple requests that set or get messages in parallel**. For example, if a client initiates a request that creates a message in one window (or tab) and then another that fetches any uniterated messages in another window, before the first window redirects, the message may appear in the second window instead of the first window where it may be expected."
msgstr ""

#: ../../ref/contrib/messages.txt:310
# 6545ed6b92704f7580aa49ddce60379a
msgid "In short, when multiple simultaneous requests from the same client are involved, messages are not guaranteed to be delivered to the same window that created them nor, in some cases, at all. Note that this is typically not a problem in most applications and will become a non-issue in HTML5, where each window/tab will have its own browsing context."
msgstr ""

#: ../../ref/contrib/messages.txt:319
# ab78d06a1dbe445181e5abd1b01ebf33
msgid "A few :doc:`Django settings </ref/settings>` give you control over message behavior:"
msgstr ""

#: ../../ref/contrib/messages.txt:323
#: ../../ref/settings.txt:1421
# 4ccd963247074b31aa36ee07dc2b87ea
# 87214c291d434fb190f008ab38ed5f2f
msgid "MESSAGE_LEVEL"
msgstr ""

#: ../../ref/contrib/messages.txt:325
#: ../../ref/settings.txt:1423
# 93367c684a2a49a1bb06af843a9351f4
# bd5764f6d0be4392ab1c0ae94541c6ce
msgid "Default: ``messages.INFO``"
msgstr ""

#: ../../ref/contrib/messages.txt:327
# 326675d2359143a9bf45f605d0e326e8
msgid "This sets the minimum message that will be saved in the message storage. See `Message levels`_ above for more details."
msgstr ""

#: ../../ref/contrib/messages.txt:332
# cc549ff6140c4590932e2a9c8a98d854
msgid "If you override ``MESSAGE_LEVEL`` in your settings file and rely on any of the built-in constants, you must import the constants module directly to avoid the potential for circular imports, e.g.::"
msgstr ""

#: ../../ref/contrib/messages.txt:339
#: ../../ref/contrib/messages.txt:381
# 1bffe696254f4398a347f2437e86ef8a
# 2356472b02904aaeaa0eef9df2a437b3
msgid "If desired, you may specify the numeric values for the constants directly according to the values in the above :ref:`constants table <message-level-constants>`."
msgstr ""

#: ../../ref/contrib/messages.txt:344
#: ../../ref/settings.txt:1430
# 7a8a848d0de8498a99f5c0f87793b3f0
# 496b148745ba4494890f0515d3af5e77
msgid "MESSAGE_STORAGE"
msgstr ""

#: ../../ref/contrib/messages.txt:346
#: ../../ref/settings.txt:1432
# 80156c51208d47cba5bf212f870f2ec1
# aed0dc6fc13f406592d16e6d7aba7353
msgid "Default: ``'django.contrib.messages.storage.fallback.FallbackStorage'``"
msgstr ""

#: ../../ref/contrib/messages.txt:348
# a6f9525e6b154bdfa215a0c68518854b
msgid "Controls where Django stores message data. Valid values are:"
msgstr ""

#: ../../ref/contrib/messages.txt:350
# 6485599664844b37a9d4b3af8adbb4b4
msgid "``'django.contrib.messages.storage.fallback.FallbackStorage'``"
msgstr ""

#: ../../ref/contrib/messages.txt:351
# 7bdfffb895154756b5fdd2170969b485
msgid "``'django.contrib.messages.storage.session.SessionStorage'``"
msgstr ""

#: ../../ref/contrib/messages.txt:352
# d11fdd42eaf44df48c49acbd0cc60adc
msgid "``'django.contrib.messages.storage.cookie.CookieStorage'``"
msgstr ""

#: ../../ref/contrib/messages.txt:354
# fdfac07ff0a8460699130ad48829e0ba
msgid "See `Storage backends`_ for more details."
msgstr ""

#: ../../ref/contrib/messages.txt:357
#: ../../ref/settings.txt:1438
# 2ef1ed7140ab4565bb44d6d6350d0364
# 23fb5db5489f4ed4a017b12257cd26f4
msgid "MESSAGE_TAGS"
msgstr ""

#: ../../ref/contrib/messages.txt:367
# d89be376e28c466199cc701598c136d9
msgid "This sets the mapping of message level to message tag, which is typically rendered as a CSS class in HTML. If you specify a value, it will extend the default. This means you only have to specify those values which you need to override. See `Displaying messages`_ above for more details."
msgstr ""

#: ../../ref/contrib/messages.txt:374
# c1a8e32ce03d462b89af2c77f1854f88
msgid "If you override ``MESSAGE_TAGS`` in your settings file and rely on any of the built-in constants, you must import the ``constants`` module directly to avoid the potential for circular imports, e.g.::"
msgstr ""

#: ../../ref/contrib/messages.txt:386
#: ../../ref/settings.txt:1718
# 5d3127f2b63f4d74bb00c3678cc49a09
# 200d3f4f3b9d465ca34ab42b865e5ad3
msgid "SESSION_COOKIE_DOMAIN"
msgstr ""

#: ../../ref/contrib/messages.txt:390
# 22ea751caf314433bdbbacd4479fed89
msgid "The storage backends that use cookies -- ``CookieStorage`` and ``FallbackStorage`` -- use the value of :setting:`SESSION_COOKIE_DOMAIN` in setting their cookies. See the :doc:`settings documentation </ref/settings>` for more information on how this works and why you might need to set it."
msgstr ""

#: ../../ref/contrib/redirects.txt:3
# 051e6bc294bc4c9e8dbb0c6212b9f3af
msgid "The redirects app"
msgstr ""

#: ../../ref/contrib/redirects.txt:8
# e316f2f32ab64d83bca55be336eee5ee
msgid "Django comes with an optional redirects application. It lets you store simple redirects in a database and handles the redirecting for you."
msgstr ""

#: ../../ref/contrib/redirects.txt:14
# 1edf952a6a40442cb2db06ec1c155464
msgid "To install the redirects app, follow these steps:"
msgstr ""

#: ../../ref/contrib/redirects.txt:16
# d19d22b2e54742f9916097a2158fc910
msgid "Ensure that the ``django.contrib.sites`` framework :ref:`is installed <enabling-the-sites-framework>`."
msgstr ""

#: ../../ref/contrib/redirects.txt:18
# de3dd261f4d249e78b63e39296f95402
msgid "Add ``'django.contrib.redirects'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../ref/contrib/redirects.txt:19
# 4659658322c5403db10efdcfba2ed73b
msgid "Add ``'django.contrib.redirects.middleware.RedirectFallbackMiddleware'`` to your :setting:`MIDDLEWARE_CLASSES` setting."
msgstr ""

#: ../../ref/contrib/redirects.txt:26
# 9401aebeea96455f92f72e401dd10ff4
msgid "``manage.py syncdb`` creates a ``django_redirect`` table in your database. This is a simple lookup table with ``site_id``, ``old_path`` and ``new_path`` fields."
msgstr ""

#: ../../ref/contrib/redirects.txt:29
# 27f6ef0d290f4991bdc3997d24f52017
msgid "The ``RedirectFallbackMiddleware`` does all of the work. Each time any Django application raises a 404 error, this middleware checks the redirects database for the requested URL as a last resort. Specifically, it checks for a redirect with the given ``old_path`` with a site ID that corresponds to the :setting:`SITE_ID` setting."
msgstr ""

#: ../../ref/contrib/redirects.txt:35
# 9f4a4e92ee1a4c1bbec781d1c5b688f1
msgid "If it finds a match, and ``new_path`` is not empty, it redirects to ``new_path``."
msgstr ""

#: ../../ref/contrib/redirects.txt:37
# cf029790adde499d823e3629e544110a
msgid "If it finds a match, and ``new_path`` is empty, it sends a 410 (\"Gone\") HTTP header and empty (content-less) response."
msgstr ""

#: ../../ref/contrib/redirects.txt:45
# 43b40cf42c8f4d6e9bc79044c569d110
msgid "Note that the order of :setting:`MIDDLEWARE_CLASSES` matters. Generally, you can put ``RedirectFallbackMiddleware`` at the end of the list, because it's a last resort."
msgstr ""

#: ../../ref/contrib/redirects.txt:53
# 62cb83c3c24b44818f0d83b5878db1b4
msgid "How to add, change and delete redirects"
msgstr ""

#: ../../ref/contrib/redirects.txt:58
# 4c8db0e91aca47059ec6a35b53af1403
msgid "If you've activated the automatic Django admin interface, you should see a \"Redirects\" section on the admin index page. Edit redirects as you edit any other object in the system."
msgstr ""

#: ../../ref/contrib/redirects.txt:67
# 9d3280962b5d4704b0b8c7683d3cafa0
msgid "Redirects are represented by a standard :doc:`Django model </topics/db/models>`, which lives in `django/contrib/redirects/models.py`_. You can access redirect objects via the :doc:`Django database API </topics/db/queries>`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:3
# 320cc5f6c1f947128912962ef9d44b5e
msgid "The sitemap framework"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:8
# 4d670e3ecf844b089e54e4e8637af83d
msgid "Django comes with a high-level sitemap-generating framework that makes creating sitemap_ XML files easy."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:16
# 53326413de6a4f70a61499ecec2a0c98
msgid "A sitemap is an XML file on your Web site that tells search-engine indexers how frequently your pages change and how \"important\" certain pages are in relation to other pages on your site. This information helps search engines index your site."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:21
# 50dc9188c7ec476a97b14ccaffaa310c
msgid "The Django sitemap framework automates the creation of this XML file by letting you express this information in Python code."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:24
# efbf7adc7bb846988dabac9e78700302
msgid "It works much like Django's :doc:`syndication framework </ref/contrib/syndication>`. To create a sitemap, just write a :class:`~django.contrib.sitemaps.Sitemap` class and point to it in your :doc:`URLconf </topics/http/urls>`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:32
# cbc9f9c32ac04343bd1ec2b921462931
msgid "To install the sitemap app, follow these steps:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:34
# fda6aacab28946afa6648cd180475e5b
msgid "Add ``'django.contrib.sitemaps'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:37
# 3519f5705144495ba4ebdbf0eed6205a
msgid "Make sure ``'django.template.loaders.app_directories.Loader'`` is in your :setting:`TEMPLATE_LOADERS` setting. It's in there by default, so you'll only need to change this if you've changed that setting."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:41
# 3a296f4a48874f96b59028bbcd02c5f5
msgid "Make sure you've installed the :mod:`sites framework <django.contrib.sites>`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:44
# 4cba12d89da041c3a86550a348990bd5
msgid "(Note: The sitemap application doesn't install any database tables. The only reason it needs to go into :setting:`INSTALLED_APPS` is so that the :func:`~django.template.loaders.app_directories.Loader` template loader can find the default templates.)"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:50
# f98cd85739054f0f8b04e1de923e3802
msgid "Initialization"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:54
# 65c4ca9e544e4644b99e72dccb32c40a
msgid "To activate sitemap generation on your Django site, add this line to your :doc:`URLconf </topics/http/urls>`::"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:59
# f5a108b671564d71a1c29b4870038d11
msgid "This tells Django to build a sitemap when a client accesses :file:`/sitemap.xml`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:61
# 6adb4b9cc94840c486f0fb1f3f0aad8e
msgid "The name of the sitemap file is not important, but the location is. Search engines will only index links in your sitemap for the current URL level and below. For instance, if :file:`sitemap.xml` lives in your root directory, it may reference any URL in your site. However, if your sitemap lives at :file:`/content/sitemap.xml`, it may only reference URLs that begin with :file:`/content/`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:68
# dc5def1b50b44b088d64e964ea759bb2
msgid "The sitemap view takes an extra, required argument: ``{'sitemaps': sitemaps}``. ``sitemaps`` should be a dictionary that maps a short section label (e.g., ``blog`` or ``news``) to its :class:`~django.contrib.sitemaps.Sitemap` class (e.g., ``BlogSitemap`` or ``NewsSitemap``). It may also map to an *instance* of a :class:`~django.contrib.sitemaps.Sitemap` class (e.g., ``BlogSitemap(some_var)``)."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:76
# 5425eff341c94d8f8530d986c9c8ce57
msgid "Sitemap classes"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:78
# a313a081d0f84ea1a006c59a613bb87b
msgid "A :class:`~django.contrib.sitemaps.Sitemap` class is a simple Python class that represents a \"section\" of entries in your sitemap. For example, one :class:`~django.contrib.sitemaps.Sitemap` class could represent all the entries of your Weblog, while another could represent all of the events in your events calendar."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:84
# 5b324db93c174b3795da2b017655db74
msgid "In the simplest case, all these sections get lumped together into one :file:`sitemap.xml`, but it's also possible to use the framework to generate a sitemap index that references individual sitemap files, one per section. (See `Creating a sitemap index`_ below.)"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:89
# e1f9e5e0333f42988b48db9cb6a0b327
msgid ":class:`~django.contrib.sitemaps.Sitemap` classes must subclass ``django.contrib.sitemaps.Sitemap``. They can live anywhere in your codebase."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:93
#: ../../ref/contrib/syndication.txt:50
# 1f343763a29c45df8c0e3f62255ceca9
# fa147ef1fa7e446184eec66c3b5c3382
msgid "A simple example"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:95
# 91f2b0857b9145b8bdd2a220f621525d
msgid "Let's assume you have a blog system, with an ``Entry`` model, and you want your sitemap to include all the links to your individual blog entries. Here's how your sitemap class might look::"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:112
#: ../../ref/contrib/syndication.txt:89
# 118ed36af6a84894b3265bbb2f0a7a94
# 9adcfe09e66246e1b0b11baff820551c
msgid "Note:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:114
# cc1b52282c564565bf5503dea9061879
msgid ":attr:`~Sitemap.changefreq` and :attr:`~Sitemap.priority` are class attributes corresponding to ``<changefreq>`` and ``<priority>`` elements, respectively. They can be made callable as functions, as :attr:`~Sitemap.lastmod` was in the example."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:118
# 72a2707035db42fc810b6043766d9d2d
msgid ":attr:`~Sitemap.items()` is simply a method that returns a list of objects. The objects returned will get passed to any callable methods corresponding to a sitemap property (:attr:`~Sitemap.location`, :attr:`~Sitemap.lastmod`, :attr:`~Sitemap.changefreq`, and :attr:`~Sitemap.priority`)."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:123
# dc5b1f0afba84b519e04faf7c187e3b1
msgid ":attr:`~Sitemap.lastmod` should return a Python ``datetime`` object."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:124
# 5576e7fcd0df4fa893212f78e12361b4
msgid "There is no :attr:`~Sitemap.location` method in this example, but you can provide it in order to specify the URL for your object. By default, :attr:`~Sitemap.location()` calls ``get_absolute_url()`` on each object and returns the result."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:130
# 304f010abe4b4338960a0746a785df9b
msgid "Sitemap class reference"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:134
# f420fc105a784440b7e3b5649753488e
msgid "A ``Sitemap`` class can define the following methods/attributes:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:138
# 2a7bc5e495124362b1cd474376b47dde
msgid "**Required.** A method that returns a list of objects. The framework doesn't care what *type* of objects they are; all that matters is that these objects get passed to the :attr:`~Sitemap.location()`, :attr:`~Sitemap.lastmod()`, :attr:`~Sitemap.changefreq()` and :attr:`~Sitemap.priority()` methods."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:146
#: ../../ref/contrib/sitemaps.txt:171
#: ../../ref/contrib/sitemaps.txt:183
#: ../../ref/contrib/sitemaps.txt:203
# 35f22eea21c84a10858d7ae627843ee0
# 2ba41892060a4602804ed601d50d2d28
# bc434a6dd50a4fc4bd6256e83d17ab9e
# 2f1501a14f564a268ac57d3ffdccfd38
msgid "**Optional.** Either a method or attribute."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:148
# a16229a28e154fa5aa31214e7f2d96fa
msgid "If it's a method, it should return the absolute path for a given object as returned by :attr:`~Sitemap.items()`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:151
# c15131f6d253487e8957681412c78577
msgid "If it's an attribute, its value should be a string representing an absolute path to use for *every* object returned by :attr:`~Sitemap.items()`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:155
# 6d2e8ec60a74467bb7406c04e0721632
msgid "In both cases, \"absolute path\" means a URL that doesn't include the protocol or domain. Examples:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:158
# 530e5a7309d44b3cbc83e736e5e00725
msgid "Good: :file:`'/foo/bar/'`"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:159
# c684e6e0dab248a6854363c25ae36a8d
msgid "Bad: :file:`'example.com/foo/bar/'`"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:160
# 7cadff601cec439caa2e6fd9ddebb2a6
msgid "Bad: :file:`'http://example.com/foo/bar/'`"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:162
# e256bbcc9b6144cebde7ee618cdf5a9a
msgid "If :attr:`~Sitemap.location` isn't provided, the framework will call the ``get_absolute_url()`` method on each object as returned by :attr:`~Sitemap.items()`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:166
# b71a7f3dcd0d4a0f8336b6971e46cf08
msgid "To specify a protocol other than ``'http'``, use :attr:`~Sitemap.protocol`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:173
# bb970067f35c4d41915922f9935bf91f
msgid "If it's a method, it should take one argument -- an object as returned by :attr:`~Sitemap.items()` -- and return that object's last-modified date/time, as a Python ``datetime.datetime`` object."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:177
# 9d19391e62aa489d802dc2f9b4a13822
msgid "If it's an attribute, its value should be a Python ``datetime.datetime`` object representing the last-modified date/time for *every* object returned by :attr:`~Sitemap.items()`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:185
# c31132fddba4424f8514532461c74abc
msgid "If it's a method, it should take one argument -- an object as returned by :attr:`~Sitemap.items()` -- and return that object's change frequency, as a Python string."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:188
# 39726c791c1148b2bda9af9f491e800f
msgid "If it's an attribute, its value should be a string representing the change frequency of *every* object returned by :attr:`~Sitemap.items()`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:191
# ba24bb0d67724aa984bcc867e4b631bb
msgid "Possible values for :attr:`~Sitemap.changefreq`, whether you use a method or attribute, are:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:193
# 780d411b9cb541d28d5346b974c28d49
msgid "``'always'``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:194
# 935e0c80b07e41de9c4dfd21be13af32
msgid "``'hourly'``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:195
# 4dc5052eca0547f98aec416fd205e812
msgid "``'daily'``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:196
# 621c510d9e834d3487b684823db63238
msgid "``'weekly'``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:197
# 86df3b9fca2b4fdc8f042aa956ae931f
msgid "``'monthly'``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:198
# 49a15fb4fb83433ea2f00d0956efdd4a
msgid "``'yearly'``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:199
# 2b500f368d1d422b851105d74b14144b
msgid "``'never'``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:205
# f909606dc7e3448499e7195d0bb5bede
msgid "If it's a method, it should take one argument -- an object as returned by :attr:`~Sitemap.items()` -- and return that object's priority, as either a string or float."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:208
# 1d29b53a10934842bb7179f1b0f23f2d
msgid "If it's an attribute, its value should be either a string or float representing the priority of *every* object returned by :attr:`~Sitemap.items()`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:211
# 4c9d34d7b2904673ba805fd17ac2ccc7
msgid "Example values for :attr:`~Sitemap.priority`: ``0.4``, ``1.0``. The default priority of a page is ``0.5``. See the `sitemaps.org documentation`_ for more."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:220
# 0f8f84c5b5da4493b249e60763a57fe2
msgid "**Optional.**"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:222
# b47175afd7b04b59a471d63f97c41175
msgid "This attribute defines the protocol (``'http'`` or ``'https'``) of the URLs in the sitemap. If it isn't set, the protocol with which the sitemap was requested is used. If the sitemap is built outside the context of a request, the default is ``'http'``."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:229
# c9cffafa99124255a3f23e548eef7d66
msgid "Shortcuts"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:231
# fa358ea5a3f94fb182d9d30db26c74cb
msgid "The sitemap framework provides a couple convenience classes for common cases:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:235
# 37d17dcb677f469da73a6b84cb27ca66
msgid "The :class:`django.contrib.sitemaps.FlatPageSitemap` class looks at all publicly visible :mod:`flatpages <django.contrib.flatpages>` defined for the current :setting:`SITE_ID` (see the :mod:`sites documentation <django.contrib.sites>`) and creates an entry in the sitemap. These entries include only the :attr:`~Sitemap.location` attribute -- not :attr:`~Sitemap.lastmod`, :attr:`~Sitemap.changefreq` or :attr:`~Sitemap.priority`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:245
# 65a53bc2d0194234966c5fbb9ef3323b
msgid "The :class:`django.contrib.sitemaps.GenericSitemap` class allows you to create a sitemap by passing it a dictionary which has to contain at least a ``queryset`` entry. This queryset will be used to generate the items of the sitemap. It may also have a ``date_field`` entry that specifies a date field for objects retrieved from the ``queryset``. This will be used for the :attr:`~Sitemap.lastmod` attribute in the generated sitemap. You may also pass :attr:`~Sitemap.priority` and :attr:`~Sitemap.changefreq` keyword arguments to the :class:`~django.contrib.sitemaps.GenericSitemap`  constructor to specify these attributes for all URLs."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:259
# 8af7320f28204714ab5d8e14ff0bb3e3
msgid "Here's an example of a :doc:`URLconf </topics/http/urls>` using both::"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:286
# d69c26a402834738ab8b0225445f1c84
msgid "Creating a sitemap index"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:290
# addf4b7ee11442569f8a6ae26e2df016
msgid "The sitemap framework also has the ability to create a sitemap index that references individual sitemap files, one per each section defined in your ``sitemaps`` dictionary. The only differences in usage are:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:294
# df8286a11cbf4cfda42b12a24fea83d9
msgid "You use two views in your URLconf: :func:`django.contrib.sitemaps.views.index` and :func:`django.contrib.sitemaps.views.sitemap`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:296
# 3c063475c3194dba841a4b69806d040c
msgid "The :func:`django.contrib.sitemaps.views.sitemap` view should take a ``section`` keyword argument."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:299
# 27538890ed674552a7172bc006ce5f66
msgid "Here's what the relevant URLconf lines would look like for the example above::"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:306
# 1369d0f4a615493a8a2acd7b53044794
msgid "This will automatically generate a :file:`sitemap.xml` file that references both :file:`sitemap-flatpages.xml` and :file:`sitemap-blog.xml`. The :class:`~django.contrib.sitemaps.Sitemap` classes and the ``sitemaps`` dict don't change at all."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:311
# 7080babafbb943669e053df51dc971e5
msgid "You should create an index file if one of your sitemaps has more than 50,000 URLs. In this case, Django will automatically paginate the sitemap, and the index will reflect that."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:317
# e5b6e53d31ec44119acf2cd5da1acc85
msgid "If you're not using the vanilla sitemap view -- for example, if it's wrapped with a caching decorator -- you must name your sitemap view and pass ``sitemap_url_name`` to the index view::"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:335
# 66f532987fea4606a003a9c96b533b2d
msgid "Template customization"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:337
# a15a4e03c52a4b249a41995026a932b7
msgid "If you wish to use a different template for each sitemap or sitemap index available on your site, you may specify it by passing a ``template_name`` parameter to the ``sitemap`` and ``index`` views via the URLconf::"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:361
# 5269d5f4016f4d55aa7f2f9d953394a3
msgid "Context variables"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:363
# 9087c60fc3c9415493805c79de890c32
msgid "When customizing the templates for the :func:`~django.contrib.sitemaps.views.index` and :func:`~django.contrib.sitemaps.views.sitemap` views, you can rely on the following context variables."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:371
# c0f0906657804e5db2030e85745855c1
msgid "The variable ``sitemaps`` is a list of absolute URLs to each of the sitemaps."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:374
# 9a071ba6619d467b98d62775805a6039
msgid "Sitemap"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:376
# d942dabcf4a54ee5bc15a35c228c30a4
msgid "The variable ``urlset`` is a list of URLs that should appear in the sitemap. Each URL exposes attributes as defined in the :class:`~django.contrib.sitemaps.Sitemap` class:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:380
# 58360612c87d4a8388d34f9ffd75eaf3
msgid "``changefreq``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:381
# 8376cf8313ea455fbc34a2ab0ecbfc9a
msgid "``item``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:382
# d4fa8a3d70364cfdbd524b7a302afadf
msgid "``lastmod``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:383
# 581891a7c9074e3b8e5e59115962eec2
msgid "``location``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:384
# d66c9a076f334d369c018512c51119b4
msgid "``priority``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:388
# 586c90edcd0c41e2ac0ea006c4808b9e
msgid "The ``item`` attribute has been added for each URL to allow more flexible customization of the templates, such as `Google news sitemaps`_. Assuming Sitemap's :attr:`~Sitemap.items()` would return a list of items with ``publication_data`` and a ``tags`` field something like this would generate a Google News compatible sitemap:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:419
# 7ddce533df1f422bbe9909a582e9b83c
msgid "Pinging Google"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:421
# 1e2dec3642744b7e9faed260fcd4a443
msgid "You may want to \"ping\" Google when your sitemap changes, to let it know to reindex your site. The sitemaps framework provides a function to do just that: :func:`django.contrib.sitemaps.ping_google()`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:427
# 1aa14428d71b49d6a8ab6c00110008c3
msgid ":func:`ping_google` takes an optional argument, ``sitemap_url``, which should be the absolute path to your site's sitemap (e.g., :file:`'/sitemap.xml'`). If this argument isn't provided, :func:`ping_google` will attempt to figure out your sitemap by performing a reverse looking in your URLconf."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:433
# 8ca19b29244c4649bae66bc884c7e37e
msgid ":func:`ping_google` raises the exception ``django.contrib.sitemaps.SitemapNotFound`` if it cannot determine your sitemap URL."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:439
# 8acae4b6944d4717aa9bd67bd2af0dfc
msgid "The :func:`ping_google` command only works if you have registered your site with `Google Webmaster Tools`_."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:444
# e1017e445bd347dabd4d51849e5914fb
msgid "One useful way to call :func:`ping_google` is from a model's ``save()`` method::"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:460
# 50e1b42d7204445baf72ff799b129e83
msgid "A more efficient solution, however, would be to call :func:`ping_google` from a cron script, or some other scheduled task. The function makes an HTTP request to Google's servers, so you may not want to introduce that network overhead each time you call ``save()``."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:466
# d2cecc74e0ff4f17b9826be241128a79
msgid "Pinging Google via ``manage.py``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:470
# 3d2c722888214c46b8493a14120ab9e5
msgid "Once the sitemaps application is added to your project, you may also ping Google using the ``ping_google`` management command::"
msgstr ""

#: ../../ref/contrib/sites.txt:3
# 4e488cb37f96444b80e9692497f9dec3
msgid "The \"sites\" framework"
msgstr ""

#: ../../ref/contrib/sites.txt:11
# 3fbdb72ab774448180320a5f0ce197ce
msgid "Django comes with an optional \"sites\" framework. It's a hook for associating objects and functionality to particular Web sites, and it's a holding place for the domain names and \"verbose\" names of your Django-powered sites."
msgstr ""

#: ../../ref/contrib/sites.txt:15
# c284d682c609492fb268ff8447f5d373
msgid "Use it if your single Django installation powers more than one site and you need to differentiate between those sites in some way."
msgstr ""

#: ../../ref/contrib/sites.txt:18
# b20485bdee3d4b4eb4137debb6df95fc
msgid "The whole sites framework is based on a simple model:"
msgstr ""

#: ../../ref/contrib/sites.txt:22
# c7776f89d3f64030843714862c1edc2d
msgid "A model for storing the ``domain`` and ``name`` attributes of a Web site. The :setting:`SITE_ID` setting specifies the database ID of the :class:`~django.contrib.sites.models.Site` object associated with that particular settings file."
msgstr ""

#: ../../ref/contrib/sites.txt:29
# f0f10912be2c4e8ab300ae6a630a185e
msgid "The domain name associated with the Web site."
msgstr ""

#: ../../ref/contrib/sites.txt:33
# 3ce2c217289b40b78ef0dd46e101b089
msgid "A human-readable \"verbose\" name for the Web site."
msgstr ""

#: ../../ref/contrib/sites.txt:36
# c83722d1a3f5469bb527bf4226be36c3
msgid "How you use this is up to you, but Django uses it in a couple of ways automatically via simple conventions."
msgstr ""

#: ../../ref/contrib/sites.txt:40
# 04a608f1418043fe961aa1ae6465fc18
msgid "Example usage"
msgstr ""

#: ../../ref/contrib/sites.txt:42
# 67db62b6ae3449fe94dcbdba0d67dd4f
msgid "Why would you use sites? It's best explained through examples."
msgstr ""

#: ../../ref/contrib/sites.txt:45
# 18384a1afb1547b586524a232d210ed3
msgid "Associating content with multiple sites"
msgstr ""

#: ../../ref/contrib/sites.txt:47
# 414605a1e2c74c92b2b36486d73a15cc
msgid "The Django-powered sites LJWorld.com_ and Lawrence.com_ are operated by the same news organization -- the Lawrence Journal-World newspaper in Lawrence, Kansas. LJWorld.com focuses on news, while Lawrence.com focuses on local entertainment. But sometimes editors want to publish an article on *both* sites."
msgstr ""

#: ../../ref/contrib/sites.txt:53
# cae6ba4f0d9143ff87160a6622e01a6e
msgid "The brain-dead way of solving the problem would be to require site producers to publish the same story twice: once for LJWorld.com and again for Lawrence.com. But that's inefficient for site producers, and it's redundant to store multiple copies of the same story in the database."
msgstr ""

#: ../../ref/contrib/sites.txt:58
# a8ffdcb58d634b40a618e972d0bf1994
msgid "The better solution is simple: Both sites use the same article database, and an article is associated with one or more sites. In Django model terminology, that's represented by a :class:`~django.db.models.ManyToManyField` in the ``Article`` model::"
msgstr ""

#: ../../ref/contrib/sites.txt:71
# 457182fe696a4a6c9ef41dd8d2da3a0c
msgid "This accomplishes several things quite nicely:"
msgstr ""

#: ../../ref/contrib/sites.txt:73
# 48872711928c448dbc5c5e66fe4a7c90
msgid "It lets the site producers edit all content -- on both sites -- in a single interface (the Django admin)."
msgstr ""

#: ../../ref/contrib/sites.txt:76
# 76a23a918ee84f6fa68fc18ed6bd6303
msgid "It means the same story doesn't have to be published twice in the database; it only has a single record in the database."
msgstr ""

#: ../../ref/contrib/sites.txt:79
# 9edf08c946a44d10a0b90a39d80d80ec
msgid "It lets the site developers use the same Django view code for both sites. The view code that displays a given story just checks to make sure the requested story is on the current site. It looks something like this::"
msgstr ""

#: ../../ref/contrib/sites.txt:96
# 0dc50a0b15134fac825026ea9b763a3d
msgid "Associating content with a single site"
msgstr ""

#: ../../ref/contrib/sites.txt:98
# 2d659691f00949f7921d9b0e30bb8bae
msgid "Similarly, you can associate a model to the :class:`~django.contrib.sites.models.Site` model in a many-to-one relationship, using :class:`~django.db.models.ForeignKey`."
msgstr ""

#: ../../ref/contrib/sites.txt:103
# 15093a45326f4835be4c778e995bedc9
msgid "For example, if an article is only allowed on a single site, you'd use a model like this::"
msgstr ""

#: ../../ref/contrib/sites.txt:114
# c080dc2102a9497fa8a1cbafb17caea5
msgid "This has the same benefits as described in the last section."
msgstr ""

#: ../../ref/contrib/sites.txt:119
# cdc6a0c1630249e8a668ef09a530a196
msgid "Hooking into the current site from views"
msgstr ""

#: ../../ref/contrib/sites.txt:121
# e7b897530e204e60b3abac656bd89782
msgid "You can use the sites framework in your Django views to do particular things based on the site in which the view is being called. For example::"
msgstr ""

#: ../../ref/contrib/sites.txt:135
# d71c08f0bce54afebfea56fc018a785f
msgid "Of course, it's ugly to hard-code the site IDs like that. This sort of hard-coding is best for hackish fixes that you need done quickly. The cleaner way of accomplishing the same thing is to check the current site's domain::"
msgstr ""

#: ../../ref/contrib/sites.txt:151
# 2e8e7405a3084ec887b216bcb78fa0cf
msgid "This has also the advantage of checking if the sites framework is installed, and return a :class:`RequestSite` instance if it is not."
msgstr ""

#: ../../ref/contrib/sites.txt:154
# a5c70e0d5aef44fabd8a9a841759a9e1
msgid "If you don't have access to the request object, you can use the ``get_current()`` method of the :class:`~django.contrib.sites.models.Site` model's manager. You should then ensure that your settings file does contain the :setting:`SITE_ID` setting. This example is equivalent to the previous one::"
msgstr ""

#: ../../ref/contrib/sites.txt:171
# 5ef487798c4742daa602c0b6fbf5da04
msgid "Getting the current domain for display"
msgstr ""

#: ../../ref/contrib/sites.txt:173
# 793c677ab1f54111914b5fb79855c0ff
msgid "LJWorld.com and Lawrence.com both have email alert functionality, which lets readers sign up to get notifications when news happens. It's pretty basic: A reader signs up on a Web form, and he immediately gets an email saying, \"Thanks for your subscription.\""
msgstr ""

#: ../../ref/contrib/sites.txt:178
# 290e088c24914a21abcbfd45c3ae37c9
msgid "It'd be inefficient and redundant to implement this signup-processing code twice, so the sites use the same code behind the scenes. But the \"thank you for signing up\" notice needs to be different for each site. By using :class:`~django.contrib.sites.models.Site` objects, we can abstract the \"thank you\" notice to use the values of the current site's :attr:`~django.contrib.sites.models.Site.name` and :attr:`~django.contrib.sites.models.Site.domain`."
msgstr ""

#: ../../ref/contrib/sites.txt:186
# cdbea9fb8ec548468bc7f790593872f8
msgid "Here's an example of what the form-handling view looks like::"
msgstr ""

#: ../../ref/contrib/sites.txt:203
# b9b0389e229d47da90932729132252f2
msgid "On Lawrence.com, this email has the subject line \"Thanks for subscribing to lawrence.com alerts.\" On LJWorld.com, the email has the subject \"Thanks for subscribing to LJWorld.com alerts.\" Same goes for the email's message body."
msgstr ""

#: ../../ref/contrib/sites.txt:207
# 87164208cd2e4e51ac22c9468f050c1b
msgid "Note that an even more flexible (but more heavyweight) way of doing this would be to use Django's template system. Assuming Lawrence.com and LJWorld.com have different template directories (:setting:`TEMPLATE_DIRS`), you could simply farm out to the template system like so::"
msgstr ""

#: ../../ref/contrib/sites.txt:225
# 3494fca120b845fb8ff44d2cefbc423b
msgid "In this case, you'd have to create :file:`subject.txt` and :file:`message.txt` template files for both the LJWorld.com and Lawrence.com template directories. That gives you more flexibility, but it's also more complex."
msgstr ""

#: ../../ref/contrib/sites.txt:229
# 310fc5605a3b4763a8aef78e76c47b9b
msgid "It's a good idea to exploit the :class:`~django.contrib.sites.models.Site` objects as much as possible, to remove unneeded complexity and redundancy."
msgstr ""

#: ../../ref/contrib/sites.txt:233
# 636116acf3674b21b6df48c71e561d3d
msgid "Getting the current domain for full URLs"
msgstr ""

#: ../../ref/contrib/sites.txt:235
# 57e15646513e4f41a1e272af6d6461b4
msgid "Django's ``get_absolute_url()`` convention is nice for getting your objects' URL without the domain name, but in some cases you might want to display the full URL -- with ``http://`` and the domain and everything -- for an object. To do this, you can use the sites framework. A simple example::"
msgstr ""

#: ../../ref/contrib/sites.txt:252
# 8f9a01cc0ae342c5b527e1ffb3a1469c
msgid "Default site and ``syncdb``"
msgstr ""

#: ../../ref/contrib/sites.txt:254
# 23056409a1b547289409759e54adbc15
msgid "``django.contrib.sites`` registers a :data:`~django.db.models.signals.post_syncdb` signal handler which creates a default site named ``example.com`` with the domain ``example.com``. For example, this site will be created after Django creates the test database."
msgstr ""

#: ../../ref/contrib/sites.txt:260
# cb93e2f8eb8f438fb63a64c29eb4dfcd
msgid "Caching the current ``Site`` object"
msgstr ""

#: ../../ref/contrib/sites.txt:262
# 9da99782ecd743e383b70964ca00733c
msgid "As the current site is stored in the database, each call to ``Site.objects.get_current()`` could result in a database query. But Django is a little cleverer than that: on the first request, the current site is cached, and any subsequent call returns the cached data instead of hitting the database."
msgstr ""

#: ../../ref/contrib/sites.txt:267
# 2de3d69680c847c5a0c34e37e5bd180e
msgid "If for any reason you want to force a database query, you can tell Django to clear the cache using ``Site.objects.clear_cache()``::"
msgstr ""

#: ../../ref/contrib/sites.txt:285
# f99245741704478aae830fed573a905c
msgid "The ``CurrentSiteManager``"
msgstr ""

#: ../../ref/contrib/sites.txt:289
# ba6e5b81bb1742a49c55f7d1eb864c3d
msgid "If :class:`~django.contrib.sites.models.Site` plays a key role in your application, consider using the helpful :class:`~django.contrib.sites.managers.CurrentSiteManager` in your model(s). It's a model :doc:`manager </topics/db/managers>` that automatically filters its queries to include only objects associated with the current :class:`~django.contrib.sites.models.Site`."
msgstr ""

#: ../../ref/contrib/sites.txt:296
# 519df2f04e424c3b893faec424cb69ce
msgid "Use :class:`~django.contrib.sites.managers.CurrentSiteManager` by adding it to your model explicitly. For example::"
msgstr ""

#: ../../ref/contrib/sites.txt:311
# a7603fe3cf4748749f67187b9e7be033
msgid "With this model, ``Photo.objects.all()`` will return all ``Photo`` objects in the database, but ``Photo.on_site.all()`` will return only the ``Photo`` objects associated with the current site, according to the :setting:`SITE_ID` setting."
msgstr ""

#: ../../ref/contrib/sites.txt:315
# 8bc146cbe9f04d1fa6dd53274c67c251
msgid "Put another way, these two statements are equivalent::"
msgstr ""

#: ../../ref/contrib/sites.txt:320
# 1b3ade24618a4c6286d6952e2eaffef5
msgid "How did :class:`~django.contrib.sites.managers.CurrentSiteManager` know which field of ``Photo`` was the :class:`~django.contrib.sites.models.Site`? By default, :class:`~django.contrib.sites.managers.CurrentSiteManager` looks for a either a :class:`~django.db.models.ForeignKey` called ``site`` or a :class:`~django.db.models.ManyToManyField` called ``sites`` to filter on. If you use a field named something other than ``site`` or ``sites`` to identify which :class:`~django.contrib.sites.models.Site` objects your object is related to, then you need to explicitly pass the custom field name as a parameter to :class:`~django.contrib.sites.managers.CurrentSiteManager` on your model. The following model, which has a field called ``publish_on``, demonstrates this::"
msgstr ""

#: ../../ref/contrib/sites.txt:348
# aa2ce530ab954a4c8a9da05b7be03814
msgid "If you attempt to use :class:`~django.contrib.sites.managers.CurrentSiteManager` and pass a field name that doesn't exist, Django will raise a ``ValueError``."
msgstr ""

#: ../../ref/contrib/sites.txt:351
# 3ad101f7360941f5b89bb23be5abddd8
msgid "Finally, note that you'll probably want to keep a normal (non-site-specific) ``Manager`` on your model, even if you use :class:`~django.contrib.sites.managers.CurrentSiteManager`. As explained in the :doc:`manager documentation </topics/db/managers>`, if you define a manager manually, then Django won't create the automatic ``objects = models.Manager()`` manager for you. Also note that certain parts of Django -- namely, the Django admin site and generic views -- use whichever manager is defined *first* in the model, so if you want your admin site to have access to all objects (not just site-specific ones), put ``objects = models.Manager()`` in your model, before you define :class:`~django.contrib.sites.managers.CurrentSiteManager`."
msgstr ""

#: ../../ref/contrib/sites.txt:364
# ba161026453f4720a1a47e1ce29e8264
msgid "How Django uses the sites framework"
msgstr ""

#: ../../ref/contrib/sites.txt:366
# a835755b62704919847c64da38ce4f22
msgid "Although it's not required that you use the sites framework, it's strongly encouraged, because Django takes advantage of it in a few places. Even if your Django installation is powering only a single site, you should take the two seconds to create the site object with your ``domain`` and ``name``, and point to its ID in your :setting:`SITE_ID` setting."
msgstr ""

#: ../../ref/contrib/sites.txt:372
# 985007450e4348679d41c55c31eaebb3
msgid "Here's how Django uses the sites framework:"
msgstr ""

#: ../../ref/contrib/sites.txt:374
# 4d882c9937ab4dd58157a53e44847fea
msgid "In the :mod:`redirects framework <django.contrib.redirects>`, each redirect object is associated with a particular site. When Django searches for a redirect, it takes into account the current site."
msgstr ""

#: ../../ref/contrib/sites.txt:378
# 2a69f15468bc4f22992ecbe9cc1d93a3
msgid "In the comments framework, each comment is associated with a particular site. When a comment is posted, its :class:`~django.contrib.sites.models.Site` is set to the current site, and when comments are listed via the appropriate template tag, only the comments for the current site are displayed."
msgstr ""

#: ../../ref/contrib/sites.txt:384
# a8dfb9b06073472591f874273fd6d821
msgid "In the :mod:`flatpages framework <django.contrib.flatpages>`, each flatpage is associated with a particular site. When a flatpage is created, you specify its :class:`~django.contrib.sites.models.Site`, and the :class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` checks the current site in retrieving flatpages to display."
msgstr ""

#: ../../ref/contrib/sites.txt:390
# dcbd2dab2e6b4f10919b5ba440e6e853
msgid "In the :mod:`syndication framework <django.contrib.syndication>`, the templates for ``title`` and ``description`` automatically have access to a variable ``{{ site }}``, which is the :class:`~django.contrib.sites.models.Site` object representing the current site. Also, the hook for providing item URLs will use the ``domain`` from the current :class:`~django.contrib.sites.models.Site` object if you don't specify a fully-qualified domain."
msgstr ""

#: ../../ref/contrib/sites.txt:398
# 2b0a43a4e5d14a54934458a6a40d2472
msgid "In the :mod:`authentication framework <django.contrib.auth>`, the :func:`django.contrib.auth.views.login` view passes the current :class:`~django.contrib.sites.models.Site` name to the template as ``{{ site_name }}``."
msgstr ""

#: ../../ref/contrib/sites.txt:403
# b59a993e3cd346148e97a4beb8dbd096
msgid "The shortcut view (``django.views.defaults.shortcut``) uses the domain of the current :class:`~django.contrib.sites.models.Site` object when calculating an object's URL."
msgstr ""

#: ../../ref/contrib/sites.txt:407
# eff613989b954176b22df27cc2424a5d
msgid "In the admin framework, the \"view on site\" link uses the current :class:`~django.contrib.sites.models.Site` to work out the domain for the site that it will redirect to."
msgstr ""

#: ../../ref/contrib/sites.txt:414
# 73c322e07c8b4eff90a7a7998204fb5d
msgid "``RequestSite`` objects"
msgstr ""

#: ../../ref/contrib/sites.txt:418
# d8681184ddd5406f99c5eee00d2ed28e
msgid "Some :doc:`django.contrib </ref/contrib/index>` applications take advantage of the sites framework but are architected in a way that doesn't *require* the sites framework to be installed in your database. (Some people don't want to, or just aren't *able* to install the extra database table that the sites framework requires.) For those cases, the framework provides a :class:`~django.contrib.sites.models.RequestSite` class, which can be used as a fallback when the database-backed sites framework is not available."
msgstr ""

#: ../../ref/contrib/sites.txt:428
# 9dc80e92c9524b66ac24e2d290da6523
msgid "A class that shares the primary interface of :class:`~django.contrib.sites.models.Site` (i.e., it has ``domain`` and ``name`` attributes) but gets its data from a Django :class:`~django.http.HttpRequest` object rather than from a database."
msgstr ""

#: ../../ref/contrib/sites.txt:433
# 8332f4552b96487292e8f8801c5a03cc
msgid "The ``save()`` and ``delete()`` methods raise ``NotImplementedError``."
msgstr ""

#: ../../ref/contrib/sites.txt:437
# 1ea74cd475444d83bbb31526729dfcc7
msgid "Sets the ``name`` and ``domain`` attributes to the value of :meth:`~django.http.HttpRequest.get_host`."
msgstr ""

#: ../../ref/contrib/sites.txt:441
# 1d06eec0928947039de5d9ec1b012a1f
msgid "A :class:`~django.contrib.sites.models.RequestSite` object has a similar interface to a normal :class:`~django.contrib.sites.models.Site` object, except its :meth:`~django.contrib.sites.models.RequestSite.__init__()` method takes an :class:`~django.http.HttpRequest` object. It's able to deduce the ``domain`` and ``name`` by looking at the request's domain. It has ``save()`` and ``delete()`` methods to match the interface of :class:`~django.contrib.sites.models.Site`, but the methods raise ``NotImplementedError``."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:3
# c2d2391f41514d818e1ca81b8d3e84ac
msgid "The staticfiles app"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:8
# 2cd99acf38cd4460a500ac8d920d6e7c
msgid "``django.contrib.staticfiles`` collects static files from each of your applications (and any other places you specify) into a single location that can easily be served in production."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:14
# c6389a8fb72347cea6ea732709b4521c
msgid "For an introduction to the static files app and some usage examples, see :doc:`/howto/static-files/index`. For guidelines on deploying static files, see :doc:`/howto/static-files/deployment`."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:27
# ae7655eca8344545965b33c5fe313c81
msgid "The following settings control the behavior of the staticfiles app."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:32
# 2fe8fd45d207483c953a7f5946196eca
msgid "STATICFILES_DIRS"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:34
# af92d5c457bd4a02922d4016ac650b12
msgid "Default: ``[]``"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:36
# da90406db9a44a1da9af7eaace689e6c
msgid "This setting defines the additional locations the staticfiles app will traverse if the ``FileSystemFinder`` finder is enabled, e.g. if you use the :djadmin:`collectstatic` or :djadmin:`findstatic` management command or use the static file serving view."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:41
# 4bd4bf84a2884bfd842daff26c94d2ec
msgid "This should be set to a list or tuple of strings that contain full paths to your additional files directory(ies) e.g.::"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:51
# 045bcb453a814a5d8ca86f976c9cae1d
msgid "Prefixes (optional)"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:53
# 2fa8141b33e041d3b005f3a276a91e67
msgid "In case you want to refer to files in one of the locations with an additional namespace, you can **optionally** provide a prefix as ``(prefix, path)`` tuples, e.g.::"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:62
# 42ede3cf8cba486ba1bf24ea79c29d29
msgid "Example:"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:64
# 729cdee1009241f8a06b9146aa95a416
msgid "Assuming you have :setting:`STATIC_URL` set ``'/static/'``, the :djadmin:`collectstatic` management command would collect the \"stats\" files in a ``'downloads'`` subdirectory of :setting:`STATIC_ROOT`."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:68
# 3f598425d81d4f78acb9b61caccd8bc3
msgid "This would allow you to refer to the local file ``'/opt/webfiles/stats/polls_20101022.tar.gz'`` with ``'/static/downloads/polls_20101022.tar.gz'`` in your templates, e.g.:"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:79
# 8a21897133c248cc9e908f38e6bf50d8
msgid "STATICFILES_STORAGE"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:81
# 1dce4cbef191416fb9985af213894d97
msgid "Default: ``'django.contrib.staticfiles.storage.StaticFilesStorage'``"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:83
# 46c3f89c1d4848f2b7f707cb0bb59544
msgid "The file storage engine to use when collecting static files with the :djadmin:`collectstatic` management command."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:88
# a5cd84836571472aa65feeb9d02104ce
msgid "A ready-to-use instance of the storage backend defined in this setting can be found at ``django.contrib.staticfiles.storage.staticfiles_storage``."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:91
# cfdf5cefcf7644a0a8f1fe18e3b98c97
msgid "For an example, see :ref:`staticfiles-from-cdn`."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:96
# 00b8984a8e7a49d5814a6d5cecd12da1
msgid "STATICFILES_FINDERS"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:103
# dc2d46ce6bfd44f9935756dd86134f6e
msgid "The list of finder backends that know how to find static files in various locations."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:106
# 8e52ccfa0ce747c79117519648052b52
msgid "The default will find files stored in the :setting:`STATICFILES_DIRS` setting (using ``django.contrib.staticfiles.finders.FileSystemFinder``) and in a ``static`` subdirectory of each app (using ``django.contrib.staticfiles.finders.AppDirectoriesFinder``)"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:111
# e22a737a509e476fa661965f8ad0148f
msgid "One finder is disabled by default: ``django.contrib.staticfiles.finders.DefaultStorageFinder``. If added to your :setting:`STATICFILES_FINDERS` setting, it will look for static files in the default file storage as defined by the :setting:`DEFAULT_FILE_STORAGE` setting."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:119
# b4495f9ec0054eb2bda7495d05db5101
msgid "When using the ``AppDirectoriesFinder`` finder, make sure your apps can be found by staticfiles. Simply add the app to the :setting:`INSTALLED_APPS` setting of your site."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:123
# deb10d866d3547baaa72f0048335978d
msgid "Static file finders are currently considered a private interface, and this interface is thus undocumented."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:127
# ee24fbd37fd04af48b2c094467e4feb5
msgid "Management Commands"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:131
# cd291ed64526411e8156b72b03b31186
msgid "``django.contrib.staticfiles`` exposes three management commands."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:134
#: ../../ref/django-admin.txt:1237
# aae45689e3a24f04844f7912896c4de9
# 91f8326d89f14cdd92d742d0eb0e922e
msgid "collectstatic"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:138
# 0e0610ddcb204d729440abc817221132
msgid "Collects the static files into :setting:`STATIC_ROOT`."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:140
# cb69f624f9a24004820f5ed5fcd4f26d
msgid "Duplicate file names are by default resolved in a similar way to how template resolution works: the file that is first found in one of the specified locations will be used. If you're confused, the :djadmin:`findstatic` command can help show you which files are found."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:145
# 5c34b6210df745be8e44d260df25152c
msgid "Files are searched by using the :setting:`enabled finders <STATICFILES_FINDERS>`. The default is to look in all locations defined in :setting:`STATICFILES_DIRS` and in the ``'static'`` directory of apps specified by the :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:152
# 281d7038adee481e854965c97044ba68
msgid "The :djadmin:`collectstatic` management command calls the :meth:`~django.contrib.staticfiles.storage.StaticFilesStorage.post_process` method of the :setting:`STATICFILES_STORAGE` after each run and passes a list of paths that have been found by the management command. It also receives all command line options of :djadmin:`collectstatic`. This is used by the :class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage` by default."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:160
# cf46d7b0463144548a55f8ffb4bf6931
msgid "Some commonly used options are:"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:164
# f59f2d94eeb043678bedcf61846414fe
msgid "Do NOT prompt the user for input of any kind."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:169
# 06346727693d408ebee10a301160e9b3
msgid "Ignore files or directories matching this glob-style pattern. Use multiple times to ignore more."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:175
# c31491439542416cb578426f93c8baef
msgid "Do everything except modify the filesystem."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:182
# 1ee21e66cfb84757a8d3309ed094dd3d
msgid "Clear the existing files before trying to copy or link the original file."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:187
# a04e674ae5cc47d8b9ebd467d6155f4c
msgid "Create a symbolic link to each file instead of copying."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:193
# 31ddbfe813aa4a77abbaabb39de67c87
msgid "Don't call the :meth:`~django.contrib.staticfiles.storage.StaticFilesStorage.post_process` method of the configured :setting:`STATICFILES_STORAGE` storage backend."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:199
# 78f0b7bd34ac4cab948974c6b0b6c488
msgid "Don't ignore the common private glob-style patterns ``'CVS'``, ``'.*'`` and ``'*~'``."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:202
# d655bb3e0e87454faef2a326d717fb33
msgid "For a full list of options, refer to the commands own help by running::"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:207
#: ../../ref/django-admin.txt:1246
# 6b7b073572e847eba93f95572c066199
# 7c6e47fdd3dc4bcb85b6b01345c19b40
msgid "findstatic"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:211
# a6ef4a8e6a284cc588d3d4003fecc0dc
msgid "Searches for one or more relative paths with the enabled finders."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:220
# c9571fa141aa4bfd909aa7eae37f24b4
msgid "By default, all matching locations are found. To only return the first match for each relative path, use the ``--first`` option::"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:226
# 91a8d9ba125541f7bd895694f7a2b0c2
msgid "This is a debugging aid; it'll show you exactly which static file will be collected for a given path."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:232
# 17dbada03cba4635ac90003910ff8098
msgid "runserver"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:236
# 06b8a8ff04b8462793ef534aecae323c
msgid "Overrides the core :djadmin:`runserver` command if the ``staticfiles`` app is :setting:`installed<INSTALLED_APPS>` and adds automatic serving of static files and the following new options."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:242
# b38ecf30a290467b976c3663bca12d6e
msgid "Use the ``--nostatic`` option to disable serving of static files with the :doc:`staticfiles </ref/contrib/staticfiles>` app entirely. This option is only available if the :doc:`staticfiles </ref/contrib/staticfiles>` app is in your project's :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:247
#: ../../ref/contrib/staticfiles.txt:261
#: ../../ref/django-admin.txt:113
#: ../../ref/django-admin.txt:408
#: ../../ref/django-admin.txt:417
#: ../../ref/django-admin.txt:427
#: ../../ref/django-admin.txt:444
#: ../../ref/django-admin.txt:455
#: ../../ref/django-admin.txt:595
#: ../../ref/django-admin.txt:657
#: ../../ref/django-admin.txt:675
#: ../../ref/django-admin.txt:1164
#: ../../ref/django-admin.txt:1262
#: ../../ref/django-admin.txt:1277
#: ../../ref/django-admin.txt:1291
#: ../../ref/django-admin.txt:1301
#: ../../ref/templates/builtins.txt:877
# a98780a4c8c7488b9ae7a0a4191d8e8e
# ef2399c0994249c5809a35c5d8fda409
# fd0114056cba41df92fe463a93dae1ef
# 325191dba9b5450da12b861863611d4c
# 0d5e8f04fbb549958169bc2274d44882
# d9b779ff590e4c18b3ee23feddff3fe7
# fe657954a94b4618b16593ee370b58df
# 413f5385f982445eb975c30239f40fb5
# b4620959d4bd464b840b3dffe7409825
# 3d2c792583b24776894909a343722de7
# e980a3f18c884e599c817dd6770c1b3c
# 9b1d4ee77d5f4880866f4fa042f6b3a5
# f566cd7280c545a99cdaff9bdc77b018
# 30ef24a2e6e24ffa833a334532b3c918
# 260e633fce1f4878aa1ac60bbf0982b1
# 5396400699e44ec08cc71de81f9c02b0
# a31a05a6ab164acab0e5bf5993e34848
msgid "Example usage::"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:253
# 9d8bd295bd4644c881abaebd4d75c92a
msgid "Use the ``--insecure`` option to force serving of static files with the :doc:`staticfiles </ref/contrib/staticfiles>` app even if the :setting:`DEBUG` setting is ``False``. By using this you acknowledge the fact that it's **grossly inefficient** and probably **insecure**. This is only intended for local development, should **never be used in production** and is only available if the :doc:`staticfiles </ref/contrib/staticfiles>` app is in your project's :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:266
# 14ba326cc5a5496a81187760c1e99185
msgid "Storages"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:269
# 0251255022c641b18761a436055d8f2b
msgid "StaticFilesStorage"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:273
# be85fa062adf4a4da54e718034f9de3d
msgid "A subclass of the :class:`~django.core.files.storage.FileSystemStorage` storage backend that uses the :setting:`STATIC_ROOT` setting as the base file system location and the :setting:`STATIC_URL` setting respectively as the base URL."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:282
# 4a49bc4f0478423795d3be0742892bb1
msgid "This method is called by the :djadmin:`collectstatic` management command after each run and gets passed the local storages and paths of found files as a dictionary, as well as the command line options."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:286
# 0f4d05782fab4c1d8b546366cb582ee5
msgid "The :class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage` uses this behind the scenes to replace the paths with their hashed counterparts and update the cache appropriately."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:291
# 2e9c8516aba841a2a9a9d9f616b322b7
msgid "CachedStaticFilesStorage"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:297
# bb2318ea8cc84614b6ec44071814c690
msgid "A subclass of the :class:`~django.contrib.staticfiles.storage.StaticFilesStorage` storage backend which caches the files it saves by appending the MD5 hash of the file's content to the filename. For example, the file ``css/styles.css`` would also be saved as ``css/styles.55e7cbb9ba48.css``."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:302
# 5b7564155b024fdea25a6997fa2770b0
msgid "The purpose of this storage is to keep serving the old files in case some pages still refer to those files, e.g. because they are cached by you or a 3rd party proxy server. Additionally, it's very helpful if you want to apply `far future Expires headers`_ to the deployed files to speed up the load time for subsequent page visits."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:308
# 522dc6ba397f43999a6a978262617fef
msgid "The storage backend automatically replaces the paths found in the saved files matching other saved files with the path of the cached copy (using the :meth:`~django.contrib.staticfiles.storage.StaticFilesStorage.post_process` method). The regular expressions used to find those paths (``django.contrib.staticfiles.storage.CachedStaticFilesStorage.cached_patterns``) by default cover the `@import`_ rule and `url()`_ statement of `Cascading Style Sheets`_. For example, the ``'css/styles.css'`` file with the content"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:321
# f9371bcb470148d4b2408be2f46514f5
msgid "would be replaced by calling the :meth:`~django.core.files.storage.Storage.url` method of the ``CachedStaticFilesStorage`` storage backend, ultimatively saving a ``'css/styles.55e7cbb9ba48.css'`` file with the following content:"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:331
# cbc24cc2f9f148e8a18117987718e898
msgid "To enable the ``CachedStaticFilesStorage`` you have to make sure the following requirements are met:"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:334
# bb747c962f2b4d1b83540b0af4928ea4
msgid "the :setting:`STATICFILES_STORAGE` setting is set to ``'django.contrib.staticfiles.storage.CachedStaticFilesStorage'``"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:336
# 746c33e6a2dd4a198a242b867df71822
msgid "the :setting:`DEBUG` setting is set to ``False``"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:337
# 8214125896a7435daafd3e91ad5b41a0
msgid "you use the ``staticfiles`` :ttag:`static<staticfiles-static>` template tag to refer to your static files in your templates"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:339
# 9d6ce44c1c8446b4b3bbe109e654a44a
msgid "you've collected all your static files by using the :djadmin:`collectstatic` management command"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:342
# 796b2300a46c423c8fbdfc9bb721301f
msgid "Since creating the MD5 hash can be a performance burden to your website during runtime, ``staticfiles`` will automatically try to cache the hashed name for each file path using Django's :doc:`caching framework</topics/cache>`. If you want to override certain options of the cache backend the storage uses, simply specify a custom entry in the :setting:`CACHES` setting named ``'staticfiles'``. It falls back to using the ``'default'`` cache backend."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:354
# 372e5b4a91434fc0b763cbe7b1d32792
msgid "The method that is used when creating the hashed name of a file. Needs to return a hash for the given file name and content. By default it calculates a MD5 hash from the content's chunks as mentioned above."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:370
#: ../../ref/templates/builtins.txt:2349
#: ../../ref/templates/builtins.txt:2354
# 4645e9f77ff345eea138d31b8ef7e2ae
# c1c9b276860844b78dca7a630a045c59
# 4b9675dbb71c4a7c9bb5fdd1945bd547
msgid "static"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:376
# 875f0bd5185545d2b714f99108c52da2
msgid "Uses the configured :setting:`STATICFILES_STORAGE` storage to create the full URL for the given relative path, e.g.:"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:384
# 58b414f4fbfa4d288aa508358afe1246
msgid "The previous example is equal to calling the ``url`` method of an instance of :setting:`STATICFILES_STORAGE` with ``\"images/hi.jpg\"``. This is especially useful when using a non-local storage backend to deploy files as documented in :ref:`staticfiles-from-cdn`."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:391
# 57e54bb023c542d48bac4ffe7f3e32dd
msgid "If you'd like to retrieve a static URL without displaying it, you can use a slightly different call:"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:401
# cf6b23c044164e96b2e437efccb1d867
msgid "Other Helpers"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:403
# 019e34eab0514f39942bfb3f7832d006
msgid "There are a few other helpers outside of the :mod:`staticfiles <django.contrib.staticfiles>` app to work with static files:"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:407
# 39fbc20b738b4f5f9471ccb711781c81
msgid "The :func:`django.core.context_processors.static` context processor which adds :setting:`STATIC_URL` to every template context rendered with :class:`~django.template.RequestContext` contexts."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:411
# 67b6966781074da180812a072101e24e
msgid "The builtin template tag :ttag:`static` which takes a path and urljoins it with the static prefix :setting:`STATIC_URL`."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:414
# bc776acf5c4d40ef8626693c7f7e5649
msgid "The builtin template tag :ttag:`get_static_prefix` which populates a template variable with the static prefix :setting:`STATIC_URL` to be used as a variable or directly."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:418
# b7cd5b1985db4acd8055cc9185f0c272
msgid "The similar template tag :ttag:`get_media_prefix` which works like :ttag:`get_static_prefix` but uses :setting:`MEDIA_URL`."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:424
# 20a9ee413ce04db78964a66115cd4e87
msgid "Static file development view"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:428
# 98dcf0150a1e4aeb8c960a020ee13b0c
msgid "The static files tools are mostly designed to help with getting static files successfully deployed into production. This usually means a separate, dedicated static file server, which is a lot of overhead to mess with when developing locally. Thus, the ``staticfiles`` app ships with a **quick and dirty helper view** that you can use to serve files locally in development."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:439
# 3f44149406f4420fa972c0efde962023
msgid "This view function serves static files in development."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:443
# f1a437c6a6914348945b672c473943e5
msgid "This view will only work if :setting:`DEBUG` is ``True``."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:445
#: ../../ref/contrib/staticfiles.txt:490
# e3421975f915440a84e89bbe116675c5
# e5eeb11be06e40e8adb650e5c83e4cd9
msgid "That's because this view is **grossly inefficient** and probably **insecure**. This is only intended for local development, and should **never be used in production**."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:449
# c8026e9566c3426eb78981c9f74de408
msgid "This view is automatically enabled by :djadmin:`runserver` (with a :setting:`DEBUG` setting set to ``True``). To use the view with a different local development server, add the following snippet to the end of your primary URL configuration::"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:461
# 79a8a7fe6d3e4aa18c790b1f497fe9a5
msgid "Note, the beginning of the pattern (``r'^static/'``) should be your :setting:`STATIC_URL` setting."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:464
# 7460fed85a6c43fda81cdf321fe153d8
msgid "Since this is a bit finicky, there's also a helper function that'll do this for you:"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:469
# 1082e72f63e2495a9805258ce352af9c
msgid "This will return the proper URL pattern for serving static files to your already defined pattern list. Use it like this::"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:478
# fd93489870b442fe83ef40e7c8891259
msgid "This will inspect your :setting:`STATIC_URL` setting and wire up the view to serve static files accordingly. Don't forget to set the :setting:`STATICFILES_DIRS` setting appropriately to let ``django.contrib.staticfiles`` know where to look for files in addition to files in app directories."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:486
# 89f36541ad0a444383e6d758073c7a39
msgid "This helper function will only work if :setting:`DEBUG` is ``True`` and your :setting:`STATIC_URL` setting is neither empty nor a full URL such as ``http://static.example.com/``."
msgstr ""

#: ../../ref/contrib/syndication.txt:3
# 6181f3bba8094c4ead3b263c20f09218
msgid "The syndication feed framework"
msgstr ""

#: ../../ref/contrib/syndication.txt:9
# a8fa6818fdec4172936b339c64f5145e
msgid "Django comes with a high-level syndication-feed-generating framework that makes creating RSS_ and Atom_ feeds easy."
msgstr ""

#: ../../ref/contrib/syndication.txt:12
# 05b44ae79cdd4e289cf6777f98b86118
msgid "To create any syndication feed, all you have to do is write a short Python class. You can create as many feeds as you want."
msgstr ""

#: ../../ref/contrib/syndication.txt:15
# ebd0c148331348298e153dc766690542
msgid "Django also comes with a lower-level feed-generating API. Use this if you want to generate feeds outside of a Web context, or in some other lower-level way."
msgstr ""

#: ../../ref/contrib/syndication.txt:23
# 47d5ce860e33492ebb6c23cfab708bf3
msgid "The high-level framework"
msgstr ""

#: ../../ref/contrib/syndication.txt:28
# f3547bad2ee34c1f961d44e66d786c3d
msgid "The high-level feed-generating framework is supplied by the :class:`~django.contrib.syndication.views.Feed` class. To create a feed, write a :class:`~django.contrib.syndication.views.Feed` class and point to an instance of it in your :doc:`URLconf </topics/http/urls>`."
msgstr ""

#: ../../ref/contrib/syndication.txt:35
# 5b0eb3d63af8468bbcd7fa1d120e00a7
msgid "Feed classes"
msgstr ""

#: ../../ref/contrib/syndication.txt:37
# 32aa1d8da2e8485da895d1116895b6fd
msgid "A :class:`~django.contrib.syndication.views.Feed` class is a Python class that represents a syndication feed. A feed can be simple (e.g., a \"site news\" feed, or a basic feed displaying the latest entries of a blog) or more complex (e.g., a feed displaying all the blog entries in a particular category, where the category is variable)."
msgstr ""

#: ../../ref/contrib/syndication.txt:43
# 292f1e39e98546e58524d7d1575bf8c9
msgid "Feed classes subclass :class:`django.contrib.syndication.views.Feed`. They can live anywhere in your codebase."
msgstr ""

#: ../../ref/contrib/syndication.txt:46
# 354bd64004cc4293b9956b06b5eb04cb
msgid "Instances of :class:`~django.contrib.syndication.views.Feed` classes are views which can be used in your :doc:`URLconf </topics/http/urls>`."
msgstr ""

#: ../../ref/contrib/syndication.txt:52
# 3f5a42fc6456466aba56639096a226c1
msgid "This simple example, taken from `chicagocrime.org`_, describes a feed of the latest five news items::"
msgstr ""

#: ../../ref/contrib/syndication.txt:77
# 0ebd1d9ee6534d6fba922b9dfb83ed69
msgid "To connect a URL to this feed, put an instance of the Feed object in your :doc:`URLconf </topics/http/urls>`. For example::"
msgstr ""

#: ../../ref/contrib/syndication.txt:91
# 17f82d5a8770433cb59123e146671833
msgid "The Feed class subclasses :class:`django.contrib.syndication.views.Feed`."
msgstr ""

#: ../../ref/contrib/syndication.txt:93
# e286a178cba34513991e78485704ee8d
msgid "``title``, ``link`` and ``description`` correspond to the standard RSS ``<title>``, ``<link>`` and ``<description>`` elements, respectively."
msgstr ""

#: ../../ref/contrib/syndication.txt:97
# 2251fbb51bf94c06a2c696c2169a7f3e
msgid "``items()`` is, simply, a method that returns a list of objects that should be included in the feed as ``<item>`` elements. Although this example returns ``NewsItem`` objects using Django's :doc:`object-relational mapper </ref/models/querysets>`, ``items()`` doesn't have to return model instances. Although you get a few bits of functionality \"for free\" by using Django models, ``items()`` can return any type of object you want."
msgstr ""

#: ../../ref/contrib/syndication.txt:105
# d6370f108e1f40318a15c200cd87b9ec
msgid "If you're creating an Atom feed, rather than an RSS feed, set the ``subtitle`` attribute instead of the ``description`` attribute. See `Publishing Atom and RSS feeds in tandem`_, later, for an example."
msgstr ""

#: ../../ref/contrib/syndication.txt:109
# 723847bbf9594ae1a8cf2291643ae56e
msgid "One thing is left to do. In an RSS feed, each ``<item>`` has a ``<title>``, ``<link>`` and ``<description>``. We need to tell the framework what data to put into those elements."
msgstr ""

#: ../../ref/contrib/syndication.txt:113
# 3b608665ffda4ef8b790209068194048
msgid "For the contents of ``<title>`` and ``<description>``, Django tries calling the methods ``item_title()`` and ``item_description()`` on the :class:`~django.contrib.syndication.views.Feed` class. They are passed a single parameter, ``item``, which is the object itself. These are optional; by default, the unicode representation of the object is used for both."
msgstr ""

#: ../../ref/contrib/syndication.txt:120
# fb11c136f4d04bdcaec0e6934c36dba8
msgid "If you want to do any special formatting for either the title or description, :doc:`Django templates </topics/templates>` can be used instead. Their paths can be specified with the ``title_template`` and ``description_template`` attributes on the :class:`~django.contrib.syndication.views.Feed` class. The templates are rendered for each item and are passed two template context variables:"
msgstr ""

#: ../../ref/contrib/syndication.txt:127
# 268d95ffb15d4e28ba42692fda82cd40
msgid "``{{ obj }}`` -- The current object (one of whichever objects you returned in ``items()``)."
msgstr ""

#: ../../ref/contrib/syndication.txt:130
# 737c8e37087e487d8ed8fcf8dc4ccfdf
msgid "``{{ site }}`` -- A :class:`django.contrib.sites.models.Site` object representing the current site. This is useful for ``{{ site.domain }}`` or ``{{ site.name }}``. If you do *not* have the Django sites framework installed, this will be set to a :class:`django.contrib.sites.models.RequestSite` object. See the :ref:`RequestSite section of the sites framework documentation <requestsite-objects>` for more."
msgstr ""

#: ../../ref/contrib/syndication.txt:138
# a4bcde32c5f94d3bb871e1e6427accd7
msgid "See `a complex example`_ below that uses a description template."
msgstr ""

#: ../../ref/contrib/syndication.txt:140
# 1bf1fdc1c1e34135aa3c79d3f3d93477
msgid "To specify the contents of ``<link>``, you have two options. For each item in ``items()``, Django first tries calling the ``item_link()`` method on the :class:`~django.contrib.syndication.views.Feed` class. In a similar way to the title and description, it is passed it a single parameter, ``item``. If that method doesn't exist, Django tries executing a ``get_absolute_url()`` method on that object. Both ``get_absolute_url()`` and ``item_link()`` should return the item's URL as a normal Python string. As with ``get_absolute_url()``, the result of ``item_link()`` will be included directly in the URL, so you are responsible for doing all necessary URL quoting and conversion to ASCII inside the method itself."
msgstr ""

#: ../../ref/contrib/syndication.txt:156
# 83b889acb2ea41e1bd3741c4dc9069ac
msgid "A complex example"
msgstr ""

#: ../../ref/contrib/syndication.txt:158
# ddf1fa27bc704f3aae760d4c718a8ce5
msgid "The framework also supports more complex feeds, via arguments."
msgstr ""

#: ../../ref/contrib/syndication.txt:160
# d2670be252624fe980efd05995f0f034
msgid "For example, `chicagocrime.org`_ offers an RSS feed of recent crimes for every police beat in Chicago. It'd be silly to create a separate :class:`~django.contrib.syndication.views.Feed` class for each police beat; that would violate the :ref:`DRY principle <dry>` and would couple data to programming logic. Instead, the syndication framework lets you access the arguments passed from your :doc:`URLconf </topics/http/urls>` so feeds can output items based on information in the feed's URL."
msgstr ""

#: ../../ref/contrib/syndication.txt:168
# 7d8ec7d382244ade85a9c0f184f57997
msgid "On chicagocrime.org, the police-beat feeds are accessible via URLs like this:"
msgstr ""

#: ../../ref/contrib/syndication.txt:170
# e574e6afd8d140bdb8b068adf3558c91
msgid ":file:`/beats/613/rss/` -- Returns recent crimes for beat 613."
msgstr ""

#: ../../ref/contrib/syndication.txt:171
# 79485a6d84c54179a890b5085307c1d9
msgid ":file:`/beats/1424/rss/` -- Returns recent crimes for beat 1424."
msgstr ""

#: ../../ref/contrib/syndication.txt:173
# 798721698fe54f5fa389393fe0877e7d
msgid "These can be matched with a :doc:`URLconf </topics/http/urls>` line such as::"
msgstr ""

#: ../../ref/contrib/syndication.txt:177
# 9a0f6178d92b4e189263d88023de07ee
msgid "Like a view, the arguments in the URL are passed to the ``get_object()`` method along with the request object."
msgstr ""

#: ../../ref/contrib/syndication.txt:180
# cd49dcaf5b204adb8a4ac096f915b1dc
msgid "Here's the code for these beat-specific feeds::"
msgstr ""

#: ../../ref/contrib/syndication.txt:203
# d9adf1f1604142fcab55bc0a56288c75
msgid "To generate the feed's ``<title>``, ``<link>`` and ``<description>``, Django uses the ``title()``, ``link()`` and ``description()`` methods. In the previous example, they were simple string class attributes, but this example illustrates that they can be either strings *or* methods. For each of ``title``, ``link`` and ``description``, Django follows this algorithm:"
msgstr ""

#: ../../ref/contrib/syndication.txt:210
# e7bb2f789c9e4ff8a4b981a94b77b5f1
msgid "First, it tries to call a method, passing the ``obj`` argument, where ``obj`` is the object returned by ``get_object()``."
msgstr ""

#: ../../ref/contrib/syndication.txt:213
# 799d131fa88a42ba95071d1851944900
msgid "Failing that, it tries to call a method with no arguments."
msgstr ""

#: ../../ref/contrib/syndication.txt:215
# 2d91f1bea7384851a99eacd2c3be6cb2
msgid "Failing that, it uses the class attribute."
msgstr ""

#: ../../ref/contrib/syndication.txt:217
# 22ecc431a6d24a44aada0a6c858c996e
msgid "Also note that ``items()`` also follows the same algorithm -- first, it tries ``items(obj)``, then ``items()``, then finally an ``items`` class attribute (which should be a list)."
msgstr ""

#: ../../ref/contrib/syndication.txt:221
# c39c89be6aa74739a51f6214e1739ead
msgid "We are using a template for the item descriptions. It can be very simple:"
msgstr ""

#: ../../ref/contrib/syndication.txt:227
# 4f4ba02504d64466bced79d007da7cc7
msgid "However, you are free to add formatting as desired."
msgstr ""

#: ../../ref/contrib/syndication.txt:229
# 4f837e055af845aa87487c5f117bb299
msgid "The ``ExampleFeed`` class below gives full documentation on methods and attributes of :class:`~django.contrib.syndication.views.Feed` classes."
msgstr ""

#: ../../ref/contrib/syndication.txt:233
# de0e1a6664954dfab555715f62c006d6
msgid "Specifying the type of feed"
msgstr ""

#: ../../ref/contrib/syndication.txt:235
# 49f135ead3fa4d7ea2ccebc8a7434821
msgid "By default, feeds produced in this framework use RSS 2.0."
msgstr ""

#: ../../ref/contrib/syndication.txt:237
# 4bb1e0f88dc74de89f7732f3807879c4
msgid "To change that, add a ``feed_type`` attribute to your :class:`~django.contrib.syndication.views.Feed` class, like so::"
msgstr ""

#: ../../ref/contrib/syndication.txt:245
# 6dc3e4de48eb4f5391eb470b9b6521da
msgid "Note that you set ``feed_type`` to a class object, not an instance."
msgstr ""

#: ../../ref/contrib/syndication.txt:247
# a6be7658790f42d0b88bfa87e774f69c
msgid "Currently available feed types are:"
msgstr ""

#: ../../ref/contrib/syndication.txt:249
# c9108cd5ae134b86a8f3fc479aaab040
msgid ":class:`django.utils.feedgenerator.Rss201rev2Feed` (RSS 2.01. Default.)"
msgstr ""

#: ../../ref/contrib/syndication.txt:250
# 0dc2db799aed46ec92c60bd4ab8f3644
msgid ":class:`django.utils.feedgenerator.RssUserland091Feed` (RSS 0.91.)"
msgstr ""

#: ../../ref/contrib/syndication.txt:251
# e15e37b6336f4d05a8c2598b34b47a63
msgid ":class:`django.utils.feedgenerator.Atom1Feed` (Atom 1.0.)"
msgstr ""

#: ../../ref/contrib/syndication.txt:254
# 8c4f331b712d49dc97efe7df055ad801
msgid "Enclosures"
msgstr ""

#: ../../ref/contrib/syndication.txt:256
# 69e2affcfd4f45f4852eed02cfb1fc11
msgid "To specify enclosures, such as those used in creating podcast feeds, use the ``item_enclosure_url``, ``item_enclosure_length`` and ``item_enclosure_mime_type`` hooks. See the ``ExampleFeed`` class below for usage examples."
msgstr ""

#: ../../ref/contrib/syndication.txt:262
# df37243bb68545c1898355d9a887d402
msgid "Language"
msgstr ""

#: ../../ref/contrib/syndication.txt:264
# 1176289d9dfd42939e09758222f2bc75
msgid "Feeds created by the syndication framework automatically include the appropriate ``<language>`` tag (RSS 2.0) or ``xml:lang`` attribute (Atom). This comes directly from your :setting:`LANGUAGE_CODE` setting."
msgstr ""

#: ../../ref/contrib/syndication.txt:269
# 15b71af9f1574e15aa59a29d0d58c3d5
msgid "URLs"
msgstr ""

#: ../../ref/contrib/syndication.txt:271
# 67c614d504c746d1aa77e5e6c1a25191
msgid "The ``link`` method/attribute can return either an absolute path (e.g. :file:`\"/blog/\"`) or a URL with the fully-qualified domain and protocol (e.g. ``\"http://www.example.com/blog/\"``). If ``link`` doesn't return the domain, the syndication framework will insert the domain of the current site, according to your :setting:`SITE_ID setting <SITE_ID>`."
msgstr ""

#: ../../ref/contrib/syndication.txt:277
# c69d39cfdc1d4b6e96c45dfbab837d36
msgid "Atom feeds require a ``<link rel=\"self\">`` that defines the feed's current location. The syndication framework populates this automatically, using the domain of the current site according to the :setting:`SITE_ID` setting."
msgstr ""

#: ../../ref/contrib/syndication.txt:282
# bea78a2427124e72961246242a8486a5
msgid "Publishing Atom and RSS feeds in tandem"
msgstr ""

#: ../../ref/contrib/syndication.txt:284
# b8160ee531764a34b4b24b4b03d18200
msgid "Some developers like to make available both Atom *and* RSS versions of their feeds. That's easy to do with Django: Just create a subclass of your :class:`~django.contrib.syndication.views.Feed` class and set the ``feed_type`` to something different. Then update your URLconf to add the extra versions."
msgstr ""

#: ../../ref/contrib/syndication.txt:290
# 581b0651380d49e891ef72fe62c70536
msgid "Here's a full example::"
msgstr ""

#: ../../ref/contrib/syndication.txt:309
# 3f884cec840b431c90df04c0368a1b80
msgid "In this example, the RSS feed uses a ``description`` while the Atom feed uses a ``subtitle``. That's because Atom feeds don't provide for a feed-level \"description,\" but they *do* provide for a \"subtitle.\""
msgstr ""

#: ../../ref/contrib/syndication.txt:313
# 7ac57efbc24e4a9980263b23c557adc3
msgid "If you provide a ``description`` in your :class:`~django.contrib.syndication.views.Feed` class, Django will *not* automatically put that into the ``subtitle`` element, because a subtitle and description are not necessarily the same thing. Instead, you should define a ``subtitle`` attribute."
msgstr ""

#: ../../ref/contrib/syndication.txt:319
# d3daa15af7154941a5baf051d9eacb6a
msgid "In the above example, we simply set the Atom feed's ``subtitle`` to the RSS feed's ``description``, because it's quite short already."
msgstr ""

#: ../../ref/contrib/syndication.txt:322
# db1cfe83d01d4b1ea58b195d822c2b39
msgid "And the accompanying URLconf::"
msgstr ""

#: ../../ref/contrib/syndication.txt:335
# 80c51c971f2b4672bad4d95447729ab7
msgid "Feed class reference"
msgstr ""

#: ../../ref/contrib/syndication.txt:339
# c0b9ac861e17423294124f9e97c912bc
msgid "This example illustrates all possible attributes and methods for a :class:`~django.contrib.syndication.views.Feed` class::"
msgstr ""

#: ../../ref/contrib/syndication.txt:785
# 2b59d0c131b34dc090586c95140010cb
msgid "The low-level framework"
msgstr ""

#: ../../ref/contrib/syndication.txt:787
# 53be3526593c48b79eca0b9468b0d20b
msgid "Behind the scenes, the high-level RSS framework uses a lower-level framework for generating feeds' XML. This framework lives in a single module: `django/utils/feedgenerator.py`_."
msgstr ""

#: ../../ref/contrib/syndication.txt:791
# 3fe1a4fdda54431d90ade718303766b7
msgid "You use this framework on your own, for lower-level feed generation. You can also create custom feed generator subclasses for use with the ``feed_type`` ``Feed`` option."
msgstr ""

#: ../../ref/contrib/syndication.txt:798
# 40ee42fdedf34495b0f5a10d72c93e96
msgid "``SyndicationFeed`` classes"
msgstr ""

#: ../../ref/contrib/syndication.txt:800
# 1a949dd4abeb4523afc3147476ec52bb
msgid "The :mod:`~django.utils.feedgenerator` module contains a base class:"
msgstr ""

#: ../../ref/contrib/syndication.txt:802
# 7f4d228fa69f4ec2834b5e711872f5d0
msgid ":class:`django.utils.feedgenerator.SyndicationFeed`"
msgstr ""

#: ../../ref/contrib/syndication.txt:804
# b427479919dc4889b9d43d136410169d
msgid "and several subclasses:"
msgstr ""

#: ../../ref/contrib/syndication.txt:806
# 79ddc690c3144ecba8bd2d24c7a646e0
msgid ":class:`django.utils.feedgenerator.RssUserland091Feed`"
msgstr ""

#: ../../ref/contrib/syndication.txt:807
# 0dc3a364067d49f0ac7f43bbdf96b7f7
msgid ":class:`django.utils.feedgenerator.Rss201rev2Feed`"
msgstr ""

#: ../../ref/contrib/syndication.txt:808
# 3d5d99ba32e848ab815a1e1923dd46db
msgid ":class:`django.utils.feedgenerator.Atom1Feed`"
msgstr ""

#: ../../ref/contrib/syndication.txt:810
# f8a69020528240c29380223dc9df433a
msgid "Each of these three classes knows how to render a certain type of feed as XML. They share this interface:"
msgstr ""

#: ../../ref/contrib/syndication.txt:814
# 252232e18d9143feb59567acf927121b
msgid "Initialize the feed with the given dictionary of metadata, which applies to the entire feed. Required keyword arguments are:"
msgstr ""

#: ../../ref/contrib/syndication.txt:817
#: ../../ref/contrib/syndication.txt:845
# 2ee6d5c24d3f46bfbe5aff89615eff12
# 428cada0ce7c46edb8aa0af2da2421d5
msgid "``title``"
msgstr ""

#: ../../ref/contrib/syndication.txt:819
#: ../../ref/contrib/syndication.txt:847
# 6aa16bda07a842de8a32d3a515249694
# e5596a759aca479894d5b7f0f8170cef
msgid "``description``"
msgstr ""

#: ../../ref/contrib/syndication.txt:821
# 571003b90e6244948f32f316e1e05948
msgid "There's also a bunch of other optional keywords:"
msgstr ""

#: ../../ref/contrib/syndication.txt:823
# 2d38516724e647d18b584c77d3434c21
msgid "``language``"
msgstr ""

#: ../../ref/contrib/syndication.txt:824
#: ../../ref/contrib/syndication.txt:851
# 3b652145524640c0a77ed5f2bd0b2943
# 50774a2010a84a5a96c5a1d33bbf76c4
msgid "``author_email``"
msgstr ""

#: ../../ref/contrib/syndication.txt:825
#: ../../ref/contrib/syndication.txt:852
# d8fba92b3bf345c6b9f8d522359cd150
# 86fd2ff39f0e4a1495e5cc8d3fa2583e
msgid "``author_name``"
msgstr ""

#: ../../ref/contrib/syndication.txt:826
#: ../../ref/contrib/syndication.txt:853
# 37e2f048f6f246be9761985482caec22
# f27fdf58e4c14dd5b63cd9da5821db32
msgid "``author_link``"
msgstr ""

#: ../../ref/contrib/syndication.txt:827
# 989d88871a5e4b82951864e430972028
msgid "``subtitle``"
msgstr ""

#: ../../ref/contrib/syndication.txt:828
#: ../../ref/contrib/syndication.txt:858
# 77c52a9d449241e0a2ac7f2685ddcec6
# 407038e8778c4a85a1c1b7cb8be8ffa3
msgid "``categories``"
msgstr ""

#: ../../ref/contrib/syndication.txt:829
# d3a8373eb90447f290ecdfcd21ec1c1a
msgid "``feed_url``"
msgstr ""

#: ../../ref/contrib/syndication.txt:830
# a85b70ab24c04aec915e0274dc0c0e60
msgid "``feed_copyright``"
msgstr ""

#: ../../ref/contrib/syndication.txt:831
# 34097da80f824698819dc206dfc57f3d
msgid "``feed_guid``"
msgstr ""

#: ../../ref/contrib/syndication.txt:832
#: ../../ref/contrib/syndication.txt:860
# 78362582c7184684b761827baf2bde24
# 5090258e7b054e649ffe860a0d59a0f8
msgid "``ttl``"
msgstr ""

#: ../../ref/contrib/syndication.txt:834
# e3c7436af96d4f31ace8f886ea0d67e7
msgid "Any extra keyword arguments you pass to ``__init__`` will be stored in ``self.feed`` for use with `custom feed generators`_."
msgstr ""

#: ../../ref/contrib/syndication.txt:837
#: ../../ref/utils.txt:369
# 56734173050844218e512c9275fffb00
# 9a41165a50d04eb7a01c5ac24e3ae567
msgid "All parameters should be Unicode objects, except ``categories``, which should be a sequence of Unicode objects."
msgstr ""

#: ../../ref/contrib/syndication.txt:841
# 90690f3b3825453991eba67cbe3aa9ed
msgid "Add an item to the feed with the given parameters."
msgstr ""

#: ../../ref/contrib/syndication.txt:843
# 7a20deb76e02487b87460fa96809ae16
msgid "Required keyword arguments are:"
msgstr ""

#: ../../ref/contrib/syndication.txt:849
# 9d872aefe6d544d1957819ffd4ca2547
msgid "Optional keyword arguments are:"
msgstr ""

#: ../../ref/contrib/syndication.txt:854
# 78b47992422441aa8c4eae298c215cb5
msgid "``pubdate``"
msgstr ""

#: ../../ref/contrib/syndication.txt:855
# 0162b01f9daa49e1a741a811af5a2930
msgid "``comments``"
msgstr ""

#: ../../ref/contrib/syndication.txt:856
# 18a95cca06bc415cbb38156eb4131c24
msgid "``unique_id``"
msgstr ""

#: ../../ref/contrib/syndication.txt:857
# 303681b5514b433f804f072a687bed76
msgid "``enclosure``"
msgstr ""

#: ../../ref/contrib/syndication.txt:859
# 382ae742b2764dd38ca73dda682ef81f
msgid "``item_copyright``"
msgstr ""

#: ../../ref/contrib/syndication.txt:862
# 3ca4696c96ab490e85fbd56ec8808697
msgid "Extra keyword arguments will be stored for `custom feed generators`_."
msgstr ""

#: ../../ref/contrib/syndication.txt:864
# 6e4380bcb9d84c74acfa6e9c799ffe3a
msgid "All parameters, if given, should be Unicode objects, except:"
msgstr ""

#: ../../ref/contrib/syndication.txt:866
# 9dd897aa70764cc1967a1bbefb586ec6
msgid "``pubdate`` should be a Python  :class:`~datetime.datetime` object."
msgstr ""

#: ../../ref/contrib/syndication.txt:867
# 123c7034a070455487e636057d68c5cd
msgid "``enclosure`` should be an instance of :class:`django.utils.feedgenerator.Enclosure`."
msgstr ""

#: ../../ref/contrib/syndication.txt:869
# 9cef510dfe9a413e990c8b745812690d
msgid "``categories`` should be a sequence of Unicode objects."
msgstr ""

#: ../../ref/contrib/syndication.txt:872
# bfedbd75a4e34429bfe97063537098c5
msgid "Outputs the feed in the given encoding to outfile, which is a file-like object."
msgstr ""

#: ../../ref/contrib/syndication.txt:875
# 73b249b9ba6541cbb4fe00d66d68be04
msgid "Returns the feed as a string in the given encoding."
msgstr ""

#: ../../ref/contrib/syndication.txt:877
# 9ef949f1b0524694a2c6f157fa9aebbc
msgid "For example, to create an Atom 1.0 feed and print it to standard output::"
msgstr ""

#: ../../ref/contrib/syndication.txt:903
# e75e1638c9d54e3c940b664aefe8844a
msgid "Custom feed generators"
msgstr ""

#: ../../ref/contrib/syndication.txt:905
# f71b3799f170446d9928284859cb3fcd
msgid "If you need to produce a custom feed format, you've got a couple of options."
msgstr ""

#: ../../ref/contrib/syndication.txt:907
# 4b74e8926e354c3bb03c026bee6da07a
msgid "If the feed format is totally custom, you'll want to subclass ``SyndicationFeed`` and completely replace the ``write()`` and ``writeString()`` methods."
msgstr ""

#: ../../ref/contrib/syndication.txt:911
# 01b5e24563ae4f3bb5d37ab38d9738cf
msgid "However, if the feed format is a spin-off of RSS or Atom (i.e. GeoRSS_, Apple's `iTunes podcast format`_, etc.), you've got a better choice. These types of feeds typically add extra elements and/or attributes to the underlying format, and there are a set of methods that ``SyndicationFeed`` calls to get these extra attributes. Thus, you can subclass the appropriate feed generator class (``Atom1Feed`` or ``Rss201rev2Feed``) and extend these callbacks. They are:"
msgstr ""

#: ../../ref/contrib/syndication.txt:922
# 6006256a55cf450abcb72e30609f67fd
msgid "Return a ``dict`` of attributes to add to the root feed element (``feed``/``channel``)."
msgstr ""

#: ../../ref/contrib/syndication.txt:926
# a68874aa5e1b48daad4f4c306901f9af
msgid "Callback to add elements inside the root feed element (``feed``/``channel``). ``handler`` is an :class:`~xml.sax.saxutils.XMLGenerator` from Python's built-in SAX library; you'll call methods on it to add to the XML document in process."
msgstr ""

#: ../../ref/contrib/syndication.txt:932
# b591f8b97ef7442eb403b85e1b2b675b
msgid "Return a ``dict`` of attributes to add to each item (``item``/``entry``) element. The argument, ``item``, is a dictionary of all the data passed to ``SyndicationFeed.add_item()``."
msgstr ""

#: ../../ref/contrib/syndication.txt:937
# f83dac4002b44301acc6c6468fd26dd3
msgid "Callback to add elements to each item (``item``/``entry``) element. ``handler`` and ``item`` are as above."
msgstr ""

#: ../../ref/contrib/syndication.txt:942
# c4ea49ffe8fc4371bc3c46f1adfec056
msgid "If you override any of these methods, be sure to call the superclass methods since they add the required elements for each feed format."
msgstr ""

#: ../../ref/contrib/syndication.txt:945
# 7f948ff144064db28961b2042b63ca85
msgid "For example, you might start implementing an iTunes RSS feed generator like so::"
msgstr ""

#: ../../ref/contrib/syndication.txt:957
# fb8c348d16254427a609cdffe7caf6d9
msgid "Obviously there's a lot more work to be done for a complete custom feed class, but the above example should demonstrate the basic idea."
msgstr ""

#: ../../ref/contrib/webdesign.txt:3
#: ../../ref/templates/builtins.txt:2343
# f75de671d3684bb18ee40b4ca1c26c05
# 213d45291b074bbd94db1883804ce52f
msgid "django.contrib.webdesign"
msgstr ""

#: ../../ref/contrib/webdesign.txt:9
# cce9e6c7055b4767acf02176badb1901
msgid "The ``django.contrib.webdesign`` package, part of the :doc:`\"django.contrib\" add-ons </ref/contrib/index>`, provides various Django helpers that are particularly useful to Web *designers* (as opposed to developers)."
msgstr ""

#: ../../ref/contrib/webdesign.txt:14
# 42fea29a806b4398b4dd81d8adf39b41
msgid "At present, the package contains only a single template tag. If you have ideas for Web-designer-friendly functionality in Django, please :doc:`suggest them </internals/contributing/index>`."
msgstr ""

#: ../../ref/contrib/webdesign.txt:21
# 4a287711f8bb4261bd352fbf50dc490c
msgid "To use these template tags, add ``'django.contrib.webdesign'`` to your :setting:`INSTALLED_APPS` setting. Once you've done that, use ``{% load webdesign %}`` in a template to give your template access to the tags."
msgstr ""

#: ../../ref/contrib/webdesign.txt:27
# 43bdd2f21ebe4ab38f40e3742da00c8b
msgid "lorem"
msgstr ""

#: ../../ref/contrib/webdesign.txt:29
# 5fbd193141b44b4db476ef27b396faa6
msgid "Displays random \"lorem ipsum\" Latin text. This is useful for providing sample data in templates."
msgstr ""

#: ../../ref/contrib/webdesign.txt:36
# 5fc8d762b4da447b8d7d56245967dd61
msgid "The ``{% lorem %}`` tag can be used with zero, one, two or three arguments. The arguments are:"
msgstr ""

#: ../../ref/contrib/webdesign.txt:42
# 2761c560102942d289e3a6361a3c5030
msgid "``count``"
msgstr ""

#: ../../ref/contrib/webdesign.txt:42
# db3c2a527db84adc81108738b88b6d6f
msgid "A number (or variable) containing the number of paragraphs or words to generate (default is 1)."
msgstr ""

#: ../../ref/contrib/webdesign.txt:44
# 319e7ac90d864499bc99319fa4bc4bd6
msgid "``method``"
msgstr ""

#: ../../ref/contrib/webdesign.txt:44
# 6812da078dbf427da63330985fe26eae
msgid "Either ``w`` for words, ``p`` for HTML paragraphs or ``b`` for plain-text paragraph blocks (default is ``b``)."
msgstr ""

#: ../../ref/contrib/webdesign.txt:46
# b59a46c22f684a88a2d5a26290d539c2
msgid "``random``"
msgstr ""

#: ../../ref/contrib/webdesign.txt:46
# 6925318f786744dfb96e30a67cad90af
msgid "The word ``random``, which if given, does not use the common paragraph (\"Lorem ipsum dolor sit amet...\") when generating text."
msgstr ""

#: ../../ref/contrib/webdesign.txt:53
# 4e462b69338443eb9ce3f892908a3dd2
msgid "``{% lorem %}`` will output the common \"lorem ipsum\" paragraph."
msgstr ""

#: ../../ref/contrib/webdesign.txt:54
# 899583b71c2d4c528d9f690e5580924a
msgid "``{% lorem 3 p %}`` will output the common \"lorem ipsum\" paragraph and two random paragraphs each wrapped in HTML ``<p>`` tags."
msgstr ""

#: ../../ref/contrib/webdesign.txt:56
# 4d153da1c0bd4b1493f401a82f7ad686
msgid "``{% lorem 2 w random %}`` will output two random Latin words."
msgstr ""

#: ../../ref/databases.txt:3
# 5ef3d538adbd4051853cc8d12182960e
msgid "Databases"
msgstr ""

#: ../../ref/databases.txt:5
# f7921d283e2a474494f32c116808efc1
msgid "Django attempts to support as many features as possible on all database backends. However, not all database backends are alike, and we've had to make design decisions on which features to support and which assumptions we can make safely."
msgstr ""

#: ../../ref/databases.txt:10
# b94e60e8c59f4377a99ab86e41f2e09a
msgid "This file describes some of the features that might be relevant to Django usage. Of course, it is not intended as a replacement for server-specific documentation or reference manuals."
msgstr ""

#: ../../ref/databases.txt:17
# 939d3c0d3e13450d8a36b685e0f7f60a
msgid "PostgreSQL notes"
msgstr ""

#: ../../ref/databases.txt:21
# 8d0768a8b66743e4b310904fd36450ba
msgid "Django supports PostgreSQL 8.2 and higher."
msgstr ""

#: ../../ref/databases.txt:24
# c7556e05ca844d4799e278398d67812b
msgid "PostgreSQL 8.2 to 8.2.4"
msgstr ""

#: ../../ref/databases.txt:26
# 75c6b84dce1c4789bea50443be54dfc6
msgid "The implementation of the population statistics aggregates ``STDDEV_POP`` and ``VAR_POP`` that shipped with PostgreSQL 8.2 to 8.2.4 are `known to be faulty`_. Users of these releases of PostgreSQL are advised to upgrade to `Release 8.2.5`_ or later. Django will raise a ``NotImplementedError`` if you attempt to use the ``StdDev(sample=False)`` or ``Variance(sample=False)`` aggregate with a database backend that falls within the affected release range."
msgstr ""

#: ../../ref/databases.txt:37
# d138d2b1939c47c6811486d5108c7151
msgid "PostgreSQL connection settings"
msgstr ""

#: ../../ref/databases.txt:39
# c496c6520d634bc3847b27e241bf9eba
msgid "See :setting:`HOST` for details."
msgstr ""

#: ../../ref/databases.txt:42
# 6870a5a537da40cfa2684f6eabcf09ed
msgid "Optimizing PostgreSQL's configuration"
msgstr ""

#: ../../ref/databases.txt:44
# b565a9a4a11c4b6a8c3c38cb8f301616
msgid "Django needs the following parameters for its database connections:"
msgstr ""

#: ../../ref/databases.txt:46
# 594d5ea4c5544ce980f01450750fe0fc
msgid "``client_encoding``: ``'UTF8'``,"
msgstr ""

#: ../../ref/databases.txt:47
# 5016590219d44f6ebbfb103e98be3d27
msgid "``default_transaction_isolation``: ``'read committed'``,"
msgstr ""

#: ../../ref/databases.txt:48
# e84a43d8abdb4c50967456e0ca1b7ce3
msgid "``timezone``: ``'UTC'`` when :setting:`USE_TZ` is ``True``, value of :setting:`TIME_ZONE` otherwise."
msgstr ""

#: ../../ref/databases.txt:51
# 474f639d2f7443ed84b4248197e26474
msgid "If these parameters already have the correct values, Django won't set them for every new connection, which improves performance slightly. You can configure them directly in :file:`postgresql.conf` or more conveniently per database user with `ALTER ROLE`_."
msgstr ""

#: ../../ref/databases.txt:56
# 369a645b82af4ef599d04709bef70382
msgid "Django will work just fine without this optimization, but each new connection will do some additional queries to set these parameters."
msgstr ""

#: ../../ref/databases.txt:62
# 308489ea85eb47c48b105ab02f48a411
msgid "Transaction handling"
msgstr ""

#: ../../ref/databases.txt:64
# 8dc66d847db64d88bf5fe080b5b229fe
msgid ":doc:`By default </topics/db/transactions>`, Django runs with an open transaction which it commits automatically when any built-in, data-altering model function is called. The PostgreSQL backends normally operate the same as any other Django backend in this respect."
msgstr ""

#: ../../ref/databases.txt:72
# 9a8d9eccdae24f5fb104c8e1ab25123f
msgid "Autocommit mode"
msgstr ""

#: ../../ref/databases.txt:74
# 938f19a19157402ea7f86498383ad9f4
msgid "If your application is particularly read-heavy and doesn't make many database writes, the overhead of a constantly open transaction can sometimes be noticeable. For those situations, you can configure Django to use *\"autocommit\"* behavior for the connection, meaning that each database operation will normally be in its own transaction, rather than having the transaction extend over multiple operations. In this case, you can still manually start a transaction if you're doing something that requires consistency across multiple database operations. The autocommit behavior is enabled by setting the ``autocommit`` key in the :setting:`OPTIONS` part of your database configuration in :setting:`DATABASES`::"
msgstr ""

#: ../../ref/databases.txt:90
# 128b702b91b84051b137f5bc228f8ea8
msgid "In this configuration, Django still ensures that :ref:`delete() <topics-db-queries-delete>` and :ref:`update() <topics-db-queries-update>` queries run inside a single transaction, so that either all the affected objects are changed or none of them are."
msgstr ""

#: ../../ref/databases.txt:97
# 8f038f54106a4e899ea4a07c1ef97413
msgid "This functionality is not the same as the :ref:`autocommit <topics-db-transactions-autocommit>` decorator. That decorator is a Django-level implementation that commits automatically after data changing operations. The feature enabled using the :setting:`OPTIONS` option provides autocommit behavior at the database adapter level. It commits after *every* operation."
msgstr ""

#: ../../ref/databases.txt:104
# 36deee593c014fd8983de0267339eb0c
msgid "If you are using this feature and performing an operation akin to delete or updating that requires multiple operations, you are strongly recommended to wrap you operations in manual transaction handling to ensure data consistency. You should also audit your existing code for any instances of this behavior before enabling this feature. It's faster, but it provides less automatic protection for multi-call operations."
msgstr ""

#: ../../ref/databases.txt:112
# 9f4e58240aa24c8e9c40e142a006d779
msgid "Indexes for ``varchar`` and ``text`` columns"
msgstr ""

#: ../../ref/databases.txt:114
# 7bcdc5935ce34bd4888f07f8b2c9cf71
msgid "When specifying ``db_index=True`` on your model fields, Django typically outputs a single ``CREATE INDEX`` statement.  However, if the database type for the field is either ``varchar`` or ``text`` (e.g., used by ``CharField``, ``FileField``, and ``TextField``), then Django will create an additional index that uses an appropriate `PostgreSQL operator class`_ for the column.  The extra index is necessary to correctly perform lookups that use the ``LIKE`` operator in their SQL, as is done with the ``contains`` and ``startswith`` lookup types."
msgstr ""

#: ../../ref/databases.txt:128
# 5386bd72605c4d20a542b029b484d31c
msgid "MySQL notes"
msgstr ""

#: ../../ref/databases.txt:131
# 187fbeb5eabb43788b3a99e28cbc41d9
msgid "Version support"
msgstr ""

#: ../../ref/databases.txt:133
# 50aad69a0d744df3b35d1f0f65879050
msgid "Django supports MySQL 5.0.3 and higher."
msgstr ""

#: ../../ref/databases.txt:135
# 7856e087304449f49bf2cd588791d485
msgid "`MySQL 5.0`_ adds the ``information_schema`` database, which contains detailed data on all database schema. Django's ``inspectdb`` feature uses it."
msgstr ""

#: ../../ref/databases.txt:141
# f3c0b8c280e2473dab73601d37fe8692
msgid "Django expects the database to support Unicode (UTF-8 encoding) and delegates to it the task of enforcing transactions and referential integrity. It is important to be aware of the fact that the two latter ones aren't actually enforced by MySQL when using the MyISAM storage engine, see the next section."
msgstr ""

#: ../../ref/databases.txt:152
# 9bcd95e45b0240d7bab23295deb2b093
msgid "Storage engines"
msgstr ""

#: ../../ref/databases.txt:154
# bee8119a478c4b76b3f14689b88a2959
msgid "MySQL has several `storage engines`_ (previously called table types). You can change the default storage engine in the server configuration."
msgstr ""

#: ../../ref/databases.txt:157
# 8ce8228ef0ac4c229a3875cd45fdacad
msgid "Until MySQL 5.5.4, the default engine was MyISAM_ [#]_. The main drawbacks of MyISAM are that it doesn't support transactions or enforce foreign-key constraints. On the plus side, it's currently the only engine that supports full-text indexing and searching."
msgstr ""

#: ../../ref/databases.txt:162
# 103fab0e4cb2421f8bec300955fff2d6
msgid "Since MySQL 5.5.5, the default storage engine is InnoDB_. This engine is fully transactional and supports foreign key references. It's probably the best choice at this point."
msgstr ""

#: ../../ref/databases.txt:166
# 3743ef30fdeb4b9cb156fd45d334ec62
msgid "If you upgrade an existing project to MySQL 5.5.5 and subsequently add some tables, ensure that your tables are using the same storage engine (i.e. MyISAM vs. InnoDB). Specifically, if tables that have a ``ForeignKey`` between them use different storage engines, you may see an error like the following when running ``syncdb``::"
msgstr ""

#: ../../ref/databases.txt:178
# abacbf654179457ab903bc8daae2e9e3
msgid "In previous versions of Django, fixtures with forward references (i.e. relations to rows that have not yet been inserted into the database) would fail to load when using the InnoDB storage engine. This was due to the fact that InnoDB deviates from the SQL standard by checking foreign key constraints immediately instead of deferring the check until the transaction is committed. This problem has been resolved in Django 1.4. Fixture data is now loaded with foreign key checks turned off; foreign key checks are then re-enabled when the data has finished loading, at which point the entire table is checked for invalid foreign key references and an `IntegrityError` is raised if any are found."
msgstr ""

#: ../../ref/databases.txt:192
# 190b2448536e4836963e93ea7d68f085
msgid "Unless this was changed by the packager of your MySQL package. We've had reports that the Windows Community Server installer sets up InnoDB as the default storage engine, for example."
msgstr ""

#: ../../ref/databases.txt:197
# fc4e979e94544c409b40f3cf26d8b30e
msgid "MySQLdb"
msgstr ""

#: ../../ref/databases.txt:199
# 4e8bcf7b4b3d4d97bef6732f52e120f0
msgid "`MySQLdb`_ is the Python interface to MySQL. Version 1.2.1p2 or later is required for full MySQL support in Django."
msgstr ""

#: ../../ref/databases.txt:203
# c66b7687801d456197b4a33427db9230
msgid "If you see ``ImportError: cannot import name ImmutableSet`` when trying to use Django, your MySQLdb installation may contain an outdated ``sets.py`` file that conflicts with the built-in module of the same name from Python 2.4 and later. To fix this, verify that you have installed MySQLdb version 1.2.1p2 or newer, then delete the ``sets.py`` file in the MySQLdb directory that was left by an earlier version."
msgstr ""

#: ../../ref/databases.txt:213
# fa366e4124954c5096bd8eb380af6432
msgid "Creating your database"
msgstr ""

#: ../../ref/databases.txt:215
# 1907e22157fc40f5b727dd403c69e032
msgid "You can `create your database`_ using the command-line tools and this SQL::"
msgstr ""

#: ../../ref/databases.txt:219
# 9f0455d293d64701af24789399583be0
msgid "This ensures all tables and columns will use UTF-8 by default."
msgstr ""

#: ../../ref/databases.txt:226
# f4e7a5f3e870447aaee2ff070d39a7a9
msgid "Collation settings"
msgstr ""

#: ../../ref/databases.txt:228
# 650f413240194a719f44807b62bbeaf0
msgid "The collation setting for a column controls the order in which data is sorted as well as what strings compare as equal. It can be set on a database-wide level and also per-table and per-column. This is `documented thoroughly`_ in the MySQL documentation. In all cases, you set the collation by directly manipulating the database tables; Django doesn't provide a way to set this on the model definition."
msgstr ""

#: ../../ref/databases.txt:237
# 1a917f33f05044749e5ccecf8438c293
msgid "By default, with a UTF-8 database, MySQL will use the ``utf8_general_ci_swedish`` collation. This results in all string equality comparisons being done in a *case-insensitive* manner. That is, ``\"Fred\"`` and ``\"freD\"`` are considered equal at the database level. If you have a unique constraint on a field, it would be illegal to try to insert both ``\"aa\"`` and ``\"AA\"`` into the same column, since they compare as equal (and, hence, non-unique) with the default collation."
msgstr ""

#: ../../ref/databases.txt:245
# caaa89bad5a9417b802c3c0817d1546b
msgid "In many cases, this default will not be a problem. However, if you really want case-sensitive comparisons on a particular column or table, you would change the column or table to use the ``utf8_bin`` collation. The main thing to be aware of in this case is that if you are using MySQLdb 1.2.2, the database backend in Django will then return bytestrings (instead of unicode strings) for any character fields it receive from the database. This is a strong variation from Django's normal practice of *always* returning unicode strings. It is up to you, the developer, to handle the fact that you will receive bytestrings if you configure your table(s) to use ``utf8_bin`` collation. Django itself should mostly work smoothly with such columns (except for the ``contrib.sessions`` ``Session`` and ``contrib.admin`` ``LogEntry`` tables described below), but your code must be prepared to call ``django.utils.encoding.smart_text()`` at times if it really wants to work with consistent data -- Django will not do this for you (the database backend layer and the model population layer are separated internally so the database layer doesn't know it needs to make this conversion in this one particular case)."
msgstr ""

#: ../../ref/databases.txt:262
# b4558e49f54c492e81be6f66bc5b8dfa
msgid "If you're using MySQLdb 1.2.1p2, Django's standard :class:`~django.db.models.CharField` class will return unicode strings even with ``utf8_bin`` collation. However, :class:`~django.db.models.TextField` fields will be returned as an ``array.array`` instance (from Python's standard ``array`` module). There isn't a lot Django can do about that, since, again, the information needed to make the necessary conversions isn't available when the data is read in from the database. This problem was `fixed in MySQLdb 1.2.2`_, so if you want to use :class:`~django.db.models.TextField` with ``utf8_bin`` collation, upgrading to version 1.2.2 and then dealing with the bytestrings (which shouldn't be too difficult) as described above is the recommended solution."
msgstr ""

#: ../../ref/databases.txt:274
# 172c262ae4b94b60a2bcef550794bb4a
msgid "Should you decide to use ``utf8_bin`` collation for some of your tables with MySQLdb 1.2.1p2 or 1.2.2, you should still use ``utf8_collation_ci_swedish`` (the default) collation for the ``django.contrib.sessions.models.Session`` table (usually called ``django_session``) and the ``django.contrib.admin.models.LogEntry`` table (usually called ``django_admin_log``). Those are the two standard tables that use :class:`~django.db.models.TextField` internally."
msgstr ""

#: ../../ref/databases.txt:285
#: ../../ref/databases.txt:612
# 3a78efcbdd6749d9be94a87ef0640c44
# 5de47e99ee874b08b0656d57cc9fcc94
msgid "Connecting to the database"
msgstr ""

#: ../../ref/databases.txt:287
# 51c19d4a20374d0e919051ecc28666e5
msgid "Refer to the :doc:`settings documentation </ref/settings>`."
msgstr ""

#: ../../ref/databases.txt:289
# 142d7ebd0bbc47b48dc269040f8eab95
msgid "Connection settings are used in this order:"
msgstr ""

#: ../../ref/databases.txt:291
# 5a1b6ab9a16544a884facccd2e27a55f
msgid ":setting:`OPTIONS`."
msgstr ""

#: ../../ref/databases.txt:292
# 0393585dcac14b209629ab79858d368b
msgid ":setting:`NAME`, :setting:`USER`, :setting:`PASSWORD`, :setting:`HOST`, :setting:`PORT`"
msgstr ""

#: ../../ref/databases.txt:294
# bbbbcbeb26d74ca8b9a67373f2ec54d7
msgid "MySQL option files."
msgstr ""

#: ../../ref/databases.txt:296
# ec8e9613f7ca4a1ca676040ea3aa5fb6
msgid "In other words, if you set the name of the database in :setting:`OPTIONS`, this will take precedence over :setting:`NAME`, which would override anything in a `MySQL option file`_."
msgstr ""

#: ../../ref/databases.txt:300
# 219d5b76ace54a51af4dd2038e8823d7
msgid "Here's a sample configuration which uses a MySQL option file::"
msgstr ""

#: ../../ref/databases.txt:320
# a35d8385c11c4f16b49efb97a22b7e81
msgid "Several other MySQLdb connection options may be useful, such as ``ssl``, ``use_unicode``, ``init_command``, and ``sql_mode``. Consult the `MySQLdb documentation`_ for more details."
msgstr ""

#: ../../ref/databases.txt:328
# c99917402817473db715aa35a1ec6894
msgid "Creating your tables"
msgstr ""

#: ../../ref/databases.txt:330
# 58ce0aa4987e44409579155ce4d7cf18
msgid "When Django generates the schema, it doesn't specify a storage engine, so tables will be created with whatever default storage engine your database server is configured for. The easiest solution is to set your database server's default storage engine to the desired engine."
msgstr ""

#: ../../ref/databases.txt:335
# 07edcd28752a4ec79d56ebfc4f3e1252
msgid "If you're using a hosting service and can't change your server's default storage engine, you have a couple of options."
msgstr ""

#: ../../ref/databases.txt:338
# 41d74bd47629487884a552e02afaf547
msgid "After the tables are created, execute an ``ALTER TABLE`` statement to convert a table to a new storage engine (such as InnoDB)::"
msgstr ""

#: ../../ref/databases.txt:343
# 3c0815b619d94d3e80d12da01bd13994
msgid "This can be tedious if you have a lot of tables."
msgstr ""

#: ../../ref/databases.txt:345
# b2d32b0b5a3647c4b9bf9e1835b1fe7d
msgid "Another option is to use the ``init_command`` option for MySQLdb prior to creating your tables::"
msgstr ""

#: ../../ref/databases.txt:352
# 9261153ae0b44b40998baab9e55c6358
msgid "This sets the default storage engine upon connecting to the database. After your tables have been created, you should remove this option as it adds a query that is only needed during table creation to each database connection."
msgstr ""

#: ../../ref/databases.txt:357
# 6ca35e827dfb4ce1bb1e9e8965b1832a
msgid "Another method for changing the storage engine is described in AlterModelOnSyncDB_."
msgstr ""

#: ../../ref/databases.txt:363
#: ../../ref/models/options.txt:45
# 71f99df344a649c0bdefde48ab80d2ef
# 2e009daadaf84676a00c382f9ede9b63
msgid "Table names"
msgstr ""

#: ../../ref/databases.txt:365
# 23aa3804d7134653be749bcf77638265
msgid "There are `known issues`_ in even the latest versions of MySQL that can cause the case of a table name to be altered when certain SQL statements are executed under certain conditions. It is recommended that you use lowercase table names, if possible, to avoid any problems that might arise from this behavior. Django uses lowercase table names when it auto-generates table names from models, so this is mainly a consideration if you are overriding the table name via the :class:`~django.db.models.Options.db_table` parameter."
msgstr ""

#: ../../ref/databases.txt:376
# 0ee8debaeaf3474792695d63c0a8af2c
msgid "Savepoints"
msgstr ""

#: ../../ref/databases.txt:378
# d92ea7bfde1b407bad9633e788f28ef1
msgid "Both the Django ORM and MySQL (when using the InnoDB :ref:`storage engine <mysql-storage-engines>`) support database :ref:`savepoints <topics-db-transactions-savepoints>`, but this feature wasn't available in Django until version 1.4 when such supports was added."
msgstr ""

#: ../../ref/databases.txt:383
# e5da807520b6484a940caac9e9e67b5d
msgid "If you use the MyISAM storage engine please be aware of the fact that you will receive database-generated errors if you try to use the :ref:`savepoint-related methods of the transactions API <topics-db-transactions-savepoints>`. The reason for this is that detecting the storage engine of a MySQL database/table is an expensive operation so it was decided it isn't worth to dynamically convert these methods in no-op's based in the results of such detection."
msgstr ""

#: ../../ref/databases.txt:391
# 11ca9e35ec47434b9078224c90a5f13b
msgid "Notes on specific fields"
msgstr ""

#: ../../ref/databases.txt:394
# f5798bd0c29c49ba9ec9f76a7ae3ffb3
msgid "Character fields"
msgstr ""

#: ../../ref/databases.txt:396
# 268b04ddeb274fc9be53dfddbf861e13
msgid "Any fields that are stored with ``VARCHAR`` column types have their ``max_length`` restricted to 255 characters if you are using ``unique=True`` for the field. This affects :class:`~django.db.models.CharField`, :class:`~django.db.models.SlugField` and :class:`~django.db.models.CommaSeparatedIntegerField`."
msgstr ""

#: ../../ref/databases.txt:403
# 0beb718586854f29beae63737bb9df41
msgid "DateTime fields"
msgstr ""

#: ../../ref/databases.txt:405
# 3312966041d0469c9cac04db3b319e1a
msgid "MySQL does not have a timezone-aware column type. If an attempt is made to store a timezone-aware ``time`` or ``datetime`` to a :class:`~django.db.models.TimeField` or :class:`~django.db.models.DateTimeField` respectively, a ``ValueError`` is raised rather than truncating data."
msgstr ""

#: ../../ref/databases.txt:410
# 7c42b38819054f1fb3344d9b3b7aabc9
msgid "MySQL does not store fractions of seconds. Fractions of seconds are truncated to zero when the time is stored."
msgstr ""

#: ../../ref/databases.txt:414
# 1478d924d6ae4642b3ddcab2408e2044
msgid "Row locking with ``QuerySet.select_for_update()``"
msgstr ""

#: ../../ref/databases.txt:416
# 0cf14094a673444c9ef4f5d4fb3597bc
msgid "MySQL does not support the ``NOWAIT`` option to the ``SELECT ... FOR UPDATE`` statement. If ``select_for_update()`` is used with ``nowait=True`` then a ``DatabaseError`` will be raised."
msgstr ""

#: ../../ref/databases.txt:423
# cbb3609df6cf4af3bc20192d0c1c462f
msgid "SQLite notes"
msgstr ""

#: ../../ref/databases.txt:425
# 5607bcae73ca470c83931c62d1e675aa
msgid "SQLite_ provides an excellent development alternative for applications that are predominantly read-only or require a smaller installation footprint. As with all database servers, though, there are some differences that are specific to SQLite that you should be aware of."
msgstr ""

#: ../../ref/databases.txt:435
# 94669dc85dc84694be5e8013eaa17583
msgid "Substring matching and case sensitivity"
msgstr ""

#: ../../ref/databases.txt:437
# 8971e58502c64a2396168abbee41d565
msgid "For all SQLite versions, there is some slightly counter-intuitive behavior when attempting to match some types of strings.  These are triggered when using the :lookup:`iexact` or :lookup:`contains` filters in Querysets. The behavior splits into two cases:"
msgstr ""

#: ../../ref/databases.txt:442
# 080106aef34341a4b90bd68ce69f0234
msgid "1. For substring matching, all matches are done case-insensitively. That is a filter such as ``filter(name__contains=\"aa\")`` will match a name of ``\"Aabb\"``."
msgstr ""

#: ../../ref/databases.txt:445
# 16245e946f7f410384de333dc14ee0b4
msgid "2. For strings containing characters outside the ASCII range, all exact string matches are performed case-sensitively, even when the case-insensitive options are passed into the query. So the :lookup:`iexact` filter will behave exactly the same as the :lookup:`exact` filter in these cases."
msgstr ""

#: ../../ref/databases.txt:450
# e545777a7723400dbb77a43d584903d3
msgid "Some possible workarounds for this are `documented at sqlite.org`_, but they aren't utilised by the default SQLite backend in Django, as incorporating them would be fairly difficult to do robustly. Thus, Django exposes the default SQLite behavior and you should be aware of this when doing case-insensitive or substring filtering."
msgstr ""

#: ../../ref/databases.txt:459
# 1a9897b5a9f1487f9a85e41cdf371314
msgid "SQLite 3.3.6 or newer strongly recommended"
msgstr ""

#: ../../ref/databases.txt:461
# 5c58b51a11fe44a69ff4f43d5fc5b45c
msgid "Versions of SQLite 3.3.5 and older contains the following bugs:"
msgstr ""

#: ../../ref/databases.txt:463
# 6618fb28b1d340e59708e5ed6aaf2bfa
msgid "A bug when `handling`_ ``ORDER BY`` parameters. This can cause problems when you use the ``select`` parameter for the ``extra()`` QuerySet method. The bug can be identified by the error message ``OperationalError: ORDER BY terms must not be non-integer constants``."
msgstr ""

#: ../../ref/databases.txt:468
# 5257dee4c610457a93ea0e62d42634c7
msgid "A bug when handling `aggregation`_ together with DateFields and DecimalFields."
msgstr ""

#: ../../ref/databases.txt:474
# dcef91d325df4e219132967d26a69391
msgid "SQLite 3.3.6 was released in April 2006, so most current binary distributions for different platforms include newer version of SQLite usable from Python through either the ``pysqlite2`` or the ``sqlite3`` modules."
msgstr ""

#: ../../ref/databases.txt:479
# 4a7f641a97f648c98cbd81145419ef02
msgid "Version 3.5.9"
msgstr ""

#: ../../ref/databases.txt:481
# 43ea103d3f1d467fba1cf4c423ace4f8
msgid "The Ubuntu \"Intrepid Ibex\" (8.10) SQLite 3.5.9-3 package contains a bug that causes problems with the evaluation of query expressions. If you are using Ubuntu \"Intrepid Ibex\", you will need to update the package to version 3.5.9-3ubuntu1 or newer (recommended) or find an alternate source for SQLite packages, or install SQLite from source."
msgstr ""

#: ../../ref/databases.txt:487
# dfed3a4c1e73483e9ecdfbfee781702c
msgid "At one time, Debian Lenny shipped with the same malfunctioning SQLite 3.5.9-3 package. However the Debian project has subsequently issued updated versions of the SQLite package that correct these bugs. If you find you are getting unexpected results under Debian, ensure you have updated your SQLite package to 3.5.9-5 or later."
msgstr ""

#: ../../ref/databases.txt:493
# 1d0912c4f8d44378b716a9f6e5a8dcf4
msgid "The problem does not appear to exist with other versions of SQLite packaged with other operating systems."
msgstr ""

#: ../../ref/databases.txt:497
# 89fa45c852d24cdd8e16b3b15a8c5681
msgid "Version 3.6.2"
msgstr ""

#: ../../ref/databases.txt:499
# 08a15ad6a7ab48bcb0698cdd674f4b7d
msgid "SQLite version 3.6.2 (released August 30, 2008) introduced a bug into ``SELECT DISTINCT`` handling that is triggered by, amongst other things, Django's ``DateQuerySet`` (returned by the ``dates()`` method on a queryset)."
msgstr ""

#: ../../ref/databases.txt:503
# 9e0628af827c4761a3fccc9ed5d5c45c
msgid "You should avoid using this version of SQLite with Django. Either upgrade to 3.6.3 (released September 22, 2008) or later, or downgrade to an earlier version of SQLite."
msgstr ""

#: ../../ref/databases.txt:510
# 3975299bb7e04a4c9a388b114d56c571
msgid "Using newer versions of the SQLite DB-API 2.0 driver"
msgstr ""

#: ../../ref/databases.txt:512
# 860b66c6a8d24e02b3f5fd9a7a9236e5
msgid "For versions of Python 2.5 or newer that include ``sqlite3`` in the standard library Django will now use a ``pysqlite2`` interface in preference to ``sqlite3`` if it finds one is available."
msgstr ""

#: ../../ref/databases.txt:516
# 243ca2338184485d87088fcbcac5e9fb
msgid "This provides the ability to upgrade both the DB-API 2.0 interface or SQLite 3 itself to versions newer than the ones included with your particular Python binary distribution, if needed."
msgstr ""

#: ../../ref/databases.txt:521
# 39a32a24339340bb9ffb231078be19a8
msgid "\"Database is locked\" errors"
msgstr ""

#: ../../ref/databases.txt:523
# 531bac2902d840de91c945afe1a01c91
msgid "SQLite is meant to be a lightweight database, and thus can't support a high level of concurrency. ``OperationalError: database is locked`` errors indicate that your application is experiencing more concurrency than ``sqlite`` can handle in default configuration. This error means that one thread or process has an exclusive lock on the database connection and another thread timed out waiting for the lock the be released."
msgstr ""

#: ../../ref/databases.txt:530
# 75bdf531e98d4d27a47961fa96a58e79
msgid "Python's SQLite wrapper has a default timeout value that determines how long the second thread is allowed to wait on the lock before it times out and raises the ``OperationalError: database is locked`` error."
msgstr ""

#: ../../ref/databases.txt:535
# b5922b74921f43f9920e791705a812f2
msgid "If you're getting this error, you can solve it by:"
msgstr ""

#: ../../ref/databases.txt:537
# ecbb536190434b23b4ba11c5469c2b5f
msgid "Switching to another database backend. At a certain point SQLite becomes too \"lite\" for real-world applications, and these sorts of concurrency errors indicate you've reached that point."
msgstr ""

#: ../../ref/databases.txt:541
# 81ed4f8c55ea4cc7bd4e7ecfb95ff761
msgid "Rewriting your code to reduce concurrency and ensure that database transactions are short-lived."
msgstr ""

#: ../../ref/databases.txt:544
# 4a71fd3f3e4749d099c1c33c6131fc6d
msgid "Increase the default timeout value by setting the ``timeout`` database option option::"
msgstr ""

#: ../../ref/databases.txt:553
# 412d037a63844b2eb975207ee966e96e
msgid "This will simply make SQLite wait a bit longer before throwing \"database is locked\" errors; it won't really do anything to solve them."
msgstr ""

#: ../../ref/databases.txt:557
# 5efb9250dde846ce81ad6805f36d2a4c
msgid "``QuerySet.select_for_update()`` not supported"
msgstr ""

#: ../../ref/databases.txt:559
# a3241f80e9404fb494cec48ad425ffab
msgid "SQLite does not support the ``SELECT ... FOR UPDATE`` syntax. Calling it will have no effect."
msgstr ""

#: ../../ref/databases.txt:565
# 64c24f3cacd446e697f5e01499481ee7
msgid "Parameters not quoted in ``connection.queries``"
msgstr ""

#: ../../ref/databases.txt:567
# 14b77d8eeb164b69ae1f213962b1ec85
msgid "``sqlite3`` does not provide a way to retrieve the SQL after quoting and substituting the parameters. Instead, the SQL in ``connection.queries`` is rebuilt with a simple string interpolation. It may be incorrect. Make sure you add quotes where necessary before copying a query into a SQLite shell."
msgstr ""

#: ../../ref/databases.txt:575
# d630a82e224646b0ae6dfd8e56d616a1
msgid "Oracle notes"
msgstr ""

#: ../../ref/databases.txt:577
# cfdecf1239f9479f8ae8f91c76f31bbc
msgid "Django supports `Oracle Database Server`_ versions 9i and higher. Oracle version 10g or later is required to use Django's ``regex`` and ``iregex`` query operators. You will also need at least version 4.3.1 of the `cx_Oracle`_ Python driver."
msgstr ""

#: ../../ref/databases.txt:582
# 97f776145f6f4c4390b9c3fe43d508f7
msgid "Note that due to a Unicode-corruption bug in ``cx_Oracle`` 5.0, that version of the driver should **not** be used with Django; ``cx_Oracle`` 5.0.1 resolved this issue, so if you'd like to use a more recent ``cx_Oracle``, use version 5.0.1."
msgstr ""

#: ../../ref/databases.txt:587
# 0e3a43c209734c9888a56f68a18a0727
msgid "``cx_Oracle`` 5.0.1 or greater can optionally be compiled with the ``WITH_UNICODE`` environment variable.  This is recommended but not required."
msgstr ""

#: ../../ref/databases.txt:594
# bd307923627b4c0ea1bfbfa901109bf1
msgid "In order for the ``python manage.py syncdb`` command to work, your Oracle database user must have privileges to run the following commands:"
msgstr ""

#: ../../ref/databases.txt:597
# 2d1ee12d5c714b83ba05c67cf166d5f3
msgid "CREATE TABLE"
msgstr ""

#: ../../ref/databases.txt:598
# 29e2ba478bcd4b79a6526c1f2511764a
msgid "CREATE SEQUENCE"
msgstr ""

#: ../../ref/databases.txt:599
# 7fab2bf45143402ab52392a6490b6c82
msgid "CREATE PROCEDURE"
msgstr ""

#: ../../ref/databases.txt:600
# 06fd4715f1994f8c80711002aa551b31
msgid "CREATE TRIGGER"
msgstr ""

#: ../../ref/databases.txt:602
# 7ec8ac0ec6df45258de3e18ee77ac717
msgid "To run Django's test suite, the user needs these *additional* privileges:"
msgstr ""

#: ../../ref/databases.txt:604
# 1a22070a014440f5b07c41b3fced081a
msgid "CREATE USER"
msgstr ""

#: ../../ref/databases.txt:605
# de23e1ac84c749b08d47ace0afb4daf3
msgid "DROP USER"
msgstr ""

#: ../../ref/databases.txt:606
# 95df11d8dcc543f988fcd4dbd874b106
msgid "CREATE TABLESPACE"
msgstr ""

#: ../../ref/databases.txt:607
# de854d264b904ccd92cb6f557b3ca3bd
msgid "DROP TABLESPACE"
msgstr ""

#: ../../ref/databases.txt:608
# 1b8db3ef32ae48d285988d2133dbca62
msgid "CONNECT WITH ADMIN OPTION"
msgstr ""

#: ../../ref/databases.txt:609
# 738d4566b82f44bca5f2620d06a7cedc
msgid "RESOURCE WITH ADMIN OPTION"
msgstr ""

#: ../../ref/databases.txt:614
# da78bdb307d74978bb9b8d709b176201
msgid "Your Django settings.py file should look something like this for Oracle::"
msgstr ""

#: ../../ref/databases.txt:628
# f14b7280845441038be0f7138868a25e
msgid "If you don't use a ``tnsnames.ora`` file or a similar naming method that recognizes the SID (\"xe\" in this example), then fill in both :setting:`HOST` and :setting:`PORT` like so::"
msgstr ""

#: ../../ref/databases.txt:643
# 2452a8392da94b288c312fe5de25e5e2
msgid "You should supply both :setting:`HOST` and :setting:`PORT`, or leave both as empty strings."
msgstr ""

#: ../../ref/databases.txt:647
# ab3689ddc1e64d58aa202213e72a0dd3
msgid "Threaded option"
msgstr ""

#: ../../ref/databases.txt:649
# 28de52f129d045ae9cf844ce590442bb
msgid "If you plan to run Django in a multithreaded environment (e.g. Apache in Windows using the default MPM module), then you **must** set the ``threaded`` option of your Oracle database configuration to True::"
msgstr ""

#: ../../ref/databases.txt:657
# b6f1b4063edf495f98729e7fa7c61c9b
msgid "Failure to do this may result in crashes and other odd behavior."
msgstr ""

#: ../../ref/databases.txt:660
# 3a6d5c84a6734d6e8735f807fec8b39e
msgid "INSERT ... RETURNING INTO"
msgstr ""

#: ../../ref/databases.txt:662
# b76e455b2dd54c95b20238a6b605dec4
msgid "By default, the Oracle backend uses a ``RETURNING INTO`` clause to efficiently retrieve the value of an ``AutoField`` when inserting new rows.  This behavior may result in a ``DatabaseError`` in certain unusual setups, such as when inserting into a remote table, or into a view with an ``INSTEAD OF`` trigger. The ``RETURNING INTO`` clause can be disabled by setting the ``use_returning_into`` option of the database configuration to False::"
msgstr ""

#: ../../ref/databases.txt:673
# 9afaab47afa44d90a3ac059390397b42
msgid "In this case, the Oracle backend will use a separate ``SELECT`` query to retrieve AutoField values."
msgstr ""

#: ../../ref/databases.txt:677
# a92759eb2905445b855c498d4e6d5015
msgid "Naming issues"
msgstr ""

#: ../../ref/databases.txt:679
# 25b31b93ba174b1ba0ca64c8d7dc22df
msgid "Oracle imposes a name length limit of 30 characters. To accommodate this, the backend truncates database identifiers to fit, replacing the final four characters of the truncated name with a repeatable MD5 hash value."
msgstr ""

#: ../../ref/databases.txt:683
# f2ff417f93894cf6af243a76490ea800
msgid "When running syncdb, an ``ORA-06552`` error may be encountered if certain Oracle keywords are used as the name of a model field or the value of a ``db_column`` option.  Django quotes all identifiers used in queries to prevent most such problems, but this error can still occur when an Oracle datatype is used as a column name.  In particular, take care to avoid using the names ``date``, ``timestamp``, ``number`` or ``float`` as a field name."
msgstr ""

#: ../../ref/databases.txt:692
# b6be5bbc094c41789a565043ca66bc29
msgid "NULL and empty strings"
msgstr ""

#: ../../ref/databases.txt:694
# acbc564de8b74372890ab9b45a78a8d5
msgid "Django generally prefers to use the empty string ('') rather than NULL, but Oracle treats both identically. To get around this, the Oracle backend ignores an explicit ``null`` option on fields that have the empty string as a possible value and generates DDL as if ``null=True``. When fetching from the database, it is assumed that a ``NULL`` value in one of these fields really means the empty string, and the data is silently converted to reflect this assumption."
msgstr ""

#: ../../ref/databases.txt:703
# 92b3ae23fb7548c1ac83775d716c904c
msgid "``TextField`` limitations"
msgstr ""

#: ../../ref/databases.txt:705
# 1561a30c591d42a0a42a3aa4d26cfb64
msgid "The Oracle backend stores ``TextFields`` as ``NCLOB`` columns. Oracle imposes some limitations on the usage of such LOB columns in general:"
msgstr ""

#: ../../ref/databases.txt:708
# 3d81f50180f34df8a7b7c09c76a20eda
msgid "LOB columns may not be used as primary keys."
msgstr ""

#: ../../ref/databases.txt:710
# c08055643d644fbfaf32bad40baeab4c
msgid "LOB columns may not be used in indexes."
msgstr ""

#: ../../ref/databases.txt:712
# 26125f3d1fa74289961ce546ae0631b3
msgid "LOB columns may not be used in a ``SELECT DISTINCT`` list. This means that attempting to use the ``QuerySet.distinct`` method on a model that includes ``TextField`` columns will result in an error when run against Oracle. As a workaround, use the ``QuerySet.defer`` method in conjunction with ``distinct()`` to prevent ``TextField`` columns from being included in the ``SELECT DISTINCT`` list."
msgstr ""

#: ../../ref/databases.txt:722
# 47eb6e4cfb484c9d901397a72751918f
msgid "Using a 3rd-party database backend"
msgstr ""

#: ../../ref/databases.txt:724
# eb6d7a9b9733464eb0436c0655c9b49f
msgid "In addition to the officially supported databases, there are backends provided by 3rd parties that allow you to use other databases with Django:"
msgstr ""

#: ../../ref/databases.txt:727
# 3a5d488cab014b1f8febc7b34cd5bac8
msgid "`Sybase SQL Anywhere`_"
msgstr ""

#: ../../ref/databases.txt:728
# dd7b509937cf423da99f42840ce5c1a3
msgid "`IBM DB2`_"
msgstr ""

#: ../../ref/databases.txt:729
# 642d034c6f3f4375b14c643a590bc5bc
msgid "`Microsoft SQL Server 2005`_"
msgstr ""

#: ../../ref/databases.txt:730
# 4ff1a789d3e448918d8760178ba4a678
msgid "Firebird_"
msgstr ""

#: ../../ref/databases.txt:731
# 9ed6b65f19534e7c8f918ccb624b28bb
msgid "ODBC_"
msgstr ""

#: ../../ref/databases.txt:732
# a319a270df894484b8dbd21ed786e863
msgid "ADSDB_"
msgstr ""

#: ../../ref/databases.txt:734
# 7f89f3406b984c33827917a17dcb2475
msgid "The Django versions and ORM features supported by these unofficial backends vary considerably. Queries regarding the specific capabilities of these unofficial backends, along with any support queries, should be directed to the support channels provided by each 3rd party project."
msgstr ""

#: ../../ref/django-admin.txt:3
# 16d9e6a2e42c48d68810c9d9ab5dc13e
msgid "django-admin.py and manage.py"
msgstr ""

#: ../../ref/django-admin.txt:5
# 34ceda21bbf94109971f3d3cddd2e29a
msgid "``django-admin.py`` is Django's command-line utility for administrative tasks. This document outlines all it can do."
msgstr ""

#: ../../ref/django-admin.txt:8
# b36eb59974cc4e5fbddd4793d2d96d3c
msgid "In addition, ``manage.py`` is automatically created in each Django project. ``manage.py`` is a thin wrapper around ``django-admin.py`` that takes care of two things for you before delegating to ``django-admin.py``:"
msgstr ""

#: ../../ref/django-admin.txt:12
# 65fc88803ba34d8fa6c31ad45ecd8d34
msgid "It puts your project's package on ``sys.path``."
msgstr ""

#: ../../ref/django-admin.txt:14
# 88b6a8e3aad24e8286e1933feca95b70
msgid "It sets the :envvar:`DJANGO_SETTINGS_MODULE` environment variable so that it points to your project's ``settings.py`` file."
msgstr ""

#: ../../ref/django-admin.txt:17
# 2a067d7e9ef04208abab186ca4f24604
msgid "The ``django-admin.py`` script should be on your system path if you installed Django via its ``setup.py`` utility. If it's not on your path, you can find it in ``site-packages/django/bin`` within your Python installation. Consider symlinking it from some place on your path, such as ``/usr/local/bin``."
msgstr ""

#: ../../ref/django-admin.txt:22
# 24a9c4bf56d146c79d98528070fce3c4
msgid "For Windows users, who do not have symlinking functionality available, you can copy ``django-admin.py`` to a location on your existing path or edit the ``PATH`` settings (under ``Settings - Control Panel - System - Advanced - Environment...``) to point to its installed location."
msgstr ""

#: ../../ref/django-admin.txt:27
# c1691407bb064af0b685c6c452f7e9a2
msgid "Generally, when working on a single Django project, it's easier to use ``manage.py``. Use ``django-admin.py`` with ``DJANGO_SETTINGS_MODULE``, or the ``--settings`` command line option, if you need to switch between multiple Django settings files."
msgstr ""

#: ../../ref/django-admin.txt:32
# 5e07e00063954682b8d31040706f273b
msgid "The command-line examples throughout this document use ``django-admin.py`` to be consistent, but any example can use ``manage.py`` just as well."
msgstr ""

#: ../../ref/django-admin.txt:43
# dd897b3b9d974df49f2d0352459d8f13
msgid "``command`` should be one of the commands listed in this document. ``options``, which is optional, should be zero or more of the options available for the given command."
msgstr ""

#: ../../ref/django-admin.txt:48
# 213a48d200b440268940d1c1e9c2b2b0
msgid "Getting runtime help"
msgstr ""

#: ../../ref/django-admin.txt:52
# 4dae98111b1042ddbe3d4b9b73316838
msgid "Run ``django-admin.py help`` to display usage information and a list of the commands provided by each application."
msgstr ""

#: ../../ref/django-admin.txt:55
# 9aaa6df46721461b9b84c7ee7249000a
msgid "Run ``django-admin.py help --commands`` to display a list of all available commands."
msgstr ""

#: ../../ref/django-admin.txt:58
# 82da11cf815047a5b3080c599a7e2107
msgid "Run ``django-admin.py help <command>`` to display a description of the given command and a list of its available options."
msgstr ""

#: ../../ref/django-admin.txt:62
# d8c086a5392549bbb3a7cada7c6cf178
msgid "App names"
msgstr ""

#: ../../ref/django-admin.txt:64
# a7670eff0df747c99800f5c219dca580
msgid "Many commands take a list of \"app names.\" An \"app name\" is the basename of the package containing your models. For example, if your :setting:`INSTALLED_APPS` contains the string ``'mysite.blog'``, the app name is ``blog``."
msgstr ""

#: ../../ref/django-admin.txt:69
# 03b7d2d1319c4580bc8bfad66c325d04
msgid "Determining the version"
msgstr ""

#: ../../ref/django-admin.txt:73
# 48167a82c8dc4f3497135c3ea0c970d9
msgid "Run ``django-admin.py version`` to display the current Django version."
msgstr ""

#: ../../ref/django-admin.txt:75
# e9f60fc33b8845299beb02f1bd4501b3
msgid "The output follows the schema described in :pep:`386`::"
msgstr ""

#: ../../ref/django-admin.txt:82
# 7c764939f9324183835ef53dc2ab4134
msgid "Displaying debug output"
msgstr ""

#: ../../ref/django-admin.txt:84
# 7540665307ef491eab7b48a3360e8b22
msgid "Use :djadminopt:`--verbosity` to specify the amount of notification and debug information that ``django-admin.py`` should print to the console. For more details, see the documentation for the :djadminopt:`--verbosity` option."
msgstr ""

#: ../../ref/django-admin.txt:89
# 307ba5b4cefb4220afa3b5bf1350b14d
msgid "Available commands"
msgstr ""

#: ../../ref/django-admin.txt:92
# d80216e432e04daabb3ae6fd9cb00104
msgid "cleanup"
msgstr ""

#: ../../ref/django-admin.txt:96
# 9794d03254544bbd9106919b9ee5e1b2
msgid "Can be run as a cronjob or directly to clean out old data from the database (only expired sessions at the moment)."
msgstr ""

#: ../../ref/django-admin.txt:103
# 0244c6aa6d834f1b916054c568b0a2db
msgid "compilemessages"
msgstr ""

#: ../../ref/django-admin.txt:107
# 5a406faca71545068feb5cbf4626193f
msgid "Compiles .po files created with ``makemessages`` to .mo files for use with the builtin gettext support. See :doc:`/topics/i18n/index`."
msgstr ""

#: ../../ref/django-admin.txt:110
# 686fdd49f29246b0ac5a4604fd8de43e
msgid "Use the :djadminopt:`--locale` option to specify the locale to process. If not provided, all locales are processed."
msgstr ""

#: ../../ref/django-admin.txt:118
# 78bfc4b9ff5c4c74ae64d98873079477
msgid "createcachetable"
msgstr ""

#: ../../ref/django-admin.txt:122
# e10b21c5226b446aac67a9c615a8e581
msgid "Creates a cache table named ``tablename`` for use with the database cache backend. See :doc:`/topics/cache` for more information."
msgstr ""

#: ../../ref/django-admin.txt:125
# edbe5404f7a1475b881a9c9706075433
msgid "The :djadminopt:`--database` option can be used to specify the database onto which the cachetable will be installed."
msgstr ""

#: ../../ref/django-admin.txt:129
# 680ff1575c3a40fd9754450125aa9f3c
msgid "dbshell"
msgstr ""

#: ../../ref/django-admin.txt:133
# f7974b970cca4458b489909076d80e06
msgid "Runs the command-line client for the database engine specified in your ``ENGINE`` setting, with the connection parameters specified in your :setting:`USER`, :setting:`PASSWORD`, etc., settings."
msgstr ""

#: ../../ref/django-admin.txt:137
# c30db114483e444d9d304d4eddaadfe9
msgid "For PostgreSQL, this runs the ``psql`` command-line client."
msgstr ""

#: ../../ref/django-admin.txt:138
# 8bdb731820cd4391b736e4a5b4aae6d2
msgid "For MySQL, this runs the ``mysql`` command-line client."
msgstr ""

#: ../../ref/django-admin.txt:139
# 3d1a423d22e24a4a92aee632c63b259e
msgid "For SQLite, this runs the ``sqlite3`` command-line client."
msgstr ""

#: ../../ref/django-admin.txt:141
# 08976e41445f46de9ae9dae745ee516c
msgid "This command assumes the programs are on your ``PATH`` so that a simple call to the program name (``psql``, ``mysql``, ``sqlite3``) will find the program in the right place. There's no way to specify the location of the program manually."
msgstr ""

#: ../../ref/django-admin.txt:146
# 812774f3a697458586e9bdc6840e7a8f
msgid "The :djadminopt:`--database` option can be used to specify the database onto which to open a shell."
msgstr ""

#: ../../ref/django-admin.txt:150
# 0d22c29ac6f04fa3a23a4c402bf51ba6
msgid "diffsettings"
msgstr ""

#: ../../ref/django-admin.txt:154
# b684589025d8434ab81d7bb9d3637260
msgid "Displays differences between the current settings file and Django's default settings."
msgstr ""

#: ../../ref/django-admin.txt:157
# f21ed2b746a2485785e1098be0ad3d2a
msgid "Settings that don't appear in the defaults are followed by ``\"###\"``. For example, the default settings don't define :setting:`ROOT_URLCONF`, so :setting:`ROOT_URLCONF` is followed by ``\"###\"`` in the output of ``diffsettings``."
msgstr ""

#: ../../ref/django-admin.txt:162
# e9cffa757b3f46cd8be81f15989a01dd
msgid "Note that Django's default settings live in ``django/conf/global_settings.py``, if you're ever curious to see the full list of defaults."
msgstr ""

#: ../../ref/django-admin.txt:166
# 84db0d55fed3465890c5075bea69fcda
msgid "dumpdata <appname appname appname.Model ...>"
msgstr ""

#: ../../ref/django-admin.txt:170
# 8be4764dbd9246df9433e4e28c7da7d0
msgid "Outputs to standard output all data in the database associated with the named application(s)."
msgstr ""

#: ../../ref/django-admin.txt:173
# bb915e4afd7448aeb4d12827115d23a9
msgid "If no application name is provided, all installed applications will be dumped."
msgstr ""

#: ../../ref/django-admin.txt:175
# 3cd32fea08be4142bd974fa7d3e148c5
msgid "The output of ``dumpdata`` can be used as input for ``loaddata``."
msgstr ""

#: ../../ref/django-admin.txt:177
# 157086fcf7234ca6a0cc56c62060516d
msgid "Note that ``dumpdata`` uses the default manager on the model for selecting the records to dump. If you're using a :ref:`custom manager <custom-managers>` as the default manager and it filters some of the available records, not all of the objects will be dumped."
msgstr ""

#: ../../ref/django-admin.txt:182
# 24f35a61f17d46b6bdd762bad0d8abaf
msgid "The :djadminopt:`--all` option may be provided to specify that ``dumpdata`` should use Django's base manager, dumping records which might otherwise be filtered or modified by a custom manager."
msgstr ""

#: ../../ref/django-admin.txt:188
# 3c6b07fbad474e1bbc3382004129f401
msgid "By default, ``dumpdata`` will format its output in JSON, but you can use the ``--format`` option to specify another format. Currently supported formats are listed in :ref:`serialization-formats`."
msgstr ""

#: ../../ref/django-admin.txt:194
# fadc8f25cee4427984feadae6684a89e
msgid "By default, ``dumpdata`` will output all data on a single line. This isn't easy for humans to read, so you can use the ``--indent`` option to pretty-print the output with a number of indentation spaces."
msgstr ""

#: ../../ref/django-admin.txt:198
# c4393086ee5a474cb89eaf7940d60536
msgid "The :djadminopt:`--exclude` option may be provided to prevent specific applications or models (specified as in the form of ``appname.ModelName``) from being dumped. If you specify a model name to ``dumpdata``, the dumped output will be restricted to that model, rather than the entire application. You can also mix application names and model names."
msgstr ""

#: ../../ref/django-admin.txt:204
# cff2c4d472144611bd454bda0216444a
msgid "The :djadminopt:`--database` option can be used to specify the database from which data will be dumped."
msgstr ""

#: ../../ref/django-admin.txt:209
# 516dc3e9fda4440794d826ca0039ce70
msgid "Use :ref:`natural keys <topics-serialization-natural-keys>` to represent any foreign key and many-to-many relationship with a model that provides a natural key definition. If you are dumping ``contrib.auth`` ``Permission`` objects or ``contrib.contenttypes`` ``ContentType`` objects, you should probably be using this flag."
msgstr ""

#: ../../ref/django-admin.txt:216
# 873c7b1f116347a4b4739b55181b1416
msgid "flush"
msgstr ""

#: ../../ref/django-admin.txt:220
# 32fbfa938b5d47c5914eb9ed123df16a
msgid "Returns the database to the state it was in immediately after :djadmin:`syncdb` was executed. This means that all data will be removed from the database, any post-synchronization handlers will be re-executed, and the ``initial_data`` fixture will be re-installed."
msgstr ""

#: ../../ref/django-admin.txt:225
#: ../../ref/django-admin.txt:1025
#: ../../ref/django-admin.txt:1124
# d6c5976fb3084e04b9f86e10ff988539
# 9ca84ec1b763411589bf9a0e15feab8d
# 2dbc7029f48b4aa19c76a2cae8c7454e
msgid "The :djadminopt:`--noinput` option may be provided to suppress all user prompts."
msgstr ""

#: ../../ref/django-admin.txt:228
# d0ac0aec21884fd085827eac67405030
msgid "The :djadminopt:`--database` option may be used to specify the database to flush."
msgstr ""

#: ../../ref/django-admin.txt:232
#: ../../ref/django-admin.txt:1032
# de0b7d44dc9b447ebad89d79956e6134
# a31922caa41947efab2d945f09c40e80
msgid "--no-initial-data"
msgstr ""

#: ../../ref/django-admin.txt:236
#: ../../ref/django-admin.txt:1036
# 134411fd0e7d44f8a225e0f6a8b4f3aa
# bc01ad49906646f5bd405d94eb997327
msgid "Use ``--no-initial-data`` to avoid loading the initial_data fixture."
msgstr ""

#: ../../ref/django-admin.txt:244
# 2a31fa987b4042c7a4b0a3a6bb86d0cd
msgid "Introspects the database tables in the database pointed-to by the :setting:`NAME` setting and outputs a Django model module (a ``models.py`` file) to standard output."
msgstr ""

#: ../../ref/django-admin.txt:248
# fc5e5f475df8421bbd24cff9e859c6a9
msgid "Use this if you have a legacy database with which you'd like to use Django. The script will inspect the database and create a model for each table within it."
msgstr ""

#: ../../ref/django-admin.txt:252
# 6bec1e09a1fa40a98afad7ec1b1a00dd
msgid "As you might expect, the created models will have an attribute for every field in the table. Note that ``inspectdb`` has a few special cases in its field-name output:"
msgstr ""

#: ../../ref/django-admin.txt:256
# dab62f9585af4e3a81b9ebc4c8bb3b54
msgid "If ``inspectdb`` cannot map a column's type to a model field type, it'll use ``TextField`` and will insert the Python comment ``'This field type is a guess.'`` next to the field in the generated model."
msgstr ""

#: ../../ref/django-admin.txt:261
# d4268516b1cd4836baea7e5a6045bb2c
msgid "If the database column name is a Python reserved word (such as ``'pass'``, ``'class'`` or ``'for'``), ``inspectdb`` will append ``'_field'`` to the attribute name. For example, if a table has a column ``'for'``, the generated model will have a field ``'for_field'``, with the ``db_column`` attribute set to ``'for'``. ``inspectdb`` will insert the Python comment ``'Field renamed because it was a Python reserved word.'`` next to the field."
msgstr ""

#: ../../ref/django-admin.txt:270
# d0fe26743e0d4c589e848b7f0c2bf5b5
msgid "This feature is meant as a shortcut, not as definitive model generation. After you run it, you'll want to look over the generated models yourself to make customizations. In particular, you'll need to rearrange models' order, so that models that refer to other models are ordered properly."
msgstr ""

#: ../../ref/django-admin.txt:275
# b19e7cef8ecd4e67901b61c8ec23ea4d
msgid "Primary keys are automatically introspected for PostgreSQL, MySQL and SQLite, in which case Django puts in the ``primary_key=True`` where needed."
msgstr ""

#: ../../ref/django-admin.txt:279
# ee3316a4eb2f4ea88e77447e3a2818a1
msgid "``inspectdb`` works with PostgreSQL, MySQL and SQLite. Foreign-key detection only works in PostgreSQL and with certain types of MySQL tables."
msgstr ""

#: ../../ref/django-admin.txt:282
# bda386086d7a4af4ad1abf39ef437da5
msgid "The :djadminopt:`--database` option may be used to specify the database to introspect."
msgstr ""

#: ../../ref/django-admin.txt:286
# 6c5e39993f2c4690b6034e78fc323a44
msgid "loaddata <fixture fixture ...>"
msgstr ""

#: ../../ref/django-admin.txt:290
# 410f5b8314b248788428b79afb89496a
msgid "Searches for and loads the contents of the named fixture into the database."
msgstr ""

#: ../../ref/django-admin.txt:292
# 5799976d6cce4246a197f2f03fa629df
msgid "The :djadminopt:`--database` option can be used to specify the database onto which the data will be loaded."
msgstr ""

#: ../../ref/django-admin.txt:299
# d153a9a49caf4006957c76dd4e12b469
msgid "The :djadminopt:`--ignorenonexistent` option can be used to ignore fields that may have been removed from models since the fixture was originally generated."
msgstr ""

#: ../../ref/django-admin.txt:303
# 68e0bb3457844c349df3ba6c4f81a9ea
msgid "What's a \"fixture\"?"
msgstr ""

#: ../../ref/django-admin.txt:305
# b96343a86e9449a4b03890eadc42b6dc
msgid "A *fixture* is a collection of files that contain the serialized contents of the database. Each fixture has a unique name, and the files that comprise the fixture can be distributed over multiple directories, in multiple applications."
msgstr ""

#: ../../ref/django-admin.txt:309
# a23903f008264c3cb6122a5e57131d88
msgid "Django will search in three locations for fixtures:"
msgstr ""

#: ../../ref/django-admin.txt:311
# acddd99746d849a6a2c24bffc7c447f6
msgid "In the ``fixtures`` directory of every installed application"
msgstr ""

#: ../../ref/django-admin.txt:312
# e3878d2282d749cc9c06fef844e309c0
msgid "In any directory named in the :setting:`FIXTURE_DIRS` setting"
msgstr ""

#: ../../ref/django-admin.txt:313
# dc65bc1b0a034483a48cbfa59b7262a3
msgid "In the literal path named by the fixture"
msgstr ""

#: ../../ref/django-admin.txt:315
# a430ca1dcacc4c0daa653e3a53125e92
msgid "Django will load any and all fixtures it finds in these locations that match the provided fixture names."
msgstr ""

#: ../../ref/django-admin.txt:318
# dbc0a7cc55784a81bc9408cecac9d0d0
msgid "If the named fixture has a file extension, only fixtures of that type will be loaded. For example::"
msgstr ""

#: ../../ref/django-admin.txt:323
# d866dc8a12a543dc8d4f3880320908c3
msgid "would only load JSON fixtures called ``mydata``. The fixture extension must correspond to the registered name of a :ref:`serializer <serialization-formats>` (e.g., ``json`` or ``xml``)."
msgstr ""

#: ../../ref/django-admin.txt:327
# 6381e605dffb4e3fa64163cbef1adde2
msgid "If you omit the extensions, Django will search all available fixture types for a matching fixture. For example::"
msgstr ""

#: ../../ref/django-admin.txt:332
# 05c739c9e2e047fc884ea1d0580aa8c3
msgid "would look for any fixture of any fixture type called ``mydata``. If a fixture directory contained ``mydata.json``, that fixture would be loaded as a JSON fixture."
msgstr ""

#: ../../ref/django-admin.txt:336
# 95c4c587ff164459a19d2f89a498661c
msgid "The fixtures that are named can include directory components. These directories will be included in the search path. For example::"
msgstr ""

#: ../../ref/django-admin.txt:341
# 07c4146a24244a7da4c69a2967eb385d
msgid "would search ``<appname>/fixtures/foo/bar/mydata.json`` for each installed application,  ``<dirname>/foo/bar/mydata.json`` for each directory in :setting:`FIXTURE_DIRS`, and the literal path ``foo/bar/mydata.json``."
msgstr ""

#: ../../ref/django-admin.txt:345
# 262321d2619146d7902c8dccc07e1327
msgid "When fixture files are processed, the data is saved to the database as is. Model defined ``save`` methods and ``pre_save`` signals are not called."
msgstr ""

#: ../../ref/django-admin.txt:348
# 1d7d5779f9f240c69e3c7025e2754cef
msgid "Note that the order in which fixture files are processed is undefined. However, all fixture data is installed as a single transaction, so data in one fixture can reference data in another fixture. If the database backend supports row-level constraints, these constraints will be checked at the end of the transaction."
msgstr ""

#: ../../ref/django-admin.txt:354
# 3e07355b95fe4ca49b89cc91ae40327c
msgid "The ``dumpdata`` command can be used to generate input for ``loaddata``."
msgstr ""

#: ../../ref/django-admin.txt:357
# bc5db8652eb347068421f62f29bf5188
msgid "Compressed fixtures"
msgstr ""

#: ../../ref/django-admin.txt:359
# 4d2a20bf52154f7ca9d161adda0e7b6d
msgid "Fixtures may be compressed in ``zip``, ``gz``, or ``bz2`` format. For example::"
msgstr ""

#: ../../ref/django-admin.txt:363
# d1f9db3c7c044adea05f43cae1cde642
msgid "would look for any of ``mydata.json``, ``mydata.json.zip``, ``mydata.json.gz``, or ``mydata.json.bz2``. The first file contained within a zip-compressed archive is used."
msgstr ""

#: ../../ref/django-admin.txt:367
# 653cf35da6ad4e49bb30dc56c4feb944
msgid "Note that if two fixtures with the same name but different fixture type are discovered (for example, if ``mydata.json`` and ``mydata.xml.gz`` were found in the same fixture directory), fixture installation will be aborted, and any data installed in the call to ``loaddata`` will be removed from the database."
msgstr ""

#: ../../ref/django-admin.txt:375
# a8790bc81e164870a88ed445ff8d32a6
msgid "The MyISAM storage engine of MySQL doesn't support transactions or constraints, so if you use MyISAM, you won't get validation of fixture data, or a rollback if multiple transaction files are found."
msgstr ""

#: ../../ref/django-admin.txt:380
# 77bdc345bac1486cb0013b855b2abf48
msgid "Database-specific fixtures"
msgstr ""

#: ../../ref/django-admin.txt:382
# da5706c221804639bb393829a6230134
msgid "If you're in a multi-database setup, you might have fixture data that you want to load onto one database, but not onto another. In this situation, you can add database identifier into the names of your fixtures."
msgstr ""

#: ../../ref/django-admin.txt:386
# f220499d087b413ba8ce7baf12fc2176
msgid "For example, if your :setting:`DATABASES` setting has a 'master' database defined, name the fixture ``mydata.master.json`` or ``mydata.master.json.gz`` and the fixture will only be loaded when you specify you want to load data into the ``master`` database."
msgstr ""

#: ../../ref/django-admin.txt:392
# 6dc6f79448e04006a9d7b680a8b0bdd9
msgid "makemessages"
msgstr ""

#: ../../ref/django-admin.txt:396
# 96349f028b3d489eb1b24477f2da0009
msgid "Runs over the entire source tree of the current directory and pulls out all strings marked for translation. It creates (or updates) a message file in the conf/locale (in the django tree) or locale (for project and application) directory. After making changes to the messages files you need to compile them with ``compilemessages`` for use with the builtin gettext support. See the :ref:`i18n documentation <how-to-create-language-files>` for details."
msgstr ""

#: ../../ref/django-admin.txt:405
# 4520fc840d2c4846ba7c9747c86fe258
msgid "Use the ``--all`` or ``-a`` option to update the message files for all available languages."
msgstr ""

#: ../../ref/django-admin.txt:414
# 62fc29cf6b7843ee8da4e5deec85c575
msgid "Use the ``--extension`` or ``-e`` option to specify a list of file extensions to examine (default: \".html\", \".txt\")."
msgstr ""

#: ../../ref/django-admin.txt:421
# 467876603d76439bb09b6aec0cb70321
msgid "Separate multiple extensions with commas or use -e or --extension multiple times::"
msgstr ""

#: ../../ref/django-admin.txt:425
# c3ad5ffdf56c4945a98deecf13b088d4
msgid "Use the :djadminopt:`--locale` option to specify the locale to process."
msgstr ""

#: ../../ref/django-admin.txt:433
# 1151099d6fd54fd19a39bbe2e064769f
msgid "Use the ``--domain`` or ``-d`` option to change the domain of the messages files. Currently supported:"
msgstr ""

#: ../../ref/django-admin.txt:436
# 41451c8c86294e398aeb8d4d702df278
msgid "``django`` for all ``*.py``, ``*.html`` and ``*.txt`` files (default)"
msgstr ""

#: ../../ref/django-admin.txt:437
# 50e9def11abb45509dd9173e44538283
msgid "``djangojs`` for ``*.js`` files"
msgstr ""

#: ../../ref/django-admin.txt:441
# 33c0f7e47353418da778dcffffacd29d
msgid "Use the ``--symlinks`` or ``-s`` option to follow symlinks to directories when looking for new translation strings."
msgstr ""

#: ../../ref/django-admin.txt:450
# be944d9ff1a74a61aabf4bae6180e358
msgid "Use the ``--ignore`` or ``-i`` option to ignore files or directories matching the given :mod:`glob`-style pattern. Use multiple times to ignore more."
msgstr ""

#: ../../ref/django-admin.txt:453
# 44573df61f3946ceb5f10d8e9c7546a3
msgid "These patterns are used by default: ``'CVS'``, ``'.*'``, ``'*~'``"
msgstr ""

#: ../../ref/django-admin.txt:461
# 91a60aa164414c929d40d4a1fac9a51a
msgid "Use the ``--no-default-ignore`` option to disable the default values of :djadminopt:`--ignore`."
msgstr ""

#: ../../ref/django-admin.txt:466
# 1fbaa97b7a5d4d8ba74a50f4a736395b
msgid "Use the ``--no-wrap`` option to disable breaking long message lines into several lines in language files."
msgstr ""

#: ../../ref/django-admin.txt:473
# c3586929aefb47cca930d56794295a61
msgid "Use the ``--no-location`` option to not write '``#: filename:line``' comment lines in language files. Note that using this option makes it harder for technically skilled translators to understand each message's context."
msgstr ""

#: ../../ref/django-admin.txt:478
# 2021c57f98a44a18a4830cc97e33c31f
msgid "runfcgi [options]"
msgstr ""

#: ../../ref/django-admin.txt:482
# c1cb6949b581458d84d9ad3532a22ab0
msgid "Starts a set of FastCGI processes suitable for use with any Web server that supports the FastCGI protocol. See the :doc:`FastCGI deployment documentation </howto/deployment/fastcgi>` for details. Requires the Python FastCGI module from `flup`_."
msgstr ""

#: ../../ref/django-admin.txt:493
# 65b4ea7e37024cba8fea88c35dc9e772
msgid "The options accepted by this command are passed to the FastCGI library and don't use the ``'--'`` prefix as is usual for other Django management commands."
msgstr ""

#: ../../ref/django-admin.txt:498
# d9ec6ae49069458c92101e7dd801d24a
msgid "``protocol=PROTOCOL``"
msgstr ""

#: ../../ref/django-admin.txt:500
# ef50e88309684e8f8bbbf8e80f078e97
msgid "Protocol to use. *PROTOCOL* can be ``fcgi``, ``scgi``, ``ajp``, etc. (default is ``fcgi``)"
msgstr ""

#: ../../ref/django-admin.txt:505
# 65907a94f62848da94c61e8c1835c92b
msgid "``host=HOSTNAME``"
msgstr ""

#: ../../ref/django-admin.txt:507
# 5210bb75ce8b45e2802abd9ecab94ad4
msgid "Hostname to listen on."
msgstr ""

#: ../../ref/django-admin.txt:511
# 3301f3e6c41445a592c32555f87a2cab
msgid "``port=PORTNUM``"
msgstr ""

#: ../../ref/django-admin.txt:513
# 4fe079892e994aa19bad37e54df759ab
msgid "Port to listen on."
msgstr ""

#: ../../ref/django-admin.txt:517
# 3792b499d0ce438fa6cdc5183fd3dfbb
msgid "``socket=FILE``"
msgstr ""

#: ../../ref/django-admin.txt:519
# 52dada7f929d4519be3ae850c62380aa
msgid "UNIX socket to listen on."
msgstr ""

#: ../../ref/django-admin.txt:523
# 11bbd36386be43fc8da30d93a867a089
msgid "``method=IMPL``"
msgstr ""

#: ../../ref/django-admin.txt:525
# 9f31730a26d549f1a69dd303dd71a269
msgid "Possible values: ``prefork`` or ``threaded`` (default ``prefork``)"
msgstr ""

#: ../../ref/django-admin.txt:529
# 6945ef0c19e140459ad5813da30b35b4
msgid "``maxrequests=NUMBER``"
msgstr ""

#: ../../ref/django-admin.txt:531
# faa16db85a76429e996cdb8daba0e06a
msgid "Number of requests a child handles before it is killed and a new child is forked (0 means no limit)."
msgstr ""

#: ../../ref/django-admin.txt:536
# 0219b1446e9f48b1acffebd422f344a2
msgid "``maxspare=NUMBER``"
msgstr ""

#: ../../ref/django-admin.txt:538
# d889b486777e4ffe9a438acd2319c015
msgid "Max number of spare processes / threads."
msgstr ""

#: ../../ref/django-admin.txt:542
# 27e4e155f60a4ab1a80ed2177ab7e4bc
msgid "``minspare=NUMBER``"
msgstr ""

#: ../../ref/django-admin.txt:544
# 9997ce1996464c8f950a492cc9765142
msgid "Min number of spare processes / threads."
msgstr ""

#: ../../ref/django-admin.txt:548
# c6272c2c199e434f90ee4ca3c5e4c4ae
msgid "``maxchildren=NUMBER``"
msgstr ""

#: ../../ref/django-admin.txt:550
# 39f839a6a94d4f02a15c122298fb26eb
msgid "Hard limit number of processes / threads."
msgstr ""

#: ../../ref/django-admin.txt:554
# 1af4705d86a34d11bd10a3bac3548062
msgid "``daemonize=BOOL``"
msgstr ""

#: ../../ref/django-admin.txt:556
# 714ba3695d564c87ab8c6965018e00ae
msgid "Whether to detach from terminal."
msgstr ""

#: ../../ref/django-admin.txt:560
# 80aad4cf67d048f69823b7cfbf1e676c
msgid "``pidfile=FILE``"
msgstr ""

#: ../../ref/django-admin.txt:562
# 3d8189394d3b4b5a853b4d1fecf9e226
msgid "Write the spawned process-id to file *FILE*."
msgstr ""

#: ../../ref/django-admin.txt:566
# 468c4bb47169445c81f405b8396403af
msgid "``workdir=DIRECTORY``"
msgstr ""

#: ../../ref/django-admin.txt:568
# b2f920e28a684378ac304441605c6368
msgid "Change to directory *DIRECTORY* when daemonizing."
msgstr ""

#: ../../ref/django-admin.txt:572
# c3fff4077bd74eaeb441fb2380441158
msgid "``debug=BOOL``"
msgstr ""

#: ../../ref/django-admin.txt:574
# 1b6b174ef51c4b6387ac9774dc53acda
msgid "Set to true to enable flup tracebacks."
msgstr ""

#: ../../ref/django-admin.txt:578
# f597f2ef16884bd193ee6d4b7d53388c
msgid "``outlog=FILE``"
msgstr ""

#: ../../ref/django-admin.txt:580
# 96efa7c7bb0c42239140f3ff34b81d01
msgid "Write stdout to the *FILE* file."
msgstr ""

#: ../../ref/django-admin.txt:584
# 607e2a308f2542fca2567f8e1e2f5075
msgid "``errlog=FILE``"
msgstr ""

#: ../../ref/django-admin.txt:586
# b49d8817deb642ffbde86a28ddf29240
msgid "Write stderr to the *FILE* file."
msgstr ""

#: ../../ref/django-admin.txt:590
# f5bbe0966522468db3a204ef54014eac
msgid "``umask=UMASK``"
msgstr ""

#: ../../ref/django-admin.txt:592
# 9b2dc06b9fb649c095561578c7ce88f1
msgid "Umask to use when daemonizing. The value is interpeted as an octal number (default value is ``022``)."
msgstr ""

#: ../../ref/django-admin.txt:600
# 451d7baef57046a8a1ff9446cb870893
msgid "Run a FastCGI server as a daemon and write the spawned PID in a file."
msgstr ""

#: ../../ref/django-admin.txt:603
# f4da57d76b124d98b7dd04de8621664d
msgid "runserver [port or address:port]"
msgstr ""

#: ../../ref/django-admin.txt:607
# 5696d859160a49b886272bd46c6d11a0
msgid "Starts a lightweight development Web server on the local machine. By default, the server runs on port 8000 on the IP address ``127.0.0.1``. You can pass in an IP address and port number explicitly."
msgstr ""

#: ../../ref/django-admin.txt:611
# 1510379818be49eaaddf22c894984257
msgid "If you run this script as a user with normal privileges (recommended), you might not have access to start a port on a low port number. Low port numbers are reserved for the superuser (root)."
msgstr ""

#: ../../ref/django-admin.txt:619
# 0aa2a555e90447aa845428159ce7af7d
msgid "DO NOT USE THIS SERVER IN A PRODUCTION SETTING. It has not gone through security audits or performance tests. (And that's how it's gonna stay. We're in the business of making Web frameworks, not Web servers, so improving this server to be able to handle a production environment is outside the scope of Django.)"
msgstr ""

#: ../../ref/django-admin.txt:625
# 1eb8b36951f64ddabeb110365b584c6a
msgid "The development server automatically reloads Python code for each request, as needed. You don't need to restart the server for code changes to take effect."
msgstr ""

#: ../../ref/django-admin.txt:628
# c7ce7952030f4dcf9d3fd76be312ad8a
msgid "When you start the server, and each time you change Python code while the server is running, the server will validate all of your installed models. (See the ``validate`` command below.) If the validator finds errors, it will print them to standard output, but it won't stop the server."
msgstr ""

#: ../../ref/django-admin.txt:633
# 39b8e67f90f34aa88e944ee46ac4fe19
msgid "You can run as many servers as you want, as long as they're on separate ports. Just execute ``django-admin.py runserver`` more than once."
msgstr ""

#: ../../ref/django-admin.txt:636
# 57f5ecc049884899aff6b9a115d7a044
msgid "Note that the default IP address, ``127.0.0.1``, is not accessible from other machines on your network. To make your development server viewable to other machines on the network, use its own IP address (e.g. ``192.168.2.1``) or ``0.0.0.0`` or ``::`` (with IPv6 enabled)."
msgstr ""

#: ../../ref/django-admin.txt:641
# c97e98b5c6734e81aee6bfb59873ac7b
msgid "You can provide an IPv6 address surrounded by brackets (e.g. ``[200a::1]:8000``). This will automatically enable IPv6 support."
msgstr ""

#: ../../ref/django-admin.txt:644
# 818370f9ddba4ec3b6a861a514968f2b
msgid "A hostname containing ASCII-only characters can also be used."
msgstr ""

#: ../../ref/django-admin.txt:646
# 8b855fe202f64ece856548ac82fd2452
msgid "If the :doc:`staticfiles</ref/contrib/staticfiles>` contrib app is enabled (default in new projects) the :djadmin:`runserver` command will be overriden with its own :ref:`runserver<staticfiles-runserver>` command."
msgstr ""

#: ../../ref/django-admin.txt:652
# 5ecb99fe1138467e8cb9030b319e0914
msgid "Use the ``--noreload`` option to disable the use of the auto-reloader. This means any Python code changes you make while the server is running will *not* take effect if the particular Python modules have already been loaded into memory."
msgstr ""

#: ../../ref/django-admin.txt:665
# 565797ae87f44f66ab64059533d1ecc8
msgid "Since version 1.4, the development server is multithreaded by default. Use the ``--nothreading`` option to disable the use of threading in the development server."
msgstr ""

#: ../../ref/django-admin.txt:671
# 89e7bc0f42244a5e8f1170bc9c49b3e6
msgid "Use the ``--ipv6`` (or shorter ``-6``) option to tell Django to use IPv6 for the development server. This changes the default IP address from ``127.0.0.1`` to ``::1``."
msgstr ""

#: ../../ref/django-admin.txt:680
# ae64a832d4244f06bb8e0b00f468bcf5
msgid "Examples of using different ports and addresses"
msgstr ""

#: ../../ref/django-admin.txt:682
# c06b64b9a9a142ff9cc0a533ba1da9c2
msgid "Port 8000 on IP address ``127.0.0.1``::"
msgstr ""

#: ../../ref/django-admin.txt:686
# 22e8d916489944aa92cdf9c9d3d8a61e
msgid "Port 8000 on IP address ``1.2.3.4``::"
msgstr ""

#: ../../ref/django-admin.txt:690
# 50893baf1a0b4fdbadca1cf0d73af20b
msgid "Port 7000 on IP address ``127.0.0.1``::"
msgstr ""

#: ../../ref/django-admin.txt:694
# ad30b770db63485883d796b5240c5697
msgid "Port 7000 on IP address ``1.2.3.4``::"
msgstr ""

#: ../../ref/django-admin.txt:698
# 11087037dc3e42e7b5e8cb3b98871bb3
msgid "Port 8000 on IPv6 address ``::1``::"
msgstr ""

#: ../../ref/django-admin.txt:702
# dfdd75edc52f4707b94b77e22c4072ff
msgid "Port 7000 on IPv6 address ``::1``::"
msgstr ""

#: ../../ref/django-admin.txt:706
# 3c8bb84e340d40baaae080b97e9326b3
msgid "Port 7000 on IPv6 address ``2001:0db8:1234:5678::9``::"
msgstr ""

#: ../../ref/django-admin.txt:710
# 6a9d6001bda5410aba4dffb39ce61515
msgid "Port 8000 on IPv4 address of host ``localhost``::"
msgstr ""

#: ../../ref/django-admin.txt:714
# fbf6a1f02c8b44fdb41bd81d20e2024b
msgid "Port 8000 on IPv6 address of host ``localhost``::"
msgstr ""

#: ../../ref/django-admin.txt:719
# 3560f0441c8848798d5fd1fa6fb6cf81
msgid "Serving static files with the development server"
msgstr ""

#: ../../ref/django-admin.txt:721
# 5f50cf340846489b9be87754c2658523
msgid "By default, the development server doesn't serve any static files for your site (such as CSS files, images, things under :setting:`MEDIA_URL` and so forth). If you want to configure Django to serve static media, read :doc:`/howto/static-files/index`."
msgstr ""

#: ../../ref/django-admin.txt:727
# 9a94ab0375f74666a44e0979124fd0e7
msgid "shell"
msgstr ""

#: ../../ref/django-admin.txt:731
# 0ef55b6e16504b4f8202535c348f9df3
msgid "Starts the Python interactive interpreter."
msgstr ""

#: ../../ref/django-admin.txt:733
# 494c2f808b3a45e9a8a6884636c9ae89
msgid "Django will use IPython_ or bpython_ if either is installed. If you have a rich shell installed but want to force use of the \"plain\" Python interpreter, use the ``--plain`` option, like so::"
msgstr ""

#: ../../ref/django-admin.txt:741
# 3b5da084ed97462ab6f3d66e26bae559
msgid "If you would like to specify either IPython or bpython as your interpreter if you have both installed you can specify an alternative interpreter interface with the ``-i`` or ``--interface`` options like so:"
msgstr ""

#: ../../ref/django-admin.txt:745
# cb5dbddd7b634707aa702d1ea3cda030
msgid "IPython::"
msgstr ""

#: ../../ref/django-admin.txt:751
# 8fc83a3a26374cb197c029b893a5d9dc
msgid "bpython::"
msgstr ""

#: ../../ref/django-admin.txt:761
# a70097d0150b45cd873152e6a739ef21
msgid "sql <appname appname ...>"
msgstr ""

#: ../../ref/django-admin.txt:765
# 2d090623d5224f45b5eaf29746f703de
msgid "Prints the CREATE TABLE SQL statements for the given app name(s)."
msgstr ""

#: ../../ref/django-admin.txt:767
#: ../../ref/django-admin.txt:780
#: ../../ref/django-admin.txt:790
#: ../../ref/django-admin.txt:814
#: ../../ref/django-admin.txt:825
#: ../../ref/django-admin.txt:835
#: ../../ref/django-admin.txt:851
# 8a389ef804e7466885b4e34299001abb
# 6f9750f788254b1db8e1a021d8f245e4
# 0a89e9ef540d43aba4beee61a5711f32
# 46639b3e6c0e4d1798a4e8f6ba2ae55a
# 145ce02a4ff44bc983d315d7fabae215
# 4ad9f8ddd4e747f6959a4e31fc6aca61
# 56efa6f73a96422c88bf6cf6eee9496a
msgid "The :djadminopt:`--database` option can be used to specify the database for which to print the SQL."
msgstr ""

#: ../../ref/django-admin.txt:771
# 5aa885012b224d50bff4f5b32a013234
msgid "sqlall <appname appname ...>"
msgstr ""

#: ../../ref/django-admin.txt:775
# 3156f1b6c1b54cd597792bf29d616249
msgid "Prints the CREATE TABLE and initial-data SQL statements for the given app name(s)."
msgstr ""

#: ../../ref/django-admin.txt:777
# da7acc40f1864d84b4888e2a4a280724
msgid "Refer to the description of ``sqlcustom`` for an explanation of how to specify initial data."
msgstr ""

#: ../../ref/django-admin.txt:784
# b354cb1eaa2a4105a8f6e21cd50ee3bf
msgid "sqlclear <appname appname ...>"
msgstr ""

#: ../../ref/django-admin.txt:788
# e60bf9999cc242cd91987fa56eff7962
msgid "Prints the DROP TABLE SQL statements for the given app name(s)."
msgstr ""

#: ../../ref/django-admin.txt:794
# 6f423724c3e94139b313e5f48373706d
msgid "sqlcustom <appname appname ...>"
msgstr ""

#: ../../ref/django-admin.txt:798
# 4c7c943047d541118ade9a64f798de94
msgid "Prints the custom SQL statements for the given app name(s)."
msgstr ""

#: ../../ref/django-admin.txt:800
# 99e3092eca8b4cfb890edcd79cbbd94b
msgid "For each model in each specified app, this command looks for the file ``<appname>/sql/<modelname>.sql``, where ``<appname>`` is the given app name and ``<modelname>`` is the model's name in lowercase. For example, if you have an app ``news`` that includes a ``Story`` model, ``sqlcustom`` will attempt to read a file ``news/sql/story.sql`` and append it to the output of this command."
msgstr ""

#: ../../ref/django-admin.txt:807
# f96fe9bb47ea4f838a41354b178d0f1b
msgid "Each of the SQL files, if given, is expected to contain valid SQL. The SQL files are piped directly into the database after all of the models' table-creation statements have been executed. Use this SQL hook to make any table modifications, or insert any SQL functions into the database."
msgstr ""

#: ../../ref/django-admin.txt:812
# d8692ad0f52c4c80a9a280574772dc1b
msgid "Note that the order in which the SQL files are processed is undefined."
msgstr ""

#: ../../ref/django-admin.txt:818
# 496bf2a529ae455fae3b072fbe45b6b6
msgid "sqlflush"
msgstr ""

#: ../../ref/django-admin.txt:822
# d1778b8cd8ae4eed886cf5d40e27d4ae
msgid "Prints the SQL statements that would be executed for the :djadmin:`flush` command."
msgstr ""

#: ../../ref/django-admin.txt:829
# 52bbdffc714a4a5b9770fb002539ab81
msgid "sqlindexes <appname appname ...>"
msgstr ""

#: ../../ref/django-admin.txt:833
# 0b7962882cec43418f75ba81df541067
msgid "Prints the CREATE INDEX SQL statements for the given app name(s)."
msgstr ""

#: ../../ref/django-admin.txt:839
# 27e1cefdb9324e428a335d41bf58becd
msgid "sqlsequencereset <appname appname ...>"
msgstr ""

#: ../../ref/django-admin.txt:843
# 3ec2037574ba4650a621b759aa9c25da
msgid "Prints the SQL statements for resetting sequences for the given app name(s)."
msgstr ""

#: ../../ref/django-admin.txt:845
# 5a0d36232bb84a8ebb86993d5f95e1aa
msgid "Sequences are indexes used by some database engines to track the next available number for automatically incremented fields."
msgstr ""

#: ../../ref/django-admin.txt:848
# 96a514ce96a74582bc55d419ea420ea9
msgid "Use this command to generate SQL which will fix cases where a sequence is out of sync with its automatically incremented field data."
msgstr ""

#: ../../ref/django-admin.txt:855
# c8b5c1c5e1184ee4ab01a9d041af8e84
msgid "startapp <appname> [destination]"
msgstr ""

#: ../../ref/django-admin.txt:859
# 3c86208dd85140dbb45179b3ca740254
msgid "Creates a Django app directory structure for the given app name in the current directory or the given destination."
msgstr ""

#: ../../ref/django-admin.txt:864
# e6dfec7aa2ad4701a5e98c9204e2bc31
msgid "By default the directory created contains a ``models.py`` file and other app template files. (See the `source`_ for more details.) If only the app name is given, the app directory will be created in the current working directory."
msgstr ""

#: ../../ref/django-admin.txt:869
# 365a0e16ea32461f934982f7c06478ad
msgid "If the optional destination is provided, Django will use that existing directory rather than creating a new one. You can use '.' to denote the current working directory."
msgstr ""

#: ../../ref/django-admin.txt:880
# aa04b6933d824ab2abcf5a43fa9bf5e4
msgid "With the ``--template`` option, you can use a custom app template by providing either the path to a directory with the app template file, or a path to a compressed file (``.tar.gz``, ``.tar.bz2``, ``.tgz``, ``.tbz``, ``.zip``) containing the app template files."
msgstr ""

#: ../../ref/django-admin.txt:885
# 2456198a07dd4122b3f696aff5461d3d
msgid "For example, this would look for an app template in the given directory when creating the ``myapp`` app::"
msgstr ""

#: ../../ref/django-admin.txt:890
# aa6f9a7b7f014bf1b92b044e988039e7
msgid "Django will also accept URLs (``http``, ``https``, ``ftp``) to compressed archives with the app template files, downloading and extracting them on the fly."
msgstr ""

#: ../../ref/django-admin.txt:894
#: ../../ref/django-admin.txt:969
# fc67775387ae4961beba91837f32813c
# fefa1e417a9d44338963fd10e8ace493
msgid "For example, taking advantage of Github's feature to expose repositories as zip files, you can use a URL like::"
msgstr ""

#: ../../ref/django-admin.txt:901
# 566d24bdab1042a691d3c4609d479430
msgid "When Django copies the app template files, it also renders certain files through the template engine: the files whose extensions match the ``--extension`` option (``py`` by default) and the files whose names are passed with the ``--name`` option. The :class:`template context <django.template.Context>` used is:"
msgstr ""

#: ../../ref/django-admin.txt:907
#: ../../ref/django-admin.txt:980
# c0321a23a7e14a258ad9b5663788cbcb
# 9fd2d0845795423cabadece5fd88b68a
msgid "Any option passed to the startapp command (among the command's supported options)"
msgstr ""

#: ../../ref/django-admin.txt:909
# 2d46ab32e7544777a4da0b58959bc708
msgid "``app_name`` -- the app name as passed to the command"
msgstr ""

#: ../../ref/django-admin.txt:910
# 157b36767f574a15a1a538b89686efac
msgid "``app_directory`` -- the full path of the newly created app"
msgstr ""

#: ../../ref/django-admin.txt:916
# 5c0769f9fa9946daa5d40aa805130f5d
msgid "When the app template files are rendered with the Django template engine (by default all ``*.py`` files), Django will also replace all stray template variables contained. For example, if one of the Python files contains a docstring explaining a particular feature related to template rendering, it might result in an incorrect example."
msgstr ""

#: ../../ref/django-admin.txt:922
# feb66e4477a74ea98c0fc331ce38578f
msgid "To work around this problem, you can use the :ttag:`templatetag` templatetag to \"escape\" the various parts of the template syntax."
msgstr ""

#: ../../ref/django-admin.txt:928
# f9d7d73d1652425a954a12beb6c7d5ca
msgid "startproject <projectname> [destination]"
msgstr ""

#: ../../ref/django-admin.txt:932
# 067d87cf200845c0acf6dff1688b85d5
msgid "Creates a Django project directory structure for the given project name in the current directory or the given destination."
msgstr ""

#: ../../ref/django-admin.txt:937
# 15f18937851d470fb0ff75b1ed9d101a
msgid "By default, the new directory contains ``manage.py`` and a project package (containing a ``settings.py`` and other files). See the `template source`_ for details."
msgstr ""

#: ../../ref/django-admin.txt:941
# 2b565b7a233a4bc58beb14b498ec8f8b
msgid "If only the project name is given, both the project directory and project package will be named ``<projectname>`` and the project directory will be created in the current working directory."
msgstr ""

#: ../../ref/django-admin.txt:945
# d5aa6b50355840818096864c727af171
msgid "If the optional destination is provided, Django will use that existing directory as the project directory, and create ``manage.py`` and the project package within it. Use '.' to denote the current working directory."
msgstr ""

#: ../../ref/django-admin.txt:955
# 45133bbb8ca04c799c561e676f39718d
msgid "As with the :djadmin:`startapp` command, the ``--template`` option lets you specify a directory, file path or URL of a custom project template. See the :djadmin:`startapp` documentation for details of supported project template formats."
msgstr ""

#: ../../ref/django-admin.txt:960
# f2f8b61978b246ee829fb02bf065a2fb
msgid "For example, this would look for a project template in the given directory when creating the ``myproject`` project::"
msgstr ""

#: ../../ref/django-admin.txt:965
# 7841a1f812634866b2e546e6070f8162
msgid "Django will also accept URLs (``http``, ``https``, ``ftp``) to compressed archives with the project template files, downloading and extracting them on the fly."
msgstr ""

#: ../../ref/django-admin.txt:974
# e8cafb3a4aab4f8f829810f687b3109f
msgid "When Django copies the project template files, it also renders certain files through the template engine: the files whose extensions match the ``--extension`` option (``py`` by default) and the files whose names are passed with the ``--name`` option. The :class:`template context <django.template.Context>` used is:"
msgstr ""

#: ../../ref/django-admin.txt:982
# cc0e60ed454f4919ae955b0f391b5d3d
msgid "``project_name`` -- the project name as passed to the command"
msgstr ""

#: ../../ref/django-admin.txt:983
# 7ea451cf50964b26bc72d7f701698de1
msgid "``project_directory`` -- the full path of the newly created project"
msgstr ""

#: ../../ref/django-admin.txt:984
# 3a3dfc6cb16a4df9afb69ef7b9e2985f
msgid "``secret_key`` -- a random key for the :setting:`SECRET_KEY` setting"
msgstr ""

#: ../../ref/django-admin.txt:986
# 326cd97d9de24e168046b46e4863322b
msgid "Please also see the :ref:`rendering warning <render_warning>` as mentioned for :djadmin:`startapp`."
msgstr ""

#: ../../ref/django-admin.txt:992
# 661a0417a05d4e7c8bcf2b5b9efd5a34
msgid "syncdb"
msgstr ""

#: ../../ref/django-admin.txt:996
# 331ddf5b143f44639ff9c72516dbdfb2
msgid "Creates the database tables for all apps in :setting:`INSTALLED_APPS` whose tables have not already been created."
msgstr ""

#: ../../ref/django-admin.txt:999
# aa5a12a45f07414a8bddb70f6e204d9f
msgid "Use this command when you've added new applications to your project and want to install them in the database. This includes any apps shipped with Django that might be in :setting:`INSTALLED_APPS` by default. When you start a new project, run this command to install the default apps."
msgstr ""

#: ../../ref/django-admin.txt:1006
# 88cfd312f1364b05abc72c65a0d16146
msgid "``syncdb`` will only create tables for models which have not yet been installed. It will *never* issue ``ALTER TABLE`` statements to match changes made to a model class after installation. Changes to model classes and database schemas often involve some form of ambiguity and, in those cases, Django would have to guess at the correct changes to make. There is a risk that critical data would be lost in the process."
msgstr ""

#: ../../ref/django-admin.txt:1013
# 2da4e769f2ea4ab6a51c10850bb408bb
msgid "If you have made changes to a model and wish to alter the database tables to match, use the ``sql`` command to display the new SQL structure and compare that to your existing table schema to work out the changes."
msgstr ""

#: ../../ref/django-admin.txt:1017
# e2228dcafa8e4aad8bb1db3d4b39ba43
msgid "If you're installing the ``django.contrib.auth`` application, ``syncdb`` will give you the option of creating a superuser immediately."
msgstr ""

#: ../../ref/django-admin.txt:1020
# 996102e450784c7687ed92bb0283f1ea
msgid "``syncdb`` will also search for and install any fixture named ``initial_data`` with an appropriate extension (e.g. ``json`` or ``xml``). See the documentation for ``loaddata`` for details on the specification of fixture data files."
msgstr ""

#: ../../ref/django-admin.txt:1028
# 3eadd27c82764ab9833aa8b530dd7c1b
msgid "The :djadminopt:`--database` option can be used to specify the database to synchronize."
msgstr ""

#: ../../ref/django-admin.txt:1039
# 9f51f915202546fb9a341abb58930720
msgid "test <app or test identifier>"
msgstr ""

#: ../../ref/django-admin.txt:1043
# 1d1c619d16ff41c2a1fe6d4a9bba21d0
msgid "Runs tests for all installed models. See :doc:`/topics/testing/index` for more information."
msgstr ""

#: ../../ref/django-admin.txt:1048
# 085f8d51c56b40998fb5fe0ae7a52bea
msgid "The ``--failfast`` option can be used to stop running tests and report the failure immediately after a test fails."
msgstr ""

#: ../../ref/django-admin.txt:1054
# 04490e04482647d9a4d0bc1a33c4e81c
msgid "The ``--testrunner`` option can be used to control the test runner class that is used to execute tests. If this value is provided, it overrides the value provided by the :setting:`TEST_RUNNER` setting."
msgstr ""

#: ../../ref/django-admin.txt:1061
# faa8e028e4d74241ae2444c2d3f8e49c
msgid "The ``--liveserver`` option can be used to override the default address where the live server (used with :class:`~django.test.LiveServerTestCase`) is expected to run from. The default value is ``localhost:8081``."
msgstr ""

#: ../../ref/django-admin.txt:1066
# b9316a3523ce400aabcbc4e0e68e4b66
msgid "testserver <fixture fixture ...>"
msgstr ""

#: ../../ref/django-admin.txt:1070
# 4ed7cff41880462d8a9561e02d0a1fdd
msgid "Runs a Django development server (as in ``runserver``) using data from the given fixture(s)."
msgstr ""

#: ../../ref/django-admin.txt:1073
# 00bd9397dcfa402595f363fe986dd70e
msgid "For example, this command::"
msgstr ""

#: ../../ref/django-admin.txt:1077
# 3b4dd9ce08c142a990aff47ec8ab6a94
msgid "...would perform the following steps:"
msgstr ""

#: ../../ref/django-admin.txt:1079
# 1d9da79eada6452c820719db2cf13a76
msgid "Create a test database, as described in :ref:`the-test-database`."
msgstr ""

#: ../../ref/django-admin.txt:1080
# 2a822c6534534bb4b330fee839f0b17c
msgid "Populate the test database with fixture data from the given fixtures. (For more on fixtures, see the documentation for ``loaddata`` above.)"
msgstr ""

#: ../../ref/django-admin.txt:1082
# cc101027f967466c8a2b592e1bd17afa
msgid "Runs the Django development server (as in ``runserver``), pointed at this newly created test database instead of your production database."
msgstr ""

#: ../../ref/django-admin.txt:1085
# a72d843db658447c9c2bed6b73b8fd2d
msgid "This is useful in a number of ways:"
msgstr ""

#: ../../ref/django-admin.txt:1087
# 0ef929cfd58a459c8afcb3d5f746a2ad
msgid "When you're writing :doc:`unit tests </topics/testing/overview>` of how your views act with certain fixture data, you can use ``testserver`` to interact with the views in a Web browser, manually."
msgstr ""

#: ../../ref/django-admin.txt:1091
# 899ad2ee866d405db23af296d4a56bc8
msgid "Let's say you're developing your Django application and have a \"pristine\" copy of a database that you'd like to interact with. You can dump your database to a fixture (using the ``dumpdata`` command, explained above), then use ``testserver`` to run your Web application with that data. With this arrangement, you have the flexibility of messing up your data in any way, knowing that whatever data changes you're making are only being made to a test database."
msgstr ""

#: ../../ref/django-admin.txt:1099
# be400a32bbf543f3b0f6e9e2905887e3
msgid "Note that this server does *not* automatically detect changes to your Python source code (as ``runserver`` does). It does, however, detect changes to templates."
msgstr ""

#: ../../ref/django-admin.txt:1105
# 55ae2fc8e6e54733ae9c4be3352e4b27
msgid "Use ``--addrport`` to specify a different port, or IP address and port, from the default of ``127.0.0.1:8000``. This value follows exactly the same format and serves exactly the same function as the argument to the ``runserver`` command."
msgstr ""

#: ../../ref/django-admin.txt:1111
# 4e5c9eb95e0948c681c247f9da8c4417
msgid "To run the test server on port 7000 with ``fixture1`` and ``fixture2``::"
msgstr ""

#: ../../ref/django-admin.txt:1116
# 7bca77057e4849348d743d27af981af6
msgid "(The above statements are equivalent. We include both of them to demonstrate that it doesn't matter whether the options come before or after the fixture arguments.)"
msgstr ""

#: ../../ref/django-admin.txt:1120
# c87c3924d1be4c3f88a12de04813a465
msgid "To run on 1.2.3.4:7000 with a ``test`` fixture::"
msgstr ""

#: ../../ref/django-admin.txt:1128
# 80073ddf68054d609add1f9a578aa5b0
msgid "validate"
msgstr ""

#: ../../ref/django-admin.txt:1132
# 5a1721aed9364b1cb6deafae21a39d34
msgid "Validates all installed models (according to the :setting:`INSTALLED_APPS` setting) and prints validation errors to standard output."
msgstr ""

#: ../../ref/django-admin.txt:1136
# e7b3df504276473e9d911b4bc3eb439b
msgid "Commands provided by applications"
msgstr ""

#: ../../ref/django-admin.txt:1138
# e687b231601a4475844cf2b2d5e5f9db
msgid "Some commands are only available when the ``django.contrib`` application that :doc:`implements </howto/custom-management-commands>` them has been :setting:`enabled <INSTALLED_APPS>`. This section describes them grouped by their application."
msgstr ""

#: ../../ref/django-admin.txt:1147
# 1d50e700f56f43e584480e08e0378c3f
msgid "changepassword"
msgstr ""

#: ../../ref/django-admin.txt:1151
#: ../../ref/django-admin.txt:1173
# d8816d64ae624c38a8a83681d545d652
# 35cc033b32584a378783ebd0c30bbc2e
msgid "This command is only available if Django's :doc:`authentication system </topics/auth/index>` (``django.contrib.auth``) is installed."
msgstr ""

#: ../../ref/django-admin.txt:1154
# c64ab4e8969645b4aed35089f76efb63
msgid "Allows changing a user's password. It prompts you to enter twice the password of the user given as parameter. If they both match, the new password will be changed immediately. If you do not supply a user, the command will attempt to change the password whose username matches the current user."
msgstr ""

#: ../../ref/django-admin.txt:1161
# 71217e46f34d438ba842e8e103da4606
msgid "Use the ``--database`` option to specify the database to query for the user. If it's not supplied, Django will use the ``default`` database."
msgstr ""

#: ../../ref/django-admin.txt:1169
# 2660ce083753487cbf11de129c9d303c
msgid "createsuperuser"
msgstr ""

#: ../../ref/django-admin.txt:1176
# 8fe70aa17dee43edbf998319e0b0becb
msgid "Creates a superuser account (a user who has all permissions). This is useful if you need to create an initial superuser account but did not do so during ``syncdb``, or if you need to programmatically generate superuser accounts for your site(s)."
msgstr ""

#: ../../ref/django-admin.txt:1181
# 0a05b5085c074afe9eaa7087fac06501
msgid "When run interactively, this command will prompt for a password for the new superuser account. When run non-interactively, no password will be set, and the superuser account will not be able to log in until a password has been manually set for it."
msgstr ""

#: ../../ref/django-admin.txt:1189
# 750486af2e49441290d4a1e7b046f221
msgid "The username and email address for the new account can be supplied by using the ``--username`` and ``--email`` arguments on the command line. If either of those is not supplied, ``createsuperuser`` will prompt for it when running interactively."
msgstr ""

#: ../../ref/django-admin.txt:1196
# 0a34a0d255594aac970bef30745c1a6c
msgid "Use the ``--database`` option to specify the database into which the superuser object will be saved."
msgstr ""

#: ../../ref/django-admin.txt:1200
# ad630e0a60864795bf1c9720eb3e4430
msgid "``django.contrib.gis``"
msgstr ""

#: ../../ref/django-admin.txt:1203
# a5d60313951e43a9ae4a6a34001864be
msgid "ogrinspect"
msgstr ""

#: ../../ref/django-admin.txt:1205
# f13151cb6846473cab6de27f6ecbe63f
msgid "This command is only available if :doc:`GeoDjango </ref/contrib/gis/index>` (``django.contrib.gis``) is installed."
msgstr ""

#: ../../ref/django-admin.txt:1208
# 5c11173b444140b9ae314b5c24fa651e
msgid "Please refer to its :djadmin:`description <ogrinspect>` in the GeoDjango documentation."
msgstr ""

#: ../../ref/django-admin.txt:1212
# 491b7c67e5bd49a6af5ac2bdd33ac7c7
msgid "``django.contrib.sessions``"
msgstr ""

#: ../../ref/django-admin.txt:1215
# c75ef50205e641ff9f961e702a9a95b0
msgid "clearsessions"
msgstr ""

#: ../../ref/django-admin.txt:1219
# 2ea7971080a343e78ca56f7bfc95f1d8
msgid "Can be run as a cron job or directly to clean out expired sessions."
msgstr ""

#: ../../ref/django-admin.txt:1222
# 9e80ed0fc6984bd1a1d8f5a30f0319bc
msgid "``django.contrib.sitemaps``"
msgstr ""

#: ../../ref/django-admin.txt:1225
# a0bd8b27712b4d1f884d8a28284b3e71
msgid "ping_google"
msgstr ""

#: ../../ref/django-admin.txt:1227
# c6d8f4f5a5e240e88a77feeb339e3bd2
msgid "This command is only available if the :doc:`Sitemaps framework </ref/contrib/sitemaps>` (``django.contrib.sitemaps``) is installed."
msgstr ""

#: ../../ref/django-admin.txt:1230
# 8cb2134577384294b59de43738e32daf
msgid "Please refer to its :djadmin:`description <ping_google>` in the Sitemaps documentation."
msgstr ""

#: ../../ref/django-admin.txt:1234
# ce8c464229d04ecdb2e7763f09705eaa
msgid "``django.contrib.staticfiles``"
msgstr ""

#: ../../ref/django-admin.txt:1239
#: ../../ref/django-admin.txt:1248
# 955e544c5c3740ba8d245ec2f410f4e7
# 4dde47abd3db413a926bca691eac2eaa
msgid "This command is only available if the :doc:`static files application </howto/static-files/index>` (``django.contrib.staticfiles``) is installed."
msgstr ""

#: ../../ref/django-admin.txt:1242
# ab6f8943382b476a9d4f7ad3c0338404
msgid "Please refer to its :djadmin:`description <collectstatic>` in the :doc:`staticfiles </ref/contrib/staticfiles>` documentation."
msgstr ""

#: ../../ref/django-admin.txt:1251
# ea9cbda4324c490b88732198b9047617
msgid "Please refer to its :djadmin:`description <findstatic>` in the :doc:`staticfiles </ref/contrib/staticfiles>` documentation."
msgstr ""

#: ../../ref/django-admin.txt:1255
# d186c96fccd648eabf7f9836c752f461
msgid "Default options"
msgstr ""

#: ../../ref/django-admin.txt:1257
# 24f62c3ba5e44c98afd1a17efd391348
msgid "Although some commands may allow their own custom options, every command allows for the following options:"
msgstr ""

#: ../../ref/django-admin.txt:1266
# f57e53eb28084b4a9580c667fbc1a217
msgid "Adds the given filesystem path to the Python `import search path`_. If this isn't provided, ``django-admin.py`` will use the ``PYTHONPATH`` environment variable."
msgstr ""

#: ../../ref/django-admin.txt:1270
# df59f133c0ee4c489567270cc4f9c134
msgid "Note that this option is unnecessary in ``manage.py``, because it takes care of setting the Python path for you."
msgstr ""

#: ../../ref/django-admin.txt:1281
# 72cf7d0a88114329be0fae6fb72c1b75
msgid "Explicitly specifies the settings module to use. The settings module should be in Python package syntax, e.g. ``mysite.settings``. If this isn't provided, ``django-admin.py`` will use the ``DJANGO_SETTINGS_MODULE`` environment variable."
msgstr ""

#: ../../ref/django-admin.txt:1286
# 4ada0420a4da46a0a64945d07c3749fc
msgid "Note that this option is unnecessary in ``manage.py``, because it uses ``settings.py`` from the current project by default."
msgstr ""

#: ../../ref/django-admin.txt:1295
# e8887ae8f32c4b918e0a125e8dba7364
msgid "By default, ``django-admin.py`` will show a simple error message whenever an error occurs. If you specify ``--traceback``, ``django-admin.py``  will output a full stack trace whenever an exception is raised."
msgstr ""

#: ../../ref/django-admin.txt:1305
# a8bb8f8cdeb643c4a251f533ee5700b6
msgid "Use ``--verbosity`` to specify the amount of notification and debug information that ``django-admin.py`` should print to the console."
msgstr ""

#: ../../ref/django-admin.txt:1308
# c6aefbe334a14e68a2402d9384cf4d2c
msgid "``0`` means no output."
msgstr ""

#: ../../ref/django-admin.txt:1309
# bb18b8b991664316baa9dc52da0df4f1
msgid "``1`` means normal output (default)."
msgstr ""

#: ../../ref/django-admin.txt:1310
# f68f7ed6f62c4a029783dea8a94e14b2
msgid "``2`` means verbose output."
msgstr ""

#: ../../ref/django-admin.txt:1311
# 29d5f6873e4d478b87e04ae85566d745
msgid "``3`` means *very* verbose output."
msgstr ""

#: ../../ref/django-admin.txt:1314
# b9bf75454e2543989457186eac79c2d7
msgid "Common options"
msgstr ""

#: ../../ref/django-admin.txt:1316
# 9b00b248eec14d438503f3ad7b167473
msgid "The following options are not available on every command, but they are common to a number of commands."
msgstr ""

#: ../../ref/django-admin.txt:1321
# a2fc1f647eeb40fd9759b771853d0c73
msgid "Used to specify the database on which a command will operate. If not specified, this option will default to an alias of ``default``."
msgstr ""

#: ../../ref/django-admin.txt:1324
# f9328742e36c4e1f94ead51cfbb1c8a6
msgid "For example, to dump data from the database with the alias ``master``::"
msgstr ""

#: ../../ref/django-admin.txt:1330
# e4e773f7edf24035b1822cda55b25482
msgid "Exclude a specific application from the applications whose contents is output. For example, to specifically exclude the ``auth`` application from the output of dumpdata, you would call::"
msgstr ""

#: ../../ref/django-admin.txt:1336
# a7493e78914b4eca90f2e131ecfcad92
msgid "If you want to exclude multiple applications, use multiple ``--exclude`` directives::"
msgstr ""

#: ../../ref/django-admin.txt:1343
# 0668cfa6ae6d442ea9a2ba2b35156d82
msgid "Use the ``--locale`` or ``-l`` option to specify the locale to process. If not provided all locales are processed."
msgstr ""

#: ../../ref/django-admin.txt:1348
# b18a296c4493446d8c57a664ea254673
msgid "Use the ``--noinput`` option to suppress all user prompting, such as \"Are you sure?\" confirmation messages. This is useful if ``django-admin.py`` is being executed as an unattended, automated script."
msgstr ""

#: ../../ref/django-admin.txt:1353
# 87d8b1fc4a42413db38fe12df474f27d
msgid "Extra niceties"
msgstr ""

#: ../../ref/django-admin.txt:1358
# 2fa99cd21e504df6b7e1f07e31c4a814
msgid "Syntax coloring"
msgstr ""

#: ../../ref/django-admin.txt:1360
# 0a72ddb304b74a3fa6791883fda4970a
msgid "The ``django-admin.py`` / ``manage.py`` commands will use pretty color-coded output if your terminal supports ANSI-colored output. It won't use the color codes if you're piping the command's output to another program."
msgstr ""

#: ../../ref/django-admin.txt:1365
# 2cec3465233540aab4d524c11d74cd6e
msgid "The colors used for syntax highlighting can be customized. Django ships with three color palettes:"
msgstr ""

#: ../../ref/django-admin.txt:1368
# 7590edf167384466b8e64a8e5e58b50e
msgid "``dark``, suited to terminals that show white text on a black background. This is the default palette."
msgstr ""

#: ../../ref/django-admin.txt:1371
# d8c5957fc6c440b9a9b8c668f8b50303
msgid "``light``, suited to terminals that show black text on a white background."
msgstr ""

#: ../../ref/django-admin.txt:1374
# 67c06e58d9c14ca1b8a2c4c865922a5f
msgid "``nocolor``, which disables syntax highlighting."
msgstr ""

#: ../../ref/django-admin.txt:1376
# 02a8058c2f83461eae9f2606d27acfc0
msgid "You select a palette by setting a ``DJANGO_COLORS`` environment variable to specify the palette you want to use. For example, to specify the ``light`` palette under a Unix or OS/X BASH shell, you would run the following at a command prompt::"
msgstr ""

#: ../../ref/django-admin.txt:1383
# 7ba51b87bbed498a889e6e617e6db5a6
msgid "You can also customize the colors that are used. Django specifies a number of roles in which color is used:"
msgstr ""

#: ../../ref/django-admin.txt:1386
# 5f84914b692f4d4093b04d0d9e27f1ee
msgid "``error`` - A major error."
msgstr ""

#: ../../ref/django-admin.txt:1387
# ef77506ae5cc4cfc8ab7c39b3431f43a
msgid "``notice`` - A minor error."
msgstr ""

#: ../../ref/django-admin.txt:1388
# 92a910159d5f44d09c1a784034968bd2
msgid "``sql_field`` - The name of a model field in SQL."
msgstr ""

#: ../../ref/django-admin.txt:1389
# 9e163794edd94025bf47917fa51ea2fc
msgid "``sql_coltype`` - The type of a model field in SQL."
msgstr ""

#: ../../ref/django-admin.txt:1390
# 4331b08da5e14adcb98d28f755e83a59
msgid "``sql_keyword`` - A SQL keyword."
msgstr ""

#: ../../ref/django-admin.txt:1391
# 9098339a011840a0bbcdd981df7e461c
msgid "``sql_table`` - The name of a model in SQL."
msgstr ""

#: ../../ref/django-admin.txt:1392
# 9e88fa5c44134ac39934fee45ed264ea
msgid "``http_info`` - A 1XX HTTP Informational server response."
msgstr ""

#: ../../ref/django-admin.txt:1393
# fc0421b8dc3c4df3a3f4a2c8d02a713a
msgid "``http_success`` - A 2XX HTTP Success server response."
msgstr ""

#: ../../ref/django-admin.txt:1394
# 74a2ad767ae64659b87f0bf0804cf11d
msgid "``http_not_modified`` - A 304 HTTP Not Modified server response."
msgstr ""

#: ../../ref/django-admin.txt:1395
# 49af8426eee34fa5b9d7d40bd5b83355
msgid "``http_redirect`` - A 3XX HTTP Redirect server response other than 304."
msgstr ""

#: ../../ref/django-admin.txt:1396
# 6bbf07bdc30245478b86192010d28f4c
msgid "``http_not_found`` - A 404 HTTP Not Found server response."
msgstr ""

#: ../../ref/django-admin.txt:1397
# 24de717e6c534e66af630677da75a2ca
msgid "``http_bad_request`` - A 4XX HTTP Bad Request server response other than 404."
msgstr ""

#: ../../ref/django-admin.txt:1398
# 2939519427564e31bc84349ea3a229a4
msgid "``http_server_error`` - A 5XX HTTP Server Error response."
msgstr ""

#: ../../ref/django-admin.txt:1400
# 90916f3147d84fecbb89ab69d99d394b
msgid "Each of these roles can be assigned a specific foreground and background color, from the following list:"
msgstr ""

#: ../../ref/django-admin.txt:1403
# 5bb80759bd0049bdb4e1ef7824613a64
msgid "``black``"
msgstr ""

#: ../../ref/django-admin.txt:1404
# db89cf7c72154cf0a48574cc76aed85e
msgid "``red``"
msgstr ""

#: ../../ref/django-admin.txt:1405
# c19da65744244559a7a863bd7e07aa0b
msgid "``green``"
msgstr ""

#: ../../ref/django-admin.txt:1406
# d7d7907e34d94aada9a63a1e99483a8c
msgid "``yellow``"
msgstr ""

#: ../../ref/django-admin.txt:1407
# 24643420a2494fbdac887b2e16867cdb
msgid "``blue``"
msgstr ""

#: ../../ref/django-admin.txt:1408
# a9f6d4a8a0784fe098005ea904c67094
msgid "``magenta``"
msgstr ""

#: ../../ref/django-admin.txt:1409
# 68d534e6cfb1445da2e9ef11ca5b426d
msgid "``cyan``"
msgstr ""

#: ../../ref/django-admin.txt:1410
# 50eee6af947b411491f7f0e666412371
msgid "``white``"
msgstr ""

#: ../../ref/django-admin.txt:1412
# 308e52ff01794af58d5163557ae41137
msgid "Each of these colors can then be modified by using the following display options:"
msgstr ""

#: ../../ref/django-admin.txt:1415
# 1e7f3ccec0014e8ca11381272a69e77f
msgid "``bold``"
msgstr ""

#: ../../ref/django-admin.txt:1416
# 2d270718c16e488bbda61328b108643d
msgid "``underscore``"
msgstr ""

#: ../../ref/django-admin.txt:1417
# 1604b19094064e148af6112745308c0b
msgid "``blink``"
msgstr ""

#: ../../ref/django-admin.txt:1418
#: ../../ref/signals.txt:303
#: ../../ref/signals.txt:330
# b1811a2e270548c6a2aa33d53b7751d1
# 9bb77995bfcc42d9a4a24188125b537f
# b45c61770d46430fa0bf469bfef3d5f9
msgid "``reverse``"
msgstr ""

#: ../../ref/django-admin.txt:1419
# 4be44f30e3b040d19e19e4404918ca96
msgid "``conceal``"
msgstr ""

#: ../../ref/django-admin.txt:1421
# b4d5ddd25060478c979527323259e3a8
msgid "A color specification follows one of the following patterns:"
msgstr ""

#: ../../ref/django-admin.txt:1423
# 30e5db795ca247c2967be8025490709e
msgid "``role=fg``"
msgstr ""

#: ../../ref/django-admin.txt:1424
# 15086e0f97a04e73a2c72220a59d2333
msgid "``role=fg/bg``"
msgstr ""

#: ../../ref/django-admin.txt:1425
# af297386e4fe459792a5536322197e70
msgid "``role=fg,option,option``"
msgstr ""

#: ../../ref/django-admin.txt:1426
# 607b48ae6ea74b8d8ca79e3b44ffe919
msgid "``role=fg/bg,option,option``"
msgstr ""

#: ../../ref/django-admin.txt:1428
# b2ad35a79d4a49d59c7a43da8f0ef9ea
msgid "where ``role`` is the name of a valid color role, ``fg`` is the foreground color, ``bg`` is the background color and each ``option`` is one of the color modifying options. Multiple color specifications are then separated by semicolon. For example::"
msgstr ""

#: ../../ref/django-admin.txt:1435
# adcda8032c5049f6a029fdc5f83f6485
msgid "would specify that errors be displayed using blinking yellow on blue, and notices displayed using magenta. All other color roles would be left uncolored."
msgstr ""

#: ../../ref/django-admin.txt:1439
# cfb8b64fdf9e449fb5a6245e3ef09712
msgid "Colors can also be specified by extending a base palette. If you put a palette name in a color specification, all the colors implied by that palette will be loaded. So::"
msgstr ""

#: ../../ref/django-admin.txt:1445
# a992a404e12a411daa475e9907de6104
msgid "would specify the use of all the colors in the light color palette, *except* for the colors for errors and notices which would be overridden as specified."
msgstr ""

#: ../../ref/django-admin.txt:1450
# 550cfcc026c64f6abb103cf3e5b02fad
msgid "Bash completion"
msgstr ""

#: ../../ref/django-admin.txt:1452
# 037e9befa3c14f7fb71e7e778847951d
msgid "If you use the Bash shell, consider installing the Django bash completion script, which lives in ``extras/django_bash_completion`` in the Django distribution. It enables tab-completion of ``django-admin.py`` and ``manage.py`` commands, so you can, for instance..."
msgstr ""

#: ../../ref/django-admin.txt:1457
# 6cf5729d064b4bd49227bd9f4e17ab31
msgid "Type ``django-admin.py``."
msgstr ""

#: ../../ref/django-admin.txt:1458
# f10c7c1a099d409487dd1907b477a819
msgid "Press [TAB] to see all available options."
msgstr ""

#: ../../ref/django-admin.txt:1459
# c728c7a4eaba4480a706aa337beaff41
msgid "Type ``sql``, then [TAB], to see all available options whose names start with ``sql``."
msgstr ""

#: ../../ref/django-admin.txt:1463
# 3b07cdf732134171acdb22f0ad8e02cb
msgid "See :doc:`/howto/custom-management-commands` for how to add customized actions."
msgstr ""

#: ../../ref/django-admin.txt:1468
# 7a21b4e70208400d9730ec327cfbe0c0
msgid "Running management commands from your code"
msgstr ""

#: ../../ref/django-admin.txt:1474
# 5ac9b10e0b254ac880ddbaf9510812ce
msgid "To call a management command from code use ``call_command``."
msgstr ""

#: ../../ref/django-admin.txt:1477
# 8f0fbdefebd54b60800e7c6a0fbac355
msgid "the name of the command to call."
msgstr ""

#: ../../ref/django-admin.txt:1480
# 94a1e5c803474009b2e459f6ddf357a3
msgid "a list of arguments accepted by the command."
msgstr ""

#: ../../ref/django-admin.txt:1483
# 240959b6abe84b70a272d709d724e08d
msgid "named options accepted on the command-line."
msgstr ""

#: ../../ref/django-admin.txt:1485
#: ../../ref/models/querysets.txt:404
#: ../../ref/models/querysets.txt:576
#: ../../ref/models/querysets.txt:605
#: ../../ref/models/querysets.txt:1720
# 763a9215de7d4579816d132ded207826
# 85e0d5f95acf448a906426e0c720e0b1
# cfac7364f05a4da0a65e89bd94c6370f
# ce83239d53dc491f8b54ba75ed68b0b5
# 1a083af87cc449c4b1a1faec7100d395
msgid "Examples::"
msgstr ""

#: ../../ref/django-admin.txt:1492
# 0dd7981fad6045f792989e2303598197
msgid "Output redirection"
msgstr ""

#: ../../ref/django-admin.txt:1494
# 03e3ef1a01524b63be6e82e22212b3b9
msgid "Note that you can redirect standard output and error streams as all commands support the ``stdout`` and ``stderr`` options. For example, you could write::"
msgstr ""

#: ../../ref/exceptions.txt:3
# e9a73b2b98a84e8281b5398f2c72af99
msgid "Django Exceptions"
msgstr ""

#: ../../ref/exceptions.txt:6
# 954af155d5ae4bf1929b7f625c1bf288
msgid "Django raises some Django specific exceptions as well as many standard Python exceptions."
msgstr ""

#: ../../ref/exceptions.txt:10
# 25a1c0f2f1644a79ac865df956bd9f63
msgid "Django-specific Exceptions"
msgstr ""

#: ../../ref/exceptions.txt:16
# 0a1cdcd72c234202bdc15ba138992c59
msgid "ObjectDoesNotExist and DoesNotExist"
msgstr ""

#: ../../ref/exceptions.txt:20
# a642a43bb79c4812ba79cf62a66691d4
msgid "The :exc:`DoesNotExist` exception is raised when an object is not found for the given parameters of a query."
msgstr ""

#: ../../ref/exceptions.txt:23
# ebba5f4c71ab4120882b36932411f3f0
msgid ":exc:`ObjectDoesNotExist` is defined in :mod:`django.core.exceptions`. :exc:`DoesNotExist` is a subclass of the base :exc:`ObjectDoesNotExist` exception that is provided on every model class as a way of identifying the specific type of object that could not be found."
msgstr ""

#: ../../ref/exceptions.txt:28
# 42aa06b27bbc43b6881712d236bff4f7
msgid "See :meth:`~django.db.models.query.QuerySet.get()` for further information on :exc:`ObjectDoesNotExist` and :exc:`DoesNotExist`."
msgstr ""

#: ../../ref/exceptions.txt:32
# 9212760d18034ef59ec9ba80c6fc0c4f
msgid "MultipleObjectsReturned"
msgstr ""

#: ../../ref/exceptions.txt:35
# 84c5c0ff92704526bfe86b7c4f913560
msgid "The :exc:`MultipleObjectsReturned` exception is raised by a query if only one object is expected, but multiple objects are returned. A base version of this exception is provided in :mod:`django.core.exceptions`; each model class contains a subclassed version that can be used to identify the specific object type that has returned multiple objects."
msgstr ""

#: ../../ref/exceptions.txt:41
# ba69e6960a8642d6b11cdabeda9cab32
msgid "See :meth:`~django.db.models.query.QuerySet.get()` for further information."
msgstr ""

#: ../../ref/exceptions.txt:44
# 710125ff028d455991fc6caf6cd91fad
msgid "SuspiciousOperation"
msgstr ""

#: ../../ref/exceptions.txt:47
# 3650a508d2d04ed7ae04a67a7b764f5e
msgid "The :exc:`SuspiciousOperation` exception is raised when a user has performed an operation that should be considered suspicious from a security perspective, such as tampering with a session cookie."
msgstr ""

#: ../../ref/exceptions.txt:52
# 16a3261e4509464089e7daf7891d262b
msgid "PermissionDenied"
msgstr ""

#: ../../ref/exceptions.txt:55
# db8b8533306943499de1325ce9a16461
msgid "The :exc:`PermissionDenied` exception is raised when a user does not have permission to perform the action requested."
msgstr ""

#: ../../ref/exceptions.txt:59
# e1e750ce0f15435595bbca75eee3305e
msgid "ViewDoesNotExist"
msgstr ""

#: ../../ref/exceptions.txt:62
# d67e4fdc1d9149daa3040cbf6fac56a9
msgid "The :exc:`ViewDoesNotExist` exception is raised by :mod:`django.core.urlresolvers` when a requested view does not exist."
msgstr ""

#: ../../ref/exceptions.txt:66
# 1f999da09e344bcbb2913b4e2e27edf4
msgid "MiddlewareNotUsed"
msgstr ""

#: ../../ref/exceptions.txt:69
# ec29ac3a8f8746fd9f4d33ecbf04a720
msgid "The :exc:`MiddlewareNotUsed` exception is raised when a middleware is not used in the server configuration."
msgstr ""

#: ../../ref/exceptions.txt:73
# 5f4616cc983c45f5952ed72d5d85f4c7
msgid "ImproperlyConfigured"
msgstr ""

#: ../../ref/exceptions.txt:76
# 222131a51e21414e9042a2c592f34c45
msgid "The :exc:`ImproperlyConfigured` exception is raised when Django is somehow improperly configured -- for example, if a value in ``settings.py`` is incorrect or unparseable."
msgstr ""

#: ../../ref/exceptions.txt:81
# 7f9b0a6541954bfebfcadf4f786a17c3
msgid "FieldError"
msgstr ""

#: ../../ref/exceptions.txt:84
# c415766067c84f28bc39be551e7f3ed6
msgid "The :exc:`FieldError` exception is raised when there is a problem with a model field. This can happen for several reasons:"
msgstr ""

#: ../../ref/exceptions.txt:87
# a64eeca9821d45019af21311ad665297
msgid "A field in a model clashes with a field of the same name from an abstract base class"
msgstr ""

#: ../../ref/exceptions.txt:89
# 1386bad2277947f189446d35e47087c1
msgid "An infinite loop is caused by ordering"
msgstr ""

#: ../../ref/exceptions.txt:90
# 84d616766f6d4faf820aca44a770983d
msgid "A keyword cannot be parsed from the filter parameters"
msgstr ""

#: ../../ref/exceptions.txt:91
# b32b8f441c114ad9aeccdd6b484ded0f
msgid "A field cannot be determined from a keyword in the query parameters"
msgstr ""

#: ../../ref/exceptions.txt:93
# 68cb486255d7402b81db599a42093312
msgid "A join is not permitted on the specified field"
msgstr ""

#: ../../ref/exceptions.txt:94
# b5e74700494a461590fffabc6ed13c1d
msgid "A field name is invalid"
msgstr ""

#: ../../ref/exceptions.txt:95
# 9cbd5f740b984e888ad59cc9133f48c3
msgid "A query contains invalid order_by arguments"
msgstr ""

#: ../../ref/exceptions.txt:98
# d89aede703cb4347bd749c4c1a742688
msgid "ValidationError"
msgstr ""

#: ../../ref/exceptions.txt:101
# 22afd69548e84530be90857b22ef2caa
msgid "The :exc:`ValidationError` exception is raised when data fails form or model field validation. For more information about validation, see :doc:`Form and Field Validation </ref/forms/validation>`, :ref:`Model Field Validation <validating-objects>` and the :doc:`Validator Reference </ref/validators>`."
msgstr ""

#: ../../ref/exceptions.txt:110
# cc816d37c02542d99901ec5ee7ecaa94
msgid "NoReverseMatch"
msgstr ""

#: ../../ref/exceptions.txt:113
# 60d819197f6d4c23bd34387b5698b1ed
msgid "The :exc:`NoReverseMatch` exception is raised by :mod:`django.core.urlresolvers` when a matching URL in your URLconf cannot be identified based on the parameters supplied."
msgstr ""

#: ../../ref/exceptions.txt:120
# fdffc72d23124a60b4d89a5820d4bb35
msgid "Database Exceptions"
msgstr ""

#: ../../ref/exceptions.txt:122
# 80aee8144e2e4ca38e8a9a7862c29851
msgid "Django wraps the standard database exceptions :exc:`DatabaseError` and :exc:`IntegrityError` so that your Django code has a guaranteed common implementation of these classes. These database exceptions are provided in :mod:`django.db`."
msgstr ""

#: ../../ref/exceptions.txt:130
# 438ce4a337e14c9e83c92d2f3329ef0d
msgid "The Django wrappers for database exceptions behave exactly the same as the underlying database exceptions. See :pep:`249`, the Python Database API Specification v2.0, for further information."
msgstr ""

#: ../../ref/exceptions.txt:136
# 185dc7ade64c4550a98baf616e3d645c
msgid "Raised to prevent deletion of referenced objects when using :attr:`django.db.models.PROTECT`. Subclass of :exc:`IntegrityError`."
msgstr ""

#: ../../ref/exceptions.txt:142
# cfa0920f02fb45daa6d16d5e2bb6d947
msgid "Http Exceptions"
msgstr ""

#: ../../ref/exceptions.txt:146
# d29c10efa34a4fee9bdd81e1bb610c41
msgid "The :exc:`UnreadablePostError` is raised when a user cancels an upload. It is available from :mod:`django.http`."
msgstr ""

#: ../../ref/exceptions.txt:152
# d3bb3d4e274b4251b0b34c58d4f2c728
msgid "Transaction Exceptions"
msgstr ""

#: ../../ref/exceptions.txt:156
# 738e3e611537449e804cb8da824cae07
msgid "The :exc:`TransactionManagementError` is raised for any and all problems related to database transactions. It is available from :mod:`django.db.transaction`."
msgstr ""

#: ../../ref/exceptions.txt:161
# e2c19f981f054ff9b3710e4038f6eea6
msgid "Python Exceptions"
msgstr ""

#: ../../ref/exceptions.txt:163
# d32a989f61524b158707b332c91d0403
msgid "Django raises built-in Python exceptions when appropriate as well. See the Python documentation for further information on the built-in :mod:`exceptions`."
msgstr ""

#: ../../ref/files/file.txt:2
# dd38d908979b4ba49e5da783ebd9581e
msgid "The ``File`` object"
msgstr ""

#: ../../ref/files/file.txt:4
# 43ffba796d0a4976879f5dc9ebf279cb
msgid "The :mod:`django.core.files` module and its submodules contain built-in classes for basic file handling in Django."
msgstr ""

#: ../../ref/files/file.txt:10
# 821654e996f84dabaa4e48cbb7af30d5
msgid "The ``File`` Class"
msgstr ""

#: ../../ref/files/file.txt:14
# cb671a3898fe491b8b294ce0048f99ca
msgid "The :class:`File` is a thin wrapper around Python's built-in file object with some Django-specific additions. Internally, Django uses this class any time it needs to represent a file."
msgstr ""

#: ../../ref/files/file.txt:18
# 0595b45d3ed34270a04a4ccc74fa0658
msgid ":class:`File` objects have the following attributes and methods:"
msgstr ""

#: ../../ref/files/file.txt:22
# 00f06317a1ab41d18c29eea81b651e84
msgid "The name of file including the relative path from :setting:`MEDIA_ROOT`."
msgstr ""

#: ../../ref/files/file.txt:27
# 9e413a4381d04d569485d08247a147b7
msgid "The size of the file in bytes."
msgstr ""

#: ../../ref/files/file.txt:31
# c431594c47f74389a5cbce50bf04efdf
msgid "The underlying Python ``file`` object passed to :class:`~django.core.files.File`."
msgstr ""

#: ../../ref/files/file.txt:36
# f0874003f3d74d90ac593bafc1c09d67
msgid "The read/write mode for the file."
msgstr ""

#: ../../ref/files/file.txt:40
# 8c8421c75fc04d9a880624e0eb06efca
msgid "Open or reopen the file (which by definition also does ``File.seek(0)``). The ``mode`` argument allows the same values as Python's standard ``open()``."
msgstr ""

#: ../../ref/files/file.txt:44
# ec3a4f2a8b46431ebedd5433cd807c70
msgid "When reopening a file, ``mode`` will override whatever mode the file was originally opened with; ``None`` means to reopen with the original mode."
msgstr ""

#: ../../ref/files/file.txt:50
# fd723ca3eb0247fb9483b344d9b27843
msgid "Read content from the file. The optional ``size`` is the number of bytes to read; if not specified, the file will be read to the end."
msgstr ""

#: ../../ref/files/file.txt:55
# e1051155154b46498d87f3347c9d5393
msgid "Iterate over the file yielding one line at a time."
msgstr ""

#: ../../ref/files/file.txt:59
# 5add9f6726ba436aa73c0f5d6818eb9c
msgid "Iterate over the file yielding \"chunks\" of a given size. ``chunk_size`` defaults to 64 KB."
msgstr ""

#: ../../ref/files/file.txt:62
# 55d150cb8caa4b11ab26c780d1445407
msgid "This is especially useful with very large files since it allows them to be streamed off disk and avoids storing the whole file in memory."
msgstr ""

#: ../../ref/files/file.txt:67
# 73b6b56469c441938bc43bb53f487538
msgid "Returns ``True`` if the file is large enough to require multiple chunks to access all of its content give some ``chunk_size``."
msgstr ""

#: ../../ref/files/file.txt:72
# df855fcdb8e54103834f574099f7261d
msgid "Writes the specified content string to the file. Depending on the storage system behind the scenes, this content might not be fully committed until ``close()`` is called on the file."
msgstr ""

#: ../../ref/files/file.txt:78
# b0e5af0a38ce47baa2d582ae893d26a6
msgid "Close the file."
msgstr ""

#: ../../ref/files/file.txt:80
# 75a3d9c9945f4a039f4518de42d17abf
msgid "In addition to the listed methods, :class:`~django.core.files.File` exposes the following attributes and methods of the underlying ``file`` object: ``encoding``, ``fileno``, ``flush``, ``isatty``, ``newlines``, ``read``, ``readinto``, ``readlines``, ``seek``, ``softspace``, ``tell``, ``truncate``, ``writelines``, ``xreadlines``."
msgstr ""

#: ../../ref/files/file.txt:89
# 585c53e6067c45a08dfdaf17374b4ac6
msgid "The ``ContentFile`` Class"
msgstr ""

#: ../../ref/files/file.txt:93
# 4bac3d8074e04a62bdfd3f218010105d
msgid "The ``ContentFile`` class inherits from :class:`~django.core.files.File`, but unlike :class:`~django.core.files.File` it operates on string content (bytes also supported), rather than an actual file. For example::"
msgstr ""

#: ../../ref/files/file.txt:110
# 965ac60ff5a9468bb5087672160df597
msgid "The ``ImageFile`` Class"
msgstr ""

#: ../../ref/files/file.txt:114
# a6c9c6e99e0449c688e67ea386545378
msgid "Django provides a built-in class specifically for images. :class:`django.core.files.images.ImageFile` inherits all the attributes and methods of :class:`~django.core.files.File`, and additionally provides the following:"
msgstr ""

#: ../../ref/files/file.txt:121
# 888f587809294ac290089bb9b71fcfcb
msgid "Width of the image in pixels."
msgstr ""

#: ../../ref/files/file.txt:125
# 41c8f5007daa42a58f4887d9a4c686a1
msgid "Height of the image in pixels."
msgstr ""

#: ../../ref/files/file.txt:130
# 66278eca49c94080a14b621cec50d750
msgid "Additional methods on files attached to objects"
msgstr ""

#: ../../ref/files/file.txt:132
# 9e883063e7c7479fa725a95f341f97c1
msgid "Any :class:`File` that's associated with an object (as with ``Car.photo``, below) will also have a couple of extra methods:"
msgstr ""

#: ../../ref/files/file.txt:137
# 5b886b13f2114f9388b7bbe51eab112f
msgid "Saves a new file with the file name and contents provided. This will not replace the existing file, but will create a new file and update the object to point to it. If ``save`` is ``True``, the model's ``save()`` method will be called once the file is saved. That is, these two lines::"
msgstr ""

#: ../../ref/files/file.txt:145
# 68b2c74788f649199d04e735fe679fa6
msgid "are the same as this one line::"
msgstr ""

#: ../../ref/files/file.txt:149
# 904f255047ba4986b4aa8a89ecd8adcc
msgid "Note that the ``content`` argument must be an instance of either :class:`File` or of a subclass of :class:`File`, such as :class:`~django.core.files.base.ContentFile`."
msgstr ""

#: ../../ref/files/file.txt:155
# f2ec344e2a6b4e978db83e0d56f5c35b
msgid "Removes the file from the model instance and deletes the underlying file. If ``save`` is ``True``, the model's ``save()`` method will be called once the file is deleted."
msgstr ""

#: ../../ref/files/index.txt:3
# aa87107850404e5fab95543056ebb7bd
msgid "File handling"
msgstr ""

#: ../../ref/files/storage.txt:2
# c8af3f7046524215a77fa59459b7b65c
msgid "File storage API"
msgstr ""

#: ../../ref/files/storage.txt:7
# 14555f5a3d4c482ba5217bf2fb939103
msgid "Getting the current storage class"
msgstr ""

#: ../../ref/files/storage.txt:9
# 43ca8406b1df433b9981c9383ca7b7bb
msgid "Django provides two convenient ways to access the current storage class:"
msgstr ""

#: ../../ref/files/storage.txt:13
# 5fde702284e3404c965474daff33c00f
msgid ":class:`~django.core.files.storage.DefaultStorage` provides lazy access to the current default storage system as defined by :setting:`DEFAULT_FILE_STORAGE`. :class:`DefaultStorage` uses :func:`~django.core.files.storage.get_storage_class` internally."
msgstr ""

#: ../../ref/files/storage.txt:20
# 119c24129edc4b11a76961e00fab0b08
msgid "Returns a class or module which implements the storage API."
msgstr ""

#: ../../ref/files/storage.txt:22
# 080a7f2e2fcc4021af96dd4417294fc9
msgid "When called without the ``import_path`` parameter ``get_storage_class`` will return the current default storage system as defined by :setting:`DEFAULT_FILE_STORAGE`. If ``import_path`` is provided, ``get_storage_class`` will attempt to import the class or module from the given path and will return it if successful. An exception will be raised if the import is unsuccessful."
msgstr ""

#: ../../ref/files/storage.txt:30
# 528c359b477b4d8788035e1e9f10024e
msgid "The FileSystemStorage Class"
msgstr ""

#: ../../ref/files/storage.txt:34
# 5537eada7d544afdb01677f2c73d1fa0
msgid "The :class:`~django.core.files.storage.FileSystemStorage` class implements basic file storage on a local filesystem. It inherits from :class:`~django.core.files.storage.Storage` and provides implementations for all the public methods thereof."
msgstr ""

#: ../../ref/files/storage.txt:41
# 13905f3fbfbb4994bd847ee6c327a615
msgid "The ``FileSystemStorage.delete()`` method will not raise raise an exception if the given file name does not exist."
msgstr ""

#: ../../ref/files/storage.txt:45
# abdb2b670e764a2195e20abc9427099a
msgid "The Storage Class"
msgstr ""

#: ../../ref/files/storage.txt:49
# bf96ddff21c04bc680aaa2735a13ae98
msgid "The :class:`~django.core.files.storage.Storage` class provides a standardized API for storing files, along with a set of default behaviors that all other storage systems can inherit or override as necessary."
msgstr ""

#: ../../ref/files/storage.txt:56
# cc119bfd2f3c49ffa4d2a4469d508c51
msgid "Returns a ``datetime`` object containing the last accessed time of the file. For storage systems that aren't able to return the last accessed time this will raise ``NotImplementedError`` instead."
msgstr ""

#: ../../ref/files/storage.txt:62
# e4d72432ce9340b7b5fabc902f081385
msgid "Returns a ``datetime`` object containing the creation time of the file. For storage systems that aren't able to return the creation time this will raise ``NotImplementedError`` instead."
msgstr ""

#: ../../ref/files/storage.txt:68
# 4122019155064c2d986e8da07cb52f63
msgid "Deletes the file referenced by ``name``. If deletion is not supported on the target storage system this will raise ``NotImplementedError`` instead"
msgstr ""

#: ../../ref/files/storage.txt:74
# c6d79fc18a2e429298d7cedfdaca9c51
msgid "Returns ``True`` if a file referenced by the given name already exists in the storage system, or ``False`` if the name is available for a new file."
msgstr ""

#: ../../ref/files/storage.txt:80
# 2c37a3eccb8b4f0db96a0c43b42bdc72
msgid "Returns a filename based on the ``name`` parameter that's free and available for new content to be written to on the target storage system."
msgstr ""

#: ../../ref/files/storage.txt:87
# 94d00728a64a4a2f91931529b9f7fb01
msgid "Returns a filename based on the ``name`` parameter that's suitable for use on the target storage system."
msgstr ""

#: ../../ref/files/storage.txt:92
# 5836a86622d54bd4a9b1a96559e30429
msgid "Lists the contents of the specified path, returning a 2-tuple of lists; the first item being directories, the second item being files. For storage systems that aren't able to provide such a listing, this will raise a ``NotImplementedError`` instead."
msgstr ""

#: ../../ref/files/storage.txt:99
# 41cc44a1b20a4cf99bf6f3d5e4b07974
msgid "Returns a ``datetime`` object containing the last modified time. For storage systems that aren't able to return the last modified time, this will raise ``NotImplementedError`` instead."
msgstr ""

#: ../../ref/files/storage.txt:105
# 4f968ed58a264276a0ab9113fde7efb3
msgid "Opens the file given by ``name``. Note that although the returned file is guaranteed to be a ``File`` object, it might actually be some subclass. In the case of remote file storage this means that reading/writing could be quite slow, so be warned."
msgstr ""

#: ../../ref/files/storage.txt:112
# 98e5c426f4c54288aecc31d4deffe871
msgid "The local filesystem path where the file can be opened using Python's standard ``open()``. For storage systems that aren't accessible from the local filesystem, this will raise ``NotImplementedError`` instead."
msgstr ""

#: ../../ref/files/storage.txt:118
# 46a1005383414ccd8a6c54ef275b493f
msgid "Saves a new file using the storage system, preferably with the name specified. If there already exists a file with this name ``name``, the storage system may modify the filename as necessary to get a unique name. The actual name of the stored file will be returned."
msgstr ""

#: ../../ref/files/storage.txt:123
# 7d8b024e795a463d9dacb6e3e452089f
msgid "The ``content`` argument must be an instance of :class:`django.core.files.File` or of a subclass of :class:`~django.core.files.File`."
msgstr ""

#: ../../ref/files/storage.txt:129
# 009f7e789e9a451087b11bb0027a0854
msgid "Returns the total size, in bytes, of the file referenced by ``name``. For storage systems that aren't able to return the file size this will raise ``NotImplementedError`` instead."
msgstr ""

#: ../../ref/files/storage.txt:135
# ba7bccaeceaf4b1eb373e6446822b6fe
msgid "Returns the URL where the contents of the file referenced by ``name`` can be accessed. For storage systems that don't support access by URL this will raise ``NotImplementedError`` instead."
msgstr ""

#: ../../ref/forms/api.txt:3
# 46ac9407ef264aca87cfce7cd1c3c554
msgid "The Forms API"
msgstr ""

#: ../../ref/forms/api.txt:9
# 72a4512180c64d6e9959ad948d6dd386
msgid "This document covers the gritty details of Django's forms API. You should read the :doc:`introduction to working with forms </topics/forms/index>` first."
msgstr ""

#: ../../ref/forms/api.txt:16
# ebae48c04a3f4fc380d71eb52a02b689
msgid "Bound and unbound forms"
msgstr ""

#: ../../ref/forms/api.txt:18
# a51b37bbf56843998939e6eb89473342
msgid "A :class:`Form` instance is either **bound** to a set of data, or **unbound**."
msgstr ""

#: ../../ref/forms/api.txt:20
# 1949b2ad84b5496f8ea96d54e47fdcb6
msgid "If it's **bound** to a set of data, it's capable of validating that data and rendering the form as HTML with the data displayed in the HTML."
msgstr ""

#: ../../ref/forms/api.txt:23
# f1832e274a7b4b0989e2a21c09576aa3
msgid "If it's **unbound**, it cannot do validation (because there's no data to validate!), but it can still render the blank form as HTML."
msgstr ""

#: ../../ref/forms/api.txt:28
# a941f70f44e04379b5bb4b6833aa6c56
msgid "To create an unbound :class:`Form` instance, simply instantiate the class::"
msgstr ""

#: ../../ref/forms/api.txt:32
# 37e4948130d847ccb2a0f851a5d2f025
msgid "To bind data to a form, pass the data as a dictionary as the first parameter to your :class:`Form` class constructor::"
msgstr ""

#: ../../ref/forms/api.txt:41
# 7a7e4375a29344dd9d1597510468a6ec
msgid "In this dictionary, the keys are the field names, which correspond to the attributes in your :class:`Form` class. The values are the data you're trying to validate. These will usually be strings, but there's no requirement that they be strings; the type of data you pass depends on the :class:`Field`, as we'll see in a moment."
msgstr ""

#: ../../ref/forms/api.txt:49
# d4c13154bfd24e4c972fed63c5089156
msgid "If you need to distinguish between bound and unbound form instances at runtime, check the value of the form's :attr:`~Form.is_bound` attribute::"
msgstr ""

#: ../../ref/forms/api.txt:59
# 34721be8881245cc8ddf4fae79e5c689
msgid "Note that passing an empty dictionary creates a *bound* form with empty data::"
msgstr ""

#: ../../ref/forms/api.txt:65
# 004391ec6c5b479b94e15ed635c5a8da
msgid "If you have a bound :class:`Form` instance and want to change the data somehow, or if you want to bind an unbound :class:`Form` instance to some data, create another :class:`Form` instance. There is no way to change data in a :class:`Form` instance. Once a :class:`Form` instance has been created, you should consider its data immutable, whether it has data or not."
msgstr ""

#: ../../ref/forms/api.txt:72
# 18671cda96134fc3869d3b721e1ad4b6
msgid "Using forms to validate data"
msgstr ""

#: ../../ref/forms/api.txt:76
# 21e6a81c0b5a48d0937bec173f2b0c56
msgid "The primary task of a :class:`Form` object is to validate data. With a bound :class:`Form` instance, call the :meth:`~Form.is_valid` method to run validation and return a boolean designating whether the data was valid::"
msgstr ""

#: ../../ref/forms/api.txt:88
# b9279c7f81ff4ec3ad6c56a2b495a269
msgid "Let's try with some invalid data. In this case, ``subject`` is blank (an error, because all fields are required by default) and ``sender`` is not a valid email address::"
msgstr ""

#: ../../ref/forms/api.txt:102
# 9259fa2d00c24f2aa44db861f0880664
msgid "Access the :attr:`~Form.errors` attribute to get a dictionary of error messages::"
msgstr ""

#: ../../ref/forms/api.txt:108
# d7a3d19ca014475fab28c1c988e10f09
msgid "In this dictionary, the keys are the field names, and the values are lists of Unicode strings representing the error messages. The error messages are stored in lists because a field can have multiple error messages."
msgstr ""

#: ../../ref/forms/api.txt:112
# 4cbb2449706047c49a5edfaa3d37e2d9
msgid "You can access :attr:`~Form.errors` without having to call :meth:`~Form.is_valid` first. The form's data will be validated the first time either you call :meth:`~Form.is_valid` or access :attr:`~Form.errors`."
msgstr ""

#: ../../ref/forms/api.txt:116
# 0d6dcfc2de004f40ad664675f38d271f
msgid "The validation routines will only get called once, regardless of how many times you access :attr:`~Form.errors` or call :meth:`~Form.is_valid`. This means that if validation has side effects, those side effects will only be triggered once."
msgstr ""

#: ../../ref/forms/api.txt:121
# a602a01ffe1f4e4db2f1157db5734c78
msgid "Behavior of unbound forms"
msgstr ""

#: ../../ref/forms/api.txt:123
# 21f1b56e9cb646349b2425c05c5238ca
msgid "It's meaningless to validate a form with no data, but, for the record, here's what happens with unbound forms::"
msgstr ""

#: ../../ref/forms/api.txt:133
# 00ae99304bf147a5bee8b1b0ac001209
msgid "Dynamic initial values"
msgstr ""

#: ../../ref/forms/api.txt:137
# 0893825d11b944ab88bb9334c9d87fc7
msgid "Use :attr:`~Form.initial` to declare the initial value of form fields at runtime. For example, you might want to fill in a ``username`` field with the username of the current session."
msgstr ""

#: ../../ref/forms/api.txt:141
# bf3c6791736745c59f8b7772a6dfd1a2
msgid "To accomplish this, use the :attr:`~Form.initial` argument to a :class:`Form`. This argument, if given, should be a dictionary mapping field names to initial values. Only include the fields for which you're specifying an initial value; it's not necessary to include every field in your form. For example::"
msgstr ""

#: ../../ref/forms/api.txt:148
# 105f5d9ad7b140058ba2b95f900e0059
msgid "These values are only displayed for unbound forms, and they're not used as fallback values if a particular value isn't provided."
msgstr ""

#: ../../ref/forms/api.txt:151
# a3f28fe3a6f8414d8cd5d68bf7349a03
msgid "Note that if a :class:`~django.forms.Field` defines :attr:`~Form.initial` *and* you include ``initial`` when instantiating the ``Form``, then the latter ``initial`` will have precedence. In this example, ``initial`` is provided both at the field level and at the form instance level, and the latter gets precedence::"
msgstr ""

#: ../../ref/forms/api.txt:168
# 9b4cfd3f836e41bb9618fbf66f0d3f67
msgid "Accessing \"clean\" data"
msgstr ""

#: ../../ref/forms/api.txt:172
# 1e181ba11ec24cea8a859562b1a02cb7
msgid "Each field in a :class:`Form` class is responsible not only for validating data, but also for \"cleaning\" it -- normalizing it to a consistent format. This is a nice feature, because it allows data for a particular field to be input in a variety of ways, always resulting in consistent output."
msgstr ""

#: ../../ref/forms/api.txt:177
# c0c4e75eea5347b985209fc02c26e6c2
msgid "For example, :class:`~django.forms.DateField` normalizes input into a Python ``datetime.date`` object. Regardless of whether you pass it a string in the format ``'1994-07-15'``, a ``datetime.date`` object, or a number of other formats, ``DateField`` will always normalize it to a ``datetime.date`` object as long as it's valid."
msgstr ""

#: ../../ref/forms/api.txt:183
# 2826abc64e7640748fabde810b94a960
msgid "Once you've created a :class:`~Form` instance with a set of data and validated it, you can access the clean data via its ``cleaned_data`` attribute::"
msgstr ""

#: ../../ref/forms/api.txt:196
# f8a9de90bb4c408683a9d6ec8e803f60
msgid "Note that any text-based field -- such as ``CharField`` or ``EmailField`` -- always cleans the input into a Unicode string. We'll cover the encoding implications later in this document."
msgstr ""

#: ../../ref/forms/api.txt:200
# c71c267498224c78a5f19e9eee752b3d
msgid "If your data does *not* validate, the ``cleaned_data`` dictionary contains only the valid fields::"
msgstr ""

#: ../../ref/forms/api.txt:215
# cfe74164192e4961a53cfd76a4907e2f
msgid "Until Django 1.5, the ``cleaned_data`` attribute wasn't defined at all when the ``Form`` didn't validate."
msgstr ""

#: ../../ref/forms/api.txt:218
# 84a6408841c1466780b39f136ed3ef26
msgid "``cleaned_data`` will always *only* contain a key for fields defined in the ``Form``, even if you pass extra data when you define the ``Form``. In this example, we pass a bunch of extra fields to the ``ContactForm`` constructor, but ``cleaned_data`` contains only the form's fields::"
msgstr ""

#: ../../ref/forms/api.txt:236
# e81f5762d7f04645bf41a3665a7748e9
msgid "When the ``Form`` is valid, ``cleaned_data`` will include a key and value for *all* its fields, even if the data didn't include a value for some optional fields. In this example, the data dictionary doesn't include a value for the ``nick_name`` field, but ``cleaned_data`` includes it, with an empty value::"
msgstr ""

#: ../../ref/forms/api.txt:252
# e96cca4144a145a8bdbd6029932a9f28
msgid "In this above example, the ``cleaned_data`` value for ``nick_name`` is set to an empty string, because ``nick_name`` is ``CharField``, and ``CharField``\\s treat empty values as an empty string. Each field type knows what its \"blank\" value is -- e.g., for ``DateField``, it's ``None`` instead of the empty string. For full details on each field's behavior in this case, see the \"Empty value\" note for each field in the \"Built-in ``Field`` classes\" section below."
msgstr ""

#: ../../ref/forms/api.txt:259
# a455dbb90b3c4669b3d8997e6d5d6b70
msgid "You can write code to perform validation for particular form fields (based on their name) or for the form as a whole (considering combinations of various fields). More information about this is in :doc:`/ref/forms/validation`."
msgstr ""

#: ../../ref/forms/api.txt:264
# bc686e05f5c0461884e16f8182eb3f3b
msgid "Outputting forms as HTML"
msgstr ""

#: ../../ref/forms/api.txt:266
# 385e8f27b71b491eb112757e96e1e4dc
msgid "The second task of a ``Form`` object is to render itself as HTML. To do so, simply ``print`` it::"
msgstr ""

#: ../../ref/forms/api.txt:276
# 4fee5291a4d24794843ef77b14f9c3cb
msgid "If the form is bound to data, the HTML output will include that data appropriately. For example, if a field is represented by an ``<input type=\"text\">``, the data will be in the ``value`` attribute. If a field is represented by an ``<input type=\"checkbox\">``, then that HTML will include ``checked=\"checked\"`` if appropriate::"
msgstr ""

#: ../../ref/forms/api.txt:293
# 03f70544b8124b08bdeb8030139c2fb9
msgid "This default output is a two-column HTML table, with a ``<tr>`` for each field. Notice the following:"
msgstr ""

#: ../../ref/forms/api.txt:296
# 619ddd001280455f914699a9f7609a09
msgid "For flexibility, the output does *not* include the ``<table>`` and ``</table>`` tags, nor does it include the ``<form>`` and ``</form>`` tags or an ``<input type=\"submit\">`` tag. It's your job to do that."
msgstr ""

#: ../../ref/forms/api.txt:300
# fef541960a0a49b296dbb73dc62dcb35
msgid "Each field type has a default HTML representation. ``CharField`` and ``EmailField`` are represented by an ``<input type=\"text\">``. ``BooleanField`` is represented by an ``<input type=\"checkbox\">``. Note these are merely sensible defaults; you can specify which HTML to use for a given field by using widgets, which we'll explain shortly."
msgstr ""

#: ../../ref/forms/api.txt:306
# 3160fb9612b3449f86f7c85bd3707a35
msgid "The HTML ``name`` for each tag is taken directly from its attribute name in the ``ContactForm`` class."
msgstr ""

#: ../../ref/forms/api.txt:309
# 5d75d933e6bc48c6820b5170d5c9955b
msgid "The text label for each field -- e.g. ``'Subject:'``, ``'Message:'`` and ``'Cc myself:'`` is generated from the field name by converting all underscores to spaces and upper-casing the first letter. Again, note these are merely sensible defaults; you can also specify labels manually."
msgstr ""

#: ../../ref/forms/api.txt:314
# f439ac4b67c345bf9798eb4683e13a08
msgid "Each text label is surrounded in an HTML ``<label>`` tag, which points to the appropriate form field via its ``id``. Its ``id``, in turn, is generated by prepending ``'id_'`` to the field name. The ``id`` attributes and ``<label>`` tags are included in the output by default, to follow best practices, but you can change that behavior."
msgstr ""

#: ../../ref/forms/api.txt:320
# a9be2b9136a74beabea4365c04676072
msgid "Although ``<table>`` output is the default output style when you ``print`` a form, other output styles are available. Each style is available as a method on a form object, and each rendering method returns a Unicode object."
msgstr ""

#: ../../ref/forms/api.txt:325
# 72598b4b71f340f49ab2828099868215
msgid "``as_p()``"
msgstr ""

#: ../../ref/forms/api.txt:329
# 2fd9ca98f92842faa83ec56cfb03794c
msgid "``as_p()`` renders the form as a series of ``<p>`` tags, with each ``<p>`` containing one field::"
msgstr ""

#: ../../ref/forms/api.txt:342
# d2e9e38407794a77b13601a0a6861edb
msgid "``as_ul()``"
msgstr ""

#: ../../ref/forms/api.txt:346
# 5912435153f147f99bfe7631d9c0cee0
msgid "``as_ul()`` renders the form as a series of ``<li>`` tags, with each ``<li>`` containing one field. It does *not* include the ``<ul>`` or ``</ul>``, so that you can specify any HTML attributes on the ``<ul>`` for flexibility::"
msgstr ""

#: ../../ref/forms/api.txt:361
# 1260bc15c75e46eab13dcf84628236d8
msgid "``as_table()``"
msgstr ""

#: ../../ref/forms/api.txt:365
# d2b6ba5dad704319affcfaf5a174a0da
msgid "Finally, ``as_table()`` outputs the form as an HTML ``<table>``. This is exactly the same as ``print``. In fact, when you ``print`` a form object, it calls its ``as_table()`` method behind the scenes::"
msgstr ""

#: ../../ref/forms/api.txt:379
# ff26f28a511742f7bb8f066950ea8d43
msgid "Styling required or erroneous form rows"
msgstr ""

#: ../../ref/forms/api.txt:384
# 5032c3eb929549e4a9c2ed4ca7981db1
msgid "It's pretty common to style form rows and fields that are required or have errors. For example, you might want to present required form rows in bold and highlight errors in red."
msgstr ""

#: ../../ref/forms/api.txt:388
# 5025a097f0704282aa782eec23fcc454
msgid "The :class:`Form` class has a couple of hooks you can use to add ``class`` attributes to required rows or to rows with errors: simply set the :attr:`Form.error_css_class` and/or :attr:`Form.required_css_class` attributes::"
msgstr ""

#: ../../ref/forms/api.txt:399
# 1f37cfd8d663451e9fd3dd8eabd47358
msgid "Once you've done that, rows will be given ``\"error\"`` and/or ``\"required\"`` classes, as needed. The HTML will look something like::"
msgstr ""

#: ../../ref/forms/api.txt:412
# 635e6348dc684b4db06ac7bb1689200b
msgid "Configuring HTML ``<label>`` tags"
msgstr ""

#: ../../ref/forms/api.txt:414
# 1fcd227d7ef149a7b50b70b5b2fe5267
msgid "An HTML ``<label>`` tag designates which label text is associated with which form element. This small enhancement makes forms more usable and more accessible to assistive devices. It's always a good idea to use ``<label>`` tags."
msgstr ""

#: ../../ref/forms/api.txt:418
# 8beccaabf4f34cba84fe6ad82d04d5a8
msgid "By default, the form rendering methods include HTML ``id`` attributes on the form elements and corresponding ``<label>`` tags around the labels. The ``id`` attribute values are generated by prepending ``id_`` to the form field names. This behavior is configurable, though, if you want to change the ``id`` convention or remove HTML ``id`` attributes and ``<label>`` tags entirely."
msgstr ""

#: ../../ref/forms/api.txt:424
# 19188c3ebbb346f9a3bcb937420d49db
msgid "Use the ``auto_id`` argument to the ``Form`` constructor to control the label and ``id`` behavior. This argument must be ``True``, ``False`` or a string."
msgstr ""

#: ../../ref/forms/api.txt:427
# 8e55bfd5416942c7abec413d913a3277
msgid "If ``auto_id`` is ``False``, then the form output will not include ``<label>`` tags nor ``id`` attributes::"
msgstr ""

#: ../../ref/forms/api.txt:447
# 64c906ed0fa44048a6198b3b7451b5cb
msgid "If ``auto_id`` is set to ``True``, then the form output *will* include ``<label>`` tags and will simply use the field name as its ``id`` for each form field::"
msgstr ""

#: ../../ref/forms/api.txt:468
# 9c97bb8e54a442e0a79abf93bb297190
msgid "If ``auto_id`` is set to a string containing the format character ``'%s'``, then the form output will include ``<label>`` tags, and will generate ``id`` attributes based on the format string. For example, for a format string ``'field_%s'``, a field named ``subject`` will get the ``id`` value ``'field_subject'``. Continuing our example::"
msgstr ""

#: ../../ref/forms/api.txt:491
# e99a5795618f41569a777091041ab384
msgid "If ``auto_id`` is set to any other true value -- such as a string that doesn't include ``%s`` -- then the library will act as if ``auto_id`` is ``True``."
msgstr ""

#: ../../ref/forms/api.txt:494
# f58ceaa60aea4a749376f6b515b54ab5
msgid "By default, ``auto_id`` is set to the string ``'id_%s'``."
msgstr ""

#: ../../ref/forms/api.txt:496
# ad710043a8de4d938b65881685d83d76
msgid "Normally, a colon (``:``) will be appended after any label name when a form is rendered. It's possible to change the colon to another character, or omit it entirely, using the ``label_suffix`` parameter::"
msgstr ""

#: ../../ref/forms/api.txt:513
# dc4d0e6f9d56487f9c0dda3b71b7618d
msgid "Note that the label suffix is added only if the last character of the label isn't a punctuation character (``.``, ``!``, ``?`` or ``:``)"
msgstr ""

#: ../../ref/forms/api.txt:517
# 1a48df3861d1482f9ab2e8efb8f4b569
msgid "Notes on field ordering"
msgstr ""

#: ../../ref/forms/api.txt:519
# 95cfd870a7844aff9a3befa30566178f
msgid "In the ``as_p()``, ``as_ul()`` and ``as_table()`` shortcuts, the fields are displayed in the order in which you define them in your form class. For example, in the ``ContactForm`` example, the fields are defined in the order ``subject``, ``message``, ``sender``, ``cc_myself``. To reorder the HTML output, just change the order in which those fields are listed in the class."
msgstr ""

#: ../../ref/forms/api.txt:526
# b5c6b7474eae4115b3f31318ae06ec47
msgid "How errors are displayed"
msgstr ""

#: ../../ref/forms/api.txt:528
# db2bcac33ae64f129773d8a3b76c0495
msgid "If you render a bound ``Form`` object, the act of rendering will automatically run the form's validation if it hasn't already happened, and the HTML output will include the validation errors as a ``<ul class=\"errorlist\">`` near the field. The particular positioning of the error messages depends on the output method you're using::"
msgstr ""

#: ../../ref/forms/api.txt:558
# 7bff4d2a6e464575a1db09ce01ce1d6b
msgid "Customizing the error list format"
msgstr ""

#: ../../ref/forms/api.txt:560
# fa029402e9dc4478a6ba940efb5db2f2
msgid "By default, forms use ``django.forms.util.ErrorList`` to format validation errors. If you'd like to use an alternate class for displaying errors, you can pass that in at construction time::"
msgstr ""

#: ../../ref/forms/api.txt:581
# e0250f1ed557430a973efb5a8d3dfa9a
msgid "More granular output"
msgstr ""

#: ../../ref/forms/api.txt:583
# 94e3e4d045e8499b99d4875283a7fe72
msgid "The ``as_p()``, ``as_ul()`` and ``as_table()`` methods are simply shortcuts for lazy developers -- they're not the only way a form object can be displayed."
msgstr ""

#: ../../ref/forms/api.txt:588
# 18710b3ff40946848a102d4d989df198
msgid "Used to display HTML or access attributes for a single field of a :class:`Form` instance."
msgstr ""

#: ../../ref/forms/api.txt:591
# 96cd045c186b43bfa4d2e4c8db4ce9b9
msgid "The ``__unicode__()`` and ``__str__()`` methods of this object displays the HTML for this field."
msgstr ""

#: ../../ref/forms/api.txt:594
# 656e2ca3d83f46eba5ae314caf745d05
msgid "To retrieve a single ``BoundField``, use dictionary lookup syntax on your form using the field's name as the key::"
msgstr ""

#: ../../ref/forms/api.txt:601
# 4a38b5203ee84220a7023d4cbc3b3a1d
msgid "To retrieve all ``BoundField`` objects, iterate the form::"
msgstr ""

#: ../../ref/forms/api.txt:610
# 2158a99bbf6844c0a15a98e2907d8cd7
msgid "The field-specific output honors the form object's ``auto_id`` setting::"
msgstr ""

#: ../../ref/forms/api.txt:619
# 731961b84caa44049f469d9c4fd45e91
msgid "For a field's list of errors, access the field's ``errors`` attribute."
msgstr ""

#: ../../ref/forms/api.txt:623
# 57e85ffa56cf4e0bad2ee0cf2f5df2b9
msgid "A list-like object that is displayed as an HTML ``<ul class=\"errorlist\">`` when printed::"
msgstr ""

#: ../../ref/forms/api.txt:643
# b4a4bc14acc241c195f94e53cc22ac64
msgid "When you use Django's rendering shortcuts, CSS classes are used to indicate required form fields or fields that contain errors. If you're manually rendering a form, you can access these CSS classes using the ``css_classes`` method::"
msgstr ""

#: ../../ref/forms/api.txt:652
# 3b1e0109453d4cf9b5102e8cdabe434f
msgid "If you want to provide some additional classes in addition to the error and required classes that may be required, you can provide those classes as an argument::"
msgstr ""

#: ../../ref/forms/api.txt:662
# c1f23fd7b5c047b197a5bab9ad5b42e9
msgid "Use this method to render the raw value of this field as it would be rendered by a ``Widget``::"
msgstr ""

#: ../../ref/forms/api.txt:676
# 4105d149924e4247a1b89f71be234186
msgid "Binding uploaded files to a form"
msgstr ""

#: ../../ref/forms/api.txt:678
# da0de3fdb0d540d180c95729099e182e
msgid "Dealing with forms that have ``FileField`` and ``ImageField`` fields is a little more complicated than a normal form."
msgstr ""

#: ../../ref/forms/api.txt:681
# ed7a852526a04cdbad0ea504c3281acf
msgid "Firstly, in order to upload files, you'll need to make sure that your ``<form>`` element correctly defines the ``enctype`` as ``\"multipart/form-data\"``::"
msgstr ""

#: ../../ref/forms/api.txt:687
# e83086cb8f5a4fd8b406c638414327d6
msgid "Secondly, when you use the form, you need to bind the file data. File data is handled separately to normal form data, so when your form contains a ``FileField`` and ``ImageField``, you will need to specify a second argument when you bind your form. So if we extend our ContactForm to include an ``ImageField`` called ``mugshot``, we need to bind the file data containing the mugshot image::"
msgstr ""

#: ../../ref/forms/api.txt:703
# 58e18aa8faa244cbb16fe62cc5ab64ae
msgid "In practice, you will usually specify ``request.FILES`` as the source of file data (just like you use ``request.POST`` as the source of form data)::"
msgstr ""

#: ../../ref/forms/api.txt:710
# 618a23db458b4b29b42e5c49c2944349
msgid "Constructing an unbound form is the same as always -- just omit both form data *and* file data::"
msgstr ""

#: ../../ref/forms/api.txt:717
# 6837239396e64c558967d861fdd34a91
msgid "Testing for multipart forms"
msgstr ""

#: ../../ref/forms/api.txt:721
# 9f273bdfaad549b1bae4799c9f0dd771
msgid "If you're writing reusable views or templates, you may not know ahead of time whether your form is a multipart form or not. The ``is_multipart()`` method tells you whether the form requires multipart encoding for submission::"
msgstr ""

#: ../../ref/forms/api.txt:729
# 578c843f29274721ac38dc3ff8fa0872
msgid "Here's an example of how you might use this in a template::"
msgstr ""

#: ../../ref/forms/api.txt:740
# f58c1e7a991c4be0b4634b484c458797
msgid "Subclassing forms"
msgstr ""

#: ../../ref/forms/api.txt:742
# 7e822c71267842aa8871879f92067f0c
msgid "If you have multiple ``Form`` classes that share fields, you can use subclassing to remove redundancy."
msgstr ""

#: ../../ref/forms/api.txt:745
# c3981467467b4bc397434fe1d0e52405
msgid "When you subclass a custom ``Form`` class, the resulting subclass will include all fields of the parent class(es), followed by the fields you define in the subclass."
msgstr ""

#: ../../ref/forms/api.txt:749
# 8abf07f1937840c9b8552390841d4a35
msgid "In this example, ``ContactFormWithPriority`` contains all the fields from ``ContactForm``, plus an additional field, ``priority``. The ``ContactForm`` fields are ordered first::"
msgstr ""

#: ../../ref/forms/api.txt:763
# 98232c1230054a3780a30f144159eb6e
msgid "It's possible to subclass multiple forms, treating forms as \"mix-ins.\" In this example, ``BeatleForm`` subclasses both ``PersonForm`` and ``InstrumentForm`` (in that order), and its field list includes the fields from the parent classes::"
msgstr ""

#: ../../ref/forms/api.txt:785
# 76718ff31f7843eabd1d3839a6269f23
msgid "Prefixes for forms"
msgstr ""

#: ../../ref/forms/api.txt:789
# 36318ab8fc30439d9e43fd2f137fe0a5
msgid "You can put several Django forms inside one ``<form>`` tag. To give each ``Form`` its own namespace, use the ``prefix`` keyword argument::"
msgstr ""

#: ../../ref/forms/fields.txt:3
# 9707d7fcf50d4518b26a57d5065367b5
msgid "Form fields"
msgstr ""

#: ../../ref/forms/fields.txt:12
# 9fa50790f3e04780b3b6b07114d3617e
msgid "When you create a ``Form`` class, the most important part is defining the fields of the form. Each field has custom validation logic, along with a few other hooks."
msgstr ""

#: ../../ref/forms/fields.txt:18
# 7ed4b07e6777476da949866fc602eda9
msgid "Although the primary way you'll use ``Field`` classes is in ``Form`` classes, you can also instantiate them and use them directly to get a better idea of how they work. Each ``Field`` instance has a ``clean()`` method, which takes a single argument and either raises a ``django.forms.ValidationError`` exception or returns the clean value::"
msgstr ""

#: ../../ref/forms/fields.txt:34
# a26e04f12dd94807a7f2a4521a0ceee0
msgid "Core field arguments"
msgstr ""

#: ../../ref/forms/fields.txt:36
# e0941c37ff8a4b489f066c334bc81aea
msgid "Each ``Field`` class constructor takes at least these arguments. Some ``Field`` classes take additional, field-specific arguments, but the following should *always* be accepted:"
msgstr ""

#: ../../ref/forms/fields.txt:41
# 45c12f2bc0f347fdb21079b532c16012
msgid "``required``"
msgstr ""

#: ../../ref/forms/fields.txt:45
# 5b850326ac0c4765b06cf7d6b156b5a8
msgid "By default, each ``Field`` class assumes the value is required, so if you pass an empty value -- either ``None`` or the empty string (``\"\"``) -- then ``clean()`` will raise a ``ValidationError`` exception::"
msgstr ""

#: ../../ref/forms/fields.txt:69
# 4e60f29d600a461094c3737eca5c00ad
msgid "To specify that a field is *not* required, pass ``required=False`` to the ``Field`` constructor::"
msgstr ""

#: ../../ref/forms/fields.txt:86
# 02a44f1c972b46098499582e5435aeb5
msgid "If a ``Field`` has ``required=False`` and you pass ``clean()`` an empty value, then ``clean()`` will return a *normalized* empty value rather than raising ``ValidationError``. For ``CharField``, this will be a Unicode empty string. For other ``Field`` classes, it might be ``None``. (This varies from field to field.)"
msgstr ""

#: ../../ref/forms/fields.txt:93
# e7d94b5a34374ef8862026087b65169b
msgid "``label``"
msgstr ""

#: ../../ref/forms/fields.txt:97
# b3470f3787dd4ad6a6be8394777863bb
msgid "The ``label`` argument lets you specify the \"human-friendly\" label for this field. This is used when the ``Field`` is displayed in a ``Form``."
msgstr ""

#: ../../ref/forms/fields.txt:100
# dfc5f45d55c54ae5900d390f514d97a4
msgid "As explained in \"Outputting forms as HTML\" above, the default label for a ``Field`` is generated from the field name by converting all underscores to spaces and upper-casing the first letter. Specify ``label`` if that default behavior doesn't result in an adequate label."
msgstr ""

#: ../../ref/forms/fields.txt:105
# feff95f503a54dba8fb4ca0c441dbd80
msgid "Here's a full example ``Form`` that implements ``label`` for two of its fields. We've specified ``auto_id=False`` to simplify the output::"
msgstr ""

#: ../../ref/forms/fields.txt:119
# a604b391c5114b9aafb87431c5c23731
msgid "``initial``"
msgstr ""

#: ../../ref/forms/fields.txt:123
# cb97a4d118954fabbd3ccbc3bf093044
msgid "The ``initial`` argument lets you specify the initial value to use when rendering this ``Field`` in an unbound ``Form``."
msgstr ""

#: ../../ref/forms/fields.txt:126
# 22570ebeb467436386a1cf647bf65a35
msgid "To specify dynamic initial data, see the :attr:`Form.initial` parameter."
msgstr ""

#: ../../ref/forms/fields.txt:128
# 1690a1761f2842ee903d57a120a8c406
msgid "The use-case for this is when you want to display an \"empty\" form in which a field is initialized to a particular value. For example::"
msgstr ""

#: ../../ref/forms/fields.txt:141
# c4f7cf0d2b284167be72fb2be44fbe81
msgid "You may be thinking, why not just pass a dictionary of the initial values as data when displaying the form? Well, if you do that, you'll trigger validation, and the HTML output will include any validation errors::"
msgstr ""

#: ../../ref/forms/fields.txt:156
# 00eee0f3a1324d5a9ba278ae4c791a40
msgid "This is why ``initial`` values are only displayed for unbound forms. For bound forms, the HTML output will use the bound data."
msgstr ""

#: ../../ref/forms/fields.txt:159
# 649a816a16d24cf5937fa939365ab139
msgid "Also note that ``initial`` values are *not* used as \"fallback\" data in validation if a particular field's value is not given. ``initial`` values are *only* intended for initial form display::"
msgstr ""

#: ../../ref/forms/fields.txt:175
# f1e43e409d1d44a9a58f658f2b4a26a9
msgid "Instead of a constant, you can also pass any callable::"
msgstr ""

#: ../../ref/forms/fields.txt:183
# 97a8a7497b9f4dde84a330c30f2b85c3
msgid "The callable will be evaluated only when the unbound form is displayed, not when it is defined."
msgstr ""

#: ../../ref/forms/fields.txt:186
# 703de84c51ea437bb71e511793ce83c5
msgid "``widget``"
msgstr ""

#: ../../ref/forms/fields.txt:190
# 045f27d7dadc44bab3e532f92d088a93
msgid "The ``widget`` argument lets you specify a ``Widget`` class to use when rendering this ``Field``. See :doc:`/ref/forms/widgets` for more information."
msgstr ""

#: ../../ref/forms/fields.txt:194
#: ../../ref/models/fields.txt:228
# 98f3bd9c22bb4aac9e875972fcd56743
# 48fb27eb86384545ace97dddc819f651
msgid "``help_text``"
msgstr ""

#: ../../ref/forms/fields.txt:198
# 44b96bcd785e484da56f056d6b84a747
msgid "The ``help_text`` argument lets you specify descriptive text for this ``Field``. If you provide ``help_text``, it will be displayed next to the ``Field`` when the ``Field`` is rendered by one of the convenience ``Form`` methods (e.g., ``as_ul()``)."
msgstr ""

#: ../../ref/forms/fields.txt:203
# be3994a7b93440e491432ce6263e4554
msgid "Here's a full example ``Form`` that implements ``help_text`` for two of its fields. We've specified ``auto_id=False`` to simplify the output::"
msgstr ""

#: ../../ref/forms/fields.txt:229
#: ../../ref/models/fields.txt:215
# 11b94fe1fd0143909859e745dd1cb3fe
# 718b18dd87c741d58bfe489956a2447a
msgid "``error_messages``"
msgstr ""

#: ../../ref/forms/fields.txt:233
# f34df10fd0454509a34fd56be3452c2e
msgid "The ``error_messages`` argument lets you override the default messages that the field will raise. Pass in a dictionary with keys matching the error messages you want to override. For example, here is the default error message::"
msgstr ""

#: ../../ref/forms/fields.txt:243
# c3099b8b165f4f0a92af7ae909cba292
msgid "And here is a custom error message::"
msgstr ""

#: ../../ref/forms/fields.txt:251
# b988dffbd1a6461186e6f749eaee25c3
msgid "In the `built-in Field classes`_ section below, each ``Field`` defines the error message keys it uses."
msgstr ""

#: ../../ref/forms/fields.txt:255
#: ../../ref/models/fields.txt:317
# 157fbfec180648c190efc1a40ba9bbc2
# eea4cb78e49949fbac984fb9f927e641
msgid "``validators``"
msgstr ""

#: ../../ref/forms/fields.txt:259
# f8263404a9f74ca6bea1e52c7b9ce579
msgid "The ``validators`` argument lets you provide a list of validation functions for this field."
msgstr ""

#: ../../ref/forms/fields.txt:262
# 70d29c832efc4ea2bd263cdf7bed2b34
msgid "See the :doc:`validators documentation </ref/validators>` for more information."
msgstr ""

#: ../../ref/forms/fields.txt:265
# b87c8bb5d20f431e9c92f24db68d60fd
msgid "``localize``"
msgstr ""

#: ../../ref/forms/fields.txt:269
# 6350d45939da46478148f35e400b715b
msgid "The ``localize`` argument enables the localization of form data, input as well as the rendered output."
msgstr ""

#: ../../ref/forms/fields.txt:272
# 35abbb991dd740919da4ce73ddb6a2cb
msgid "See the :ref:`format localization <format-localization>` documentation for more information."
msgstr ""

#: ../../ref/forms/fields.txt:278
# 47e5984e33214fdcaeded6adb23af21e
msgid "Built-in ``Field`` classes"
msgstr ""

#: ../../ref/forms/fields.txt:280
# e78c2a675aad4cf382d69b4552d0edc2
msgid "Naturally, the ``forms`` library comes with a set of ``Field`` classes that represent common validation needs. This section documents each built-in field."
msgstr ""

#: ../../ref/forms/fields.txt:283
# 077b403cc5ce4be28d670e67c148a713
msgid "For each field, we describe the default widget used if you don't specify ``widget``. We also specify the value returned when you provide an empty value (see the section on ``required`` above to understand what that means)."
msgstr ""

#: ../../ref/forms/fields.txt:288
#: ../../ref/models/fields.txt:352
# eb007666050448eead2646b9ed72f10e
# 8faece5fd91e400489ae156dffafefff
msgid "``BooleanField``"
msgstr ""

#: ../../ref/forms/fields.txt:292
# ea31ccd3ea5d43dfa9eff75a78303131
msgid "Default widget: :class:`CheckboxInput`"
msgstr ""

#: ../../ref/forms/fields.txt:293
# 61e54baf9d8f4097b31cd38cb4a6038f
msgid "Empty value: ``False``"
msgstr ""

#: ../../ref/forms/fields.txt:294
# db16482f0b5e41ea977fdce7dc33f5e0
msgid "Normalizes to: A Python ``True`` or ``False`` value."
msgstr ""

#: ../../ref/forms/fields.txt:295
# d615d2779d5046b6ab10afb711cfc607
msgid "Validates that the value is ``True`` (e.g. the check box is checked) if the field has ``required=True``."
msgstr ""

#: ../../ref/forms/fields.txt:297
# bbacab7e6c8347ebbd805eadd3241b73
msgid "Error message keys: ``required``"
msgstr ""

#: ../../ref/forms/fields.txt:301
# 3c3da58658654d178fb2ae03e2049f31
msgid "Since all ``Field`` subclasses have ``required=True`` by default, the validation condition here is important. If you want to include a boolean in your form that can be either ``True`` or ``False`` (e.g. a checked or unchecked checkbox), you must remember to pass in ``required=False`` when creating the ``BooleanField``."
msgstr ""

#: ../../ref/forms/fields.txt:308
#: ../../ref/models/fields.txt:365
# 68d5c089546c4d1fae54fb48f545c042
# 843ca52612e64ce491d6592cbdf652e7
msgid "``CharField``"
msgstr ""

#: ../../ref/forms/fields.txt:312
#: ../../ref/forms/fields.txt:457
#: ../../ref/forms/fields.txt:492
#: ../../ref/forms/fields.txt:583
#: ../../ref/forms/fields.txt:624
#: ../../ref/forms/fields.txt:647
#: ../../ref/forms/fields.txt:663
#: ../../ref/forms/fields.txt:744
#: ../../ref/forms/fields.txt:771
#: ../../ref/forms/fields.txt:786
#: ../../ref/forms/fields.txt:810
#: ../../ref/forms/fields.txt:832
#: ../../ref/forms/fields.txt:859
# 17d0594e547e452f8da4f578ca979506
# acefbb7e4ac54dcca002d027f3dc1d94
# e11452486dcb4561897b7c92d0d37f6d
# 520513436b094d37bcd880e75a58644a
# b49143052af849c9a2407bde635fdf7f
# 353c867b325d4daca79a45cf2d2fa311
# 82d9f22ea96744448e7ed88fc4ce96b1
# 18dc9bab45c44a98a5359b2523b4a680
# 6c8b5cfb13a74a499e5de72ebac8c641
# c1f0e55175ab43c48127765e3d74f3a1
# 4e66ff23f934414ab16092b15e426fa7
# edaf871bcb864440884c4d666e1b8f61
# 376175dac95b4dc7b1a849862254d9a1
msgid "Default widget: :class:`TextInput`"
msgstr ""

#: ../../ref/forms/fields.txt:313
#: ../../ref/forms/fields.txt:333
#: ../../ref/forms/fields.txt:493
#: ../../ref/forms/fields.txt:648
#: ../../ref/forms/fields.txt:664
#: ../../ref/forms/fields.txt:745
#: ../../ref/forms/fields.txt:772
#: ../../ref/forms/fields.txt:811
#: ../../ref/forms/fields.txt:833
#: ../../ref/forms/fields.txt:860
# 90e03ae7f892444b9342ea3aaf762481
# 5e562177140f4f29a7db63b9d4ec7d24
# 8e653c2b0e8241fe96b338600691bd10
# 4734711091914545a09e5d03fd1026c2
# ac72ae26e91149bfb3cfc8a6658b5d11
# b2455c23b1174835898c6b8272abe053
# 29a459ab027b4aa39055a9bfb71a4005
# 5c9a447934f64507a9b9fec36948ca89
# d270e16bdc77444ba864d73f06f19c4e
# ffca5d541d2849e89173ff58d0dc8ac4
msgid "Empty value: ``''`` (an empty string)"
msgstr ""

#: ../../ref/forms/fields.txt:314
#: ../../ref/forms/fields.txt:334
#: ../../ref/forms/fields.txt:494
#: ../../ref/forms/fields.txt:649
#: ../../ref/forms/fields.txt:746
#: ../../ref/forms/fields.txt:773
#: ../../ref/forms/fields.txt:812
#: ../../ref/forms/fields.txt:834
# 4f552ebdd52242bdbbc9c4175edbdb68
# de8a51586d5b403482ef54c9a83c4257
# a1a5928a05d04306a5557fa8c93c13ed
# b0a5464ed3d84f3a9e7f7c280fbf9cb9
# a979d2b491114037817d3325bedb6046
# b2b0945424ef473890bb0cdfb6c3640c
# 9e7e4ddc4097463b87fa87c23f74aaca
# 33a0c1a5176c4fc684381928f64ade6b
msgid "Normalizes to: A Unicode object."
msgstr ""

#: ../../ref/forms/fields.txt:315
# 765e51f6e9984b49b9e2ad9466387988
msgid "Validates ``max_length`` or ``min_length``, if they are provided. Otherwise, all inputs are valid."
msgstr ""

#: ../../ref/forms/fields.txt:317
# 8224ca5888914f228f84090d10d4efcf
msgid "Error message keys: ``required``, ``max_length``, ``min_length``"
msgstr ""

#: ../../ref/forms/fields.txt:319
# f7a6c247d18946a491c79c1110ec947b
msgid "Has two optional arguments for validation:"
msgstr ""

#: ../../ref/forms/fields.txt:324
# 55ca470a6f054e188d4a19114a40501c
msgid "If provided, these arguments ensure that the string is at most or at least the given length."
msgstr ""

#: ../../ref/forms/fields.txt:328
# 7f9c39b8082c4fa088f07bf801b63d3f
msgid "``ChoiceField``"
msgstr ""

#: ../../ref/forms/fields.txt:332
#: ../../ref/forms/fields.txt:358
#: ../../ref/forms/fields.txt:536
#: ../../ref/forms/fields.txt:948
# ae3b8f475a0144f18782fc2f00e1845f
# 89367a987b0b47e08cd94995484951c1
# e4e1dd4cd4464e9887588502afbc5a1a
# 62bcb4cc2e7646c393df51f7e3887869
msgid "Default widget: :class:`Select`"
msgstr ""

#: ../../ref/forms/fields.txt:335
# 39c229671d5b47e38a9ee8b4bea3e76c
msgid "Validates that the given value exists in the list of choices."
msgstr ""

#: ../../ref/forms/fields.txt:336
#: ../../ref/forms/fields.txt:363
#: ../../ref/forms/fields.txt:540
#: ../../ref/forms/fields.txt:722
#: ../../ref/forms/fields.txt:952
# 294f22e959b44a23a20728c424e831bd
# d34bba0b6ac04f4283a629befb1dee79
# dbfd04bd66dd43f5b4777a82d50518fc
# 3b79213d8575459fb9232f5e43dd4b71
# ed486c2629a64793b8408089234f139e
msgid "Error message keys: ``required``, ``invalid_choice``"
msgstr ""

#: ../../ref/forms/fields.txt:338
#: ../../ref/forms/fields.txt:703
#: ../../ref/forms/fields.txt:724
# 439be3427abe478d8d7131b9d945a80d
# dff7a16e025449b7a1f00dd6ee0e5de2
# b0f03d86104f454cad3f53675c65d4c3
msgid "The ``invalid_choice`` error message may contain ``%(value)s``, which will be replaced with the selected choice."
msgstr ""

#: ../../ref/forms/fields.txt:341
#: ../../ref/forms/fields.txt:839
#: ../../ref/forms/fields.txt:874
# 21f8db9800364343bbf475c6f822cc67
# ca0d3335988e4b66b2649508c34956ce
# 469f8bb520fd47c1a26f31c4abb6c81e
msgid "Takes one extra required argument:"
msgstr ""

#: ../../ref/forms/fields.txt:345
# 91dce65e61054923a7bf0c794aa6ac01
msgid "An iterable (e.g., a list or tuple) of 2-tuples to use as choices for this field. This argument accepts the same formats as the ``choices`` argument to a model field. See the :ref:`model field reference documentation on choices <field-choices>` for more details."
msgstr ""

#: ../../ref/forms/fields.txt:351
# 4e3831ce8d66400fb47b10deaa3ee192
msgid "``TypedChoiceField``"
msgstr ""

#: ../../ref/forms/fields.txt:355
# 35f6f3c10fb545e19dcc8fd89ee2b93c
msgid "Just like a :class:`ChoiceField`, except :class:`TypedChoiceField` takes two extra arguments, ``coerce`` and ``empty_value``."
msgstr ""

#: ../../ref/forms/fields.txt:359
#: ../../ref/forms/fields.txt:717
# 7c837688b633499c86b71fe04c416b51
# d73c7e3681364752a60ff2d0117b07c6
msgid "Empty value: Whatever you've given as ``empty_value``"
msgstr ""

#: ../../ref/forms/fields.txt:360
# a99c4170af7f4fb191bf68f7ade6a1d6
msgid "Normalizes to: A value of the type provided by the ``coerce`` argument."
msgstr ""

#: ../../ref/forms/fields.txt:361
# 9ea293aca96141b983e56b2faef4be63
msgid "Validates that the given value exists in the list of choices and can be coerced."
msgstr ""

#: ../../ref/forms/fields.txt:365
# 5bb4227baeae456c899fd30a171ec9ee
msgid "Takes extra arguments:"
msgstr ""

#: ../../ref/forms/fields.txt:369
# f57e2c0ed635427eadfaea617afa5e5a
msgid "A function that takes one argument and returns a coerced value. Examples include the built-in ``int``, ``float``, ``bool`` and other types. Defaults to an identity function."
msgstr ""

#: ../../ref/forms/fields.txt:375
# 05ab65abb3734e6785e235d827f48358
msgid "The value to use to represent \"empty.\" Defaults to the empty string; ``None`` is another common choice here. Note that this value will not be coerced by the function given in the ``coerce`` argument, so choose it accordingly."
msgstr ""

#: ../../ref/forms/fields.txt:381
#: ../../ref/models/fields.txt:407
# 7767fd94619444f5bcc778d31db939ef
# 76caf0fb0e1e4d069f953390d2b38288
msgid "``DateField``"
msgstr ""

#: ../../ref/forms/fields.txt:385
# 19dd8fd62a42422eaad4161a4670bc3f
msgid "Default widget: :class:`DateInput`"
msgstr ""

#: ../../ref/forms/fields.txt:386
#: ../../ref/forms/fields.txt:425
#: ../../ref/forms/fields.txt:458
#: ../../ref/forms/fields.txt:509
#: ../../ref/forms/fields.txt:537
#: ../../ref/forms/fields.txt:584
#: ../../ref/forms/fields.txt:600
#: ../../ref/forms/fields.txt:625
#: ../../ref/forms/fields.txt:735
#: ../../ref/forms/fields.txt:787
#: ../../ref/forms/fields.txt:906
#: ../../ref/forms/fields.txt:949
# 74f440e7a0c2439ebe746de5a0ebb9f1
# e667d6ebf4764e93a383ad7e124c8937
# 6db4829865c9462a84bd38d83dede165
# a9082055003e4b43a9637931695c3bd7
# 7dbbfcc42403440ba15da4842fa2aeef
# 29ac41c5a1aa4ae6aeae0f83664e0411
# fd0a8764929d4f3c8891f71bf4f55e17
# f625179502ed49bbb3d7342f13a303c5
# e98cad265758471bb7d61bf0f14e215d
# 2300728fd60242e7bbace171880d6e4d
# 64ce10522e414e18bf5655d464d7c668
# cf5c465a61fe49d686864bf9163a800c
msgid "Empty value: ``None``"
msgstr ""

#: ../../ref/forms/fields.txt:387
# 47007e58cbcf48688ca5d8f5c21ce081
msgid "Normalizes to: A Python ``datetime.date`` object."
msgstr ""

#: ../../ref/forms/fields.txt:388
# 715f86f434934a3f88ab734f2da81222
msgid "Validates that the given value is either a ``datetime.date``, ``datetime.datetime`` or string formatted in a particular date format."
msgstr ""

#: ../../ref/forms/fields.txt:390
#: ../../ref/forms/fields.txt:429
#: ../../ref/forms/fields.txt:497
#: ../../ref/forms/fields.txt:652
#: ../../ref/forms/fields.txt:668
#: ../../ref/forms/fields.txt:749
#: ../../ref/forms/fields.txt:791
#: ../../ref/forms/fields.txt:814
#: ../../ref/forms/fields.txt:837
#: ../../ref/forms/fields.txt:864
# e7ad98fec8914f46a7e2c91f0070425d
# 28b0c023f7ed42a286bb5946f154c449
# 3ebd6a7e13274141b072cc2dd000cfe9
# e6f09da1afd048a785227239bdb7f7e8
# 6716c00a22604b579d499becd1ffb2ce
# 0176a74ac0ad4e87b3fcf5d32b961e3c
# 729b3ddf91f447348ef355ac8e01c85f
# e3113227e69d45a2a63dd89a66ada1df
# b77163eaf3ca4926bcf0a9b11cb1ea2d
# 414118068ce54ce89f829b7dc4a03666
msgid "Error message keys: ``required``, ``invalid``"
msgstr ""

#: ../../ref/forms/fields.txt:392
#: ../../ref/forms/fields.txt:431
#: ../../ref/forms/fields.txt:793
#: ../../ref/forms/widgets.txt:399
#: ../../ref/forms/widgets.txt:486
#: ../../ref/forms/widgets.txt:701
# 9acd39b726b3456fb8f3bcfb5fb5853d
# 812136dff7b546b6b91dd22ea1e1bfa1
# 00a4818875514438a28b5aacf0b9667e
# 43604d5bb75a4c3e9ccf0a8fe122c81d
# 4dd7805debf348e5b951e93e7ab08201
# a172dc7d3c9f47e482c5d2371b9b0311
msgid "Takes one optional argument:"
msgstr ""

#: ../../ref/forms/fields.txt:396
#: ../../ref/forms/fields.txt:917
# 0469b70296a949129aabc5af58478fd6
# e665efdb6c744147aff4b310ab20cbc4
msgid "A list of formats used to attempt to convert a string to a valid ``datetime.date`` object."
msgstr ""

#: ../../ref/forms/fields.txt:399
#: ../../ref/forms/fields.txt:438
#: ../../ref/forms/fields.txt:800
# d9e2b25020c040a2ac21f89068f64214
# 69ba5f87ad1942528e9d941ee58479ad
# ba1b6e11a723495abd958d2c8db4c890
msgid "If no ``input_formats`` argument is provided, the default input formats are::"
msgstr ""

#: ../../ref/forms/fields.txt:405
# d4debb7e02d548e99633d5a50ed6cb25
msgid "Additionally, if you specify :setting:`USE_L10N=False<USE_L10N>` in your settings, the following will also be included in the default input formats::"
msgstr ""

#: ../../ref/forms/fields.txt:417
#: ../../ref/forms/fields.txt:450
# 4281e5d0abd44d79873478901ddc4fb6
# 956f120844634298b24528305ab348be
msgid "See also :ref:`format localization <format-localization>`."
msgstr ""

#: ../../ref/forms/fields.txt:420
#: ../../ref/models/fields.txt:437
# 820f0d2076cc40ff8a6369d3ad83020d
# 667eee8d4b834592a9e150a0e4a8d422
msgid "``DateTimeField``"
msgstr ""

#: ../../ref/forms/fields.txt:424
# c53514391e304ca2b2ee6d581277e50c
msgid "Default widget: :class:`DateTimeInput`"
msgstr ""

#: ../../ref/forms/fields.txt:426
#: ../../ref/forms/fields.txt:907
# 5e188980595e48f9a4c3470907c93e66
# 3ba0157584d9469dba935d568ba28411
msgid "Normalizes to: A Python ``datetime.datetime`` object."
msgstr ""

#: ../../ref/forms/fields.txt:427
# 736128b0412047ad9fa4d59f3b5d32ad
msgid "Validates that the given value is either a ``datetime.datetime``, ``datetime.date`` or string formatted in a particular datetime format."
msgstr ""

#: ../../ref/forms/fields.txt:435
# bafdce7561a242bb9b764e42431da21d
msgid "A list of formats used to attempt to convert a string to a valid ``datetime.datetime`` object."
msgstr ""

#: ../../ref/forms/fields.txt:453
#: ../../ref/models/fields.txt:449
# 9ca7a9f5a1cc448ab07a683280626f05
# f5e967124e774f288672994b94e90f30
msgid "``DecimalField``"
msgstr ""

#: ../../ref/forms/fields.txt:459
# b6b0ec7a5d0543d99fe8dd9380744fbe
msgid "Normalizes to: A Python ``decimal``."
msgstr ""

#: ../../ref/forms/fields.txt:460
# 3d711868722b4f348c30890a8983b4be
msgid "Validates that the given value is a decimal. Leading and trailing whitespace is ignored."
msgstr ""

#: ../../ref/forms/fields.txt:462
# cf217b4e01564b079d3540e73681b632
msgid "Error message keys: ``required``, ``invalid``, ``max_value``, ``min_value``, ``max_digits``, ``max_decimal_places``, ``max_whole_digits``"
msgstr ""

#: ../../ref/forms/fields.txt:466
#: ../../ref/forms/fields.txt:632
# cfef3511d0ba422797a93c066abb71a9
# 7e3cb139777c4ba39d2207ed8f188d0b
msgid "The ``max_value`` and ``min_value`` error messages may contain ``%(limit_value)s``, which will be substituted by the appropriate limit."
msgstr ""

#: ../../ref/forms/fields.txt:469
# 4598b382c37e402bbe2b2d08c6897e43
msgid "Takes four optional arguments:"
msgstr ""

#: ../../ref/forms/fields.txt:474
# ce5b8b23f562482993bc0501e6f29723
msgid "These control the range of values permitted in the field, and should be given as ``decimal.Decimal`` values."
msgstr ""

#: ../../ref/forms/fields.txt:479
# e1b768e44e824a5294f958a988ad0cd7
msgid "The maximum number of digits (those before the decimal point plus those after the decimal point, with leading zeros stripped) permitted in the value."
msgstr ""

#: ../../ref/forms/fields.txt:485
# 035204f151d6480390ab76d5e812332f
msgid "The maximum number of decimal places permitted."
msgstr ""

#: ../../ref/forms/fields.txt:488
#: ../../ref/models/fields.txt:484
# e10546f3614b4cbe95a36b5bd3eaa7ff
# 41a6bcfa9ea64ea8a668a0fa983458d7
msgid "``EmailField``"
msgstr ""

#: ../../ref/forms/fields.txt:495
# 8f0ea46db6d44f3db58dcaf25dd7c19b
msgid "Validates that the given value is a valid email address, using a moderately complex regular expression."
msgstr ""

#: ../../ref/forms/fields.txt:499
# 907791bca8184c4482acf530c34d9b3d
msgid "Has two optional arguments for validation, ``max_length`` and ``min_length``. If provided, these arguments ensure that the string is at most or at least the given length."
msgstr ""

#: ../../ref/forms/fields.txt:504
#: ../../ref/models/fields.txt:500
# b5b2dcb8b9df4fd6b793648f56c15af2
# 82b1b5ee830e4d6dbf0f157cbe930eb2
msgid "``FileField``"
msgstr ""

#: ../../ref/forms/fields.txt:508
#: ../../ref/forms/fields.txt:599
# 23a3485a69ed45359ade0620d781cd2f
# 0b41fc70d46a4e6eae07c70dcb12e99c
msgid "Default widget: :class:`ClearableFileInput`"
msgstr ""

#: ../../ref/forms/fields.txt:510
#: ../../ref/forms/fields.txt:601
# a2242ce0d650458597e3fe8020e634b2
# f52f406417be4652a8bbb243200db308
msgid "Normalizes to: An ``UploadedFile`` object that wraps the file content and file name into a single object."
msgstr ""

#: ../../ref/forms/fields.txt:512
# 496f660f37ad4092ac64efbadbad7d16
msgid "Can validate that non-empty file data has been bound to the form."
msgstr ""

#: ../../ref/forms/fields.txt:513
# f37778bc1be14d4b8004fc9ea22d3377
msgid "Error message keys: ``required``, ``invalid``, ``missing``, ``empty``, ``max_length``"
msgstr ""

#: ../../ref/forms/fields.txt:516
# 60700494dce74238b62c59ffb7d9175e
msgid "Has two optional arguments for validation, ``max_length`` and ``allow_empty_file``. If provided, these ensure that the file name is at most the given length, and that validation will succeed even if the file content is empty."
msgstr ""

#: ../../ref/forms/fields.txt:521
# 99fbcdd15654491ea9308539c185b770
msgid "To learn more about the ``UploadedFile`` object, see the :doc:`file uploads documentation </topics/http/file-uploads>`."
msgstr ""

#: ../../ref/forms/fields.txt:524
# 83923f0a5cd742d9b21adec8ce30ac37
msgid "When you use a ``FileField`` in a form, you must also remember to :ref:`bind the file data to the form <binding-uploaded-files>`."
msgstr ""

#: ../../ref/forms/fields.txt:527
# 6c8a3d0f50ce4795aac5471a083b8c59
msgid "The ``max_length`` error refers to the length of the filename. In the error message for that key, ``%(max)d`` will be replaced with the maximum filename length and ``%(length)d`` will be replaced with the current filename length."
msgstr ""

#: ../../ref/forms/fields.txt:532
#: ../../ref/models/fields.txt:692
# 519928354efe42da8f53c26cdd7c5759
# f9b7307c76274a4d8df8dc26f5541aa9
msgid "``FilePathField``"
msgstr ""

#: ../../ref/forms/fields.txt:538
# 2b496c5424e44b97be585971576cffeb
msgid "Normalizes to: A unicode object"
msgstr ""

#: ../../ref/forms/fields.txt:539
# c77f2fddd8f84f338c8eb97e91ce704b
msgid "Validates that the selected choice exists in the list of choices."
msgstr ""

#: ../../ref/forms/fields.txt:542
# dbdb64f068eb45228d53d056d57ea7cd
msgid "The field allows choosing from files inside a certain directory. It takes three extra arguments; only ``path`` is required:"
msgstr ""

#: ../../ref/forms/fields.txt:547
# 3812ed0909c747fa93085ac297a6a77a
msgid "The absolute path to the directory whose contents you want listed. This directory must exist."
msgstr ""

#: ../../ref/forms/fields.txt:552
# e23d158364b8459d9afa71177dd32f3e
msgid "If ``False`` (the default) only the direct contents of ``path`` will be offered as choices. If ``True``, the directory will be descended into recursively and all descendants will be listed as choices."
msgstr ""

#: ../../ref/forms/fields.txt:558
# 93e08dbbcb074f95be7ef9320f8ed50c
msgid "A regular expression pattern; only files with names matching this expression will be allowed as choices."
msgstr ""

#: ../../ref/forms/fields.txt:565
# ae0ff1f8563648538b8761c96e78760a
msgid "Optional.  Either ``True`` or ``False``.  Default is ``True``.  Specifies whether files in the specified location should be included.  Either this or :attr:`allow_folders` must be ``True``."
msgstr ""

#: ../../ref/forms/fields.txt:573
# 1d5d99c83c634330b5bd9b6694276eb6
msgid "Optional.  Either ``True`` or ``False``.  Default is ``False``.  Specifies whether folders in the specified location should be included.  Either this or :attr:`allow_files` must be ``True``."
msgstr ""

#: ../../ref/forms/fields.txt:579
#: ../../ref/models/fields.txt:750
# 3e65ae89e32244e4a33727def9c49ba0
# 1180212e2e584368951825d03344a26a
msgid "``FloatField``"
msgstr ""

#: ../../ref/forms/fields.txt:585
# 6f37de26e9724ea78420e7e7c247f0f3
msgid "Normalizes to: A Python float."
msgstr ""

#: ../../ref/forms/fields.txt:586
# ca9fe8b6da5e44b994896c0007eb63cb
msgid "Validates that the given value is an float. Leading and trailing whitespace is allowed, as in Python's ``float()`` function."
msgstr ""

#: ../../ref/forms/fields.txt:588
#: ../../ref/forms/fields.txt:629
# 1f9b6b98833441e5ae90cf2c589bda2e
# 56eb5161ff674356a0ff6786f763f89e
msgid "Error message keys: ``required``, ``invalid``, ``max_value``, ``min_value``"
msgstr ""

#: ../../ref/forms/fields.txt:591
# 3c6779fd27174e7c917d53c5bb3f6ca4
msgid "Takes two optional arguments for validation, ``max_value`` and ``min_value``. These control the range of values permitted in the field."
msgstr ""

#: ../../ref/forms/fields.txt:595
#: ../../ref/models/fields.txt:770
# dae38b7ba5574eb1a72f21fbd2fd3128
# 3c88162a9278439da157c115bde7b079
msgid "``ImageField``"
msgstr ""

#: ../../ref/forms/fields.txt:603
# 0c36e4170f4943ad95ee0093ad253401
msgid "Validates that file data has been bound to the form, and that the file is of an image format understood by PIL."
msgstr ""

#: ../../ref/forms/fields.txt:605
# 394e4f7fed534960b8aaab83475c8833
msgid "Error message keys: ``required``, ``invalid``, ``missing``, ``empty``, ``invalid_image``"
msgstr ""

#: ../../ref/forms/fields.txt:608
# e24870ed2cdc4d9b9f271ef124df6bdd
msgid "Using an ``ImageField`` requires that the `Python Imaging Library`_ (PIL) is installed and supports the image formats you use. If you encounter a ``corrupt image`` error when you upload an image, it usually means PIL doesn't understand its format. To fix this, install the appropriate library and reinstall PIL."
msgstr ""

#: ../../ref/forms/fields.txt:614
# d7bd55c252f84a90be849df451ff45b5
msgid "When you use an ``ImageField`` on a form, you must also remember to :ref:`bind the file data to the form <binding-uploaded-files>`."
msgstr ""

#: ../../ref/forms/fields.txt:620
#: ../../ref/models/fields.txt:802
# 7e125ed65ae74dc68b3931a742444f6e
# b6afa32192a24476b474a5c84696267d
msgid "``IntegerField``"
msgstr ""

#: ../../ref/forms/fields.txt:626
# 000c706bb15b441baf7c4044ddb86efd
msgid "Normalizes to: A Python integer or long integer."
msgstr ""

#: ../../ref/forms/fields.txt:627
# 07a23afd666b41b3944293d43708a027
msgid "Validates that the given value is an integer. Leading and trailing whitespace is allowed, as in Python's ``int()`` function."
msgstr ""

#: ../../ref/forms/fields.txt:635
# 1fbc1af8b18b4f35b2cdc105e4eb86db
msgid "Takes two optional arguments for validation:"
msgstr ""

#: ../../ref/forms/fields.txt:640
# 26ffb68e0b644e178a4ec7796657f2c5
msgid "These control the range of values permitted in the field."
msgstr ""

#: ../../ref/forms/fields.txt:643
#: ../../ref/models/fields.txt:810
# 3e23eec2ac3e4ec58e301b82d2f9e934
# 40884b53560a4421a93b30c12c3e60ac
msgid "``IPAddressField``"
msgstr ""

#: ../../ref/forms/fields.txt:650
# fea2646b9a594677a2d1f30f1de8244b
msgid "Validates that the given value is a valid IPv4 address, using a regular expression."
msgstr ""

#: ../../ref/forms/fields.txt:655
#: ../../ref/models/fields.txt:818
# 1c62a259a0ec4a2f8a75f1e1b533ca10
# 92452f993b754732990bf1ac22491601
msgid "``GenericIPAddressField``"
msgstr ""

#: ../../ref/forms/fields.txt:661
# 388f37c6d510406b915361f9a7a93957
msgid "A field containing either an IPv4 or an IPv6 address."
msgstr ""

#: ../../ref/forms/fields.txt:665
# ee2317d5dfd1451f9df81f882da10cb7
msgid "Normalizes to: A Unicode object. IPv6 addresses are normalized as described below."
msgstr ""

#: ../../ref/forms/fields.txt:667
# 5e92dca29cca4e628c50c6cbf816b8f6
msgid "Validates that the given value is a valid IP address."
msgstr ""

#: ../../ref/forms/fields.txt:670
#: ../../ref/models/fields.txt:828
# 4d380ebd0e7d487e883dfb443eeab19a
# caf68b94315442c78fed687930e7e412
msgid "The IPv6 address normalization follows :rfc:`4291#section-2.2` section 2.2, including using the IPv4 format suggested in paragraph 3 of that section, like ``::ffff:192.0.2.0``. For example, ``2001:0::0:01`` would be normalized to ``2001::1``, and ``::ffff:0a0a:0a0a`` to ``::ffff:10.10.10.10``. All characters are converted to lowercase."
msgstr ""

#: ../../ref/forms/fields.txt:676
#: ../../ref/forms/fields.txt:913
# 6d8259df8df64da89bc3828bec89d4f2
# 64b10042f9934252b826293325627aed
msgid "Takes two optional arguments:"
msgstr ""

#: ../../ref/forms/fields.txt:680
# 06be6403b9f44ce280df172680f73dcb
msgid "Limits valid inputs to the specified protocol. Accepted values are ``both`` (default), ``IPv4`` or ``IPv6``. Matching is case insensitive."
msgstr ""

#: ../../ref/forms/fields.txt:686
#: ../../ref/models/fields.txt:842
# 05ab3c711eb244cd90cc15496f8bbb82
# 256ba668497445c6a5344f3e260413b3
msgid "Unpacks IPv4 mapped addresses like ``::ffff:192.0.2.1``. If this option is enabled that address would be unpacked to ``192.0.2.1``. Default is disabled. Can only be used when ``protocol`` is set to ``'both'``."
msgstr ""

#: ../../ref/forms/fields.txt:692
# 89987fc4525e4239bcd6d680540600ae
msgid "``MultipleChoiceField``"
msgstr ""

#: ../../ref/forms/fields.txt:696
#: ../../ref/forms/fields.txt:716
#: ../../ref/forms/fields.txt:1003
# f6f5650439e646428a8508b0ca25da94
# e4612fa6373846ef9dd50771e63bbaaa
# 52510eeab2024afcb9d4fddd211c8550
msgid "Default widget: :class:`SelectMultiple`"
msgstr ""

#: ../../ref/forms/fields.txt:697
# 175fd8ef010a4734ba8eb8f4f3131b2b
msgid "Empty value: ``[]`` (an empty list)"
msgstr ""

#: ../../ref/forms/fields.txt:698
# 38879f64ef814bca82c2f6a43d8f2d12
msgid "Normalizes to: A list of Unicode objects."
msgstr ""

#: ../../ref/forms/fields.txt:699
# e93918b3cdfd4348a9fc034db3fa2ef1
msgid "Validates that every value in the given list of values exists in the list of choices."
msgstr ""

#: ../../ref/forms/fields.txt:701
# a73be7ba705d49c5a881d7042874f68d
msgid "Error message keys: ``required``, ``invalid_choice``, ``invalid_list``"
msgstr ""

#: ../../ref/forms/fields.txt:706
# f04ffe95601f47db8ee11fa053c81505
msgid "Takes one extra required argument, ``choices``, as for ``ChoiceField``."
msgstr ""

#: ../../ref/forms/fields.txt:709
# 3e86c8e73caa4384a1cae13f955ad324
msgid "``TypedMultipleChoiceField``"
msgstr ""

#: ../../ref/forms/fields.txt:713
# e2fe2c66b84946c18965250543e5469d
msgid "Just like a :class:`MultipleChoiceField`, except :class:`TypedMultipleChoiceField` takes two extra arguments, ``coerce`` and ``empty_value``."
msgstr ""

#: ../../ref/forms/fields.txt:718
# feb54d952aa04edeaa034083d2e7a8a1
msgid "Normalizes to: A list of values of the type provided by the ``coerce`` argument."
msgstr ""

#: ../../ref/forms/fields.txt:720
# c3711a52cb0c42dd9f28a87807637466
msgid "Validates that the given values exists in the list of choices and can be coerced."
msgstr ""

#: ../../ref/forms/fields.txt:727
# 92a8bc55e3c04047b230567c794bc808
msgid "Takes two extra arguments, ``coerce`` and ``empty_value``, as for ``TypedChoiceField``."
msgstr ""

#: ../../ref/forms/fields.txt:730
#: ../../ref/models/fields.txt:848
# 9ddadb79b455460fb1f37a4d4ce50506
# 2ae626deee654eec9977ed4a0dbf3029
msgid "``NullBooleanField``"
msgstr ""

#: ../../ref/forms/fields.txt:734
# fda23eeb464d427fa8bd1ee229c44145
msgid "Default widget: :class:`NullBooleanSelect`"
msgstr ""

#: ../../ref/forms/fields.txt:736
# 3e2938a3c2f94ffb902d9bd4780abd50
msgid "Normalizes to: A Python ``True``, ``False`` or ``None`` value."
msgstr ""

#: ../../ref/forms/fields.txt:737
# 5557aeaab2ff4f66b014afd205a3fb4f
msgid "Validates nothing (i.e., it never raises a ``ValidationError``)."
msgstr ""

#: ../../ref/forms/fields.txt:740
# f50b04974b044165a36b900a16069793
msgid "``RegexField``"
msgstr ""

#: ../../ref/forms/fields.txt:747
# 49482be6e9a24ac3ae80f25c7d0787a1
msgid "Validates that the given value matches against a certain regular expression."
msgstr ""

#: ../../ref/forms/fields.txt:751
# 1f2d6f9cea0a49558cc5ada83e9999d8
msgid "Takes one required argument:"
msgstr ""

#: ../../ref/forms/fields.txt:755
# 3f2f04904b884d1c8b297327c2b7d9ca
msgid "A regular expression specified either as a string or a compiled regular expression object."
msgstr ""

#: ../../ref/forms/fields.txt:758
# 37759f10904c4b52be3c6af657a36d8c
msgid "Also takes ``max_length`` and ``min_length``, which work just as they do for ``CharField``."
msgstr ""

#: ../../ref/forms/fields.txt:761
# 21c7c74f6d9a43fa9e12a9326feb832f
msgid "The optional argument ``error_message`` is also accepted for backwards compatibility. The preferred way to provide an error message is to use the ``error_messages`` argument, passing a dictionary with ``'invalid'`` as a key and the error message as the value."
msgstr ""

#: ../../ref/forms/fields.txt:767
#: ../../ref/models/fields.txt:873
# 45704c61cb5e41c19d566e7ce4112107
# 958a9444b1534b6ab33dffb9d31cc3bf
msgid "``SlugField``"
msgstr ""

#: ../../ref/forms/fields.txt:774
# 987e65b261c542e29c0a9554505e12d3
msgid "Validates that the given value contains only letters, numbers, underscores, and hyphens."
msgstr ""

#: ../../ref/forms/fields.txt:776
# 7aab56b5dcdf400889d251355b663a47
msgid "Error messages: ``required``, ``invalid``"
msgstr ""

#: ../../ref/forms/fields.txt:778
# 5b0f8a70ac824d11897c2099b417aa60
msgid "This field is intended for use in representing a model :class:`~django.db.models.SlugField` in forms."
msgstr ""

#: ../../ref/forms/fields.txt:782
#: ../../ref/models/fields.txt:916
# f10b87cf844a4c65827deb8283d1b9b9
# 67c152b2cf0c45b2832a2477f3c18d92
msgid "``TimeField``"
msgstr ""

#: ../../ref/forms/fields.txt:788
# b14318ae88fd4bb9baddeb6c4c1050d0
msgid "Normalizes to: A Python ``datetime.time`` object."
msgstr ""

#: ../../ref/forms/fields.txt:789
# 580871605751448daeb8f607aff31d15
msgid "Validates that the given value is either a ``datetime.time`` or string formatted in a particular time format."
msgstr ""

#: ../../ref/forms/fields.txt:797
#: ../../ref/forms/fields.txt:925
# 3fdbcae38d324268a57ca6588804971a
# b45d3e7d59f7438ea4cde1bbdd93ec4f
msgid "A list of formats used to attempt to convert a string to a valid ``datetime.time`` object."
msgstr ""

#: ../../ref/forms/fields.txt:806
#: ../../ref/models/fields.txt:927
# 1170a10a0d534f5fad04fe40f7aaab09
# 9d1c365f18af4f72b057d2afd48bbe43
msgid "``URLField``"
msgstr ""

#: ../../ref/forms/fields.txt:813
# 3e74a73f99cf4d6ab544fa1369c32544
msgid "Validates that the given value is a valid URL."
msgstr ""

#: ../../ref/forms/fields.txt:816
# 4b1c7c5b02d64160be49805b8c64e363
msgid "Takes the following optional arguments:"
msgstr ""

#: ../../ref/forms/fields.txt:821
# 7228695a2f9146bd9c97ee1e71c83a2a
msgid "These are the same as ``CharField.max_length`` and ``CharField.min_length``."
msgstr ""

#: ../../ref/forms/fields.txt:825
# b570626806514cd0bbcc47dfec8b051d
msgid "Slightly complex built-in ``Field`` classes"
msgstr ""

#: ../../ref/forms/fields.txt:828
# fa72341314164790921ba805b8de22a6
msgid "``ComboField``"
msgstr ""

#: ../../ref/forms/fields.txt:835
# ab558e11019640a7948e38c0373fbb0c
msgid "Validates that the given value against each of the fields specified as an argument to the ``ComboField``."
msgstr ""

#: ../../ref/forms/fields.txt:843
# 30c94fa37dc7430591226149f7cef030
msgid "The list of fields that should be used to validate the field's value (in the order in which they are provided)."
msgstr ""

#: ../../ref/forms/fields.txt:855
# c6ddb59366924e61b7a041d9ffe4ecaf
msgid "``MultiValueField``"
msgstr ""

#: ../../ref/forms/fields.txt:861
# 1e6534cca1e94a3ab1da5921563a079d
msgid "Normalizes to: the type returned by the ``compress`` method of the subclass."
msgstr ""

#: ../../ref/forms/fields.txt:862
# f3dc9b3e4f074e88924ff3a7c85da616
msgid "Validates that the given value against each of the fields specified as an argument to the ``MultiValueField``."
msgstr ""

#: ../../ref/forms/fields.txt:866
# 972a9d2c843c4e58bd038ee992a1b089
msgid "Aggregates the logic of multiple fields that together produce a single value."
msgstr ""

#: ../../ref/forms/fields.txt:869
# d9ea7ca132504686959ceabad8356510
msgid "This field is abstract and must be subclassed. In contrast with the single-value fields, subclasses of :class:`MultiValueField` must not implement :meth:`~django.forms.Field.clean` but instead - implement :meth:`~MultiValueField.compress`."
msgstr ""

#: ../../ref/forms/fields.txt:878
# a925ecb4fcf642aca72adeef4ca54425
msgid "A tuple of fields whose values are cleaned and subsequently combined into a single value.  Each value of the field is cleaned by the corresponding field in ``fields`` -- the first value is cleaned by the first field, the second value is cleaned by the second field, etc. Once all fields are cleaned, the list of clean values is combined into a single value by :meth:`~MultiValueField.compress`."
msgstr ""

#: ../../ref/forms/fields.txt:887
# b8314249eab84b52bacddd62a22bbcdf
msgid "Must be a subclass of :class:`django.forms.MultiWidget`. Default value is :class:`~django.forms.TextInput`, which probably is not very useful in this case."
msgstr ""

#: ../../ref/forms/fields.txt:893
# 798455a273e740d680ecf0c3577d027f
msgid "Takes a list of valid values and returns  a \"compressed\" version of those values -- in a single value. For example, :class:`SplitDateTimeField` is a subclass which combines a time field and a date field into a ``datetime`` object."
msgstr ""

#: ../../ref/forms/fields.txt:898
# 9899361f7d754036a0fabaa2573fb9c4
msgid "This method must be implemented in the subclasses."
msgstr ""

#: ../../ref/forms/fields.txt:901
# 87c2a8b05736401ab771b82a72c6c759
msgid "``SplitDateTimeField``"
msgstr ""

#: ../../ref/forms/fields.txt:905
# cb8da422238440b8b09ffbbe31267581
msgid "Default widget: :class:`SplitDateTimeWidget`"
msgstr ""

#: ../../ref/forms/fields.txt:908
# e4a0f13ee9284219adf31949355ab09d
msgid "Validates that the given value is a ``datetime.datetime`` or string formatted in a particular datetime format."
msgstr ""

#: ../../ref/forms/fields.txt:910
# 5aa8b5af5bdd427086ffb8e446a3dd4e
msgid "Error message keys: ``required``, ``invalid``, ``invalid_date``, ``invalid_time``"
msgstr ""

#: ../../ref/forms/fields.txt:920
# c31194a6b3e645588ab3fcc3781ab32e
msgid "If no ``input_date_formats`` argument is provided, the default input formats for ``DateField`` are used."
msgstr ""

#: ../../ref/forms/fields.txt:928
# 8521c16832de4ed29313f6616b68693b
msgid "If no ``input_time_formats`` argument is provided, the default input formats for ``TimeField`` are used."
msgstr ""

#: ../../ref/forms/fields.txt:932
# e16a23ad5cbf481daec2dd8898de0e78
msgid "Fields which handle relationships"
msgstr ""

#: ../../ref/forms/fields.txt:934
# 47b4eb6eed60400394cb2ee6663b6746
msgid "Two fields are available for representing relationships between models: :class:`ModelChoiceField` and :class:`ModelMultipleChoiceField`.  Both of these fields require a single ``queryset`` parameter that is used to create the choices for the field.  Upon form validation, these fields will place either one model object (in the case of ``ModelChoiceField``) or multiple model objects (in the case of ``ModelMultipleChoiceField``) into the ``cleaned_data`` dictionary of the form."
msgstr ""

#: ../../ref/forms/fields.txt:944
# b10390b3e97b4bd58968246a54a1f856
msgid "``ModelChoiceField``"
msgstr ""

#: ../../ref/forms/fields.txt:950
# 87bac27c6abf46089d9c79bf378b6cd5
msgid "Normalizes to: A model instance."
msgstr ""

#: ../../ref/forms/fields.txt:951
# e476154b62c54697ab58fbf8973e02a0
msgid "Validates that the given id exists in the queryset."
msgstr ""

#: ../../ref/forms/fields.txt:954
# 8cd2386d6d5c4ed2993e489f023457f9
msgid "Allows the selection of a single model object, suitable for representing a foreign key. Note that the default widget for ``ModelChoiceField`` becomes impractical when the number of entries increases. You should avoid using it for more than 100 items."
msgstr ""

#: ../../ref/forms/fields.txt:959
# 2f5476b9f5694514a7e986d9631ebe6d
msgid "A single argument is required:"
msgstr ""

#: ../../ref/forms/fields.txt:963
#: ../../ref/forms/fields.txt:1022
# 0c1bcc0de4da42328cddf5440f0f5c32
# ed69110b8ce9435494377f2696b4726a
msgid "A ``QuerySet`` of model objects from which the choices for the field will be derived, and which will be used to validate the user's selection."
msgstr ""

#: ../../ref/forms/fields.txt:967
# 7affd3a7f71347128fed6607caf4f8c5
msgid "``ModelChoiceField`` also takes one optional argument:"
msgstr ""

#: ../../ref/forms/fields.txt:971
# 4a45ec289db54ee5bd99248a09b53f88
msgid "By default the ``<select>`` widget used by ``ModelChoiceField`` will have an empty choice at the top of the list. You can change the text of this label (which is ``\"---------\"`` by default) with the ``empty_label`` attribute, or you can disable the empty label entirely by setting ``empty_label`` to ``None``::"
msgstr ""

#: ../../ref/forms/fields.txt:983
# 1d0d8381f957413abfee270c1c52a8e5
msgid "Note that if a ``ModelChoiceField`` is required and has a default initial value, no empty choice is created (regardless of the value of ``empty_label``)."
msgstr ""

#: ../../ref/forms/fields.txt:987
# e2737581da9d4c34a8dee601cf04866b
msgid "The ``__unicode__`` method of the model will be called to generate string representations of the objects for use in the field's choices; to provide customized representations, subclass ``ModelChoiceField`` and override ``label_from_instance``. This method will receive a model object, and should return a string suitable for representing it. For example::"
msgstr ""

#: ../../ref/forms/fields.txt:999
# 94f4b06a30de4a2694997f4a9173676d
msgid "``ModelMultipleChoiceField``"
msgstr ""

#: ../../ref/forms/fields.txt:1004
# 32232d955c05483db7140dc18fbb5d9e
msgid "Empty value: An empty ``QuerySet`` (self.queryset.none())"
msgstr ""

#: ../../ref/forms/fields.txt:1005
# 98c9a25722d34140900a4c7d3c0d2e49
msgid "Normalizes to: A ``QuerySet`` of model instances."
msgstr ""

#: ../../ref/forms/fields.txt:1006
# 578537cb21054173809e9be257b86b87
msgid "Validates that every id in the given list of values exists in the queryset."
msgstr ""

#: ../../ref/forms/fields.txt:1008
# fb8ebbc00d7b4584a8b752c56fa1b6e9
msgid "Error message keys: ``required``, ``list``, ``invalid_choice``, ``invalid_pk_value``"
msgstr ""

#: ../../ref/forms/fields.txt:1015
# c433e73660cd4855a7b966432c3b0f24
msgid "Allows the selection of one or more model objects, suitable for representing a many-to-many relation. As with :class:`ModelChoiceField`, you can use ``label_from_instance`` to customize the object representations, and ``queryset`` is a required parameter:"
msgstr ""

#: ../../ref/forms/fields.txt:1027
# 7e052c873a724f4294c1f5c8b1a53a73
msgid "Creating custom fields"
msgstr ""

#: ../../ref/forms/fields.txt:1029
# c6647a9f920f4d12917aab501b2bdd87
msgid "If the built-in ``Field`` classes don't meet your needs, you can easily create custom ``Field`` classes. To do this, just create a subclass of ``django.forms.Field``. Its only requirements are that it implement a ``clean()`` method and that its ``__init__()`` method accept the core arguments mentioned above (``required``, ``label``, ``initial``, ``widget``, ``help_text``)."
msgstr ""

#: ../../ref/forms/index.txt:3
# 4b247932688145489eae1032cd153f0b
msgid "Forms"
msgstr ""

#: ../../ref/forms/index.txt:5
# 8d7b960314e747c99865d1679c1f3eae
msgid "Detailed form API reference. For introductory material, see :doc:`/topics/forms/index`."
msgstr ""

#: ../../ref/forms/models.txt:3
# b8091170f5164e0e86fd23d0cd763e47
msgid "Model Form Functions"
msgstr ""

#: ../../ref/forms/models.txt:10
# 9873feffb755414391c472114e0791b0
msgid "Returns a :class:`~django.forms.ModelForm` class for the given ``model``. You can optionally pass a ``form`` argument to use as a starting point for constructing the ``ModelForm``."
msgstr ""

#: ../../ref/forms/models.txt:14
# af9617b8b59448798382f9b8c375db37
msgid "``fields`` is an optional list of field names. If provided, only the named fields will be included in the returned fields."
msgstr ""

#: ../../ref/forms/models.txt:17
# 13e8b1af694047da8b0bd0b075e0466c
msgid "``exclude`` is an optional list of field names. If provided, the named fields will be excluded from the returned fields, even if they are listed in the ``fields`` argument."
msgstr ""

#: ../../ref/forms/models.txt:21
# 6fca99be26bc43ffb093807f6c63182f
msgid "``widgets`` is a dictionary of model field names mapped to a widget."
msgstr ""

#: ../../ref/forms/models.txt:23
# 3c74374a328544388d11f6cd914e841a
msgid "``formfield_callback`` is a callable that takes a model field and returns a form field."
msgstr ""

#: ../../ref/forms/models.txt:26
# 0b1398021ded418ea31328f29db7f0e5
msgid "See :ref:`modelforms-factory` for example usage."
msgstr ""

#: ../../ref/forms/models.txt:30
# c55a56d8629f49769d4155f451909677
msgid "Returns a ``FormSet`` class for the given ``model`` class."
msgstr ""

#: ../../ref/forms/models.txt:32
# a1e62df263c747418b97e46243eff941
msgid "Arguments ``model``, ``form``, ``fields``, ``exclude``, and ``formfield_callback`` are all passed through to :func:`~django.forms.models.modelform_factory`."
msgstr ""

#: ../../ref/forms/models.txt:36
# 4907db472bd34700bd3b3eaf4eda3b50
msgid "Arguments ``formset``, ``extra``, ``max_num``, ``can_order``, and ``can_delete`` are passed through to ``formset_factory``. See :ref:`formsets` for details."
msgstr ""

#: ../../ref/forms/models.txt:40
# d228ee2b695947f28ae556a1600e3819
msgid "See :ref:`model-formsets` for example usage."
msgstr ""

#: ../../ref/forms/models.txt:44
# 67b7bd06c01d4e3faabd1079db75809c
msgid "Returns an ``InlineFormSet`` using :func:`modelformset_factory` with defaults of ``formset=BaseInlineFormSet``, ``can_delete=True``, and ``extra=3``."
msgstr ""

#: ../../ref/forms/models.txt:48
# 1dd5771b40bf4c73b41e35f4fee9617a
msgid "If your model has more than one :class:`~django.db.models.ForeignKey` to the ``parent_model``, you must specify a ``fk_name``."
msgstr ""

#: ../../ref/forms/models.txt:51
# 95ef680470a94ec1b5b14a84ba92545f
msgid "See :ref:`inline-formsets` for example usage."
msgstr ""

#: ../../ref/forms/validation.txt:4
# c1a33ce3e9884d7fa24c605937a3e55a
msgid "Form and field validation"
msgstr ""

#: ../../ref/forms/validation.txt:6
# 2ec74f1988b943168e9f844ed8a15be8
msgid "Form validation happens when the data is cleaned. If you want to customize this process, there are various places you can change, each one serving a different purpose. Three types of cleaning methods are run during form processing. These are normally executed when you call the ``is_valid()`` method on a form. There are other things that can trigger cleaning and validation (accessing the ``errors`` attribute or calling ``full_clean()`` directly), but normally they won't be needed."
msgstr ""

#: ../../ref/forms/validation.txt:14
# ca69d1dd52354982ba332857e6df754d
msgid "In general, any cleaning method can raise ``ValidationError`` if there is a problem with the data it is processing, passing the relevant error message to the ``ValidationError`` constructor. If no ``ValidationError`` is raised, the method should return the cleaned (normalized) data as a Python object."
msgstr ""

#: ../../ref/forms/validation.txt:19
# 305aa13ed63d40ec831ca38bd8b14aee
msgid "If you detect multiple errors during a cleaning method and wish to signal all of them to the form submitter, it is possible to pass a list of errors to the ``ValidationError`` constructor."
msgstr ""

#: ../../ref/forms/validation.txt:23
# 658d0fbe72d940a386f57980ffe53850
msgid "Most validation can be done using `validators`_ - simple helpers that can be reused easily. Validators are simple functions (or callables) that take a single argument and raise ``ValidationError`` on invalid input. Validators are run after the field's ``to_python`` and ``validate`` methods have been called."
msgstr ""

#: ../../ref/forms/validation.txt:28
# 218e409d28244dd6a15df493562a359d
msgid "Validation of a Form is split into several steps, which can be customized or overridden:"
msgstr ""

#: ../../ref/forms/validation.txt:31
# fd2c0b27360c494aaea3fe4ffda53fcf
msgid "The ``to_python()`` method on a Field is the first step in every validation. It coerces the value to correct datatype and raises ``ValidationError`` if that is not possible. This method accepts the raw value from the widget and returns the converted value. For example, a FloatField will turn the data into a Python ``float`` or raise a ``ValidationError``."
msgstr ""

#: ../../ref/forms/validation.txt:38
# ad3016bd1de14153a5a780396837d3af
msgid "The ``validate()`` method on a Field handles field-specific validation that is not suitable for a validator, It takes a value that has been coerced to correct datatype and raises ``ValidationError`` on any error. This method does not return anything and shouldn't alter the value. You should override it to handle validation logic that you can't or don't want to put in a validator."
msgstr ""

#: ../../ref/forms/validation.txt:45
# 79481e20d9a84883bc5ff38755e73d84
msgid "The ``run_validators()`` method on a Field runs all of the field's validators and aggregates all the errors into a single ``ValidationError``. You shouldn't need to override this method."
msgstr ""

#: ../../ref/forms/validation.txt:49
# bce45ad7abca46f5bead69a0dfcc2152
msgid "The ``clean()`` method on a Field subclass. This is responsible for running ``to_python``, ``validate`` and ``run_validators`` in the correct order and propagating their errors. If, at any time, any of the methods raise ``ValidationError``, the validation stops and that error is raised. This method returns the clean data, which is then inserted into the ``cleaned_data`` dictionary of the form."
msgstr ""

#: ../../ref/forms/validation.txt:56
# 70e4cb33972f40df97e6432ca6c9bdb1
msgid "The ``clean_<fieldname>()`` method in a form subclass -- where ``<fieldname>`` is replaced with the name of the form field attribute. This method does any cleaning that is specific to that particular attribute, unrelated to the type of field that it is. This method is not passed any parameters. You will need to look up the value of the field in ``self.cleaned_data`` and remember that it will be a Python object at this point, not the original string submitted in the form (it will be in ``cleaned_data`` because the general field ``clean()`` method, above, has already cleaned the data once)."
msgstr ""

#: ../../ref/forms/validation.txt:66
# 7c96579bbfe746078cf12a485c6e0d89
msgid "For example, if you wanted to validate that the contents of a ``CharField`` called ``serialnumber`` was unique, ``clean_serialnumber()`` would be the right place to do this. You don't need a specific field (it's just a ``CharField``), but you want a formfield-specific piece of validation and, possibly, cleaning/normalizing the data."
msgstr ""

#: ../../ref/forms/validation.txt:73
# 04324842e7354dc1943dd85e4bd8dbf5
msgid "This method should return the cleaned value obtained from cleaned_data, regardless of whether it changed anything or not."
msgstr ""

#: ../../ref/forms/validation.txt:76
# 990d2299d0fe40019bc8afaf7b8a3fdc
msgid "The Form subclass's ``clean()`` method. This method can perform any validation that requires access to multiple fields from the form at once. This is where you might put in things to check that if field ``A`` is supplied, field ``B`` must contain a valid email address and the like. The data that this method returns is the final ``cleaned_data`` attribute for the form, so don't forget to return the full list of cleaned data if you override this method (by default, ``Form.clean()`` just returns ``self.cleaned_data``)."
msgstr ""

#: ../../ref/forms/validation.txt:85
# 9c472c447eaf424eb31e638d00134f26
msgid "Note that any errors raised by your ``Form.clean()`` override will not be associated with any field in particular. They go into a special \"field\" (called ``__all__``), which you can access via the ``non_field_errors()`` method if you need to. If you want to attach errors to a specific field in the form, you will need to access the ``_errors`` attribute on the form, which is `described later`_."
msgstr ""

#: ../../ref/forms/validation.txt:92
# eb80c438812d4809ac0686fc18c2dd60
msgid "Also note that there are special considerations when overriding the ``clean()`` method of a ``ModelForm`` subclass. (see the :ref:`ModelForm documentation <overriding-modelform-clean-method>` for more information)"
msgstr ""

#: ../../ref/forms/validation.txt:97
# e007796848aa49c8be00faf558579353
msgid "These methods are run in the order given above, one field at a time.  That is, for each field in the form (in the order they are declared in the form definition), the ``Field.clean()`` method (or its override) is run, then ``clean_<fieldname>()``. Finally, once those two methods are run for every field, the ``Form.clean()`` method, or its override, is executed."
msgstr ""

#: ../../ref/forms/validation.txt:103
# 0943f2383754479482334aac9a4433c5
msgid "Examples of each of these methods are provided below."
msgstr ""

#: ../../ref/forms/validation.txt:105
# 38b2bc5a30a64ebca1831f410a3a8220
msgid "As mentioned, any of these methods can raise a ``ValidationError``. For any field, if the ``Field.clean()`` method raises a ``ValidationError``, any field-specific cleaning method is not called. However, the cleaning methods for all remaining fields are still executed."
msgstr ""

#: ../../ref/forms/validation.txt:110
# b53ffcfb1b6a4fb397fa49ced7353106
msgid "The ``clean()`` method for the ``Form`` class or subclass is always run. If that method raises a ``ValidationError``, ``cleaned_data`` will be an empty dictionary."
msgstr ""

#: ../../ref/forms/validation.txt:114
# f8733c3e769a41feacb39c1370ddd20f
msgid "The previous paragraph means that if you are overriding ``Form.clean()``, you should iterate through ``self.cleaned_data.items()``, possibly considering the ``_errors`` dictionary attribute on the form as well. In this way, you will already know which fields have passed their individual validation requirements."
msgstr ""

#: ../../ref/forms/validation.txt:122
# 280c9a65628b4b2484476a9b000056e7
msgid "Form subclasses and modifying field errors"
msgstr ""

#: ../../ref/forms/validation.txt:124
# d93b0cecdd454111a6b77d94da82ae78
msgid "Sometimes, in a form's ``clean()`` method, you will want to add an error message to a particular field in the form. This won't always be appropriate and the more typical situation is to raise a ``ValidationError`` from ``Form.clean()``, which is turned into a form-wide error that is available through the ``Form.non_field_errors()`` method."
msgstr ""

#: ../../ref/forms/validation.txt:130
# 9fd36a6ffb3d43a3abfcd13a75022537
msgid "When you really do need to attach the error to a particular field, you should store (or amend) a key in the ``Form._errors`` attribute. This attribute is an instance of a ``django.forms.util.ErrorDict`` class. Essentially, though, it's just a dictionary. There is a key in the dictionary for each field in the form that has an error. Each value in the dictionary is a ``django.forms.util.ErrorList`` instance, which is a list that knows how to display itself in different ways. So you can treat ``_errors`` as a dictionary mapping field names to lists."
msgstr ""

#: ../../ref/forms/validation.txt:139
# a6e554ea335d40429b9849ac914a4484
msgid "If you want to add a new error to a particular field, you should check whether the key already exists in ``self._errors`` or not. If not, create a new entry for the given key, holding an empty ``ErrorList`` instance. In either case, you can then append your error message to the list for the field name in question and it will be displayed when the form is displayed."
msgstr ""

#: ../../ref/forms/validation.txt:145
# 5c162c08b8ce46648d62f6bcfdbca3ee
msgid "There is an example of modifying ``self._errors`` in the following section."
msgstr ""

#: ../../ref/forms/validation.txt:149
# 04f5bee7548d4d938f7dfb73c5b07d63
msgid "You may be wondering why is this attribute called ``_errors`` and not ``errors``. Normal Python practice is to prefix a name with an underscore if it's not for external usage. In this case, you are subclassing the ``Form`` class, so you are essentially writing new internals. In effect, you are given permission to access some of the internals of ``Form``."
msgstr ""

#: ../../ref/forms/validation.txt:155
# a7c3e981f5b44a82815784b9b206b8ae
msgid "Of course, any code outside your form should never access ``_errors`` directly. The data is available to external code through the ``errors`` property, which populates ``_errors`` before returning it)."
msgstr ""

#: ../../ref/forms/validation.txt:159
# 95532515b88f434db1c2144123b6c75a
msgid "Another reason is purely historical: the attribute has been called ``_errors`` since the early days of the forms module and changing it now (particularly since ``errors`` is used for the read-only property name) would be inconvenient for a number of reasons. You can use whichever explanation makes you feel more comfortable. The result is the same."
msgstr ""

#: ../../ref/forms/validation.txt:166
# f637855d8bfa4f9e8708bde298c63504
msgid "Using validation in practice"
msgstr ""

#: ../../ref/forms/validation.txt:168
# ad50cb81c0324808a8215e042789ff6f
msgid "The previous sections explained how validation works in general for forms. Since it can sometimes be easier to put things into place by seeing each feature in use, here are a series of small examples that use each of the previous features."
msgstr ""

#: ../../ref/forms/validation.txt:176
# 3069c72969c84d84bd5ee25a0491e2a4
msgid "Using validators"
msgstr ""

#: ../../ref/forms/validation.txt:178
# ebfeb829356e405988c8462c1ce537a6
msgid "Django's form (and model) fields support use of simple utility functions and classes known as validators. These can be passed to a field's constructor, via the field's ``validators`` argument, or defined on the Field class itself with the ``default_validators`` attribute."
msgstr ""

#: ../../ref/forms/validation.txt:183
# 2f65b6ff1c2e4f4ab996e21d4e585558
msgid "Simple validators can be used to validate values inside the field, let's have a look at Django's ``EmailField``::"
msgstr ""

#: ../../ref/forms/validation.txt:192
# 0cd9efa1097f43b29f4e0f4f9eee73f1
msgid "As you can see, ``EmailField`` is just a ``CharField`` with customized error message and a validator that validates email addresses. This can also be done on field definition so::"
msgstr ""

#: ../../ref/forms/validation.txt:198
# 1c296224715743229f24b174d55ba9f5
msgid "is equivalent to::"
msgstr ""

#: ../../ref/forms/validation.txt:205
# 94003849aae140a5ac68b1f431cf3f8d
msgid "Form field default cleaning"
msgstr ""

#: ../../ref/forms/validation.txt:207
# d9c346394f3348dc8ef33a9e5ffd07d8
msgid "Let's firstly create a custom form field that validates its input is a string containing comma-separated email addresses. The full class looks like this::"
msgstr ""

#: ../../ref/forms/validation.txt:231
# a42d60a6764e4049b128dff01ad8dd99
msgid "Every form that uses this field will have these methods run before anything else can be done with the field's data. This is cleaning that is specific to this type of field, regardless of how it is subsequently used."
msgstr ""

#: ../../ref/forms/validation.txt:235
# 75f597524c364652ba687fe29455b351
msgid "Let's create a simple ``ContactForm`` to demonstrate how you'd use this field::"
msgstr ""

#: ../../ref/forms/validation.txt:245
# 4ae9d8a6b5e8477fb84cd590c2dc86b9
msgid "Simply use ``MultiEmailField`` like any other form field. When the ``is_valid()`` method is called on the form, the ``MultiEmailField.clean()`` method will be run as part of the cleaning process and it will, in turn, call the custom ``to_python()`` and ``validate()`` methods."
msgstr ""

#: ../../ref/forms/validation.txt:251
# 8c041d5c5db2462495721ce983d12b37
msgid "Cleaning a specific field attribute"
msgstr ""

#: ../../ref/forms/validation.txt:253
# 564c9b42d72f4bb69ed98578c863067a
msgid "Continuing on from the previous example, suppose that in our ``ContactForm``, we want to make sure that the ``recipients`` field always contains the address ``\"fred@example.com\"``. This is validation that is specific to our form, so we don't want to put it into the general ``MultiEmailField`` class. Instead, we write a cleaning method that operates on the ``recipients`` field, like so::"
msgstr ""

#: ../../ref/forms/validation.txt:273
# 64004c8dbdc1499d875210b6cd5f2bff
msgid "Cleaning and validating fields that depend on each other"
msgstr ""

#: ../../ref/forms/validation.txt:275
# 0f732e394b8b485e97ddbf1a4f792d0f
msgid "Suppose we add another requirement to our contact form: if the ``cc_myself`` field is ``True``, the ``subject`` must contain the word ``\"help\"``. We are performing validation on more than one field at a time, so the form's ``clean()`` method is a good spot to do this. Notice that we are talking about the ``clean()`` method on the form here, whereas earlier we were writing a ``clean()`` method on a field. It's important to keep the field and form difference clear when working out where to validate things. Fields are single data points, forms are a collection of fields."
msgstr ""

#: ../../ref/forms/validation.txt:284
# 99186bd5b41f4c0083da42e2dd8a456f
msgid "By the time the form's ``clean()`` method is called, all the individual field clean methods will have been run (the previous two sections), so ``self.cleaned_data`` will be populated with any data that has survived so far. So you also need to remember to allow for the fact that the fields you are wanting to validate might not have survived the initial individual field checks."
msgstr ""

#: ../../ref/forms/validation.txt:291
# 112a40afa81d4e51b670f71713dcc882
msgid "There are two ways to report any errors from this step. Probably the most common method is to display the error at the top of the form. To create such an error, you can raise a ``ValidationError`` from the ``clean()`` method. For example::"
msgstr ""

#: ../../ref/forms/validation.txt:314
# aaba1867f7e94e83bcd93e58e72c4dac
msgid "In this code, if the validation error is raised, the form will display an error message at the top of the form (normally) describing the problem."
msgstr ""

#: ../../ref/forms/validation.txt:317
# 84b865d57ec241cc8d8423825c451c62
msgid "Note that the call to ``super(ContactForm, self).clean()`` in the example code ensures that any validation logic in parent classes is maintained."
msgstr ""

#: ../../ref/forms/validation.txt:320
# 6243ecf785974d7bb8712c0d79291d3a
msgid "The second approach might involve assigning the error message to one of the fields. In this case, let's assign an error message to both the \"subject\" and \"cc_myself\" rows in the form display. Be careful when doing this in practice, since it can lead to confusing form output. We're showing what is possible here and leaving it up to you and your designers to work out what works effectively in your particular situation. Our new code (replacing the previous sample) looks like this::"
msgstr ""

#: ../../ref/forms/validation.txt:352
# 68a24107ee5246f39c94c9c5ec0e2a0e
msgid "As you can see, this approach requires a bit more effort, not withstanding the extra design effort to create a sensible form display. The details are worth noting, however. Firstly, earlier we mentioned that you might need to check if the field name keys already exist in the ``_errors`` dictionary. In this case, since we know the fields exist in ``self.cleaned_data``, they must have been valid when cleaned as individual fields, so there will be no corresponding entries in ``_errors``."
msgstr ""

#: ../../ref/forms/validation.txt:360
# db69ba98be834f2ba215d154510baf17
msgid "Secondly, once we have decided that the combined data in the two fields we are considering aren't valid, we must remember to remove them from the ``cleaned_data``."
msgstr ""

#: ../../ref/forms/validation.txt:366
# 8529a4f0bf21407ab8f4cae3051a33f9
msgid "Django used to remove the ``cleaned_data`` attribute entirely if there were any errors in the form. Since version 1.5, ``cleaned_data`` is present even if the form doesn't validate, but it contains only field values that did validate."
msgstr ""

#: ../../ref/forms/widgets.txt:3
# 695b93a96d894055b298f4badd35ce58
msgid "Widgets"
msgstr ""

#: ../../ref/forms/widgets.txt:10
# bbabdef7e09a438c8df9d9f42cdd8467
msgid "A widget is Django's representation of a HTML input element. The widget handles the rendering of the HTML, and the extraction of data from a GET/POST dictionary that corresponds to the widget."
msgstr ""

#: ../../ref/forms/widgets.txt:16
# 6ebc1f6778ea4dde8b6a90e37a6b3f1d
msgid "Widgets should not be confused with the :doc:`form fields </ref/forms/fields>`. Form fields deal with the logic of input validation and are used directly in templates. Widgets deal with rendering of HTML form input elements on the web page and extraction of raw submitted data. However, widgets do need to be :ref:`assigned <widget-to-field>` to form fields."
msgstr ""

#: ../../ref/forms/widgets.txt:25
# 148396bb652548e4a0d4170b303338a0
msgid "Specifying widgets"
msgstr ""

#: ../../ref/forms/widgets.txt:27
# b5c5e930ee1f41d9b44232ec828eed78
msgid "Whenever you specify a field on a form, Django will use a default widget that is appropriate to the type of data that is to be displayed. To find which widget is used on which field, see the documentation about :ref:`built-in fields`."
msgstr ""

#: ../../ref/forms/widgets.txt:32
# bdc7c624b8054495b1ba51a3def157b1
msgid "However, if you want to use a different widget for a field, you can just use the :attr:`~Field.widget` argument on the field definition. For example::"
msgstr ""

#: ../../ref/forms/widgets.txt:43
# 8e85749a740847e3935f05d30ff947eb
msgid "This would specify a form with a comment that uses a larger :class:`Textarea` widget, rather than the default :class:`TextInput` widget."
msgstr ""

#: ../../ref/forms/widgets.txt:48
# 720176a6299348968dcc6588872cc9ab
msgid "Setting arguments for widgets"
msgstr ""

#: ../../ref/forms/widgets.txt:50
# 0e709de41a4a46d08b17cae7dc430786
msgid "Many widgets have optional extra arguments; they can be set when defining the widget on the field. In the following example, the :attr:`~django.forms.extras.widgets.SelectDateWidget.years` attribute is set for a :class:`~django.forms.extras.widgets.SelectDateWidget`::"
msgstr ""

#: ../../ref/forms/widgets.txt:69
# d717dbce2da242b9abf1a62e0caeaf59
msgid "See the :ref:`built-in widgets` for more information about which widgets are available and which arguments they accept."
msgstr ""

#: ../../ref/forms/widgets.txt:74
# cd40c43f31444737961ac0e6b862acf9
msgid "Widgets inheriting from the Select widget"
msgstr ""

#: ../../ref/forms/widgets.txt:76
# 89dad96cf80944aba014d389d7f3719f
msgid "Widgets inheriting from the :class:`Select` widget deal with choices. They present the user with a list of options to choose from. The different widgets present this choice differently; the :class:`Select` widget itself uses a ``<select>`` HTML list representation, while :class:`RadioSelect` uses radio buttons."
msgstr ""

#: ../../ref/forms/widgets.txt:82
# 8a90b03bf7a4498eba96a9870ba3b10d
msgid ":class:`Select` widgets are used by default on :class:`ChoiceField` fields. The choices displayed on the widget are inherited from the :class:`ChoiceField` and changing :attr:`ChoiceField.choices` will update :attr:`Select.choices`. For example::"
msgstr ""

#: ../../ref/forms/widgets.txt:100
# 68b510caed764ad9975faf368984de1f
msgid "Widgets which offer a :attr:`~Select.choices` attribute can however be used with fields which are not based on choice -- such as a :class:`CharField` -- but it is recommended to use a :class:`ChoiceField`-based field when the choices are inherent to the model and not just the representational widget."
msgstr ""

#: ../../ref/forms/widgets.txt:106
# ad785088b09543058b0b1831345b52aa
msgid "Customizing widget instances"
msgstr ""

#: ../../ref/forms/widgets.txt:108
# 2c3e3afe48704032ab6597dd1cd00881
msgid "When Django renders a widget as HTML, it only renders very minimal markup - Django doesn't add class names, or any other widget-specific attributes. This means, for example, that all :class:`TextInput` widgets will appear the same on your Web pages."
msgstr ""

#: ../../ref/forms/widgets.txt:113
# dc8b45e03264434a9ae2dc088acc98cd
msgid "There are two ways to customize widgets: :ref:`per widget instance <styling-widget-instances>` and :ref:`per widget class <styling-widget-classes>`."
msgstr ""

#: ../../ref/forms/widgets.txt:119
# 626af42fe13645548faf335759ae6687
msgid "Styling widget instances"
msgstr ""

#: ../../ref/forms/widgets.txt:121
# 375b0fe8877744c084d75edaa396b933
msgid "If you want to make one widget instance look different from another, you will need to specify additional attributes at the time when the widget object is instantiated and assigned to a form field (and perhaps add some rules to your CSS files)."
msgstr ""

#: ../../ref/forms/widgets.txt:126
# b7887b69346f45e48c67c6a017d2a44e
msgid "For example, take the following simple form::"
msgstr ""

#: ../../ref/forms/widgets.txt:135
# 1a87def52bb7469488534bbc151824fc
msgid "This form will include three default :class:`TextInput` widgets, with default rendering -- no CSS class, no extra attributes. This means that the input boxes provided for each widget will be rendered exactly the same::"
msgstr ""

#: ../../ref/forms/widgets.txt:145
# 8047f63901df49fbb52897890e1735af
msgid "On a real Web page, you probably don't want every widget to look the same. You might want a larger input element for the comment, and you might want the 'name' widget to have some special CSS class. It is also possible to specify the 'type' attribute to take advantage of the new HTML5 input types.  To do this, you use the :attr:`Widget.attrs` argument when creating the widget::"
msgstr ""

#: ../../ref/forms/widgets.txt:158
# f2061031eecb4cc5a74df268f591dc33
msgid "Django will then include the extra attributes in the rendered output:"
msgstr ""

#: ../../ref/forms/widgets.txt:169
# 2f431cd72ddb407589db9e70c9063239
msgid "Styling widget classes"
msgstr ""

#: ../../ref/forms/widgets.txt:171
# 9e6a87a5ea4e4c109137c6d8cb53ee62
msgid "With widgets, it is possible to add media (``css`` and ``javascript``) and more deeply customize their appearance and behavior."
msgstr ""

#: ../../ref/forms/widgets.txt:174
# da043836984740ca88a500bf8d6d6524
msgid "In a nutshell, you will need to subclass the widget and either :ref:`define a class \"Media\" <media-as-a-static-definition>` as a member of the subclass, or :ref:`create a property \"media\" <dynamic-property>`, returning an instance of that class."
msgstr ""

#: ../../ref/forms/widgets.txt:179
# bdc878649ea445feaaeadf4475cf9ae1
msgid "These methods involve somewhat advanced Python programming and are described in detail in the :doc:`Form Media </topics/forms/media>` topic guide."
msgstr ""

#: ../../ref/forms/widgets.txt:185
# a91c68020a4f4ae79f58bdb5a8cfc52b
msgid "Base Widget classes"
msgstr ""

#: ../../ref/forms/widgets.txt:187
# 4b70e59b918247d88b2a7058460a7d45
msgid "Base widget classes :class:`Widget` and :class:`MultiWidget` are subclassed by all the :ref:`built-in widgets <built-in widgets>` and may serve as a foundation for custom widgets."
msgstr ""

#: ../../ref/forms/widgets.txt:193
# 3d0272f264514ab39c74cfffd5a96a3c
msgid "This abstract class cannot be rendered, but provides the basic attribute :attr:`~Widget.attrs`.  You may also implement or override the :meth:`~Widget.render()` method on custom widgets."
msgstr ""

#: ../../ref/forms/widgets.txt:199
# f8eb3d4c344c414ba2754ab4e13d77c6
msgid "A dictionary containing HTML attributes to be set on the rendered widget."
msgstr ""

#: ../../ref/forms/widgets.txt:210
# e918bac44f774eda96ff633374e3aade
msgid "Returns HTML for the widget, as a Unicode string. This method must be implemented by the subclass, otherwise ``NotImplementedError`` will be raised."
msgstr ""

#: ../../ref/forms/widgets.txt:214
# dbca81482fcd45bea83db8d0d2c3d30d
msgid "The 'value' given is not guaranteed to be valid input, therefore subclass implementations should program defensively."
msgstr ""

#: ../../ref/forms/widgets.txt:219
# afbc3e3de9d3427e9f6eecca32cc1fa3
msgid "Given a dictionary of data and this widget's name, returns the value of this widget. Returns ``None`` if a value wasn't provided."
msgstr ""

#: ../../ref/forms/widgets.txt:224
# 8571225937d1480ea4450bc5b3a06139
msgid "A widget that is composed of multiple widgets. :class:`~django.forms.MultiWidget` works hand in hand with the :class:`~django.forms.MultiValueField`."
msgstr ""

#: ../../ref/forms/widgets.txt:228
# 80698e081ebe4acabac4eed625a4b917
msgid ":class:`MultiWidget` has one required argument:"
msgstr ""

#: ../../ref/forms/widgets.txt:232
# f46b79d3369848588552e291953404e4
msgid "An iterable containing the widgets needed."
msgstr ""

#: ../../ref/forms/widgets.txt:234
# 612ea562de08493e90a5ce009db907c2
msgid "And one required method:"
msgstr ""

#: ../../ref/forms/widgets.txt:238
# 1570b9777f6e47078ac29118085cc127
msgid "This method takes a single \"compressed\" value from the field and returns a list of \"decompressed\" values. The input value can be assumed valid, but not necessarily non-empty."
msgstr ""

#: ../../ref/forms/widgets.txt:242
# d9d7b582b2664f4385fcc6ac6b12f9b1
msgid "This method **must be implemented** by the subclass, and since the value may be empty, the implementation must be defensive."
msgstr ""

#: ../../ref/forms/widgets.txt:245
# f12cf2efcf9a48948f216ee8110995ec
msgid "The rationale behind \"decompression\" is that it is necessary to \"split\" the combined value of the form field into the values for each widget."
msgstr ""

#: ../../ref/forms/widgets.txt:248
# ad75fcabecda46b7af12040a60c88416
msgid "An example of this is how :class:`SplitDateTimeWidget` turns a :class:`~datetime.datetime` value into a list with date and time split into two separate values::"
msgstr ""

#: ../../ref/forms/widgets.txt:263
# 3837832c48074757b95959731e48d551
msgid "Note that :class:`~django.forms.MultiValueField` has a complementary method :meth:`~django.forms.MultiValueField.compress` with the opposite responsibility - to combine cleaned values of all member fields into one."
msgstr ""

#: ../../ref/forms/widgets.txt:268
# 3bea7838725c4918917260cc880fd2b5
msgid "Other methods that may be useful to override include:"
msgstr ""

#: ../../ref/forms/widgets.txt:272
# 8ce1dc5e956d4c2bbf19c6105fc88c81
msgid "Argument ``value`` is handled differently in this method from the subclasses of :class:`~Widget` because it has to figure out how to split a single value for display in multiple widgets."
msgstr ""

#: ../../ref/forms/widgets.txt:276
# af1b108718e043e6a6aac21a004747d7
msgid "The ``value`` argument used when rendering can be one of two things:"
msgstr ""

#: ../../ref/forms/widgets.txt:278
# 976cdccaf35e4f13999c3ccf4ad1f34a
msgid "A ``list``."
msgstr ""

#: ../../ref/forms/widgets.txt:279
# 044d5920ec9a4d9ba9e930cb03aa23a6
msgid "A single value (e.g., a string) that is the \"compressed\" representation of a ``list`` of values."
msgstr ""

#: ../../ref/forms/widgets.txt:282
# 0a62d7c55e1947b88ada142db8a0e087
msgid "If ``value`` is a list, the output of :meth:`~MultiWidget.render` will be a concatenation of rendered child widgets. If ``value`` is not a list, it will first be processed by the method :meth:`~MultiWidget.decompress()` to create the list and then rendered."
msgstr ""

#: ../../ref/forms/widgets.txt:287
# 171f57f311c84ee4bd084ae62b6006ac
msgid "When ``render()`` executes its HTML rendering, each value in the list is rendered with the corresponding widget -- the first value is rendered in the first widget, the second value is rendered in the second widget, etc."
msgstr ""

#: ../../ref/forms/widgets.txt:292
# 5f054e33ee86453db57e9f2c0a48e984
msgid "Unlike in the single value widgets, method :meth:`~MultiWidget.render` need not be implemented in the subclasses."
msgstr ""

#: ../../ref/forms/widgets.txt:297
# 04e791947bc04d83906634f15930a36f
msgid "Given a list of rendered widgets (as strings), returns a Unicode string representing the HTML for the whole lot."
msgstr ""

#: ../../ref/forms/widgets.txt:300
# 410fb61d601f4c008cb6e2e6ba44069c
msgid "This hook allows you to format the HTML design of the widgets any way you'd like."
msgstr ""

#: ../../ref/forms/widgets.txt:303
# 996b3e184a3b4ea897ecc13bd42b0e9c
msgid "Here's an example widget which subclasses :class:`MultiWidget` to display a date with the day, month, and year in different select boxes. This widget is intended to be used with a :class:`~django.forms.DateField` rather than a :class:`~django.forms.MultiValueField`, thus we have implemented :meth:`~Widget.value_from_datadict`::"
msgstr ""

#: ../../ref/forms/widgets.txt:344
# 97b6feffb8f94996b9391f05772f935f
msgid "The constructor creates several :class:`Select` widgets in a tuple. The ``super`` class uses this tuple to setup the widget."
msgstr ""

#: ../../ref/forms/widgets.txt:347
# 960a51141c35435ab9dc22264313ec7e
msgid "The :meth:`~MultiWidget.format_output` method is fairly vanilla here (in fact, it's the same as what's been implemented as the default for ``MultiWidget``), but the idea is that you could add custom HTML between the widgets should you wish."
msgstr ""

#: ../../ref/forms/widgets.txt:352
# 1ca727f899cb4d6392b99eb6e561b2a0
msgid "The required method :meth:`~MultiWidget.decompress` breaks up a ``datetime.date`` value into the day, month, and year values corresponding to each widget. Note how the method handles the case where ``value`` is ``None``."
msgstr ""

#: ../../ref/forms/widgets.txt:357
# 73e25b68e5834f56bfe7eb4d2b981ad3
msgid "The default implementation of :meth:`~Widget.value_from_datadict` returns a list of values corresponding to each ``Widget``.  This is appropriate when using a ``MultiWidget`` with a :class:`~django.forms.MultiValueField`, but since we want to use this widget with a :class:`~django.forms.DateField` which takes a single value, we have overridden this method to combine the data of all the subwidgets into a ``datetime.date``. The method extracts data from the ``POST`` dictionary and constructs and validates the date. If it is valid, we return the string, otherwise, we return an empty string which will cause ``form.is_valid`` to return ``False``."
msgstr ""

#: ../../ref/forms/widgets.txt:370
# 2f1096ed951d46ef9620f54baa8bcade
msgid "Built-in widgets"
msgstr ""

#: ../../ref/forms/widgets.txt:372
# 5dd52699b12a49759e82e7697c82b605
msgid "Django provides a representation of all the basic HTML widgets, plus some commonly used groups of widgets in the ``django.forms.widgets`` module, including :ref:`the input of text <text-widgets>`, :ref:`various checkboxes and selectors <selector-widgets>`, :ref:`uploading files <file-upload-widgets>`, and :ref:`handling of multi-valued input <composite-widgets>`."
msgstr ""

#: ../../ref/forms/widgets.txt:381
# 206f781b3c2e4789a767fd0a8cbd2689
msgid "Widgets handling input of text"
msgstr ""

#: ../../ref/forms/widgets.txt:383
# 76de99f9c38c443cb78dbb25d368a9c1
msgid "These widgets make use of the HTML elements ``input`` and ``textarea``."
msgstr ""

#: ../../ref/forms/widgets.txt:386
# c1fb4d42c59947739ce413d4f1babf2a
msgid "``TextInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:390
# 6a61e67151a94374b2d776376f232723
msgid "Text input: ``<input type='text' ...>``"
msgstr ""

#: ../../ref/forms/widgets.txt:393
# c16eeb26a25b4e9c9bc2f9f391e778d5
msgid "``PasswordInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:397
# 201b4de654dd46879e2df3672ebd6a90
msgid "Password input: ``<input type='password' ...>``"
msgstr ""

#: ../../ref/forms/widgets.txt:403
# 8f31c1b76e5f457ea9319c299fb09f26
msgid "Determines whether the widget will have a value filled in when the form is re-displayed after a validation error (default is ``False``)."
msgstr ""

#: ../../ref/forms/widgets.txt:407
# 6bd88c2eab5c436a85eb0121127f589d
msgid "``HiddenInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:411
# e16417eb28da4e2d98bc672673ecf96a
msgid "Hidden input: ``<input type='hidden' ...>``"
msgstr ""

#: ../../ref/forms/widgets.txt:413
# 890cfc82f79d446f82176758c9fa6e6a
msgid "Note that there also is a :class:`MultipleHiddenInput` widget that encapsulates a set of hidden input elements."
msgstr ""

#: ../../ref/forms/widgets.txt:417
# b1f155dbbbf84492a7a7e4268998fb10
msgid "``DateInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:421
# 650f4b8a51dd4d57a2f3faa378b657ca
msgid "Date input as a simple text box: ``<input type='text' ...>``"
msgstr ""

#: ../../ref/forms/widgets.txt:423
#: ../../ref/forms/widgets.txt:440
#: ../../ref/forms/widgets.txt:457
# 9834443ed44a490e8d1fc73de387c2ad
# 0f0cb3184fca456bba07f472dd86c820
# 5129ce33aa1e4cbdb9585efa84a4a8fc
msgid "Takes same arguments as :class:`TextInput`, with one more optional argument:"
msgstr ""

#: ../../ref/forms/widgets.txt:427
#: ../../ref/forms/widgets.txt:444
#: ../../ref/forms/widgets.txt:461
# ae71821716cc45ab919e4a280641dff1
# 9c114df950b943eaa037cbf070486068
# 4f5e3bad13af47febe825ed0ba2953de
msgid "The format in which this field's initial value will be displayed."
msgstr ""

#: ../../ref/forms/widgets.txt:429
# 8f14ce005ee84918ad71fc96090aa0ac
msgid "If no ``format`` argument is provided, the default format is the first format found in :setting:`DATE_INPUT_FORMATS` and respects :ref:`format-localization`."
msgstr ""

#: ../../ref/forms/widgets.txt:434
# 92771320ae97410c9c4f8008a9b7103c
msgid "``DateTimeInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:438
# 683154958ac044a58227be19abb7fc54
msgid "Date/time input as a simple text box: ``<input type='text' ...>``"
msgstr ""

#: ../../ref/forms/widgets.txt:446
# e660cc2779f24a49878aea5335daa6b3
msgid "If no ``format`` argument is provided, the default format is the first format found in :setting:`DATETIME_INPUT_FORMATS` and respects :ref:`format-localization`."
msgstr ""

#: ../../ref/forms/widgets.txt:451
# 68602755357b4b17a5af8aae46e68c22
msgid "``TimeInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:455
# 614fb954b2c8433dabe0b8913a2e787c
msgid "Time input as a simple text box: ``<input type='text' ...>``"
msgstr ""

#: ../../ref/forms/widgets.txt:463
# 9f6f837b7aee4f34ae3ae4bad3017816
msgid "If no ``format`` argument is provided, the default format is the first format found in :setting:`TIME_INPUT_FORMATS` and respects :ref:`format-localization`."
msgstr ""

#: ../../ref/forms/widgets.txt:468
# 7075aa65779c402fa9b0354259992d4f
msgid "``Textarea``"
msgstr ""

#: ../../ref/forms/widgets.txt:472
# 706ed666195a4692b9c26b500465ee37
msgid "Text area: ``<textarea>...</textarea>``"
msgstr ""

#: ../../ref/forms/widgets.txt:477
# d8b4317c727246ecbd82871ac462b0a4
msgid "Selector and checkbox widgets"
msgstr ""

#: ../../ref/forms/widgets.txt:480
# dfedfc9f159948b883e193e82c322601
msgid "``CheckboxInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:484
# 49d298731b834b79b491021fd107a7e3
msgid "Checkbox: ``<input type='checkbox' ...>``"
msgstr ""

#: ../../ref/forms/widgets.txt:490
# 6df9a7e119d540109918c76269687f8d
msgid "A callable that takes the value of the CheckBoxInput and returns ``True`` if the checkbox should be checked for that value."
msgstr ""

#: ../../ref/forms/widgets.txt:498
# b3bcf090f3534288a4a664415cbe22b4
msgid "``Select``"
msgstr ""

#: ../../ref/forms/widgets.txt:502
# 4746372582424f49a6bc27b58176daec
msgid "Select widget: ``<select><option ...>...</select>``"
msgstr ""

#: ../../ref/forms/widgets.txt:506
#: ../../ref/forms/widgets.txt:660
# a383e92e41ae4c2fa5d847182d531c21
# 5fd10d0bcb4144e79c9a061578ef1f17
msgid "This attribute is optional when the form field does not have a ``choices`` attribute. If it does, it will override anything you set here when the attribute is updated on the :class:`Field`."
msgstr ""

#: ../../ref/forms/widgets.txt:511
# 739cb18c6a4f4f6aa060b0a2e8c71200
msgid "``NullBooleanSelect``"
msgstr ""

#: ../../ref/forms/widgets.txt:515
# 1ca7b54feecc4acc8e9745b2f357656f
msgid "Select widget with options 'Unknown', 'Yes' and 'No'"
msgstr ""

#: ../../ref/forms/widgets.txt:518
# 72606d7122524c83951009e1b7915db1
msgid "``SelectMultiple``"
msgstr ""

#: ../../ref/forms/widgets.txt:522
# e611039b21684f7f8e0e7b02bf117b83
msgid "Similar to :class:`Select`, but allows multiple selection: ``<select multiple='multiple'>...</select>``"
msgstr ""

#: ../../ref/forms/widgets.txt:526
# 0530375eb6fc4bc2978d551210318617
msgid "``RadioSelect``"
msgstr ""

#: ../../ref/forms/widgets.txt:530
# e4fa65485ba44be1ae6e9ed2b25f5ed1
msgid "Similar to :class:`Select`, but rendered as a list of radio buttons within ``<li>`` tags:"
msgstr ""

#: ../../ref/forms/widgets.txt:542
# 4cf346db31664c808dd420e24f4fbfc4
msgid "For more granular control over the generated markup, you can loop over the radio buttons in the template. Assuming a form ``myform`` with a field ``beatles`` that uses a ``RadioSelect`` as its widget:"
msgstr ""

#: ../../ref/forms/widgets.txt:554
# fbcdf56ac70946b68b5830e297d63067
msgid "This would generate the following HTML:"
msgstr ""

#: ../../ref/forms/widgets.txt:571
# 2c95de22107b4c749304d59098afac50
msgid "That included the ``<label>`` tags. To get more granular, you can use each radio button's ``tag`` and ``choice_label`` attributes. For example, this template..."
msgstr ""

#: ../../ref/forms/widgets.txt:583
# 07b7c8c4126c4ba6b03f03538c27b38f
msgid "...will result in the following HTML:"
msgstr ""

#: ../../ref/forms/widgets.txt:604
# 48ae96bc3f594b61940754cf511374d2
msgid "If you decide not to loop over the radio buttons -- e.g., if your template simply includes ``{{ myform.beatles }}`` -- they'll be output in a ``<ul>`` with ``<li>`` tags, as above."
msgstr ""

#: ../../ref/forms/widgets.txt:608
# a76ad6018ece44d0a17bb2f336c8ab89
msgid "``CheckboxSelectMultiple``"
msgstr ""

#: ../../ref/forms/widgets.txt:612
# fd417764bcb64b82be9e07b964c0e9d2
msgid "Similar to :class:`SelectMultiple`, but rendered as a list of check buttons:"
msgstr ""

#: ../../ref/forms/widgets.txt:625
# 17f2b776de824fcdb1c773b3674e62cc
msgid "File upload widgets"
msgstr ""

#: ../../ref/forms/widgets.txt:628
# 4d09b5b23f324225b5677402fee9dab7
msgid "``FileInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:632
# c06bcf9e4b204b1fb2b77125e737a1e6
msgid "File upload input: ``<input type='file' ...>``"
msgstr ""

#: ../../ref/forms/widgets.txt:635
# 7df205dc43b04993a266f1cf406a268e
msgid "``ClearableFileInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:639
# 4fa81a8f0a0747a1ba09dd48b2b39ea4
msgid "File upload input: ``<input type='file' ...>``, with an additional checkbox input to clear the field's value, if the field is not required and has initial data."
msgstr ""

#: ../../ref/forms/widgets.txt:646
# c87b4a3d4e884dc2872ac9365d883e2f
msgid "Composite widgets"
msgstr ""

#: ../../ref/forms/widgets.txt:649
# 6fc90ea856ab4a5d997bb09e99e9b293
msgid "``MultipleHiddenInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:653
# f6a655ededdb4d9dabb3694a7217112b
msgid "Multiple ``<input type='hidden' ...>`` widgets."
msgstr ""

#: ../../ref/forms/widgets.txt:655
# bf15d73651424f3ab1b5a6ec81f0cccc
msgid "A widget that handles multiple hidden widgets for fields that have a list of values."
msgstr ""

#: ../../ref/forms/widgets.txt:665
# eb117ce1a601466f968a4bfab24f61ec
msgid "``SplitDateTimeWidget``"
msgstr ""

#: ../../ref/forms/widgets.txt:669
# 6ce82e8278934fa581978a3ad92bdf2c
msgid "Wrapper (using :class:`MultiWidget`) around two widgets: :class:`DateInput` for the date, and :class:`TimeInput` for the time."
msgstr ""

#: ../../ref/forms/widgets.txt:672
# a9e4e2d1feda442e82e91a8e83837fb7
msgid "``SplitDateTimeWidget`` has two optional attributes:"
msgstr ""

#: ../../ref/forms/widgets.txt:676
# e688d0e830d14738be4f8760b9672b63
msgid "Similar to :attr:`DateInput.format`"
msgstr ""

#: ../../ref/forms/widgets.txt:680
# efd4c8b0c18640e4acb12b9f43604653
msgid "Similar to :attr:`TimeInput.format`"
msgstr ""

#: ../../ref/forms/widgets.txt:683
# 44526d465d05434b97e52734623acf22
msgid "``SplitHiddenDateTimeWidget``"
msgstr ""

#: ../../ref/forms/widgets.txt:687
# 0fbe8a82d6dd47ed870275c934ec6ec1
msgid "Similar to :class:`SplitDateTimeWidget`, but uses :class:`HiddenInput` for both date and time."
msgstr ""

#: ../../ref/forms/widgets.txt:693
# abe86f8be6304c0f89b3cadae6daed9b
msgid "``SelectDateWidget``"
msgstr ""

#: ../../ref/forms/widgets.txt:697
# 24d5fa076820448b9e4d0a8fead8484b
msgid "Wrapper around three :class:`~django.forms.Select` widgets: one each for month, day, and year. Note that this widget lives in a separate file from the standard widgets."
msgstr ""

#: ../../ref/forms/widgets.txt:705
# c528234b6afa4bc8bde703be3b9d32ee
msgid "An optional list/tuple of years to use in the \"year\" select box. The default is a list containing the current year and the next 9 years."
msgstr ""

#: ../../ref/middleware.txt:3
# aa713c42d4f74cf8ade1e6e7b5e7a0d2
msgid "Middleware"
msgstr ""

#: ../../ref/middleware.txt:8
# bf60f106e12a4731b70b83a59384cbdd
msgid "This document explains all middleware components that come with Django. For information on how to use them and how to write your own middleware, see the :doc:`middleware usage guide </topics/http/middleware>`."
msgstr ""

#: ../../ref/middleware.txt:13
# f7911e3968b44ab3be2b2ffc7776daa9
msgid "Available middleware"
msgstr ""

#: ../../ref/middleware.txt:16
# 22c1b4a0ddf3400881f6551502a2db22
msgid "Cache middleware"
msgstr ""

#: ../../ref/middleware.txt:25
# 520f62c286f64429b10be66173422c09
msgid "Enable the site-wide cache. If these are enabled, each Django-powered page will be cached for as long as the :setting:`CACHE_MIDDLEWARE_SECONDS` setting defines. See the :doc:`cache documentation </topics/cache>`."
msgstr ""

#: ../../ref/middleware.txt:30
# b6dcc87d887f4c769bce6ab47fe8ea44
msgid "\"Common\" middleware"
msgstr ""

#: ../../ref/middleware.txt:37
# a8ef57562f3f48a8a4ec7cad9cad0734
msgid "Adds a few conveniences for perfectionists:"
msgstr ""

#: ../../ref/middleware.txt:39
# 3bed8e5257554102b719d96ee4d6efa0
msgid "Forbids access to user agents in the :setting:`DISALLOWED_USER_AGENTS` setting, which should be a list of strings."
msgstr ""

#: ../../ref/middleware.txt:42
# e31a4e91b6344e2e81e3a9c192e964fe
msgid "Performs URL rewriting based on the :setting:`APPEND_SLASH` and :setting:`PREPEND_WWW` settings."
msgstr ""

#: ../../ref/middleware.txt:45
# c85d24de84b54335958df03070410d80
msgid "If :setting:`APPEND_SLASH` is ``True`` and the initial URL doesn't end with a slash, and it is not found in the URLconf, then a new URL is formed by appending a slash at the end. If this new URL is found in the URLconf, then Django redirects the request to this new URL. Otherwise, the initial URL is processed as usual."
msgstr ""

#: ../../ref/middleware.txt:51
# f345b8f71a2e45d184a3ea5c2e94c882
msgid "For example, ``foo.com/bar`` will be redirected to ``foo.com/bar/`` if you don't have a valid URL pattern for ``foo.com/bar`` but *do* have a valid pattern for ``foo.com/bar/``."
msgstr ""

#: ../../ref/middleware.txt:55
# 06edb02d5df34acb975ebce8b1ef46b1
msgid "If :setting:`PREPEND_WWW` is ``True``, URLs that lack a leading \"www.\" will be redirected to the same URL with a leading \"www.\""
msgstr ""

#: ../../ref/middleware.txt:58
# 341d69cac8b147e68c0d186b28049410
msgid "Both of these options are meant to normalize URLs. The philosophy is that each URL should exist in one, and only one, place. Technically a URL ``foo.com/bar`` is distinct from ``foo.com/bar/`` -- a search-engine indexer would treat them as separate URLs -- so it's best practice to normalize URLs."
msgstr ""

#: ../../ref/middleware.txt:64
# e6c067cce69f41bd8fff0cb041902627
msgid "Sends broken link notification emails to :setting:`MANAGERS` if :setting:`SEND_BROKEN_LINK_EMAILS` is set to ``True``."
msgstr ""

#: ../../ref/middleware.txt:67
# ef6e19636dae4ef0ab178ba6018f2d91
msgid "Handles ETags based on the :setting:`USE_ETAGS` setting. If :setting:`USE_ETAGS` is set to ``True``, Django will calculate an ETag for each request by MD5-hashing the page content, and it'll take care of sending ``Not Modified`` responses, if appropriate."
msgstr ""

#: ../../ref/middleware.txt:73
# 135113a506924db98858db8e460fca70
msgid "View metadata middleware"
msgstr ""

#: ../../ref/middleware.txt:80
# d4cdb2c733b148cfbc065e0ea8f73a9b
msgid "Sends custom ``X-View`` HTTP headers to HEAD requests that come from IP addresses defined in the :setting:`INTERNAL_IPS` setting. This is used by Django's :doc:`automatic documentation system </ref/contrib/admin/admindocs>`. Depends on :class:`~django.contrib.auth.middleware.AuthenticationMiddleware`."
msgstr ""

#: ../../ref/middleware.txt:86
# 8103d1cc885f46898aa3c2bfc857f1b6
msgid "GZip middleware"
msgstr ""

#: ../../ref/middleware.txt:93
# 0d334e18676343fba6199ced96bd147d
msgid "Compresses content for browsers that understand GZip compression (all modern browsers)."
msgstr ""

#: ../../ref/middleware.txt:96
# 21d1057da0da4adaad7adab68ea8bea1
msgid "This middleware should be placed before any other middleware that need to read or write the response body so that compression happens afterward."
msgstr ""

#: ../../ref/middleware.txt:99
# 5c737ababff54092af47c5626b3fdad0
msgid "It will NOT compress content if any of the following are true:"
msgstr ""

#: ../../ref/middleware.txt:101
# 6f1e4b1cb4e24311991291651a826e45
msgid "The content body is less than 200 bytes long."
msgstr ""

#: ../../ref/middleware.txt:103
# 3cf1789908f94d4caed3d5b4a352f22b
msgid "The response has already set the ``Content-Encoding`` header."
msgstr ""

#: ../../ref/middleware.txt:105
# d10bebd7d0ca4ba987ec6e6adea8133b
msgid "The request (the browser) hasn't sent an ``Accept-Encoding`` header containing ``gzip``."
msgstr ""

#: ../../ref/middleware.txt:108
# 84ccbca7d5b74de6a7999f83c78b2949
msgid "The request is from Internet Explorer and the ``Content-Type`` header contains ``javascript`` or starts with anything other than ``text/``. We do this to avoid a bug in early versions of IE that caused decompression not to be performed on certain content types."
msgstr ""

#: ../../ref/middleware.txt:113
# 036772fe37cc4c1988a60784fb962df1
msgid "You can apply GZip compression to individual views using the :func:`~django.views.decorators.gzip.gzip_page()` decorator."
msgstr ""

#: ../../ref/middleware.txt:117
# 8d4ee4e722884193964d69cf8823a3e7
msgid "Conditional GET middleware"
msgstr ""

#: ../../ref/middleware.txt:124
# baad2094d8044ca79c9bcf3cba20c83a
msgid "Handles conditional GET operations. If the response has a ``ETag`` or ``Last-Modified`` header, and the request has ``If-None-Match`` or ``If-Modified-Since``, the response is replaced by an :class:`~django.http.HttpResponseNotModified`."
msgstr ""

#: ../../ref/middleware.txt:129
# 2eca368a51cf46d5b86ae27ad27e78b6
msgid "Also sets the ``Date`` and ``Content-Length`` response-headers."
msgstr ""

#: ../../ref/middleware.txt:132
# 1cc0fa86ba9349d398b5c110990c4fd6
msgid "Reverse proxy middleware"
msgstr ""

#: ../../ref/middleware.txt:136
# f695b9c6365643f9ba4c36860dbfd7c2
msgid "This middleware was removed in Django 1.1. See :ref:`the release notes <removed-setremoteaddrfromforwardedfor-middleware>` for details."
msgstr ""

#: ../../ref/middleware.txt:140
# be23a3e484c641bca01f9f49378c8648
msgid "Locale middleware"
msgstr ""

#: ../../ref/middleware.txt:147
# dc74ee69b9e24ad38e96726388066c5c
msgid "Enables language selection based on data from the request. It customizes content for each user. See the :doc:`internationalization documentation </topics/i18n/translation>`."
msgstr ""

#: ../../ref/middleware.txt:152
# 0f5228878ecb4f1da932facae72dbe65
msgid "Message middleware"
msgstr ""

#: ../../ref/middleware.txt:159
# 3d80e12b308a49a89a231abf2a49a8f4
msgid "Enables cookie- and session-based message support. See the :doc:`messages documentation </ref/contrib/messages>`."
msgstr ""

#: ../../ref/middleware.txt:163
# 37bb2e5524654155b5bff66e8fb6900d
msgid "Session middleware"
msgstr ""

#: ../../ref/middleware.txt:170
# 2797e80661e341f0a6be2dc98ec251ee
msgid "Enables session support. See the :doc:`session documentation </topics/http/sessions>`."
msgstr ""

#: ../../ref/middleware.txt:174
# e65d978a4807461b83a04926ba482eab
msgid "Authentication middleware"
msgstr ""

#: ../../ref/middleware.txt:181
# c0a40edacfc14eb9b037ad70986601e9
msgid "Adds the ``user`` attribute, representing the currently-logged-in user, to every incoming ``HttpRequest`` object. See :ref:`Authentication in Web requests <auth-web-requests>`."
msgstr ""

#: ../../ref/middleware.txt:186
# ab5f83b9e04e4126b4b3e973932ca690
msgid "CSRF protection middleware"
msgstr ""

#: ../../ref/middleware.txt:194
# 2c96c236bb114421b1bc9e8046f6eab7
msgid "Adds protection against Cross Site Request Forgeries by adding hidden form fields to POST forms and checking requests for the correct value. See the :doc:`Cross Site Request Forgery protection documentation </ref/contrib/csrf>`."
msgstr ""

#: ../../ref/middleware.txt:199
# 0a365336f6b34eceadf34d129ab515a7
msgid "Transaction middleware"
msgstr ""

#: ../../ref/middleware.txt:206
# ac2cc0d915eb428899c498d997b15fe3
msgid "Binds commit and rollback of the default database to the request/response phase. If a view function runs successfully, a commit is done. If it fails with an exception, a rollback is done."
msgstr ""

#: ../../ref/middleware.txt:210
# 122782dd7aac4c47983f5ace11d2ae6a
msgid "The order of this middleware in the stack is important: middleware modules running outside of it run with commit-on-save - the default Django behavior. Middleware modules running inside it (coming later in the stack) will be under the same transaction control as the view functions."
msgstr ""

#: ../../ref/middleware.txt:215
# 3a19c363315b4d81a5413f434d1d3037
msgid "See the :doc:`transaction management documentation </topics/db/transactions>`."
msgstr ""

#: ../../ref/middleware.txt:218
# d97ead2cf88346eab7f1b86ec89b20a4
msgid "X-Frame-Options middleware"
msgstr ""

#: ../../ref/middleware.txt:228
# 343568f634eb4c128773780c94561166
msgid "Simple :doc:`clickjacking protection via the X-Frame-Options header </ref/clickjacking/>`."
msgstr ""

#: ../../ref/models/fields.txt:3
# a70a391d223c4fd59ee677419c1d4574
msgid "Model field reference"
msgstr ""

#: ../../ref/models/fields.txt:10
# e4200e90f442476c9742c70442562a73
msgid "This document contains all the gory details about all the `field options`_ and `field types`_ Django's got to offer."
msgstr ""

#: ../../ref/models/fields.txt:15
# 1d48f14e0c3d4af3958c6607416a5276
msgid "If the built-in fields don't do the trick, you can try :mod:`django.contrib.localflavor`, which contains assorted pieces of code that are useful for particular countries or cultures. Also, you can easily :doc:`write your own custom model fields </howto/custom-model-fields>`."
msgstr ""

#: ../../ref/models/fields.txt:22
# d8bb5fac08034cbf9308f0cb65efaef7
msgid "Technically, these models are defined in :mod:`django.db.models.fields`, but for convenience they're imported into :mod:`django.db.models`; the standard convention is to use ``from django.db import models`` and refer to fields as ``models.<Foo>Field``."
msgstr ""

#: ../../ref/models/fields.txt:30
# a73a916c96de4d8a8aa33890772dc5ff
msgid "Field options"
msgstr ""

#: ../../ref/models/fields.txt:32
# 1d0bb4ebfb74457593d58625a912f750
msgid "The following arguments are available to all field types. All are optional."
msgstr ""

#: ../../ref/models/fields.txt:35
# f2e3fffb60124590915b0c0bba73877a
msgid "``null``"
msgstr ""

#: ../../ref/models/fields.txt:39
# 44dca03c521745ec856dfaff3873a04a
msgid "If ``True``, Django will store empty values as ``NULL`` in the database. Default is ``False``."
msgstr ""

#: ../../ref/models/fields.txt:42
# 3e077251dcc442bcb46f3e926c309b0b
msgid "Note that empty string values will always get stored as empty strings, not as ``NULL``. Only use ``null=True`` for non-string fields such as integers, booleans and dates. For both types of fields, you will also need to set ``blank=True`` if you wish to permit empty values in forms, as the :attr:`~Field.null` parameter only affects database storage (see :attr:`~Field.blank`)."
msgstr ""

#: ../../ref/models/fields.txt:49
# 6366b81d07ee4fa9a0d61def3f3fbc11
msgid "Avoid using :attr:`~Field.null` on string-based fields such as :class:`CharField` and :class:`TextField` unless you have an excellent reason. If a string-based field has ``null=True``, that means it has two possible values for \"no data\": ``NULL``, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" Django convention is to use the empty string, not ``NULL``."
msgstr ""

#: ../../ref/models/fields.txt:58
# b508165018614b648fd5916328e5cf31
msgid "When using the Oracle database backend, the value ``NULL`` will be stored to denote the empty string regardless of this attribute."
msgstr ""

#: ../../ref/models/fields.txt:61
# a842dda5dc404e2baf909f894759e2e9
msgid "If you want to accept :attr:`~Field.null` values with :class:`BooleanField`, use :class:`NullBooleanField` instead."
msgstr ""

#: ../../ref/models/fields.txt:65
# 8a07219d6e9b4252beed1aafe66800da
msgid "``blank``"
msgstr ""

#: ../../ref/models/fields.txt:69
# 2b4be2699d0b47cf8dca387a5d3b471b
msgid "If ``True``, the field is allowed to be blank. Default is ``False``."
msgstr ""

#: ../../ref/models/fields.txt:71
# 951c1dda96de4dbda1161fc26723ee2e
msgid "Note that this is different than :attr:`~Field.null`. :attr:`~Field.null` is purely database-related, whereas :attr:`~Field.blank` is validation-related. If a field has ``blank=True``, form validation will allow entry of an empty value. If a field has ``blank=False``, the field will be required."
msgstr ""

#: ../../ref/models/fields.txt:79
# cef1f90cde57406a90fc8124bbf32462
msgid "``choices``"
msgstr ""

#: ../../ref/models/fields.txt:83
# 0ffb794e2a104835b4251bcc74ae936c
msgid "An iterable (e.g., a list or tuple) of 2-tuples to use as choices for this field. If this is given, the default form widget will be a select box with these choices instead of the standard text field."
msgstr ""

#: ../../ref/models/fields.txt:87
# 79b9272737a04ea6a0dc556b105f09a0
msgid "The first element in each tuple is the actual value to be stored, and the second element is the human-readable name. For example::"
msgstr ""

#: ../../ref/models/fields.txt:97
# e8f66bea341b4f128c9bb6cecf4c354b
msgid "Generally, it's best to define choices inside a model class, and to define a suitably-named constant for each value::"
msgstr ""

#: ../../ref/models/fields.txt:118
# 59112fa7fff042879db6885eaccbb13b
msgid "Though you can define a choices list outside of a model class and then refer to it, defining the choices and names for each choice inside the model class keeps all of that information with the class that uses it, and makes the choices easy to reference (e.g, ``Student.SOPHOMORE`` will work anywhere that the ``Student`` model has been imported)."
msgstr ""

#: ../../ref/models/fields.txt:124
# 59ee1a70ba89499aa56265a55b33b489
msgid "You can also collect your available choices into named groups that can be used for organizational purposes::"
msgstr ""

#: ../../ref/models/fields.txt:141
# c2f480eeb64848d49752204a5b7fba1f
msgid "The first element in each tuple is the name to apply to the group. The second element is an iterable of 2-tuples, with each 2-tuple containing a value and a human-readable name for an option. Grouped options may be combined with ungrouped options within a single list (such as the `unknown` option in this example)."
msgstr ""

#: ../../ref/models/fields.txt:147
# 0e3da7c33488414ba86453e20957acec
msgid "For each model field that has :attr:`~Field.choices` set, Django will add a method to retrieve the human-readable name for the field's current value. See :meth:`~django.db.models.Model.get_FOO_display` in the database API documentation."
msgstr ""

#: ../../ref/models/fields.txt:152
# 297e97d7cc5e463aa72625344c33b5eb
msgid "Finally, note that choices can be any iterable object -- not necessarily a list or tuple. This lets you construct choices dynamically. But if you find yourself hacking :attr:`~Field.choices` to be dynamic, you're probably better off using a proper database table with a :class:`ForeignKey`. :attr:`~Field.choices` is meant for static data that doesn't change much, if ever."
msgstr ""

#: ../../ref/models/fields.txt:159
# d19e0068c3674a67b4f824e40ce9253c
msgid "``db_column``"
msgstr ""

#: ../../ref/models/fields.txt:163
# a0f0ebca0576408f8e014da061631c4a
msgid "The name of the database column to use for this field. If this isn't given, Django will use the field's name."
msgstr ""

#: ../../ref/models/fields.txt:166
# b61a7c8577da4bbbb0fcc07e52db686f
msgid "If your database column name is an SQL reserved word, or contains characters that aren't allowed in Python variable names -- notably, the hyphen -- that's OK. Django quotes column and table names behind the scenes."
msgstr ""

#: ../../ref/models/fields.txt:172
# dd99a775f7c64c209f5d9ec92c072e27
msgid "``db_index``"
msgstr ""

#: ../../ref/models/fields.txt:176
# b824b3b826c8490d90e0849a386a3726
msgid "If ``True``, :djadmin:`django-admin.py sqlindexes <sqlindexes>` will output a ``CREATE INDEX`` statement for this field."
msgstr ""

#: ../../ref/models/fields.txt:180
#: ../../ref/models/options.txt:72
# 9966fad4b6b5483ebf62a0f38ddef20f
# a76bf8541def45cfab1d90e443df4b0d
msgid "``db_tablespace``"
msgstr ""

#: ../../ref/models/fields.txt:184
# b24bcd70f17c499580c00e9b364e5603
msgid "The name of the :doc:`database tablespace </topics/db/tablespaces>` to use for this field's index, if this field is indexed. The default is the project's :setting:`DEFAULT_INDEX_TABLESPACE` setting, if set, or the :attr:`~Options.db_tablespace` of the model, if any. If the backend doesn't support tablespaces for indexes, this option is ignored."
msgstr ""

#: ../../ref/models/fields.txt:191
# f4f1c0a744e342ecac61c1d14946a49c
msgid "``default``"
msgstr ""

#: ../../ref/models/fields.txt:195
# 9954806d0d5a4200b5743c8ce6203ca9
msgid "The default value for the field. This can be a value or a callable object. If callable it will be called every time a new object is created."
msgstr ""

#: ../../ref/models/fields.txt:198
# 362409a30d0e479db006d9b7cfcc5132
msgid "The default cannot be a mutable object (model instance, list, set, etc.), as a reference to the same instance of that object would be used as the default value in all new model instances. Instead, wrap the desired default in a callable.  For example, if you had a custom ``JSONField`` and wanted to specify a dictionary as the default, use a ``lambda`` as follows::"
msgstr ""

#: ../../ref/models/fields.txt:207
# 3dc689d7a0f94ece8e962e316f043a2d
msgid "``editable``"
msgstr ""

#: ../../ref/models/fields.txt:211
# 4b6ee02973604bd6929c174a93dd2dcc
msgid "If ``False``, the field will not be displayed in the admin or any other :class:`~django.forms.ModelForm`. Default is ``True``."
msgstr ""

#: ../../ref/models/fields.txt:219
# 5bc05137c4394ea4a715e2ce0af2cca1
msgid "The ``error_messages`` argument lets you override the default messages that the field will raise. Pass in a dictionary with keys matching the error messages you want to override."
msgstr ""

#: ../../ref/models/fields.txt:223
# 4f1864c32e7a4a4a8fbdbb34f1dde851
msgid "Error message keys include ``null``, ``blank``, ``invalid``, ``invalid_choice``, and ``unique``. Additional error message keys are specified for each field in the `Field types`_ section below."
msgstr ""

#: ../../ref/models/fields.txt:232
# 14eb735c146949009e38bfa0262a597c
msgid "Extra \"help\" text to be displayed with the form widget. It's useful for documentation even if your field isn't used on a form."
msgstr ""

#: ../../ref/models/fields.txt:235
# a8e81252f30041f8b12c739586c7fbfb
msgid "Note that this value is *not* HTML-escaped in automatically-generated forms. This lets you include HTML in :attr:`~Field.help_text` if you so desire. For example::"
msgstr ""

#: ../../ref/models/fields.txt:241
# 7ce43238c84945479556e52b7a798410
msgid "Alternatively you can use plain text and ``django.utils.html.escape()`` to escape any HTML special characters."
msgstr ""

#: ../../ref/models/fields.txt:245
# 5885553bac174adcb8585e5375b259e5
msgid "``primary_key``"
msgstr ""

#: ../../ref/models/fields.txt:249
# a640e015b97b41f89bbcf720b56046bf
msgid "If ``True``, this field is the primary key for the model."
msgstr ""

#: ../../ref/models/fields.txt:251
# 06b33b61ea174c87894c2a165231f388
msgid "If you don't specify ``primary_key=True`` for any field in your model, Django will automatically add an :class:`AutoField` to hold the primary key, so you don't need to set ``primary_key=True`` on any of your fields unless you want to override the default primary-key behavior. For more, see :ref:`automatic-primary-key-fields`."
msgstr ""

#: ../../ref/models/fields.txt:257
# 5c5d734874a34a58b5f2fd69cc950c6f
msgid "``primary_key=True`` implies :attr:`null=False <Field.null>` and :attr:`unique=True <Field.unique>`. Only one primary key is allowed on an object."
msgstr ""

#: ../../ref/models/fields.txt:265
# e2a11cb890f9416bb98b0b7afe411d6a
msgid "If ``True``, this field must be unique throughout the table."
msgstr ""

#: ../../ref/models/fields.txt:267
# 89e77671457f4477bf27db045e2e6d90
msgid "This is enforced at the database level and by model validation. If you try to save a model with a duplicate value in a :attr:`~Field.unique` field, a :exc:`django.db.IntegrityError` will be raised by the model's :meth:`~django.db.models.Model.save` method."
msgstr ""

#: ../../ref/models/fields.txt:272
# bf2359e5eb744eae906ff9cdf96bbbff
msgid "This option is valid on all field types except :class:`ManyToManyField` and :class:`FileField`."
msgstr ""

#: ../../ref/models/fields.txt:275
# 4abb4e94c5334a49abc0dfc0d12386e0
msgid "Note that when ``unique`` is ``True``, you don't need to specify :attr:`~Field.db_index`, because ``unique`` implies the creation of an index."
msgstr ""

#: ../../ref/models/fields.txt:279
# f0b47d705b68466688a575f37dc8c9b5
msgid "``unique_for_date``"
msgstr ""

#: ../../ref/models/fields.txt:283
# 55dd397810f14f05aa79eeabd26f9ce0
msgid "Set this to the name of a :class:`DateField` or :class:`DateTimeField` to require that this field be unique for the value of the date field."
msgstr ""

#: ../../ref/models/fields.txt:286
# 35493b80ddda46f089f854b202d22617
msgid "For example, if you have a field ``title`` that has ``unique_for_date=\"pub_date\"``, then Django wouldn't allow the entry of two records with the same ``title`` and ``pub_date``."
msgstr ""

#: ../../ref/models/fields.txt:290
# 1245aafc30dd4bd18203fd810fc9b48d
msgid "This is enforced by model validation but not at the database level."
msgstr ""

#: ../../ref/models/fields.txt:293
# d2f68bd0be764ca2ac8435124eb6c383
msgid "``unique_for_month``"
msgstr ""

#: ../../ref/models/fields.txt:297
# a7fe03471ace43f5b34ed996f10365bd
msgid "Like :attr:`~Field.unique_for_date`, but requires the field to be unique with respect to the month."
msgstr ""

#: ../../ref/models/fields.txt:301
# 9caa77cbea2b47bbac4ab2aa60893a25
msgid "``unique_for_year``"
msgstr ""

#: ../../ref/models/fields.txt:305
# 8056bba5f67e4f7999cf47c18cad39d4
msgid "Like :attr:`~Field.unique_for_date` and :attr:`~Field.unique_for_month`."
msgstr ""

#: ../../ref/models/fields.txt:308
#: ../../ref/models/options.txt:280
# c169324df339416db1b5bfd889d1388c
# 1029bc61053f4610acbfd618f56a9554
msgid "``verbose_name``"
msgstr ""

#: ../../ref/models/fields.txt:312
# 9965e78c32d64af7b2320734cdbe7f68
msgid "A human-readable name for the field. If the verbose name isn't given, Django will automatically create it using the field's attribute name, converting underscores to spaces. See :ref:`Verbose field names <verbose-field-names>`."
msgstr ""

#: ../../ref/models/fields.txt:321
# 2ed05c1e78de48daae2efc33b8a2cf85
msgid "A list of validators to run for this field. See the :doc:`validators documentation </ref/validators>` for more information."
msgstr ""

#: ../../ref/models/fields.txt:327
# 44fe603aca8547b4af854f6ab2bef136
msgid "Field types"
msgstr ""

#: ../../ref/models/fields.txt:332
# 515c4b419e824f48838b618509a511d7
msgid "``AutoField``"
msgstr ""

#: ../../ref/models/fields.txt:336
# 8b0006778b7e4000a1bdd5ade7330e60
msgid "An :class:`IntegerField` that automatically increments according to available IDs. You usually won't need to use this directly; a primary key field will automatically be added to your model if you don't specify otherwise. See :ref:`automatic-primary-key-fields`."
msgstr ""

#: ../../ref/models/fields.txt:342
# ab8ac1a5a56e41bebc4f50005e18de57
msgid "``BigIntegerField``"
msgstr ""

#: ../../ref/models/fields.txt:346
# fbe6d90622504543bf2d45f792e1ab05
msgid "A 64 bit integer, much like an :class:`IntegerField` except that it is guaranteed to fit numbers from -9223372036854775808 to 9223372036854775807. The default form widget for this field is a :class:`~django.forms.TextInput`."
msgstr ""

#: ../../ref/models/fields.txt:356
# 93e94182dc3442319caba7232b1de8c8
msgid "A true/false field."
msgstr ""

#: ../../ref/models/fields.txt:358
# 472228e31d1748af8a076cfcb4e26c01
msgid "The default form widget for this field is a :class:`~django.forms.CheckboxInput`."
msgstr ""

#: ../../ref/models/fields.txt:361
# 3ac1784291f44ceba5388c881cc388b5
msgid "If you need to accept :attr:`~Field.null` values then use :class:`NullBooleanField` instead."
msgstr ""

#: ../../ref/models/fields.txt:369
# e91b4f0d5a7e4788a4fe231af80a6200
msgid "A string field, for small- to large-sized strings."
msgstr ""

#: ../../ref/models/fields.txt:371
# dc6b0c8b68d34df280fc26de8e20f3b2
msgid "For large amounts of text, use :class:`~django.db.models.TextField`."
msgstr ""

#: ../../ref/models/fields.txt:373
#: ../../ref/models/fields.txt:475
#: ../../ref/models/fields.txt:756
#: ../../ref/models/fields.txt:933
# 2335c50ed2cb404cb8e761825f9ef4c3
# cfc8e6d3d8d245e98abe4874563f0aaf
# 533f9032d8ea44c788bef3b043ce5770
# 0ab59e29d79c4bb5a221ad8693b8e8a3
msgid "The default form widget for this field is a :class:`~django.forms.TextInput`."
msgstr ""

#: ../../ref/models/fields.txt:375
# 763b1dd21f0c4c08b244e11bfb76d722
msgid ":class:`CharField` has one extra required argument:"
msgstr ""

#: ../../ref/models/fields.txt:379
# c693cb55749b449ea6a5becdfee91e40
msgid "The maximum length (in characters) of the field. The max_length is enforced at the database level and in Django's validation."
msgstr ""

#: ../../ref/models/fields.txt:384
# f188ed838c124f80bec8637534f26cbd
msgid "If you are writing an application that must be portable to multiple database backends, you should be aware that there are restrictions on ``max_length`` for some backends. Refer to the :doc:`database backend notes </ref/databases>` for details."
msgstr ""

#: ../../ref/models/fields.txt:391
# 204db19a43bb443c8528ff9efe5a3e34
msgid "If you are using this field with MySQLdb 1.2.2 and the ``utf8_bin`` collation (which is *not* the default), there are some issues to be aware of. Refer to the :ref:`MySQL database notes <mysql-collation>` for details."
msgstr ""

#: ../../ref/models/fields.txt:398
# 7586764b235b48c08827f2cfa450d3d7
msgid "``CommaSeparatedIntegerField``"
msgstr ""

#: ../../ref/models/fields.txt:402
# 77b1c6123b564c6fb1ffe145f33e6288
msgid "A field of integers separated by commas. As in :class:`CharField`, the :attr:`~CharField.max_length` argument is required and the note about database portability mentioned there should be heeded."
msgstr ""

#: ../../ref/models/fields.txt:411
# e4a4b80926604d6d96b8ba574ee06e93
msgid "A date, represented in Python by a ``datetime.date`` instance. Has a few extra, optional arguments:"
msgstr ""

#: ../../ref/models/fields.txt:416
# b0a9ebacf48f45188c98c663662d7d1b
msgid "Automatically set the field to now every time the object is saved. Useful for \"last-modified\" timestamps. Note that the current date is *always* used; it's not just a default value that you can override."
msgstr ""

#: ../../ref/models/fields.txt:422
# dfba223363ee4b1ab34a9839366debf1
msgid "Automatically set the field to now when the object is first created. Useful for creation of timestamps. Note that the current date is *always* used; it's not just a default value that you can override."
msgstr ""

#: ../../ref/models/fields.txt:426
# f77176eafc3343888c1e1cbdcb5820f1
msgid "The default form widget for this field is a :class:`~django.forms.TextInput`. The admin adds a JavaScript calendar, and a shortcut for \"Today\". Includes an additional ``invalid_date`` error message key."
msgstr ""

#: ../../ref/models/fields.txt:432
# e35c99f296b945ef82f035bbf10f5e8e
msgid "As currently implemented, setting ``auto_now`` or ``auto_now_add`` to ``True`` will cause the field to have ``editable=False`` and ``blank=True`` set."
msgstr ""

#: ../../ref/models/fields.txt:441
# 0174f4eda17945e4b1844baab0b2617e
msgid "A date and time, represented in Python by a ``datetime.datetime`` instance. Takes the same extra arguments as :class:`DateField`."
msgstr ""

#: ../../ref/models/fields.txt:444
# 2de98fa5320747769cac08a91c69299c
msgid "The default form widget for this field is a single :class:`~django.forms.TextInput`. The admin uses two separate :class:`~django.forms.TextInput` widgets with JavaScript shortcuts."
msgstr ""

#: ../../ref/models/fields.txt:453
# cf1da5661d664a94a6cedcd4a6388055
msgid "A fixed-precision decimal number, represented in Python by a :class:`~decimal.Decimal` instance. Has two **required** arguments:"
msgstr ""

#: ../../ref/models/fields.txt:458
# e99c5b7bb23942e7ba35548b5137ec8e
msgid "The maximum number of digits allowed in the number. Note that this number must be greater than or equal to ``decimal_places``, if it exists."
msgstr ""

#: ../../ref/models/fields.txt:463
# 19561cedf127435d8e6313acc176494f
msgid "The number of decimal places to store with the number."
msgstr ""

#: ../../ref/models/fields.txt:465
# a928b666a61c4d949187e76a83f39660
msgid "For example, to store numbers up to 999 with a resolution of 2 decimal places, you'd use::"
msgstr ""

#: ../../ref/models/fields.txt:470
# e62f98985a5245b5808d678a46d17036
msgid "And to store numbers up to approximately one billion with a resolution of 10 decimal places::"
msgstr ""

#: ../../ref/models/fields.txt:479
# 421c5804f432495b8f732c63160e3269
msgid "For more information about the differences between the :class:`FloatField` and :class:`DecimalField` classes, please see :ref:`FloatField vs. DecimalField <floatfield_vs_decimalfield>`."
msgstr ""

#: ../../ref/models/fields.txt:488
# 864a787f055c4dda95bb6dd00ae46dc9
msgid "A :class:`CharField` that checks that the value is a valid email address."
msgstr ""

#: ../../ref/models/fields.txt:492
# 7fbc31a8e3f443d49fbddbe48060bb4f
msgid "The default 75 character ``max_length`` is not capable of storing all possible RFC3696/5321-compliant email addresses. In order to store all possible valid email addresses, a ``max_length`` of 254 is required. The default ``max_length`` of 75 exists for historical reasons. The default has not been changed in order to maintain backwards compatibility with existing uses of :class:`EmailField`."
msgstr ""

#: ../../ref/models/fields.txt:504
# 76372ec1a95240e48e2ae10118e03a97
msgid "A file-upload field."
msgstr ""

#: ../../ref/models/fields.txt:507
# c18b682f2f794383a50384c09d4e276f
msgid "The ``primary_key`` and ``unique`` arguments are not supported, and will raise a ``TypeError`` if used."
msgstr ""

#: ../../ref/models/fields.txt:510
# 0d75e64198b84c329e603a0b09a37fbd
msgid "Has one **required** argument:"
msgstr ""

#: ../../ref/models/fields.txt:514
# 615ce779042d4d3bb7541d4112b5b4ad
msgid "A local filesystem path that will be appended to your :setting:`MEDIA_ROOT` setting to determine the value of the :attr:`~django.db.models.fields.files.FieldFile.url` attribute."
msgstr ""

#: ../../ref/models/fields.txt:518
# d4f903d999684ee2bbd77cb48d2424dd
msgid "This path may contain :func:`~time.strftime` formatting, which will be replaced by the date/time of the file upload (so that uploaded files don't fill up the given directory)."
msgstr ""

#: ../../ref/models/fields.txt:522
# 96f807ff2fc8480c8ce67a9187e22d29
msgid "This may also be a callable, such as a function, which will be called to obtain the upload path, including the filename. This callable must be able to accept two arguments, and return a Unix-style path (with forward slashes) to be passed along to the storage system. The two arguments that will be passed are:"
msgstr ""

#: ../../ref/models/fields.txt:531
#: ../../ref/signals.txt:299
#: ../../ref/signals.txt:326
# 8fccdced915b46909036655db85aaacf
# bcab102efc224c06a292c17b9d60ab04
# f714ef1d6803463ebeabe38b62d6a6be
msgid "``instance``"
msgstr ""

#: ../../ref/models/fields.txt:531
# 9856b7a550d643c793004327d870b528
msgid "An instance of the model where the ``FileField`` is defined. More specifically, this is the particular instance where the current file is being attached."
msgstr ""

#: ../../ref/models/fields.txt:536
# 1c1cd409bfd24890983793cc0ce839f4
msgid "In most cases, this object will not have been saved to the database yet, so if it uses the default ``AutoField``, *it might not yet have a value for its primary key field*."
msgstr ""

#: ../../ref/models/fields.txt:541
# e14e552a8322486f8af6c9112eeab28d
msgid "``filename``"
msgstr ""

#: ../../ref/models/fields.txt:541
# ecf64f08770c4010866609ccfe3f6c1a
msgid "The filename that was originally given to the file. This may or may not be taken into account when determining the final destination path."
msgstr ""

#: ../../ref/models/fields.txt:546
# 88ea4c071ce546caaf989352e8e81474
msgid "Also has one optional argument:"
msgstr ""

#: ../../ref/models/fields.txt:550
# 2f34b048905e45878d8d6bc7695fe103
msgid "Optional. A storage object, which handles the storage and retrieval of your files. See :doc:`/topics/files` for details on how to provide this object."
msgstr ""

#: ../../ref/models/fields.txt:553
# 35cd6cadc9d34b848204f85339590535
msgid "The default form widget for this field is a :class:`~django.forms.FileInput`."
msgstr ""

#: ../../ref/models/fields.txt:555
# c2d3d5278b2748cdb7aa7f3049012a82
msgid "Using a :class:`FileField` or an :class:`ImageField` (see below) in a model takes a few steps:"
msgstr ""

#: ../../ref/models/fields.txt:558
# a1cabd596f7a454b92bb4a7d04461693
msgid "In your settings file, you'll need to define :setting:`MEDIA_ROOT` as the full path to a directory where you'd like Django to store uploaded files. (For performance, these files are not stored in the database.) Define :setting:`MEDIA_URL` as the base public URL of that directory. Make sure that this directory is writable by the Web server's user account."
msgstr ""

#: ../../ref/models/fields.txt:564
# 76bd0b1c8b2842e8ad2d17a1f60c09e1
msgid "Add the :class:`FileField` or :class:`ImageField` to your model, making sure to define the :attr:`~FileField.upload_to` option to tell Django to which subdirectory of :setting:`MEDIA_ROOT` it should upload files."
msgstr ""

#: ../../ref/models/fields.txt:568
# 17567789f8fd465d914e799a91c5711f
msgid "All that will be stored in your database is a path to the file (relative to :setting:`MEDIA_ROOT`). You'll most likely want to use the convenience :attr:`~django.db.models.fields.files.FieldFile.url` attribute provided by Django. For example, if your :class:`ImageField` is called ``mug_shot``, you can get the absolute path to your image in a template with ``{{ object.mug_shot.url }}``."
msgstr ""

#: ../../ref/models/fields.txt:575
# e03bfd0cdc6d48949204c50ecc2080e1
msgid "For example, say your :setting:`MEDIA_ROOT` is set to ``'/home/media'``, and :attr:`~FileField.upload_to` is set to ``'photos/%Y/%m/%d'``. The ``'%Y/%m/%d'`` part of :attr:`~FileField.upload_to` is :func:`~time.strftime` formatting; ``'%Y'`` is the four-digit year, ``'%m'`` is the two-digit month and ``'%d'`` is the two-digit day. If you upload a file on Jan. 15, 2007, it will be saved in the directory ``/home/media/photos/2007/01/15``."
msgstr ""

#: ../../ref/models/fields.txt:582
# ab7de7bdfbb646159c82cfee2621645b
msgid "If you wanted to retrieve the uploaded file's on-disk filename, or the file's size, you could use the :attr:`~django.core.files.File.name` and :attr:`~django.core.files.File.size` attributes respectively; for more information on the available attributes and methods, see the :class:`~django.core.files.File` class reference and the :doc:`/topics/files` topic guide."
msgstr ""

#: ../../ref/models/fields.txt:590
# 77194c5f244a41a987d8463daf0b64ea
msgid "The file is saved as part of saving the model in the database, so the actual file name used on disk cannot be relied on until after the model has been saved."
msgstr ""

#: ../../ref/models/fields.txt:594
# e0d3b5f6e626459ab106e566dcc20a5a
msgid "The uploaded file's relative URL can be obtained using the :attr:`~django.db.models.fields.files.FieldFile.url` attribute. Internally, this calls the :meth:`~django.core.files.storage.Storage.url` method of the underlying :class:`~django.core.files.storage.Storage` class."
msgstr ""

#: ../../ref/models/fields.txt:601
# 426291ecf198494e9b2fb5b7e28d20eb
msgid "Note that whenever you deal with uploaded files, you should pay close attention to where you're uploading them and what type of files they are, to avoid security holes. *Validate all uploaded files* so that you're sure the files are what you think they are. For example, if you blindly let somebody upload files, without validation, to a directory that's within your Web server's document root, then somebody could upload a CGI or PHP script and execute that script by visiting its URL on your site. Don't allow that."
msgstr ""

#: ../../ref/models/fields.txt:609
# 941520e3a1474b1588806eeeaaf58e85
msgid "Also note that even an uploaded HTML file, since it can be executed by the browser (though not by the server), can pose security threats that are equivalent to XSS or CSRF attacks."
msgstr ""

#: ../../ref/models/fields.txt:613
# a4881a3481f4465ba439900149607836
msgid "By default, :class:`FileField` instances are created as ``varchar(100)`` columns in your database. As with other fields, you can change the maximum length using the :attr:`~CharField.max_length` argument."
msgstr ""

#: ../../ref/models/fields.txt:618
# 181d1c97fafb4b5c903bd0dc96901f0e
msgid "FileField and FieldFile"
msgstr ""

#: ../../ref/models/fields.txt:624
# b858ded2ad4f402fb4c79e574b5ec8a3
msgid "When you access a :class:`~django.db.models.FileField` on a model, you are given an instance of :class:`FieldFile` as a proxy for accessing the underlying file. This class has several attributes and methods that can be used to interact with file data:"
msgstr ""

#: ../../ref/models/fields.txt:631
# 1ee657c38fc647e7b3d3f50c2b300021
msgid "A read-only property to access the file's relative URL by calling the :meth:`~django.core.files.storage.Storage.url` method of the underlying :class:`~django.core.files.storage.Storage` class."
msgstr ""

#: ../../ref/models/fields.txt:637
# 02193ea6d5df46f190d4bb9d6f6b756a
msgid "Behaves like the standard Python ``open()`` method and opens the file associated with this instance in the mode specified by ``mode``."
msgstr ""

#: ../../ref/models/fields.txt:642
# a181d55605e6440ea7037b9279d472fa
msgid "Behaves like the standard Python ``file.close()`` method and closes the file associated with this instance."
msgstr ""

#: ../../ref/models/fields.txt:647
# d0ac6d01853740b09d74f136a9a9b292
msgid "This method takes a filename and file contents and passes them to the storage class for the field, then associates the stored file with the model field. If you want to manually associate file data with :class:`~django.db.models.FileField` instances on your model, the ``save()`` method is used to persist that file data."
msgstr ""

#: ../../ref/models/fields.txt:653
# 7c50ba4e995e4e3a9ec27dac587b30e7
msgid "Takes two required arguments: ``name`` which is the name of the file, and ``content`` which is an object containing the file's contents.  The optional ``save`` argument controls whether or not the instance is saved after the file has been altered. Defaults to ``True``."
msgstr ""

#: ../../ref/models/fields.txt:658
# 43bfe66a2b7d442da1fa4b35a3d8f690
msgid "Note that the ``content`` argument should be an instance of :class:`django.core.files.File`, not Python's built-in file object. You can construct a :class:`~django.core.files.File` from an existing Python file object like this::"
msgstr ""

#: ../../ref/models/fields.txt:668
# 7928f5e3c6754eb39847aa58b814399d
msgid "Or you can construct one from a Python string like this::"
msgstr ""

#: ../../ref/models/fields.txt:673
# c1f3994748a44d50bd709ded969e06f1
msgid "For more information, see :doc:`/topics/files`."
msgstr ""

#: ../../ref/models/fields.txt:677
# d6aa7dd59980440486702a81c9c9d2f4
msgid "Deletes the file associated with this instance and clears all attributes on the field. Note: This method will close the file if it happens to be open when ``delete()`` is called."
msgstr ""

#: ../../ref/models/fields.txt:681
# 7b27fb4026034a6b93d862a35bf90dd8
msgid "The optional ``save`` argument controls whether or not the instance is saved after the file has been deleted. Defaults to ``True``."
msgstr ""

#: ../../ref/models/fields.txt:684
# 2740616e7fcf4ccabd9a264e996f41f0
msgid "Note that when a model is deleted, related files are not deleted. If you need to cleanup orphaned files, you'll need to handle it yourself (for instance, with a custom management command that can be run manually or scheduled to run periodically via e.g. cron)."
msgstr ""

#: ../../ref/models/fields.txt:696
# 86c0c15706e64c7eaaa9aa3ec86e126a
msgid "A :class:`CharField` whose choices are limited to the filenames in a certain directory on the filesystem. Has three special arguments, of which the first is **required**:"
msgstr ""

#: ../../ref/models/fields.txt:702
# 3a4ddbb7a17744a583a4e7c200c1593d
msgid "Required. The absolute filesystem path to a directory from which this :class:`FilePathField` should get its choices. Example: ``\"/home/images\"``."
msgstr ""

#: ../../ref/models/fields.txt:707
# ca03dcd11a24427db1e1da3712f9c8ce
msgid "Optional. A regular expression, as a string, that :class:`FilePathField` will use to filter filenames. Note that the regex will be applied to the base filename, not the full path. Example: ``\"foo.*\\.txt$\"``, which will match a file called ``foo23.txt`` but not ``bar.txt`` or ``foo23.png``."
msgstr ""

#: ../../ref/models/fields.txt:714
# b5178d7638174c4b9253408885906302
msgid "Optional. Either ``True`` or ``False``. Default is ``False``. Specifies whether all subdirectories of :attr:`~FilePathField.path` should be included"
msgstr ""

#: ../../ref/models/fields.txt:721
# 36757ff5a8ef48648c67b55077cfa8ff
msgid "Optional.  Either ``True`` or ``False``.  Default is ``True``.  Specifies whether files in the specified location should be included.  Either this or :attr:`~FilePathField.allow_folders` must be ``True``."
msgstr ""

#: ../../ref/models/fields.txt:729
# 979f4aad1d1b4c0eac451cba52368f09
msgid "Optional.  Either ``True`` or ``False``.  Default is ``False``.  Specifies whether folders in the specified location should be included.  Either this or :attr:`~FilePathField.allow_files` must be ``True``."
msgstr ""

#: ../../ref/models/fields.txt:734
# 984ce099c8a54fd997c95eee42452ae6
msgid "Of course, these arguments can be used together."
msgstr ""

#: ../../ref/models/fields.txt:736
# baf67f35c3ec47d397b026349853493c
msgid "The one potential gotcha is that :attr:`~FilePathField.match` applies to the base filename, not the full path. So, this example::"
msgstr ""

#: ../../ref/models/fields.txt:741
# 240e3a704e064f72b75cc176b6034598
msgid "...will match ``/home/images/foo.png`` but not ``/home/images/foo/bar.png`` because the :attr:`~FilePathField.match` applies to the base filename (``foo.png`` and ``bar.png``)."
msgstr ""

#: ../../ref/models/fields.txt:745
# 0fd9d2f759e34ee6be4713687c760148
msgid "By default, :class:`FilePathField` instances are created as ``varchar(100)`` columns in your database. As with other fields, you can change the maximum length using the :attr:`~CharField.max_length` argument."
msgstr ""

#: ../../ref/models/fields.txt:754
# a4351e68e6c94c7d90aed7112c820d09
msgid "A floating-point number represented in Python by a ``float`` instance."
msgstr ""

#: ../../ref/models/fields.txt:762
# 91152ef9e00040ef9615fcf3df8f47f6
msgid "The :class:`FloatField` class is sometimes mixed up with the :class:`DecimalField` class. Although they both represent real numbers, they represent those numbers differently. ``FloatField`` uses Python's ``float`` type internally, while ``DecimalField`` uses Python's ``Decimal`` type. For information on the difference between the two, see Python's documentation for the :mod:`decimal` module."
msgstr ""

#: ../../ref/models/fields.txt:774
# 9507f702dd8b475da5eff610d5bde22c
msgid "Inherits all attributes and methods from :class:`FileField`, but also validates that the uploaded object is a valid image."
msgstr ""

#: ../../ref/models/fields.txt:777
# ada2c8063d1145f1a5b61200760b4a33
msgid "In addition to the special attributes that are available for :class:`FileField`, an :class:`ImageField` also has ``height`` and ``width`` attributes."
msgstr ""

#: ../../ref/models/fields.txt:780
# 40dd92e0b7934c36bcfecac348849ae1
msgid "To facilitate querying on those attributes, :class:`ImageField` has two extra optional arguments:"
msgstr ""

#: ../../ref/models/fields.txt:785
# 553f982949cf44cca400fa5322fa8960
msgid "Name of a model field which will be auto-populated with the height of the image each time the model instance is saved."
msgstr ""

#: ../../ref/models/fields.txt:790
# 50f51a5865bf454fa81b28affb6967b2
msgid "Name of a model field which will be auto-populated with the width of the image each time the model instance is saved."
msgstr ""

#: ../../ref/models/fields.txt:793
# 9f7fd6c35666470f9e9531f7e250a4a5
msgid "Requires the `Python Imaging Library`_."
msgstr ""

#: ../../ref/models/fields.txt:797
# 832baf619bef45b38fa1d838f8ec7a9d
msgid "By default, :class:`ImageField` instances are created as ``varchar(100)`` columns in your database. As with other fields, you can change the maximum length using the :attr:`~CharField.max_length` argument."
msgstr ""

#: ../../ref/models/fields.txt:806
# ba6b2ceefe2b4038bf2b2bd6b0e8ea74
msgid "An integer. The default form widget for this field is a :class:`~django.forms.TextInput`."
msgstr ""

#: ../../ref/models/fields.txt:814
# 04a33ab863c34b4694151c7044b3950b
msgid "An IP address, in string format (e.g. \"192.0.2.30\"). The default form widget for this field is a :class:`~django.forms.TextInput`."
msgstr ""

#: ../../ref/models/fields.txt:824
# de7cc87eb4d140048112c923b2874e8b
msgid "An IPv4 or IPv6 address, in string format (e.g. ``192.0.2.30`` or ``2a02:42fe::4``). The default form widget for this field is a :class:`~django.forms.TextInput`."
msgstr ""

#: ../../ref/models/fields.txt:836
# 312b9b59c1134526815bed582fae75fd
msgid "Limits valid inputs to the specified protocol. Accepted values are ``'both'`` (default), ``'IPv4'`` or ``'IPv6'``. Matching is case insensitive."
msgstr ""

#: ../../ref/models/fields.txt:852
# d0fa6f00d48f4f6796e0abf8a4d5ac8a
msgid "Like a :class:`BooleanField`, but allows ``NULL`` as one of the options. Use this instead of a :class:`BooleanField` with ``null=True``. The default form widget for this field is a :class:`~django.forms.NullBooleanSelect`."
msgstr ""

#: ../../ref/models/fields.txt:857
# 6c0ec05596894d1491c9c1052a343570
msgid "``PositiveIntegerField``"
msgstr ""

#: ../../ref/models/fields.txt:861
# 7d262ad5a08446c18b3fb11e00e76033
msgid "Like an :class:`IntegerField`, but must be either positive or zero (``0``). The value ``0`` is accepted for backward compatibility reasons."
msgstr ""

#: ../../ref/models/fields.txt:865
# 430c7826ca8b40afacd8e89871707a09
msgid "``PositiveSmallIntegerField``"
msgstr ""

#: ../../ref/models/fields.txt:869
# 68dcbd2433624ef39560c969a8ded64f
msgid "Like a :class:`PositiveIntegerField`, but only allows values under a certain (database-dependent) point."
msgstr ""

#: ../../ref/models/fields.txt:877
# 3192db17429345bf982d408db44403d2
msgid ":term:`Slug` is a newspaper term. A slug is a short label for something, containing only letters, numbers, underscores or hyphens. They're generally used in URLs."
msgstr ""

#: ../../ref/models/fields.txt:881
# 2ea3c5d7b9024081b505ef66776be4b2
msgid "Like a CharField, you can specify :attr:`~CharField.max_length` (read the note about database portability and :attr:`~CharField.max_length` in that section, too). If :attr:`~CharField.max_length` is not specified, Django will use a default length of 50."
msgstr ""

#: ../../ref/models/fields.txt:886
# d11084635a934380a089312047ef7627
msgid "Implies setting :attr:`Field.db_index` to ``True``."
msgstr ""

#: ../../ref/models/fields.txt:888
# 6a9489a957574db9adeb5d485f30f65f
msgid "It is often useful to automatically prepopulate a SlugField based on the value of some other value.  You can do this automatically in the admin using :attr:`~django.contrib.admin.ModelAdmin.prepopulated_fields`."
msgstr ""

#: ../../ref/models/fields.txt:893
# 50e559959e2d4e458b48e52230113446
msgid "``SmallIntegerField``"
msgstr ""

#: ../../ref/models/fields.txt:897
# 1a3bf8ef92294f3b92591aea83787ef9
msgid "Like an :class:`IntegerField`, but only allows values under a certain (database-dependent) point."
msgstr ""

#: ../../ref/models/fields.txt:901
# 2b28aac7a56f4de9bb845d36432b45a4
msgid "``TextField``"
msgstr ""

#: ../../ref/models/fields.txt:905
# a7d1721bb520494fa0ea2eac7dfc812d
msgid "A large text field. The default form widget for this field is a :class:`~django.forms.Textarea`."
msgstr ""

#: ../../ref/models/fields.txt:910
# ec5748c856a64b1184c42e6c724785de
msgid "If you are using this field with MySQLdb 1.2.1p2 and the ``utf8_bin`` collation (which is *not* the default), there are some issues to be aware of. Refer to the :ref:`MySQL database notes <mysql-collation>` for details."
msgstr ""

#: ../../ref/models/fields.txt:920
# 8130762ae836447398b4e78b87dfe2e5
msgid "A time, represented in Python by a ``datetime.time`` instance. Accepts the same auto-population options as :class:`DateField`."
msgstr ""

#: ../../ref/models/fields.txt:923
# 8b97a63f677a470c8080e38d87a1dd07
msgid "The default form widget for this field is a :class:`~django.forms.TextInput`. The admin adds some JavaScript shortcuts."
msgstr ""

#: ../../ref/models/fields.txt:931
# a54d3306cdd94fb4a061a11f29459b4b
msgid "A :class:`CharField` for a URL."
msgstr ""

#: ../../ref/models/fields.txt:935
# b8b8cfc8ad424ec3a7b3a7f3bdf8f438
msgid "Like all :class:`CharField` subclasses, :class:`URLField` takes the optional :attr:`~CharField.max_length` argument. If you don't specify :attr:`~CharField.max_length`, a default of 200 is used."
msgstr ""

#: ../../ref/models/fields.txt:941
# 210d63361ac84e87bbc761b0fd9ef500
msgid "The current value of the field will be displayed as a clickable link above the input widget."
msgstr ""

#: ../../ref/models/fields.txt:946
# 9ce5771c1a8b4fcca8017e5d0e33dbc7
msgid "Relationship fields"
msgstr ""

#: ../../ref/models/fields.txt:953
# ba3c57ef01ae44f6a264fef4e495870e
msgid "Django also defines a set of fields that represent relations."
msgstr ""

#: ../../ref/models/fields.txt:958
# b7a0c7e25c804e07940993f3d7564f17
msgid "``ForeignKey``"
msgstr ""

#: ../../ref/models/fields.txt:962
# 3a8d0fbb8537441190977024386957d6
msgid "A many-to-one relationship. Requires a positional argument: the class to which the model is related."
msgstr ""

#: ../../ref/models/fields.txt:967
# b309baeed3084ef6977ff14e442ee879
msgid "To create a recursive relationship -- an object that has a many-to-one relationship with itself -- use ``models.ForeignKey('self')``."
msgstr ""

#: ../../ref/models/fields.txt:972
# ab1cbb310f874d5b82e17d5705a08a95
msgid "If you need to create a relationship on a model that has not yet been defined, you can use the name of the model, rather than the model object itself::"
msgstr ""

#: ../../ref/models/fields.txt:982
# d242fa45da474c259c002abd888c76aa
msgid "To refer to models defined in another application, you can explicitly specify a model with the full application label. For example, if the ``Manufacturer`` model above is defined in another application called ``production``, you'd need to use::"
msgstr ""

#: ../../ref/models/fields.txt:990
# 349a0f90b16a4e90a4c441a7339e84f3
msgid "This sort of reference can be useful when resolving circular import dependencies between two applications."
msgstr ""

#: ../../ref/models/fields.txt:993
# 1cb1b1bda84843b38a15472d8c49143e
msgid "A database index is automatically created on the ``ForeignKey``. You can disable this by setting :attr:`~Field.db_index` to ``False``.  You may want to avoid the overhead of an index if you are creating a foreign key for consistency rather than joins, or if you will be creating an alternative index like a partial or multiple column index."
msgstr ""

#: ../../ref/models/fields.txt:1000
#: ../../ref/models/fields.txt:1127
# de531bfb57994d078a8ca80f9025a599
# aeb7cd8b83e6430ebfd5e6626811be05
msgid "Database Representation"
msgstr ""

#: ../../ref/models/fields.txt:1002
# fb3dbe6d309d4615bf3f3d7a63b989f5
msgid "Behind the scenes, Django appends ``\"_id\"`` to the field name to create its database column name. In the above example, the database table for the ``Car`` model will have a ``manufacturer_id`` column. (You can change this explicitly by specifying :attr:`~Field.db_column`) However, your code should never have to deal with the database column name, unless you write custom SQL. You'll always deal with the field names of your model object."
msgstr ""

#: ../../ref/models/fields.txt:1012
#: ../../ref/models/fields.txt:1141
# f113a697d9c34f4fba4d8a0db253699c
# 663102db731c48fd934490ec3ca7449e
msgid "Arguments"
msgstr ""

#: ../../ref/models/fields.txt:1014
# 7daae15cb2054bdb86e247d539557424
msgid ":class:`ForeignKey` accepts an extra set of arguments -- all optional -- that define the details of how the relation works."
msgstr ""

#: ../../ref/models/fields.txt:1019
# fb34f464fea04650be50093a32401e51
msgid "A dictionary of lookup arguments and values (see :doc:`/topics/db/queries`) that limit the available admin or ModelForm choices for this object. Use this with functions from the Python ``datetime`` module to limit choices of objects by date. For example::"
msgstr ""

#: ../../ref/models/fields.txt:1026
# f0707a02ec8c4e63affb31cbe3fac7fe
msgid "only allows the choice of related objects with a ``pub_date`` before the current date to be chosen."
msgstr ""

#: ../../ref/models/fields.txt:1029
# 52ce1857658540e1bc395acf87ad25c6
msgid "Instead of a dictionary this can also be a :class:`~django.db.models.Q` object for more :ref:`complex queries <complex-lookups-with-q>`. However, if ``limit_choices_to`` is a :class:`~django.db.models.Q` object then it will only have an effect on the choices available in the admin when the field is not listed in ``raw_id_fields`` in the ``ModelAdmin`` for the model."
msgstr ""

#: ../../ref/models/fields.txt:1037
# 0edc58a1bece430aaa1b1237df8e1c0d
msgid "The name to use for the relation from the related object back to this one. See the :ref:`related objects documentation <backwards-related-objects>` for a full explanation and example. Note that you must set this value when defining relations on :ref:`abstract models <abstract-base-classes>`; and when you do so :ref:`some special syntax <abstract-related-name>` is available."
msgstr ""

#: ../../ref/models/fields.txt:1044
# 6e8133860d86407ab831fff8ee0387f0
msgid "If you'd prefer Django not to create a backwards relation, set ``related_name`` to ``'+'`` or end it with ``'+'``. For example, this will ensure that the ``User`` model won't have a backwards relation to this model::"
msgstr ""

#: ../../ref/models/fields.txt:1053
# 7c7e2d5fd63a474194e22dc1a6e4dd8f
msgid "The field on the related object that the relation is to. By default, Django uses the primary key of the related object."
msgstr ""

#: ../../ref/models/fields.txt:1058
# d9705a3c67294424b7986218bf4b9b58
msgid "When an object referenced by a :class:`ForeignKey` is deleted, Django by default emulates the behavior of the SQL constraint ``ON DELETE CASCADE`` and also deletes the object containing the ``ForeignKey``. This behavior can be overridden by specifying the :attr:`on_delete` argument. For example, if you have a nullable :class:`ForeignKey` and you want it to be set null when the referenced object is deleted::"
msgstr ""

#: ../../ref/models/fields.txt:1067
# 55fc429ef2be4372ba1ef5584bb19ca7
msgid "The possible values for :attr:`~ForeignKey.on_delete` are found in :mod:`django.db.models`:"
msgstr ""

#: ../../ref/models/fields.txt:1072
# 88491282d35a4c92ae77951b7c6fbf11
msgid "Cascade deletes; the default."
msgstr ""

#: ../../ref/models/fields.txt:1076
# 54e7b79b717c492b8d4abfad1452e5a4
msgid "Prevent deletion of the referenced object by raising :exc:`~django.db.models.ProtectedError`, a subclass of :exc:`django.db.IntegrityError`."
msgstr ""

#: ../../ref/models/fields.txt:1082
# cc61aaea209c469b86ae1ef6b39a08f4
msgid "Set the :class:`ForeignKey` null; this is only possible if :attr:`~Field.null` is ``True``."
msgstr ""

#: ../../ref/models/fields.txt:1087
# 3d569a3aba014e39868735f271462e74
msgid "Set the :class:`ForeignKey` to its default value; a default for the :class:`ForeignKey` must be set."
msgstr ""

#: ../../ref/models/fields.txt:1092
# 909d14e6b7dd4fc7905683b139eb0d20
msgid "Set the :class:`ForeignKey` to the value passed to :func:`~django.db.models.SET()`, or if a callable is passed in, the result of calling it. In most cases, passing a callable will be necessary to avoid executing queries at the time your models.py is imported::"
msgstr ""

#: ../../ref/models/fields.txt:1106
# 70a6f584cb15458d9f04f19c02c829c6
msgid "Take no action. If your database backend enforces referential integrity, this will cause an :exc:`~django.db.IntegrityError` unless you manually add a SQL ``ON DELETE`` constraint to the database field (perhaps using :ref:`initial sql<initial-sql>`)."
msgstr ""

#: ../../ref/models/fields.txt:1114
# 9bdb89816cdf48e193085d488eaafec3
msgid "``ManyToManyField``"
msgstr ""

#: ../../ref/models/fields.txt:1118
# 773d2558536d412d912f74250f0e0918
msgid "A many-to-many relationship. Requires a positional argument: the class to which the model is related. This works exactly the same as it does for :class:`ForeignKey`, including all the options regarding :ref:`recursive <recursive-relationships>` and :ref:`lazy <lazy-relationships>` relationships."
msgstr ""

#: ../../ref/models/fields.txt:1123
# 46e1003e8ecf42a99845cf52a6a8be14
msgid "Related objects can be added, removed, or created with the field's :class:`~django.db.models.fields.related.RelatedManager`."
msgstr ""

#: ../../ref/models/fields.txt:1129
# 7f42e34384af47fabb689c40bdc5017f
msgid "Behind the scenes, Django creates an intermediary join table to represent the many-to-many relationship. By default, this table name is generated using the name of the many-to-many field and the name of the table for the model that contains it. Since some databases don't support table names above a certain length, these table names will be automatically truncated to 64 characters and a uniqueness hash will be used. This means you might see table names like ``author_books_9cdf4``; this is perfectly normal.  You can manually provide the name of the join table using the :attr:`~ManyToManyField.db_table` option."
msgstr ""

#: ../../ref/models/fields.txt:1143
# 20e9d2661a2a4e80a9bccfe4306aa378
msgid ":class:`ManyToManyField` accepts an extra set of arguments -- all optional -- that control how the relationship functions."
msgstr ""

#: ../../ref/models/fields.txt:1148
# 8b8bd788ae334b259ca6ef178143dd8a
msgid "Same as :attr:`ForeignKey.related_name`."
msgstr ""

#: ../../ref/models/fields.txt:1150
# 52c203b3ebc34ba6892efa823811c1a2
msgid "If you have more than one ``ManyToManyField`` pointing to the same model and want to suppress the backwards relations, set each ``related_name`` to a unique value ending with ``'+'``::"
msgstr ""

#: ../../ref/models/fields.txt:1159
# 6990bfc4830f4884972260ed59586f1d
msgid "Same as :attr:`ForeignKey.limit_choices_to`."
msgstr ""

#: ../../ref/models/fields.txt:1161
# 811a0fc7ac9b45128b53746cc13b3a3a
msgid "``limit_choices_to`` has no effect when used on a ``ManyToManyField`` with a custom intermediate table specified using the :attr:`~ManyToManyField.through` parameter."
msgstr ""

#: ../../ref/models/fields.txt:1167
# 6af20ad33b654df3bab8b06ee3cf1693
msgid "Only used in the definition of ManyToManyFields on self. Consider the following model::"
msgstr ""

#: ../../ref/models/fields.txt:1173
# 0ff7901d1cdb480ebc7ffd9169242b29
msgid "When Django processes this model, it identifies that it has a :class:`ManyToManyField` on itself, and as a result, it doesn't add a ``person_set`` attribute to the ``Person`` class. Instead, the :class:`ManyToManyField` is assumed to be symmetrical -- that is, if I am your friend, then you are my friend."
msgstr ""

#: ../../ref/models/fields.txt:1179
# eb2f2655c66e40688f87074e5b04585e
msgid "If you do not want symmetry in many-to-many relationships with ``self``, set :attr:`~ManyToManyField.symmetrical` to ``False``. This will force Django to add the descriptor for the reverse relationship, allowing :class:`ManyToManyField` relationships to be non-symmetrical."
msgstr ""

#: ../../ref/models/fields.txt:1186
# f70baa54549b4423b51af7363f356a40
msgid "Django will automatically generate a table to manage many-to-many relationships. However, if you want to manually specify the intermediary table, you can use the :attr:`~ManyToManyField.through` option to specify the Django model that represents the intermediate table that you want to use."
msgstr ""

#: ../../ref/models/fields.txt:1192
# 0b08c8eb6f8a4be5a89b1fee03f0e578
msgid "The most common use for this option is when you want to associate :ref:`extra data with a many-to-many relationship <intermediary-manytomany>`."
msgstr ""

#: ../../ref/models/fields.txt:1198
# 8c96006bf81c4f4b9ea1aa18493bb31b
msgid "The name of the table to create for storing the many-to-many data. If this is not provided, Django will assume a default name based upon the names of: the table for the model defining the relationship and the name of the field itself."
msgstr ""

#: ../../ref/models/fields.txt:1206
# 83bcca319047460b962ab8718d02a575
msgid "``OneToOneField``"
msgstr ""

#: ../../ref/models/fields.txt:1210
# ee7385e2348d496cabff947bf57539e9
msgid "A one-to-one relationship. Conceptually, this is similar to a :class:`ForeignKey` with :attr:`unique=True <Field.unique>`, but the \"reverse\" side of the relation will directly return a single object."
msgstr ""

#: ../../ref/models/fields.txt:1214
# 9300b75a80824665b36ad30636d68c75
msgid "This is most useful as the primary key of a model which \"extends\" another model in some way; :ref:`multi-table-inheritance` is implemented by adding an implicit one-to-one relation from the child model to the parent model, for example."
msgstr ""

#: ../../ref/models/fields.txt:1219
# e2d0a483e65b4fa79581d8c47be8c925
msgid "One positional argument is required: the class to which the model will be related. This works exactly the same as it does for :class:`ForeignKey`, including all the options regarding :ref:`recursive <recursive-relationships>` and :ref:`lazy <lazy-relationships>` relationships."
msgstr ""

#: ../../ref/models/fields.txt:1226
# a498ac95b4ea49ca8cfeec828f8eb1be
msgid "Additionally, ``OneToOneField`` accepts all of the extra arguments accepted by :class:`ForeignKey`, plus one extra argument:"
msgstr ""

#: ../../ref/models/fields.txt:1231
# ea3e83dfb44e4d7eb51a060ede8f0af6
msgid "When ``True`` and used in a model which inherits from another (concrete) model, indicates that this field should be used as the link back to the parent class, rather than the extra ``OneToOneField`` which would normally be implicitly created by subclassing."
msgstr ""

#: ../../ref/models/index.txt:5
# 13d0f3de00924b92b868977cf6a5fc30
msgid "Model API reference. For introductory material, see :doc:`/topics/db/models`."
msgstr ""

#: ../../ref/models/instances.txt:3
# 980aef652b7142be843c9caef536f0d0
msgid "Model instance reference"
msgstr ""

#: ../../ref/models/instances.txt:7
# 49d0d6e3e33a43e2afc5008f213b08a8
msgid "This document describes the details of the ``Model`` API. It builds on the material presented in the :doc:`model </topics/db/models>` and :doc:`database query </topics/db/queries>` guides, so you'll probably want to read and understand those documents before reading this one."
msgstr ""

#: ../../ref/models/instances.txt:12
#: ../../ref/models/querysets.txt:12
# 3d709e9b4dd44c51ad8238d189ae00f1
# 29d4fea0c45d4d47b32553a8c70e40be
msgid "Throughout this reference we'll use the :ref:`example Weblog models <queryset-model-example>` presented in the :doc:`database query guide </topics/db/queries>`."
msgstr ""

#: ../../ref/models/instances.txt:17
# ad92cb72c9104915a10f1a5671d7cfe9
msgid "Creating objects"
msgstr ""

#: ../../ref/models/instances.txt:19
# 3295706bafd44da6aad4ab3890ad2ee4
msgid "To create a new instance of a model, just instantiate it like any other Python class:"
msgstr ""

#: ../../ref/models/instances.txt:24
# 1a344db5a60d442f8729c2e1dc7b01ca
msgid "The keyword arguments are simply the names of the fields you've defined on your model. Note that instantiating a model in no way touches your database; for that, you need to :meth:`~Model.save()`."
msgstr ""

#: ../../ref/models/instances.txt:30
# 00e3d500ee314cc5ab6d85220e8fc96a
msgid "You may be tempted to customize the model by overriding the ``__init__`` method. If you do so, however, take care not to change the calling signature as any change may prevent the model instance from being saved. Rather than overriding ``__init__``, try using one of these approaches:"
msgstr ""

#: ../../ref/models/instances.txt:35
# 6f9e81e065594549a90618dbc0e782c8
msgid "Add a classmethod on the model class::"
msgstr ""

#: ../../ref/models/instances.txt:48
# ad97246f49bb4fa5b4e16df99df7339a
msgid "Add a method on a custom manager (usually preferred)::"
msgstr ""

#: ../../ref/models/instances.txt:66
# 61c67c2f9301476fae84f39e7aababfa
msgid "Validating objects"
msgstr ""

#: ../../ref/models/instances.txt:68
# 52471a121923462ba9e247f48ba62232
msgid "There are three steps involved in validating a model:"
msgstr ""

#: ../../ref/models/instances.txt:70
# 5591ee352abc40f78f40ecad4f7078ad
msgid "Validate the model fields - :meth:`Model.clean_fields()`"
msgstr ""

#: ../../ref/models/instances.txt:71
# 580e455db9ba41b4a4fb7a7b3024c0e0
msgid "Validate the model as a whole - :meth:`Model.clean()`"
msgstr ""

#: ../../ref/models/instances.txt:72
# 7893fe74660b404696dac81f1c3296f9
msgid "Validate the field uniqueness - :meth:`Model.validate_unique()`"
msgstr ""

#: ../../ref/models/instances.txt:74
# e1da332399a0427aba76128192b08a39
msgid "All three steps are performed when you call a model's :meth:`~Model.full_clean()` method."
msgstr ""

#: ../../ref/models/instances.txt:77
# 81cc5002ec374fa3bf740516674cd828
msgid "When you use a :class:`~django.forms.ModelForm`, the call to :meth:`~django.forms.Form.is_valid()` will perform these validation steps for all the fields that are included on the form. See the :doc:`ModelForm documentation </topics/forms/modelforms>` for more information. You should only need to call a model's :meth:`~Model.full_clean()` method if you plan to handle validation errors yourself, or if you have excluded fields from the :class:`~django.forms.ModelForm` that require validation."
msgstr ""

#: ../../ref/models/instances.txt:87
# 4e4bb669a52e4a4d881f8d68b0e96730
msgid "This method calls :meth:`Model.clean_fields()`, :meth:`Model.clean()`, and :meth:`Model.validate_unique()`, in that order and raises a :exc:`~django.core.exceptions.ValidationError` that has a ``message_dict`` attribute containing errors from all three stages."
msgstr ""

#: ../../ref/models/instances.txt:92
# 9230a50326d14044ae41fd2800f4ed02
msgid "The optional ``exclude`` argument can be used to provide a list of field names that can be excluded from validation and cleaning. :class:`~django.forms.ModelForm` uses this argument to exclude fields that aren't present on your form from being validated since any errors raised could not be corrected by the user."
msgstr ""

#: ../../ref/models/instances.txt:98
# 2eec743fefd84affa42276509145d40c
msgid "Note that ``full_clean()`` will *not* be called automatically when you call your model's :meth:`~Model.save()` method, nor as a result of :class:`~django.forms.ModelForm` validation. In the case of :class:`~django.forms.ModelForm` validation, :meth:`Model.clean_fields()`, :meth:`Model.clean()`, and :meth:`Model.validate_unique()` are all called individually."
msgstr ""

#: ../../ref/models/instances.txt:105
# f71071ed16e7494f87c7015aa4b6fcf5
msgid "You'll need to call ``full_clean`` manually when you want to run one-step model validation for your own manually created models. For example::"
msgstr ""

#: ../../ref/models/instances.txt:115
# df7b0b4adc1c4c9199ab93e86994a10f
msgid "The first step ``full_clean()`` performs is to clean each individual field."
msgstr ""

#: ../../ref/models/instances.txt:119
# 23ab71d6ef0d491da5cba1c9433df011
msgid "This method will validate all fields on your model. The optional ``exclude`` argument lets you provide a list of field names to exclude from validation. It will raise a :exc:`~django.core.exceptions.ValidationError` if any fields fail validation."
msgstr ""

#: ../../ref/models/instances.txt:124
# 15ae487a8f0d493cb4747a01560ac6aa
msgid "The second step ``full_clean()`` performs is to call :meth:`Model.clean()`. This method should be overridden to perform custom validation on your model."
msgstr ""

#: ../../ref/models/instances.txt:129
# 81d258e6243741d4a9bcc40b036ba44a
msgid "This method should be used to provide custom model validation, and to modify attributes on your model if desired. For instance, you could use it to automatically provide a value for a field, or to do validation that requires access to more than a single field::"
msgstr ""

#: ../../ref/models/instances.txt:143
# 48f5863c7fbe4c7eaf4b4f1cfeb6ea1c
msgid "Any :exc:`~django.core.exceptions.ValidationError` exceptions raised by ``Model.clean()`` will be stored in a special key error dictionary key, ``NON_FIELD_ERRORS``, that is used for errors that are tied to the entire model instead of to a specific field::"
msgstr ""

#: ../../ref/models/instances.txt:154
# 88ac1a1ab0084d2a9437693850fb8814
msgid "Finally, ``full_clean()`` will check any unique constraints on your model."
msgstr ""

#: ../../ref/models/instances.txt:158
# 9a655fbf92bd431eb42cc5dad2f334c3
msgid "This method is similar to :meth:`~Model.clean_fields`, but validates all uniqueness constraints on your model instead of individual field values. The optional ``exclude`` argument allows you to provide a list of field names to exclude from validation. It will raise a :exc:`~django.core.exceptions.ValidationError` if any fields fail validation."
msgstr ""

#: ../../ref/models/instances.txt:164
# a6af14b19951419ea9268db0760b584b
msgid "Note that if you provide an ``exclude`` argument to ``validate_unique()``, any :attr:`~django.db.models.Options.unique_together` constraint involving one of the fields you provided will not be checked."
msgstr ""

#: ../../ref/models/instances.txt:170
# 9b936dbe49b24edebf863125066a9070
msgid "Saving objects"
msgstr ""

#: ../../ref/models/instances.txt:172
# b91e0121d80d4aa8a24155d295265ad3
msgid "To save an object back to the database, call ``save()``:"
msgstr ""

#: ../../ref/models/instances.txt:176
# 3dc44ee11fea45a795000e7466e20e96
msgid "If you want customized saving behavior, you can override this ``save()`` method. See :ref:`overriding-model-methods` for more details."
msgstr ""

#: ../../ref/models/instances.txt:179
# c87426e7dbc0429dbd1e444f64f288dc
msgid "The model save process also has some subtleties; see the sections below."
msgstr ""

#: ../../ref/models/instances.txt:182
# e7611d588bce49bf9c9eb3edba429743
msgid "Auto-incrementing primary keys"
msgstr ""

#: ../../ref/models/instances.txt:184
# aeb0312b70104c02be1ec93c66b0314f
msgid "If a model has an :class:`~django.db.models.AutoField` — an auto-incrementing primary key — then that auto-incremented value will be calculated and saved as an attribute on your object the first time you call ``save()``::"
msgstr ""

#: ../../ref/models/instances.txt:193
# cebe0125065e474492b785d265103c6c
msgid "There's no way to tell what the value of an ID will be before you call ``save()``, because that value is calculated by your database, not by Django."
msgstr ""

#: ../../ref/models/instances.txt:196
# 47fa8ed132064a9db3c97d9e49d94d58
msgid "For convenience, each model has an :class:`~django.db.models.AutoField` named ``id`` by default unless you explicitly specify ``primary_key=True`` on a field in your model. See the documentation for :class:`~django.db.models.AutoField` for more details."
msgstr ""

#: ../../ref/models/instances.txt:202
# 27694aec268144f29c1d5a9f1ed3cb08
msgid "The ``pk`` property"
msgstr ""

#: ../../ref/models/instances.txt:206
# a50ebb53131f419d90477e5d17ecfc48
msgid "Regardless of whether you define a primary key field yourself, or let Django supply one for you, each model will have a property called ``pk``. It behaves like a normal attribute on the model, but is actually an alias for whichever attribute is the primary key field for the model. You can read and set this value, just as you would for any other attribute, and it will update the correct field in the model."
msgstr ""

#: ../../ref/models/instances.txt:214
# 3b346b3e41094bf98a879a46a680304e
msgid "Explicitly specifying auto-primary-key values"
msgstr ""

#: ../../ref/models/instances.txt:216
# d6bf5e9f5ad44c65b14de6d03ba5c0ed
msgid "If a model has an :class:`~django.db.models.AutoField` but you want to define a new object's ID explicitly when saving, just define it explicitly before saving, rather than relying on the auto-assignment of the ID::"
msgstr ""

#: ../../ref/models/instances.txt:225
# ffeeee2e638f4e138c5d26845863eb73
msgid "If you assign auto-primary-key values manually, make sure not to use an already-existing primary-key value! If you create a new object with an explicit primary-key value that already exists in the database, Django will assume you're changing the existing record rather than creating a new one."
msgstr ""

#: ../../ref/models/instances.txt:230
# c3a2bce9233d42ba99ad7f8e8bbfda47
msgid "Given the above ``'Cheddar Talk'`` blog example, this example would override the previous record in the database::"
msgstr ""

#: ../../ref/models/instances.txt:236
# 27456b7076fd4478a065bd640c99a7c7
msgid "See `How Django knows to UPDATE vs. INSERT`_, below, for the reason this happens."
msgstr ""

#: ../../ref/models/instances.txt:239
# d2ec7f6af25944cd8274f7749735a341
msgid "Explicitly specifying auto-primary-key values is mostly useful for bulk-saving objects, when you're confident you won't have primary-key collision."
msgstr ""

#: ../../ref/models/instances.txt:243
# 950ce51a12a84e5eb395c9a760db9f8d
msgid "What happens when you save?"
msgstr ""

#: ../../ref/models/instances.txt:245
# d0216ff21d5344e5a1b2754c716c4a0b
msgid "When you save an object, Django performs the following steps:"
msgstr ""

#: ../../ref/models/instances.txt:247
# 4401a230aac943c9af8c04f82326cf43
msgid "**Emit a pre-save signal.** The :doc:`signal </ref/signals>` :attr:`django.db.models.signals.pre_save` is sent, allowing any functions listening for that signal to take some customized action."
msgstr ""

#: ../../ref/models/instances.txt:252
# 742427552adc4302b49bcfe0c19bf749
msgid "**Pre-process the data.** Each field on the object is asked to perform any automated data modification that the field may need to perform."
msgstr ""

#: ../../ref/models/instances.txt:256
# 9dfec0541e8548e3bbe3c964b09bda24
msgid "Most fields do *no* pre-processing — the field data is kept as-is. Pre-processing is only used on fields that have special behavior.  For example, if your model has a :class:`~django.db.models.DateField` with ``auto_now=True``, the pre-save phase will alter the data in the object to ensure that the date field contains the current date stamp. (Our documentation doesn't yet include a list of all the fields with this \"special behavior.\")"
msgstr ""

#: ../../ref/models/instances.txt:264
# f8fe59f34525499aaf40b8dcd6d9c024
msgid "**Prepare the data for the database.** Each field is asked to provide its current value in a data type that can be written to the database."
msgstr ""

#: ../../ref/models/instances.txt:267
# 60d76e4dff1247e89ddee6780d75a913
msgid "Most fields require *no* data preparation. Simple data types, such as integers and strings, are 'ready to write' as a Python object. However, more complex data types often require some modification."
msgstr ""

#: ../../ref/models/instances.txt:271
# d65a71d4fb3f4fd988c03fa923d8886f
msgid "For example, :class:`~django.db.models.DateField` fields use a Python ``datetime`` object to store data. Databases don't store ``datetime`` objects, so the field value must be converted into an ISO-compliant date string for insertion into the database."
msgstr ""

#: ../../ref/models/instances.txt:276
# 35950abb41de4ac692b61136eb605402
msgid "**Insert the data into the database.** The pre-processed, prepared data is then composed into an SQL statement for insertion into the database."
msgstr ""

#: ../../ref/models/instances.txt:280
# 95366b9ba8e14f16a3f4f1a335c5cf13
msgid "**Emit a post-save signal.** The signal :attr:`django.db.models.signals.post_save` is sent, allowing any functions listening for that signal to take some customized action."
msgstr ""

#: ../../ref/models/instances.txt:286
# 5f965b43766648fd89e4b5379f6dd81a
msgid "How Django knows to UPDATE vs. INSERT"
msgstr ""

#: ../../ref/models/instances.txt:288
# c5fccf1e0c344354be157f07f29208e6
msgid "You may have noticed Django database objects use the same ``save()`` method for creating and changing objects. Django abstracts the need to use ``INSERT`` or ``UPDATE`` SQL statements. Specifically, when you call ``save()``, Django follows this algorithm:"
msgstr ""

#: ../../ref/models/instances.txt:293
# dd0c0288ebb347dcbd6d8217db49c43b
msgid "If the object's primary key attribute is set to a value that evaluates to ``True`` (i.e., a value other than ``None`` or the empty string), Django executes a ``SELECT`` query to determine whether a record with the given primary key already exists."
msgstr ""

#: ../../ref/models/instances.txt:297
# 1cea2b19186648b69d8de3c48a0b0ac3
msgid "If the record with the given primary key does already exist, Django executes an ``UPDATE`` query."
msgstr ""

#: ../../ref/models/instances.txt:299
# c63c2de66fac43e9abf449b5f645c1f0
msgid "If the object's primary key attribute is *not* set, or if it's set but a record doesn't exist, Django executes an ``INSERT``."
msgstr ""

#: ../../ref/models/instances.txt:302
# 78e3bc15e5374a768d8df715aacffdeb
msgid "The one gotcha here is that you should be careful not to specify a primary-key value explicitly when saving new objects, if you cannot guarantee the primary-key value is unused. For more on this nuance, see `Explicitly specifying auto-primary-key values`_ above and `Forcing an INSERT or UPDATE`_ below."
msgstr ""

#: ../../ref/models/instances.txt:310
# d1454ed9750647f4b76df9cc1aaf5833
msgid "Forcing an INSERT or UPDATE"
msgstr ""

#: ../../ref/models/instances.txt:312
# 1086ac439daa4dcdb0b1f2da4742a5cc
msgid "In some rare circumstances, it's necessary to be able to force the :meth:`~Model.save()` method to perform an SQL ``INSERT`` and not fall back to doing an ``UPDATE``. Or vice-versa: update, if possible, but not insert a new row. In these cases you can pass the ``force_insert=True`` or ``force_update=True`` parameters to the :meth:`~Model.save()` method. Obviously, passing both parameters is an error: you cannot both insert *and* update at the same time!"
msgstr ""

#: ../../ref/models/instances.txt:320
# 77ea9711c0964917896e9f6c7428fcf0
msgid "It should be very rare that you'll need to use these parameters. Django will almost always do the right thing and trying to override that will lead to errors that are difficult to track down. This feature is for advanced use only."
msgstr ""

#: ../../ref/models/instances.txt:325
# 7a8e1862b8b641c3952e5f52221f6c70
msgid "Using ``update_fields`` will force an update similarly to ``force_update``."
msgstr ""

#: ../../ref/models/instances.txt:328
# 6fb6933497fe4ca996fb57821a4836f8
msgid "Updating attributes based on existing fields"
msgstr ""

#: ../../ref/models/instances.txt:330
# eb02a97b3f5f4aa0b380e84c01d2bdd0
msgid "Sometimes you'll need to perform a simple arithmetic task on a field, such as incrementing or decrementing the current value. The obvious way to achieve this is to do something like::"
msgstr ""

#: ../../ref/models/instances.txt:338
# e036db95f26b416fbc0a223652fe7a94
msgid "If the old ``number_sold`` value retrieved from the database was 10, then the value of 11 will be written back to the database."
msgstr ""

#: ../../ref/models/instances.txt:341
# 106ebd3bd2414f4cb938205f89bb9e23
msgid "This sequence has a standard update problem in that it contains a race condition. If another thread of execution has already saved an updated value after the current thread retrieved the old value, the current thread will only save the old value plus one, rather than the new (current) value plus one."
msgstr ""

#: ../../ref/models/instances.txt:346
# b43226fe9845495d9affd4676215a2cb
msgid "The process can be made robust and slightly faster by expressing the update relative to the original field value, rather than as an explicit assignment of a new value. Django provides :ref:`F() expressions <query-expressions>` for performing this kind of relative update. Using ``F()`` expressions, the previous example is expressed as::"
msgstr ""

#: ../../ref/models/instances.txt:357
# 25191b41880f4aeaa21b5d10649cc5df
msgid "This approach doesn't use the initial value from the database. Instead, it makes the database do the update based on whatever value is current at the time that the :meth:`~Model.save()` is executed."
msgstr ""

#: ../../ref/models/instances.txt:361
# 95e8a64fe0134dcc8b263ea9dd48d78b
msgid "Once the object has been saved, you must reload the object in order to access the actual value that was applied to the updated field::"
msgstr ""

#: ../../ref/models/instances.txt:368
# 05774b9e900b4c61805a908d3d713544
msgid "For more details, see the documentation on :ref:`F() expressions <query-expressions>` and their :ref:`use in update queries <topics-db-queries-update>`."
msgstr ""

#: ../../ref/models/instances.txt:373
# f79a4f7806164613b04039e500bd7ce2
msgid "Specifying which fields to save"
msgstr ""

#: ../../ref/models/instances.txt:377
# 02c2d307f69e4b919aa13bac56a3c3d4
msgid "If ``save()`` is passed a list of field names in keyword argument ``update_fields``, only the fields named in that list will be updated. This may be desirable if you want to update just one or a few fields on an object. There will be a slight performance benefit from preventing all of the model fields from being updated in the database. For example::"
msgstr ""

#: ../../ref/models/instances.txt:386
# 283bcabda136400ebc3d3627bff0a198
msgid "The ``update_fields`` argument can be any iterable containing strings. An empty ``update_fields`` iterable will skip the save. A value of None will perform an update on all fields."
msgstr ""

#: ../../ref/models/instances.txt:390
# bf2ec0b648ce4160a96387d1ce1f1f32
msgid "Specifying ``update_fields`` will force an update."
msgstr ""

#: ../../ref/models/instances.txt:392
# ab9c085630ee4269b7be7ed6a6eba392
msgid "When saving a model fetched through deferred model loading (:meth:`~django.db.models.query.QuerySet.only()` or :meth:`~django.db.models.query.QuerySet.defer()`) only the fields loaded from the DB will get updated. In effect there is an automatic ``update_fields`` in this case. If you assign or change any deferred field value, the field will be added to the updated fields."
msgstr ""

#: ../../ref/models/instances.txt:400
# a74732a860d34772a6b7845477c18a6f
msgid "Deleting objects"
msgstr ""

#: ../../ref/models/instances.txt:404
# 736171bb31404c08babcce2ab1dcafb9
msgid "Issues a SQL ``DELETE`` for the object. This only deletes the object in the database; the Python instance will still exist and will still have data in its fields."
msgstr ""

#: ../../ref/models/instances.txt:408
# 1de8b34ad2f04d96bfa08261ae7753a0
msgid "For more details, including how to delete objects in bulk, see :ref:`topics-db-queries-delete`."
msgstr ""

#: ../../ref/models/instances.txt:411
# 5bcc0c203f6f4ef199312404a89dd41f
msgid "If you want customized deletion behavior, you can override the ``delete()`` method. See :ref:`overriding-model-methods` for more details."
msgstr ""

#: ../../ref/models/instances.txt:417
# d4dd380a4f394e24b20e450e857161b6
msgid "Other model instance methods"
msgstr ""

#: ../../ref/models/instances.txt:419
# 39d772ff3f31471fad99839f81877f61
msgid "A few object methods have special purposes."
msgstr ""

#: ../../ref/models/instances.txt:422
# c090aa4141cc4557a237b7bbb8e72551
msgid "``__unicode__``"
msgstr ""

#: ../../ref/models/instances.txt:426
# d80740f4eb6d4cb3883fe118bf7aea22
msgid "The ``__unicode__()`` method is called whenever you call ``unicode()`` on an object. Django uses ``unicode(obj)`` (or the related function, :meth:`str(obj) <Model.__str__>`) in a number of places. Most notably, to display an object in the Django admin site and as the value inserted into a template when it displays an object. Thus, you should always return a nice, human-readable representation of the model from the ``__unicode__()`` method."
msgstr ""

#: ../../ref/models/instances.txt:442
# af510c5c4db1451a861846a15ccceafa
msgid "If you define a ``__unicode__()`` method on your model and not a :meth:`~Model.__str__()` method, Django will automatically provide you with a :meth:`~Model.__str__()` that calls ``__unicode__()`` and then converts the result correctly to a UTF-8 encoded string object. This is recommended development practice: define only ``__unicode__()`` and let Django take care of the conversion to string objects when required."
msgstr ""

#: ../../ref/models/instances.txt:450
# f58f4d832432413eb07a83deffb5f5cd
msgid "``__str__``"
msgstr ""

#: ../../ref/models/instances.txt:454
# b20266a3105343acb95e505f69f6ee7d
msgid "The ``__str__()`` method is called whenever you call ``str()`` on an object. The main use for this method directly inside Django is when the ``repr()`` output of a model is displayed anywhere (for example, in debugging output). Thus, you should return a nice, human-readable string for the object's ``__str__()``.  It isn't required to put ``__str__()`` methods everywhere if you have sensible :meth:`~Model.__unicode__()` methods."
msgstr ""

#: ../../ref/models/instances.txt:458
# 13e4f702289040df8871e547bead6337
msgid "The previous :meth:`~Model.__unicode__()` example could be similarly written using ``__str__()`` like this::"
msgstr ""

#: ../../ref/models/instances.txt:471
# fdfd7dbc519445e5b92cbebaadc07559
msgid "``get_absolute_url``"
msgstr ""

#: ../../ref/models/instances.txt:475
# 3c90a9052d134eabac8603255b8a66a2
msgid "Define a ``get_absolute_url()`` method to tell Django how to calculate the canonical URL for an object. To callers, this method should appear to return a string that can be used to refer to the object over HTTP."
msgstr ""

#: ../../ref/models/instances.txt:484
# 4dba0ddc61f94e25b03e94006caa520e
msgid "(Whilst this code is correct and simple, it may not be the most portable way to write this kind of method. The :func:`~django.core.urlresolvers.reverse` function is usually the best approach.)"
msgstr ""

#: ../../ref/models/instances.txt:493
# 74225d09629e40828276df426f578155
msgid "One place Django uses ``get_absolute_url()`` is in the admin app. If an object defines this method, the object-editing page will have a \"View on site\" link that will jump you directly to the object's public view, as given by ``get_absolute_url()``."
msgstr ""

#: ../../ref/models/instances.txt:498
# d03cbe2a15f44cf19553d24ba9374135
msgid "Similarly, a couple of other bits of Django, such as the :doc:`syndication feed framework </ref/contrib/syndication>`, use ``get_absolute_url()`` when it is defined. If it makes sense for your model's instances to each have a unique URL, you should define ``get_absolute_url()``."
msgstr ""

#: ../../ref/models/instances.txt:503
# 92f361eea40748768bf33a512dd5d5fa
msgid "It's good practice to use ``get_absolute_url()`` in templates, instead of hard-coding your objects' URLs. For example, this template code is bad:"
msgstr ""

#: ../../ref/models/instances.txt:511
# fc7b41b434ba4e1489b5dd7cc919715f
msgid "This template code is much better:"
msgstr ""

#: ../../ref/models/instances.txt:517
# fc2e006ab7e24a46ba7c370ab195deea
msgid "The logic here is that if you change the URL structure of your objects, even for something simple such as correcting a spelling error, you don't want to have to track down every place that the URL might be created. Specify it once, in ``get_absolute_url()`` and have all your other code call that one place."
msgstr ""

#: ../../ref/models/instances.txt:523
# 253e3c9107c04d9db0d7feb7f914520b
msgid "The string you return from ``get_absolute_url()`` **must** contain only ASCII characters (required by the URI specfication, :rfc:`2396`) and be URL-encoded, if necessary."
msgstr ""

#: ../../ref/models/instances.txt:527
# 9c164d3e50754d74a825453ac9eced68
msgid "Code and templates calling ``get_absolute_url()`` should be able to use the result directly without any further processing. You may wish to use the ``django.utils.encoding.iri_to_uri()`` function to help with this if you are using unicode strings containing characters outside the ASCII range at all."
msgstr ""

#: ../../ref/models/instances.txt:534
# f810e7b54c144e458c52f82c4479018d
msgid "The ``permalink`` decorator"
msgstr ""

#: ../../ref/models/instances.txt:538
# 03f93b8907d64dbe8241271030e58adc
msgid "The ``permalink`` decorator is no longer recommended. You should use :func:`~django.core.urlresolvers.reverse` in the body of your ``get_absolute_url`` method instead."
msgstr ""

#: ../../ref/models/instances.txt:542
# 2c3bf52fd13f4a72915b469a84c814e5
msgid "In early versions of Django, there wasn't an easy way to use URLs defined in URLconf file inside :meth:`~django.db.models.Model.get_absolute_url`. That meant you would need to define the URL both in URLConf and :meth:`~django.db.models.Model.get_absolute_url`. The ``permalink`` decorator was added to overcome this DRY principle violation. However, since the introduction of :func:`~django.core.urlresolvers.reverse` there is no reason to use ``permalink`` any more."
msgstr ""

#: ../../ref/models/instances.txt:552
# c9ced1da1d6342c4b05699034389db6c
msgid "This decorator takes the name of a URL pattern (either a view name or a URL pattern name) and a list of position or keyword arguments and uses the URLconf patterns to construct the correct, full URL. It returns a string for the correct URL, with all parameters substituted in the correct positions."
msgstr ""

#: ../../ref/models/instances.txt:557
# 2ae904acd11845a083fedd3682761eca
msgid "The ``permalink`` decorator is a Python-level equivalent to the :ttag:`url` template tag and a high-level wrapper for the :func:`~django.core.urlresolvers.reverse` function."
msgstr ""

#: ../../ref/models/instances.txt:561
# cad3bfc474604f24a44be84f5b465fe6
msgid "An example should make it clear how to use ``permalink()``. Suppose your URLconf contains a line such as::"
msgstr ""

#: ../../ref/models/instances.txt:566
# 0f3e504305db4511a5ae0178d9aaae7c
msgid "...your model could have a :meth:`~django.db.models.Model.get_absolute_url` method that looked like this::"
msgstr ""

#: ../../ref/models/instances.txt:575
# fb25b23d2d054ccaa75bb93dfabede14
msgid "Similarly, if you had a URLconf entry that looked like::"
msgstr ""

#: ../../ref/models/instances.txt:579
# ce9d0622e35140fd92bfc5c0ce004183
msgid "...you could reference this using ``permalink()`` as follows::"
msgstr ""

#: ../../ref/models/instances.txt:588
# fb81790ee4b143a0b221f1f88b866df7
msgid "Notice that we specify an empty sequence for the second parameter in this case, because we only want to pass keyword parameters, not positional ones."
msgstr ""

#: ../../ref/models/instances.txt:591
# 77ee108b0e224f91aadb0eac4538cb57
msgid "In this way, you're associating the model's absolute path with the view that is used to display it, without repeating the view's URL information anywhere. You can still use the :meth:`~django.db.models.Model.get_absolute_url()` method in templates, as before."
msgstr ""

#: ../../ref/models/instances.txt:596
# 00e8e9c4253340b8be24b1e79eb64def
msgid "In some cases, such as the use of generic views or the re-use of custom views for multiple models, specifying the view function may confuse the reverse URL matcher (because multiple patterns point to the same view). For that case, Django has :ref:`named URL patterns <naming-url-patterns>`. Using a named URL pattern, it's possible to give a name to a pattern, and then reference the name rather than the view function. A named URL pattern is defined by replacing the pattern tuple by a call to the ``url`` function)::"
msgstr ""

#: ../../ref/models/instances.txt:608
# 34fa4dc9e541440a9c7bb19c4d3a2043
msgid "...and then using that name to perform the reverse URL resolution instead of the view name::"
msgstr ""

#: ../../ref/models/instances.txt:617
# 23dd7c5d08764f7890a2863be29e8e6d
msgid "More details on named URL patterns are in the :doc:`URL dispatch documentation </topics/http/urls>`."
msgstr ""

#: ../../ref/models/instances.txt:621
# 18c822a20a8f45aeb9dc6075ef0de898
msgid "Extra instance methods"
msgstr ""

#: ../../ref/models/instances.txt:623
# 7f692ee03124435889b51d5014150bad
msgid "In addition to :meth:`~Model.save()`, :meth:`~Model.delete()`, a model object might have some of the following methods:"
msgstr ""

#: ../../ref/models/instances.txt:628
# d9244c2b88824c899c03e947cc54e2ea
msgid "For every field that has :attr:`~django.db.models.Field.choices` set, the object will have a ``get_FOO_display()`` method, where ``FOO`` is the name of the field. This method returns the \"human-readable\" value of the field."
msgstr ""

#: ../../ref/models/instances.txt:657
# e4a15503ed2c4456b46f7a787c36dbec
msgid "For every :class:`~django.db.models.DateField` and :class:`~django.db.models.DateTimeField` that does not have :attr:`null=True <django.db.models.Field.null>`, the object will have ``get_next_by_FOO()`` and ``get_previous_by_FOO()`` methods, where ``FOO`` is the name of the field. This returns the next and previous object with respect to the date field, raising a :exc:`~django.core.exceptions.DoesNotExist` exception when appropriate."
msgstr ""

#: ../../ref/models/instances.txt:664
# 79bb936e37094b7f848f92444d1bfb0c
msgid "Both methods accept optional keyword arguments, which should be in the format described in :ref:`Field lookups <field-lookups>`."
msgstr ""

#: ../../ref/models/instances.txt:667
# a17a7d2fc0ae4517b7026691198568cd
msgid "Note that in the case of identical date values, these methods will use the primary key as a tie-breaker. This guarantees that no records are skipped or duplicated. That also means you cannot use those methods on unsaved objects."
msgstr ""

#: ../../ref/models/options.txt:3
# b4442de3950f497f93002a36b062ec9c
msgid "Model ``Meta`` options"
msgstr ""

#: ../../ref/models/options.txt:5
# c6935e1eb96d4911a501a02fd09ac3a4
msgid "This document explains all the possible :ref:`metadata options <meta-options>` that you can give your model in its internal ``class Meta``."
msgstr ""

#: ../../ref/models/options.txt:10
# df37064f4bbc48999d55242c8faac100
msgid "Available ``Meta`` options"
msgstr ""

#: ../../ref/models/options.txt:15
# 844b13f3009143c78c20d58eb42611f4
msgid "``abstract``"
msgstr ""

#: ../../ref/models/options.txt:19
# 4376fba5cbd840979e29d56cf74f4bbf
msgid "If ``abstract = True``, this model will be an :ref:`abstract base class <abstract-base-classes>`."
msgstr ""

#: ../../ref/models/options.txt:27
# d0de62ccd3a1424182188158537f32de
msgid "If a model exists outside of the standard :file:`models.py` (for instance, if the app's models are in submodules of ``myapp.models``), the model must define which app it is part of::"
msgstr ""

#: ../../ref/models/options.txt:34
# 3028a098bef6489bb90078e5d1268ff1
msgid "``db_table``"
msgstr ""

#: ../../ref/models/options.txt:38
# 2c805315cb724d4c884e626783602262
msgid "The name of the database table to use for the model::"
msgstr ""

#: ../../ref/models/options.txt:47
# e8125b319a7a4a159badf76125668cff
msgid "To save you time, Django automatically derives the name of the database table from the name of your model class and the app that contains it. A model's database table name is constructed by joining the model's \"app label\" -- the name you used in :djadmin:`manage.py startapp <startapp>` -- to the model's class name, with an underscore between them."
msgstr ""

#: ../../ref/models/options.txt:53
# ef6c36a0d40945679e2143c21a50f53f
msgid "For example, if you have an app ``bookstore`` (as created by ``manage.py startapp bookstore``), a model defined as ``class Book`` will have a database table named ``bookstore_book``."
msgstr ""

#: ../../ref/models/options.txt:57
# 864a19e6b0c04895bf4c451fd5b24e83
msgid "To override the database table name, use the ``db_table`` parameter in ``class Meta``."
msgstr ""

#: ../../ref/models/options.txt:60
# ebd7954228a44bbeb5055ad20ad70f83
msgid "If your database table name is an SQL reserved word, or contains characters that aren't allowed in Python variable names -- notably, the hyphen -- that's OK. Django quotes column and table names behind the scenes."
msgstr ""

#: ../../ref/models/options.txt:66
# 9ab0fbffaf3647bab50ea48aa30a845f
msgid "It is strongly advised that you use lowercase table names when you override the table name via ``db_table``, particularly if you are using the MySQL backend. See the :ref:`MySQL notes <mysql-notes>` for more details."
msgstr ""

#: ../../ref/models/options.txt:76
# 1917cd4c3cf24c559312c5a9791c9922
msgid "The name of the :doc:`database tablespace </topics/db/tablespaces>` to use for this model. The default is the project's :setting:`DEFAULT_TABLESPACE` setting, if set. If the backend doesn't support tablespaces, this option is ignored."
msgstr ""

#: ../../ref/models/options.txt:82
# 2cd5c2ac182c4cc4b578e4cf6cef73fa
msgid "``get_latest_by``"
msgstr ""

#: ../../ref/models/options.txt:86
# 051a6294c56f48c0bf3c723305e8dc6e
msgid "The name of an orderable field in the model, typically a :class:`DateField`, :class:`DateTimeField`, or :class:`IntegerField`. This specifies the default field to use in your model :class:`Manager`'s :meth:`~django.db.models.query.QuerySet.latest` method."
msgstr ""

#: ../../ref/models/options.txt:95
# cdd57504cdb2415996df945098ab7eef
msgid "See the :meth:`~django.db.models.query.QuerySet.latest` docs for more."
msgstr ""

#: ../../ref/models/options.txt:98
# 472be755d38c48f5b5b9944c144476ef
msgid "``managed``"
msgstr ""

#: ../../ref/models/options.txt:102
# ac010eb621dc41099d8f456ca80507fb
msgid "Defaults to ``True``, meaning Django will create the appropriate database tables in :djadmin:`syncdb` and remove them as part of a :djadmin:`flush` management command. That is, Django *manages* the database tables' lifecycles."
msgstr ""

#: ../../ref/models/options.txt:107
# a96a80950aae4a4aa15f2445cf979364
msgid "If ``False``, no database table creation or deletion operations will be performed for this model. This is useful if the model represents an existing table or a database view that has been created by some other means. This is the *only* difference when ``managed=False``. All other aspects of model handling are exactly the same as normal. This includes"
msgstr ""

#: ../../ref/models/options.txt:113
# 1478f7ab78474eaeb0330daeec866236
msgid "Adding an automatic primary key field to the model if you don't declare it.  To avoid confusion for later code readers, it's recommended to specify all the columns from the database table you are modeling when using unmanaged models."
msgstr ""

#: ../../ref/models/options.txt:118
# 2277207da9374a149a0ca96654555290
msgid "If a model with ``managed=False`` contains a :class:`~django.db.models.ManyToManyField` that points to another unmanaged model, then the intermediate table for the many-to-many join will also not be created. However, the intermediary table between one managed and one unmanaged model *will* be created."
msgstr ""

#: ../../ref/models/options.txt:124
# 337d9257dcfd4813ad2a0c6dc132a23b
msgid "If you need to change this default behavior, create the intermediary table as an explicit model (with ``managed`` set as needed) and use the :attr:`ManyToManyField.through` attribute to make the relation use your custom model."
msgstr ""

#: ../../ref/models/options.txt:129
# 1fe86cd8f48e4dfab36cd17907b74b5d
msgid "For tests involving models with ``managed=False``, it's up to you to ensure the correct tables are created as part of the test setup."
msgstr ""

#: ../../ref/models/options.txt:132
# bd284eedd9064ddb9de4e23133c1c903
msgid "If you're interested in changing the Python-level behavior of a model class, you *could* use ``managed=False`` and create a copy of an existing model. However, there's a better approach for that situation: :ref:`proxy-models`."
msgstr ""

#: ../../ref/models/options.txt:137
# a9ad6b1ec18243adb9fdf57133b1fc15
msgid "``order_with_respect_to``"
msgstr ""

#: ../../ref/models/options.txt:141
# 89667ccc288e406290d8a8464b69681b
msgid "Marks this object as \"orderable\" with respect to the given field. This is almost always used with related objects to allow them to be ordered with respect to a parent object. For example, if an ``Answer`` relates to a ``Question`` object, and a question has more than one answer, and the order of answers matters, you'd do this::"
msgstr ""

#: ../../ref/models/options.txt:154
# 0143e7dbf44f4b6e893cb05b203b33a8
msgid "When ``order_with_respect_to`` is set, two additional methods are provided to retrieve and to set the order of the related objects: ``get_RELATED_order()`` and ``set_RELATED_order()``, where ``RELATED`` is the lowercased model name. For example, assuming that a ``Question`` object has multiple related ``Answer`` objects, the list returned contains the primary keys of the related ``Answer`` objects::"
msgstr ""

#: ../../ref/models/options.txt:165
# 6778d2d5bbfb49b6991427e942ec9b73
msgid "The order of a ``Question`` object's related ``Answer`` objects can be set by passing in a list of ``Answer`` primary keys::"
msgstr ""

#: ../../ref/models/options.txt:170
# 6c1fcc62c9654083b3eddf42539e7b3f
msgid "The related objects also get two methods, ``get_next_in_order()`` and ``get_previous_in_order()``, which can be used to access those objects in their proper order. Assuming the ``Answer`` objects are ordered by ``id``::"
msgstr ""

#: ../../ref/models/options.txt:182
# bf219dce947046528123cf496d0896a2
msgid "``order_with_respect_to`` adds an additional field/database column named ``_order``, so be sure to handle that as you would any other change to your models if you add or change ``order_with_respect_to`` after your initial :djadmin:`syncdb`."
msgstr ""

#: ../../ref/models/options.txt:188
# f48a331240c448fcb320b2c56355019d
msgid "``ordering``"
msgstr ""

#: ../../ref/models/options.txt:192
# 62762086b17d41a0b8bfb597d0a3e3e4
msgid "The default ordering for the object, for use when obtaining lists of objects::"
msgstr ""

#: ../../ref/models/options.txt:196
# 6ade9a8289a5449bb1d7d74f7bbf9da9
msgid "This is a tuple or list of strings. Each string is a field name with an optional \"-\" prefix, which indicates descending order. Fields without a leading \"-\" will be ordered ascending. Use the string \"?\" to order randomly."
msgstr ""

#: ../../ref/models/options.txt:200
# 4b5daaf504994ec5909d62cf4df4bab2
msgid "For example, to order by a ``pub_date`` field ascending, use this::"
msgstr ""

#: ../../ref/models/options.txt:204
# 6e632c99fa0b4349a22838dba9811cae
msgid "To order by ``pub_date`` descending, use this::"
msgstr ""

#: ../../ref/models/options.txt:208
# 909981db23314e2eb4ad70d51c40d176
msgid "To order by ``pub_date`` descending, then by ``author`` ascending, use this::"
msgstr ""

#: ../../ref/models/options.txt:217
# 46efd18c1f5f4b0da02c74b197b72812
msgid "``permissions``"
msgstr ""

#: ../../ref/models/options.txt:221
# b3bd9ec6b8624338950f1924d04211ba
msgid "Extra permissions to enter into the permissions table when creating this object. Add, delete and change permissions are automatically created for each object that has ``admin`` set. This example specifies an extra permission, ``can_deliver_pizzas``::"
msgstr ""

#: ../../ref/models/options.txt:228
# 281d5d941b984bdd84c3737a6335f7b3
msgid "This is a list or tuple of 2-tuples in the format ``(permission_code, human_readable_permission_name)``."
msgstr ""

#: ../../ref/models/options.txt:232
# cd183e10e6014238af25904235b0086d
msgid "``proxy``"
msgstr ""

#: ../../ref/models/options.txt:236
# 96725e5e34d7473a84a5a968d1d77983
msgid "If ``proxy = True``, a model which subclasses another model will be treated as a :ref:`proxy model <proxy-models>`."
msgstr ""

#: ../../ref/models/options.txt:240
# 9a51463b521341158dd84773a57f680e
msgid "``unique_together``"
msgstr ""

#: ../../ref/models/options.txt:244
# 4b9fe8e3d1cb49ceaa376118f0f12c4b
msgid "Sets of field names that, taken together, must be unique::"
msgstr ""

#: ../../ref/models/options.txt:248
# 3e107d44b0894a90b698693ffedd40e5
msgid "This is a tuple of tuples that must be unique when considered together. It's used in the Django admin and is enforced at the database level (i.e., the appropriate ``UNIQUE`` statements are included in the ``CREATE TABLE`` statement)."
msgstr ""

#: ../../ref/models/options.txt:253
# 4bbbdaf5eeec4c51bec2750f8fd98789
msgid "For convenience, unique_together can be a single tuple when dealing with a single set of fields::"
msgstr ""

#: ../../ref/models/options.txt:258
# 71d71944198043888483f63d7f68bcf2
msgid "A :class:`~django.db.models.ManyToManyField` cannot be included in unique_together. (It's not clear what that would even mean!) If you need to validate uniqueness related to a :class:`~django.db.models.ManyToManyField`, try using a signal or an explicit :attr:`through <ManyToManyField.through>` model."
msgstr ""

#: ../../ref/models/options.txt:264
# 411b0db83e70490f8562beb36bc72892
msgid "``index_together``"
msgstr ""

#: ../../ref/models/options.txt:270
# 5d94eeaede0e46d084916866ba3568e4
msgid "Sets of field names that, taken together, are indexed::"
msgstr ""

#: ../../ref/models/options.txt:276
# fc6c105cc7d24594a0acb4ac6ba07cce
msgid "This list of fields will be indexed together (i.e. the appropriate ``CREATE INDEX`` statement will be issued.)"
msgstr ""

#: ../../ref/models/options.txt:284
# 0e2641bdc391470aa3f2bee8dbd0aa32
msgid "A human-readable name for the object, singular::"
msgstr ""

#: ../../ref/models/options.txt:288
# dcf2e80563d8449b8ed2da3239917ecb
msgid "If this isn't given, Django will use a munged version of the class name: ``CamelCase`` becomes ``camel case``."
msgstr ""

#: ../../ref/models/options.txt:292
# 7a124a26ff194ea5bcbb0a7b8878871e
msgid "``verbose_name_plural``"
msgstr ""

#: ../../ref/models/options.txt:296
# 333b3db23cc4472a85d32e224c6572e1
msgid "The plural name for the object::"
msgstr ""

#: ../../ref/models/options.txt:300
# 56030ab42f6743ec977a457f6a882efc
msgid "If this isn't given, Django will use :attr:`~Options.verbose_name` + ``\"s\"``."
msgstr ""

#: ../../ref/models/querysets.txt:3
# 298def318ab84ba097aac2ff610421d0
msgid "QuerySet API reference"
msgstr ""

#: ../../ref/models/querysets.txt:7
# 53a8f0a54d984476a92ccd94688220c1
msgid "This document describes the details of the ``QuerySet`` API. It builds on the material presented in the :doc:`model </topics/db/models>` and :doc:`database query </topics/db/queries>` guides, so you'll probably want to read and understand those documents before reading this one."
msgstr ""

#: ../../ref/models/querysets.txt:19
# 3136665be3b644d0b1addc398731ed54
msgid "When QuerySets are evaluated"
msgstr ""

#: ../../ref/models/querysets.txt:21
# 06bf5bbf9a7a4742909337fac7ce57a9
msgid "Internally, a ``QuerySet`` can be constructed, filtered, sliced, and generally passed around without actually hitting the database. No database activity actually occurs until you do something to evaluate the queryset."
msgstr ""

#: ../../ref/models/querysets.txt:25
# 6fe4f1dcaa82478f8d6cc8fd36888875
msgid "You can evaluate a ``QuerySet`` in the following ways:"
msgstr ""

#: ../../ref/models/querysets.txt:27
# bd7a1306fd9145b7be0ca7d33f354f5e
msgid "**Iteration.** A ``QuerySet`` is iterable, and it executes its database query the first time you iterate over it. For example, this will print the headline of all entries in the database::"
msgstr ""

#: ../../ref/models/querysets.txt:34
# 2901b265759149ee97fbe37c5e9dc55d
msgid "Note: Don't use this if all you want to do is determine if at least one result exists. It's more efficient to use :meth:`~QuerySet.exists`."
msgstr ""

#: ../../ref/models/querysets.txt:37
# 26c7fe501de94b3584b42c427779bd7b
msgid "**Slicing.** As explained in :ref:`limiting-querysets`, a ``QuerySet`` can be sliced, using Python's array-slicing syntax. Slicing an unevaluated ``QuerySet`` usually returns another unevaluated ``QuerySet``, but Django will execute the database query if you use the \"step\" parameter of slice syntax, and will return a list. Slicing a ``QuerySet`` that has been evaluated (partially or fully) also returns a list."
msgstr ""

#: ../../ref/models/querysets.txt:44
# 7fd276f432114be7a6c5a3d0a8dc991b
msgid "**Pickling/Caching.** See the following section for details of what is involved when `pickling QuerySets`_. The important thing for the purposes of this section is that the results are read from the database."
msgstr ""

#: ../../ref/models/querysets.txt:48
# 965950bede134e89a1716fe6aa43dfd7
msgid "**repr().** A ``QuerySet`` is evaluated when you call ``repr()`` on it. This is for convenience in the Python interactive interpreter, so you can immediately see your results when using the API interactively."
msgstr ""

#: ../../ref/models/querysets.txt:52
# f118fd0e3cf44a6681a33b9c9517873f
msgid "**len().** A ``QuerySet`` is evaluated when you call ``len()`` on it. This, as you might expect, returns the length of the result list."
msgstr ""

#: ../../ref/models/querysets.txt:55
# 54bd393e2977442aa4ec5ecef751d5a0
msgid "Note: *Don't* use ``len()`` on ``QuerySet``\\s if all you want to do is determine the number of records in the set. It's much more efficient to handle a count at the database level, using SQL's ``SELECT COUNT(*)``, and Django provides a ``count()`` method for precisely this reason. See ``count()`` below."
msgstr ""

#: ../../ref/models/querysets.txt:61
# d2fee21b7c8143f0b0a096961026be09
msgid "**list().** Force evaluation of a ``QuerySet`` by calling ``list()`` on it. For example::"
msgstr ""

#: ../../ref/models/querysets.txt:66
# b4e9b254894d4b8f9bd988a92ffd53a6
msgid "Be warned, though, that this could have a large memory overhead, because Django will load each element of the list into memory. In contrast, iterating over a ``QuerySet`` will take advantage of your database to load data and instantiate objects only as you need them."
msgstr ""

#: ../../ref/models/querysets.txt:71
# b86194ce89dc4248b0a8130803cf25e7
msgid "**bool().** Testing a ``QuerySet`` in a boolean context, such as using ``bool()``, ``or``, ``and`` or an ``if`` statement, will cause the query to be executed. If there is at least one result, the ``QuerySet`` is ``True``, otherwise ``False``. For example::"
msgstr ""

#: ../../ref/models/querysets.txt:79
# 2988c3bd82eb4b02bce9ab670b7b1409
msgid "Note: *Don't* use this if all you want to do is determine if at least one result exists, and don't need the actual objects. It's more efficient to use :meth:`~QuerySet.exists` (see below)."
msgstr ""

#: ../../ref/models/querysets.txt:86
# a6543fd9d0464180ab2fd01e0a160772
msgid "Pickling QuerySets"
msgstr ""

#: ../../ref/models/querysets.txt:88
# a3e50e02336c4eb2a5d9127a3b95617d
msgid "If you :mod:`pickle` a ``QuerySet``, this will force all the results to be loaded into memory prior to pickling. Pickling is usually used as a precursor to caching and when the cached queryset is reloaded, you want the results to already be present and ready for use (reading from the database can take some time, defeating the purpose of caching). This means that when you unpickle a ``QuerySet``, it contains the results at the moment it was pickled, rather than the results that are currently in the database."
msgstr ""

#: ../../ref/models/querysets.txt:96
# 54a4b5d9b3cf40a9a5e38ac34a9f0ec3
msgid "If you only want to pickle the necessary information to recreate the ``QuerySet`` from the database at a later time, pickle the ``query`` attribute of the ``QuerySet``. You can then recreate the original ``QuerySet`` (without any results loaded) using some code like this::"
msgstr ""

#: ../../ref/models/querysets.txt:106
# a39ddae48bb348959aa56bd0ffb6d7b9
msgid "The ``query`` attribute is an opaque object. It represents the internals of the query construction and is not part of the public API. However, it is safe (and fully supported) to pickle and unpickle the attribute's contents as described here."
msgstr ""

#: ../../ref/models/querysets.txt:113
# 028c0a716558491bb07db87022372cb3
msgid "Pickles of QuerySets are only valid for the version of Django that was used to generate them. If you generate a pickle using Django version N, there is no guarantee that pickle will be readable with Django version N+1. Pickles should not be used as part of a long-term archival strategy."
msgstr ""

#: ../../ref/models/querysets.txt:122
# a60a028141a942709821f4b4b2308ed0
msgid "QuerySet API"
msgstr ""

#: ../../ref/models/querysets.txt:124
# 956175f7c6ca485992cc8fbea461738e
msgid "Though you usually won't create one manually — you'll go through a :class:`~django.db.models.Manager` — here's the formal declaration of a ``QuerySet``:"
msgstr ""

#: ../../ref/models/querysets.txt:130
# 871176621c80471caa1628249a1946f9
msgid "Usually when you'll interact with a ``QuerySet`` you'll use it by :ref:`chaining filters <chaining-filters>`. To make this work, most ``QuerySet`` methods return new querysets. These methods are covered in detail later in this section."
msgstr ""

#: ../../ref/models/querysets.txt:135
# 88dd942078e84946bc19246eb97b8038
msgid "The ``QuerySet`` class has two public attributes you can use for introspection:"
msgstr ""

#: ../../ref/models/querysets.txt:140
# ddff7683149c4c958b21ab2c59ebc6b5
msgid "``True`` if the ``QuerySet`` is ordered — i.e. has an :meth:`order_by()` clause or a default ordering on the model. ``False`` otherwise."
msgstr ""

#: ../../ref/models/querysets.txt:146
# 6d6f70c82e7e43bcb6241111688f5239
msgid "The database that will be used if this query is executed now."
msgstr ""

#: ../../ref/models/querysets.txt:150
# 6d959338c2e7420bb797243c879e9f24
msgid "The ``query`` parameter to :class:`QuerySet` exists so that specialized query subclasses such as :class:`~django.contrib.gis.db.models.GeoQuerySet` can reconstruct internal query state. The value of the parameter is an opaque representation of that query state and is not part of a public API. To put it simply: if you need to ask, you don't need to use it."
msgstr ""

#: ../../ref/models/querysets.txt:160
# 21f5a57f57204a5bbc821538eef57601
msgid "Methods that return new QuerySets"
msgstr ""

#: ../../ref/models/querysets.txt:162
# 2c08c7ea551a46d7b625cc01a6a50081
msgid "Django provides a range of ``QuerySet`` refinement methods that modify either the types of results returned by the ``QuerySet`` or the way its SQL query is executed."
msgstr ""

#: ../../ref/models/querysets.txt:167
#: ../../ref/templates/builtins.txt:216
# 6f760446cc8345e0960a2fdf360b960c
# a2590b00330049ab96b914697f834342
msgid "filter"
msgstr ""

#: ../../ref/models/querysets.txt:171
# 9ff4b36c53294955bcaab6320b9814e4
msgid "Returns a new ``QuerySet`` containing objects that match the given lookup parameters."
msgstr ""

#: ../../ref/models/querysets.txt:174
# 5e3da458b4714f44b9d2c8b5f17062ee
msgid "The lookup parameters (``**kwargs``) should be in the format described in `Field lookups`_ below. Multiple parameters are joined via ``AND`` in the underlying SQL statement."
msgstr ""

#: ../../ref/models/querysets.txt:179
# 8afcf7d28ad94b0c9b1dfb51c28605f2
msgid "exclude"
msgstr ""

#: ../../ref/models/querysets.txt:183
# f121b111870f43f887b39f624fbb5698
msgid "Returns a new ``QuerySet`` containing objects that do *not* match the given lookup parameters."
msgstr ""

#: ../../ref/models/querysets.txt:186
# 8debe9663abb4b3eb0075c3ab21923c5
msgid "The lookup parameters (``**kwargs``) should be in the format described in `Field lookups`_ below. Multiple parameters are joined via ``AND`` in the underlying SQL statement, and the whole thing is enclosed in a ``NOT()``."
msgstr ""

#: ../../ref/models/querysets.txt:190
# 3aa4533162004b7e8fdbbdaf39307260
msgid "This example excludes all entries whose ``pub_date`` is later than 2005-1-3 AND whose ``headline`` is \"Hello\"::"
msgstr ""

#: ../../ref/models/querysets.txt:195
#: ../../ref/models/querysets.txt:205
# bbcefe74463e47038af818f01fd1e31e
# 651f77284d164053a5e2ec8d33325f89
msgid "In SQL terms, that evaluates to::"
msgstr ""

#: ../../ref/models/querysets.txt:200
# e41c0030d78f4a29a4812d15c3726f73
msgid "This example excludes all entries whose ``pub_date`` is later than 2005-1-3 OR whose headline is \"Hello\"::"
msgstr ""

#: ../../ref/models/querysets.txt:211
# 27a9dcfaaf674b7a99e04e5e1ac29091
msgid "Note the second example is more restrictive."
msgstr ""

#: ../../ref/models/querysets.txt:214
# e8969e2b5a1d4e82a9c7633f3a3c72a1
msgid "annotate"
msgstr ""

#: ../../ref/models/querysets.txt:218
# a55e3d4dc090453b97eaa86ee7661a02
msgid "Annotates each object in the ``QuerySet`` with the provided list of aggregate values (averages, sums, etc) that have been computed over the objects that are related to the objects in the ``QuerySet``. Each argument to ``annotate()`` is an annotation that will be added to each object in the ``QuerySet`` that is returned."
msgstr ""

#: ../../ref/models/querysets.txt:224
#: ../../ref/models/querysets.txt:1506
# 422e49a6b5964b7fb35e40b87202793d
# fde5d5de238645b18f16eeffc28ab80c
msgid "The aggregation functions that are provided by Django are described in `Aggregation Functions`_ below."
msgstr ""

#: ../../ref/models/querysets.txt:227
# 58842af660ad42d58af9f96593582e3b
msgid "Annotations specified using keyword arguments will use the keyword as the alias for the annotation. Anonymous arguments will have an alias generated for them based upon the name of the aggregate function and the model field that is being aggregated."
msgstr ""

#: ../../ref/models/querysets.txt:232
# b6988ad877bd4487904706830e90471d
msgid "For example, if you were manipulating a list of blogs, you may want to determine how many entries have been made in each blog::"
msgstr ""

#: ../../ref/models/querysets.txt:243
# 00726df500eb4df6940d3d82e9052fc8
msgid "The ``Blog`` model doesn't define an ``entry__count`` attribute by itself, but by using a keyword argument to specify the aggregate function, you can control the name of the annotation::"
msgstr ""

#: ../../ref/models/querysets.txt:252
#: ../../ref/models/querysets.txt:1526
# 4315d60a776d44ae9b4eb907a13a4ce5
# 884cdacfa67942838221b17f79d630e0
msgid "For an in-depth discussion of aggregation, see :doc:`the topic guide on Aggregation </topics/db/aggregation>`."
msgstr ""

#: ../../ref/models/querysets.txt:256
# 55b43e5fdd5f4396ac30fd324541a4ae
msgid "order_by"
msgstr ""

#: ../../ref/models/querysets.txt:260
# 175e83af1ae346bf92ed11de8376f36e
msgid "By default, results returned by a ``QuerySet`` are ordered by the ordering tuple given by the ``ordering`` option in the model's ``Meta``. You can override this on a per-``QuerySet`` basis by using the ``order_by`` method."
msgstr ""

#: ../../ref/models/querysets.txt:268
# 8ac727235255436a9eb033b6ef275662
msgid "The result above will be ordered by ``pub_date`` descending, then by ``headline`` ascending. The negative sign in front of ``\"-pub_date\"`` indicates *descending* order. Ascending order is implied. To order randomly, use ``\"?\"``, like so::"
msgstr ""

#: ../../ref/models/querysets.txt:275
# 8e78663903ba4d27bd0829f8b44f97e9
msgid "Note: ``order_by('?')`` queries may be expensive and slow, depending on the database backend you're using."
msgstr ""

#: ../../ref/models/querysets.txt:278
# 657d5710162d44c2ae5941b00cf724a2
msgid "To order by a field in a different model, use the same syntax as when you are querying across model relations. That is, the name of the field, followed by a double underscore (``__``), followed by the name of the field in the new model, and so on for as many models as you want to join. For example::"
msgstr ""

#: ../../ref/models/querysets.txt:285
# 668be7f8db42402a8c91f89fe5111a81
msgid "If you try to order by a field that is a relation to another model, Django will use the default ordering on the related model (or order by the related model's primary key if there is no :attr:`Meta.ordering <django.db.models.Options.ordering>` specified. For example::"
msgstr ""

#: ../../ref/models/querysets.txt:292
# 1ebf11b141bb4ab7a5ac24f9756631b3
msgid "...is identical to::"
msgstr ""

#: ../../ref/models/querysets.txt:296
# 6e7a911f525742bc9f375e735c715c62
msgid "...since the ``Blog`` model has no default ordering specified."
msgstr ""

#: ../../ref/models/querysets.txt:298
# f26255a725474e62b3de5857d35252aa
msgid "Be cautious when ordering by fields in related models if you are also using :meth:`distinct()`. See the note in :meth:`distinct` for an explanation of how related model ordering can change the expected results."
msgstr ""

#: ../../ref/models/querysets.txt:302
# d2c8c7ce985346a08559420815289bc2
msgid "It is permissible to specify a multi-valued field to order the results by (for example, a :class:`~django.db.models.ManyToManyField` field). Normally this won't be a sensible thing to do and it's really an advanced usage feature. However, if you know that your queryset's filtering or available data implies that there will only be one ordering piece of data for each of the main items you are selecting, the ordering may well be exactly what you want to do. Use ordering on multi-valued fields with care and make sure the results are what you expect."
msgstr ""

#: ../../ref/models/querysets.txt:311
# e02a4147a1bb446493af4c8bfa163fc9
msgid "There's no way to specify whether ordering should be case sensitive. With respect to case-sensitivity, Django will order results however your database backend normally orders them."
msgstr ""

#: ../../ref/models/querysets.txt:315
# 13af180213104106a55d44cefe7e21cb
msgid "If you don't want any ordering to be applied to a query, not even the default ordering, call :meth:`order_by()` with no parameters."
msgstr ""

#: ../../ref/models/querysets.txt:318
# bc83f5e8e8334244b10145ee8b9d1b9e
msgid "You can tell if a query is ordered or not by checking the :attr:`.QuerySet.ordered` attribute, which will be ``True`` if the ``QuerySet`` has been ordered in any way."
msgstr ""

#: ../../ref/models/querysets.txt:323
# 9d9a5c48f4d54a53942577d88d00ccec
msgid "reverse"
msgstr ""

#: ../../ref/models/querysets.txt:327
# 4bbe091e42214c5984fa8b445768d91d
msgid "Use the ``reverse()`` method to reverse the order in which a queryset's elements are returned. Calling ``reverse()`` a second time restores the ordering back to the normal direction."
msgstr ""

#: ../../ref/models/querysets.txt:331
# 333d88b73203431cbbc8576170cc274b
msgid "To retrieve the ''last'' five items in a queryset, you could do this::"
msgstr ""

#: ../../ref/models/querysets.txt:335
# 77b7351f3845483c893334b758e71754
msgid "Note that this is not quite the same as slicing from the end of a sequence in Python. The above example will return the last item first, then the penultimate item and so on. If we had a Python sequence and looked at ``seq[-5:]``, we would see the fifth-last item first. Django doesn't support that mode of access (slicing from the end), because it's not possible to do it efficiently in SQL."
msgstr ""

#: ../../ref/models/querysets.txt:342
# ad68efe8ef8042d79f7d2ffb8d752ecf
msgid "Also, note that ``reverse()`` should generally only be called on a ``QuerySet`` which has a defined ordering (e.g., when querying against a model which defines a default ordering, or when using :meth:`order_by()`). If no such ordering is defined for a given ``QuerySet``, calling ``reverse()`` on it has no real effect (the ordering was undefined prior to calling ``reverse()``, and will remain undefined afterward)."
msgstr ""

#: ../../ref/models/querysets.txt:350
# 5cadc3fc1e494aa1b4ca7b1e0ba37452
msgid "distinct"
msgstr ""

#: ../../ref/models/querysets.txt:354
# 926f169cc6c4445d80010702235ddd44
msgid "Returns a new ``QuerySet`` that uses ``SELECT DISTINCT`` in its SQL query. This eliminates duplicate rows from the query results."
msgstr ""

#: ../../ref/models/querysets.txt:357
# e1707e23b42c4306b84140c99be2bc3d
msgid "By default, a ``QuerySet`` will not eliminate duplicate rows. In practice, this is rarely a problem, because simple queries such as ``Blog.objects.all()`` don't introduce the possibility of duplicate result rows. However, if your query spans multiple tables, it's possible to get duplicate results when a ``QuerySet`` is evaluated. That's when you'd use ``distinct()``."
msgstr ""

#: ../../ref/models/querysets.txt:364
# c63df661e33146159bc4ca6da1646bc9
msgid "Any fields used in an :meth:`order_by` call are included in the SQL ``SELECT`` columns. This can sometimes lead to unexpected results when used in conjunction with ``distinct()``. If you order by fields from a related model, those fields will be added to the selected columns and they may make otherwise duplicate rows appear to be distinct. Since the extra columns don't appear in the returned results (they are only there to support ordering), it sometimes looks like non-distinct results are being returned."
msgstr ""

#: ../../ref/models/querysets.txt:372
# ce8909ad90ea4c4087c15132da2fb962
msgid "Similarly, if you use a :meth:`values()` query to restrict the columns selected, the columns used in any :meth:`order_by()` (or default model ordering) will still be involved and may affect uniqueness of the results."
msgstr ""

#: ../../ref/models/querysets.txt:376
# d35fcc533c6e44d9961f8092c9f3647d
msgid "The moral here is that if you are using ``distinct()`` be careful about ordering by related models. Similarly, when using ``distinct()`` and :meth:`values()` together, be careful when ordering by fields not in the :meth:`values()` call."
msgstr ""

#: ../../ref/models/querysets.txt:383
# e50e70c1e8df45d1bf6050feb65122a2
msgid "As of Django 1.4, you can pass positional arguments (``*fields``) in order to specify the names of fields to which the ``DISTINCT`` should apply. This translates to a ``SELECT DISTINCT ON`` SQL query."
msgstr ""

#: ../../ref/models/querysets.txt:387
# 4e15325a3bf64149a218ad696366c847
msgid "Here's the difference. For a normal ``distinct()`` call, the database compares *each* field in each row when determining which rows are distinct. For a ``distinct()`` call with specified field names, the database will only compare the specified field names."
msgstr ""

#: ../../ref/models/querysets.txt:393
# 28f6edda77d6469081587686779ed080
msgid "This ability to specify field names is only available in PostgreSQL."
msgstr ""

#: ../../ref/models/querysets.txt:396
# 4331dc2e91944ff8acb259ccf5fa7783
msgid "When you specify field names, you *must* provide an ``order_by()`` in the QuerySet, and the fields in ``order_by()`` must start with the fields in ``distinct()``, in the same order."
msgstr ""

#: ../../ref/models/querysets.txt:400
# 9606a6f57acb4e98abed5130dd90befd
msgid "For example, ``SELECT DISTINCT ON (a)`` gives you the first row for each value in column ``a``. If you don't specify an order, you'll get some arbitrary row."
msgstr ""

#: ../../ref/models/querysets.txt:425
# acba99b6a8c049bea023de4b8c7eacf9
msgid "values"
msgstr ""

#: ../../ref/models/querysets.txt:429
# 99764dabc6bc400e9a8f3673d9f3255e
msgid "Returns a ``ValuesQuerySet`` — a ``QuerySet`` subclass that returns dictionaries when used as an iterable, rather than model-instance objects."
msgstr ""

#: ../../ref/models/querysets.txt:432
# e08b8e5c490b4ec28ebe0c866f1dba4b
msgid "Each of those dictionaries represents an object, with the keys corresponding to the attribute names of model objects."
msgstr ""

#: ../../ref/models/querysets.txt:435
# 4944a94f17cf40be96705e14ddfe9e8e
msgid "This example compares the dictionaries of ``values()`` with the normal model objects::"
msgstr ""

#: ../../ref/models/querysets.txt:446
# 290e9baa189444f08bc17cb035e410a6
msgid "The ``values()`` method takes optional positional arguments, ``*fields``, which specify field names to which the ``SELECT`` should be limited. If you specify the fields, each dictionary will contain only the field keys/values for the fields you specify. If you don't specify the fields, each dictionary will contain a key and value for every field in the database table."
msgstr ""

#: ../../ref/models/querysets.txt:459
# fce1c07117e042d1be168c483952cbf6
msgid "A few subtleties that are worth mentioning:"
msgstr ""

#: ../../ref/models/querysets.txt:461
# 199a2c24a0774af3a5893c25faeef792
msgid "If you have a field called ``foo`` that is a :class:`~django.db.models.ForeignKey`, the default ``values()`` call will return a dictionary key called ``foo_id``, since this is the name of the hidden model attribute that stores the actual value (the ``foo`` attribute refers to the related model). When you are calling ``values()`` and passing in field names, you can pass in either ``foo`` or ``foo_id`` and you will get back the same thing (the dictionary key will match the field name you passed in)."
msgstr ""

#: ../../ref/models/querysets.txt:481
# 2725d449464145e59654426033828a59
msgid "When using ``values()`` together with :meth:`distinct()`, be aware that ordering can affect the results. See the note in :meth:`distinct` for details."
msgstr ""

#: ../../ref/models/querysets.txt:485
# 8395143d3e5942dfb59d7b82357b6340
msgid "If you use a ``values()`` clause after an :meth:`extra()` call, any fields defined by a ``select`` argument in the :meth:`extra()` must be explicitly included in the ``values()`` call. Any :meth:`extra()` call made after a ``values()`` call will have its extra selected fields ignored."
msgstr ""

#: ../../ref/models/querysets.txt:491
# c9dc319773764bebb92826e6157de014
msgid "A ``ValuesQuerySet`` is useful when you know you're only going to need values from a small number of the available fields and you won't need the functionality of a model instance object. It's more efficient to select only the fields you need to use."
msgstr ""

#: ../../ref/models/querysets.txt:496
# 7cefb5db23b1448aaeb067e2d5dfd6db
msgid "Finally, note a ``ValuesQuerySet`` is a subclass of ``QuerySet``, so it has all methods of ``QuerySet``. You can call ``filter()`` on it, or ``order_by()``, or whatever. Yes, that means these two calls are identical::"
msgstr ""

#: ../../ref/models/querysets.txt:503
# a4c69c84e660442fba79fc93a9cd708a
msgid "The people who made Django prefer to put all the SQL-affecting methods first, followed (optionally) by any output-affecting methods (such as ``values()``), but it doesn't really matter. This is your chance to really flaunt your individualism."
msgstr ""

#: ../../ref/models/querysets.txt:508
# df561ca42c534888ae0c5fabea164255
msgid "You can also refer to fields on related models with reverse relations through ``OneToOneField``, ``ForeignKey`` and ``ManyToManyField`` attributes::"
msgstr ""

#: ../../ref/models/querysets.txt:517
# d1e1510184a94908ab5cd1fc18f163c6
msgid "Because :class:`~django.db.models.ManyToManyField` attributes and reverse relations can have multiple related rows, including these can have a multiplier effect on the size of your result set. This will be especially pronounced if you include multiple such fields in your ``values()`` query, in which case all possible combinations will be returned."
msgstr ""

#: ../../ref/models/querysets.txt:524
# 88367f3d0b5e48208fdedcee65bc0365
msgid "values_list"
msgstr ""

#: ../../ref/models/querysets.txt:528
# b870bb3a0b7b43ae9c03a7e742642029
msgid "This is similar to ``values()`` except that instead of returning dictionaries, it returns tuples when iterated over. Each tuple contains the value from the respective field passed into the ``values_list()`` call — so the first item is the first field, etc. For example::"
msgstr ""

#: ../../ref/models/querysets.txt:536
# 2eab342030454236b509dbef201613e2
msgid "If you only pass in a single field, you can also pass in the ``flat`` parameter. If ``True``, this will mean the returned results are single values, rather than one-tuples. An example should make the difference clearer::"
msgstr ""

#: ../../ref/models/querysets.txt:546
# c8d82fc5ec234be18a0c89be7b58dd5b
msgid "It is an error to pass in ``flat`` when there is more than one field."
msgstr ""

#: ../../ref/models/querysets.txt:548
# 3f50dbe578cf426a9dd63d5f01c66fbb
msgid "If you don't pass any values to ``values_list()``, it will return all the fields in the model, in the order they were declared."
msgstr ""

#: ../../ref/models/querysets.txt:552
# 4e6b646394034a7bad5822630c490b0e
msgid "dates"
msgstr ""

#: ../../ref/models/querysets.txt:556
# 36cd5a6c2f4f4e198ffd1da901cb89c7
msgid "Returns a ``DateQuerySet`` — a ``QuerySet`` that evaluates to a list of ``datetime.datetime`` objects representing all available dates of a particular kind within the contents of the ``QuerySet``."
msgstr ""

#: ../../ref/models/querysets.txt:560
# b95d6535560c4cbe9081a8ba45b7dc37
msgid "``field`` should be the name of a ``DateField`` or ``DateTimeField`` of your model."
msgstr ""

#: ../../ref/models/querysets.txt:563
# b58eec3b2ba14708a637c1477123f52d
msgid "``kind`` should be either ``\"year\"``, ``\"month\"`` or ``\"day\"``. Each ``datetime.datetime`` object in the result list is \"truncated\" to the given ``type``."
msgstr ""

#: ../../ref/models/querysets.txt:567
# 9c561de40fbd4e588bb8bba3c42e8de5
msgid "``\"year\"`` returns a list of all distinct year values for the field."
msgstr ""

#: ../../ref/models/querysets.txt:568
# 9c515fe14efa4570b8bbe462b0ef5769
msgid "``\"month\"`` returns a list of all distinct year/month values for the field."
msgstr ""

#: ../../ref/models/querysets.txt:570
# 101d4d6d0bd44af093b896ebd8594215
msgid "``\"day\"`` returns a list of all distinct year/month/day values for the field."
msgstr ""

#: ../../ref/models/querysets.txt:573
# 96d915355ab04f4ca4b3ef1eb0a895cb
msgid "``order``, which defaults to ``'ASC'``, should be either ``'ASC'`` or ``'DESC'``. This specifies how to order the results."
msgstr ""

#: ../../ref/models/querysets.txt:591
# 43bfb875e9da42398d67a35bb43630e9
msgid "When :doc:`time zone support </topics/i18n/timezones>` is enabled, Django uses UTC in the database connection, which means the aggregation is performed in UTC. This is a known limitation of the current implementation."
msgstr ""

#: ../../ref/models/querysets.txt:596
# 3f7da3b7e3454e3daed37c3007c01b95
msgid "none"
msgstr ""

#: ../../ref/models/querysets.txt:600
# 3312daeff17c4c4183e335f9a6ba70a4
msgid "Returns an ``EmptyQuerySet`` — a ``QuerySet`` subclass that always evaluates to an empty list. This can be used in cases where you know that you should return an empty result set and your caller is expecting a ``QuerySet`` object (instead of returning an empty list, for example.)"
msgstr ""

#: ../../ref/models/querysets.txt:611
# dc4367ab59d64f03bea8d3e9b6ecd0de
msgid "all"
msgstr ""

#: ../../ref/models/querysets.txt:615
# 921b64bf15294084b32beb25251a3674
msgid "Returns a *copy* of the current ``QuerySet`` (or ``QuerySet`` subclass).  This can be useful in situations where you might want to pass in either a model manager or a ``QuerySet`` and do further filtering on the result. After calling ``all()`` on either object, you'll definitely have a ``QuerySet`` to work with."
msgstr ""

#: ../../ref/models/querysets.txt:621
# 0a0bf467d4c34d35a725978f0f530ced
msgid "select_related"
msgstr ""

#: ../../ref/models/querysets.txt:625
# 6ff285cab38f4b9aaac1846b4e4f308c
msgid "Returns a ``QuerySet`` that will automatically \"follow\" foreign-key relationships, selecting that additional related-object data when it executes its query. This is a performance booster which results in (sometimes much) larger queries but means later use of foreign-key relationships won't require database queries."
msgstr ""

#: ../../ref/models/querysets.txt:631
# 4dd72284b81645df819084796e3ee7d0
msgid "The following examples illustrate the difference between plain lookups and ``select_related()`` lookups. Here's standard lookup::"
msgstr ""

#: ../../ref/models/querysets.txt:640
# 58cfa849787d4de28dc00827bf01d309
msgid "And here's ``select_related`` lookup::"
msgstr ""

#: ../../ref/models/querysets.txt:649
# d6709789102247d181b4cd7c3a02f540
msgid "``select_related()`` follows foreign keys as far as possible. If you have the following models::"
msgstr ""

#: ../../ref/models/querysets.txt:664
# c9cc8d179fcf4a2881756600b5131d22
msgid "...then a call to ``Book.objects.select_related().get(id=4)`` will cache the related ``Person`` *and* the related ``City``::"
msgstr ""

#: ../../ref/models/querysets.txt:675
# c5dd850ce6c146d9b00d9d840c540a70
msgid "Note that, by default, ``select_related()`` does not follow foreign keys that have ``null=True``."
msgstr ""

#: ../../ref/models/querysets.txt:678
# a4661f68020c4205b214339d4592dc0c
msgid "Usually, using ``select_related()`` can vastly improve performance because your app can avoid many database calls. However, there are times you are only interested in specific related models, or have deeply nested sets of relationships, and in these cases ``select_related()`` can be optimized by explicitly passing the related field names you are interested in. Only the specified relations will be followed."
msgstr ""

#: ../../ref/models/querysets.txt:685
# 5ac2b30bd1634113b25d2ffb49792629
msgid "You can even do this for models that are more than one relation away by separating the field names with double underscores, just as for filters. For example, if you have this model::"
msgstr ""

#: ../../ref/models/querysets.txt:699
# 67cf013e283142e8a0a812db3406fefe
msgid "...and you only needed to work with the ``room`` and ``subject`` attributes, you could write this::"
msgstr ""

#: ../../ref/models/querysets.txt:704
# 10a12da403cf40b880f10d0b30b4ac5e
msgid "This is also valid::"
msgstr ""

#: ../../ref/models/querysets.txt:708
# cec251430a6f44bd976133284bf3141e
msgid "...and would also pull in the ``building`` relation."
msgstr ""

#: ../../ref/models/querysets.txt:710
# 25b46cf6d2754e2fa4eb1670510528de
msgid "You can refer to any :class:`~django.db.models.ForeignKey` or :class:`~django.db.models.OneToOneField` relation in the list of fields passed to ``select_related()``. This includes foreign keys that have ``null=True`` (which are omitted in a no-parameter ``select_related()`` call). It's an error to use both a list of fields and the ``depth`` parameter in the same ``select_related()`` call; they are conflicting options."
msgstr ""

#: ../../ref/models/querysets.txt:717
# 11414b1a116145a699fb178779c01a64
msgid "You can also refer to the reverse direction of a :class:`~django.db.models.OneToOneField` in the list of fields passed to ``select_related`` — that is, you can traverse a :class:`~django.db.models.OneToOneField` back to the object on which the field is defined. Instead of specifying the field name, use the :attr:`related_name <django.db.models.ForeignKey.related_name>` for the field on the related object."
msgstr ""

#: ../../ref/models/querysets.txt:729
# 283b71ceb1624bf1baa23e6c07a68b61
msgid "A depth limit of relationships to follow can also be specified::"
msgstr ""

#: ../../ref/models/querysets.txt:735
# 29c69317a16741bda7c869294b6c1494
msgid "A :class:`~django.db.models.OneToOneField` is not traversed in the reverse direction if you are performing a depth-based ``select_related()`` call."
msgstr ""

#: ../../ref/models/querysets.txt:739
# 799ef5c7de954045ae225156b1e66dea
msgid "prefetch_related"
msgstr ""

#: ../../ref/models/querysets.txt:745
# e16097fcd1e84ac2826c05ef44609251
msgid "Returns a ``QuerySet`` that will automatically retrieve, in a single batch, related objects for each of the specified lookups."
msgstr ""

#: ../../ref/models/querysets.txt:748
# 57ad955cb970424aa8740df69ab12e4a
msgid "This has a similar purpose to ``select_related``, in that both are designed to stop the deluge of database queries that is caused by accessing related objects, but the strategy is quite different."
msgstr ""

#: ../../ref/models/querysets.txt:752
# 09e95973494d472283c1fe22e82fe136
msgid "``select_related`` works by creating a SQL join and including the fields of the related object in the SELECT statement. For this reason, ``select_related`` gets the related objects in the same database query. However, to avoid the much larger result set that would result from joining across a 'many' relationship, ``select_related`` is limited to single-valued relationships - foreign key and one-to-one."
msgstr ""

#: ../../ref/models/querysets.txt:759
# bc67a5a50ecd473986ca1bb9a142669a
msgid "``prefetch_related``, on the other hand, does a separate lookup for each relationship, and does the 'joining' in Python. This allows it to prefetch many-to-many and many-to-one objects, which cannot be done using ``select_related``, in addition to the foreign key and one-to-one relationships that are supported by ``select_related``. It also supports prefetching of :class:`~django.contrib.contenttypes.generic.GenericRelation` and :class:`~django.contrib.contenttypes.generic.GenericForeignKey`."
msgstr ""

#: ../../ref/models/querysets.txt:767
# b713a283dfee4f249fc55e4991d92452
msgid "For example, suppose you have these models::"
msgstr ""

#: ../../ref/models/querysets.txt:780
# 8bce7b71ddd8473db45a703323e23aa7
msgid "and run this code::"
msgstr ""

#: ../../ref/models/querysets.txt:785
# b56efcdf0e034b2abcc982475e393491
msgid "The problem with this code is that it will run a query on the Toppings table for **every** item in the Pizza ``QuerySet``.  Using ``prefetch_related``, this can be reduced to two:"
msgstr ""

#: ../../ref/models/querysets.txt:791
# e4a5898cd1c64475886849a18cd8c8d4
msgid "All the relevant toppings will be fetched in a single query, and used to make ``QuerySets`` that have a pre-filled cache of the relevant results. These ``QuerySets`` are then used in the ``self.toppings.all()`` calls."
msgstr ""

#: ../../ref/models/querysets.txt:795
# 60714a0b461b4ce49f4ae6ed3e58f798
msgid "The additional queries are executed after the QuerySet has begun to be evaluated and the primary query has been executed. Note that the result cache of the primary QuerySet and all specified related objects will then be fully loaded into memory, which is often avoided in other cases - even after a query has been executed in the database, QuerySet normally tries to make uses of chunking between the database to avoid loading all objects into memory before you need them."
msgstr ""

#: ../../ref/models/querysets.txt:803
# e95913aa5c1249e0952a5dbae314f10e
msgid "Also remember that, as always with QuerySets, any subsequent chained methods which imply a different database query will ignore previously cached results, and retrieve data using a fresh database query. So, if you write the following:"
msgstr ""

#: ../../ref/models/querysets.txt:810
# fc16dab08fdc4a5f895596f88e9ef0f4
msgid "...then the fact that ``pizza.toppings.all()`` has been prefetched will not help you - in fact it hurts performance, since you have done a database query that you haven't used. So use this feature with caution!"
msgstr ""

#: ../../ref/models/querysets.txt:814
# ff1bd13591ad4147b8b329fed914b796
msgid "You can also use the normal join syntax to do related fields of related fields. Suppose we have an additional model to the example above::"
msgstr ""

#: ../../ref/models/querysets.txt:821
# bd15214db981472bbbb1925aa9ca1a53
msgid "The following are all legal:"
msgstr ""

#: ../../ref/models/querysets.txt:825
# a7c6d12671114831826f7dd039264ba9
msgid "This will prefetch all pizzas belonging to restaurants, and all toppings belonging to those pizzas. This will result in a total of 3 database queries - one for the restaurants, one for the pizzas, and one for the toppings."
msgstr ""

#: ../../ref/models/querysets.txt:831
# 0e0644b906e04f138f1297f69e928b49
msgid "This will fetch the best pizza and all the toppings for the best pizza for each restaurant. This will be done in 3 database queries - one for the restaurants, one for the 'best pizzas', and one for one for the toppings."
msgstr ""

#: ../../ref/models/querysets.txt:835
# 00444a3c2d0a43099acf0b487ce42d1d
msgid "Of course, the ``best_pizza`` relationship could also be fetched using ``select_related`` to reduce the query count to 2:"
msgstr ""

#: ../../ref/models/querysets.txt:840
# bfede2ed439649d09cb2a7fa656a6215
msgid "Since the prefetch is executed after the main query (which includes the joins needed by ``select_related``), it is able to detect that the ``best_pizza`` objects have already been fetched, and it will skip fetching them again."
msgstr ""

#: ../../ref/models/querysets.txt:844
# c6d2145fc8e74fb3b52be007f4e5ae9e
msgid "Chaining ``prefetch_related`` calls will accumulate the lookups that are prefetched. To clear any ``prefetch_related`` behavior, pass `None` as a parameter::"
msgstr ""

#: ../../ref/models/querysets.txt:850
# d929e7e589554fcb80ad49e5a0140a67
msgid "One difference to note when using ``prefetch_related`` is that objects created by a query can be shared between the different objects that they are related to i.e. a single Python model instance can appear at more than one point in the tree of objects that are returned. This will normally happen with foreign key relationships. Typically this behavior will not be a problem, and will in fact save both memory and CPU time."
msgstr ""

#: ../../ref/models/querysets.txt:857
# 7219dca755ed4f68b69feb310071dc3a
msgid "While ``prefetch_related`` supports prefetching ``GenericForeignKey`` relationships, the number of queries will depend on the data. Since a ``GenericForeignKey`` can reference data in multiple tables, one query per table referenced is needed, rather than one query for all the items. There could be additional queries on the ``ContentType`` table if the relevant rows have not already been fetched."
msgstr ""

#: ../../ref/models/querysets.txt:864
# a7f968677dbd492987ca44f04f4f9a44
msgid "``prefetch_related`` in most cases will be implemented using a SQL query that uses the 'IN' operator. This means that for a large QuerySet a large 'IN' clause could be generated, which, depending on the database, might have performance problems of its own when it comes to parsing or executing the SQL query. Always profile for your use case!"
msgstr ""

#: ../../ref/models/querysets.txt:870
# 0cda2a1a73544b97bd25c5c9cc0dc1d1
msgid "Note that if you use ``iterator()`` to run the query, ``prefetch_related()`` calls will be ignored since these two optimizations do not make sense together."
msgstr ""

#: ../../ref/models/querysets.txt:874
# 0ae894407e584679845147877a6df47c
msgid "extra"
msgstr ""

#: ../../ref/models/querysets.txt:878
# eb1210c176b54c55b21f57cc5811f826
msgid "Sometimes, the Django query syntax by itself can't easily express a complex ``WHERE`` clause. For these edge cases, Django provides the ``extra()`` ``QuerySet`` modifier — a hook for injecting specific clauses into the SQL generated by a ``QuerySet``."
msgstr ""

#: ../../ref/models/querysets.txt:883
# a1a48f96f8d54234ac49ceecbb0c192b
msgid "By definition, these extra lookups may not be portable to different database engines (because you're explicitly writing SQL code) and violate the DRY principle, so you should avoid them if possible."
msgstr ""

#: ../../ref/models/querysets.txt:887
# f6e8140b89a9489a8c9dfdf3937b98be
msgid "Specify one or more of ``params``, ``select``, ``where`` or ``tables``. None of the arguments is required, but you should use at least one of them."
msgstr ""

#: ../../ref/models/querysets.txt:890
# e73908df71e042afae25538093f98e81
msgid "``select``"
msgstr ""

#: ../../ref/models/querysets.txt:892
# 95e2dd27bcf544ac845e0110456a7470
msgid "The ``select`` argument lets you put extra fields in the ``SELECT`` clause.  It should be a dictionary mapping attribute names to SQL clauses to use to calculate that attribute."
msgstr ""

#: ../../ref/models/querysets.txt:900
# fa76a8e20bfa46b590e0890cad96c3b9
msgid "As a result, each ``Entry`` object will have an extra attribute, ``is_recent``, a boolean representing whether the entry's ``pub_date`` is greater than Jan. 1, 2006."
msgstr ""

#: ../../ref/models/querysets.txt:904
# 3574ac90f2214a439a57163aa47870ea
msgid "Django inserts the given SQL snippet directly into the ``SELECT`` statement, so the resulting SQL of the above example would be something like::"
msgstr ""

#: ../../ref/models/querysets.txt:912
# c7c37a93f0f8448c9065680264119030
msgid "The next example is more advanced; it does a subquery to give each resulting ``Blog`` object an ``entry_count`` attribute, an integer count of associated ``Entry`` objects::"
msgstr ""

#: ../../ref/models/querysets.txt:922
# 6fc17c4bb5db40d48f9c9f5706b26e59
msgid "In this particular case, we're exploiting the fact that the query will already contain the ``blog_blog`` table in its ``FROM`` clause."
msgstr ""

#: ../../ref/models/querysets.txt:925
# c0cc07d405994fcd97add6598ea18e6a
msgid "The resulting SQL of the above example would be::"
msgstr ""

#: ../../ref/models/querysets.txt:930
# 1669ecd30af6402a9588103caba56aa6
msgid "Note that the parentheses required by most database engines around subqueries are not required in Django's ``select`` clauses. Also note that some database backends, such as some MySQL versions, don't support subqueries."
msgstr ""

#: ../../ref/models/querysets.txt:935
# 78d6b9b744a84e169046cf57d26544e1
msgid "In some rare cases, you might wish to pass parameters to the SQL fragments in ``extra(select=...)``. For this purpose, use the ``select_params`` parameter. Since ``select_params`` is a sequence and the ``select`` attribute is a dictionary, some care is required so that the parameters are matched up correctly with the extra select pieces. In this situation, you should use a :class:`django.utils.datastructures.SortedDict` for the ``select`` value, not just a normal Python dictionary."
msgstr ""

#: ../../ref/models/querysets.txt:944
# 85ee78907eba4373a0249c3539d008c7
msgid "This will work, for example::"
msgstr ""

#: ../../ref/models/querysets.txt:950
# 1b845e081d614c449b6d9da9c9f8bee0
msgid "The only thing to be careful about when using select parameters in ``extra()`` is to avoid using the substring ``\"%%s\"`` (that's *two* percent characters before the ``s``) in the select strings. Django's tracking of parameters looks for ``%s`` and an escaped ``%`` character like this isn't detected. That will lead to incorrect results."
msgstr ""

#: ../../ref/models/querysets.txt:956
# eb7de920902245278e6dd7a6fd51a0ef
msgid "``where`` / ``tables``"
msgstr ""

#: ../../ref/models/querysets.txt:958
# 1c7288314e85481aa0ae1802f81190d9
msgid "You can define explicit SQL ``WHERE`` clauses — perhaps to perform non-explicit joins — by using ``where``. You can manually add tables to the SQL ``FROM`` clause by using ``tables``."
msgstr ""

#: ../../ref/models/querysets.txt:962
# 3a6b0f65ce0141a2b0403c8565b59851
msgid "``where`` and ``tables`` both take a list of strings. All ``where`` parameters are \"AND\"ed to any other search criteria."
msgstr ""

#: ../../ref/models/querysets.txt:969
# e31d84ee936d4222981578fe4df569f2
msgid "...translates (roughly) into the following SQL::"
msgstr ""

#: ../../ref/models/querysets.txt:973
# be129c04b03f47f4ba01a4be6bbbe568
msgid "Be careful when using the ``tables`` parameter if you're specifying tables that are already used in the query. When you add extra tables via the ``tables`` parameter, Django assumes you want that table included an extra time, if it is already included. That creates a problem, since the table name will then be given an alias. If a table appears multiple times in an SQL statement, the second and subsequent occurrences must use aliases so the database can tell them apart. If you're referring to the extra table you added in the extra ``where`` parameter this is going to cause errors."
msgstr ""

#: ../../ref/models/querysets.txt:983
# 9a348799e3924edb89990c30657a5ad4
msgid "Normally you'll only be adding extra tables that don't already appear in the query. However, if the case outlined above does occur, there are a few solutions. First, see if you can get by without including the extra table and use the one already in the query. If that isn't possible, put your ``extra()`` call at the front of the queryset construction so that your table is the first use of that table. Finally, if all else fails, look at the query produced and rewrite your ``where`` addition to use the alias given to your extra table. The alias will be the same each time you construct the queryset in the same way, so you can rely upon the alias name to not change."
msgstr ""

#: ../../ref/models/querysets.txt:994
# 054f43d213714f93bb488ed2cb5791a2
msgid "``order_by``"
msgstr ""

#: ../../ref/models/querysets.txt:996
# 8d4f3ddccfcc474aacd7cbe398eb3557
msgid "If you need to order the resulting queryset using some of the new fields or tables you have included via ``extra()`` use the ``order_by`` parameter to ``extra()`` and pass in a sequence of strings. These strings should either be model fields (as in the normal :meth:`order_by()` method on querysets), of the form ``table_name.column_name`` or an alias for a column that you specified in the ``select`` parameter to ``extra()``."
msgstr ""

#: ../../ref/models/querysets.txt:1009
# 99403f8db67c4a4d91ea03d810aa286d
msgid "This would sort all the items for which ``is_recent`` is true to the front of the result set (``True`` sorts before ``False`` in a descending ordering)."
msgstr ""

#: ../../ref/models/querysets.txt:1013
# d5e13115e79c498fa63b9938c8587be5
msgid "This shows, by the way, that you can make multiple calls to ``extra()`` and it will behave as you expect (adding new constraints each time)."
msgstr ""

#: ../../ref/models/querysets.txt:1016
# 07e68e264c7c4e03924e02fbdc65c828
msgid "``params``"
msgstr ""

#: ../../ref/models/querysets.txt:1018
# c79599c9c8d4433ca4432ad8038ccd57
msgid "The ``where`` parameter described above may use standard Python database string placeholders — ``'%s'`` to indicate parameters the database engine should automatically quote. The ``params`` argument is a list of any extra parameters to be substituted."
msgstr ""

#: ../../ref/models/querysets.txt:1027
# 6078f1cd764148d79880d8a61da64819
msgid "Always use ``params`` instead of embedding values directly into ``where`` because ``params`` will ensure values are quoted correctly according to your particular backend. For example, quotes will be escaped correctly."
msgstr ""

#: ../../ref/models/querysets.txt:1032
# 8217f0f869df441a81b434b04c028a0c
msgid "Bad::"
msgstr ""

#: ../../ref/models/querysets.txt:1036
# eda74df218d14c559cfbd535d8d391d3
msgid "Good::"
msgstr ""

#: ../../ref/models/querysets.txt:1041
# 5be8a407af8b445284d8270e7b1be8a0
msgid "defer"
msgstr ""

#: ../../ref/models/querysets.txt:1045
# 974322e9d10a4f7a83346ac6bff813ab
msgid "In some complex data-modeling situations, your models might contain a lot of fields, some of which could contain a lot of data (for example, text fields), or require expensive processing to convert them to Python objects. If you are using the results of a queryset in some situation where you don't know if you need those particular fields when you initially fetch the data, you can tell Django not to retrieve them from the database."
msgstr ""

#: ../../ref/models/querysets.txt:1052
# cbf0b286dda546038e5a2c34c787bf74
msgid "This is done by passing the names of the fields to not load to ``defer()``::"
msgstr ""

#: ../../ref/models/querysets.txt:1056
# e15950a24d1f488f83da584e4da94651
msgid "A queryset that has deferred fields will still return model instances. Each deferred field will be retrieved from the database if you access that field (one at a time, not all the deferred fields at once)."
msgstr ""

#: ../../ref/models/querysets.txt:1060
# 6fb629dc17ed40928a3abfa08608560f
msgid "You can make multiple calls to ``defer()``. Each call adds new fields to the deferred set::"
msgstr ""

#: ../../ref/models/querysets.txt:1066
# 0032307a70d343b9ac86c78105748cb3
msgid "The order in which fields are added to the deferred set does not matter. Calling ``defer()`` with a field name that has already been deferred is harmless (the field will still be deferred)."
msgstr ""

#: ../../ref/models/querysets.txt:1070
# 8277ccdb0f264332b5700c9473f81929
msgid "You can defer loading of fields in related models (if the related models are loading via :meth:`select_related()`) by using the standard double-underscore notation to separate related fields::"
msgstr ""

#: ../../ref/models/querysets.txt:1076
# 3d4162f216ec4bc7aab7c0f2c976c08e
msgid "If you want to clear the set of deferred fields, pass ``None`` as a parameter to ``defer()``::"
msgstr ""

#: ../../ref/models/querysets.txt:1084
# 50e077ad1a2d4bdbadaa013043014a04
msgid "Some fields in a model won't be deferred, even if you ask for them. You can never defer the loading of the primary key. If you are using :meth:`select_related()` to retrieve related models, you shouldn't defer the loading of the field that connects from the primary model to the related one, doing so will result in an error."
msgstr ""

#: ../../ref/models/querysets.txt:1092
# 12c0c71b218e4929aabc501a8cfe49a1
msgid "The ``defer()`` method (and its cousin, :meth:`only()`, below) are only for advanced use-cases. They provide an optimization for when you have analyzed your queries closely and understand *exactly* what information you need and have measured that the difference between returning the fields you need and the full set of fields for the model will be significant."
msgstr ""

#: ../../ref/models/querysets.txt:1098
# e5a91283ad9949ae94aa9937852bb063
msgid "Even if you think you are in the advanced use-case situation, **only use defer() when you cannot, at queryset load time, determine if you will need the extra fields or not**. If you are frequently loading and using a particular subset of your data, the best choice you can make is to normalize your models and put the non-loaded data into a separate model (and database table). If the columns *must* stay in the one table for some reason, create a model with ``Meta.managed = False`` (see the :attr:`managed attribute <django.db.models.Options.managed>` documentation) containing just the fields you normally need to load and use that where you might otherwise call ``defer()``. This makes your code more explicit to the reader, is slightly faster and consumes a little less memory in the Python process."
msgstr ""

#: ../../ref/models/querysets.txt:1115
#: ../../ref/models/querysets.txt:1167
# 7a88e80a833f47fa8759787ba00d02f0
# c848685a052b4d82bd981fc743c00767
msgid "When calling :meth:`~django.db.models.Model.save()` for instances with deferred fields, only the loaded fields will be saved. See :meth:`~django.db.models.Model.save()` for more details."
msgstr ""

#: ../../ref/models/querysets.txt:1121
# 177608bbca7c4bb9a7b64fef017d6345
msgid "only"
msgstr ""

#: ../../ref/models/querysets.txt:1125
# f0e84dffcd0a465ea939ebb6e64e5f57
msgid "The ``only()`` method is more or less the opposite of :meth:`defer()`. You call it with the fields that should *not* be deferred when retrieving a model.  If you have a model where almost all the fields need to be deferred, using ``only()`` to specify the complementary set of fields can result in simpler code."
msgstr ""

#: ../../ref/models/querysets.txt:1131
# b2cf8a5a542d4fd7b46d4b55e854d7d8
msgid "Suppose you have a model with fields ``name``, ``age`` and ``biography``. The following two querysets are the same, in terms of deferred fields::"
msgstr ""

#: ../../ref/models/querysets.txt:1137
# 5452aa2c79ef4db792d44b2ff1ff6495
msgid "Whenever you call ``only()`` it *replaces* the set of fields to load immediately. The method's name is mnemonic: **only** those fields are loaded immediately; the remainder are deferred. Thus, successive calls to ``only()`` result in only the final fields being considered::"
msgstr ""

#: ../../ref/models/querysets.txt:1145
# 6ed5e49f72714727a8f5fc951f1d2f11
msgid "Since ``defer()`` acts incrementally (adding fields to the deferred list), you can combine calls to ``only()`` and ``defer()`` and things will behave logically::"
msgstr ""

#: ../../ref/models/querysets.txt:1158
# d520050ced234278980fbb3fabcd8ff1
msgid "All of the cautions in the note for the :meth:`defer` documentation apply to ``only()`` as well. Use it cautiously and only after exhausting your other options. Also note that using :meth:`only` and omitting a field requested using :meth:`select_related` is an error as well."
msgstr ""

#: ../../ref/models/querysets.txt:1172
# 95546c8ba090443888b09d934056f447
msgid "using"
msgstr ""

#: ../../ref/models/querysets.txt:1176
# cedf864ee71f448283435e3d1887c91f
msgid "This method is for controlling which database the ``QuerySet`` will be evaluated against if you are using more than one database.  The only argument this method takes is the alias of a database, as defined in :setting:`DATABASES`."
msgstr ""

#: ../../ref/models/querysets.txt:1190
# 37cf71ad6b584b63899052fa5e2121d4
msgid "select_for_update"
msgstr ""

#: ../../ref/models/querysets.txt:1196
# bc3cfc6d4ea046598aafd64787adac93
msgid "Returns a queryset that will lock rows until the end of the transaction, generating a ``SELECT ... FOR UPDATE`` SQL statement on supported databases."
msgstr ""

#: ../../ref/models/querysets.txt:1203
# 89a98086089949a2889b6004db415357
msgid "All matched entries will be locked until the end of the transaction block, meaning that other transactions will be prevented from changing or acquiring locks on them."
msgstr ""

#: ../../ref/models/querysets.txt:1207
# f5cbfe81c41f42e2a30730cdb59818a5
msgid "Usually, if another transaction has already acquired a lock on one of the selected rows, the query will block until the lock is released. If this is not the behavior you want, call ``select_for_update(nowait=True)``. This will make the call non-blocking. If a conflicting lock is already acquired by another transaction, :exc:`~django.db.DatabaseError` will be raised when the queryset is evaluated."
msgstr ""

#: ../../ref/models/querysets.txt:1214
# b153fa9512a34873b12559f51470eef5
msgid "Note that using ``select_for_update()`` will cause the current transaction to be considered dirty, if under transaction management. This is to ensure that Django issues a ``COMMIT`` or ``ROLLBACK``, releasing any locks held by the ``SELECT FOR UPDATE``."
msgstr ""

#: ../../ref/models/querysets.txt:1219
# ec7e64711d054ea78ba74204a7cd2e30
msgid "Currently, the ``postgresql_psycopg2``, ``oracle``, and ``mysql`` database backends support ``select_for_update()``. However, MySQL has no support for the ``nowait`` argument. Obviously, users of external third-party backends should check with their backend's documentation for specifics in those cases."
msgstr ""

#: ../../ref/models/querysets.txt:1224
# eedb3032abee481f925f657de05fe076
msgid "Passing ``nowait=True`` to ``select_for_update`` using database backends that do not support ``nowait``, such as MySQL, will cause a :exc:`~django.db.DatabaseError` to be raised. This is in order to prevent code unexpectedly blocking."
msgstr ""

#: ../../ref/models/querysets.txt:1229
# cd301e946ab84f389a3211388e223abe
msgid "Using ``select_for_update`` on backends which do not support ``SELECT ... FOR UPDATE`` (such as SQLite) will have no effect."
msgstr ""

#: ../../ref/models/querysets.txt:1233
# cd4ae2c8fcac4d798de91b4c55175162
msgid "Methods that do not return QuerySets"
msgstr ""

#: ../../ref/models/querysets.txt:1235
# 030d3eef22a34cc989ce5dfe2ec240ef
msgid "The following ``QuerySet`` methods evaluate the ``QuerySet`` and return something *other than* a ``QuerySet``."
msgstr ""

#: ../../ref/models/querysets.txt:1238
# feab7f36a5ec4ac495c622b7b7e7a464
msgid "These methods do not use a cache (see :ref:`caching-and-querysets`). Rather, they query the database each time they're called."
msgstr ""

#: ../../ref/models/querysets.txt:1242
# a6be66340cd94edca2225e99b23794d3
msgid "get"
msgstr ""

#: ../../ref/models/querysets.txt:1246
# 311ec9c035ce4ab39b08b968726ceacc
msgid "Returns the object matching the given lookup parameters, which should be in the format described in `Field lookups`_."
msgstr ""

#: ../../ref/models/querysets.txt:1249
# 27700f5563f2494cbd1b270532513f26
msgid "``get()`` raises :exc:`~django.core.exceptions.MultipleObjectsReturned` if more than one object was found. The :exc:`~django.core.exceptions.MultipleObjectsReturned` exception is an attribute of the model class."
msgstr ""

#: ../../ref/models/querysets.txt:1254
# a110afdf5f384cdb8b1c0fcfa0a5b2b5
msgid "``get()`` raises a :exc:`~django.core.exceptions.DoesNotExist` exception if an object wasn't found for the given parameters. This exception is also an attribute of the model class. Example::"
msgstr ""

#: ../../ref/models/querysets.txt:1260
# ade392f4b5bd43409a5cd4bb3619952d
msgid "The :exc:`~django.core.exceptions.DoesNotExist` exception inherits from :exc:`django.core.exceptions.ObjectDoesNotExist`, so you can target multiple :exc:`~django.core.exceptions.DoesNotExist` exceptions. Example::"
msgstr ""

#: ../../ref/models/querysets.txt:1272
# 8f8e00bc674f4391bece1cf6da4d701e
msgid "create"
msgstr ""

#: ../../ref/models/querysets.txt:1276
# d8dadd39684f4ebaa411e7420f30ef80
msgid "A convenience method for creating an object and saving it all in one step.  Thus::"
msgstr ""

#: ../../ref/models/querysets.txt:1280
# 1c8c2baef45e4cf8ae47be22240ed951
msgid "and::"
msgstr ""

#: ../../ref/models/querysets.txt:1285
# 78b9331419de400aafae7099411e9b81
msgid "are equivalent."
msgstr ""

#: ../../ref/models/querysets.txt:1287
# f3d65ce2840e41bf8e360218c65fc854
msgid "The :ref:`force_insert <ref-models-force-insert>` parameter is documented elsewhere, but all it means is that a new object will always be created. Normally you won't need to worry about this. However, if your model contains a manual primary key value that you set and if that value already exists in the database, a call to ``create()`` will fail with an :exc:`~django.db.IntegrityError` since primary keys must be unique. Be prepared to handle the exception if you are using manual primary keys."
msgstr ""

#: ../../ref/models/querysets.txt:1296
# 1597a306417143f1a697ba0b7a4850b5
msgid "get_or_create"
msgstr ""

#: ../../ref/models/querysets.txt:1300
# f5dece26e7d64d19a7ea79e443a08154
msgid "A convenience method for looking up an object with the given kwargs, creating one if necessary."
msgstr ""

#: ../../ref/models/querysets.txt:1303
# c1efa95f523547b596780abc518941e9
msgid "Returns a tuple of ``(object, created)``, where ``object`` is the retrieved or created object and ``created`` is a boolean specifying whether a new object was created."
msgstr ""

#: ../../ref/models/querysets.txt:1307
# fe235d43b297445b94759ce4620e81b8
msgid "This is meant as a shortcut to boilerplatish code and is mostly useful for data-import scripts. For example::"
msgstr ""

#: ../../ref/models/querysets.txt:1316
# 7a0e692895e54e1f97f6af0bfec53b0c
msgid "This pattern gets quite unwieldy as the number of fields in a model goes up. The above example can be rewritten using ``get_or_create()`` like so::"
msgstr ""

#: ../../ref/models/querysets.txt:1322
# 11123bfbf9424d1c933478ee039db6a6
msgid "Any keyword arguments passed to ``get_or_create()`` — *except* an optional one called ``defaults`` — will be used in a :meth:`get()` call. If an object is found, ``get_or_create()`` returns a tuple of that object and ``False``. If multiple objects are found, ``get_or_create`` raises :exc:`~django.core.exceptions.MultipleObjectsReturned`. If an object is *not* found, ``get_or_create()`` will instantiate and save a new object, returning a tuple of the new object and ``True``. The new object will be created roughly according to this algorithm::"
msgstr ""

#: ../../ref/models/querysets.txt:1337
# 287bfc2e2fdc43eb8682a5956fb54ed4
msgid "In English, that means start with any non-``'defaults'`` keyword argument that doesn't contain a double underscore (which would indicate a non-exact lookup). Then add the contents of ``defaults``, overriding any keys if necessary, and use the result as the keyword arguments to the model class. As hinted at above, this is a simplification of the algorithm that is used, but it contains all the pertinent details. The internal implementation has some more error-checking than this and handles some extra edge-conditions; if you're interested, read the code."
msgstr ""

#: ../../ref/models/querysets.txt:1346
# 8c22d697bbcf420487b6b22d1fd545c5
msgid "If you have a field named ``defaults`` and want to use it as an exact lookup in ``get_or_create()``, just use ``'defaults__exact'``, like so::"
msgstr ""

#: ../../ref/models/querysets.txt:1351
# 8011ff09996c4d10991516e30a8c4b8e
msgid "The ``get_or_create()`` method has similar error behavior to :meth:`create()` when you're using manually specified primary keys. If an object needs to be created and the key already exists in the database, an :exc:`~django.db.IntegrityError` will be raised."
msgstr ""

#: ../../ref/models/querysets.txt:1356
# 110b87142ded484ebf559d8c9d396080
msgid "Finally, a word on using ``get_or_create()`` in Django views. As mentioned earlier, ``get_or_create()`` is mostly useful in scripts that need to parse data and create new records if existing ones aren't available. But if you need to use ``get_or_create()`` in a view, please make sure to use it only in ``POST`` requests unless you have a good reason not to. ``GET`` requests shouldn't have any effect on data; use ``POST`` whenever a request to a page has a side effect on your data. For more, see `Safe methods`_ in the HTTP spec."
msgstr ""

#: ../../ref/models/querysets.txt:1367
# d0e6cd33866d4002857cdc3d1ebfcc02
msgid "bulk_create"
msgstr ""

#: ../../ref/models/querysets.txt:1373
# 5b1c6977c9764c4e949741c4cda86d8f
msgid "This method inserts the provided list of objects into the database in an efficient manner (generally only 1 query, no matter how many objects there are)::"
msgstr ""

#: ../../ref/models/querysets.txt:1383
# 495e70ccb5aa44aba172ef1780c46496
msgid "This has a number of caveats though:"
msgstr ""

#: ../../ref/models/querysets.txt:1385
# 55004f39418a490cbe65cd083302517c
msgid "The model's ``save()`` method will not be called, and the ``pre_save`` and ``post_save`` signals will not be sent."
msgstr ""

#: ../../ref/models/querysets.txt:1387
# 47648d80586549b29547a9983c4560df
msgid "It does not work with child models in a multi-table inheritance scenario."
msgstr ""

#: ../../ref/models/querysets.txt:1388
# 83cdd065dddd4e6883f65daf9a15798b
msgid "If the model's primary key is an :class:`~django.db.models.AutoField` it does not retrieve and set the primary key attribute, as ``save()`` does."
msgstr ""

#: ../../ref/models/querysets.txt:1391
# ea091591a0494477b5ed15623cab7978
msgid "The ``batch_size`` parameter controls how many objects are created in single query. The default is to create all objects in one batch, except for SQLite where the default is such that at maximum 999 variables per query is used."
msgstr ""

#: ../../ref/models/querysets.txt:1399
# 2299b84184564b2689e937a10b83a5ca
msgid "count"
msgstr ""

#: ../../ref/models/querysets.txt:1403
# dd6784d2d6944bb1b75712e4ef8fe32a
msgid "Returns an integer representing the number of objects in the database matching the ``QuerySet``. The ``count()`` method never raises exceptions."
msgstr ""

#: ../../ref/models/querysets.txt:1414
# 80ecc6e5b1284afb8dc230852df6af09
msgid "A ``count()`` call performs a ``SELECT COUNT(*)`` behind the scenes, so you should always use ``count()`` rather than loading all of the record into Python objects and calling ``len()`` on the result (unless you need to load the objects into memory anyway, in which case ``len()`` will be faster)."
msgstr ""

#: ../../ref/models/querysets.txt:1419
# c08e6dc514a44716893b5b7b0b9da3a2
msgid "Depending on which database you're using (e.g. PostgreSQL vs. MySQL), ``count()`` may return a long integer instead of a normal Python integer. This is an underlying implementation quirk that shouldn't pose any real-world problems."
msgstr ""

#: ../../ref/models/querysets.txt:1425
# 9bc658590b8a497eafaa12daad44f284
msgid "in_bulk"
msgstr ""

#: ../../ref/models/querysets.txt:1429
# d3fe6f1557f648e9954f9c4be8839210
msgid "Takes a list of primary-key values and returns a dictionary mapping each primary-key value to an instance of the object with the given ID."
msgstr ""

#: ../../ref/models/querysets.txt:1441
# 813526b45e8c482087362c04d099fa47
msgid "If you pass ``in_bulk()`` an empty list, you'll get an empty dictionary."
msgstr ""

#: ../../ref/models/querysets.txt:1444
# d79b3f7b27fe458592c53457d2ae552c
msgid "iterator"
msgstr ""

#: ../../ref/models/querysets.txt:1448
# 8ff1af5b913844baa0e22031da4507f6
msgid "Evaluates the ``QuerySet`` (by performing the query) and returns an iterator (see :pep:`234`) over the results. A ``QuerySet`` typically caches its results internally so that repeated evaluations do not result in additional queries. In contrast, ``iterator()`` will read results directly, without doing any caching at the ``QuerySet`` level (internally, the default iterator calls ``iterator()`` and caches the return value). For a ``QuerySet`` which returns a large number of objects that you only need to access once, this can results in better performance and a significant reduction in memory."
msgstr ""

#: ../../ref/models/querysets.txt:1457
# 726c13b2ecf041208d7ab1b15a8434e6
msgid "Note that using ``iterator()`` on a ``QuerySet`` which has already been evaluated will force it to evaluate again, repeating the query."
msgstr ""

#: ../../ref/models/querysets.txt:1460
# 4dcf5e57897440d099293ca4925db9a9
msgid "Also, use of ``iterator()`` causes previous ``prefetch_related()`` calls to be ignored since these two optimizations do not make sense together."
msgstr ""

#: ../../ref/models/querysets.txt:1465
# 2c1d7b96cdf74401856218bba820de8a
msgid "Some Python database drivers like ``psycopg2`` perform caching if using client side cursors (instantiated with ``connection.cursor()`` and what Django's ORM uses). Using ``iterator()`` does not affect caching at the database driver level. To disable this caching, look at `server side cursors`_."
msgstr ""

#: ../../ref/models/querysets.txt:1474
# 41a0f2d9062e4c7e9a09e293bc69243a
msgid "latest"
msgstr ""

#: ../../ref/models/querysets.txt:1478
# 56ed099f962f47eaa86fe30b177c8ef0
msgid "Returns the latest object in the table, by date, using the ``field_name`` provided as the date field."
msgstr ""

#: ../../ref/models/querysets.txt:1481
# ef4437faa3a742c18b2c705374cec683
msgid "This example returns the latest ``Entry`` in the table, according to the ``pub_date`` field::"
msgstr ""

#: ../../ref/models/querysets.txt:1486
# 9b7b41a6a8c048ebbca6e5b775a5bc7b
msgid "If your model's :ref:`Meta <meta-options>` specifies :attr:`~django.db.models.Options.get_latest_by`, you can leave off the ``field_name`` argument to ``latest()``. Django will use the field specified in :attr:`~django.db.models.Options.get_latest_by` by default."
msgstr ""

#: ../../ref/models/querysets.txt:1491
# 521597b0dedf496b95ab4614bf482456
msgid "Like :meth:`get()`, ``latest()`` raises :exc:`~django.core.exceptions.DoesNotExist` if there is no object with the given parameters."
msgstr ""

#: ../../ref/models/querysets.txt:1495
# 7a8636477df94c1fba75cff67c4a7aca
msgid "Note ``latest()`` exists purely for convenience and readability."
msgstr ""

#: ../../ref/models/querysets.txt:1498
# 07b4830d406c408293a87873c0595e7c
msgid "aggregate"
msgstr ""

#: ../../ref/models/querysets.txt:1502
# ebe34df3b7d74015b0677e08b661e610
msgid "Returns a dictionary of aggregate values (averages, sums, etc) calculated over the ``QuerySet``. Each argument to ``aggregate()`` specifies a value that will be included in the dictionary that is returned."
msgstr ""

#: ../../ref/models/querysets.txt:1509
# 2ed53a8568d343399f27311faba9604a
msgid "Aggregates specified using keyword arguments will use the keyword as the name for the annotation. Anonymous arguments will have a name generated for them based upon the name of the aggregate function and the model field that is being aggregated."
msgstr ""

#: ../../ref/models/querysets.txt:1514
# cd6d2798609a4031b3eb7a86c32d9929
msgid "For example, when you are working with blog entries, you may want to know the number of authors that have contributed blog entries::"
msgstr ""

#: ../../ref/models/querysets.txt:1520
# 2bf91da2e8114815a0b7efc291bc8811
msgid "By using a keyword argument to specify the aggregate function, you can control the name of the aggregation value that is returned::"
msgstr ""

#: ../../ref/models/querysets.txt:1530
# 1752eba2c2444e05bf12ddfee2610570
msgid "exists"
msgstr ""

#: ../../ref/models/querysets.txt:1534
# bc049eae0cdd4fe9aef087945deebf0b
msgid "Returns ``True`` if the :class:`.QuerySet` contains any results, and ``False`` if not. This tries to perform the query in the simplest and fastest way possible, but it *does* execute nearly the same query as a normal :class:`.QuerySet` query."
msgstr ""

#: ../../ref/models/querysets.txt:1539
# 6fba03a6cdc0405699aed1cc6eb01352
msgid ":meth:`~.QuerySet.exists` is useful for searches relating to both object membership in a :class:`.QuerySet` and to the existence of any objects in a :class:`.QuerySet`, particularly in the context of a large :class:`.QuerySet`."
msgstr ""

#: ../../ref/models/querysets.txt:1543
# b5d84b9e0d694e50a52e3885da10dcc6
msgid "The most efficient method of finding whether a model with a unique field (e.g. ``primary_key``) is a member of a :class:`.QuerySet` is::"
msgstr ""

#: ../../ref/models/querysets.txt:1550
# ee0a018c393b4649801cba8f68a3c9aa
msgid "Which will be faster than the following which requires evaluating and iterating through the entire queryset::"
msgstr ""

#: ../../ref/models/querysets.txt:1556
# b3f9b24de55749c7af6a2e0da5249585
msgid "And to find whether a queryset contains any items::"
msgstr ""

#: ../../ref/models/querysets.txt:1561
# a5c841753f004bdb937395ca5a3b0325
msgid "Which will be faster than::"
msgstr ""

#: ../../ref/models/querysets.txt:1566
# 8cd5fbef38454ac78b3c2213e144cbec
msgid "... but not by a large degree (hence needing a large queryset for efficiency gains)."
msgstr ""

#: ../../ref/models/querysets.txt:1569
# ad30ae64c31d4f1bb6e38151d4726b4e
msgid "Additionally, if a ``some_query_set`` has not yet been evaluated, but you know that it will be at some point, then using ``some_query_set.exists()`` will do more overall work (one query for the existence check plus an extra one to later retrieve the results) than simply using ``bool(some_query_set)``, which retrieves the results and then checks if any were returned."
msgstr ""

#: ../../ref/models/querysets.txt:1576
# 424aa1471cc9486bb98be7ecd5aaade2
msgid "update"
msgstr ""

#: ../../ref/models/querysets.txt:1580
# 5291003add56420d8acf88a6275aca41
msgid "Performs an SQL update query for the specified fields, and returns the number of rows matched (which may not be equal to the number of rows updated if some rows already have the new value)."
msgstr ""

#: ../../ref/models/querysets.txt:1584
# be6796a79f97442fa6e3c4bdafe8d000
msgid "For example, to turn comments off for all blog entries published in 2010, you could do this::"
msgstr ""

#: ../../ref/models/querysets.txt:1589
# 13bc65de133f4fdbb66f75f533ef2241
msgid "(This assumes your ``Entry`` model has fields ``pub_date`` and ``comments_on``.)"
msgstr ""

#: ../../ref/models/querysets.txt:1591
# 2641447d40244d369150280aeda2a99a
msgid "You can update multiple fields — there's no limit on how many. For example, here we update the ``comments_on`` and ``headline`` fields::"
msgstr ""

#: ../../ref/models/querysets.txt:1596
# a1eaa182a55748ee99fc81adbfda4985
msgid "The ``update()`` method is applied instantly, and the only restriction on the :class:`.QuerySet` that is updated is that it can only update columns in the model's main table, not on related models. You can't do this, for example::"
msgstr ""

#: ../../ref/models/querysets.txt:1602
# e8655f9934ad43d7a39ac2802cd621dc
msgid "Filtering based on related fields is still possible, though::"
msgstr ""

#: ../../ref/models/querysets.txt:1606
# 236ae0180daa44d68b07e036f0f58763
msgid "You cannot call ``update()`` on a :class:`.QuerySet` that has had a slice taken or can otherwise no longer be filtered."
msgstr ""

#: ../../ref/models/querysets.txt:1609
# f351962b36424c48be740b97300ffaa0
msgid "The ``update()`` method returns the number of affected rows::"
msgstr ""

#: ../../ref/models/querysets.txt:1620
# 41a0d5e299ab41d283e1b8317318f03e
msgid "If you're just updating a record and don't need to do anything with the model object, the most efficient approach is to call ``update()``, rather than loading the model object into memory. For example, instead of doing this::"
msgstr ""

#: ../../ref/models/querysets.txt:1628
# a2bdec0987ce4c73aa9981e62b473545
msgid "...do this::"
msgstr ""

#: ../../ref/models/querysets.txt:1632
# 4d0027c991d643e680cf864c67113a97
msgid "Using ``update()`` also prevents a race condition wherein something might change in your database in the short period of time between loading the object and calling ``save()``."
msgstr ""

#: ../../ref/models/querysets.txt:1636
# bf22cec5cdfe453895dd4095d9c34a45
msgid "Finally, realize that ``update()`` does an update at the SQL level and, thus, does not call any ``save()`` methods on your models, nor does it emit the :attr:`~django.db.models.signals.pre_save` or :attr:`~django.db.models.signals.post_save` signals (which are a consequence of calling :meth:`Model.save() <django.db.models.Model.save>`). If you want to update a bunch of records for a model that has a custom :meth:`~django.db.models.Model.save()` method, loop over them and call :meth:`~django.db.models.Model.save()`, like this::"
msgstr ""

#: ../../ref/models/querysets.txt:1650
# fbfd828c77984a35aa1fedb268822fe1
msgid "delete"
msgstr ""

#: ../../ref/models/querysets.txt:1654
# 3e09eecf7c14445384df551a5d4c4d2d
msgid "Performs an SQL delete query on all rows in the :class:`.QuerySet`. The ``delete()`` is applied instantly. You cannot call ``delete()`` on a :class:`.QuerySet` that has had a slice taken or can otherwise no longer be filtered."
msgstr ""

#: ../../ref/models/querysets.txt:1659
# 5f0220641e494a348786b8fe3fa9184d
msgid "For example, to delete all the entries in a particular blog::"
msgstr ""

#: ../../ref/models/querysets.txt:1666
# e40c68d161f5409aa2584027c5cf4d6b
msgid "By default, Django's :class:`~django.db.models.ForeignKey` emulates the SQL constraint ``ON DELETE CASCADE`` — in other words, any objects with foreign keys pointing at the objects to be deleted will be deleted along with them. For example::"
msgstr ""

#: ../../ref/models/querysets.txt:1675
# 73e76199a4914305ba93e0fb40f5a1b0
msgid "This cascade behavior is customizable via the :attr:`~django.db.models.ForeignKey.on_delete` argument to the :class:`~django.db.models.ForeignKey`."
msgstr ""

#: ../../ref/models/querysets.txt:1679
# a13190aaf038405c80dd3ed65f1a92ba
msgid "The ``delete()`` method does a bulk delete and does not call any ``delete()`` methods on your models. It does, however, emit the :data:`~django.db.models.signals.pre_delete` and :data:`~django.db.models.signals.post_delete` signals for all deleted objects (including cascaded deletions)."
msgstr ""

#: ../../ref/models/querysets.txt:1688
# 596f4480cb014cbea265eec9111b3529
msgid "Django needs to fetch objects into memory to send signals and handle cascades. However, if there are no cascades and no signals, then Django may take a fast-path and delete objects without fetching into memory. For large deletes this can result in significantly reduced memory usage. The amount of executed queries can be reduced, too."
msgstr ""

#: ../../ref/models/querysets.txt:1694
# 8efe1b33dc8e44f4851a54a7c2e05490
msgid "ForeignKeys which are set to :attr:`~django.db.models.ForeignKey.on_delete` DO_NOTHING do not prevent taking the fast-path in deletion."
msgstr ""

#: ../../ref/models/querysets.txt:1697
# 5f3c256391254f98b3ec7689da15ce59
msgid "Note that the queries generated in object deletion is an implementation detail subject to change."
msgstr ""

#: ../../ref/models/querysets.txt:1703
# 389b46fe8f0240ee8c3e58c11c114134
msgid "Field lookups"
msgstr ""

#: ../../ref/models/querysets.txt:1705
# a383715b53714da8a3592781844a945b
msgid "Field lookups are how you specify the meat of an SQL ``WHERE`` clause. They're specified as keyword arguments to the ``QuerySet`` methods :meth:`filter()`, :meth:`exclude()` and :meth:`get()`."
msgstr ""

#: ../../ref/models/querysets.txt:1709
# 8e706936c9e54ae0b2cb4757771b9d84
msgid "For an introduction, see :ref:`models and database queries documentation <field-lookups-intro>`."
msgstr ""

#: ../../ref/models/querysets.txt:1715
# 07d2a34612f943da951f2f2b86dcedf1
msgid "exact"
msgstr ""

#: ../../ref/models/querysets.txt:1717
# 5f371351a4fc4499b8d7ad9f7506b7df
msgid "Exact match. If the value provided for comparison is ``None``, it will be interpreted as an SQL ``NULL`` (see :lookup:`isnull` for more details)."
msgstr ""

#: ../../ref/models/querysets.txt:1725
#: ../../ref/models/querysets.txt:2153
#: ../../ref/models/querysets.txt:2177
# adbc26ae6aa14947a05fbf60d8ccf94f
# da619a7ce25745b893d9fa4fa3c4019a
# da26218317ac495d8b83c5563c852e16
msgid "SQL equivalents::"
msgstr ""

#: ../../ref/models/querysets.txt:1732
# d249566e38f34669a1f64749b11b185b
msgid "In MySQL, a database table's \"collation\" setting determines whether ``exact`` comparisons are case-sensitive. This is a database setting, *not* a Django setting. It's possible to configure your MySQL tables to use case-sensitive comparisons, but some trade-offs are involved. For more information about this, see the :ref:`collation section <mysql-collation>` in the :doc:`databases </ref/databases>` documentation."
msgstr ""

#: ../../ref/models/querysets.txt:1742
# 2cfb22b86c7c4d0e99ba54be2cf07964
msgid "iexact"
msgstr ""

#: ../../ref/models/querysets.txt:1744
# c5cad18d240a47578b086de91ad4bcd9
msgid "Case-insensitive exact match."
msgstr ""

#: ../../ref/models/querysets.txt:1750
#: ../../ref/models/querysets.txt:1775
#: ../../ref/models/querysets.txt:1800
#: ../../ref/models/querysets.txt:1821
#: ../../ref/models/querysets.txt:1878
#: ../../ref/models/querysets.txt:1914
#: ../../ref/models/querysets.txt:1932
#: ../../ref/models/querysets.txt:1953
#: ../../ref/models/querysets.txt:1974
#: ../../ref/models/querysets.txt:1997
#: ../../ref/models/querysets.txt:2026
#: ../../ref/models/querysets.txt:2044
#: ../../ref/models/querysets.txt:2061
#: ../../ref/models/querysets.txt:2110
#: ../../ref/models/querysets.txt:2126
# 39ff0c1c9fd44cf392d5e70c52c94e4c
# 868482b3acc3454aaaeab45ad0fbcdcc
# e3a27743db784abfaab99f20c831afa0
# f373239b5c6e4629b4c191958e01e47b
# 9cc96b39dc37461a951e6b77e4e3b2b9
# 7fc014f8c0184e58b1febc1f790c9b83
# 35c14c73421742729b46012eb392e1f8
# 7ab7e67be544498b95351242a1f4126d
# da9b94c2e3fc4b56bb9b6d2f066c0ffd
# f9c6f1f9c5364fee9f0f154e663e49ab
# d30b38dc0fc645f182c74d9bdd411f9e
# 0757f0dcdef6411eac0c4c70b9e69112
# b8d53edca2194ddbb4849efb8bd78081
# 5c885063d90b47529d50cd8a6ece4e05
# a62d80727da24ecebe1cd7fb4919a305
msgid "SQL equivalent::"
msgstr ""

#: ../../ref/models/querysets.txt:1754
# 65f0bfb99fe34a24b0ccdedb3dcffd36
msgid "Note this will match ``'Beatles Blog'``, ``'beatles blog'``, ``'BeAtLes BLoG'``, etc."
msgstr ""

#: ../../ref/models/querysets.txt:1759
# c950fe3e0cf144db977aaf66a7c61278
msgid "When using the SQLite backend and Unicode (non-ASCII) strings, bear in mind the :ref:`database note <sqlite-string-matching>` about string comparisons. SQLite does not do case-insensitive matching for Unicode strings."
msgstr ""

#: ../../ref/models/querysets.txt:1769
# d6142ae5a9b545b58d3df1efd4c8c8f4
msgid "Case-sensitive containment test."
msgstr ""

#: ../../ref/models/querysets.txt:1779
# 5626465d66d441b898602ade2e0f2097
msgid "Note this will match the headline ``'Lennon honored today'`` but not ``'lennon honored today'``."
msgstr ""

#: ../../ref/models/querysets.txt:1784
# 001edf2939854ea990402c630f5b767f
msgid "SQLite doesn't support case-sensitive ``LIKE`` statements; ``contains`` acts like ``icontains`` for SQLite. See the :ref:`database note <sqlite-string-matching>` for more information."
msgstr ""

#: ../../ref/models/querysets.txt:1792
# 589f323581534ab3995102f4e0f32b96
msgid "icontains"
msgstr ""

#: ../../ref/models/querysets.txt:1794
# 295efdaa035844edb30658af9714c6e6
msgid "Case-insensitive containment test."
msgstr ""

#: ../../ref/models/querysets.txt:1806
#: ../../ref/models/querysets.txt:1938
#: ../../ref/models/querysets.txt:1980
# 6e61f7a880f74be091c47d4bf79e05ce
# 217ed0ae4633488e9aa751766913d79b
# 32d39f6d1dbe4da3afa6a62af4463c09
msgid "When using the SQLite backend and Unicode (non-ASCII) strings, bear in mind the :ref:`database note <sqlite-string-matching>` about string comparisons."
msgstr ""

#: ../../ref/models/querysets.txt:1813
# 6f93f94cab934a839f659dc90076292f
msgid "in"
msgstr ""

#: ../../ref/models/querysets.txt:1815
# d5cbef14304840318c16a76ea03c0a60
msgid "In a given list."
msgstr ""

#: ../../ref/models/querysets.txt:1825
# 544406be48f04464a55a61944c4c6d62
msgid "You can also use a queryset to dynamically evaluate the list of values instead of providing a list of literal values::"
msgstr ""

#: ../../ref/models/querysets.txt:1831
# 58010bd823084988a56a54927e61ec23
msgid "This queryset will be evaluated as subselect statement::"
msgstr ""

#: ../../ref/models/querysets.txt:1835
# 02eb354a4b794f12b3a52bc146f82549
msgid "If you pass in a ``ValuesQuerySet`` or ``ValuesListQuerySet`` (the result of calling ``values()`` or ``values_list()`` on a queryset) as the value to an ``__in`` lookup, you need to ensure you are only extracting one field in the result. For example, this will work (filtering on the blog names)::"
msgstr ""

#: ../../ref/models/querysets.txt:1843
# 494df29e60334477aa0c726339c84bae
msgid "This example will raise an exception, since the inner query is trying to extract two field values, where only one is expected::"
msgstr ""

#: ../../ref/models/querysets.txt:1852
# b95f6857ea2d423792af2d45b615758d
msgid "Be cautious about using nested queries and understand your database server's performance characteristics (if in doubt, benchmark!). Some database backends, most notably MySQL, don't optimize nested queries very well. It is more efficient, in those cases, to extract a list of values and then pass that into the second query. That is, execute two queries instead of one::"
msgstr ""

#: ../../ref/models/querysets.txt:1863
# aaa0451035424adb8a85fb02d53cb2be
msgid "Note the ``list()`` call around the Blog ``QuerySet`` to force execution of the first query. Without it, a nested query would be executed, because :ref:`querysets-are-lazy`."
msgstr ""

#: ../../ref/models/querysets.txt:1870
# 6d3d9e53e4f54e73898f2d58bf967162
msgid "gt"
msgstr ""

#: ../../ref/models/querysets.txt:1872
# 0d589710ca6a49ef9aa8a887319abffa
msgid "Greater than."
msgstr ""

#: ../../ref/models/querysets.txt:1885
# 6af28eadba4443d893f2f59c35abffad
msgid "gte"
msgstr ""

#: ../../ref/models/querysets.txt:1887
# 52091afc023048cfa5bd99b1e1020b04
msgid "Greater than or equal to."
msgstr ""

#: ../../ref/models/querysets.txt:1892
# 7b030464e60d443696ff3eab4426561a
msgid "lt"
msgstr ""

#: ../../ref/models/querysets.txt:1894
# d2f6151277224f2da7b0bbc261e6dab1
msgid "Less than."
msgstr ""

#: ../../ref/models/querysets.txt:1899
# 341696c50daf4b10ae3f25abbf6d0c81
msgid "lte"
msgstr ""

#: ../../ref/models/querysets.txt:1901
# b3cfa049ff7147b99e5940fd17a7d19b
msgid "Less than or equal to."
msgstr ""

#: ../../ref/models/querysets.txt:1906
# ba98ffb25ec54b9a8376e0a0061ba6cb
msgid "startswith"
msgstr ""

#: ../../ref/models/querysets.txt:1908
# fa9b41935e634419961a598d6d4fc643
msgid "Case-sensitive starts-with."
msgstr ""

#: ../../ref/models/querysets.txt:1918
# 3fdce028b6ee43b3b5f84132671dea14
msgid "SQLite doesn't support case-sensitive ``LIKE`` statements; ``startswith`` acts like ``istartswith`` for SQLite."
msgstr ""

#: ../../ref/models/querysets.txt:1924
# c67c6a3061b948f6ab9387dd364dfd00
msgid "istartswith"
msgstr ""

#: ../../ref/models/querysets.txt:1926
# 1aedd106ae184cbda9ca451b62722259
msgid "Case-insensitive starts-with."
msgstr ""

#: ../../ref/models/querysets.txt:1945
# 755df4eda7784df8af5f806e62b538f4
msgid "endswith"
msgstr ""

#: ../../ref/models/querysets.txt:1947
# cce44b87c6f4409b8972012421f7b892
msgid "Case-sensitive ends-with."
msgstr ""

#: ../../ref/models/querysets.txt:1959
# 777976e3ef6e479a9e38f3446dae1f23
msgid "SQLite doesn't support case-sensitive ``LIKE`` statements; ``endswith`` acts like ``iendswith`` for SQLite. Refer to the :ref:`database note <sqlite-string-matching>` documentation for more."
msgstr ""

#: ../../ref/models/querysets.txt:1966
# 901587b613bc4cc880b881fc6ecc5216
msgid "iendswith"
msgstr ""

#: ../../ref/models/querysets.txt:1968
# a60f3ecb4a5a4bb9b398985463cf63db
msgid "Case-insensitive ends-with."
msgstr ""

#: ../../ref/models/querysets.txt:1987
# 68f1cc541e084c05a3a2de2b94316cb0
msgid "range"
msgstr ""

#: ../../ref/models/querysets.txt:1989
# 7a78a9303db04f47a9d83d8c1e64a842
msgid "Range test (inclusive)."
msgstr ""

#: ../../ref/models/querysets.txt:2001
# 98638ec6e34e4a569db7151f777c7f2c
msgid "You can use ``range`` anywhere you can use ``BETWEEN`` in SQL — for dates, numbers and even characters."
msgstr ""

#: ../../ref/models/querysets.txt:2006
# cbce6703276d47f998b2eec9ee683e7b
msgid "Filtering a ``DateTimeField`` with dates won't include items on the last day, because the bounds are interpreted as \"0am on the given date\". If ``pub_date`` was a ``DateTimeField``, the above expression would be turned into this SQL::"
msgstr ""

#: ../../ref/models/querysets.txt:2013
# fe32affa41d84520a94bdaeb624a8260
msgid "Generally speaking, you can't mix dates and datetimes."
msgstr ""

#: ../../ref/models/querysets.txt:2018
# 9ae9aa9ce47949fe8c664f527804aa55
msgid "year"
msgstr ""

#: ../../ref/models/querysets.txt:2020
# 81acbc603d1c449a8b8855dd28f3847a
msgid "For date/datetime fields, exact year match. Takes a four-digit year."
msgstr ""

#: ../../ref/models/querysets.txt:2030
#: ../../ref/models/querysets.txt:2048
#: ../../ref/models/querysets.txt:2065
# dc74382de8e7468abc5ecc0869bb8140
# a879d8f14af4485697606cdaeb67a5b6
# 3010e47aa01c4aafae33261c7e24710f
msgid "(The exact SQL syntax varies for each database engine.)"
msgstr ""

#: ../../ref/models/querysets.txt:2035
# a9900af9f7d940b88ffbcdb8c98aedeb
msgid "month"
msgstr ""

#: ../../ref/models/querysets.txt:2037
# cc909b9fe85a4cd5b810991fa0e96b0f
msgid "For date and datetime fields, an exact month match. Takes an integer 1 (January) through 12 (December)."
msgstr ""

#: ../../ref/models/querysets.txt:2053
# f781148ca9b246d18dac75265aef044d
msgid "day"
msgstr ""

#: ../../ref/models/querysets.txt:2055
# 2372b06bd2e749bd8b048a4dca2d5751
msgid "For date and datetime fields, an exact day match."
msgstr ""

#: ../../ref/models/querysets.txt:2067
# b346983ec2a940ef9b5ddd86ed4e9961
msgid "Note this will match any record with a pub_date on the third day of the month, such as January 3, July 3, etc."
msgstr ""

#: ../../ref/models/querysets.txt:2073
# 9f70167883f044c5806d4bef74ef67ec
msgid "week_day"
msgstr ""

#: ../../ref/models/querysets.txt:2075
# 0e8f00eaa8d848d09a4d377b05813cc9
msgid "For date and datetime fields, a 'day of the week' match."
msgstr ""

#: ../../ref/models/querysets.txt:2077
# 62f726fb71224686afaa5509b71b6734
msgid "Takes an integer value representing the day of week from 1 (Sunday) to 7 (Saturday)."
msgstr ""

#: ../../ref/models/querysets.txt:2084
# deb77587fc89422c9379f2bc688d25ac
msgid "(No equivalent SQL code fragment is included for this lookup because implementation of the relevant query varies among different database engines.)"
msgstr ""

#: ../../ref/models/querysets.txt:2087
# e7ca23571ea346f58cebd374cff4e467
msgid "Note this will match any record with a ``pub_date`` that falls on a Monday (day 2 of the week), regardless of the month or year in which it occurs. Week days are indexed with day 1 being Sunday and day 7 being Saturday."
msgstr ""

#: ../../ref/models/querysets.txt:2093
# abdb6eacd4fb496280d8bc8d89d4fc00
msgid "When :doc:`time zone support </topics/i18n/timezones>` is enabled, Django uses UTC in the database connection, which means the ``year``, ``month``, ``day`` and ``week_day`` lookups are performed in UTC. This is a known limitation of the current implementation."
msgstr ""

#: ../../ref/models/querysets.txt:2101
# 08d213e2cfa540eb9451c673244b827e
msgid "isnull"
msgstr ""

#: ../../ref/models/querysets.txt:2103
# 5a942000f5f54fd2a0b9ee9bf86ac863
msgid "Takes either ``True`` or ``False``, which correspond to SQL queries of ``IS NULL`` and ``IS NOT NULL``, respectively."
msgstr ""

#: ../../ref/models/querysets.txt:2117
# f7de7f15dd494196b541f7e2d11fa7f2
msgid "search"
msgstr ""

#: ../../ref/models/querysets.txt:2119
# 4e91b5b074fa464cb58243a7abf8a879
msgid "A boolean full-text search, taking advantage of full-text indexing. This is like :lookup:`contains` but is significantly faster due to full-text indexing."
msgstr ""

#: ../../ref/models/querysets.txt:2130
# e0bfff8f1e91419ab9d04819284a4989
msgid "Note this is only available in MySQL and requires direct manipulation of the database to add the full-text index. By default Django uses BOOLEAN MODE for full text searches. See the `MySQL documentation`_ for additional details."
msgstr ""

#: ../../ref/models/querysets.txt:2140
# 1bb2426d6103400eb403185782891be3
msgid "regex"
msgstr ""

#: ../../ref/models/querysets.txt:2142
# 86b4f367078b456bb0273876ee822b1a
msgid "Case-sensitive regular expression match."
msgstr ""

#: ../../ref/models/querysets.txt:2144
# fca8260e07664266a1159f173c042bb4
msgid "The regular expression syntax is that of the database backend in use. In the case of SQLite, which has no built in regular expression support, this feature is provided by a (Python) user-defined REGEXP function, and the regular expression syntax is therefore that of Python's ``re`` module."
msgstr ""

#: ../../ref/models/querysets.txt:2163
# c235669cc3ab4288b7bbea98cbe9287f
msgid "Using raw strings (e.g., ``r'foo'`` instead of ``'foo'``) for passing in the regular expression syntax is recommended."
msgstr ""

#: ../../ref/models/querysets.txt:2169
# ac4c160898b845fc8668d9abd1636f69
msgid "iregex"
msgstr ""

#: ../../ref/models/querysets.txt:2171
# 3ce87abcd3a9475887259f2147629ebf
msgid "Case-insensitive regular expression match."
msgstr ""

#: ../../ref/models/querysets.txt:2190
# ab98d0fee03d48388c803e0989b0d509
msgid "Aggregation functions"
msgstr ""

#: ../../ref/models/querysets.txt:2194
# c6e736c719e24d74be3bee866c53df11
msgid "Django provides the following aggregation functions in the ``django.db.models`` module. For details on how to use these aggregate functions, see :doc:`the topic guide on aggregation </topics/db/aggregation>`."
msgstr ""

#: ../../ref/models/querysets.txt:2200
# 3e17c24f3bd446ee9d028bbb22530069
msgid "Avg"
msgstr ""

#: ../../ref/models/querysets.txt:2204
# ba982e51f64d40aaae202082a8cd6fdd
msgid "Returns the mean value of the given field, which must be numeric."
msgstr ""

#: ../../ref/models/querysets.txt:2206
# 9edcb5c4e94b44d58d5910661dadfe56
msgid "Default alias: ``<field>__avg``"
msgstr ""

#: ../../ref/models/querysets.txt:2207
#: ../../ref/models/querysets.txt:2255
#: ../../ref/models/querysets.txt:2289
# 7acdd3bd5d03421880a0dd75eee4d75b
# a26e4dfd0de74042982f26698408406c
# 5a61bc5533ca4d29bc67d812138a7103
msgid "Return type: ``float``"
msgstr ""

#: ../../ref/models/querysets.txt:2210
# 09501f7950744209a4e3d7cfdfe63920
msgid "Count"
msgstr ""

#: ../../ref/models/querysets.txt:2214
# e12b01c0059e40b1a777182d1034ed8c
msgid "Returns the number of objects that are related through the provided field."
msgstr ""

#: ../../ref/models/querysets.txt:2216
# e7428eae3d7c448081a101209417b38f
msgid "Default alias: ``<field>__count``"
msgstr ""

#: ../../ref/models/querysets.txt:2217
# 7febd3854e854906a04dbf7b2c563fba
msgid "Return type: ``int``"
msgstr ""

#: ../../ref/models/querysets.txt:2219
#: ../../ref/models/querysets.txt:2257
#: ../../ref/models/querysets.txt:2291
# 28e9812526434c72a98e426ffcd23f0d
# e276b1fadae34b11a52c446a00b30c1a
# 29b255d6a07e434b8c63973943a13260
msgid "Has one optional argument:"
msgstr ""

#: ../../ref/models/querysets.txt:2223
# 1553eaecca694516ab110018db86064b
msgid "If ``distinct=True``, the count will only include unique instances. This is the SQL equivalent of ``COUNT(DISTINCT <field>)``. The default value is ``False``."
msgstr ""

#: ../../ref/models/querysets.txt:2228
# 83ab3e39665a40f19f00fd226040600a
msgid "Max"
msgstr ""

#: ../../ref/models/querysets.txt:2232
# 55aa8ec9d33747048cf7dd52774e3746
msgid "Returns the maximum value of the given field."
msgstr ""

#: ../../ref/models/querysets.txt:2234
# 213701e5fa9a42fca49d443921175717
msgid "Default alias: ``<field>__max``"
msgstr ""

#: ../../ref/models/querysets.txt:2235
#: ../../ref/models/querysets.txt:2245
#: ../../ref/models/querysets.txt:2279
# 28b2154d8db449c095887bf596c8d002
# cf5f4684428448ac9aa7a798f3fc5da6
# 4a0d278c4d6745fd84b06d90b122c4c6
msgid "Return type: same as input field"
msgstr ""

#: ../../ref/models/querysets.txt:2238
# e386e37162164b3b859ca484867ad059
msgid "Min"
msgstr ""

#: ../../ref/models/querysets.txt:2242
# ad1e9eee02e34114ab17c7d4aae5d79f
msgid "Returns the minimum value of the given field."
msgstr ""

#: ../../ref/models/querysets.txt:2244
# def2596c6a82449fa57ddddfeba6875a
msgid "Default alias: ``<field>__min``"
msgstr ""

#: ../../ref/models/querysets.txt:2248
# 86ceff9ac5d44968b2851a4435b80fbe
msgid "StdDev"
msgstr ""

#: ../../ref/models/querysets.txt:2252
# 0ed436bc1323481487b0478bbc97a573
msgid "Returns the standard deviation of the data in the provided field."
msgstr ""

#: ../../ref/models/querysets.txt:2254
# 2b54508389cd4c25a3b0e45a99d89db9
msgid "Default alias: ``<field>__stddev``"
msgstr ""

#: ../../ref/models/querysets.txt:2261
# 5e37619cdf40471c956988a8b504ebb3
msgid "By default, ``StdDev`` returns the population standard deviation. However, if ``sample=True``, the return value will be the sample standard deviation."
msgstr ""

#: ../../ref/models/querysets.txt:2266
# 7bb333dacd524a658d7424f719f0e1b0
msgid "SQLite doesn't provide ``StdDev`` out of the box. An implementation is available as an extension module for SQLite. Consult the `SQlite documentation`_ for instructions on obtaining and installing this extension."
msgstr ""

#: ../../ref/models/querysets.txt:2272
# da281a936e524ff6aa4182899ec46258
msgid "Sum"
msgstr ""

#: ../../ref/models/querysets.txt:2276
# 2fb2caad1417467683055a5a4d1929ea
msgid "Computes the sum of all values of the given field."
msgstr ""

#: ../../ref/models/querysets.txt:2278
# 907855ba0e3749c28b6e6553c0c314c6
msgid "Default alias: ``<field>__sum``"
msgstr ""

#: ../../ref/models/querysets.txt:2282
# 5fe47d2f816e4ce1912db776b4b03770
msgid "Variance"
msgstr ""

#: ../../ref/models/querysets.txt:2286
# b75986c939304b6eaabae9c0f80519ac
msgid "Returns the variance of the data in the provided field."
msgstr ""

#: ../../ref/models/querysets.txt:2288
# d7a48224299746c9b4a353489b8c95d5
msgid "Default alias: ``<field>__variance``"
msgstr ""

#: ../../ref/models/querysets.txt:2295
# b3f1c402f1bb41ea8e97de3bf6180abd
msgid "By default, ``Variance`` returns the population variance. However, if ``sample=True``, the return value will be the sample variance."
msgstr ""

#: ../../ref/models/querysets.txt:2300
# afdaffd2d3e14add8169abcddddfca2c
msgid "SQLite doesn't provide ``Variance`` out of the box. An implementation is available as an extension module for SQLite. Consult the `SQlite documentation`_ for instructions on obtaining and installing this extension."
msgstr ""

#: ../../ref/models/relations.txt:3
# bffb456fbe934a4cbe217b6560ce3f4e
msgid "Related objects reference"
msgstr ""

#: ../../ref/models/relations.txt:9
# d2eda2e696b14aeebdc9031a6cccce0b
msgid "A \"related manager\" is a manager used in a one-to-many or many-to-many related context. This happens in two cases:"
msgstr ""

#: ../../ref/models/relations.txt:12
# ce3cefc06e05498a8f25c81353f3f352
msgid "The \"other side\" of a :class:`~django.db.models.ForeignKey` relation. That is::"
msgstr ""

#: ../../ref/models/relations.txt:21
# 2f677dda0c5540aab98ea96e53ba644a
msgid "In the above example, the methods below will be available on the manager ``reporter.article_set``."
msgstr ""

#: ../../ref/models/relations.txt:24
# d5e40e1c15034c87a40ed15b45d22a6f
msgid "Both sides of a :class:`~django.db.models.ManyToManyField` relation::"
msgstr ""

#: ../../ref/models/relations.txt:32
# 61bee0b3461b42bebea092def6cc3a34
msgid "In this example, the methods below will be available both on ``topping.pizza_set`` and on ``pizza.toppings``."
msgstr ""

#: ../../ref/models/relations.txt:35
# 6f068c0bf0a8456993bc97352974d2fe
msgid "These related managers have some extra methods:"
msgstr ""

#: ../../ref/models/relations.txt:39
# c8e3ffcce1694782b43a1abeecdf7d65
msgid "Adds the specified model objects to the related object set."
msgstr ""

#: ../../ref/models/relations.txt:49
# 024e57bb9ef34dd4a96f0901f4eb26cd
msgid "Creates a new object, saves it and puts it in the related object set. Returns the newly created object::"
msgstr ""

#: ../../ref/models/relations.txt:61
# b73e6f2392e440ab8b7bde6a25539b9b
msgid "This is equivalent to (but much simpler than)::"
msgstr ""

#: ../../ref/models/relations.txt:72
# 12b2dbc662df4b329322472f5ae75319
msgid "Note that there's no need to specify the keyword argument of the model that defines the relationship. In the above example, we don't pass the parameter ``blog`` to ``create()``. Django figures out that the new ``Entry`` object's ``blog`` field should be set to ``b``."
msgstr ""

#: ../../ref/models/relations.txt:79
# c12bb2b2cffa401580a9334919ebe3c9
msgid "Removes the specified model objects from the related object set::"
msgstr ""

#: ../../ref/models/relations.txt:85
# 3d715269b30348b4b0936400a8666a3f
msgid "In order to prevent database inconsistency, this method only exists on :class:`~django.db.models.ForeignKey` objects where ``null=True``. If the related field can't be set to ``None`` (``NULL``), then an object can't be removed from a relation without being added to another. In the above example, removing ``e`` from ``b.entry_set()`` is equivalent to doing ``e.blog = None``, and because the ``blog`` :class:`~django.db.models.ForeignKey` doesn't have ``null=True``, this is invalid."
msgstr ""

#: ../../ref/models/relations.txt:96
# fea81765b22c4cea905d7187165660ee
msgid "Removes all objects from the related object set::"
msgstr ""

#: ../../ref/models/relations.txt:101
# c8ac31e35bf443e8805521d57c53cd26
msgid "Note this doesn't delete the related objects -- it just disassociates them."
msgstr ""

#: ../../ref/models/relations.txt:104
# 3ed9c0a68078439cb03c07b2b52b0606
msgid "Just like ``remove()``, ``clear()`` is only available on :class:`~django.db.models.ForeignKey`\\s where ``null=True``."
msgstr ""

#: ../../ref/request-response.txt:3
# 7312ef8278a449719692be9848d215fe
msgid "Request and response objects"
msgstr ""

#: ../../ref/request-response.txt:9
# e47640579b254ce7858549dc38d76d92
msgid "Quick overview"
msgstr ""

#: ../../ref/request-response.txt:11
# 6bbdc2a47d41435c956f3b6c1131aded
msgid "Django uses request and response objects to pass state through the system."
msgstr ""

#: ../../ref/request-response.txt:13
# 8862e626367449e783a4983acca66f3a
msgid "When a page is requested, Django creates an :class:`HttpRequest` object that contains metadata about the request. Then Django loads the appropriate view, passing the :class:`HttpRequest` as the first argument to the view function. Each view is responsible for returning an :class:`HttpResponse` object."
msgstr ""

#: ../../ref/request-response.txt:18
# 8d040f167478490ca2511dd8770b0cff
msgid "This document explains the APIs for :class:`HttpRequest` and :class:`HttpResponse` objects, which are defined in the :mod:`django.http` module."
msgstr ""

#: ../../ref/request-response.txt:23
# 2887aa3344ba4910b7180debd709a641
msgid "HttpRequest objects"
msgstr ""

#: ../../ref/request-response.txt:30
#: ../../ref/request-response.txt:345
#: ../../ref/request-response.txt:621
#: ../../ref/request-response.txt:852
#: ../../ref/template-response.txt:30
# aea20ff37306436fb1c1838345948862
# ba38659a601f486f8eb868a5160da8b5
# 2e1bf4082905440eb250876d9894af22
# 32d01b753267499e94960e1b8e463cef
# f512b7ac21454a929953c6baa9931142
msgid "Attributes"
msgstr ""

#: ../../ref/request-response.txt:32
# f7db783657484df1b8b00aa80ecff3ce
msgid "All attributes should be considered read-only, unless stated otherwise below. ``session`` is a notable exception."
msgstr ""

#: ../../ref/request-response.txt:39
# ce1681a6d9c64f52ae5023f73ef82caf
msgid "Before Django 1.4, ``HttpRequest.body`` was named ``HttpRequest.raw_post_data``."
msgstr ""

#: ../../ref/request-response.txt:42
# 256ae384b883440ca88fda0849237d7e
msgid "The raw HTTP request body as a byte string. This is useful for processing data in different ways than conventional HTML forms: binary images, XML payload etc. For processing conventional form data, use ``HttpRequest.POST``."
msgstr ""

#: ../../ref/request-response.txt:46
# e16aa149b3ad49119d2c55ccb45da761
msgid "You can also read from an HttpRequest using a file-like interface. See :meth:`HttpRequest.read()`."
msgstr ""

#: ../../ref/request-response.txt:51
# c17425f9b2b54ac5b0770c5a23b0c361
msgid "A string representing the full path to the requested page, not including the domain."
msgstr ""

#: ../../ref/request-response.txt:54
# 6fb303e18a0c41248796e1949c5bfd0a
msgid "Example: ``\"/music/bands/the_beatles/\"``"
msgstr ""

#: ../../ref/request-response.txt:58
# c848f09fabc04d6ea535eec0a67b6820
msgid "Under some Web server configurations, the portion of the URL after the host name is split up into a script prefix portion and a path info portion. The ``path_info`` attribute always contains the path info portion of the path, no matter what Web server is being used. Using this instead of :attr:`~HttpRequest.path` can make your code easier to move between test and deployment servers."
msgstr ""

#: ../../ref/request-response.txt:65
# a8fbe5457dbe4159a23aa52260242080
msgid "For example, if the ``WSGIScriptAlias`` for your application is set to ``\"/minfo\"``, then ``path`` might be ``\"/minfo/music/bands/the_beatles/\"`` and ``path_info`` would be ``\"/music/bands/the_beatles/\"``."
msgstr ""

#: ../../ref/request-response.txt:71
# 4fca78ace67146b4889b6d04eca0971c
msgid "A string representing the HTTP method used in the request. This is guaranteed to be uppercase. Example::"
msgstr ""

#: ../../ref/request-response.txt:81
# 3498faa4af7f440684870efdc8699055
msgid "A string representing the current encoding used to decode form submission data (or ``None``, which means the :setting:`DEFAULT_CHARSET` setting is used). You can write to this attribute to change the encoding used when accessing the form data. Any subsequent attribute accesses (such as reading from ``GET`` or ``POST``) will use the new ``encoding`` value.  Useful if you know the form data is not in the :setting:`DEFAULT_CHARSET` encoding."
msgstr ""

#: ../../ref/request-response.txt:90
# 17881803fc444c5daa9d265cf57350eb
msgid "A dictionary-like object containing all given HTTP GET parameters. See the :class:`QueryDict` documentation below."
msgstr ""

#: ../../ref/request-response.txt:95
# 0c949dbc41ed4d4e95d5635dffeb5aeb
msgid "A dictionary-like object containing all given HTTP POST parameters, providing that the request contains form data. See the :class:`QueryDict` documentation below. If you need to access raw or non-form data posted in the request, access this through the :attr:`HttpRequest.body` attribute instead."
msgstr ""

#: ../../ref/request-response.txt:104
# 3170a2a2050c49e8bec989983e3f91cb
msgid "It's possible that a request can come in via POST with an empty ``POST`` dictionary -- if, say, a form is requested via the POST HTTP method but does not include form data. Therefore, you shouldn't use ``if request.POST`` to check for use of the POST method; instead, use ``if request.method == \"POST\"`` (see above)."
msgstr ""

#: ../../ref/request-response.txt:110
# a8b19cb69d944823a31c6aa66d30417e
msgid "Note: ``POST`` does *not* include file-upload information. See ``FILES``."
msgstr ""

#: ../../ref/request-response.txt:114
# ffc91d1604c448e1af8d31979e40f010
msgid "For convenience, a dictionary-like object that searches ``POST`` first, then ``GET``. Inspired by PHP's ``$_REQUEST``."
msgstr ""

#: ../../ref/request-response.txt:117
# e5983f478e4746eb82f6a14cda299f66
msgid "For example, if ``GET = {\"name\": \"john\"}`` and ``POST = {\"age\": '34'}``, ``REQUEST[\"name\"]`` would be ``\"john\"``, and ``REQUEST[\"age\"]`` would be ``\"34\"``."
msgstr ""

#: ../../ref/request-response.txt:121
# 3cddd02c8e1646baa022fdc2c16266cc
msgid "It's strongly suggested that you use ``GET`` and ``POST`` instead of ``REQUEST``, because the former are more explicit."
msgstr ""

#: ../../ref/request-response.txt:126
# b05c2b9cbc634d3f8a1922371555e978
msgid "A standard Python dictionary containing all cookies. Keys and values are strings."
msgstr ""

#: ../../ref/request-response.txt:131
# 3d6cb91da88e4ebcb739fb774aac3bcd
msgid "A dictionary-like object containing all uploaded files. Each key in ``FILES`` is the ``name`` from the ``<input type=\"file\" name=\"\" />``. Each value in ``FILES`` is an :class:`UploadedFile` as described below."
msgstr ""

#: ../../ref/request-response.txt:135
# c6e0916145d7413bb0b15092698666f0
msgid "See :doc:`/topics/files` for more information."
msgstr ""

#: ../../ref/request-response.txt:137
# 1eae53d730e6427a8ea51ab2bfe5db28
msgid "Note that ``FILES`` will only contain data if the request method was POST and the ``<form>`` that posted to the request had ``enctype=\"multipart/form-data\"``. Otherwise, ``FILES`` will be a blank dictionary-like object."
msgstr ""

#: ../../ref/request-response.txt:144
# 2d6e96cfe832475f942eadbebad51ee7
msgid "A standard Python dictionary containing all available HTTP headers. Available headers depend on the client and server, but here are some examples:"
msgstr ""

#: ../../ref/request-response.txt:148
# f990f86c25484fa58f98d145af476525
msgid "``CONTENT_LENGTH`` -- the length of the request body (as a string)."
msgstr ""

#: ../../ref/request-response.txt:149
# 9024b43cac0c40a2bb0d7af4adf1e72a
msgid "``CONTENT_TYPE`` -- the MIME type of the request body."
msgstr ""

#: ../../ref/request-response.txt:150
# 287dce5401d74b21b0d81bf750c6ee5f
msgid "``HTTP_ACCEPT_ENCODING`` -- Acceptable encodings for the response."
msgstr ""

#: ../../ref/request-response.txt:151
# d5c58283547d4d8e9147c0b2432dffed
msgid "``HTTP_ACCEPT_LANGUAGE`` -- Acceptable languages for the response."
msgstr ""

#: ../../ref/request-response.txt:152
# 58796a9af3114aa5b80d1a31bad086d6
msgid "``HTTP_HOST`` -- The HTTP Host header sent by the client."
msgstr ""

#: ../../ref/request-response.txt:153
# b17d8f1772dd4f63a6a52490a909a6b9
msgid "``HTTP_REFERER`` -- The referring page, if any."
msgstr ""

#: ../../ref/request-response.txt:154
# 916b0d19a314485a9f1cccb052868873
msgid "``HTTP_USER_AGENT`` -- The client's user-agent string."
msgstr ""

#: ../../ref/request-response.txt:155
# a31791410bb544d1a0b2d6eae78d09e0
msgid "``QUERY_STRING`` -- The query string, as a single (unparsed) string."
msgstr ""

#: ../../ref/request-response.txt:156
# 79f6ae94169342c58559765f41e08fd9
msgid "``REMOTE_ADDR`` -- The IP address of the client."
msgstr ""

#: ../../ref/request-response.txt:157
# 5dddcf8c5f37479c8589b772967adefb
msgid "``REMOTE_HOST`` -- The hostname of the client."
msgstr ""

#: ../../ref/request-response.txt:158
# b3a6985509bb49e18e1412bbe069bb0f
msgid "``REMOTE_USER`` -- The user authenticated by the Web server, if any."
msgstr ""

#: ../../ref/request-response.txt:159
# 2937cfa5598b409b9e03222459a71881
msgid "``REQUEST_METHOD`` -- A string such as ``\"GET\"`` or ``\"POST\"``."
msgstr ""

#: ../../ref/request-response.txt:160
# 2a954727ca0d4d7a96848d95f84f29fa
msgid "``SERVER_NAME`` -- The hostname of the server."
msgstr ""

#: ../../ref/request-response.txt:161
# d8c6d49eb8a84c2bbabef5cf0b49dd8a
msgid "``SERVER_PORT`` -- The port of the server (as a string)."
msgstr ""

#: ../../ref/request-response.txt:163
# f599b4dc3c4a4110af9f8da3b8e1c219
msgid "With the exception of ``CONTENT_LENGTH`` and ``CONTENT_TYPE``, as given above, any HTTP headers in the request are converted to ``META`` keys by converting all characters to uppercase, replacing any hyphens with underscores and adding an ``HTTP_`` prefix to the name. So, for example, a header called ``X-Bender`` would be mapped to the ``META`` key ``HTTP_X_BENDER``."
msgstr ""

#: ../../ref/request-response.txt:172
# ba764f88cdd04fa7a13710d760b64b9e
msgid "A ``django.contrib.auth.models.User`` object representing the currently logged-in user. If the user isn't currently logged in, ``user`` will be set to an instance of ``django.contrib.auth.models.AnonymousUser``. You can tell them apart with ``is_authenticated()``, like so::"
msgstr ""

#: ../../ref/request-response.txt:182
# 4a6e209106fd428f86ff4294d686a54f
msgid "``user`` is only available if your Django installation has the ``AuthenticationMiddleware`` activated. For more, see :doc:`/topics/auth/index`."
msgstr ""

#: ../../ref/request-response.txt:188
# 663a5d61a5c74739b29923f7634a9b6f
msgid "A readable-and-writable, dictionary-like object that represents the current session. This is only available if your Django installation has session support activated. See the :doc:`session documentation </topics/http/sessions>` for full details."
msgstr ""

#: ../../ref/request-response.txt:195
# fe1973489b084264a1a8874c3a1d5c0d
msgid "Not defined by Django itself, but will be read if other code (e.g., a custom middleware class) sets it. When present, this will be used as the root URLconf for the current request, overriding the :setting:`ROOT_URLCONF` setting. See :ref:`how-django-processes-a-request` for details."
msgstr ""

#: ../../ref/request-response.txt:204
# 98059e83cdf348949fcd8f2392404716
msgid "An instance of :class:`~django.core.urlresolvers.ResolverMatch` representing the resolved url. This attribute is only set after url resolving took place, which means it's available in all views but not in middleware methods which are executed before url resolving takes place (like ``process_request``, you can use ``process_view`` instead)."
msgstr ""

#: ../../ref/request-response.txt:216
# d4341e999818486f926ceb9a29ed6327
msgid "Returns the originating host of the request using information from the ``HTTP_X_FORWARDED_HOST`` (if :setting:`USE_X_FORWARDED_HOST` is enabled) and ``HTTP_HOST`` headers, in that order. If they don't provide a value, the method uses a combination of ``SERVER_NAME`` and ``SERVER_PORT`` as detailed in :pep:`3333`."
msgstr ""

#: ../../ref/request-response.txt:222
# 8708d0044c274dc69ffe2ba2ceda1e92
msgid "Example: ``\"127.0.0.1:8000\"``"
msgstr ""

#: ../../ref/request-response.txt:224
# 736237962b1c479bb4d72e0493ef763e
msgid "The :meth:`~HttpRequest.get_host()` method fails when the host is behind multiple proxies. One solution is to use middleware to rewrite the proxy headers, as in the following example::"
msgstr ""

#: ../../ref/request-response.txt:246
# ba31e685afee4f70bf39b14aaeb442a0
msgid "This middleware should be positioned before any other middleware that relies on the value of :meth:`~HttpRequest.get_host()` -- for instance, :class:`~django.middleware.common.CommonMiddleware` or :class:`~django.middleware.csrf.CsrfViewMiddleware`."
msgstr ""

#: ../../ref/request-response.txt:253
# 7c6376a9df5b43d3932447df61616a55
msgid "Returns the ``path``, plus an appended query string, if applicable."
msgstr ""

#: ../../ref/request-response.txt:255
# 0936dc028f7948e5b92ae8d554d29a2f
msgid "Example: ``\"/music/bands/the_beatles/?print=true\"``"
msgstr ""

#: ../../ref/request-response.txt:259
# 8b13cf20692f4d31852326906f08716c
msgid "Returns the absolute URI form of ``location``. If no location is provided, the location will be set to ``request.get_full_path()``."
msgstr ""

#: ../../ref/request-response.txt:262
# b03d72137bca4be4925ccf8cad91262e
msgid "If the location is already an absolute URI, it will not be altered. Otherwise the absolute URI is built using the server variables available in this request."
msgstr ""

#: ../../ref/request-response.txt:266
# 6e99acb8349d454c9edbb864656b3805
msgid "Example: ``\"http://example.com/music/bands/the_beatles/?print=true\"``"
msgstr ""

#: ../../ref/request-response.txt:272
# cd6e56d08f354d3d89bed13681426811
msgid "Returns a cookie value for a signed cookie, or raises a ``django.core.signing.BadSignature`` exception if the signature is no longer valid. If you provide the ``default`` argument the exception will be suppressed and that default value will be returned instead."
msgstr ""

#: ../../ref/request-response.txt:277
# d375de47b37a4a0fa67d735cf31ab7b7
msgid "The optional ``salt`` argument can be used to provide extra protection against brute force attacks on your secret key. If supplied, the ``max_age`` argument will be checked against the signed timestamp attached to the cookie value to ensure the cookie is not older than ``max_age`` seconds."
msgstr ""

#: ../../ref/request-response.txt:303
# 697f2655510945a49fef8bfb4efef05d
msgid "See :doc:`cryptographic signing </topics/signing>` for more information."
msgstr ""

#: ../../ref/request-response.txt:307
# 9af58ddc985040758bb18f3bc0193fa6
msgid "Returns ``True`` if the request is secure; that is, if it was made with HTTPS."
msgstr ""

#: ../../ref/request-response.txt:312
# 9c59a911977b42dbaa0906b49baf27c8
msgid "Returns ``True`` if the request was made via an ``XMLHttpRequest``, by checking the ``HTTP_X_REQUESTED_WITH`` header for the string ``'XMLHttpRequest'``. Most modern JavaScript libraries send this header. If you write your own XMLHttpRequest call (on the browser side), you'll have to set this header manually if you want ``is_ajax()`` to work."
msgstr ""

#: ../../ref/request-response.txt:324
# 5324875e52284a74abe97c0e9b62738e
msgid "Methods implementing a file-like interface for reading from an HttpRequest instance. This makes it possible to consume an incoming request in a streaming fashion. A common use-case would be to process a big XML payload with iterative parser without constructing a whole XML tree in memory."
msgstr ""

#: ../../ref/request-response.txt:330
# e885478902cc4faf9c17272fc95f6b81
msgid "Given this standard interface, an HttpRequest instance can be passed directly to an XML parser such as ElementTree::"
msgstr ""

#: ../../ref/request-response.txt:339
# fb0105ac64bf49948a5d6181447d154b
msgid "UploadedFile objects"
msgstr ""

#: ../../ref/request-response.txt:349
# f5ca6f8c40a74d8f8f4b145c837a2105
msgid "The name of the uploaded file."
msgstr ""

#: ../../ref/request-response.txt:353
# 7d93fc1e91df48de859d152ccf72e9ea
msgid "The size, in bytes, of the uploaded file."
msgstr ""

#: ../../ref/request-response.txt:360
# 70da53fd75664550aee720ee3deb8686
msgid "Returns a generator that yields sequential chunks of data."
msgstr ""

#: ../../ref/request-response.txt:364
# 3a5f525df8354635918b5068ac0073c1
msgid "Read a number of bytes from the file."
msgstr ""

#: ../../ref/request-response.txt:369
# 195c55c01298438c9a4dd7b018bf4bc5
msgid "QueryDict objects"
msgstr ""

#: ../../ref/request-response.txt:373
# 10392c6e3cdd4fbb8637b3f64bec2352
msgid "In an :class:`HttpRequest` object, the ``GET`` and ``POST`` attributes are instances of ``django.http.QueryDict``. :class:`QueryDict` is a dictionary-like class customized to deal with multiple values for the same key. This is necessary because some HTML form elements, notably ``<select multiple=\"multiple\">``, pass multiple values for the same key."
msgstr ""

#: ../../ref/request-response.txt:379
# 8e210eb1c84d492aae004cbeb5c03e16
msgid "``QueryDict`` instances are immutable, unless you create a ``copy()`` of them. That means you can't change attributes of ``request.POST`` and ``request.GET`` directly."
msgstr ""

#: ../../ref/request-response.txt:386
# 246e78a248bf4abda5d918b7d2cb0c79
msgid ":class:`QueryDict` implements all the standard dictionary methods, because it's a subclass of dictionary. Exceptions are outlined here:"
msgstr ""

#: ../../ref/request-response.txt:391
# 72489fb4a5db454e8b5dfda94053a651
msgid "Returns the value for the given key. If the key has more than one value, ``__getitem__()`` returns the last value. Raises ``django.utils.datastructures.MultiValueDictKeyError`` if the key does not exist. (This is a subclass of Python's standard ``KeyError``, so you can stick to catching ``KeyError``.)"
msgstr ""

#: ../../ref/request-response.txt:399
# f8e255e9fe074ec687f1651d5c6c60a5
msgid "Sets the given key to ``[value]`` (a Python list whose single element is ``value``). Note that this, as other dictionary functions that have side effects, can only be called on a mutable ``QueryDict`` (one that was created via ``copy()``)."
msgstr ""

#: ../../ref/request-response.txt:406
# 96d12c3e7d3349e88b1dc18b74e2eeb8
msgid "Returns ``True`` if the given key is set. This lets you do, e.g., ``if \"foo\" in request.GET``."
msgstr ""

#: ../../ref/request-response.txt:411
# 662a1887f34f4702bf6fe475745a6c0c
msgid "Uses the same logic as ``__getitem__()`` above, with a hook for returning a default value if the key doesn't exist."
msgstr ""

#: ../../ref/request-response.txt:416
# 80c275fede614e48803549ef60eb2020
msgid "Just like the standard dictionary ``setdefault()`` method, except it uses ``__setitem__()`` internally."
msgstr ""

#: ../../ref/request-response.txt:421
# a2e7b40c96c34674bb81359565201ca9
msgid "Takes either a ``QueryDict`` or standard dictionary. Just like the standard dictionary ``update()`` method, except it *appends* to the current dictionary items rather than replacing them. For example::"
msgstr ""

#: ../../ref/request-response.txt:435
# 221500dac341468791ffaf64938ec9cb
msgid "Just like the standard dictionary ``items()`` method, except this uses the same last-value logic as ``__getitem__()``. For example::"
msgstr ""

#: ../../ref/request-response.txt:444
# c4e34fc2cd3b4480bac48875919d9c81
msgid "Just like the standard dictionary ``iteritems()`` method. Like :meth:`QueryDict.items()` this uses the same last-value logic as :meth:`QueryDict.__getitem__()`."
msgstr ""

#: ../../ref/request-response.txt:450
# b61bdf0aa5c14443aed92f5ab0470652
msgid "Like :meth:`QueryDict.iteritems()` except it includes all values, as a list, for each member of the dictionary."
msgstr ""

#: ../../ref/request-response.txt:455
# ffaf0c66935e49a391bae39bffafef56
msgid "Just like the standard dictionary ``values()`` method, except this uses the same last-value logic as ``__getitem__()``. For example::"
msgstr ""

#: ../../ref/request-response.txt:464
# cdb7d5577db143de80a24f9747424b3c
msgid "Just like :meth:`QueryDict.values()`, except an iterator."
msgstr ""

#: ../../ref/request-response.txt:466
# d3732d82116c4bfc8df76da8e38ca11e
msgid "In addition, ``QueryDict`` has the following methods:"
msgstr ""

#: ../../ref/request-response.txt:470
# d0fd4e2e216241febec38e164d76a7ed
msgid "Returns a copy of the object, using ``copy.deepcopy()`` from the Python standard library. The copy will be mutable -- that is, you can change its values."
msgstr ""

#: ../../ref/request-response.txt:476
# feac724ba5fd4dbb8fc474266ff58ea1
msgid "Returns the data with the requested key, as a Python list. Returns an empty list if the key doesn't exist and no default value was provided. It's guaranteed to return a list of some sort unless the default value was no list."
msgstr ""

#: ../../ref/request-response.txt:486
# 17608ec223164bb5ab90bd7f9c339d93
msgid "Sets the given key to ``list_`` (unlike ``__setitem__()``)."
msgstr ""

#: ../../ref/request-response.txt:490
# f04662b9a44244b69bcef0d968d77110
msgid "Appends an item to the internal list associated with key."
msgstr ""

#: ../../ref/request-response.txt:494
# 40c719a589e54116b20cc0f37b7fab75
msgid "Just like ``setdefault``, except it takes a list of values instead of a single value."
msgstr ""

#: ../../ref/request-response.txt:499
# 7efc6e8d3e1b4e13982f7cb5f9b6bd5d
msgid "Like :meth:`items()`, except it includes all values, as a list, for each member of the dictionary. For example::"
msgstr ""

#: ../../ref/request-response.txt:510
# 9ede48456ae647b6aa259b5fceebb376
msgid "Returns ``dict`` representation of ``QueryDict``. For every (key, list) pair in ``QueryDict``, ``dict`` will have (key, item), where item is one element of the list, using same logic as :meth:`QueryDict.__getitem__()`::"
msgstr ""

#: ../../ref/request-response.txt:520
# 0128818c8a8e4fd1840e155d927ae587
msgid "Returns a string of the data in query-string format. Example::"
msgstr ""

#: ../../ref/request-response.txt:526
# 590725bf6c664f518f627a2587bc1fd8
msgid "Optionally, urlencode can be passed characters which do not require encoding. For example::"
msgstr ""

#: ../../ref/request-response.txt:535
# 1af845dcc7184ee383a0fbb605b50dde
msgid "HttpResponse objects"
msgstr ""

#: ../../ref/request-response.txt:539
# 54d4f9ed327243ba822bee78c5dfc4f4
msgid "In contrast to :class:`HttpRequest` objects, which are created automatically by Django, :class:`HttpResponse` objects are your responsibility. Each view you write is responsible for instantiating, populating and returning an :class:`HttpResponse`."
msgstr ""

#: ../../ref/request-response.txt:544
# f5f290a17e304307986ec57e26a34f20
msgid "The :class:`HttpResponse` class lives in the :mod:`django.http` module."
msgstr ""

#: ../../ref/request-response.txt:550
# 3cfb0099875f417eb14ffb5afce39396
msgid "Passing strings"
msgstr ""

#: ../../ref/request-response.txt:552
# 79104761885049c587d1bb6e1a09ae94
msgid "Typical usage is to pass the contents of the page, as a string, to the :class:`HttpResponse` constructor::"
msgstr ""

#: ../../ref/request-response.txt:559
# 233f1c1cc36d4edc8c972d2eb4d19900
msgid "But if you want to add content incrementally, you can use ``response`` as a file-like object::"
msgstr ""

#: ../../ref/request-response.txt:567
# 4cbbbba35753480c840d51e1c555fd50
msgid "Passing iterators"
msgstr ""

#: ../../ref/request-response.txt:569
# d469c7f4bb88431ca6797d7a94e480f0
msgid "Finally, you can pass ``HttpResponse`` an iterator rather than strings. If you use this technique, the iterator should return strings."
msgstr ""

#: ../../ref/request-response.txt:572
# dd29ccf4c868444fa2754e8f045d9faa
msgid "Passing an iterator as content to :class:`HttpResponse` creates a streaming response if (and only if) no middleware accesses the :attr:`HttpResponse.content` attribute before the response is returned."
msgstr ""

#: ../../ref/request-response.txt:578
# 2570f926b52241f0a77e2f3d34a604ba
msgid "This technique is fragile and was deprecated in Django 1.5. If you need the response to be streamed from the iterator to the client, you should use the :class:`StreamingHttpResponse` class instead."
msgstr ""

#: ../../ref/request-response.txt:582
# 2bca6cef25a54360b4733254254d30db
msgid "As of Django 1.7, when :class:`HttpResponse` is instantiated with an iterator, it will consume it immediately, store the response content as a string, and discard the iterator."
msgstr ""

#: ../../ref/request-response.txt:588
# 19f4ee6805824a6888ff33b9d7711def
msgid "You can now use :class:`HttpResponse` as a file-like object even if it was instantiated with an iterator. Django will consume and save the content of the iterator on first access."
msgstr ""

#: ../../ref/request-response.txt:593
# 62dd442c9d5b4d7d9ceba04715944000
msgid "Setting headers"
msgstr ""

#: ../../ref/request-response.txt:595
# a006e394724849c18c44d7a1e5de0ef7
msgid "To set or remove a header in your response, treat it like a dictionary::"
msgstr ""

#: ../../ref/request-response.txt:601
# 3625a746f20f4d30923baee77b15c041
msgid "Note that unlike a dictionary, ``del`` doesn't raise ``KeyError`` if the header doesn't exist."
msgstr ""

#: ../../ref/request-response.txt:604
# af1a289f98c04e69808f456cabd7515c
msgid "HTTP headers cannot contain newlines. An attempt to set a header containing a newline character (CR or LF) will raise ``BadHeaderError``"
msgstr ""

#: ../../ref/request-response.txt:608
# d403391715c84884b33381f3637085e2
msgid "Telling the browser to treat the response as a file attachment"
msgstr ""

#: ../../ref/request-response.txt:610
# f22c7dbe3f9a4e77b8b584d392693f34
msgid "To tell the browser to treat the response as a file attachment, use the ``content_type`` argument and set the ``Content-Disposition`` header. For example, this is how you might return a Microsoft Excel spreadsheet::"
msgstr ""

#: ../../ref/request-response.txt:617
# 32f3f00373344e2aa40b7c961200d43b
msgid "There's nothing Django-specific about the ``Content-Disposition`` header, but it's easy to forget the syntax, so we've included it here."
msgstr ""

#: ../../ref/request-response.txt:625
# 97226e84f89e4ab8b2fb9cc6ef11a3f6
msgid "A string representing the content, encoded from a Unicode object if necessary."
msgstr ""

#: ../../ref/request-response.txt:630
#: ../../ref/request-response.txt:860
# 7d86089cf86d49efa42cfc6da2f7fbb3
# 07bbdc1054f64961ad71170f07cd65e7
msgid "The `HTTP Status code`_ for the response."
msgstr ""

#: ../../ref/request-response.txt:634
# f6c86abdb52e4511985f83d459b5ddcd
msgid "This is always ``False``."
msgstr ""

#: ../../ref/request-response.txt:636
# 2dff06cf1fdc4bd79201b91b82238803
msgid "This attribute exists so middleware can treat streaming responses differently from regular responses."
msgstr ""

#: ../../ref/request-response.txt:644
# ce09e04973af465fb3c2870b1f3c9998
msgid "Instantiates an ``HttpResponse`` object with the given page content and content type."
msgstr ""

#: ../../ref/request-response.txt:647
# 6f81d97f8aa14400a7b122f2f6dc41b8
msgid "``content`` should be an iterator or a string. If it's an iterator, it should return strings, and those strings will be joined together to form the content of the response. If it is not an iterator or a string, it will be converted to a string when accessed."
msgstr ""

#: ../../ref/request-response.txt:653
# bb4517a284fe4fd2a9388d6f43573fe3
msgid "``content_type`` is the MIME type optionally completed by a character set encoding and is used to fill the HTTP ``Content-Type`` header. If not specified, it is formed by the :setting:`DEFAULT_CONTENT_TYPE` and :setting:`DEFAULT_CHARSET` settings, by default: \"`text/html; charset=utf-8`\"."
msgstr ""

#: ../../ref/request-response.txt:658
# 40c8fcee9c1048efb29d7e2e9947df47
msgid "Historically, this parameter was called ``mimetype`` (now deprecated)."
msgstr ""

#: ../../ref/request-response.txt:660
# 43edded7c5e64c06889db33a293bedc5
msgid "``status`` is the `HTTP Status code`_ for the response."
msgstr ""

#: ../../ref/request-response.txt:665
# ecb759872cf64233a090bc98cff6bb3c
msgid "Sets the given header name to the given value. Both ``header`` and ``value`` should be strings."
msgstr ""

#: ../../ref/request-response.txt:670
# 001ec0d490d14d59904ae95f1d4af4cd
msgid "Deletes the header with the given name. Fails silently if the header doesn't exist. Case-insensitive."
msgstr ""

#: ../../ref/request-response.txt:675
# fe5e4c569cdb448199b8dbcb63f44820
msgid "Returns the value for the given header name. Case-insensitive."
msgstr ""

#: ../../ref/request-response.txt:679
# f47857f2cb5e4ba0a05a4b68b889cedc
msgid "Returns ``True`` or ``False`` based on a case-insensitive check for a header with the given name."
msgstr ""

#: ../../ref/request-response.txt:684
# 16901f5e7dcb484b9015ebeedac2a08f
msgid "Sets a cookie. The parameters are the same as in the :class:`Cookie.Morsel` object in the Python standard library."
msgstr ""

#: ../../ref/request-response.txt:687
# 2579115cd06948d28446986b5f82cbdc
msgid "``max_age`` should be a number of seconds, or ``None`` (default) if the cookie should last only as long as the client's browser session. If ``expires`` is not specified, it will be calculated."
msgstr ""

#: ../../ref/request-response.txt:690
# 53ec86d4eeb44d45bd83bbf605be116f
msgid "``expires`` should either be a string in the format ``\"Wdy, DD-Mon-YY HH:MM:SS GMT\"`` or a ``datetime.datetime`` object in UTC. If ``expires`` is a ``datetime`` object, the ``max_age`` will be calculated."
msgstr ""

#: ../../ref/request-response.txt:694
# 7e4c009f311d4ad28c9d50ae7d5f1afd
msgid "Use ``domain`` if you want to set a cross-domain cookie. For example, ``domain=\".lawrence.com\"`` will set a cookie that is readable by the domains www.lawrence.com, blogs.lawrence.com and calendars.lawrence.com. Otherwise, a cookie will only be readable by the domain that set it."
msgstr ""

#: ../../ref/request-response.txt:699
# 4b6abc4f3051406b9223e4a50c53cb14
msgid "Use ``httponly=True`` if you want to prevent client-side JavaScript from having access to the cookie."
msgstr ""

#: ../../ref/request-response.txt:702
#: ../../ref/settings.txt:1737
# b87fe2e18dd8459e9a9ba22448cffe3f
# 186c93ab27ba4a91801d79097268a12c
msgid "HTTPOnly_ is a flag included in a Set-Cookie HTTP response header. It is not part of the :rfc:`2109` standard for cookies, and it isn't honored consistently by all browsers. However, when it is honored, it can be a useful way to mitigate the risk of client side script accessing the protected cookie data."
msgstr ""

#: ../../ref/request-response.txt:715
# 32d26eb57d8f417bbd27fdd3f5d61387
msgid "Like :meth:`~HttpResponse.set_cookie()`, but :doc:`cryptographic signing </topics/signing>` the cookie before setting it. Use in conjunction with :meth:`HttpRequest.get_signed_cookie`. You can use the optional ``salt`` argument for added key strength, but you will need to remember to pass it to the corresponding :meth:`HttpRequest.get_signed_cookie` call."
msgstr ""

#: ../../ref/request-response.txt:724
# 7ac34ced9bfb4ae0bc9021c04e961922
msgid "Deletes the cookie with the given key. Fails silently if the key doesn't exist."
msgstr ""

#: ../../ref/request-response.txt:727
# bc6bf7ec1bd64c9184cafca5e897caf4
msgid "Due to the way cookies work, ``path`` and ``domain`` should be the same values you used in ``set_cookie()`` -- otherwise the cookie may not be deleted."
msgstr ""

#: ../../ref/request-response.txt:733
#: ../../ref/request-response.txt:737
#: ../../ref/request-response.txt:741
# b57e4a964fc442618522c7ece1920bb4
# 53b403cc016b4b7c989c274837f8be02
# 78c9c633574542fc872da5ad66ffc36a
msgid "This method makes an :class:`HttpResponse` instance a file-like object."
msgstr ""

#: ../../ref/request-response.txt:749
# 2b0baaba1c93457a95215912c5ef50db
msgid "HttpResponse subclasses"
msgstr ""

#: ../../ref/request-response.txt:751
# 3a1e7e762f874f929accddad22d145dc
msgid "Django includes a number of ``HttpResponse`` subclasses that handle different types of HTTP responses. Like ``HttpResponse``, these subclasses live in :mod:`django.http`."
msgstr ""

#: ../../ref/request-response.txt:757
# e720507ab46943de855aaab4e6d38a64
msgid "The first argument to the constructor is required -- the path to redirect to. This can be a fully qualified URL (e.g. ``'http://www.yahoo.com/search/'``) or an absolute path with no domain (e.g. ``'/search/'``). See :class:`HttpResponse` for other optional constructor arguments. Note that this returns an HTTP status code 302."
msgstr ""

#: ../../ref/request-response.txt:765
# 7f41a0423a694a96b2e80d1e87e6ca7b
msgid "Like :class:`HttpResponseRedirect`, but it returns a permanent redirect (HTTP status code 301) instead of a \"found\" redirect (status code 302)."
msgstr ""

#: ../../ref/request-response.txt:770
# 560b18261207424e930185bd67aed59a
msgid "The constructor doesn't take any arguments and no content should be added to this response. Use this to designate that a page hasn't been modified since the user's last request (status code 304)."
msgstr ""

#: ../../ref/request-response.txt:776
# 39985aba09a64c85beefa341b8380585
msgid "Acts just like :class:`HttpResponse` but uses a 400 status code."
msgstr ""

#: ../../ref/request-response.txt:780
# af7788af8f794be89327db2be0b36201
msgid "Acts just like :class:`HttpResponse` but uses a 404 status code."
msgstr ""

#: ../../ref/request-response.txt:784
# 01e0b6c2da0042f69fdfea5dfe6ff14d
msgid "Acts just like :class:`HttpResponse` but uses a 403 status code."
msgstr ""

#: ../../ref/request-response.txt:788
# 8b5d330226934159a9248d3c6b2d1482
msgid "Like :class:`HttpResponse`, but uses a 405 status code. The first argument to the constructor is required: a list of permitted methods (e.g. ``['GET', 'POST']``)."
msgstr ""

#: ../../ref/request-response.txt:794
# 706e3f01e302413dbe581ed916d8b2a1
msgid "Acts just like :class:`HttpResponse` but uses a 410 status code."
msgstr ""

#: ../../ref/request-response.txt:798
# dbcc6167a37b4df9990fe387ccb166b1
msgid "Acts just like :class:`HttpResponse` but uses a 500 status code."
msgstr ""

#: ../../ref/request-response.txt:802
# 796a935c690d46e0b44a54c28f337aeb
msgid "If a custom subclass of :class:`HttpResponse` implements a ``render`` method, Django will treat it as emulating a :class:`~django.template.response.SimpleTemplateResponse`, and the ``render`` method must itself return a valid response object."
msgstr ""

#: ../../ref/request-response.txt:810
# f946c307f0844f9cab4be99387885250
msgid "StreamingHttpResponse objects"
msgstr ""

#: ../../ref/request-response.txt:816
# cfcdad4d7f9443f7936b9cade06e9f11
msgid "The :class:`StreamingHttpResponse` class is used to stream a response from Django to the browser. You might want to do this if generating the response takes too long or uses too much memory. For instance, it's useful for generating large CSV files."
msgstr ""

#: ../../ref/request-response.txt:823
# aececebe1a8c4611b945a01bd34e9928
msgid "Django is designed for short-lived requests. Streaming responses will tie a worker process and keep a database connection idle in transaction for the entire duration of the response. This may result in poor performance."
msgstr ""

#: ../../ref/request-response.txt:827
# c450f85a38f542bca8980da8f168188d
msgid "Generally speaking, you should perform expensive tasks outside of the request-response cycle, rather than resorting to a streamed response."
msgstr ""

#: ../../ref/request-response.txt:830
# df1859b2cf7540de825c9b7cb919a632
msgid "The :class:`StreamingHttpResponse` is not a subclass of :class:`HttpResponse`, because it features a slightly different API. However, it is almost identical, with the following notable differences:"
msgstr ""

#: ../../ref/request-response.txt:834
# e392dbe76e934c7aa72611c74ab0f43b
msgid "It should be given an iterator that yields strings as content."
msgstr ""

#: ../../ref/request-response.txt:836
# bf0bfc8a769047aeaf0f536fe1073138
msgid "You cannot access its content, except by iterating the response object itself. This should only occur when the response is returned to the client."
msgstr ""

#: ../../ref/request-response.txt:839
# 25637ba1ab41454ba5b3eb6ef905af20
msgid "It has no ``content`` attribute. Instead, it has a :attr:`~StreamingHttpResponse.streaming_content` attribute."
msgstr ""

#: ../../ref/request-response.txt:842
# 18c7607dc46043dcbbb31f526874de23
msgid "You cannot use the file-like object ``tell()`` or ``write()`` methods. Doing so will raise an exception."
msgstr ""

#: ../../ref/request-response.txt:845
# 88bf1bd5c8e7463181d8136cd5eb6832
msgid ":class:`StreamingHttpResponse` should only be used in situations where it is absolutely required that the whole content isn't iterated before transferring the data to the client. Because the content can't be accessed, many middlewares can't function normally. For example the ``ETag`` and ``Content- Length`` headers can't be generated for streaming responses."
msgstr ""

#: ../../ref/request-response.txt:856
# b4657b1b20994448825d3ef78ea942a4
msgid "An iterator of strings representing the content."
msgstr ""

#: ../../ref/request-response.txt:864
# 6509a6ac67fb440182fa66efea423f05
msgid "This is always ``True``."
msgstr ""

#: ../../ref/settings.txt:11
# 097a8427e767459394bfbb994f5d6d3c
msgid "Be careful when you override settings, especially when the default value is a non-empty tuple or dictionary, such as :setting:`MIDDLEWARE_CLASSES` and :setting:`TEMPLATE_CONTEXT_PROCESSORS`. Make sure you keep the components required by the features of Django you wish to use."
msgstr ""

#: ../../ref/settings.txt:17
# 31227dc2a7a144e88d396924e72fb46a
msgid "Available settings"
msgstr ""

#: ../../ref/settings.txt:19
# 59b00d76fe264156a3ae83a8a59d1f1d
msgid "Here's a full list of all available settings, in alphabetical order, and their default values."
msgstr ""

#: ../../ref/settings.txt:25
# aa201ea8f9bd4cd5b4af513c910a8a98
msgid "ABSOLUTE_URL_OVERRIDES"
msgstr ""

#: ../../ref/settings.txt:27
#: ../../ref/settings.txt:410
#: ../../ref/settings.txt:493
# 50cbfe475b9c451fa1dd6e4ca35d7f35
# 48f565b20b82477a93c2976ef7491657
# dd24e13284f143549575287ba03a6164
msgid "Default: ``{}`` (Empty dictionary)"
msgstr ""

#: ../../ref/settings.txt:29
# 85a1e8a2b8574e74aa1cae3421238892
msgid "A dictionary mapping ``\"app_label.model_name\"`` strings to functions that take a model object and return its URL. This is a way of overriding ``get_absolute_url()`` methods on a per-installation basis. Example::"
msgstr ""

#: ../../ref/settings.txt:38
# 381e4130d87f4d749765adac9c12f04f
msgid "Note that the model name used in this setting should be all lower-case, regardless of the case of the actual model class name."
msgstr ""

#: ../../ref/settings.txt:44
# ad9052c3ec3f4b59a9bfbe8f9dd695e8
msgid "ADMIN_FOR"
msgstr ""

#: ../../ref/settings.txt:46
#: ../../ref/settings.txt:59
#: ../../ref/settings.txt:112
#: ../../ref/settings.txt:932
#: ../../ref/settings.txt:1115
#: ../../ref/settings.txt:1191
#: ../../ref/settings.txt:1211
#: ../../ref/settings.txt:1290
#: ../../ref/settings.txt:1388
#: ../../ref/settings.txt:1551
#: ../../ref/settings.txt:1995
# 739fde05a8f143b0b3eefae8a4cbce2d
# cc1b5c4b02de4affa472a5c890d6e99a
# 4eb4efc0f42646f88b81da982207467c
# 0576f8307a00421a987abcdea7925933
# 30acf2beb3e646d391ce8eab61e55c91
# ab2f6c8b0df44f338f04298798e46961
# 6d3b4ae74be449cfbed2fd511384e526
# 4f2f1146dcac4735a7135c4242a21cad
# 3f1fb6d5c8924196b17fc6f22a142ad7
# 3d4aa0a4fd7646a5a6b0e032eef9c7c2
# 6a1be3e151d64a5296ea66174528c5de
msgid "Default: ``()`` (Empty tuple)"
msgstr ""

#: ../../ref/settings.txt:48
# 71eb19887dae465386b073b56ed291bc
msgid "Used for admin-site settings modules, this should be a tuple of settings modules (in the format ``'foo.bar.baz'``) for which this site is an admin."
msgstr ""

#: ../../ref/settings.txt:51
# e38dd3d916a04499bbc0be61f0ad0dec
msgid "The admin site uses this in its automatically-introspected documentation of models, views and template tags."
msgstr ""

#: ../../ref/settings.txt:57
# eb7fa8100ca148e69abfa6f18035503c
msgid "ADMINS"
msgstr ""

#: ../../ref/settings.txt:61
# 52333f33653d4b54b31c1cc6eb50e43d
msgid "A tuple that lists people who get code error notifications. When ``DEBUG=False`` and a view raises an exception, Django will email these people with the full exception information. Each member of the tuple should be a tuple of (Full name, email address). Example::"
msgstr ""

#: ../../ref/settings.txt:68
# 329ca0e572fd40ff91bc4daab1e567ef
msgid "Note that Django will email *all* of these people whenever an error happens. See :doc:`/howto/error-reporting` for more information."
msgstr ""

#: ../../ref/settings.txt:74
# 71e9ce4069e54225b9cf911cf0efdf4a
msgid "ALLOWED_HOSTS"
msgstr ""

#: ../../ref/settings.txt:76
#: ../../ref/settings.txt:680
# 512c4d30221845d0a0ca154afaa15dbc
# 703dd498b7cd4b8b8b8746901c5c1717
msgid "Default: ``[]`` (Empty list)"
msgstr ""

#: ../../ref/settings.txt:78
# bf98c658df1b4dada290b8dc246499ea
msgid "A list of strings representing the host/domain names that this Django site can serve. This is a security measure to prevent an attacker from poisoning caches and password reset emails with links to malicious hosts by submitting requests with a fake HTTP ``Host`` header, which is possible even under many seemingly-safe webserver configurations."
msgstr ""

#: ../../ref/settings.txt:84
# acc92e5da95c4cb18baf30c9b7ce9710
msgid "Values in this list can be fully qualified names (e.g. ``'www.example.com'``), in which case they will be matched against the request's ``Host`` header exactly (case-insensitive, not including port). A value beginning with a period can be used as a subdomain wildcard: ``'.example.com'`` will match ``example.com``, ``www.example.com``, and any other subdomain of ``example.com``. A value of ``'*'`` will match anything; in this case you are responsible to provide your own validation of the ``Host`` header (perhaps in a middleware; if so this middleware must be listed first in :setting:`MIDDLEWARE_CLASSES`)."
msgstr ""

#: ../../ref/settings.txt:94
# ef8986bcef844e53bac6d6cf23caa8d5
msgid "If the ``Host`` header (or ``X-Forwarded-Host`` if :setting:`USE_X_FORWARDED_HOST` is enabled) does not match any value in this list, the :meth:`django.http.HttpRequest.get_host()` method will raise :exc:`~django.core.exceptions.SuspiciousOperation`."
msgstr ""

#: ../../ref/settings.txt:99
# 0c3d448b55d24322ba7dd2c2f2911a5c
msgid "When :setting:`DEBUG` is ``True`` or when running tests, host validation is disabled; any host will be accepted. Thus it's usually only necessary to set it in production."
msgstr ""

#: ../../ref/settings.txt:103
# 2f9bcc17d0f34d8c8d9848ddf7dcf0b4
msgid "This validation only applies via :meth:`~django.http.HttpRequest.get_host()`; if your code accesses the ``Host`` header directly from ``request.META`` you are bypassing this security protection."
msgstr ""

#: ../../ref/settings.txt:110
# 2b376facf16f4c11b5280becd5e2e25a
msgid "ALLOWED_INCLUDE_ROOTS"
msgstr ""

#: ../../ref/settings.txt:114
# 612ce3790a48477b8f2ff19744f3cf8a
msgid "A tuple of strings representing allowed prefixes for the ``{% ssi %}`` template tag. This is a security measure, so that template authors can't access files that they shouldn't be accessing."
msgstr ""

#: ../../ref/settings.txt:118
# 9169e35c6bfd4f49a234cf5447989a14
msgid "For example, if :setting:`ALLOWED_INCLUDE_ROOTS` is ``('/home/html', '/var/www')``, then ``{% ssi /home/html/foo.txt %}`` would work, but ``{% ssi /etc/passwd %}`` wouldn't."
msgstr ""

#: ../../ref/settings.txt:125
# 9836be3738d6462693156bc9623b686e
msgid "APPEND_SLASH"
msgstr ""

#: ../../ref/settings.txt:127
#: ../../ref/settings.txt:608
#: ../../ref/settings.txt:632
#: ../../ref/settings.txt:1731
#: ../../ref/settings.txt:2174
# 41690af025c045b197e0e0b3c6ff1f49
# 5ea65b19752d46aa83ef242c38e2bfc0
# 63e83f1d3c264536a3aa3a86b7946452
# 8883a1f732964270a8ec71d301cc5f5d
# a7c85d52fbe547a9b0a6a59feab3d82a
msgid "Default: ``True``"
msgstr ""

#: ../../ref/settings.txt:129
# d898db6429f8448b9202c8b9ea3c52b1
msgid "When set to ``True``, if the request URL does not match any of the patterns in the URLconf and it doesn't end in a slash, an HTTP redirect is issued to the same URL with a slash appended. Note that the redirect may cause any data submitted in a POST request to be lost."
msgstr ""

#: ../../ref/settings.txt:134
# 534d87f17c484a8f83a8236dd9eef6e3
msgid "The :setting:`APPEND_SLASH` setting is only used if :class:`~django.middleware.common.CommonMiddleware` is installed (see :doc:`/topics/http/middleware`). See also :setting:`PREPEND_WWW`."
msgstr ""

#: ../../ref/settings.txt:141
# a25d89231aca469ea81c7fce32a4709e
msgid "AUTHENTICATION_BACKENDS"
msgstr ""

#: ../../ref/settings.txt:143
# 150e398a45a544b895cf6a1b71eddba8
msgid "Default: ``('django.contrib.auth.backends.ModelBackend',)``"
msgstr ""

#: ../../ref/settings.txt:145
# a4f2d52b74db488bafd67c44090c3ef8
msgid "A tuple of authentication backend classes (as strings) to use when attempting to authenticate a user. See the :ref:`authentication backends documentation <authentication-backends>` for details."
msgstr ""

#: ../../ref/settings.txt:152
# ce8ed19bdf8248619afd9ceb8cb2b390
msgid "AUTH_USER_MODEL"
msgstr ""

#: ../../ref/settings.txt:154
# e044715174c84e0fadf49e4d3d108b7c
msgid "Default: 'auth.User'"
msgstr ""

#: ../../ref/settings.txt:156
# a4723db90a01467ea137fa7e0ae429a5
msgid "The model to use to represent a User. See :ref:`auth-custom-user`."
msgstr ""

#: ../../ref/settings.txt:161
# cd99117b724646709d7be43bca5ca3d6
msgid "CACHES"
msgstr ""

#: ../../ref/settings.txt:171
# bafac80df19c49a395f65c7dc38d8093
msgid "A dictionary containing the settings for all caches to be used with Django. It is a nested dictionary whose contents maps cache aliases to a dictionary containing the options for an individual cache."
msgstr ""

#: ../../ref/settings.txt:175
# e76688632f374ebbb100c6318568c976
msgid "The :setting:`CACHES` setting must configure a ``default`` cache; any number of additional caches may also be specified. If you are using a cache backend other than the local memory cache, or you need to define multiple caches, other options will be required. The following cache options are available."
msgstr ""

#: ../../ref/settings.txt:184
# 8d765cc19aa34d448b16c06c04500f76
msgid "BACKEND"
msgstr ""

#: ../../ref/settings.txt:186
#: ../../ref/settings.txt:225
#: ../../ref/settings.txt:237
#: ../../ref/settings.txt:314
#: ../../ref/settings.txt:437
#: ../../ref/settings.txt:457
#: ../../ref/settings.txt:482
#: ../../ref/settings.txt:507
#: ../../ref/settings.txt:516
#: ../../ref/settings.txt:526
#: ../../ref/settings.txt:912
#: ../../ref/settings.txt:922
#: ../../ref/settings.txt:974
#: ../../ref/settings.txt:988
#: ../../ref/settings.txt:1398
#: ../../ref/settings.txt:1412
#: ../../ref/settings.txt:1587
#: ../../ref/settings.txt:1905
#: ../../ref/settings.txt:2025
# fd1f7ed1a8ae48068ff577aba0930763
# 697042a22e99452283b455527c26b201
# 59c0015f8e754e6aa3c8bf7479a74ec5
# 8d493c583cb3465389cab3ae554444ce
# 85a857efefa5424695272498028ed247
# fb90ad1449514112a0371984ce22f4b3
# 385d159c0e274d168f0a3a54b6cc3937
# 1c2a733645cc426f836255c0c1e0a277
# 65470248964d46e2b3584649f18dac3b
# 4022b3b83c4c4c0a9e9a5a8627760da9
# b08a7ea5eef641928ea22e9468dd6f3b
# be852613a96945b79723bd5ee8c54553
# 1f4105b72de74c39895da33794a3c715
# 6ee2a5f79f424d7ca92a0cb7c90cdce4
# 2eda972dd88546ed80d5ca20b1a60e75
# 5a4a675b41264e8ba7f10a1cdac321af
# 1a5f7e009a594cc49386d2cba6856003
# 4fab4b8077e548b08c9600fa14975b3d
# 155b1a75bdab4734a0ea8b29529ea28c
msgid "Default: ``''`` (Empty string)"
msgstr ""

#: ../../ref/settings.txt:188
# 8fa98887546244f9817fb3eee426c96c
msgid "The cache backend to use. The built-in cache backends are:"
msgstr ""

#: ../../ref/settings.txt:190
# f3dda3885b6c49ab9995702fb616d04a
msgid "``'django.core.cache.backends.db.DatabaseCache'``"
msgstr ""

#: ../../ref/settings.txt:191
# 6696512fa60c4f98bd42254dd59c97d9
msgid "``'django.core.cache.backends.dummy.DummyCache'``"
msgstr ""

#: ../../ref/settings.txt:192
# bfbafddc9d364156be32a7db19354b2f
msgid "``'django.core.cache.backends.filebased.FileBasedCache'``"
msgstr ""

#: ../../ref/settings.txt:193
# e58a3869e67442bba2017a6ae3e4cfb7
msgid "``'django.core.cache.backends.locmem.LocMemCache'``"
msgstr ""

#: ../../ref/settings.txt:194
# b3dabcf704e44a06a539f305fe598dd1
msgid "``'django.core.cache.backends.memcached.MemcachedCache'``"
msgstr ""

#: ../../ref/settings.txt:195
# 9026dba9368e4be7998824f49a189bea
msgid "``'django.core.cache.backends.memcached.PyLibMCCache'``"
msgstr ""

#: ../../ref/settings.txt:197
# d1c6355ad898472c9c50f92be5f0016e
msgid "You can use a cache backend that doesn't ship with Django by setting :setting:`BACKEND <CACHES-BACKEND>` to a fully-qualified path of a cache backend class (i.e. ``mypackage.backends.whatever.WhateverCache``). Writing a whole new cache backend from scratch is left as an exercise to the reader; see the other backends for examples."
msgstr ""

#: ../../ref/settings.txt:206
# d18ddd359574433c9e84f5c0693f9bc5
msgid "KEY_FUNCTION"
msgstr ""

#: ../../ref/settings.txt:208
# ec9759cf42f8488da6b18b0c36fb1001
msgid "A string containing a dotted path to a function that defines how to compose a prefix, version and key into a final cache key. The default implementation is equivalent to the function::"
msgstr ""

#: ../../ref/settings.txt:215
# c76a00bf206b426f87793da58de625c8
msgid "You may use any key function you want, as long as it has the same argument signature."
msgstr ""

#: ../../ref/settings.txt:218
# a24607379a71498aa5a23f7cc12f4880
msgid "See the :ref:`cache documentation <cache_key_transformation>` for more information."
msgstr ""

#: ../../ref/settings.txt:223
# 32fcf370054b480da1dc97fd1d886d96
msgid "KEY_PREFIX"
msgstr ""

#: ../../ref/settings.txt:227
# f2256f62f7e54041b280e378549b288b
msgid "A string that will be automatically included (prepended by default) to all cache keys used by the Django server."
msgstr ""

#: ../../ref/settings.txt:230
# f6d354c5bce2448cab6ae7596fe737d6
msgid "See the :ref:`cache documentation <cache_key_prefixing>` for more information."
msgstr ""

#: ../../ref/settings.txt:235
# a8014dba4ed440bbb0a9923554efd060
msgid "LOCATION"
msgstr ""

#: ../../ref/settings.txt:239
# d0caa5a92acb42ce96a78dbcbce12480
msgid "The location of the cache to use. This might be the directory for a file system cache, a host and port for a memcache server, or simply an identifying name for a local memory cache. e.g.::"
msgstr ""

#: ../../ref/settings.txt:253
#: ../../ref/settings.txt:491
# 84e94412986b421f90106c4c67c11953
# c37992ea5b8e453d8191044396ce5455
msgid "OPTIONS"
msgstr ""

#: ../../ref/settings.txt:255
# a30dcbd8b77541678495bbfcb888cb1d
msgid "Default: None"
msgstr ""

#: ../../ref/settings.txt:257
# 28a7878cbfd942789134c09dec718c5a
msgid "Extra parameters to pass to the cache backend. Available parameters vary depending on your cache backend."
msgstr ""

#: ../../ref/settings.txt:260
# dff73fe9130f4bb9a725c786fa4385ae
msgid "Some information on available parameters can be found in the :doc:`Cache Backends </topics/cache>` documentation. For more information, consult your backend module's own documentation."
msgstr ""

#: ../../ref/settings.txt:267
# e051091992dd4e958aaec24da8ea5607
msgid "TIMEOUT"
msgstr ""

#: ../../ref/settings.txt:269
# 491e2b295a2a4f2d88a9daa7b5f1b095
msgid "Default: 300"
msgstr ""

#: ../../ref/settings.txt:271
# 39583554a8d64c229aa95c15dce43454
msgid "The number of seconds before a cache entry is considered stale."
msgstr ""

#: ../../ref/settings.txt:276
# ec28b53e2ec74cc7ac5ad4d6aaa5d795
msgid "VERSION"
msgstr ""

#: ../../ref/settings.txt:278
# 3a9d8fe68ef04773baa3229ec17c01cb
msgid "Default: ``1``"
msgstr ""

#: ../../ref/settings.txt:280
# 5540abf6fd2745e88dac259ab3070ccc
msgid "The default version number for cache keys generated by the Django server."
msgstr ""

#: ../../ref/settings.txt:282
# 0b707956a7bb4d1fa0c082902e15b014
msgid "See the :ref:`cache documentation <cache_versioning>` for more information."
msgstr ""

#: ../../ref/settings.txt:287
# e026f2e9e2e042bc82abaf71dc2a2bbe
msgid "CACHE_MIDDLEWARE_ALIAS"
msgstr ""

#: ../../ref/settings.txt:289
#: ../../ref/settings.txt:1778
# 93543da6110c4be29a58ded302cca277
# 821102b8b6e14b59a42e9dd5c3fac7f6
msgid "Default: ``default``"
msgstr ""

#: ../../ref/settings.txt:291
# 1a8a4cf2f4484894b0ef1a79e3367824
msgid "The cache connection to use for the cache middleware."
msgstr ""

#: ../../ref/settings.txt:296
# c1afd1915bbc4aa6859a9d4601bbf18d
msgid "CACHE_MIDDLEWARE_ANONYMOUS_ONLY"
msgstr ""

#: ../../ref/settings.txt:300
# 43756bf919b24597a4f8b0135b6e8227
msgid "If the value of this setting is ``True``, only anonymous requests (i.e., not those made by a logged-in user) will be cached.  Otherwise, the middleware caches every page that doesn't have GET or POST parameters."
msgstr ""

#: ../../ref/settings.txt:304
# 23e7693900e54902965bc3c66d83baec
msgid "If you set the value of this setting to ``True``, you should make sure you've activated ``AuthenticationMiddleware``."
msgstr ""

#: ../../ref/settings.txt:307
#: ../../ref/settings.txt:318
#: ../../ref/settings.txt:330
# 00a81c0be48c47dd9fa894e1a9eba2fe
# 8237ced431d244d18bec51c00b260fd1
# 9c90f7587cd34de3a22326ba5f9729a0
msgid "See :doc:`/topics/cache`."
msgstr ""

#: ../../ref/settings.txt:312
# d3dbb8bdcaa7419e80840c78ba6c9de5
msgid "CACHE_MIDDLEWARE_KEY_PREFIX"
msgstr ""

#: ../../ref/settings.txt:316
# f532cb18ac9844519a6fc91005d7f204
msgid "The cache key prefix that the cache middleware should use."
msgstr ""

#: ../../ref/settings.txt:323
# 70cd239d89c8452a8f04f1b362e57c4c
msgid "CACHE_MIDDLEWARE_SECONDS"
msgstr ""

#: ../../ref/settings.txt:325
# 515c320bb80a45c2b2b2c2467c0eab6a
msgid "Default: ``600``"
msgstr ""

#: ../../ref/settings.txt:327
# 115a7dc6b36c46fd8a36a527ab88bb7e
msgid "The default number of seconds to cache a page when the caching middleware or ``cache_page()`` decorator is used."
msgstr ""

#: ../../ref/settings.txt:339
# 2891d2b8c80b4dc99a1bb183d9818f73
msgid "The domain to be used when setting the CSRF cookie.  This can be useful for easily allowing cross-subdomain requests to be excluded from the normal cross site request forgery protection.  It should be set to a string such as ``\".example.com\"`` to allow a POST request from a form on one subdomain to be accepted by accepted by a view served from another subdomain."
msgstr ""

#: ../../ref/settings.txt:345
# c50dc856a1ac4fce8b5679271c3ac971
msgid "Please note that the presence of this setting does not imply that Django's CSRF protection is safe from cross-subdomain attacks by default - please see the :ref:`CSRF limitations <csrf-limitations>` section."
msgstr ""

#: ../../ref/settings.txt:356
# d3dbe241881c4c0197185edefe165f34
msgid "The name of the cookie to use for the CSRF authentication token. This can be whatever you want.  See :doc:`/ref/contrib/csrf`."
msgstr ""

#: ../../ref/settings.txt:400
# cc472d8e35264bb6b9b4acc6ba638de2
msgid "where ``reason`` is a short message (intended for developers or logging, not for end users) indicating the reason the request was rejected.  See :doc:`/ref/contrib/csrf`."
msgstr ""

#: ../../ref/settings.txt:408
# 005d1f8d53bb471f8e7c249a986f979e
msgid "DATABASES"
msgstr ""

#: ../../ref/settings.txt:412
# 7d41fda7562a45c9ab3a6ee23d815b3a
msgid "A dictionary containing the settings for all databases to be used with Django. It is a nested dictionary whose contents maps database aliases to a dictionary containing the options for an individual database."
msgstr ""

#: ../../ref/settings.txt:416
# fe2afd5d59c34b3a9ced5252c03488ce
msgid "The :setting:`DATABASES` setting must configure a ``default`` database; any number of additional databases may also be specified."
msgstr ""

#: ../../ref/settings.txt:419
# 1d24112e508c475087a5cd6b2679e6c8
msgid "The simplest possible settings file is for a single-database setup using SQLite. This can be configured using the following::"
msgstr ""

#: ../../ref/settings.txt:429
# 905d6c8537454556a67579388aefc8a8
msgid "For other database backends, or more complex SQLite configurations, other options will be required. The following inner options are available."
msgstr ""

#: ../../ref/settings.txt:435
# 063ac6a726b542cdb9eb0dbcf4426af9
msgid "ENGINE"
msgstr ""

#: ../../ref/settings.txt:439
# 7ec3a5a66866488f93efb5dadffb7d59
msgid "The database backend to use. The built-in database backends are:"
msgstr ""

#: ../../ref/settings.txt:441
# a645dd09a9be456ca883dbb1e37e3983
msgid "``'django.db.backends.postgresql_psycopg2'``"
msgstr ""

#: ../../ref/settings.txt:442
# 1de21b50a4cd48cb889ea6ef2f53a4ff
msgid "``'django.db.backends.mysql'``"
msgstr ""

#: ../../ref/settings.txt:443
# 6e79f034f21f45aca0991b1ae02a7ef5
msgid "``'django.db.backends.sqlite3'``"
msgstr ""

#: ../../ref/settings.txt:444
# 265faebd51864809a2911a99977ffc6f
msgid "``'django.db.backends.oracle'``"
msgstr ""

#: ../../ref/settings.txt:446
# 78606108d22b4df2a2de16d5a17626cf
msgid "You can use a database backend that doesn't ship with Django by setting ``ENGINE`` to a fully-qualified path (i.e. ``mypackage.backends.whatever``). Writing a whole new database backend from scratch is left as an exercise to the reader; see the other backends for examples."
msgstr ""

#: ../../ref/settings.txt:455
# 6ea73b982afe487481a2906ee3228c49
msgid "HOST"
msgstr ""

#: ../../ref/settings.txt:459
# 9a9bc5c1585642049fef8ed4a8cf2df4
msgid "Which host to use when connecting to the database. An empty string means localhost. Not used with SQLite."
msgstr ""

#: ../../ref/settings.txt:462
# 83db3e26c3fd4952a8b6675a9c9beb46
msgid "If this value starts with a forward slash (``'/'``) and you're using MySQL, MySQL will connect via a Unix socket to the specified socket. For example::"
msgstr ""

#: ../../ref/settings.txt:467
# 57e75a7f63df487d95f4dfd4f584a514
msgid "If you're using MySQL and this value *doesn't* start with a forward slash, then this value is assumed to be the host."
msgstr ""

#: ../../ref/settings.txt:470
# 2361a49d846d43758425d6310e2127ca
msgid "If you're using PostgreSQL, by default (empty :setting:`HOST`), the connection to the database is done through UNIX domain sockets ('local' lines in ``pg_hba.conf``). If you want to connect through TCP sockets, set :setting:`HOST` to 'localhost' or '127.0.0.1' ('host' lines in ``pg_hba.conf``). On Windows, you should always define :setting:`HOST`, as UNIX domain sockets are not available."
msgstr ""

#: ../../ref/settings.txt:480
# 8dd113e979ef4d7d8b2120621d838952
msgid "NAME"
msgstr ""

#: ../../ref/settings.txt:484
# 472f0a8368a44eab8769b0d421fed98f
msgid "The name of the database to use. For SQLite, it's the full path to the database file. When specifying the path, always use forward slashes, even on Windows (e.g. ``C:/homes/user/mysite/sqlite3.db``)."
msgstr ""

#: ../../ref/settings.txt:495
# 2b556726b37a46e58c3830169923aceb
msgid "Extra parameters to use when connecting to the database. Available parameters vary depending on your database backend."
msgstr ""

#: ../../ref/settings.txt:498
# 61e5cebb64974cc291796b66f2c08da1
msgid "Some information on available parameters can be found in the :doc:`Database Backends </ref/databases>` documentation. For more information, consult your backend module's own documentation."
msgstr ""

#: ../../ref/settings.txt:505
# 00a3e2fa4fb4493dbf6de4e4f0559a23
msgid "PASSWORD"
msgstr ""

#: ../../ref/settings.txt:509
# d7e0885278d64c8883310c47d122bf08
msgid "The password to use when connecting to the database. Not used with SQLite."
msgstr ""

#: ../../ref/settings.txt:514
# 749992e1e2a24ae8b1a75a093c693f11
msgid "PORT"
msgstr ""

#: ../../ref/settings.txt:518
# 8a327eb6c91b4edd9e49a3bb3e330be2
msgid "The port to use when connecting to the database. An empty string means the default port. Not used with SQLite."
msgstr ""

#: ../../ref/settings.txt:524
# c8eb33436671419e9c5752d7e7f92bb7
msgid "USER"
msgstr ""

#: ../../ref/settings.txt:528
# e278757fe12745db8b0e534a86ba7ced
msgid "The username to use when connecting to the database. Not used with SQLite."
msgstr ""

#: ../../ref/settings.txt:533
# 653a10e7275f413a9cb07bf46e69c8bd
msgid "TEST_CHARSET"
msgstr ""

#: ../../ref/settings.txt:537
# 192da87643064585ae2b2fcff8bfc51e
msgid "The character set encoding used to create the test database. The value of this string is passed directly through to the database, so its format is backend-specific."
msgstr ""

#: ../../ref/settings.txt:541
# b46f08f15c194a788692eb7a5be19bc9
msgid "Supported for the PostgreSQL_ (``postgresql_psycopg2``) and MySQL_ (``mysql``) backends."
msgstr ""

#: ../../ref/settings.txt:550
# 643aebf4312849cca571c6c135ff6e66
msgid "TEST_COLLATION"
msgstr ""

#: ../../ref/settings.txt:554
# 76bbc3826234457fbbdc5212bf485ed8
msgid "The collation order to use when creating the test database. This value is passed directly to the backend, so its format is backend-specific."
msgstr ""

#: ../../ref/settings.txt:557
# dc613a65c5674c9082dbbaccf5593b05
msgid "Only supported for the ``mysql`` backend (see the `MySQL manual`_ for details)."
msgstr ""

#: ../../ref/settings.txt:564
# 147eae8abbef4ebfa5c94c3bb37a796e
msgid "TEST_DEPENDENCIES"
msgstr ""

#: ../../ref/settings.txt:566
# 4ece60bc287849d69bcb7e88328578d0
msgid "Default: ``['default']``, for all databases other than ``default``, which has no dependencies."
msgstr ""

#: ../../ref/settings.txt:569
# 29571608b605445ea409084fce5f590f
msgid "The creation-order dependencies of the database. See the documentation on :ref:`controlling the creation order of test databases <topics-testing-creation-dependencies>` for details."
msgstr ""

#: ../../ref/settings.txt:576
# d459fe8382a14d82862eed0d9ab85b21
msgid "TEST_MIRROR"
msgstr ""

#: ../../ref/settings.txt:580
# 9e0d4653044f4238b36bcf8f8ac6e6bf
msgid "The alias of the database that this database should mirror during testing."
msgstr ""

#: ../../ref/settings.txt:583
# 92a5aa5d0aa44b298f754317a96532f1
msgid "This setting exists to allow for testing of master/slave configurations of multiple databases. See the documentation on :ref:`testing master/slave configurations <topics-testing-masterslave>` for details."
msgstr ""

#: ../../ref/settings.txt:591
# 8722760fd9364e99bfde2f1a16a57aad
msgid "TEST_NAME"
msgstr ""

#: ../../ref/settings.txt:595
# ff34e0857ee545e0aa039b835da4034b
msgid "The name of database to use when running the test suite."
msgstr ""

#: ../../ref/settings.txt:597
# 96501b9e4b394b2787c02cba37bdf454
msgid "If the default value (``None``) is used with the SQLite database engine, the tests will use a memory resident database. For all other database engines the test database will use the name ``'test_' + DATABASE_NAME``."
msgstr ""

#: ../../ref/settings.txt:601
# 79a46c47e7b2469d8b12329d46084f72
msgid "See :ref:`the-test-database`."
msgstr ""

#: ../../ref/settings.txt:606
# bf3f3b830cb74a86b14e727e8d31fff2
msgid "TEST_CREATE"
msgstr ""

#: ../../ref/settings.txt:610
#: ../../ref/settings.txt:622
#: ../../ref/settings.txt:634
#: ../../ref/settings.txt:646
#: ../../ref/settings.txt:658
#: ../../ref/settings.txt:670
# e8adcd80f80d4dbaa635bfbc2d971ff8
# 6eadeadfe6054284aac548904371378e
# 60b4bf53d58f46dfa831b78a4bd518da
# 326806fb60b243fa943cb45b67f32685
# 6bd50cc60d1648be820c2849719eeb07
# 9febe5b0f76f4eee9272c9e98c102921
msgid "This is an Oracle-specific setting."
msgstr ""

#: ../../ref/settings.txt:612
# 25470f0b3a42445d9490c17cc1f3ddb9
msgid "If it is set to ``False``, the test tablespaces won't be automatically created at the beginning of the tests and dropped at the end."
msgstr ""

#: ../../ref/settings.txt:618
# 4916ce9089e043bea5c9ca6f863631ea
msgid "TEST_USER"
msgstr ""

#: ../../ref/settings.txt:624
# 1410f0c77ee9489ba61c8f8b8e90196e
msgid "The username to use when connecting to the Oracle database that will be used when running tests. If not provided, Django will use ``'test_' + USER``."
msgstr ""

#: ../../ref/settings.txt:630
# 6d2af9cf803a47a18a469abc517b89c7
msgid "TEST_USER_CREATE"
msgstr ""

#: ../../ref/settings.txt:636
# bdced91ba22240fc902765702506429a
msgid "If it is set to ``False``, the test user won't be automatically created at the beginning of the tests and dropped at the end."
msgstr ""

#: ../../ref/settings.txt:642
# e63472f4292c45779bed261515f181fd
msgid "TEST_PASSWD"
msgstr ""

#: ../../ref/settings.txt:648
# 0131496cd0f640be8072e61611bf93a4
msgid "The password to use when connecting to the Oracle database that will be used when running tests. If not provided, Django will use a hardcoded default value."
msgstr ""

#: ../../ref/settings.txt:654
# 67b5923ff7bd453099ccd067e1ce362b
msgid "TEST_TBLSPACE"
msgstr ""

#: ../../ref/settings.txt:660
# cf38ec5a63bc46d48038d287402e47ba
msgid "The name of the tablespace that will be used when running tests. If not provided, Django will use ``'test_' + NAME``."
msgstr ""

#: ../../ref/settings.txt:666
# 60d0c6b1a29b4cf88804c5b3a92033f9
msgid "TEST_TBLSPACE_TMP"
msgstr ""

#: ../../ref/settings.txt:672
# 8f7c318e7a7e4220b2ee6d7a84e623b8
msgid "The name of the temporary tablespace that will be used when running tests. If not provided, Django will use ``'test_' + NAME + '_temp'``."
msgstr ""

#: ../../ref/settings.txt:678
# 4c9d8e1e5a014a4ab2cfab74d7ee861b
msgid "DATABASE_ROUTERS"
msgstr ""

#: ../../ref/settings.txt:682
# fb916ef928c043c5a813efce60055a01
msgid "The list of routers that will be used to determine which database to use when performing a database queries."
msgstr ""

#: ../../ref/settings.txt:685
# 71ba02a3c1274b139b8f623c3c23689e
msgid "See the documentation on :ref:`automatic database routing in multi database configurations <topics-db-multi-db-routing>`."
msgstr ""

#: ../../ref/settings.txt:691
# 8bf9916dbd36411399931ef5c702b910
msgid "DATE_FORMAT"
msgstr ""

#: ../../ref/settings.txt:693
# 950df35bc63c45d992c352cf95a7b413
msgid "Default: ``'N j, Y'`` (e.g. ``Feb. 4, 2003``)"
msgstr ""

#: ../../ref/settings.txt:695
# 5e91ec1d352c4de69f5a1b592034dc35
msgid "The default formatting to use for displaying date fields in any part of the system. Note that if :setting:`USE_L10N` is set to ``True``, then the locale-dictated format has higher precedence and will be applied instead. See :tfilter:`allowed date format strings <date>`."
msgstr ""

#: ../../ref/settings.txt:700
# b66b199e51414d8a894a56ebbe52b0e8
msgid "See also :setting:`DATETIME_FORMAT`, :setting:`TIME_FORMAT` and :setting:`SHORT_DATE_FORMAT`."
msgstr ""

#: ../../ref/settings.txt:705
# 147c22e06c794a11a4fac1123a482e6f
msgid "DATE_INPUT_FORMATS"
msgstr ""

#: ../../ref/settings.txt:717
# 2cfc722c715846009000c54130c05b2a
msgid "A tuple of formats that will be accepted when inputting data on a date field. Formats will be tried in order, using the first valid one. Note that these format strings use Python's datetime_ module syntax, not the format strings from the ``date`` Django template tag."
msgstr ""

#: ../../ref/settings.txt:722
#: ../../ref/settings.txt:770
#: ../../ref/settings.txt:2088
# 1b4ce80494724f21b561af3588533dd7
# a431f5f10a91499bbf6789c489d1e14e
# 5b7299490c39435d906560788f158d48
msgid "When :setting:`USE_L10N` is ``True``, the locale-dictated format has higher precedence and will be applied instead."
msgstr ""

#: ../../ref/settings.txt:725
# 1a329c57283d4640a347ece496494b79
msgid "See also :setting:`DATETIME_INPUT_FORMATS` and :setting:`TIME_INPUT_FORMATS`."
msgstr ""

#: ../../ref/settings.txt:732
# 4847632093e8448ab4923e6c8f5235c0
msgid "DATETIME_FORMAT"
msgstr ""

#: ../../ref/settings.txt:734
# 2315aa8506c34407a4736f1e0e974545
msgid "Default: ``'N j, Y, P'`` (e.g. ``Feb. 4, 2003, 4 p.m.``)"
msgstr ""

#: ../../ref/settings.txt:736
# a420efb96da644c4b3784eaf147e6743
msgid "The default formatting to use for displaying datetime fields in any part of the system. Note that if :setting:`USE_L10N` is set to ``True``, then the locale-dictated format has higher precedence and will be applied instead. See :tfilter:`allowed date format strings <date>`."
msgstr ""

#: ../../ref/settings.txt:741
# 76737b2cc8fb4697818d148f6e001680
msgid "See also :setting:`DATE_FORMAT`, :setting:`TIME_FORMAT` and :setting:`SHORT_DATETIME_FORMAT`."
msgstr ""

#: ../../ref/settings.txt:746
# 1fc065d80f5143abbc70697a78742a36
msgid "DATETIME_INPUT_FORMATS"
msgstr ""

#: ../../ref/settings.txt:765
# 099e70344e19433eb0765cb8fb7a4451
msgid "A tuple of formats that will be accepted when inputting data on a datetime field. Formats will be tried in order, using the first valid one. Note that these format strings use Python's datetime_ module syntax, not the format strings from the ``date`` Django template tag."
msgstr ""

#: ../../ref/settings.txt:773
# 0e5f10766d654aec8d73d2b3e65c6c1d
msgid "See also :setting:`DATE_INPUT_FORMATS` and :setting:`TIME_INPUT_FORMATS`."
msgstr ""

#: ../../ref/settings.txt:780
# 2b60707c9fb14d62b813b37b283e3ec2
msgid "DEBUG"
msgstr ""

#: ../../ref/settings.txt:784
# 9bf5b22307db420b81ea92119a984b81
msgid "A boolean that turns on/off debug mode."
msgstr ""

#: ../../ref/settings.txt:786
# c47321b61f0943e398a2ef626c441358
msgid "Never deploy a site into production with :setting:`DEBUG` turned on."
msgstr ""

#: ../../ref/settings.txt:788
# 4dad9cd2c1da441bacd418bbe3427769
msgid "Did you catch that? NEVER deploy a site into production with :setting:`DEBUG` turned on."
msgstr ""

#: ../../ref/settings.txt:791
# 6adba2ba697a4d3d95a62f892c0a17f1
msgid "One of the main features of debug mode is the display of detailed error pages. If your app raises an exception when :setting:`DEBUG` is ``True``, Django will display a detailed traceback, including a lot of metadata about your environment, such as all the currently defined Django settings (from ``settings.py``)."
msgstr ""

#: ../../ref/settings.txt:797
# 2173352188b641879e33904731b804d0
msgid "As a security measure, Django will *not* include settings that might be sensitive (or offensive), such as :setting:`SECRET_KEY` or :setting:`PROFANITIES_LIST`. Specifically, it will exclude any setting whose name includes any of the following:"
msgstr ""

#: ../../ref/settings.txt:802
# 70443f92766a4da6b2bf48c8411b4041
msgid "``'API'``"
msgstr ""

#: ../../ref/settings.txt:803
# 8d72c83a6585428da80e09cdd41bd575
msgid "``'KEY'``"
msgstr ""

#: ../../ref/settings.txt:804
# 4195834ba0584278b6acd8824155eb78
msgid "``'PASS'``"
msgstr ""

#: ../../ref/settings.txt:805
# 878fef650b514fd5bc441b436f49077e
msgid "``'PROFANITIES_LIST'``"
msgstr ""

#: ../../ref/settings.txt:806
# 909c5406da304eb2ada38ddd9a6a65ba
msgid "``'SECRET'``"
msgstr ""

#: ../../ref/settings.txt:807
# f8c1aa6fa62e48699bc6798095eec423
msgid "``'SIGNATURE'``"
msgstr ""

#: ../../ref/settings.txt:808
# 098ac092189a440e89817debc1d0d0a5
msgid "``'TOKEN'``"
msgstr ""

#: ../../ref/settings.txt:815
# 943389d894cc4d9b8adc9afec41b4e6e
msgid "Note that these are *partial* matches. ``'PASS'`` will also match PASSWORD, just as ``'TOKEN'`` will also match TOKENIZED and so on."
msgstr ""

#: ../../ref/settings.txt:818
# 4d79867581a44e5597758ff4efe0efe9
msgid "Still, note that there are always going to be sections of your debug output that are inappropriate for public consumption. File paths, configuration options and the like all give attackers extra information about your server."
msgstr ""

#: ../../ref/settings.txt:822
# ae2c44bdacec4cd29a7bb447d794ce49
msgid "It is also important to remember that when running with :setting:`DEBUG` turned on, Django will remember every SQL query it executes. This is useful when you're debugging, but it'll rapidly consume memory on a production server."
msgstr ""

#: ../../ref/settings.txt:829
# feeb59e3fb1d440a847a44cd2ace6b6a
msgid "DEBUG_PROPAGATE_EXCEPTIONS"
msgstr ""

#: ../../ref/settings.txt:833
# bbe99d6a499b4637acb5aa6d9ff0301c
msgid "If set to True, Django's normal exception handling of view functions will be suppressed, and exceptions will propagate upwards.  This can be useful for some test setups, and should never be used on a live site."
msgstr ""

#: ../../ref/settings.txt:841
# aee8d3a8d11c4c27b76a6eb8ece15ff5
msgid "DECIMAL_SEPARATOR"
msgstr ""

#: ../../ref/settings.txt:843
# f77fd146d4704442a0f55d23ade35f36
msgid "Default: ``'.'`` (Dot)"
msgstr ""

#: ../../ref/settings.txt:845
# c48742395b0248c3a8a91b9c5a3055f1
msgid "Default decimal separator used when formatting decimal numbers."
msgstr ""

#: ../../ref/settings.txt:847
#: ../../ref/settings.txt:1500
#: ../../ref/settings.txt:2051
# 713fe4a99b2743fab0b0d6c816d1b5d5
# bb069c4b87e94a4692b5c7314aa8d75d
# c06a8ebd67d04bceb4f07e115ac58719
msgid "Note that if :setting:`USE_L10N` is set to ``True``, then the locale-dictated format has higher precedence and will be applied instead."
msgstr ""

#: ../../ref/settings.txt:850
# 6d16ae5606b8440199722ea5beddf8cf
msgid "See also :setting:`NUMBER_GROUPING`, :setting:`THOUSAND_SEPARATOR` and :setting:`USE_THOUSAND_SEPARATOR`."
msgstr ""

#: ../../ref/settings.txt:857
# 905b63c91e02406abd47aed58613ea55
msgid "DEFAULT_CHARSET"
msgstr ""

#: ../../ref/settings.txt:859
#: ../../ref/settings.txt:1029
# b8ab5edd5ef04515b4ed155594c194dd
# 67da8cb65f60449a8c7e1dab7413f2f1
msgid "Default: ``'utf-8'``"
msgstr ""

#: ../../ref/settings.txt:861
# 60b9ea35cce84d1ab081f7138786261f
msgid "Default charset to use for all ``HttpResponse`` objects, if a MIME type isn't manually specified. Used with :setting:`DEFAULT_CONTENT_TYPE` to construct the ``Content-Type`` header."
msgstr ""

#: ../../ref/settings.txt:868
# 49c570c2ba204c77ba2548ad9765c3d8
msgid "DEFAULT_CONTENT_TYPE"
msgstr ""

#: ../../ref/settings.txt:870
# 6e51a70d065549cbbf5e84cf4eed716a
msgid "Default: ``'text/html'``"
msgstr ""

#: ../../ref/settings.txt:872
# 82a88078b8d943c29e46e18b8bdf2847
msgid "Default content type to use for all ``HttpResponse`` objects, if a MIME type isn't manually specified. Used with :setting:`DEFAULT_CHARSET` to construct the ``Content-Type`` header."
msgstr ""

#: ../../ref/settings.txt:879
# 276e47acfd884dd189ba47b12718bda3
msgid "DEFAULT_EXCEPTION_REPORTER_FILTER"
msgstr ""

#: ../../ref/settings.txt:881
# 7b2e3d6ec3474eca99a93e44f1825099
msgid "Default: :class:`django.views.debug.SafeExceptionReporterFilter`"
msgstr ""

#: ../../ref/settings.txt:883
# c1ed4a0e30d94e23bb4a3e6ad573309a
msgid "Default exception reporter filter class to be used if none has been assigned to the :class:`~django.http.HttpRequest` instance yet. See :ref:`Filtering error reports<filtering-error-reports>`."
msgstr ""

#: ../../ref/settings.txt:890
# 7d369eb4c7ae43658660c6f5ecf6d464
msgid "DEFAULT_FILE_STORAGE"
msgstr ""

#: ../../ref/settings.txt:892
# be2d2ca9a01d4388be51da46628b2195
msgid "Default: :class:`django.core.files.storage.FileSystemStorage`"
msgstr ""

#: ../../ref/settings.txt:894
# e7f2d9aaf3fe4c04abc61468ead591c9
msgid "Default file storage class to be used for any file-related operations that don't specify a particular storage system. See :doc:`/topics/files`."
msgstr ""

#: ../../ref/settings.txt:900
# 0459cdb2641c4f2a84e484779ddb2ca5
msgid "DEFAULT_FROM_EMAIL"
msgstr ""

#: ../../ref/settings.txt:902
# e7ea8d2fe85d4217ae6e45fbdf22a809
msgid "Default: ``'webmaster@localhost'``"
msgstr ""

#: ../../ref/settings.txt:904
# f4836316b2f44b72a2d6a8d9df7020cb
msgid "Default email address to use for various automated correspondence from the site manager(s)."
msgstr ""

#: ../../ref/settings.txt:910
# 3ae88a4f269048d484ecdfde54eaaf91
msgid "DEFAULT_INDEX_TABLESPACE"
msgstr ""

#: ../../ref/settings.txt:914
# bc76cf6296e947d4b9afad77caa665a7
msgid "Default tablespace to use for indexes on fields that don't specify one, if the backend supports it (see :doc:`/topics/db/tablespaces`)."
msgstr ""

#: ../../ref/settings.txt:920
# c9db752c685245dea2eb3861bf5772c5
msgid "DEFAULT_TABLESPACE"
msgstr ""

#: ../../ref/settings.txt:924
# 1fb9b526f65c4198ab65c0c17b8f81f6
msgid "Default tablespace to use for models that don't specify one, if the backend supports it (see :doc:`/topics/db/tablespaces`)."
msgstr ""

#: ../../ref/settings.txt:930
# cb2f81767786452db039d9302b6a9d1b
msgid "DISALLOWED_USER_AGENTS"
msgstr ""

#: ../../ref/settings.txt:934
# 8dbde027a2f84f4d860f48c5936633c3
msgid "List of compiled regular expression objects representing User-Agent strings that are not allowed to visit any page, systemwide. Use this for bad robots/crawlers. This is only used if ``CommonMiddleware`` is installed (see :doc:`/topics/http/middleware`)."
msgstr ""

#: ../../ref/settings.txt:942
# 1110c9f182b34b9f87db36126fea15bc
msgid "EMAIL_BACKEND"
msgstr ""

#: ../../ref/settings.txt:944
# 8d32feba0c434ccd8d80a32a5673c6f9
msgid "Default: ``'django.core.mail.backends.smtp.EmailBackend'``"
msgstr ""

#: ../../ref/settings.txt:946
# 2655587ff8294941b097c2c8c00b3640
msgid "The backend to use for sending emails. For the list of available backends see :doc:`/topics/email`."
msgstr ""

#: ../../ref/settings.txt:952
# 1c40e3ff364a4e31a3a91525b6b2cc2a
msgid "EMAIL_FILE_PATH"
msgstr ""

#: ../../ref/settings.txt:954
#: ../../ref/settings.txt:1575
#: ../../ref/settings.txt:1890
#: ../../ref/settings.txt:2312
# 3770401ca5774c58b2780910f1518bde
# f1b1335d130a4e3eb2afe2cd40f1d339
# bc09a292460149a0b8a39e6f32fdc96a
# 03a6727e247e429e9fc41c988065900e
msgid "Default: Not defined"
msgstr ""

#: ../../ref/settings.txt:956
# b82c1f4de8ca45a3a426d922673d7cb4
msgid "The directory used by the ``file`` email backend to store output files."
msgstr ""

#: ../../ref/settings.txt:961
# f41dbbbb833f459ba1a2ad1759788b6a
msgid "EMAIL_HOST"
msgstr ""

#: ../../ref/settings.txt:963
# c960fc460bb14e1e9e50b13c58ebb459
msgid "Default: ``'localhost'``"
msgstr ""

#: ../../ref/settings.txt:965
# 524196fee8be48db91ef87d285e825aa
msgid "The host to use for sending email."
msgstr ""

#: ../../ref/settings.txt:967
# e00d6f69d4e542908050ce152633f27d
msgid "See also :setting:`EMAIL_PORT`."
msgstr ""

#: ../../ref/settings.txt:972
# a12a41849c9d4a9295f6450e7e3da75c
msgid "EMAIL_HOST_PASSWORD"
msgstr ""

#: ../../ref/settings.txt:976
# b086e816a26d4003ba1081e9245ef430
msgid "Password to use for the SMTP server defined in :setting:`EMAIL_HOST`. This setting is used in conjunction with :setting:`EMAIL_HOST_USER` when authenticating to the SMTP server. If either of these settings is empty, Django won't attempt authentication."
msgstr ""

#: ../../ref/settings.txt:981
# c2bf2df49ecf41df88165dd89d40f552
msgid "See also :setting:`EMAIL_HOST_USER`."
msgstr ""

#: ../../ref/settings.txt:986
# 294d2639a4994ba8878f1fede46ca1af
msgid "EMAIL_HOST_USER"
msgstr ""

#: ../../ref/settings.txt:990
# 2312d94311b447b9bc71f5a5d3fcc59f
msgid "Username to use for the SMTP server defined in :setting:`EMAIL_HOST`. If empty, Django won't attempt authentication."
msgstr ""

#: ../../ref/settings.txt:993
# 325de4e59dc041edb68b851a0bbe27d2
msgid "See also :setting:`EMAIL_HOST_PASSWORD`."
msgstr ""

#: ../../ref/settings.txt:998
# f8c8ae6ed7564bb2a0d1d11b5943eacd
msgid "EMAIL_PORT"
msgstr ""

#: ../../ref/settings.txt:1000
# 1451910f42fc4157b8bff30927b28aa9
msgid "Default: ``25``"
msgstr ""

#: ../../ref/settings.txt:1002
# d4464f0168d3425bb964dc6a5f330b0d
msgid "Port to use for the SMTP server defined in :setting:`EMAIL_HOST`."
msgstr ""

#: ../../ref/settings.txt:1007
# 2061283d4bbc446499d86f177d5ffbaa
msgid "EMAIL_SUBJECT_PREFIX"
msgstr ""

#: ../../ref/settings.txt:1009
# 7d552d9cadae48c194775d4ed7d51121
msgid "Default: ``'[Django] '``"
msgstr ""

#: ../../ref/settings.txt:1011
# f62a6d2b34924f8d98e630cfdf1a3f62
msgid "Subject-line prefix for email messages sent with ``django.core.mail.mail_admins`` or ``django.core.mail.mail_managers``. You'll probably want to include the trailing space."
msgstr ""

#: ../../ref/settings.txt:1018
# b8ea9d1b7d584bca99effb6b0fddee20
msgid "EMAIL_USE_TLS"
msgstr ""

#: ../../ref/settings.txt:1022
# a038e734d1b5454cb99273f2c1ead5ef
msgid "Whether to use a TLS (secure) connection when talking to the SMTP server."
msgstr ""

#: ../../ref/settings.txt:1027
# 1ac1ce93b0074b3a9179f979367b0734
msgid "FILE_CHARSET"
msgstr ""

#: ../../ref/settings.txt:1031
# 7fd7c2af600641d7b19f16c6ca67583d
msgid "The character encoding used to decode any files read from disk. This includes template files and initial SQL data files."
msgstr ""

#: ../../ref/settings.txt:1037
# b7480cc05da84d5f92d45952d36e59bc
msgid "FILE_UPLOAD_HANDLERS"
msgstr ""

#: ../../ref/settings.txt:1044
# 1d80fe334c884860a4636a0e01d7edee
msgid "A tuple of handlers to use for uploading. See :doc:`/topics/files` for details."
msgstr ""

#: ../../ref/settings.txt:1049
# 11fef562d6ac4b8a9c2365ce384bfca2
msgid "FILE_UPLOAD_MAX_MEMORY_SIZE"
msgstr ""

#: ../../ref/settings.txt:1051
# b14cfa8544f3425cb8b7d2bb4e89b565
msgid "Default: ``2621440`` (i.e. 2.5 MB)."
msgstr ""

#: ../../ref/settings.txt:1053
# 14975f7d2c5b4859835c50fb0a981019
msgid "The maximum size (in bytes) that an upload will be before it gets streamed to the file system. See :doc:`/topics/files` for details."
msgstr ""

#: ../../ref/settings.txt:1059
# 11ad0b75400f421bae0deb5d4e91daca
msgid "FILE_UPLOAD_PERMISSIONS"
msgstr ""

#: ../../ref/settings.txt:1063
# 3bd5ee989c28438884486e9d9a0abcf8
msgid "The numeric mode (i.e. ``0644``) to set newly uploaded files to. For more information about what these modes mean, see the documentation for :func:`os.chmod`."
msgstr ""

#: ../../ref/settings.txt:1067
# cbd0dc25d2754a56bd99345f3623ceb1
msgid "If this isn't given or is ``None``, you'll get operating-system dependent behavior. On most platforms, temporary files will have a mode of ``0600``, and files saved from memory will be saved using the system's standard umask."
msgstr ""

#: ../../ref/settings.txt:1074
# c1f33a6ebd7d4c429a8b994e41d416cd
msgid "**Always prefix the mode with a 0.**"
msgstr ""

#: ../../ref/settings.txt:1076
# 5b4c74a8f5e444e3b8f6d89a72bb3ce3
msgid "If you're not familiar with file modes, please note that the leading ``0`` is very important: it indicates an octal number, which is the way that modes must be specified. If you try to use ``644``, you'll get totally incorrect behavior."
msgstr ""

#: ../../ref/settings.txt:1085
# 870aacd789384a8d8faa210f77c6815d
msgid "FILE_UPLOAD_TEMP_DIR"
msgstr ""

#: ../../ref/settings.txt:1089
# c3502200c1334b1faaa04244530b0c3d
msgid "The directory to store data temporarily while uploading files. If ``None``, Django will use the standard temporary directory for the operating system. For example, this will default to '/tmp' on \\*nix-style operating systems."
msgstr ""

#: ../../ref/settings.txt:1093
# ea6e2771c12f40bfaa9c425ea35ea67a
msgid "See :doc:`/topics/files` for details."
msgstr ""

#: ../../ref/settings.txt:1098
# e598dc4b07294c539e110a9afeabc98b
msgid "FIRST_DAY_OF_WEEK"
msgstr ""

#: ../../ref/settings.txt:1100
# 9f1947fe1566435d811eb123288ececa
msgid "Default: ``0`` (Sunday)"
msgstr ""

#: ../../ref/settings.txt:1102
# 626c617d54ad45338030646a0b8c0b64
msgid "Number representing the first day of the week. This is especially useful when displaying a calendar. This value is only used when not using format internationalization, or when a format cannot be found for the current locale."
msgstr ""

#: ../../ref/settings.txt:1107
# ff63c6659a0d469b8a04c80002ffc38c
msgid "The value must be an integer from 0 to 6, where 0 means Sunday, 1 means Monday and so on."
msgstr ""

#: ../../ref/settings.txt:1113
# 9a47b58f658046db843b76aac8338972
msgid "FIXTURE_DIRS"
msgstr ""

#: ../../ref/settings.txt:1117
# 48a0fc48b0fb447eb844abdba15b663a
msgid "List of directories searched for fixture files, in addition to the ``fixtures`` directory of each application, in search order."
msgstr ""

#: ../../ref/settings.txt:1120
#: ../../ref/settings.txt:2000
#: ../../ref/templates/api.txt:554
# 69eacd3faa074a7183105d1842e43996
# ebd6fe80bdb14d8389bd71c83080a0c4
# 6e5b3c2c3db948e7b881a8da75d12a36
msgid "Note that these paths should use Unix-style forward slashes, even on Windows."
msgstr ""

#: ../../ref/settings.txt:1122
# 7b294a968d9745aaa9f90f5742f48b0e
msgid "See :ref:`initial-data-via-fixtures` and :ref:`topics-testing-fixtures`."
msgstr ""

#: ../../ref/settings.txt:1127
# 4f685fbfd7414d778550f77cf5f744ad
msgid "FORCE_SCRIPT_NAME"
msgstr ""

#: ../../ref/settings.txt:1131
# 54cd32d091264168bed697a9238eaa4f
msgid "If not ``None``, this will be used as the value of the ``SCRIPT_NAME`` environment variable in any HTTP request. This setting can be used to override the server-provided value of ``SCRIPT_NAME``, which may be a rewritten version of the preferred value or not supplied at all."
msgstr ""

#: ../../ref/settings.txt:1139
# 51ff15c059f342dcbc381d865d45f365
msgid "FORMAT_MODULE_PATH"
msgstr ""

#: ../../ref/settings.txt:1143
# a57021c840fa40509b24b9d95dd28cd0
msgid "A full Python path to a Python package that contains format definitions for project locales. If not ``None``, Django will check for a ``formats.py`` file, under the directory named as the current locale, and will use the formats defined on this file."
msgstr ""

#: ../../ref/settings.txt:1148
# 9c337226f5264521a7d5e2e8e702fc9d
msgid "For example, if :setting:`FORMAT_MODULE_PATH` is set to ``mysite.formats``, and current language is ``en`` (English), Django will expect a directory tree like::"
msgstr ""

#: ../../ref/settings.txt:1159
# 6caa8ef41f514df5bdfbaae4468df776
msgid "Available formats are :setting:`DATE_FORMAT`, :setting:`TIME_FORMAT`, :setting:`DATETIME_FORMAT`, :setting:`YEAR_MONTH_FORMAT`, :setting:`MONTH_DAY_FORMAT`, :setting:`SHORT_DATE_FORMAT`, :setting:`SHORT_DATETIME_FORMAT`, :setting:`FIRST_DAY_OF_WEEK`, :setting:`DECIMAL_SEPARATOR`, :setting:`THOUSAND_SEPARATOR` and :setting:`NUMBER_GROUPING`."
msgstr ""

#: ../../ref/settings.txt:1169
# d242eff2463e45ad8083f39ec37d7709
msgid "IGNORABLE_404_URLS"
msgstr ""

#: ../../ref/settings.txt:1173
# 206d3b41bbcb4b008c4cc79424f1bdff
msgid "Default: ``()``"
msgstr ""

#: ../../ref/settings.txt:1175
# e1ca3ec4666a44f3999f7987e886558c
msgid "List of compiled regular expression objects describing URLs that should be ignored when reporting HTTP 404 errors via email (see :doc:`/howto/error-reporting`). Regular expressions are matched against :meth:`request's full paths <django.http.HttpRequest.get_full_path>` (including query string, if any). Use this if your site does not provide a commonly requested file such as ``favicon.ico`` or ``robots.txt``, or if it gets hammered by script kiddies."
msgstr ""

#: ../../ref/settings.txt:1183
# 2e8db3b9663c420093c7da589d5f254b
msgid "This is only used if :setting:`SEND_BROKEN_LINK_EMAILS` is set to ``True`` and ``CommonMiddleware`` is installed (see :doc:`/topics/http/middleware`)."
msgstr ""

#: ../../ref/settings.txt:1189
# b5ff3335feba4b6b9e4dc6e79374f0bc
msgid "INSTALLED_APPS"
msgstr ""

#: ../../ref/settings.txt:1193
# 2b73e9937782488693903844846b5ae9
msgid "A tuple of strings designating all applications that are enabled in this Django installation. Each string should be a full Python path to a Python package that contains a Django application, as created by :djadmin:`django-admin.py startapp <startapp>`."
msgstr ""

#: ../../ref/settings.txt:1200
# f6483ffd313b4f8488b4d518e98543e1
msgid "The application names (that is, the final dotted part of the path to the module containing ``models.py``) defined in :setting:`INSTALLED_APPS` *must* be unique. For example, you can't include both ``django.contrib.auth`` and ``myproject.auth`` in INSTALLED_APPS."
msgstr ""

#: ../../ref/settings.txt:1209
# 12f1618f6ad14e5c9e9410762492e867
msgid "INTERNAL_IPS"
msgstr ""

#: ../../ref/settings.txt:1213
# 654defad57e04791a6d2a967d389c898
msgid "A tuple of IP addresses, as strings, that:"
msgstr ""

#: ../../ref/settings.txt:1215
# 8dc75259529b4dc79a8eaeb674b04d37
msgid "See debug comments, when :setting:`DEBUG` is ``True``"
msgstr ""

#: ../../ref/settings.txt:1216
# 1d42cc0cf5244368bdc601c0690e31d4
msgid "Receive X headers if the ``XViewMiddleware`` is installed (see :doc:`/topics/http/middleware`)"
msgstr ""

#: ../../ref/settings.txt:1222
# ec080b57911d4b1589f8526637d04f3d
msgid "LANGUAGE_CODE"
msgstr ""

#: ../../ref/settings.txt:1224
# 935f84dbd736455da50e02874a929e72
msgid "Default: ``'en-us'``"
msgstr ""

#: ../../ref/settings.txt:1226
# f5cdbf975fb3429f830413fbdfd2ca68
msgid "A string representing the language code for this installation. This should be in standard :term:`language format<language code>`. For example, U.S. English is ``\"en-us\"``. See :doc:`/topics/i18n/index`."
msgstr ""

#: ../../ref/settings.txt:1233
# 98a9b7becece4753865af14bea31b287
msgid "LANGUAGE_COOKIE_NAME"
msgstr ""

#: ../../ref/settings.txt:1235
# d96373ea0301442b9ac0d1f066aa7277
msgid "Default: ``'django_language'``"
msgstr ""

#: ../../ref/settings.txt:1237
# c2eaea026d364f0abdc506a72067b539
msgid "The name of the cookie to use for the language cookie. This can be whatever you want (but should be different from :setting:`SESSION_COOKIE_NAME`). See :doc:`/topics/i18n/index`."
msgstr ""

#: ../../ref/settings.txt:1244
# 6b16f49e60fc46ffbbc1bc9cdcfbcad8
msgid "LANGUAGES"
msgstr ""

#: ../../ref/settings.txt:1246
# 8407e6f272e745cf974afbc3cc72cb2f
msgid "Default: A tuple of all available languages. This list is continually growing and including a copy here would inevitably become rapidly out of date. You can see the current list of translated languages by looking in ``django/conf/global_settings.py`` (or view the `online source`_)."
msgstr ""

#: ../../ref/settings.txt:1253
# 0e2d4956aa9b4ff5a8d5be710a4911d8
msgid "The list is a tuple of two-tuples in the format (:term:`language code<language code>`, ``language name``) -- for example, ``('ja', 'Japanese')``. This specifies which languages are available for language selection. See :doc:`/topics/i18n/index`."
msgstr ""

#: ../../ref/settings.txt:1259
# b20a8836eeb046469ce612799fcb869f
msgid "Generally, the default value should suffice. Only set this setting if you want to restrict language selection to a subset of the Django-provided languages."
msgstr ""

#: ../../ref/settings.txt:1262
# ecb9dc871bd24e4b873d9ad39dccbeb1
msgid "If you define a custom :setting:`LANGUAGES` setting, it's OK to mark the languages as translation strings (as in the default value referred to above) -- but use a \"dummy\" ``gettext()`` function, not the one in ``django.utils.translation``. You should *never* import ``django.utils.translation`` from within your settings file, because that module in itself depends on the settings, and that would cause a circular import."
msgstr ""

#: ../../ref/settings.txt:1270
# 126b9687a90a4672bdda2d73772247d8
msgid "The solution is to use a \"dummy\" ``gettext()`` function. Here's a sample settings file::"
msgstr ""

#: ../../ref/settings.txt:1280
# c3264da5fd574bd2be711a6259a9ad29
msgid "With this arrangement, ``django-admin.py makemessages`` will still find and mark these strings for translation, but the translation won't happen at runtime -- so you'll have to remember to wrap the languages in the *real* ``gettext()`` in any code that uses :setting:`LANGUAGES` at runtime."
msgstr ""

#: ../../ref/settings.txt:1288
# 486dab4d45ec470ab5a28c91c2bd1e25
msgid "LOCALE_PATHS"
msgstr ""

#: ../../ref/settings.txt:1292
# 154ff894dcf847539a416d761b16c859
msgid "A tuple of directories where Django looks for translation files. See :ref:`how-django-discovers-translations`."
msgstr ""

#: ../../ref/settings.txt:1302
# ae7fc08c9b144c44adaf8a97aed17c90
msgid "Django will look within each of these paths for the ``<locale_code>/LC_MESSAGES`` directories containing the actual translation files."
msgstr ""

#: ../../ref/settings.txt:1308
# 178f82d684174ca389bf405efcd4f8c0
msgid "LOGGING"
msgstr ""

#: ../../ref/settings.txt:1310
# 6b94e6b74a2f45bcb20d4d9a409be6a8
msgid "Default: A logging configuration dictionary."
msgstr ""

#: ../../ref/settings.txt:1312
# e49e518d6273461a9579cb12e0b089ff
msgid "A data structure containing configuration information. The contents of this data structure will be passed as the argument to the configuration method described in :setting:`LOGGING_CONFIG`."
msgstr ""

#: ../../ref/settings.txt:1316
# 0cd197569303463ab3e1a56a15b6ac87
msgid "The default logging configuration passes HTTP 500 server errors to an email log handler; all other log messages are given to a NullHandler."
msgstr ""

#: ../../ref/settings.txt:1322
# ec94a3ce4c254dc7ad322891c37f4276
msgid "LOGGING_CONFIG"
msgstr ""

#: ../../ref/settings.txt:1324
# 893990c2b231405cb9ce4ef4b4aa9af1
msgid "Default: ``'django.utils.log.dictConfig'``"
msgstr ""

#: ../../ref/settings.txt:1326
# 638357ccb0944b9899d23c12ac208b8d
msgid "A path to a callable that will be used to configure logging in the Django project. Points at a instance of Python's `dictConfig`_ configuration method by default."
msgstr ""

#: ../../ref/settings.txt:1330
# 2b3665fb7b9045c6a0d09d0370c13c87
msgid "If you set :setting:`LOGGING_CONFIG` to ``None``, the logging configuration process will be skipped."
msgstr ""

#: ../../ref/settings.txt:1338
# 0a378115913c4824883342a1fd962dec
msgid "LOGIN_REDIRECT_URL"
msgstr ""

#: ../../ref/settings.txt:1340
# bdbf20c43925446191a79cea0c05d7d1
msgid "Default: ``'/accounts/profile/'``"
msgstr ""

#: ../../ref/settings.txt:1342
# 8f4eb13a379e4905ae5243209ecc90b8
msgid "The URL where requests are redirected after login when the ``contrib.auth.login`` view gets no ``next`` parameter."
msgstr ""

#: ../../ref/settings.txt:1345
# 02049ef3ebb44b918984e81ee760a3a5
msgid "This is used by the :func:`~django.contrib.auth.decorators.login_required` decorator, for example."
msgstr ""

#: ../../ref/settings.txt:1350
#: ../../ref/settings.txt:1368
# 46d6ce6327b646cabf764943c4706555
# 23121ee6bd10476c94f38d02438108cc
msgid "This setting now also accepts view function names and :ref:`named URL patterns <naming-url-patterns>` which can be used to reduce configuration duplication since you no longer have to define the URL in two places (``settings`` and URLconf). For backward compatibility reasons the default remains unchanged."
msgstr ""

#: ../../ref/settings.txt:1359
# 221dbfd74c674fad86ccb23cda52e927
msgid "LOGIN_URL"
msgstr ""

#: ../../ref/settings.txt:1361
# ba60f593d7bf482e8383a580ee7642e2
msgid "Default: ``'/accounts/login/'``"
msgstr ""

#: ../../ref/settings.txt:1363
# b673ad8bcb8c47daa68876d3dcb7bed9
msgid "The URL where requests are redirected for login, especially when using the :func:`~django.contrib.auth.decorators.login_required` decorator."
msgstr ""

#: ../../ref/settings.txt:1377
# 8f33e0cfb4ca4caebe928e1b56ed8b5c
msgid "LOGOUT_URL"
msgstr ""

#: ../../ref/settings.txt:1379
# 1b6339c40c7743dc81d83c708ea66120
msgid "Default: ``'/accounts/logout/'``"
msgstr ""

#: ../../ref/settings.txt:1381
# 1fe5aa4f64744b67a857ac05b024d35a
msgid "LOGIN_URL counterpart."
msgstr ""

#: ../../ref/settings.txt:1386
# 59f3982d967146d4ad82288b71f14568
msgid "MANAGERS"
msgstr ""

#: ../../ref/settings.txt:1390
# d0316733c0df4a2dbe1d5177348a5e83
msgid "A tuple in the same format as :setting:`ADMINS` that specifies who should get broken-link notifications when :setting:`SEND_BROKEN_LINK_EMAILS` is ``True``."
msgstr ""

#: ../../ref/settings.txt:1396
# 7af4fced5bc649d7be38789e48d94d70
msgid "MEDIA_ROOT"
msgstr ""

#: ../../ref/settings.txt:1400
# 684e864b97114e9a931583cb3ba0b988
msgid "Absolute filesystem path to the directory that will hold :doc:`user-uploaded files </topics/files>`."
msgstr ""

#: ../../ref/settings.txt:1403
# 75d521b4ce7a4bc2ae7eb70711837e07
msgid "Example: ``\"/var/www/example.com/media/\"``"
msgstr ""

#: ../../ref/settings.txt:1405
# 5b32c710d0754bdfa490a1dbe2c73b0a
msgid "See also :setting:`MEDIA_URL`."
msgstr ""

#: ../../ref/settings.txt:1410
# 900c3eaa33bb41f18f16770e561a9eb9
msgid "MEDIA_URL"
msgstr ""

#: ../../ref/settings.txt:1414
# ffba3bcbe683445f80278586204a1415
msgid "URL that handles the media served from :setting:`MEDIA_ROOT`, used for :doc:`managing stored files </topics/files>`. It must end in a slash if set to a non-empty value."
msgstr ""

#: ../../ref/settings.txt:1418
# cc59a18f41474f03b200352fc68319ad
msgid "Example: ``\"http://media.example.com/\"``"
msgstr ""

#: ../../ref/settings.txt:1425
# cc3c7a9c6c1d46418fa16a0066efe9eb
msgid "Sets the minimum message level that will be recorded by the messages framework. See the :doc:`messages documentation </ref/contrib/messages>` for more details."
msgstr ""

#: ../../ref/settings.txt:1434
# 126ce95e18b449fc858101b12f27d110
msgid "Controls where Django stores message data.  See the :doc:`messages documentation </ref/contrib/messages>` for more details."
msgstr ""

#: ../../ref/settings.txt:1448
# 1ac12e18aa944c1da3b9f4f387793206
msgid "Sets the mapping of message levels to message tags. See the :doc:`messages documentation </ref/contrib/messages>` for more details."
msgstr ""

#: ../../ref/settings.txt:1454
# e38697cb97154c71a43ec553eafde2a4
msgid "MIDDLEWARE_CLASSES"
msgstr ""

#: ../../ref/settings.txt:1464
# 68dd6951009a4ab1bfc0675ea2c689bb
msgid "A tuple of middleware classes to use. See :doc:`/topics/http/middleware`."
msgstr ""

#: ../../ref/settings.txt:1469
# 7150ff29449f4848ad42f0041f559232
msgid "MONTH_DAY_FORMAT"
msgstr ""

#: ../../ref/settings.txt:1471
# 1b75162771074c27b065512ca4ede1a6
msgid "Default: ``'F j'``"
msgstr ""

#: ../../ref/settings.txt:1473
# 71929e1dea434c6b85db0d061ab807fe
msgid "The default formatting to use for date fields on Django admin change-list pages -- and, possibly, by other parts of the system -- in cases when only the month and day are displayed."
msgstr ""

#: ../../ref/settings.txt:1477
# bb59725f6e9049b7ac0d66c885283d1c
msgid "For example, when a Django admin change-list page is being filtered by a date drilldown, the header for a given day displays the day and month. Different locales have different formats. For example, U.S. English would say \"January 1,\" whereas Spanish might say \"1 Enero.\""
msgstr ""

#: ../../ref/settings.txt:1482
# 2adf1078695f48ac9d6ea5bc00b7d577
msgid "See :tfilter:`allowed date format strings <date>`. See also :setting:`DATE_FORMAT`, :setting:`DATETIME_FORMAT`, :setting:`TIME_FORMAT` and :setting:`YEAR_MONTH_FORMAT`."
msgstr ""

#: ../../ref/settings.txt:1489
# ea907c497c00466cacba4a6fea6fdbde
msgid "NUMBER_GROUPING"
msgstr ""

#: ../../ref/settings.txt:1491
# 8ff5730cff6c4daca0ea2247098b118b
msgid "Default: ``0``"
msgstr ""

#: ../../ref/settings.txt:1493
# 8ac38a0dc1b04a4a87a052ea409f0155
msgid "Number of digits grouped together on the integer part of a number."
msgstr ""

#: ../../ref/settings.txt:1495
# 0f2eafe987f84209afb1a8f89925a194
msgid "Common use is to display a thousand separator. If this setting is ``0``, then no grouping will be applied to the number. If this setting is greater than ``0``, then :setting:`THOUSAND_SEPARATOR` will be used as the separator between those groups."
msgstr ""

#: ../../ref/settings.txt:1503
# c31ad1acd894448a89145d8ceaee88f3
msgid "See also :setting:`DECIMAL_SEPARATOR`, :setting:`THOUSAND_SEPARATOR` and :setting:`USE_THOUSAND_SEPARATOR`."
msgstr ""

#: ../../ref/settings.txt:1509
# 8b33fcb355a34275be35444540e04988
msgid "PASSWORD_HASHERS"
msgstr ""

#: ../../ref/settings.txt:1513
# 1a36381679d24a0ab1f8f08f396f34fa
msgid "See :ref:`auth_password_storage`."
msgstr ""

#: ../../ref/settings.txt:1528
# 21996b45b7354429a0ff03599db087c1
msgid "PASSWORD_RESET_TIMEOUT_DAYS"
msgstr ""

#: ../../ref/settings.txt:1530
# 334242b4207646fa9e48ceaf9d3fd635
msgid "Default: ``3``"
msgstr ""

#: ../../ref/settings.txt:1532
# 0d3173dcdd9f40fe9851ea5f72281bfb
msgid "The number of days a password reset link is valid for. Used by the :mod:`django.contrib.auth` password reset mechanism."
msgstr ""

#: ../../ref/settings.txt:1538
# 563ad2913ee74916ac224a7538ed0f02
msgid "PREPEND_WWW"
msgstr ""

#: ../../ref/settings.txt:1542
# 8c6e2b37f9724bc681a25beef58c0535
msgid "Whether to prepend the \"www.\" subdomain to URLs that don't have it. This is only used if :class:`~django.middleware.common.CommonMiddleware` is installed (see :doc:`/topics/http/middleware`). See also :setting:`APPEND_SLASH`."
msgstr ""

#: ../../ref/settings.txt:1549
# 00d08c1eff8a4f4cac62d06e2cf0a389
msgid "PROFANITIES_LIST"
msgstr ""

#: ../../ref/settings.txt:1553
# ac92fafc266e4cd082966be100f97df2
msgid "A tuple of profanities, as strings, that will be forbidden in comments when ``COMMENTS_ALLOW_PROFANITIES`` is ``False``."
msgstr ""

#: ../../ref/settings.txt:1559
# 3f71682b413443519afd851d0cf9677c
msgid "RESTRUCTUREDTEXT_FILTER_SETTINGS"
msgstr ""

#: ../../ref/settings.txt:1561
# 97a3d1a6bc4540efb70ef5e6c46e14c3
msgid "Default: ``{}``"
msgstr ""

#: ../../ref/settings.txt:1563
# 95eb0a2c80f74e868b8b250847ede9ff
msgid "A dictionary containing settings for the ``restructuredtext`` markup filter from the :doc:`django.contrib.markup application </ref/contrib/markup>`. They override the default writer settings. See the Docutils restructuredtext `writer settings docs`_ for details."
msgstr ""

#: ../../ref/settings.txt:1573
# 80fc42a4fc0b40b89b24f6c299b4f811
msgid "ROOT_URLCONF"
msgstr ""

#: ../../ref/settings.txt:1577
# 49422b3aec174525b1a8d0f60ef50e67
msgid "A string representing the full Python import path to your root URLconf. For example: ``\"mydjangoapps.urls\"``. Can be overridden on a per-request basis by setting the attribute ``urlconf`` on the incoming ``HttpRequest`` object. See :ref:`how-django-processes-a-request` for details."
msgstr ""

#: ../../ref/settings.txt:1585
# 3e6620e7292e495d83f9654192683125
msgid "SECRET_KEY"
msgstr ""

#: ../../ref/settings.txt:1589
# 95d167e38e414cc0991d4f14108add93
msgid "A secret key for a particular Django installation. This is used to provide :doc:`cryptographic signing </topics/signing>`, and should be set to a unique, unpredictable value."
msgstr ""

#: ../../ref/settings.txt:1593
# 824ee4d72f1247f18cea87ed3f7780a6
msgid ":djadmin:`django-admin.py startproject <startproject>` automatically adds a randomly-generated ``SECRET_KEY`` to each new project."
msgstr ""

#: ../../ref/settings.txt:1598
# b3146a8d99e846caba73f5dd0b762e46
msgid "**Keep this value secret.**"
msgstr ""

#: ../../ref/settings.txt:1600
# 640744dd87024eb4b3622b68fa21336e
msgid "Running Django with a known :setting:`SECRET_KEY` defeats many of Django's security protections, and can lead to privilege escalation and remote code execution vulnerabilities."
msgstr ""

#: ../../ref/settings.txt:1610
# 5cddee31bf7244fa96096ca048c4a591
msgid "SECURE_PROXY_SSL_HEADER"
msgstr ""

#: ../../ref/settings.txt:1616
# 486a176902d74c9fa86053d38c260184
msgid "A tuple representing a HTTP header/value combination that signifies a request is secure. This controls the behavior of the request object's ``is_secure()`` method."
msgstr ""

#: ../../ref/settings.txt:1620
# 12b340be4445463a923921f0d0498af5
msgid "This takes some explanation. By default, ``is_secure()`` is able to determine whether a request is secure by looking at whether the requested URL uses \"https://\". This is important for Django's CSRF protection, and may be used by your own code or third-party apps."
msgstr ""

#: ../../ref/settings.txt:1625
# 6a0ea67e5f7a484b82f703f9da107b8c
msgid "If your Django app is behind a proxy, though, the proxy may be \"swallowing\" the fact that a request is HTTPS, using a non-HTTPS connection between the proxy and Django. In this case, ``is_secure()`` would always return ``False`` -- even for requests that were made via HTTPS by the end user."
msgstr ""

#: ../../ref/settings.txt:1630
# 26b4a4bccd8148cdae17a145a9009a16
msgid "In this situation, you'll want to configure your proxy to set a custom HTTP header that tells Django whether the request came in via HTTPS, and you'll want to set ``SECURE_PROXY_SSL_HEADER`` so that Django knows what header to look for."
msgstr ""

#: ../../ref/settings.txt:1635
# a57451abdce6448fbf10444a211a95a7
msgid "You'll need to set a tuple with two elements -- the name of the header to look for and the required value. For example::"
msgstr ""

#: ../../ref/settings.txt:1640
# 60f48926bcd94c7295eb32ad9c579a8e
msgid "Here, we're telling Django that we trust the ``X-Forwarded-Proto`` header that comes from our proxy, and any time its value is ``'https'``, then the request is guaranteed to be secure (i.e., it originally came in via HTTPS). Obviously, you should *only* set this setting if you control your proxy or have some other guarantee that it sets/strips this header appropriately."
msgstr ""

#: ../../ref/settings.txt:1646
# 0a2e2851b8754bc4b770036f8d4e2b22
msgid "Note that the header needs to be in the format as used by ``request.META`` -- all caps and likely starting with ``HTTP_``. (Remember, Django automatically adds ``'HTTP_'`` to the start of x-header names before making the header available in ``request.META``.)"
msgstr ""

#: ../../ref/settings.txt:1653
# 60bdde50dac24c6d8208ad3b7b53dc7f
msgid "**You will probably open security holes in your site if you set this without knowing what you're doing. And if you fail to set it when you should. Seriously.**"
msgstr ""

#: ../../ref/settings.txt:1657
# e4d2bb60f0254fdd990a6296bedde563
msgid "Make sure ALL of the following are true before setting this (assuming the values from the example above):"
msgstr ""

#: ../../ref/settings.txt:1660
# d4b00efe7a9d45c7a04b415a79c94571
msgid "Your Django app is behind a proxy."
msgstr ""

#: ../../ref/settings.txt:1661
# 0ddd4b8dff3e4977b81bd22c693f520c
msgid "Your proxy strips the ``X-Forwarded-Proto`` header from all incoming requests. In other words, if end users include that header in their requests, the proxy will discard it."
msgstr ""

#: ../../ref/settings.txt:1664
# 4483bb2dd39148648d178d3edf6123ea
msgid "Your proxy sets the ``X-Forwarded-Proto`` header and sends it to Django, but only for requests that originally come in via HTTPS."
msgstr ""

#: ../../ref/settings.txt:1667
# d86bcee277f84d9d8e3cc4b2fb746475
msgid "If any of those are not true, you should keep this setting set to ``None`` and find another way of determining HTTPS, perhaps via custom middleware."
msgstr ""

#: ../../ref/settings.txt:1673
# b2a3c77b184b4e4a97ccd1b4f3f13cb9
msgid "SEND_BROKEN_LINK_EMAILS"
msgstr ""

#: ../../ref/settings.txt:1677
# 7191a353c1394e2e906e99d6ed794050
msgid "Whether to send an email to the :setting:`MANAGERS` each time somebody visits a Django-powered page that is 404ed with a non-empty referer (i.e., a broken link). This is only used if ``CommonMiddleware`` is installed (see :doc:`/topics/http/middleware`). See also :setting:`IGNORABLE_404_URLS` and :doc:`/howto/error-reporting`."
msgstr ""

#: ../../ref/settings.txt:1686
# b6a16562a6d647e1bb7b48bdd3cf2eb4
msgid "SERIALIZATION_MODULES"
msgstr ""

#: ../../ref/settings.txt:1688
# a34af2fe7c3b428c98298e114ae69294
msgid "Default: Not defined."
msgstr ""

#: ../../ref/settings.txt:1690
# 40ad924222d94baa988cc314eaeb113d
msgid "A dictionary of modules containing serializer definitions (provided as strings), keyed by a string identifier for that serialization type. For example, to define a YAML serializer, use::"
msgstr ""

#: ../../ref/settings.txt:1699
# 829bc2578eb44d8fb699cffc53fb0780
msgid "SERVER_EMAIL"
msgstr ""

#: ../../ref/settings.txt:1701
# ee32234c3b2241baae252f2325ba877d
msgid "Default: ``'root@localhost'``"
msgstr ""

#: ../../ref/settings.txt:1703
# 18cc40cfd5954cb997be48534b2e5816
msgid "The email address that error messages come from, such as those sent to :setting:`ADMINS` and :setting:`MANAGERS`."
msgstr ""

#: ../../ref/settings.txt:1709
# 31498b2d091e4e1dac3ac84a282cfefc
msgid "SESSION_COOKIE_AGE"
msgstr ""

#: ../../ref/settings.txt:1711
# 4c7ae112be55427f8856f12f46dc763e
msgid "Default: ``1209600`` (2 weeks, in seconds)"
msgstr ""

#: ../../ref/settings.txt:1713
# d19cfc8fea844949aeb5eeb422e777ec
msgid "The age of session cookies, in seconds. See :doc:`/topics/http/sessions`."
msgstr ""

#: ../../ref/settings.txt:1722
# e4a0ba74515e44d0898c3570e21dd712
msgid "The domain to use for session cookies. Set this to a string such as ``\".example.com\"`` for cross-domain cookies, or use ``None`` for a standard domain cookie. See the :doc:`/topics/http/sessions`."
msgstr ""

#: ../../ref/settings.txt:1729
# 88c74e72a8d74dc9b4088e903e9edd3a
msgid "SESSION_COOKIE_HTTPONLY"
msgstr ""

#: ../../ref/settings.txt:1733
# 408a4d162854481cbb5ebec17c38960d
msgid "Whether to use HTTPOnly flag on the session cookie. If this is set to ``True``, client-side JavaScript will not to be able to access the session cookie."
msgstr ""

#: ../../ref/settings.txt:1751
# 2e594f57c7a148c4b8a5611b033c4c45
msgid "SESSION_COOKIE_NAME"
msgstr ""

#: ../../ref/settings.txt:1753
# 2501a40d237344d9b14286480e5c9a48
msgid "Default: ``'sessionid'``"
msgstr ""

#: ../../ref/settings.txt:1755
# be59f2f951354e4ab4b96a8134606885
msgid "The name of the cookie to use for sessions. This can be whatever you want (but should be different from :setting:`LANGUAGE_COOKIE_NAME`). See the :doc:`/topics/http/sessions`."
msgstr ""

#: ../../ref/settings.txt:1762
# 0fc7f300ca9f4c9f8bdfce69e38161d7
msgid "SESSION_COOKIE_PATH"
msgstr ""

#: ../../ref/settings.txt:1766
# 006198518bde41548d392e126c3344f5
msgid "The path set on the session cookie. This should either match the URL path of your Django installation or be parent of that path."
msgstr ""

#: ../../ref/settings.txt:1769
# 8d72dd3c58ce4d7aa84a61162d7a24f5
msgid "This is useful if you have multiple Django instances running under the same hostname. They can use different cookie paths, and each instance will only see its own session cookie."
msgstr ""

#: ../../ref/settings.txt:1776
# ff4bdbd167694b6f8d44cc7d1a725489
msgid "SESSION_CACHE_ALIAS"
msgstr ""

#: ../../ref/settings.txt:1780
# ef0c01a36f994b72a27f57e3f8012170
msgid "If you're using :ref:`cache-based session storage <cached-sessions-backend>`, this selects the cache to use."
msgstr ""

#: ../../ref/settings.txt:1786
# e22e21da4d1e48439d383064ca8d4044
msgid "SESSION_COOKIE_SECURE"
msgstr ""

#: ../../ref/settings.txt:1790
# d12515d5ac81441c8e38b77e587ee1b2
msgid "Whether to use a secure cookie for the session cookie. If this is set to ``True``, the cookie will be marked as \"secure,\" which means browsers may ensure that the cookie is only sent under an HTTPS connection. See the :doc:`/topics/http/sessions`."
msgstr ""

#: ../../ref/settings.txt:1798
# f3c7295f7f2248ff8c829e3ec34330fd
msgid "SESSION_ENGINE"
msgstr ""

#: ../../ref/settings.txt:1800
# 567cf5e797a547b9ad26cdfdb2107789
msgid "Default: ``django.contrib.sessions.backends.db``"
msgstr ""

#: ../../ref/settings.txt:1802
# a4a04df4e9f74468956d0f94a45ab9f0
msgid "Controls where Django stores session data. Valid values are:"
msgstr ""

#: ../../ref/settings.txt:1804
# 89dcf791b1f54218852bdf720fac7463
msgid "``'django.contrib.sessions.backends.db'``"
msgstr ""

#: ../../ref/settings.txt:1805
# 02af7e429a0042dfb6e35c21c1b721c7
msgid "``'django.contrib.sessions.backends.file'``"
msgstr ""

#: ../../ref/settings.txt:1806
# 6a43b003e7cf46139d9667555b8ce289
msgid "``'django.contrib.sessions.backends.cache'``"
msgstr ""

#: ../../ref/settings.txt:1807
# 4246085e085a479a8f662b0f4c0a0906
msgid "``'django.contrib.sessions.backends.cached_db'``"
msgstr ""

#: ../../ref/settings.txt:1808
# 142724b4477f438993e30ae37a9aa236
msgid "``'django.contrib.sessions.backends.signed_cookies'``"
msgstr ""

#: ../../ref/settings.txt:1810
# fa51e7fa6ee24070b144eda6c6675839
msgid "See :doc:`/topics/http/sessions`."
msgstr ""

#: ../../ref/settings.txt:1815
# d3d2ebf156e2450d9b18b35a3d737913
msgid "SESSION_EXPIRE_AT_BROWSER_CLOSE"
msgstr ""

#: ../../ref/settings.txt:1819
# 9d6421a6e9894e5eb964611814be1397
msgid "Whether to expire the session when the user closes his or her browser. See the :doc:`/topics/http/sessions`."
msgstr ""

#: ../../ref/settings.txt:1825
# ecbb02b2e9354c2297c0fda04533e1a3
msgid "SESSION_FILE_PATH"
msgstr ""

#: ../../ref/settings.txt:1829
# aca3e845b8c04eeb9803e44d1ebfd4bf
msgid "If you're using file-based session storage, this sets the directory in which Django will store session data. See :doc:`/topics/http/sessions`. When the default value (``None``) is used, Django will use the standard temporary directory for the system."
msgstr ""

#: ../../ref/settings.txt:1837
# 5f0a27da72004c178c8101ff007c124b
msgid "SESSION_SAVE_EVERY_REQUEST"
msgstr ""

#: ../../ref/settings.txt:1841
# a95889e6b1c84230b50efd7e56a14e21
msgid "Whether to save the session data on every request. See :doc:`/topics/http/sessions`."
msgstr ""

#: ../../ref/settings.txt:1847
# d623e356bf0e41e3adec91ced9393c14
msgid "SHORT_DATE_FORMAT"
msgstr ""

#: ../../ref/settings.txt:1849
# d3b338027bd04ef1a0ecdcda05e8faf1
msgid "Default: ``m/d/Y`` (e.g. ``12/31/2003``)"
msgstr ""

#: ../../ref/settings.txt:1851
# 61281d78f02f44589dab03d6adb49d23
msgid "An available formatting that can be used for displaying date fields on templates. Note that if :setting:`USE_L10N` is set to ``True``, then the corresponding locale-dictated format has higher precedence and will be applied. See :tfilter:`allowed date format strings <date>`."
msgstr ""

#: ../../ref/settings.txt:1856
# 91d7c7b58db14dd98d36ea546ba63e73
msgid "See also :setting:`DATE_FORMAT` and :setting:`SHORT_DATETIME_FORMAT`."
msgstr ""

#: ../../ref/settings.txt:1861
# d44d0d93e8044f1abe49863db439ff36
msgid "SHORT_DATETIME_FORMAT"
msgstr ""

#: ../../ref/settings.txt:1863
# ba9afdeb7092472e9d454332e83ef937
msgid "Default: ``m/d/Y P`` (e.g. ``12/31/2003 4 p.m.``)"
msgstr ""

#: ../../ref/settings.txt:1865
# 8194b606c4b5493ca466b4b3c55667f9
msgid "An available formatting that can be used for displaying datetime fields on templates. Note that if :setting:`USE_L10N` is set to ``True``, then the corresponding locale-dictated format has higher precedence and will be applied. See :tfilter:`allowed date format strings <date>`."
msgstr ""

#: ../../ref/settings.txt:1870
# 38bf0b2ae9a54546b83f5e04b62163b0
msgid "See also :setting:`DATE_FORMAT` and :setting:`SHORT_DATE_FORMAT`."
msgstr ""

#: ../../ref/settings.txt:1875
# 34593cabe38d43b6a794318ffa5aba1e
msgid "SIGNING_BACKEND"
msgstr ""

#: ../../ref/settings.txt:1879
# c4909f6621c542e6bc5171eb0882ebdc
msgid "Default: 'django.core.signing.TimestampSigner'"
msgstr ""

#: ../../ref/settings.txt:1881
# 24f1c27df43849cdaa2f5a2c88470e2d
msgid "The backend used for signing cookies and other data."
msgstr ""

#: ../../ref/settings.txt:1883
# fa89b4a2cfce459c85ac31e1ea207df1
msgid "See also the :doc:`/topics/signing` documentation."
msgstr ""

#: ../../ref/settings.txt:1888
# b8205cb5363a4452826e0dc512b75fa1
msgid "SITE_ID"
msgstr ""

#: ../../ref/settings.txt:1892
# f836d5f4bf534d8eba4bc557b7a8d7b3
msgid "The ID, as an integer, of the current site in the ``django_site`` database table. This is used so that application data can hook into specific site(s) and a single database can manage content for multiple sites."
msgstr ""

#: ../../ref/settings.txt:1896
# 53f9eb99604e4f0684462509325edf89
msgid "See :doc:`/ref/contrib/sites`."
msgstr ""

#: ../../ref/settings.txt:1903
# 2808c75ceb074a54811b6938b754e7fe
msgid "STATIC_ROOT"
msgstr ""

#: ../../ref/settings.txt:1907
# 8cda475144ad48ae9647f25e3aad8265
msgid "The absolute path to the directory where :djadmin:`collectstatic` will collect static files for deployment."
msgstr ""

#: ../../ref/settings.txt:1910
# d227e6f7e4be411697cf6da79227e96f
msgid "Example: ``\"/var/www/example.com/static/\"``"
msgstr ""

#: ../../ref/settings.txt:1912
# e1d18efd07f64effa00d3513054d92f6
msgid "If the :doc:`staticfiles</ref/contrib/staticfiles>` contrib app is enabled (default) the :djadmin:`collectstatic` management command will collect static files into this directory. See the howto on :doc:`managing static files</howto/static-files/index>` for more details about usage."
msgstr ""

#: ../../ref/settings.txt:1919
# 48079fec32494a00813b554ee379e26c
msgid "This should be an (initially empty) destination directory for collecting your static files from their permanent locations into one directory for ease of deployment; it is **not** a place to store your static files permanently. You should do that in directories that will be found by :doc:`staticfiles</ref/contrib/staticfiles>`'s :setting:`finders<STATICFILES_FINDERS>`, which by default, are ``'static/'`` app sub-directories and any directories you include in :setting:`STATICFILES_DIRS`)."
msgstr ""

#: ../../ref/settings.txt:1928
# 9bcf99871ba4401585af32c338ca3654
msgid "See :doc:`staticfiles reference</ref/contrib/staticfiles>` and :setting:`STATIC_URL`."
msgstr ""

#: ../../ref/settings.txt:1934
# ac97674b9ba74e8b8e56c35fe5d718df
msgid "STATIC_URL"
msgstr ""

#: ../../ref/settings.txt:1938
# 70ee816df368447ebda1a6f68d7c5e6c
msgid "URL to use when referring to static files located in :setting:`STATIC_ROOT`."
msgstr ""

#: ../../ref/settings.txt:1940
# a1e3844e5e084598b924ef88db8fccde
msgid "Example: ``\"/static/\"`` or ``\"http://static.example.com/\"``"
msgstr ""

#: ../../ref/settings.txt:1942
# f3523729cbc54ba2b14f2e330e904fd2
msgid "If not ``None``, this will be used as the base path for :ref:`media definitions<form-media-paths>` and the :doc:`staticfiles app</ref/contrib/staticfiles>`."
msgstr ""

#: ../../ref/settings.txt:1946
# 117e0351a2834c79b659f73b5acc5925
msgid "It must end in a slash if set to a non-empty value."
msgstr ""

#: ../../ref/settings.txt:1948
# dda51a581f494fe8b042a1e9ee61bc46
msgid "See :setting:`STATIC_ROOT`."
msgstr ""

#: ../../ref/settings.txt:1953
# f710011182394d5ca2166d059e6aff86
msgid "TEMPLATE_CONTEXT_PROCESSORS"
msgstr ""

#: ../../ref/settings.txt:1965
# 24930319282b4434a6e98947c172249e
msgid "A tuple of callables that are used to populate the context in ``RequestContext``. These callables take a request object as their argument and return a dictionary of items to be merged into the context."
msgstr ""

#: ../../ref/settings.txt:1976
# d67a5818c205489981c10e786f55c48a
msgid "TEMPLATE_DEBUG"
msgstr ""

#: ../../ref/settings.txt:1980
# 74b7b4ec3d254cc7ba94be414ba3bbde
msgid "A boolean that turns on/off template debug mode. If this is ``True``, the fancy error page will display a detailed report for any exception raised during template rendering. This report contains the relevant snippet of the template, with the appropriate line highlighted."
msgstr ""

#: ../../ref/settings.txt:1985
# 73aefd3e3b984b85806d5667686da337
msgid "Note that Django only displays fancy error pages if :setting:`DEBUG` is ``True``, so you'll want to set that to take advantage of this setting."
msgstr ""

#: ../../ref/settings.txt:1988
# 692f7b9f743b433c90378370923f5edc
msgid "See also :setting:`DEBUG`."
msgstr ""

#: ../../ref/settings.txt:1993
# a396ed6339ab4775ba0814f1c5d38f35
msgid "TEMPLATE_DIRS"
msgstr ""

#: ../../ref/settings.txt:1997
# f606de3d6dd24243a1739b387bb962d2
msgid "List of locations of the template source files searched by :class:`django.template.loaders.filesystem.Loader`, in search order."
msgstr ""

#: ../../ref/settings.txt:2002
# fa87481f48124a03921b4372406751d2
msgid "See :doc:`/topics/templates`."
msgstr ""

#: ../../ref/settings.txt:2007
# c09df857b05b4d1aa7d7cef74eb02dfb
msgid "TEMPLATE_LOADERS"
msgstr ""

#: ../../ref/settings.txt:2014
# a09b18e88c4a4de88ae5e3f8d3ba3f66
msgid "A tuple of template loader classes, specified as strings. Each ``Loader`` class knows how to import templates from a particular source. Optionally, a tuple can be used instead of a string. The first item in the tuple should be the ``Loader``'s module, subsequent items are passed to the ``Loader`` during initialization. See :doc:`/ref/templates/api`."
msgstr ""

#: ../../ref/settings.txt:2023
# f5fa8b6bb84a4e63a44089dbe35cb3ae
msgid "TEMPLATE_STRING_IF_INVALID"
msgstr ""

#: ../../ref/settings.txt:2027
# e67eaf0a92204f94bfb8b65862bd4cfc
msgid "Output, as a string, that the template system should use for invalid (e.g. misspelled) variables. See :ref:`invalid-template-variables`.."
msgstr ""

#: ../../ref/settings.txt:2033
# f35cd1cf57e94df4930ffe2f58b124ae
msgid "TEST_RUNNER"
msgstr ""

#: ../../ref/settings.txt:2035
# 2c34ffccfd0e4651aab96f7ea3511ccf
msgid "Default: ``'django.test.simple.DjangoTestSuiteRunner'``"
msgstr ""

#: ../../ref/settings.txt:2037
# 6fc05e6ef927421ba3736542c4d88900
msgid "The name of the class to use for starting the test suite. See :ref:`other-testing-frameworks`."
msgstr ""

#: ../../ref/settings.txt:2043
# 683b29478c2a49b492065dec7b1513ba
msgid "THOUSAND_SEPARATOR"
msgstr ""

#: ../../ref/settings.txt:2045
# e8c72c2d45ce4f409e29498477bad1ac
msgid "Default: ``,`` (Comma)"
msgstr ""

#: ../../ref/settings.txt:2047
# f9bcbffb3d504de09ad1818a32820c53
msgid "Default thousand separator used when formatting numbers. This setting is used only when :setting:`USE_THOUSAND_SEPARATOR` is ``True`` and :setting:`NUMBER_GROUPING` is greater than ``0``."
msgstr ""

#: ../../ref/settings.txt:2054
# ddbf508a18fd427b9287afb7de405b7f
msgid "See also :setting:`NUMBER_GROUPING`, :setting:`DECIMAL_SEPARATOR` and :setting:`USE_THOUSAND_SEPARATOR`."
msgstr ""

#: ../../ref/settings.txt:2060
# bdbf0f6d62c24317ace9ebd4775c461b
msgid "TIME_FORMAT"
msgstr ""

#: ../../ref/settings.txt:2062
# 835365550f70431fae1de7c6acefa759
msgid "Default: ``'P'`` (e.g. ``4 p.m.``)"
msgstr ""

#: ../../ref/settings.txt:2064
# 2bde9ddaf429494d8ecb3d8d21ecb4d3
msgid "The default formatting to use for displaying time fields in any part of the system. Note that if :setting:`USE_L10N` is set to ``True``, then the locale-dictated format has higher precedence and will be applied instead. See :tfilter:`allowed date format strings <date>`."
msgstr ""

#: ../../ref/settings.txt:2069
# 38192447fd2d436b899dcf6b81075e3c
msgid "See also :setting:`DATE_FORMAT` and :setting:`DATETIME_FORMAT`."
msgstr ""

#: ../../ref/settings.txt:2074
# 91e366185da2484ea0ec86fc2e2278ff
msgid "TIME_INPUT_FORMATS"
msgstr ""

#: ../../ref/settings.txt:2083
# b9887e4a1cb041dea1c57e2f5c073eb3
msgid "A tuple of formats that will be accepted when inputting data on a time field. Formats will be tried in order, using the first valid one. Note that these format strings use Python's datetime_ module syntax, not the format strings from the ``date`` Django template tag."
msgstr ""

#: ../../ref/settings.txt:2091
# a9e8f3bd5f0d48ffa9f307fd3b511194
msgid "See also :setting:`DATE_INPUT_FORMATS` and :setting:`DATETIME_INPUT_FORMATS`."
msgstr ""

#: ../../ref/settings.txt:2098
# 5e43f58f80c949228f91ee256ddf6202
msgid "TIME_ZONE"
msgstr ""

#: ../../ref/settings.txt:2100
# 0c91a439e6d748d7acd2371d78550a57
msgid "Default: ``'America/Chicago'``"
msgstr ""

#: ../../ref/settings.txt:2105
# 93cd8bd8ecce4481a2d75b9b30f1634b
msgid "A string representing the time zone for this installation, or ``None``. `See available choices`_. (Note that list of available choices lists more than one on the same line; you'll want to use just one of the choices for a given time zone. For instance, one line says ``'Europe/London GB GB-Eire'``, but you should use the first bit of that -- ``'Europe/London'`` -- as your :setting:`TIME_ZONE` setting.)"
msgstr ""

#: ../../ref/settings.txt:2112
# 01afde9ea0be4018bcdc3619548b4a3b
msgid "Note that this isn't necessarily the time zone of the server. For example, one server may serve multiple Django-powered sites, each with a separate time zone setting."
msgstr ""

#: ../../ref/settings.txt:2116
# 51c8ede88e7a483c99ce0ba3525acfff
msgid "When :setting:`USE_TZ` is ``False``, this is the time zone in which Django will store all datetimes. When :setting:`USE_TZ` is ``True``, this is the default time zone that Django will use to display datetimes in templates and to interpret datetimes entered in forms."
msgstr ""

#: ../../ref/settings.txt:2121
# 8eb69ac04d5444f7864e8a054d76670a
msgid "Django sets the ``os.environ['TZ']`` variable to the time zone you specify in the :setting:`TIME_ZONE` setting. Thus, all your views and models will automatically operate in this time zone. However, Django won't set the ``TZ`` environment variable under the following conditions:"
msgstr ""

#: ../../ref/settings.txt:2126
# 50e0ab27c561471cb4a3465be9f38273
msgid "If you're using the manual configuration option as described in :ref:`manually configuring settings <settings-without-django-settings-module>`, or"
msgstr ""

#: ../../ref/settings.txt:2130
# e47336bca6fc444e8bdecafe6e5d7d3b
msgid "If you specify ``TIME_ZONE = None``. This will cause Django to fall back to using the system timezone. However, this is discouraged when :setting:`USE_TZ = True <USE_TZ>`, because it makes conversions between local time and UTC less reliable."
msgstr ""

#: ../../ref/settings.txt:2135
# a8c704798cc3460ea7a146a4a29dd73e
msgid "If Django doesn't set the ``TZ`` environment variable, it's up to you to ensure your processes are running in the correct environment."
msgstr ""

#: ../../ref/settings.txt:2139
# 39b5157ea2c948a48012342be407df11
msgid "Django cannot reliably use alternate time zones in a Windows environment. If you're running Django on Windows, :setting:`TIME_ZONE` must be set to match the system time zone."
msgstr ""

#: ../../ref/settings.txt:2150
# f23bcdcf39ff4ee6965b7740ab9f2b55
msgid "TRANSACTIONS_MANAGED"
msgstr ""

#: ../../ref/settings.txt:2154
# acc1497666e34059bac40e2c796643c3
msgid "Set this to ``True`` if you want to :ref:`disable Django's transaction management <deactivate-transaction-management>` and implement your own."
msgstr ""

#: ../../ref/settings.txt:2160
# 9727be9d6c3647c7b0f69426714cfd81
msgid "USE_ETAGS"
msgstr ""

#: ../../ref/settings.txt:2164
# 082b569c3ccf41fb8b397b423ce41ffa
msgid "A boolean that specifies whether to output the \"Etag\" header. This saves bandwidth but slows down performance. This is used by the ``CommonMiddleware`` (see :doc:`/topics/http/middleware`) and in the``Cache Framework`` (see :doc:`/topics/cache`)."
msgstr ""

#: ../../ref/settings.txt:2172
# 5758a8c824f544bd8eaacfcdac4d0d52
msgid "USE_I18N"
msgstr ""

#: ../../ref/settings.txt:2176
# 82abe35777d445cda7c97aa50377a095
msgid "A boolean that specifies whether Django's translation system should be enabled. This provides an easy way to turn it off, for performance. If this is set to ``False``, Django will make some optimizations so as not to load the translation machinery."
msgstr ""

#: ../../ref/settings.txt:2181
# 66a13a14552948718b0fffb7726414aa
msgid "See also :setting:`LANGUAGE_CODE`, :setting:`USE_L10N` and :setting:`USE_TZ`."
msgstr ""

#: ../../ref/settings.txt:2186
# 5ee3b2f5cc024d96908ed0bf2d0603ab
msgid "USE_L10N"
msgstr ""

#: ../../ref/settings.txt:2190
# d5fa52e754594bbd8d2945d91b6b7426
msgid "A boolean that specifies if localized formatting of data will be enabled by default or not. If this is set to ``True``, e.g. Django will display numbers and dates using the format of the current locale."
msgstr ""

#: ../../ref/settings.txt:2194
# c80f09c6b7c64ba6b32797009df27d84
msgid "See also :setting:`LANGUAGE_CODE`, :setting:`USE_I18N` and :setting:`USE_TZ`."
msgstr ""

#: ../../ref/settings.txt:2198
# 0bf4e449c2cd45d69ebf124d8af88742
msgid "The default :file:`settings.py` file created by :djadmin:`django-admin.py startproject <startproject>` includes ``USE_L10N = True`` for convenience."
msgstr ""

#: ../../ref/settings.txt:2204
# 54c3627b9e2f498cbc8e90daaee3cb39
msgid "USE_THOUSAND_SEPARATOR"
msgstr ""

#: ../../ref/settings.txt:2208
# fd100eff6df2465db2641b64e60f847c
msgid "A boolean that specifies whether to display numbers using a thousand separator. When :setting:`USE_L10N` is set to ``True`` and if this is also set to ``True``, Django will use the values of :setting:`THOUSAND_SEPARATOR` and :setting:`NUMBER_GROUPING` to format numbers."
msgstr ""

#: ../../ref/settings.txt:2213
# ba29741f32874dc9aee88fb36c4580d1
msgid "See also :setting:`DECIMAL_SEPARATOR`, :setting:`NUMBER_GROUPING` and :setting:`THOUSAND_SEPARATOR`."
msgstr ""

#: ../../ref/settings.txt:2219
# d112e0154b6445f58de0287547681468
msgid "USE_TZ"
msgstr ""

#: ../../ref/settings.txt:2225
# 035fba3ee9ac474dbcfb780d83ed175c
msgid "A boolean that specifies if datetimes will be timezone-aware by default or not. If this is set to ``True``, Django will use timezone-aware datetimes internally. Otherwise, Django will use naive datetimes in local time."
msgstr ""

#: ../../ref/settings.txt:2229
# 0561329014db43e39d4b9d7f50744ebd
msgid "See also :setting:`TIME_ZONE`, :setting:`USE_I18N` and :setting:`USE_L10N`."
msgstr ""

#: ../../ref/settings.txt:2233
# 41e531f082db49ebae62f05003de2082
msgid "The default :file:`settings.py` file created by :djadmin:`django-admin.py startproject <startproject>` includes ``USE_TZ = True`` for convenience."
msgstr ""

#: ../../ref/settings.txt:2240
# f1f648f05b3540b58bce2e3b5261e2b1
msgid "USE_X_FORWARDED_HOST"
msgstr ""

#: ../../ref/settings.txt:2244
# 541b6cb0e5bc4713beab91ae6562b74a
msgid "A boolean that specifies whether to use the X-Forwarded-Host header in preference to the Host header. This should only be enabled if a proxy which sets this header is in use."
msgstr ""

#: ../../ref/settings.txt:2251
# 91fe324fb1c645b8866aa6be79249428
msgid "WSGI_APPLICATION"
msgstr ""

#: ../../ref/settings.txt:2257
# e2bd876a9a4e4ab09d9c2666a4f4f2bc
msgid "The full Python path of the WSGI application object that Django's built-in servers (e.g. :djadmin:`runserver`) will use. The :djadmin:`django-admin.py startproject <startproject>` management command will create a simple ``wsgi.py`` file with an ``application`` callable in it, and point this setting to that ``application``."
msgstr ""

#: ../../ref/settings.txt:2263
# 40c5955a593a4f6dad5683ecebb56639
msgid "If not set, the return value of ``django.core.wsgi.get_wsgi_application()`` will be used. In this case, the behavior of :djadmin:`runserver` will be identical to previous Django versions."
msgstr ""

#: ../../ref/settings.txt:2270
# 54061871f26d429c9ce0f9b857a53e4f
msgid "YEAR_MONTH_FORMAT"
msgstr ""

#: ../../ref/settings.txt:2272
# 0aa3a5de32d445cf968e7ebd57c6e50b
msgid "Default: ``'F Y'``"
msgstr ""

#: ../../ref/settings.txt:2274
# 84782464f49a48949c5a146f3d2d356c
msgid "The default formatting to use for date fields on Django admin change-list pages -- and, possibly, by other parts of the system -- in cases when only the year and month are displayed."
msgstr ""

#: ../../ref/settings.txt:2278
# 821e96fd136546cd9834464111a81342
msgid "For example, when a Django admin change-list page is being filtered by a date drilldown, the header for a given month displays the month and the year. Different locales have different formats. For example, U.S. English would say \"January 2006,\" whereas another locale might say \"2006/January.\""
msgstr ""

#: ../../ref/settings.txt:2283
# 87aa6fa3f7584e5abb163a6cc5256590
msgid "See :tfilter:`allowed date format strings <date>`. See also :setting:`DATE_FORMAT`, :setting:`DATETIME_FORMAT`, :setting:`TIME_FORMAT` and :setting:`MONTH_DAY_FORMAT`."
msgstr ""

#: ../../ref/settings.txt:2290
# 42650d8fce60436ab6130a89cfa8f849
msgid "X_FRAME_OPTIONS"
msgstr ""

#: ../../ref/settings.txt:2292
# 1f801b2fe50f40bd96a1bc34b9cb548e
msgid "Default: ``'SAMEORIGIN'``"
msgstr ""

#: ../../ref/settings.txt:2294
# 0e5d54062fdc4c6aae7522d674a92341
msgid "The default value for the X-Frame-Options header used by :class:`~django.middleware.clickjacking.XFrameOptionsMiddleware`. See the :doc:`clickjacking protection </ref/clickjacking/>` documentation."
msgstr ""

#: ../../ref/settings.txt:2299
# 190261f5bebe4bc6a5367c013633e67c
msgid "Deprecated settings"
msgstr ""

#: ../../ref/settings.txt:2304
# 062af91dd07c493d8262df526b0f3061
msgid "AUTH_PROFILE_MODULE"
msgstr ""

#: ../../ref/settings.txt:2314
# 638252f18c0044d89022c27fc0f70d36
msgid "The site-specific user profile model used by this site. See :ref:`User profiles <auth-profiles>`."
msgstr ""

#: ../../ref/settings.txt:2320
# 18e551e104aa428183323443ff23155e
msgid "IGNORABLE_404_ENDS"
msgstr ""

#: ../../ref/settings.txt:2328
# ea1b31dac4904b2f981c2c47cd4c5e43
msgid "IGNORABLE_404_STARTS"
msgstr ""

#: ../../ref/signals.txt:3
# db912875a069460dbed6b194369688c0
msgid "Signals"
msgstr ""

#: ../../ref/signals.txt:5
# 3eff86ac322f42fdb8b4eedcb7a835f3
msgid "A list of all the signals that Django sends."
msgstr ""

#: ../../ref/signals.txt:9
# d2bdb53fec894d6cb94aee26536c7dbb
msgid "See the documentation on the :doc:`signal dispatcher </topics/signals>` for information regarding how to register for and receive signals."
msgstr ""

#: ../../ref/signals.txt:12
# 73b38321bd8d411dbaeabf2fe98672ea
msgid "The :doc:`comment framework </ref/contrib/comments/index>` sends a :doc:`set of comment-related signals </ref/contrib/comments/signals>`."
msgstr ""

#: ../../ref/signals.txt:15
# 4d3c667ca3d24f69b57a2a71264c31e2
msgid "The :doc:`authentication framework </topics/auth/index>` sends :ref:`signals when a user is logged in / out <topics-auth-signals>`."
msgstr ""

#: ../../ref/signals.txt:19
# 62f44f848bff4c84a81f4d0686f3c797
msgid "Model signals"
msgstr ""

#: ../../ref/signals.txt:24
# 97287741e2524a578d24f7451f43ecaf
msgid "The :mod:`django.db.models.signals` module defines a set of signals sent by the module system."
msgstr ""

#: ../../ref/signals.txt:29
# dac6440bced74308b51bf54cf21a31da
msgid "Many of these signals are sent by various model methods like ``__init__()`` or :meth:`~django.db.models.Model.save` that you can override in your own code."
msgstr ""

#: ../../ref/signals.txt:33
# 1d09db78cf814917b98b7920dd2d15da
msgid "If you override these methods on your model, you must call the parent class' methods for this signals to be sent."
msgstr ""

#: ../../ref/signals.txt:36
# 87924cd273ba4005b44e78f4aed31017
msgid "Note also that Django stores signal handlers as weak references by default, so if your handler is a local function, it may be garbage collected.  To prevent this, pass ``weak=False`` when you call the signal's :meth:`~django.dispatch.Signal.connect`."
msgstr ""

#: ../../ref/signals.txt:41
# c3a486ff38d4464486c0e0e27a6c9b61
msgid "pre_init"
msgstr ""

#: ../../ref/signals.txt:48
# f51f33428c5d4a7b99dc7e67496dcf81
msgid "Whenever you instantiate a Django model, this signal is sent at the beginning of the model's ``__init__()`` method."
msgstr ""

#: ../../ref/signals.txt:54
# 405cc65818ce468e952d8f4dc09d7d14
msgid "The model class that just had an instance created."
msgstr ""

#: ../../ref/signals.txt:57
# 3899a6b65ba846d696e25239c8c3249c
msgid "A list of positional arguments passed to ``__init__()``:"
msgstr ""

#: ../../ref/signals.txt:60
# e89d454bc7584ae1bcb13d8d55941b4b
msgid "A dictionary of keyword arguments passed to ``__init__()``:"
msgstr ""

#: ../../ref/signals.txt:62
# 85cf9fda24d04811aa7c0ad6dfeec642
msgid "For example, the :doc:`tutorial </intro/tutorial01>` has this line::"
msgstr ""

#: ../../ref/signals.txt:66
# 8d4f83595e204a20b68c0e2c172cf012
msgid "The arguments sent to a :data:`pre_init` handler would be:"
msgstr ""

#: ../../ref/signals.txt:71
#: ../../ref/signals.txt:297
#: ../../ref/signals.txt:324
# b8e011b27fe240ebb10fa548f590c442
# 62b3b2e784f241a09329b8fa09ad5f24
# 5e893aec488b428e8440e074061a6c35
msgid "``sender``"
msgstr ""

#: ../../ref/signals.txt:71
# cf425845854a45d6a3efdd7a06d9b974
msgid "``Poll`` (the class itself)"
msgstr ""

#: ../../ref/signals.txt:73
# 4937ca75082f4bedb19e85f142058ab0
msgid "``args``"
msgstr ""

#: ../../ref/signals.txt:73
# a3a3b5345b1048e892f716862391d298
msgid "``[]`` (an empty list because there were no positional arguments passed to ``__init__()``.)"
msgstr ""

#: ../../ref/signals.txt:76
# 4aa853f629c44efab972569d05f7ff6e
msgid "``kwargs``"
msgstr ""

#: ../../ref/signals.txt:76
# dc3705f9897c4f6fb6833d261e447f16
msgid "``{'question': \"What's up?\", 'pub_date': datetime.now()}``"
msgstr ""

#: ../../ref/signals.txt:80
# ae36e0a5ecbb44b2b58c23afda764746
msgid "post_init"
msgstr ""

#: ../../ref/signals.txt:85
# 57c040b615554f399be61ece2a7f4e4b
msgid "Like pre_init, but this one is sent when the ``__init__()`` method finishes."
msgstr ""

#: ../../ref/signals.txt:90
# 73e3606a32b042159ecc6dcab7f9cc1f
msgid "As above: the model class that just had an instance created."
msgstr ""

#: ../../ref/signals.txt:93
# fbba821ddc254821a3cb78b6569e6fd8
msgid "The actual instance of the model that's just been created."
msgstr ""

#: ../../ref/signals.txt:96
# b8badd91eb0f48098c7afb98ffe9ad3c
msgid "pre_save"
msgstr ""

#: ../../ref/signals.txt:101
# 37d2475f7a094ae9af7535abf3f245fc
msgid "This is sent at the beginning of a model's :meth:`~django.db.models.Model.save` method."
msgstr ""

#: ../../ref/signals.txt:107
#: ../../ref/signals.txt:139
#: ../../ref/signals.txt:174
#: ../../ref/signals.txt:195
# a32d7a6545dd48649698c5d6e91fd78b
# 97a8fe23493a48ffa1948aa58fb2238e
# 9538724a99504da1b0f84a491995051e
# 59a6d4ca0d2648638394a0016680703f
msgid "The model class."
msgstr ""

#: ../../ref/signals.txt:110
#: ../../ref/signals.txt:142
# 8469289a58634336ae8d40350ce4b544
# 65d7ac44c9c64329b3cdf9b3a2ccc22d
msgid "The actual instance being saved."
msgstr ""

#: ../../ref/signals.txt:113
#: ../../ref/signals.txt:148
# d853c11b62174062946acdcf7fa2e0f8
# ede7a6a63a65465086f9fe64a6649666
msgid "A boolean; ``True`` if the model is saved exactly as presented (i.e. when loading a fixture). One should not query/modify other records in the database as the database might not be in a consistent state yet."
msgstr ""

#: ../../ref/signals.txt:119
#: ../../ref/signals.txt:154
#: ../../ref/signals.txt:180
#: ../../ref/signals.txt:204
#: ../../ref/signals.txt:264
# 7a192c70e1db4248984d86694d2fc636
# 6e1ccd02000f493e8c7756dcca4f23f0
# 14afad54226c42dc9ca44b78723f1945
# de7ad1edc5ab437dbf41b4c0223e5024
# 1d9e76f26b7c433c8aaa2ea35a31b72b
msgid "The database alias being used."
msgstr ""

#: ../../ref/signals.txt:124
#: ../../ref/signals.txt:159
# 1be9034078ca43dfb9ba0c1dd0ad3993
# 372073044893422bb552e1f608caae04
msgid "The set of fields to update explicitly specified in the ``save()`` method. ``None`` if this argument was not used in the ``save()`` call."
msgstr ""

#: ../../ref/signals.txt:128
# a6beeaa9a87d42c584fae172fc610675
msgid "post_save"
msgstr ""

#: ../../ref/signals.txt:133
# 9b1f21a988714036b1361e863f868c0f
msgid "Like :data:`pre_save`, but sent at the end of the :meth:`~django.db.models.Model.save` method."
msgstr ""

#: ../../ref/signals.txt:145
# fdcc29bb5881417fb3e1190db952e285
msgid "A boolean; ``True`` if a new record was created."
msgstr ""

#: ../../ref/signals.txt:163
# 57e8c531544f44f585a88181a884506b
msgid "pre_delete"
msgstr ""

#: ../../ref/signals.txt:168
# 3c01761f8f2b471b9ec46bea7788e892
msgid "Sent at the beginning of a model's :meth:`~django.db.models.Model.delete` method and a queryset's :meth:`~django.db.models.query.QuerySet.delete` method."
msgstr ""

#: ../../ref/signals.txt:177
#: ../../ref/signals.txt:198
# 21592049543449aa8832e5c7910e6667
# 24d20a04b5ab4c1ca4068f1ace9ff4d5
msgid "The actual instance being deleted."
msgstr ""

#: ../../ref/signals.txt:183
# d8dce1679dd84c548a1cf0370a874333
msgid "post_delete"
msgstr ""

#: ../../ref/signals.txt:188
# e607a9bf66ba493c804030de3cb029b6
msgid "Like :data:`pre_delete`, but sent at the end of a model's :meth:`~django.db.models.Model.delete` method and a queryset's :meth:`~django.db.models.query.QuerySet.delete` method."
msgstr ""

#: ../../ref/signals.txt:200
# eb3370cf061741b192e20323cee74afa
msgid "Note that the object will no longer be in the database, so be very careful what you do with this instance."
msgstr ""

#: ../../ref/signals.txt:207
# 534bd47fe4ca41c6a247a9b86665ebaf
msgid "m2m_changed"
msgstr ""

#: ../../ref/signals.txt:212
# 7925d3e1258643c4b0b1cb6582fcd5e3
msgid "Sent when a :class:`~django.db.models.ManyToManyField` is changed on a model instance. Strictly speaking, this is not a model signal since it is sent by the :class:`~django.db.models.ManyToManyField`, but since it complements the :data:`pre_save`/:data:`post_save` and :data:`pre_delete`/:data:`post_delete` when it comes to tracking changes to models, it is included here."
msgstr ""

#: ../../ref/signals.txt:221
# 0d727d3e114b4910a45e37d7a6c6f3d9
msgid "The intermediate model class describing the :class:`~django.db.models.ManyToManyField`. This class is automatically created when a many-to-many field is defined; you can access it using the ``through`` attribute on the many-to-many field."
msgstr ""

#: ../../ref/signals.txt:227
# 8038849a439c4f9e9fb1f67c688326a5
msgid "The instance whose many-to-many relation is updated. This can be an instance of the ``sender``, or of the class the :class:`~django.db.models.ManyToManyField` is related to."
msgstr ""

#: ../../ref/signals.txt:232
# d7fc3ffea8ab4057b24597ab081c93f9
msgid "A string indicating the type of update that is done on the relation. This can be one of the following:"
msgstr ""

#: ../../ref/signals.txt:236
# e5aab746446d4755a55938560725fc07
msgid "Sent *before* one or more objects are added to the relation."
msgstr ""

#: ../../ref/signals.txt:238
# 15e1d67432734316bd6d2f4173b73dcc
msgid "Sent *after* one or more objects are added to the relation."
msgstr ""

#: ../../ref/signals.txt:240
# df6fe0d064824766a525aac472fae9db
msgid "Sent *before* one or more objects are removed from the relation."
msgstr ""

#: ../../ref/signals.txt:242
# 88864807f2dc4b34abdfbdd55f756bb2
msgid "Sent *after* one or more objects are removed from the relation."
msgstr ""

#: ../../ref/signals.txt:244
# 664d31878ec3452f98ab92c4695c7d1f
msgid "Sent *before* the relation is cleared."
msgstr ""

#: ../../ref/signals.txt:246
# 47be1fcfaff1472db7bf793c995b04eb
msgid "Sent *after* the relation is cleared."
msgstr ""

#: ../../ref/signals.txt:249
# 3287db23f3f04d88a7fe72bd6f29f82b
msgid "Indicates which side of the relation is updated (i.e., if it is the forward or reverse relation that is being modified)."
msgstr ""

#: ../../ref/signals.txt:253
# 6a23e710150948048197d0fa266a4b21
msgid "The class of the objects that are added to, removed from or cleared from the relation."
msgstr ""

#: ../../ref/signals.txt:257
# 836f15767b0643e2b805dc2d39c7166f
msgid "For the ``pre_add``, ``post_add``, ``pre_remove`` and ``post_remove`` actions, this is a list of primary key values that have been added to or removed from the relation."
msgstr ""

#: ../../ref/signals.txt:261
# be3c897971a648e097d427d8864d24d0
msgid "For the ``pre_clear`` and ``post_clear`` actions, this is ``None``."
msgstr ""

#: ../../ref/signals.txt:266
# 72628ece0b554c5b810442c802918cca
msgid "For example, if a ``Pizza`` can have multiple ``Topping`` objects, modeled like this::"
msgstr ""

#: ../../ref/signals.txt:277
# f1d685a965054cd9b4a8190e1edb8a29
msgid "If we connected a handler like this::"
msgstr ""

#: ../../ref/signals.txt:285
# 76cb04c429704510b3bafb6a37de7747
msgid "and then did something like this::"
msgstr ""

#: ../../ref/signals.txt:291
# c87c6290491f4eaea05e96fb2513fc1c
msgid "the arguments sent to a :data:`m2m_changed` handler (``topppings_changed`` in the example above) would be:"
msgstr ""

#: ../../ref/signals.txt:297
#: ../../ref/signals.txt:324
# 57992dc9ae4e4be4b24d8c5faa3b49a4
# 2c26b4e0aea2446f827642c028a3b294
msgid "``Pizza.toppings.through`` (the intermediate m2m class)"
msgstr ""

#: ../../ref/signals.txt:299
# b436ced9290d4fddae73072855b99184
msgid "``p`` (the ``Pizza`` instance being modified)"
msgstr ""

#: ../../ref/signals.txt:301
#: ../../ref/signals.txt:328
# 2795c51327714e27ae3c10a8b26f2871
# d02dbee0589b4ef1ab631d4891e8e953
msgid "``action``"
msgstr ""

#: ../../ref/signals.txt:301
# 58335f8b6e4c42b89d56cbfd892c8489
msgid "``\"pre_add\"`` (followed by a separate signal with ``\"post_add\"``)"
msgstr ""

#: ../../ref/signals.txt:303
# 7ee0f420a61f409395712edaae87912b
msgid "``False`` (``Pizza`` contains the :class:`~django.db.models.ManyToManyField`, so this call modifies the forward relation)"
msgstr ""

#: ../../ref/signals.txt:307
# 17872476d2da43f9b95efeec767bda3c
msgid "``Topping`` (the class of the objects added to the ``Pizza``)"
msgstr ""

#: ../../ref/signals.txt:310
#: ../../ref/signals.txt:337
# c4fcdcbc3457494a826437f1909fcdf0
# 1529a11ef6764735893bc2703cb4427f
msgid "``pk_set``"
msgstr ""

#: ../../ref/signals.txt:310
# 90c8aa28eb584ee79f4c70d383aa88d7
msgid "``[t.id]`` (since only ``Topping t`` was added to the relation)"
msgstr ""

#: ../../ref/signals.txt:312
#: ../../ref/signals.txt:340
# a0c292ef62a34af0a2da8f33f68b707c
# d29a17a6a47f422d95b948992b2ca9e9
msgid "``\"default\"`` (since the default router sends writes here)"
msgstr ""

#: ../../ref/signals.txt:315
# 12d83d9cd0a7412db5c808a2cca0bff2
msgid "And if we would then do something like this::"
msgstr ""

#: ../../ref/signals.txt:319
# 8f66a89fddab40b1aaa7483887a72819
msgid "the arguments sent to a :data:`m2m_changed` handler would be:"
msgstr ""

#: ../../ref/signals.txt:326
# 1ddd3d2d147340f1b2b9cbf58fbb2799
msgid "``t`` (the ``Topping`` instance being modified)"
msgstr ""

#: ../../ref/signals.txt:328
# 8a898082f3ef4337b018e97566bf28e7
msgid "``\"pre_remove\"`` (followed by a separate signal with ``\"post_remove\"``)"
msgstr ""

#: ../../ref/signals.txt:330
# 89ed780bbbe344e6b8595624d1b5d29f
msgid "``True`` (``Pizza`` contains the :class:`~django.db.models.ManyToManyField`, so this call modifies the reverse relation)"
msgstr ""

#: ../../ref/signals.txt:334
# ec2de6c05525414bb1b54723903cec3b
msgid "``Pizza`` (the class of the objects removed from the ``Topping``)"
msgstr ""

#: ../../ref/signals.txt:337
# 0017723e4c2044ddb81bcf6503e629bd
msgid "``[p.id]`` (since only ``Pizza p`` was removed from the relation)"
msgstr ""

#: ../../ref/signals.txt:344
# 1824010d39774da2ad666c7673090c1a
msgid "class_prepared"
msgstr ""

#: ../../ref/signals.txt:349
# c6b57dc491ba4c43a1069dbcaa75a1fc
msgid "Sent whenever a model class has been \"prepared\" -- that is, once model has been defined and registered with Django's model system. Django uses this signal internally; it's not generally used in third-party applications."
msgstr ""

#: ../../ref/signals.txt:353
# 4e61a68d7ebe4e18954db36fd7c0a8bf
msgid "Arguments that are sent with this signal:"
msgstr ""

#: ../../ref/signals.txt:356
# 4d098fb21077486f8104ec3e0e2d725f
msgid "The model class which was just prepared."
msgstr ""

#: ../../ref/signals.txt:359
# 7c6a8035695a472ea8d7b19913a96922
msgid "Management signals"
msgstr ""

#: ../../ref/signals.txt:361
# 81b62f33724841d8861e22973ec546db
msgid "Signals sent by :doc:`django-admin </ref/django-admin>`."
msgstr ""

#: ../../ref/signals.txt:364
# ab1b4f3f64a34215b86efdfe246c701d
msgid "post_syncdb"
msgstr ""

#: ../../ref/signals.txt:369
# 21e717c3e1294fb1a89487a8a687c523
msgid "Sent by the :djadmin:`syncdb` command after it installs an application, and the :djadmin:`flush` command."
msgstr ""

#: ../../ref/signals.txt:372
# edd30ad115bd4ad0aac5af44ac00e954
msgid "Any handlers that listen to this signal need to be written in a particular place: a ``management`` module in one of your :setting:`INSTALLED_APPS`. If handlers are registered anywhere else they may not be loaded by :djadmin:`syncdb`. It is important that handlers of this signal perform idempotent changes (e.g. no database alterations) as this may cause the :djadmin:`flush` management command to fail if it also ran during the :djadmin:`syncdb` command."
msgstr ""

#: ../../ref/signals.txt:383
# a7897c208aad4dcda508d6d6f2b866ef
msgid "The ``models`` module that was just installed. That is, if :djadmin:`syncdb` just installed an app called ``\"foo.bar.myapp\"``, ``sender`` will be the ``foo.bar.myapp.models`` module."
msgstr ""

#: ../../ref/signals.txt:388
# 68d0534912124b8eb8bde54fbe8a6d60
msgid "Same as ``sender``."
msgstr ""

#: ../../ref/signals.txt:391
# d4f017d4045041629d2c5f955c000783
msgid "A list of the model classes from any app which :djadmin:`syncdb` has created so far."
msgstr ""

#: ../../ref/signals.txt:395
# 9fa88f5fcd3741968d4432d7e7b9e1a4
msgid "Indicates how much information manage.py is printing on screen. See the :djadminopt:`--verbosity` flag for details."
msgstr ""

#: ../../ref/signals.txt:398
# ec86998651a74aa08b1c0e6a58d30b26
msgid "Functions which listen for :data:`post_syncdb` should adjust what they output to the screen based on the value of this argument."
msgstr ""

#: ../../ref/signals.txt:402
# ca5f29a815cb461696a8605486e8f746
msgid "If ``interactive`` is ``True``, it's safe to prompt the user to input things on the command line. If ``interactive`` is ``False``, functions which listen for this signal should not try to prompt for anything."
msgstr ""

#: ../../ref/signals.txt:406
# aefde2eeb0744acb92f9fdf51e302039
msgid "For example, the :mod:`django.contrib.auth` app only prompts to create a superuser when ``interactive`` is ``True``."
msgstr ""

#: ../../ref/signals.txt:409
# a176a60ae6b94712ab1e114dd553fca2
msgid "For example, ``yourapp/management/__init__.py`` could be written like::"
msgstr ""

#: ../../ref/signals.txt:421
# 2e4be05f5cdc47cbad1208946397923c
msgid "Request/response signals"
msgstr ""

#: ../../ref/signals.txt:426
# 8f6da73deea142c5b3610976def149b4
msgid "Signals sent by the core framework when processing a request."
msgstr ""

#: ../../ref/signals.txt:429
# 3277c3b9c7d9483d8179d092c0b3de4d
msgid "request_started"
msgstr ""

#: ../../ref/signals.txt:434
# 298ca6afd86042148df4516f3b1a0933
msgid "Sent when Django begins processing an HTTP request."
msgstr ""

#: ../../ref/signals.txt:439
# 7e63902245dd4b3c86813eb09cbac976
msgid "The handler class -- e.g. ``django.core.handlers.wsgi.WsgiHandler`` -- that handled the request."
msgstr ""

#: ../../ref/signals.txt:443
# a2ddb696d813443786e01a5d36b48e82
msgid "request_finished"
msgstr ""

#: ../../ref/signals.txt:448
# a2a7e6ee8cfe402ba54e870bbba354c3
msgid "Sent when Django finishes processing an HTTP request."
msgstr ""

#: ../../ref/signals.txt:452
# 3da1314c3c724c84a6621b22d30a6102
msgid "When a view returns a :ref:`streaming response <httpresponse-streaming>`, this signal is sent only after the entire response is consumed by the client (strictly speaking, by the WSGI gateway)."
msgstr ""

#: ../../ref/signals.txt:465
#: ../../ref/signals.txt:478
# a067028c724e44b0a936b979f4eb7907
# 7c8274a3b29a44c2b168b31bcfa5465d
msgid "The handler class, as above."
msgstr ""

#: ../../ref/signals.txt:468
# 5c88827fe8394dc38c25817877e3372a
msgid "got_request_exception"
msgstr ""

#: ../../ref/signals.txt:473
# 6037d36e116a430ea28185d7b0dec621
msgid "This signal is sent whenever Django encounters an exception while processing an incoming HTTP request."
msgstr ""

#: ../../ref/signals.txt:481
# 6e1c545ebcfd434393e1cab6118a94cd
msgid "The :class:`~django.http.HttpRequest` object."
msgstr ""

#: ../../ref/signals.txt:484
# 9aba06874487485aab05e74fa99d858c
msgid "Test signals"
msgstr ""

#: ../../ref/signals.txt:489
# 2c4945c7858141b1979897c7740f086e
msgid "Signals only sent when :ref:`running tests <running-tests>`."
msgstr ""

#: ../../ref/signals.txt:492
# f66557d0459444aaa0b0571642c2746d
msgid "setting_changed"
msgstr ""

#: ../../ref/signals.txt:499
# f31b750289fa46aab6cf8de32bda695e
msgid "This signal is sent when the value of a setting is changed through the ``django.test.TestCase.settings()`` context manager or the :func:`django.test.utils.override_settings` decorator/context manager."
msgstr ""

#: ../../ref/signals.txt:503
# b543051f859446e08ebf994d70a38dfd
msgid "It's actually sent twice: when the new value is applied (\"setup\") and when the original value is restored (\"teardown\")."
msgstr ""

#: ../../ref/signals.txt:509
# cad688b81b6d48c5a6c775db72b22a5b
msgid "The settings handler."
msgstr ""

#: ../../ref/signals.txt:512
# d85ad1131b07492380f8700a885a6708
msgid "The name of the setting."
msgstr ""

#: ../../ref/signals.txt:515
# eaa9f8420c8c4c3996c4bc8403b759ac
msgid "The value of the setting after the change. For settings that initially don't exist, in the \"teardown\" phase, ``value`` is ``None``."
msgstr ""

#: ../../ref/signals.txt:519
# 88a3364c1d0842889acc591fdb8fd090
msgid "template_rendered"
msgstr ""

#: ../../ref/signals.txt:524
# e0a56661148f42a79066d0c1834ab6ed
msgid "Sent when the test system renders a template. This signal is not emitted during normal operation of a Django server -- it is only available during testing."
msgstr ""

#: ../../ref/signals.txt:530
# d71c085ce1bf471d99f9afe3c6974d28
msgid "The :class:`~django.template.Template` object which was rendered."
msgstr ""

#: ../../ref/signals.txt:533
# 012d1afaaf6740dba31a2b28473569a2
msgid "Same as sender"
msgstr ""

#: ../../ref/signals.txt:536
# 944983fb4e394728affc24b1d69f7d6b
msgid "The :class:`~django.template.Context` with which the template was rendered."
msgstr ""

#: ../../ref/signals.txt:540
# 1db3248869434be78f31c26c7fb64b90
msgid "Database Wrappers"
msgstr ""

#: ../../ref/signals.txt:545
# a694f51136984289868b3b5a9ca51c8a
msgid "Signals sent by the database wrapper when a database connection is initiated."
msgstr ""

#: ../../ref/signals.txt:549
# ac9a624def164f3e9605ee6fe9118f88
msgid "connection_created"
msgstr ""

#: ../../ref/signals.txt:554
# ecd14dd5fcda4929a35e5100ce557fec
msgid "Sent when the database wrapper makes the initial connection to the database.  This is particularly useful if you'd like to send any post connection commands to the SQL backend."
msgstr ""

#: ../../ref/signals.txt:561
# bf1833120f764fafbfd84b6485429476
msgid "The database wrapper class -- i.e. ``django.db.backends.postgresql_psycopg2.DatabaseWrapper`` or ``django.db.backends.mysql.DatabaseWrapper``, etc."
msgstr ""

#: ../../ref/signals.txt:566
# 0634f012114a40428105eaae0bad34ba
msgid "The database connection that was opened. This can be used in a multiple-database configuration to differentiate connection signals from different databases."
msgstr ""

#: ../../ref/template-response.txt:3
# c420e080badb4f86b696a198dfa681aa
msgid "TemplateResponse and SimpleTemplateResponse"
msgstr ""

#: ../../ref/template-response.txt:8
# 6016a76e2c7b4b7795c6fab0c86e7557
msgid "Standard :class:`~django.http.HttpResponse` objects are static structures. They are provided with a block of pre-rendered content at time of construction, and while that content can be modified, it isn't in a form that makes it easy to perform modifications."
msgstr ""

#: ../../ref/template-response.txt:13
# 6d1a85b1e0c14b44a93d09f1b2427384
msgid "However, it can sometimes be beneficial to allow decorators or middleware to modify a response *after* it has been constructed by the view. For example, you may want to change the template that is used, or put additional data into the context."
msgstr ""

#: ../../ref/template-response.txt:18
# d05aa62e94ea47eea9dcfc8ebcb78b99
msgid "TemplateResponse provides a way to do just that. Unlike basic :class:`~django.http.HttpResponse` objects, TemplateResponse objects retain the details of the template and context that was provided by the view to compute the response. The final output of the response is not computed until it is needed, later in the response process."
msgstr ""

#: ../../ref/template-response.txt:25
# 2e2af0e2276e4497b64cd042bbeaaeda
msgid "SimpleTemplateResponse objects"
msgstr ""

#: ../../ref/template-response.txt:34
# a9b1b4bc57c945b88d7cd71d785c0a58
msgid "The name of the template to be rendered. Accepts a :class:`~django.template.Template` object, a path to a template or list of template paths."
msgstr ""

#: ../../ref/template-response.txt:38
# b1a4b0c923144f1798c70be18abf332f
msgid "Example: ``['foo.html', 'path/to/bar.html']``"
msgstr ""

#: ../../ref/template-response.txt:42
# 8b73314a452b41a69e02845f7f98b3c3
msgid "The context data to be used when rendering the template. It can be a dictionary or a context object."
msgstr ""

#: ../../ref/template-response.txt:45
# feba00714fbe42b989ec3c0060209e08
msgid "Example: ``{'foo': 123}``"
msgstr ""

#: ../../ref/template-response.txt:49
# 3f93e98a23324df68b090a1ec53189e8
msgid "The current rendered value of the response content, using the current template and context data."
msgstr ""

#: ../../ref/template-response.txt:54
# 1dbfb78541d144eeb358d8296a44299f
msgid "A boolean indicating whether the response content has been rendered."
msgstr ""

#: ../../ref/template-response.txt:61
# 02136b196e1f4c3faf0406cbfeeabf63
msgid "Instantiates a :class:`~django.template.response.SimpleTemplateResponse` object with the given template, context, content type, and HTTP status."
msgstr ""

#: ../../ref/template-response.txt:66
#: ../../ref/template-response.txt:159
# df2d41c0ddef442ebc1e4e080f2a70c8
# bc840432370243e0ad1a44ee65c930c2
msgid "The full name of a template, or a sequence of template names. :class:`~django.template.Template` instances can also be used."
msgstr ""

#: ../../ref/template-response.txt:70
#: ../../ref/template-response.txt:163
# 136cf820c1d749628f92de59aba252e9
# 4e7f4e211ad9419f8ba845c134bbb667
msgid "A dictionary of values to add to the template context. By default, this is an empty dictionary. :class:`~django.template.Context` objects are also accepted as ``context`` values."
msgstr ""

#: ../../ref/template-response.txt:75
#: ../../ref/template-response.txt:168
# b16da182033d405cb3bfd563f16880d1
# 8c15ab16decb434ab4b784ef699e4135
msgid "The HTTP Status code for the response."
msgstr ""

#: ../../ref/template-response.txt:77
#: ../../ref/template-response.txt:170
# 9d86526e72754d80909872f239c3fb12
# d8e7d972a8134d20a5808cb5e074f846
msgid "``content_type``"
msgstr ""

#: ../../ref/template-response.txt:81
#: ../../ref/template-response.txt:174
# 8731e24b098b429cac59831aeaf1ba24
# 4a4b9ffc16fb47d0a0405a006cada653
msgid "Historically, this parameter was only called ``mimetype`` (now deprecated), but since this is actually the value included in the HTTP ``Content-Type`` header, it can also include the character set encoding, which makes it more than just a MIME type specification. If ``mimetype`` is specified (not ``None``), that value is used. Otherwise, ``content_type`` is used. If neither is given, :setting:`DEFAULT_CONTENT_TYPE` is used."
msgstr ""

#: ../../ref/template-response.txt:92
# 4d28a01d43ae4eef92f5289459fd796e
msgid "Converts context data into a context instance that can be used for rendering a template. Accepts a dictionary of context data or a context object. Returns a :class:`~django.template.Context` instance containing the provided data."
msgstr ""

#: ../../ref/template-response.txt:97
# feba480251ed483b8226a7ae3c0bd00e
msgid "Override this method in order to customize context instantiation."
msgstr ""

#: ../../ref/template-response.txt:101
# ec87ce5da5214f158936650c6dbbaca7
msgid "Resolves the template instance to use for rendering. Accepts a path of a template to use, or a sequence of template paths. :class:`~django.template.Template` instances may also be provided. Returns the :class:`~django.template.Template` instance to be rendered."
msgstr ""

#: ../../ref/template-response.txt:107
# eaa1762ee7034df89685cb89757962ab
msgid "Override this method in order to customize template rendering."
msgstr ""

#: ../../ref/template-response.txt:111
# 01b4f1d9c396449ca8b797f1e59915b9
msgid "Add a callback that will be invoked after rendering has taken place. This hook can be used to defer certain processing operations (such as caching) until after rendering has occurred."
msgstr ""

#: ../../ref/template-response.txt:115
# 72153b95452048d8a46f3c780417e249
msgid "If the :class:`~django.template.response.SimpleTemplateResponse` has already been rendered, the callback will be invoked immediately."
msgstr ""

#: ../../ref/template-response.txt:119
# f17e3cdd078144e48a0d26c81b834cbe
msgid "When called, callbacks will be passed a single argument -- the rendered :class:`~django.template.response.SimpleTemplateResponse` instance."
msgstr ""

#: ../../ref/template-response.txt:123
# c6cf9111f67a447fa339966c888027f0
msgid "If the callback returns a value that is not ``None``, this will be used as the response instead of the original response object (and will be passed to the next post rendering callback etc.)"
msgstr ""

#: ../../ref/template-response.txt:129
# 7915bbba86ac4adc9e1f1edaf2fe73f7
msgid "Sets ``response.content`` to the result obtained by :attr:`SimpleTemplateResponse.rendered_content`, runs all post-rendering callbacks, and returns the resulting response object."
msgstr ""

#: ../../ref/template-response.txt:133
# 0bcd4c18507147d48338c6c3526422ea
msgid "``render()`` will only have an effect the first time it is called. On subsequent calls, it will return the result obtained from the first call."
msgstr ""

#: ../../ref/template-response.txt:138
# ef614ea482dd41cc8c6d6fca6491787a
msgid "TemplateResponse objects"
msgstr ""

#: ../../ref/template-response.txt:142
# aa0b8f3827ab43409c2acfd45cd542bc
msgid "TemplateResponse is a subclass of :class:`~django.template.response.SimpleTemplateResponse` that uses a :class:`~django.template.RequestContext` instead of a :class:`~django.template.Context`."
msgstr ""

#: ../../ref/template-response.txt:152
# 27e8df622487436183209f94fa62b944
msgid "Instantiates an ``TemplateResponse`` object with the given template, context, MIME type and HTTP status."
msgstr ""

#: ../../ref/template-response.txt:156
# c3ee4c271fd84265af3fd3a04ca146e4
msgid "An :class:`~django.http.HttpRequest` instance."
msgstr ""

#: ../../ref/template-response.txt:183
# 46e62b743d11489fac985952d6c2993a
msgid "A hint indicating which application contains the current view. See the :ref:`namespaced URL resolution strategy <topics-http-reversing-url-namespaces>` for more information."
msgstr ""

#: ../../ref/template-response.txt:189
# a27546d1879d4e6ebae1f86df8566341
msgid "The rendering process"
msgstr ""

#: ../../ref/template-response.txt:191
# e4261c0a008b49bbb961aaaaf84cb948
msgid "Before a :class:`~django.template.response.TemplateResponse` instance can be returned to the client, it must be rendered. The rendering process takes the intermediate representation of template and context, and turns it into the final byte stream that can be served to the client."
msgstr ""

#: ../../ref/template-response.txt:196
# 47d9563d7fa445a89d4d33bd7d79447c
msgid "There are three circumstances under which a ``TemplateResponse`` will be rendered:"
msgstr ""

#: ../../ref/template-response.txt:199
# 55250bcc5f0140fba071b3be061b7db0
msgid "When the ``TemplateResponse`` instance is explicitly rendered, using the :meth:`SimpleTemplateResponse.render()` method."
msgstr ""

#: ../../ref/template-response.txt:202
# 9d432da1320f46718777d4e771ec451a
msgid "When the content of the response is explicitly set by assigning ``response.content``."
msgstr ""

#: ../../ref/template-response.txt:205
# 701a769541ac4b3f9a831e4e5dead8fd
msgid "After passing through template response middleware, but before passing through response middleware."
msgstr ""

#: ../../ref/template-response.txt:208
# dc8642f5de97413287105cf3c2a34a98
msgid "A ``TemplateResponse`` can only be rendered once. The first call to :meth:`SimpleTemplateResponse.render` sets the content of the response; subsequent rendering calls do not change the response content."
msgstr ""

#: ../../ref/template-response.txt:212
# 7f1d6ca9cc894f9f98874e8c5ec7e167
msgid "However, when ``response.content`` is explicitly assigned, the change is always applied. If you want to force the content to be re-rendered, you can re-evaluate the rendered content, and assign the content of the response manually::"
msgstr ""

#: ../../ref/template-response.txt:235
# 0bf7043500e545f3ae1753080bc508db
msgid "Post-render callbacks"
msgstr ""

#: ../../ref/template-response.txt:237
# 4f3646ff4d5d47aaa7650d4744a2c472
msgid "Some operations -- such as caching -- cannot be performed on an unrendered template. They must be performed on a fully complete and rendered response."
msgstr ""

#: ../../ref/template-response.txt:241
# 795d28bb39c448e8871d6fefb3a928fd
msgid "If you're using middleware, the solution is easy. Middleware provides multiple opportunities to process a response on exit from a view. If you put behavior in the Response middleware is guaranteed to execute after template rendering has taken place."
msgstr ""

#: ../../ref/template-response.txt:246
# 32278bc0f80b4068a590ee7b3a833527
msgid "However, if you're using a decorator, the same opportunities do not exist. Any behavior defined in a decorator is handled immediately."
msgstr ""

#: ../../ref/template-response.txt:249
# 363b415ea932440292dbe91a575a8c97
msgid "To compensate for this (and any other analogous use cases), :class:`TemplateResponse` allows you to register callbacks that will be invoked when rendering has completed. Using this callback, you can defer critical processing until a point where you can guarantee that rendered content will be available."
msgstr ""

#: ../../ref/template-response.txt:255
# 3c21898944354384b45c12fc8100c275
msgid "To define a post-render callback, just define a function that takes a single argument -- response -- and register that function with the template response::"
msgstr ""

#: ../../ref/template-response.txt:271
# b8b8e2870fc044418bbc98a0fd3e7241
msgid "``my_render_callback()`` will be invoked after the ``mytemplate.html`` has been rendered, and will be provided the fully rendered :class:`TemplateResponse` instance as an argument."
msgstr ""

#: ../../ref/template-response.txt:275
# 60a177cae6ed45c7b3d77bb340c45417
msgid "If the template has already been rendered, the callback will be invoked immediately."
msgstr ""

#: ../../ref/template-response.txt:279
# 91981745abf546cab33040cc1b737c79
msgid "Using TemplateResponse and SimpleTemplateResponse"
msgstr ""

#: ../../ref/template-response.txt:281
# bba77951a1b54fae90b0f25690a5e766
msgid "A TemplateResponse object can be used anywhere that a normal HttpResponse can be used. It can also be used as an alternative to calling :func:`~django.shortcuts.render_to_response()`."
msgstr ""

#: ../../ref/template-response.txt:285
# 648ab3b7a39244cd95cf2c90f06044cd
msgid "For example, the following simple view returns a :class:`TemplateResponse()` with a simple template, and a context containing a queryset::"
msgstr ""

#: ../../ref/templates/api.txt:3
# bff1163d46b34c61b2dfe349b43abb0f
msgid "The Django template language: For Python programmers"
msgstr ""

#: ../../ref/templates/api.txt:5
# cb035de4169340efa3d5d8ba83984d2e
msgid "This document explains the Django template system from a technical perspective -- how it works and how to extend it. If you're just looking for reference on the language syntax, see :doc:`/topics/templates`."
msgstr ""

#: ../../ref/templates/api.txt:9
# 7f7cf9ebaa1e43fba513bb334f740e97
msgid "If you're looking to use the Django template system as part of another application -- i.e., without the rest of the framework -- make sure to read the `configuration`_ section later in this document."
msgstr ""

#: ../../ref/templates/api.txt:18
# 75cc2597b78845ddb493e7ad40ba9297
msgid "A **template** is a text document, or a normal Python string, that is marked-up using the Django template language. A template can contain **block tags** or **variables**."
msgstr ""

#: ../../ref/templates/api.txt:22
# a31dffecf073447f9c4cf7213cbd369d
msgid "A **block tag** is a symbol within a template that does something."
msgstr ""

#: ../../ref/templates/api.txt:24
# fa6389f02f72444b89626f30f7199235
msgid "This definition is deliberately vague. For example, a block tag can output content, serve as a control structure (an \"if\" statement or \"for\" loop), grab content from a database or enable access to other template tags."
msgstr ""

#: ../../ref/templates/api.txt:28
# 0741eaaf3cf34a5da5b9a472195a9681
msgid "Block tags are surrounded by ``\"{%\"`` and ``\"%}\"``."
msgstr ""

#: ../../ref/templates/api.txt:30
# 96fb0af121f54cdd803ebcb179bfba21
msgid "Example template with block tags:"
msgstr ""

#: ../../ref/templates/api.txt:36
# f7594ff0ecdf41c4b6fe2d6c4341a387
msgid "A **variable** is a symbol within a template that outputs a value."
msgstr ""

#: ../../ref/templates/api.txt:38
# 977faed0c8d24bca963f8c24885f7a4c
msgid "Variable tags are surrounded by ``\"{{\"`` and ``\"}}\"``."
msgstr ""

#: ../../ref/templates/api.txt:40
# ddc3e5a19f704797bc8f2bd58f95d0da
msgid "Example template with variables:"
msgstr ""

#: ../../ref/templates/api.txt:46
# 1b161e15cdc041fab934f2dc4dbbf9d1
msgid "A **context** is a \"variable name\" -> \"variable value\" mapping that is passed to a template."
msgstr ""

#: ../../ref/templates/api.txt:49
# 11a893b33d1c4da4a59a647e12d3873a
msgid "A template **renders** a context by replacing the variable \"holes\" with values from the context and executing all block tags."
msgstr ""

#: ../../ref/templates/api.txt:53
# 0416e6a00cc54cf09eb73b8d4e0d1463
msgid "Using the template system"
msgstr ""

#: ../../ref/templates/api.txt:57
# 171b456ce14b4eaca454baab5ed31fe5
msgid "Using the template system in Python is a two-step process:"
msgstr ""

#: ../../ref/templates/api.txt:59
# 0f63687cb02346ee941162501736707c
msgid "First, you compile the raw template code into a ``Template`` object."
msgstr ""

#: ../../ref/templates/api.txt:60
# b034020e941541b59334405170c8797e
msgid "Then, you call the ``render()`` method of the ``Template`` object with a given context."
msgstr ""

#: ../../ref/templates/api.txt:64
# 10e366e38b40434d8d789abfbee96180
msgid "Compiling a string"
msgstr ""

#: ../../ref/templates/api.txt:66
# febb09a65a1d4c76ad2eedda1b1f954d
msgid "The easiest way to create a ``Template`` object is by instantiating it directly. The class lives at :class:`django.template.Template`. The constructor takes one argument -- the raw template code::"
msgstr ""

#: ../../ref/templates/api.txt:77
# a6c0c3905dd541d2a7aec05097312faa
msgid "The system only parses your raw template code once -- when you create the ``Template`` object. From then on, it's stored internally as a \"node\" structure for performance."
msgstr ""

#: ../../ref/templates/api.txt:81
# 169423c633d04137930a4a5480340ed8
msgid "Even the parsing itself is quite fast. Most of the parsing happens via a single call to a single, short, regular expression."
msgstr ""

#: ../../ref/templates/api.txt:85
# df021958ab6844189792982b17051af9
msgid "Rendering a context"
msgstr ""

#: ../../ref/templates/api.txt:89
# 497c4c6bf64840e4a11b0a0602889e99
msgid "Once you have a compiled ``Template`` object, you can render a context -- or multiple contexts -- with it. The ``Context`` class lives at :class:`django.template.Context`, and the constructor takes two (optional) arguments:"
msgstr ""

#: ../../ref/templates/api.txt:94
# dd8d587f102e41fd828ac1b964642b98
msgid "A dictionary mapping variable names to variable values."
msgstr ""

#: ../../ref/templates/api.txt:96
# 114b10d727a744eeaf999db6aeab048d
msgid "The name of the current application. This application name is used to help :ref:`resolve namespaced URLs<topics-http-reversing-url-namespaces>`. If you're not using namespaced URLs, you can ignore this argument."
msgstr ""

#: ../../ref/templates/api.txt:100
# 241fa26dba224ad69427b68454180ada
msgid "Call the ``Template`` object's ``render()`` method with the context to \"fill\" the template::"
msgstr ""

#: ../../ref/templates/api.txt:115
# 0be3552f4c7b4eeb85fb0deb29a35fd1
msgid "Variables and lookups"
msgstr ""

#: ../../ref/templates/api.txt:117
# 1d3ac795d513404381d43c494ad336f7
msgid "Variable names must consist of any letter (A-Z), any digit (0-9), an underscore (but they must not start with an underscore) or a dot."
msgstr ""

#: ../../ref/templates/api.txt:120
# cf68077128254d58a772891c2eed6981
msgid "Dots have a special meaning in template rendering. A dot in a variable name signifies a **lookup**. Specifically, when the template system encounters a dot in a variable name, it tries the following lookups, in this order:"
msgstr ""

#: ../../ref/templates/api.txt:124
# a03fc0f0bfbb47758259bd38df8c5214
msgid "Dictionary lookup. Example: ``foo[\"bar\"]``"
msgstr ""

#: ../../ref/templates/api.txt:125
# bfa6470f08e3403c80369917a7e2f2be
msgid "Attribute lookup. Example: ``foo.bar``"
msgstr ""

#: ../../ref/templates/api.txt:126
# c767720f7a7b4f8ab35e6554d7d44397
msgid "List-index lookup. Example: ``foo[bar]``"
msgstr ""

#: ../../ref/templates/api.txt:128
# fa97e8e0adc54eda9ae415da87e94502
msgid "Note that \"bar\" in a template expression like ``{{ foo.bar }}`` will be interpreted as a literal string and not using the value of the variable \"bar\", if one exists in the template context."
msgstr ""

#: ../../ref/templates/api.txt:132
# f6c886d948ce4468bc2d9687fdfe5e60
msgid "The template system uses the first lookup type that works. It's short-circuit logic. Here are a few examples::"
msgstr ""

#: ../../ref/templates/api.txt:153
# 9ecff84c440b4ad49b105ec13dc9efa8
msgid "If any part of the variable is callable, the template system will try calling it. Example::"
msgstr ""

#: ../../ref/templates/api.txt:163
# 635f702f6ea9440f8ff7da46cf9b68f4
msgid "Callable variables are slightly more complex than variables which only require straight lookups. Here are some things to keep in mind:"
msgstr ""

#: ../../ref/templates/api.txt:166
# 9e07010a1d314ef5b4a4d8676e51348f
msgid "If the variable raises an exception when called, the exception will be propagated, unless the exception has an attribute ``silent_variable_failure`` whose value is ``True``. If the exception *does* have a ``silent_variable_failure`` attribute whose value is ``True``, the variable will render as an empty string. Example::"
msgstr ""

#: ../../ref/templates/api.txt:191
# 6f63235ae4d8422bac2f6b09a7414b9f
msgid "Note that :exc:`django.core.exceptions.ObjectDoesNotExist`, which is the base class for all Django database API ``DoesNotExist`` exceptions, has ``silent_variable_failure = True``. So if you're using Django templates with Django model objects, any ``DoesNotExist`` exception will fail silently."
msgstr ""

#: ../../ref/templates/api.txt:197
# a8029b3af03940d3a4d705378af0db34
msgid "A variable can only be called if it has no required arguments. Otherwise, the system will return an empty string."
msgstr ""

#: ../../ref/templates/api.txt:202
# 7d1d8cfcd4c946ce8cf93e037aa568d4
msgid "Obviously, there can be side effects when calling some variables, and it'd be either foolish or a security hole to allow the template system to access them."
msgstr ""

#: ../../ref/templates/api.txt:206
# b2572d0cb9e04b0393861e63840dcc5e
msgid "A good example is the :meth:`~django.db.models.Model.delete` method on each Django model object. The template system shouldn't be allowed to do something like this::"
msgstr ""

#: ../../ref/templates/api.txt:212
# 3fedd39a1ab14bdb8b07a4bbdbebef98
msgid "To prevent this, set an ``alters_data`` attribute on the callable variable. The template system won't call a variable if it has ``alters_data=True`` set, and will instead replace the variable with :setting:`TEMPLATE_STRING_IF_INVALID`, unconditionally.  The dynamically-generated :meth:`~django.db.models.Model.delete` and :meth:`~django.db.models.Model.save` methods on Django model objects get ``alters_data=True`` automatically. Example::"
msgstr ""

#: ../../ref/templates/api.txt:235
# 8f3a3fd8e7bb4216bbb69f558f5604bc
msgid "How invalid variables are handled"
msgstr ""

#: ../../ref/templates/api.txt:237
# f20522f92c3241ee9d85cd637f6c83f3
msgid "Generally, if a variable doesn't exist, the template system inserts the value of the :setting:`TEMPLATE_STRING_IF_INVALID` setting, which is set to ``''`` (the empty string) by default."
msgstr ""

#: ../../ref/templates/api.txt:241
# 4d8e4e72bbef4d7ca0d10d821be7e155
msgid "Filters that are applied to an invalid variable will only be applied if :setting:`TEMPLATE_STRING_IF_INVALID` is set to ``''`` (the empty string). If :setting:`TEMPLATE_STRING_IF_INVALID` is set to any other value, variable filters will be ignored."
msgstr ""

#: ../../ref/templates/api.txt:246
# 854c981e09a64adf85e1d5c8f5f594fa
msgid "This behavior is slightly different for the ``if``, ``for`` and ``regroup`` template tags. If an invalid variable is provided to one of these template tags, the variable will be interpreted as ``None``. Filters are always applied to invalid variables within these template tags."
msgstr ""

#: ../../ref/templates/api.txt:251
# 9d00ca91f3cf451986fb19a8b7fc3f2c
msgid "If :setting:`TEMPLATE_STRING_IF_INVALID` contains a ``'%s'``, the format marker will be replaced with the name of the invalid variable."
msgstr ""

#: ../../ref/templates/api.txt:256
# 792829b40ec2415eb02aaf039877ecae
msgid "While :setting:`TEMPLATE_STRING_IF_INVALID` can be a useful debugging tool, it is a bad idea to turn it on as a 'development default'."
msgstr ""

#: ../../ref/templates/api.txt:259
# 4b7469520c074089912e1f9a088d108b
msgid "Many templates, including those in the Admin site, rely upon the silence of the template system when a non-existent variable is encountered. If you assign a value other than ``''`` to :setting:`TEMPLATE_STRING_IF_INVALID`, you will experience rendering problems with these templates and sites."
msgstr ""

#: ../../ref/templates/api.txt:265
# 22d284b113ae4ea0bb11e3d469e9c84e
msgid "Generally, :setting:`TEMPLATE_STRING_IF_INVALID` should only be enabled in order to debug a specific template problem, then cleared once debugging is complete."
msgstr ""

#: ../../ref/templates/api.txt:270
# a3f6fe0807c3437b8c10b3e0caa7c6b5
msgid "Builtin variables"
msgstr ""

#: ../../ref/templates/api.txt:272
# b76e631ee3fa429dbb15567ffef4ae3d
msgid "Every context contains ``True``, ``False`` and ``None``. As you would expect, these variables resolve to the corresponding Python objects."
msgstr ""

#: ../../ref/templates/api.txt:280
# 487b641a5c054744ae9066d6b2ab596d
msgid "Playing with Context objects"
msgstr ""

#: ../../ref/templates/api.txt:284
# e1e66ca147954ed39ebbb1e5fade7fe4
msgid "Most of the time, you'll instantiate ``Context`` objects by passing in a fully-populated dictionary to ``Context()``. But you can add and delete items from a ``Context`` object once it's been instantiated, too, using standard dictionary syntax::"
msgstr ""

#: ../../ref/templates/api.txt:303
# 6a19f2d20b7d4a3a97c3809018ae1471
msgid "A ``Context`` object is a stack. That is, you can ``push()`` and ``pop()`` it. If you ``pop()`` too much, it'll raise ``django.template.ContextPopException``::"
msgstr ""

#: ../../ref/templates/api.txt:326
# ab84358533d74128a716a0c0b6765ac7
msgid "In addition to ``push()`` and ``pop()``, the ``Context`` object also defines an ``update()`` method. This works like ``push()`` but takes a dictionary as an argument and pushes that dictionary onto the stack instead of an empty one."
msgstr ""

#: ../../ref/templates/api.txt:342
# 9351e9654ed5467c806b8523779762c7
msgid "Using a ``Context`` as a stack comes in handy in some custom template tags, as you'll see below."
msgstr ""

#: ../../ref/templates/api.txt:348
# 5e7bf50f4816432486c2ac400fd5866e
msgid "Subclassing Context: RequestContext"
msgstr ""

#: ../../ref/templates/api.txt:352
# e017fe80307d49ab85479a0deb1ecbd7
msgid "Django comes with a special ``Context`` class, ``django.template.RequestContext``, that acts slightly differently than the normal ``django.template.Context``. The first difference is that it takes an :class:`~django.http.HttpRequest` as its first argument. For example::"
msgstr ""

#: ../../ref/templates/api.txt:361
# 1c0c87f1691c4ccdb86746e029187394
msgid "The second difference is that it automatically populates the context with a few variables, according to your :setting:`TEMPLATE_CONTEXT_PROCESSORS` setting."
msgstr ""

#: ../../ref/templates/api.txt:364
# f40e5f66771f400887f4692c0f5a4b85
msgid "The :setting:`TEMPLATE_CONTEXT_PROCESSORS` setting is a tuple of callables -- called **context processors** -- that take a request object as their argument and return a dictionary of items to be merged into the context. By default, :setting:`TEMPLATE_CONTEXT_PROCESSORS` is set to::"
msgstr ""

#: ../../ref/templates/api.txt:377
# 3427cbc806cd4822b6dc235d673b4e5d
msgid "In addition to these, ``RequestContext`` always uses ``django.core.context_processors.csrf``.  This is a security related context processor required by the admin and other contrib apps, and, in case of accidental misconfiguration, it is deliberately hardcoded in and cannot be turned off by the :setting:`TEMPLATE_CONTEXT_PROCESSORS` setting."
msgstr ""

#: ../../ref/templates/api.txt:383
# b9774b914a084e629164407d8613bdb5
msgid "Each processor is applied in order. That means, if one processor adds a variable to the context and a second processor adds a variable with the same name, the second will override the first. The default processors are explained below."
msgstr ""

#: ../../ref/templates/api.txt:390
# d875b6b38b394288a5255b0c97571662
msgid "When you use ``RequestContext``, the variables you supply directly are added first, followed any variables supplied by context processors. This means that a context processor may overwrite a variable you've supplied, so take care to avoid variable names which overlap with those supplied by your context processors."
msgstr ""

#: ../../ref/templates/api.txt:396
# 0b6586a6116d4fa2b0a45e4a21bd8b0c
msgid "Also, you can give ``RequestContext`` a list of additional processors, using the optional, third positional argument, ``processors``. In this example, the ``RequestContext`` instance gets a ``ip_address`` variable::"
msgstr ""

#: ../../ref/templates/api.txt:412
# 979e38f719a64857a8cc47d195d51c07
msgid "If you're using Django's :func:`~django.shortcuts.render_to_response()` shortcut to populate a template with the contents of a dictionary, your template will be passed a ``Context`` instance by default (not a ``RequestContext``). To use a ``RequestContext`` in your template rendering, pass an optional third argument to :func:`~django.shortcuts.render_to_response()`: a ``RequestContext`` instance. Your code might look like this::"
msgstr ""

#: ../../ref/templates/api.txt:426
# e7d3a6f0ecd146a682d3041b264a2560
msgid "Alternatively, use the :meth:`~django.shortcuts.render()` shortcut which is the same as a call to :func:`~django.shortcuts.render_to_response()` with a context_instance argument that forces the use of a ``RequestContext``."
msgstr ""

#: ../../ref/templates/api.txt:430
# bae00908ca874031b137a8d07911be14
msgid "Here's what each of the default processors does:"
msgstr ""

#: ../../ref/templates/api.txt:433
# 400d0690c1ee41b7bbf4e6d25625b619
msgid "django.contrib.auth.context_processors.auth"
msgstr ""

#: ../../ref/templates/api.txt:435
# 42c18287ec9e40909ecace8f7fd4e857
msgid "If :setting:`TEMPLATE_CONTEXT_PROCESSORS` contains this processor, every ``RequestContext`` will contain these variables:"
msgstr ""

#: ../../ref/templates/api.txt:438
# 0e16dfd468884b229508d6966c8d482a
msgid "``user`` -- An ``auth.User`` instance representing the currently logged-in user (or an ``AnonymousUser`` instance, if the client isn't logged in)."
msgstr ""

#: ../../ref/templates/api.txt:442
# ff8ba1eb52a74311999af7e90bf6161f
msgid "``perms`` -- An instance of ``django.contrib.auth.context_processors.PermWrapper``, representing the permissions that the currently logged-in user has."
msgstr ""

#: ../../ref/templates/api.txt:447
# aef5011d5b3b4f939132e9d8b0f42089
msgid "django.core.context_processors.debug"
msgstr ""

#: ../../ref/templates/api.txt:449
# 09dc4c710fad484e841df9d34104db25
msgid "If :setting:`TEMPLATE_CONTEXT_PROCESSORS` contains this processor, every ``RequestContext`` will contain these two variables -- but only if your :setting:`DEBUG` setting is set to ``True`` and the request's IP address (``request.META['REMOTE_ADDR']``) is in the :setting:`INTERNAL_IPS` setting:"
msgstr ""

#: ../../ref/templates/api.txt:454
# e81fcb836b394cf6bcec396313e0f3c5
msgid "``debug`` -- ``True``. You can use this in templates to test whether you're in :setting:`DEBUG` mode."
msgstr ""

#: ../../ref/templates/api.txt:456
# 7d1b916b69334d81b53038a3c627c30d
msgid "``sql_queries`` -- A list of ``{'sql': ..., 'time': ...}`` dictionaries, representing every SQL query that has happened so far during the request and how long it took. The list is in order by query."
msgstr ""

#: ../../ref/templates/api.txt:461
# 849500b881f24c33b24b6b16452f8f2c
msgid "django.core.context_processors.i18n"
msgstr ""

#: ../../ref/templates/api.txt:463
# 9cd99251d9f645e8b6092f154338772a
msgid "If :setting:`TEMPLATE_CONTEXT_PROCESSORS` contains this processor, every ``RequestContext`` will contain these two variables:"
msgstr ""

#: ../../ref/templates/api.txt:466
# d6220cf7dffb4e54a54bc222a777756e
msgid "``LANGUAGES`` -- The value of the :setting:`LANGUAGES` setting."
msgstr ""

#: ../../ref/templates/api.txt:467
# fc356be9f75b464b927f8c2f26e12f9c
msgid "``LANGUAGE_CODE`` -- ``request.LANGUAGE_CODE``, if it exists. Otherwise, the value of the :setting:`LANGUAGE_CODE` setting."
msgstr ""

#: ../../ref/templates/api.txt:470
# bfcc2fa34668450d95ad82de786f7e64
msgid "See :doc:`/topics/i18n/index` for more."
msgstr ""

#: ../../ref/templates/api.txt:473
# 414e32ace947423fac997d041ac4987c
msgid "django.core.context_processors.media"
msgstr ""

#: ../../ref/templates/api.txt:475
# 89785eb2ec344894ab506fe213080e6e
msgid "If :setting:`TEMPLATE_CONTEXT_PROCESSORS` contains this processor, every ``RequestContext`` will contain a variable ``MEDIA_URL``, providing the value of the :setting:`MEDIA_URL` setting."
msgstr ""

#: ../../ref/templates/api.txt:480
# cdcc4cd62631422ea635ab310114eaf3
msgid "django.core.context_processors.static"
msgstr ""

#: ../../ref/templates/api.txt:484
# 69cd271fb79f4ed59f95a4b00be76d06
msgid "If :setting:`TEMPLATE_CONTEXT_PROCESSORS` contains this processor, every ``RequestContext`` will contain a variable ``STATIC_URL``, providing the value of the :setting:`STATIC_URL` setting."
msgstr ""

#: ../../ref/templates/api.txt:489
# f50aaf6007284c948bb4af3fb2739748
msgid "django.core.context_processors.csrf"
msgstr ""

#: ../../ref/templates/api.txt:491
# 7851b7766a4640f9ab9da08ea39ea2dd
msgid "This processor adds a token that is needed by the :ttag:`csrf_token` template tag for protection against :doc:`Cross Site Request Forgeries </ref/contrib/csrf>`."
msgstr ""

#: ../../ref/templates/api.txt:496
# f69cc9cd910345829207e95b037f9d7a
msgid "django.core.context_processors.request"
msgstr ""

#: ../../ref/templates/api.txt:498
# 86ce4842c8984efc8b10df9d85f732f0
msgid "If :setting:`TEMPLATE_CONTEXT_PROCESSORS` contains this processor, every ``RequestContext`` will contain a variable ``request``, which is the current :class:`~django.http.HttpRequest`. Note that this processor is not enabled by default; you'll have to activate it."
msgstr ""

#: ../../ref/templates/api.txt:504
# b59ff3c8a3ab4e7188e1805e1df4e540
msgid "django.contrib.messages.context_processors.messages"
msgstr ""

#: ../../ref/templates/api.txt:506
# a62d7a1fe4af44bebcaf7b811d7c020f
msgid "If :setting:`TEMPLATE_CONTEXT_PROCESSORS` contains this processor, every ``RequestContext`` will contain a single additional variable:"
msgstr ""

#: ../../ref/templates/api.txt:509
# be73a39b41a64ff083285c7cef0205ed
msgid "``messages`` -- A list of messages (as strings) that have been set via the user model (using ``user.message_set.create``) or through the :doc:`messages framework </ref/contrib/messages>`."
msgstr ""

#: ../../ref/templates/api.txt:514
# dad85d39020f4e9b894cd175fe8f34b2
msgid "Writing your own context processors"
msgstr ""

#: ../../ref/templates/api.txt:516
# eed88d47a43f4299aa88482b5e2d98a7
msgid "A context processor has a very simple interface: It's just a Python function that takes one argument, an :class:`~django.http.HttpRequest` object, and returns a dictionary that gets added to the template context. Each context processor *must* return a dictionary."
msgstr ""

#: ../../ref/templates/api.txt:521
# 53349bfcf78741dfbf1d505eea759ec4
msgid "Custom context processors can live anywhere in your code base. All Django cares about is that your custom context processors are pointed-to by your :setting:`TEMPLATE_CONTEXT_PROCESSORS` setting."
msgstr ""

#: ../../ref/templates/api.txt:526
# e1b5149f2786482f9d73abae11f4aecd
msgid "Loading templates"
msgstr ""

#: ../../ref/templates/api.txt:528
# 342bc88465ba41a28513163961835de2
msgid "Generally, you'll store templates in files on your filesystem rather than using the low-level ``Template`` API yourself. Save templates in a directory specified as a **template directory**."
msgstr ""

#: ../../ref/templates/api.txt:532
# 89d895db53d94078954e65400598d518
msgid "Django searches for template directories in a number of places, depending on your template-loader settings (see \"Loader types\" below), but the most basic way of specifying template directories is by using the :setting:`TEMPLATE_DIRS` setting."
msgstr ""

#: ../../ref/templates/api.txt:538
# f43f19b3442141cba39a5f185f20a5c4
msgid "The TEMPLATE_DIRS setting"
msgstr ""

#: ../../ref/templates/api.txt:540
# 7ff286131338440d967d46e08ec81730
msgid "Tell Django what your template directories are by using the :setting:`TEMPLATE_DIRS` setting in your settings file. This should be set to a list or tuple of strings that contain full paths to your template directory(ies). Example::"
msgstr ""

#: ../../ref/templates/api.txt:550
# 6fa50a6e56e14fb181351d1b8c167bed
msgid "Your templates can go anywhere you want, as long as the directories and templates are readable by the Web server. They can have any extension you want, such as ``.html`` or ``.txt``, or they can have no extension at all."
msgstr ""

#: ../../ref/templates/api.txt:559
# 8044f244e10e401c84b9a85f2da6b961
msgid "The Python API"
msgstr ""

#: ../../ref/templates/api.txt:563
# 86916923c1c94fbfbc01fbbe9ba30d1e
msgid "``django.template.loader`` has two functions to load templates from files:"
msgstr ""

#: ../../ref/templates/api.txt:567
# fa89e54f129c4dba827010dbe782b77d
msgid "``get_template`` returns the compiled template (a ``Template`` object) for the template with the given name. If the template doesn't exist, it raises ``django.template.TemplateDoesNotExist``."
msgstr ""

#: ../../ref/templates/api.txt:573
# 6e075e6cea474ab79c4d1bab39a6cc07
msgid "``select_template`` is just like ``get_template``, except it takes a list of template names. Of the list, it returns the first template that exists."
msgstr ""

#: ../../ref/templates/api.txt:576
# 0856f0039f7a470bb279486fdb2093b6
msgid "For example, if you call ``get_template('story_detail.html')`` and have the above :setting:`TEMPLATE_DIRS` setting, here are the files Django will look for, in order:"
msgstr ""

#: ../../ref/templates/api.txt:580
#: ../../ref/templates/api.txt:588
# 9f8754930261456aa17aa38c9c599d46
# 4f1f6f5c76bb4d2f8c755ab55adc7342
msgid "``/home/html/templates/lawrence.com/story_detail.html``"
msgstr ""

#: ../../ref/templates/api.txt:581
#: ../../ref/templates/api.txt:589
# 220617cf903c43d19f568c1902629ddd
# 8e2b1c60de5b46a4a3a5464199fce34c
msgid "``/home/html/templates/default/story_detail.html``"
msgstr ""

#: ../../ref/templates/api.txt:583
# 05263082683a4371a7caa305b219d206
msgid "If you call ``select_template(['story_253_detail.html', 'story_detail.html'])``, here's what Django will look for:"
msgstr ""

#: ../../ref/templates/api.txt:586
# 6bc6e9ac1d1543c8bcc1ed20162de60e
msgid "``/home/html/templates/lawrence.com/story_253_detail.html``"
msgstr ""

#: ../../ref/templates/api.txt:587
# aa26cc7ec5b443a59b77e16881b13177
msgid "``/home/html/templates/default/story_253_detail.html``"
msgstr ""

#: ../../ref/templates/api.txt:591
# acd31d3b57524492882374e133d1ad6f
msgid "When Django finds a template that exists, it stops looking."
msgstr ""

#: ../../ref/templates/api.txt:595
# e7fc29f4fb3a4c00ab8693b5247dfd26
msgid "You can use ``select_template()`` for super-flexible \"templatability.\" For example, if you've written a news story and want some stories to have custom templates, use something like ``select_template(['story_%s_detail.html' % story.id, 'story_detail.html'])``. That'll allow you to use a custom template for an individual story, with a fallback template for stories that don't have custom templates."
msgstr ""

#: ../../ref/templates/api.txt:603
# 301c65c85cc647d8ab455eff03b9b436
msgid "Using subdirectories"
msgstr ""

#: ../../ref/templates/api.txt:605
# 2fa1643ddf0847189e5543a08c4d6893
msgid "It's possible -- and preferable -- to organize templates in subdirectories of the template directory. The convention is to make a subdirectory for each Django app, with subdirectories within those subdirectories as needed."
msgstr ""

#: ../../ref/templates/api.txt:609
# 4a5ab78946574f3995854085a371dca1
msgid "Do this for your own sanity. Storing all templates in the root level of a single directory gets messy."
msgstr ""

#: ../../ref/templates/api.txt:612
# dad9b385f9104cfdbd81478df4c396ea
msgid "To load a template that's within a subdirectory, just use a slash, like so::"
msgstr ""

#: ../../ref/templates/api.txt:616
# 3dc1c08454654a3e91519c8f4cd373ef
msgid "Using the same :setting:`TEMPLATE_DIRS` setting from above, this example ``get_template()`` call will attempt to load the following templates:"
msgstr ""

#: ../../ref/templates/api.txt:619
# 6d9e6ff620c343e7a60827396afb7701
msgid "``/home/html/templates/lawrence.com/news/story_detail.html``"
msgstr ""

#: ../../ref/templates/api.txt:620
# 8fbdcc178e6449fc89bcb56cfae69c96
msgid "``/home/html/templates/default/news/story_detail.html``"
msgstr ""

#: ../../ref/templates/api.txt:625
# 929647331ff1408d8fee2cc004e81467
msgid "Loader types"
msgstr ""

#: ../../ref/templates/api.txt:627
# ca88d7b409a14eb88f47a97373ada11a
msgid "By default, Django uses a filesystem-based template loader, but Django comes with a few other template loaders, which know how to load templates from other sources."
msgstr ""

#: ../../ref/templates/api.txt:631
# 7f8178ded96b4ed18bb147d0a1f63f79
msgid "Some of these other loaders are disabled by default, but you can activate them by editing your :setting:`TEMPLATE_LOADERS` setting. :setting:`TEMPLATE_LOADERS` should be a tuple of strings, where each string represents a template loader class. Here are the template loaders that come with Django:"
msgstr ""

#: ../../ref/templates/api.txt:638
# 58349cf36f5e4971864c9b13b25025c0
msgid "``django.template.loaders.filesystem.Loader``"
msgstr ""

#: ../../ref/templates/api.txt:642
# 5988efe86dbc47209bfc8803b5f8e064
msgid "Loads templates from the filesystem, according to :setting:`TEMPLATE_DIRS`. This loader is enabled by default."
msgstr ""

#: ../../ref/templates/api.txt:645
# 7f2c44cbfd1a4ddb9105f91907cc8653
msgid "``django.template.loaders.app_directories.Loader``"
msgstr ""

#: ../../ref/templates/api.txt:649
# dc12290d3b1145b1ab7bc71166d79bfc
msgid "Loads templates from Django apps on the filesystem. For each app in :setting:`INSTALLED_APPS`, the loader looks for a ``templates`` subdirectory. If the directory exists, Django looks for templates in there."
msgstr ""

#: ../../ref/templates/api.txt:653
# 914779f2e51c4b3d9263d6fab92b995d
msgid "This means you can store templates with your individual apps. This also makes it easy to distribute Django apps with default templates."
msgstr ""

#: ../../ref/templates/api.txt:656
# e1bbb7cb9ce745c2a7e83764aceb3974
msgid "For example, for this setting::"
msgstr ""

#: ../../ref/templates/api.txt:660
# 6e65bc4c5d1b46a8a03df8b260a1d6cf
msgid "...then ``get_template('foo.html')`` will look for ``foo.html`` in these directories, in this order:"
msgstr ""

#: ../../ref/templates/api.txt:663
# d5e53e0be75145a4bf60f745f0c685e4
msgid "``/path/to/myproject/polls/templates/``"
msgstr ""

#: ../../ref/templates/api.txt:664
# 2a9cdaf6c2a645e9829c33bc9b046762
msgid "``/path/to/myproject/music/templates/``"
msgstr ""

#: ../../ref/templates/api.txt:666
# 74cc6a1d1f60401481f60b01a6040756
msgid "... and will use the one it finds first."
msgstr ""

#: ../../ref/templates/api.txt:668
# 96c7063c2ef6411f807b324b4a99805b
msgid "The order of :setting:`INSTALLED_APPS` is significant! For example, if you want to customize the Django admin, you might choose to override the standard ``admin/base_site.html`` template, from ``django.contrib.admin``, with your own ``admin/base_site.html`` in ``myproject.polls``. You must then make sure that your ``myproject.polls`` comes *before* ``django.contrib.admin`` in :setting:`INSTALLED_APPS`, otherwise ``django.contrib.admin``'s will be loaded first and yours will be ignored."
msgstr ""

#: ../../ref/templates/api.txt:676
# aa3a93d908814c008bb8f434b429338b
msgid "Note that the loader performs an optimization when it is first imported: it caches a list of which :setting:`INSTALLED_APPS` packages have a ``templates`` subdirectory."
msgstr ""

#: ../../ref/templates/api.txt:680
# 8565cc3eb72d45e3b843729fc6ff4e73
msgid "This loader is enabled by default."
msgstr ""

#: ../../ref/templates/api.txt:682
# 07dbfee9c4e54a9082b2cd9d0113f9bf
msgid "``django.template.loaders.eggs.Loader``"
msgstr ""

#: ../../ref/templates/api.txt:686
# 59ecbc506e584be789e9e166533d2b51
msgid "Just like ``app_directories`` above, but it loads templates from Python eggs rather than from the filesystem."
msgstr ""

#: ../../ref/templates/api.txt:689
#: ../../ref/templates/api.txt:724
# f34f4c1e17f04ff794c27355644c79d1
# 670e16bab4c74e76aa5de9a0962a8863
msgid "This loader is disabled by default."
msgstr ""

#: ../../ref/templates/api.txt:691
# e42faf54f1b24ce1acd1c2fddd7b9382
msgid "``django.template.loaders.cached.Loader``"
msgstr ""

#: ../../ref/templates/api.txt:695
# b3e2bd65ca864d36835991634cba172c
msgid "By default, the templating system will read and compile your templates every time they need to be rendered. While the Django templating system is quite fast, the overhead from reading and compiling templates can add up."
msgstr ""

#: ../../ref/templates/api.txt:699
# bdf7c2603030415f842181bfd3761d35
msgid "The cached template loader is a class-based loader that you configure with a list of other loaders that it should wrap. The wrapped loaders are used to locate unknown templates when they are first encountered. The cached loader then stores the compiled ``Template`` in memory. The cached ``Template`` instance is returned for subsequent requests to load the same template."
msgstr ""

#: ../../ref/templates/api.txt:705
# 8b2159bc22da48149478f8e84f55b936
msgid "For example, to enable template caching with the ``filesystem`` and ``app_directories`` template loaders you might use the following settings::"
msgstr ""

#: ../../ref/templates/api.txt:717
# 34602beaa0e84fe393db3c8532bb4190
msgid "All of the built-in Django template tags are safe to use with the cached loader, but if you're using custom template tags that come from third party packages, or that you wrote yourself, you should ensure that the ``Node`` implementation for each tag is thread-safe. For more information, see :ref:`template tag thread safety considerations<template_tag_thread_safety>`."
msgstr ""

#: ../../ref/templates/api.txt:726
# 061a70b64c244705834e305358fd960f
msgid "Django uses the template loaders in order according to the :setting:`TEMPLATE_LOADERS` setting. It uses each loader until a loader finds a match."
msgstr ""

#: ../../ref/templates/api.txt:731
# 81140722c2fe4e3284eb64f35ac04d0d
msgid "The ``render_to_string`` shortcut"
msgstr ""

#: ../../ref/templates/api.txt:735
# f13d8cb362604d8f92c011ec5424f0a2
msgid "To cut down on the repetitive nature of loading and rendering templates, Django provides a shortcut function which largely automates the process: ``render_to_string()`` in :mod:`django.template.loader`, which loads a template, renders it and returns the resulting string::"
msgstr ""

#: ../../ref/templates/api.txt:744
# 69cf1989a6d044ac9a084552a3aab9de
msgid "The ``render_to_string`` shortcut takes one required argument -- ``template_name``, which should be the name of the template to load and render (or a list of template names, in which case Django will use the first template in the list that exists) -- and two optional arguments:"
msgstr ""

#: ../../ref/templates/api.txt:750
# c1dfccb52e35418da2eb4781a45ab522
msgid "A dictionary to be used as variables and values for the template's context. This can also be passed as the second positional argument."
msgstr ""

#: ../../ref/templates/api.txt:755
# a721eac90a754cadbee6ee5b6a234ab8
msgid "An instance of ``Context`` or a subclass (e.g., an instance of ``RequestContext``) to use as the template's context. This can also be passed as the third positional argument."
msgstr ""

#: ../../ref/templates/api.txt:759
# bedb11f427a84cb583e01198470b163a
msgid "See also the :func:`~django.shortcuts.render_to_response()` shortcut, which calls ``render_to_string`` and feeds the result into an :class:`~django.http.HttpResponse` suitable for returning directly from a view."
msgstr ""

#: ../../ref/templates/api.txt:764
# da7a7f5f9fbb4415931ee70c82ecd43c
msgid "Configuring the template system in standalone mode"
msgstr ""

#: ../../ref/templates/api.txt:768
# 786245f644c14184bc86ff649fd18608
msgid "This section is only of interest to people trying to use the template system as an output component in another application. If you're using the template system as part of a Django application, nothing here applies to you."
msgstr ""

#: ../../ref/templates/api.txt:773
# ce41392124744e6091be994f0822ed33
msgid "Normally, Django will load all the configuration information it needs from its own default configuration file, combined with the settings in the module given in the :envvar:`DJANGO_SETTINGS_MODULE` environment variable. But if you're using the template system independently of the rest of Django, the environment variable approach isn't very convenient, because you probably want to configure the template system in line with the rest of your application rather than dealing with settings files and pointing to them via environment variables."
msgstr ""

#: ../../ref/templates/api.txt:781
# f5919c0a079d45e197cdb90ebfed451d
msgid "To solve this problem, you need to use the manual configuration option described in :ref:`settings-without-django-settings-module`. Simply import the appropriate pieces of the templating system and then, *before* you call any of the templating functions, call :func:`django.conf.settings.configure()` with any settings you wish to specify. You might want to consider setting at least :setting:`TEMPLATE_DIRS` (if you're going to use template loaders), :setting:`DEFAULT_CHARSET` (although the default of ``utf-8`` is probably fine) and :setting:`TEMPLATE_DEBUG`. If you plan to use the :ttag:`url` template tag, you will also need to set the :setting:`ROOT_URLCONF` setting. All available settings are described in the :doc:`settings documentation </ref/settings>`, and any setting starting with ``TEMPLATE_`` is of obvious interest."
msgstr ""

#: ../../ref/templates/api.txt:796
# 47527033b5d440a2a4de4117512acf95
msgid "Using an alternative template language"
msgstr ""

#: ../../ref/templates/api.txt:798
# 166c97c539674b8f831d1a6e5a1a13fc
msgid "The Django ``Template`` and ``Loader`` classes implement a simple API for loading and rendering templates. By providing some simple wrapper classes that implement this API we can use third party template systems like `Jinja2 <http://jinja.pocoo.org/docs/>`_ or `Cheetah <http://www.cheetahtemplate.org/>`_. This allows us to use third-party template libraries without giving up useful Django features like the Django ``Context`` object and handy shortcuts like :func:`~django.shortcuts.render_to_response()`."
msgstr ""

#: ../../ref/templates/api.txt:806
# a30a81f4e5ef4731a0eedc19402a0dd9
msgid "The core component of the Django templating system is the ``Template`` class. This class has a very simple interface: it has a constructor that takes a single positional argument specifying the template string, and a ``render()`` method that takes a :class:`~django.template.Context` object and returns a string containing the rendered response."
msgstr ""

#: ../../ref/templates/api.txt:812
# e6db53eabe8f4a21bd68e4370a2232d2
msgid "Suppose we're using a template language that defines a ``Template`` object with a ``render()`` method that takes a dictionary rather than a ``Context`` object. We can write a simple wrapper that implements the Django ``Template`` interface::"
msgstr ""

#: ../../ref/templates/api.txt:825
# fe113c8afb3c49db8bcce6b09c0a1991
msgid "That's all that's required to make our fictional ``Template`` class compatible with the Django loading and rendering system!"
msgstr ""

#: ../../ref/templates/api.txt:828
# a5676c2a508e4445a4de7430e5001069
msgid "The next step is to write a ``Loader`` class that returns instances of our custom template class instead of the default :class:`~django.template.Template`. Custom ``Loader`` classes should inherit from ``django.template.loader.BaseLoader`` and override the ``load_template_source()`` method, which takes a ``template_name`` argument, loads the template from disk (or elsewhere), and returns a tuple: ``(template_string, template_origin)``."
msgstr ""

#: ../../ref/templates/api.txt:835
# 7a9acda2412149c1a0c883d4d2fef045
msgid "The ``load_template()`` method of the ``Loader`` class retrieves the template string by calling ``load_template_source()``, instantiates a ``Template`` from the template source, and returns a tuple: ``(template, template_origin)``. Since this is the method that actually instantiates the ``Template``, we'll need to override it to use our custom template class instead. We can inherit from the builtin :class:`django.template.loaders.app_directories.Loader` to take advantage of the ``load_template_source()`` method implemented there::"
msgstr ""

#: ../../ref/templates/api.txt:852
# 6e72ab62ab94446bbe8263a340c917bf
msgid "Finally, we need to modify our project settings, telling Django to use our custom loader. Now we can write all of our templates in our alternative template language while continuing to use the rest of the Django templating system."
msgstr ""

#: ../../ref/templates/builtins.txt:3
# c0cd3629fdc5459c81879bfacd22aa2b
msgid "Built-in template tags and filters"
msgstr ""

#: ../../ref/templates/builtins.txt:5
# 3c47c877c01f48aaa113741416a7ee02
msgid "This document describes Django's built-in template tags and filters. It is recommended that you use the :doc:`automatic documentation </ref/contrib/admin/admindocs>`, if available, as this will also include documentation for any custom tags or filters installed."
msgstr ""

#: ../../ref/templates/builtins.txt:13
# 94997f71fdcd4fea9872bfd96681a996
msgid "Built-in tag reference"
msgstr ""

#: ../../ref/templates/builtins.txt:20
# 1ceb60ae3ef0402db73d8dfab0841d28
msgid "autoescape"
msgstr ""

#: ../../ref/templates/builtins.txt:22
# 46e61fb4b18e4bc88b309097e941b422
msgid "Controls the current auto-escaping behavior. This tag takes either ``on`` or ``off`` as an argument and that determines whether auto-escaping is in effect inside the block. The block is closed with an ``endautoescape`` ending tag."
msgstr ""

#: ../../ref/templates/builtins.txt:26
# 0566fe7439714ee98f1281633ba54281
msgid "When auto-escaping is in effect, all variable content has HTML escaping applied to it before placing the result into the output (but after any filters have been applied). This is equivalent to manually applying the :tfilter:`escape` filter to each variable."
msgstr ""

#: ../../ref/templates/builtins.txt:31
# a917acdc4c2148c3aaa1e6574195b230
msgid "The only exceptions are variables that are already marked as \"safe\" from escaping, either by the code that populated the variable, or because it has had the :tfilter:`safe` or :tfilter:`escape` filters applied."
msgstr ""

#: ../../ref/templates/builtins.txt:35
#: ../../ref/templates/builtins.txt:223
#: ../../ref/templates/builtins.txt:245
#: ../../ref/utils.txt:325
# 74333d07efe54132a9b069b5f3d573f7
# ec1424d383c24220a6370b0882e00091
# 3b0c25f1d8464159a2cbb8f3f9edadd0
# d9b6220a5cd64565895482df586fc7a2
msgid "Sample usage::"
msgstr ""

#: ../../ref/templates/builtins.txt:44
# ffea64c3c80e4e7a81221b853250f3e4
msgid "block"
msgstr ""

#: ../../ref/templates/builtins.txt:46
# 99b8ebc6eaf740d9a5f68fb2274dbde3
msgid "Defines a block that can be overridden by child templates. See :ref:`Template inheritance <template-inheritance>` for more information."
msgstr ""

#: ../../ref/templates/builtins.txt:52
# 28ce437acbbe40d2aac8be7095756fb5
msgid "comment"
msgstr ""

#: ../../ref/templates/builtins.txt:54
# 2dd5b6e4f3ab4497b9bca6bc50ed53ee
msgid "Ignores everything between ``{% comment %}`` and ``{% endcomment %}``."
msgstr ""

#: ../../ref/templates/builtins.txt:59
# b2f74377327e46668914955f239d1ab3
msgid "csrf_token"
msgstr ""

#: ../../ref/templates/builtins.txt:61
# cf41b83554d44f6f932876931024d89f
msgid "This tag is used for CSRF protection, as described in the documentation for :doc:`Cross Site Request Forgeries </ref/contrib/csrf>`."
msgstr ""

#: ../../ref/templates/builtins.txt:67
# f8821dee40044d1595159d38892dab3f
msgid "cycle"
msgstr ""

#: ../../ref/templates/builtins.txt:69
# c3b0686604d44c219e9fb1efefac8f94
msgid "Cycles among the given strings or variables each time this tag is encountered."
msgstr ""

#: ../../ref/templates/builtins.txt:71
# f94f21e241d24e69bf260ae53db3233d
msgid "Within a loop, cycles among the given strings each time through the loop::"
msgstr ""

#: ../../ref/templates/builtins.txt:80
# 4431b901bd3449dc96255eb2b92a6db4
msgid "You can use variables, too. For example, if you have two template variables, ``rowvalue1`` and ``rowvalue2``, you can cycle between their values like this::"
msgstr ""

#: ../../ref/templates/builtins.txt:89
# 465c040e4f554b80aef86ca2dca53193
msgid "Note that variable arguments (``rowvalue1`` and ``rowvalue2`` above) are NOT auto-escaped! So either make sure that you trust their values, or use explicit escaping, like this::"
msgstr ""

#: ../../ref/templates/builtins.txt:99
# 9e6c298ce11143119e981262abebbdaf
msgid "You can mix variables and strings::"
msgstr ""

#: ../../ref/templates/builtins.txt:107
# ab8a515f77e246559c472149259668ad
msgid "In some cases you might want to refer to the next value of a cycle from outside of a loop. To do this, just give the ``{% cycle %}`` tag a name, using \"as\", like this::"
msgstr ""

#: ../../ref/templates/builtins.txt:113
# 5d6190c98b6b4183bc630d6ca5e4b581
msgid "From then on, you can insert the current value of the cycle wherever you'd like in your template by referencing the cycle name as a context variable. If you want to move the cycle onto the next value, you use the cycle tag again, using the name of the variable. So, the following template::"
msgstr ""

#: ../../ref/templates/builtins.txt:128
# 21307cfb1e8c4aaabb2350f2eacb4148
msgid "would output::"
msgstr ""

#: ../../ref/templates/builtins.txt:139
# eeaec0d193f845b085f74d5888de5c99
msgid "You can use any number of values in a ``{% cycle %}`` tag, separated by spaces. Values enclosed in single (``'``) or double quotes (``\"``) are treated as string literals, while values without quotes are treated as template variables."
msgstr ""

#: ../../ref/templates/builtins.txt:143
# 2ad4b91d7b5b477283339781970354eb
msgid "Note that the variables included in the cycle will not be escaped. This is because template tags do not escape their content. Any HTML or Javascript code contained in the printed variable will be rendered as-is, which could potentially lead to security issues."
msgstr ""

#: ../../ref/templates/builtins.txt:148
# f5dcd9fa189842468ad59e9cad6f16df
msgid "For backwards compatibility, the ``{% cycle %}`` tag supports the much inferior old syntax from previous Django versions. You shouldn't use this in any new projects, but for the sake of the people who are still using it, here's what it looks like::"
msgstr ""

#: ../../ref/templates/builtins.txt:155
# 41d08ea79d3a4694979471f37fa5aefc
msgid "In this syntax, each value gets interpreted as a literal string, and there's no way to specify variable values. Or literal commas. Or spaces. Did we mention you shouldn't use this syntax in any new projects?"
msgstr ""

#: ../../ref/templates/builtins.txt:159
# ecdeae3ca9a44ccc881998085e64b6da
msgid "By default, when you use the ``as`` keyword with the cycle tag, the usage of ``{% cycle %}`` that declares the cycle will itself output the first value in the cycle. This could be a problem if you want to use the value in a nested loop or an included template. If you want to just declare the cycle, but not output the first value, you can add a ``silent`` keyword as the last keyword in the tag. For example::"
msgstr ""

#: ../../ref/templates/builtins.txt:171
# 58779b5f1ec34d12a99e761e140438ab
msgid "This will output a list of ``<tr>`` elements with ``class`` alternating between ``row1`` and ``row2``; the subtemplate will have access to ``rowcolors`` in it's context that matches the class of the ``<tr>`` that encloses it. If the ``silent`` keyword were to be omitted, ``row1`` would be emitted as normal text, outside the ``<tr>`` element."
msgstr ""

#: ../../ref/templates/builtins.txt:178
# eeee138e9a6044cb9ccab49951573cc8
msgid "When the silent keyword is used on a cycle definition, the silence automatically applies to all subsequent uses of the cycle tag. In, the following template would output *nothing*, even though the second call to ``{% cycle %}`` doesn't specify silent::"
msgstr ""

#: ../../ref/templates/builtins.txt:189
# 625d6fe2a32c48bca49628672a78c25a
msgid "debug"
msgstr ""

#: ../../ref/templates/builtins.txt:191
# 8dd82194253f49c487dbc0c43920351b
msgid "Outputs a whole load of debugging information, including the current context and imported modules."
msgstr ""

#: ../../ref/templates/builtins.txt:197
# 10310f124c4b446088e71c34a8436e32
msgid "extends"
msgstr ""

#: ../../ref/templates/builtins.txt:199
# a6f9ff2995a64b9181d378a272053dc4
msgid "Signals that this template extends a parent template."
msgstr ""

#: ../../ref/templates/builtins.txt:201
# 35989288a4194e48b5fd2f3d8140be89
msgid "This tag can be used in two ways:"
msgstr ""

#: ../../ref/templates/builtins.txt:203
# 113cfc55bb0a44a688f7aa9441308527
msgid "``{% extends \"base.html\" %}`` (with quotes) uses the literal value ``\"base.html\"`` as the name of the parent template to extend."
msgstr ""

#: ../../ref/templates/builtins.txt:206
# 842ef4cac0134f20a6736a27c8e11e7e
msgid "``{% extends variable %}`` uses the value of ``variable``. If the variable evaluates to a string, Django will use that string as the name of the parent template. If the variable evaluates to a ``Template`` object, Django will use that object as the parent template."
msgstr ""

#: ../../ref/templates/builtins.txt:211
# a5c5c9bbc98d4b8c9e3bebb0eb3736b8
msgid "See :ref:`template-inheritance` for more information."
msgstr ""

#: ../../ref/templates/builtins.txt:218
# 078afe13fa9e4a7f93ffbabaf5fc6879
msgid "Filters the contents of the variable through variable filters."
msgstr ""

#: ../../ref/templates/builtins.txt:220
# 7613a6146f444c9d903b46d760bc7ae5
msgid "Filters can also be piped through each other, and they can have arguments -- just like in variable syntax."
msgstr ""

#: ../../ref/templates/builtins.txt:231
# 8695bec1ca42451c8a18311dd7061668
msgid "The :tfilter:`escape` and :tfilter:`safe` filters are not acceptable arguments. Instead, use the :ttag:`autoescape` tag to manage autoescaping for blocks of template code."
msgstr ""

#: ../../ref/templates/builtins.txt:238
# 71eeec1e987843098571eb0fa1c205e3
msgid "firstof"
msgstr ""

#: ../../ref/templates/builtins.txt:240
# a4aeb250ee0f4cd48c23740a06479f00
msgid "Outputs the first variable passed that is not False. Does NOT auto-escape variable values."
msgstr ""

#: ../../ref/templates/builtins.txt:243
# 20829860ee0c46b2825c4294f34a9e47
msgid "Outputs nothing if all the passed variables are False."
msgstr ""

#: ../../ref/templates/builtins.txt:249
# b90eefef8c9e4734b2cbac79a73f7190
msgid "This is equivalent to::"
msgstr ""

#: ../../ref/templates/builtins.txt:259
# bd636df1b7914cf797ba0453184326c1
msgid "You can also use a literal string as a fallback value in case all passed variables are False::"
msgstr ""

#: ../../ref/templates/builtins.txt:264
# 3d808c96dc394473b96b99fc05d68d9c
msgid "Note that the variables included in the firstof tag will not be escaped. This is because template tags do not escape their content. Any HTML or Javascript code contained in the printed variable will be rendered as-is, which could potentially lead to security issues. If you need to escape the variables in the firstof tag, you must do so explicitly::"
msgstr ""

#: ../../ref/templates/builtins.txt:278
# 9483a1e5c31e4b048af99d55ab720812
msgid "for"
msgstr ""

#: ../../ref/templates/builtins.txt:280
# a8e72856e12f4e3aa0c3661ca91fbe27
msgid "Loop over each item in an array.  For example, to display a list of athletes provided in ``athlete_list``::"
msgstr ""

#: ../../ref/templates/builtins.txt:289
# d102163b4e2e4f0ba640f08d7d8edb88
msgid "You can loop over a list in reverse by using ``{% for obj in list reversed %}``."
msgstr ""

#: ../../ref/templates/builtins.txt:292
# 08ae602f90c448f0916f0f592274a0dd
msgid "If you need to loop over a list of lists, you can unpack the values in each sub-list into individual variables. For example, if your context contains a list of (x,y) coordinates called ``points``, you could use the following to output the list of points::"
msgstr ""

#: ../../ref/templates/builtins.txt:301
# 7e9001f427c04a05b1ba7ff947dcf430
msgid "This can also be useful if you need to access the items in a dictionary. For example, if your context contained a dictionary ``data``, the following would display the keys and values of the dictionary::"
msgstr ""

#: ../../ref/templates/builtins.txt:309
# b2311f0483d444ff983bfdfe7c0aaa14
msgid "The for loop sets a number of variables available within the loop:"
msgstr ""

#: ../../ref/templates/builtins.txt:312
# 9204656ab5d042cd9ed6d73bd6bfbda1
msgid "Variable"
msgstr ""

#: ../../ref/templates/builtins.txt:314
# 1cf3b7c4c3b642f3b6aaac297d4496f2
msgid "``forloop.counter``"
msgstr ""

#: ../../ref/templates/builtins.txt:314
# 998d7c6b033b477397421f78eed46aed
msgid "The current iteration of the loop (1-indexed)"
msgstr ""

#: ../../ref/templates/builtins.txt:315
# af4e7822610c4b4db41ab158a7ff9a22
msgid "``forloop.counter0``"
msgstr ""

#: ../../ref/templates/builtins.txt:315
# f6aae019132144c7a4cc7f9772b3ff45
msgid "The current iteration of the loop (0-indexed)"
msgstr ""

#: ../../ref/templates/builtins.txt:316
# 67f6fb0ce65045c1b9ce365501afa526
msgid "``forloop.revcounter``"
msgstr ""

#: ../../ref/templates/builtins.txt:316
# a99e27d82e5a4c4db5cb1820208b8dfa
msgid "The number of iterations from the end of the loop (1-indexed)"
msgstr ""

#: ../../ref/templates/builtins.txt:318
# 3b5d4bcfe16949bd85e71e4ffd6f5a8b
msgid "``forloop.revcounter0``"
msgstr ""

#: ../../ref/templates/builtins.txt:318
# 16b961e650844907b1cc5941e33acfa7
msgid "The number of iterations from the end of the loop (0-indexed)"
msgstr ""

#: ../../ref/templates/builtins.txt:320
# e2cfca3b3eb74f4c9e4861a0d76b6840
msgid "``forloop.first``"
msgstr ""

#: ../../ref/templates/builtins.txt:320
# 5c0c7ed16abd443b9cae28cc2383ad48
msgid "True if this is the first time through the loop"
msgstr ""

#: ../../ref/templates/builtins.txt:321
# 28974a7729d841a387ab270cffa0cb6b
msgid "``forloop.last``"
msgstr ""

#: ../../ref/templates/builtins.txt:321
# 9e281534b42448a484946583021f5bdb
msgid "True if this is the last time through the loop"
msgstr ""

#: ../../ref/templates/builtins.txt:322
# 3fadc53e586748b4ad1003baa5ad5c43
msgid "``forloop.parentloop``"
msgstr ""

#: ../../ref/templates/builtins.txt:322
# c95f2ef6be7445aa868c6544fb8a5655
msgid "For nested loops, this is the loop \"above\" the current one"
msgstr ""

#: ../../ref/templates/builtins.txt:327
# e4b7dadd136144108677055c48078398
msgid "for ... empty"
msgstr ""

#: ../../ref/templates/builtins.txt:329
# 8a5b4029ec2d4547aa2b3b30984c42ec
msgid "The ``for`` tag can take an optional ``{% empty %}`` clause that will be displayed if the given array is empty or could not be found::"
msgstr ""

#: ../../ref/templates/builtins.txt:340
# c7e2777775b947c495b10bfd4d3b4734
msgid "The above is equivalent to -- but shorter, cleaner, and possibly faster than -- the following::"
msgstr ""

#: ../../ref/templates/builtins.txt:356
# be905e45a0af4fbcbbc863c669f57f3e
msgid "if"
msgstr ""

#: ../../ref/templates/builtins.txt:358
# 449ecdcd86d64cf19648a27c82b98775
msgid "The ``{% if %}`` tag evaluates a variable, and if that variable is \"true\" (i.e. exists, is not empty, and is not a false boolean value) the contents of the block are output::"
msgstr ""

#: ../../ref/templates/builtins.txt:370
# 3fbd25dbf44740c0834f3b20bbe33872
msgid "In the above, if ``athlete_list`` is not empty, the number of athletes will be displayed by the ``{{ athlete_list|length }}`` variable."
msgstr ""

#: ../../ref/templates/builtins.txt:373
# b508890b250f46a39ddafc000e422eaf
msgid "As you can see, the ``if`` tag may take one or several ``{% elif %}`` clauses, as well as an ``{% else %}`` clause that will be displayed if all previous conditions fail. These clauses are optional."
msgstr ""

#: ../../ref/templates/builtins.txt:379
# 8d94a6a221984b48bfc91a432781011d
msgid "The ``if`` tag now supports ``{% elif %}`` clauses."
msgstr ""

#: ../../ref/templates/builtins.txt:382
# bcb7b9d1601a4a69a1c467d86dec0765
msgid "Boolean operators"
msgstr ""

#: ../../ref/templates/builtins.txt:384
# d2e3745e7b1548a4b5f9f0e9c42636a8
msgid ":ttag:`if` tags may use ``and``, ``or`` or ``not`` to test a number of variables or to negate a given variable::"
msgstr ""

#: ../../ref/templates/builtins.txt:409
# d2934c4b3e914243b4cbeb11b4eaa842
msgid "Use of both ``and`` and ``or`` clauses within the same tag is allowed, with ``and`` having higher precedence than ``or`` e.g.::"
msgstr ""

#: ../../ref/templates/builtins.txt:414
# 5b9d3c6cacfc42d5bcceea4a625b8356
msgid "will be interpreted like:"
msgstr ""

#: ../../ref/templates/builtins.txt:420
# 1409e7eefb164887b4aaa8f64c54cb7f
msgid "Use of actual parentheses in the :ttag:`if` tag is invalid syntax.  If you need them to indicate precedence, you should use nested :ttag:`if` tags."
msgstr ""

#: ../../ref/templates/builtins.txt:423
# 75cf951fdc68463a99346c20d57c778c
msgid ":ttag:`if` tags may also use the operators ``==``, ``!=``, ``<``, ``>``, ``<=``, ``>=`` and ``in`` which work as follows:"
msgstr ""

#: ../../ref/templates/builtins.txt:428
# 45e01c64245e41d2821b5d7bc56c9639
msgid "``==`` operator"
msgstr ""

#: ../../ref/templates/builtins.txt:430
# 7a3469d09d9e475da55ee0a6e48ba48f
msgid "Equality. Example::"
msgstr ""

#: ../../ref/templates/builtins.txt:437
# cb00d1403b014cbb8a04c336d851ae1b
msgid "``!=`` operator"
msgstr ""

#: ../../ref/templates/builtins.txt:439
# 0f5ab52ac09f473cb4591349f0e5a7b4
msgid "Inequality. Example::"
msgstr ""

#: ../../ref/templates/builtins.txt:447
# 3b5aec34ed234043a7d1125ca8b8d93a
msgid "``<`` operator"
msgstr ""

#: ../../ref/templates/builtins.txt:449
# 37aedc724cdc473298335a01ffe39352
msgid "Less than. Example::"
msgstr ""

#: ../../ref/templates/builtins.txt:456
# 3c8ff83b7c0541199dd1ec330cc25f2f
msgid "``>`` operator"
msgstr ""

#: ../../ref/templates/builtins.txt:458
# 970ac688883f474e8c5f7e8c01e04cfc
msgid "Greater than. Example::"
msgstr ""

#: ../../ref/templates/builtins.txt:465
# d1a681d098df42ecbd7fa69983678dd8
msgid "``<=`` operator"
msgstr ""

#: ../../ref/templates/builtins.txt:467
# 0e175a6a26b34b37884ec65ea10bdcd6
msgid "Less than or equal to. Example::"
msgstr ""

#: ../../ref/templates/builtins.txt:474
# d53cd4687ac843a4a9c4bcb9178053dd
msgid "``>=`` operator"
msgstr ""

#: ../../ref/templates/builtins.txt:476
# 060752b007ba4d3882ba516c833d28b7
msgid "Greater than or equal to. Example::"
msgstr ""

#: ../../ref/templates/builtins.txt:483
# 1e167d5416e84181bfd34fba179f3244
msgid "``in`` operator"
msgstr ""

#: ../../ref/templates/builtins.txt:485
# ed79edac87ec44898eab381745fe487b
msgid "Contained within. This operator is supported by many Python containers to test whether the given value is in the container.  The following are some examples of how ``x in y`` will be interpreted::"
msgstr ""

#: ../../ref/templates/builtins.txt:504
# 647a9b50bdd04cf9ad4786806bcd1a68
msgid "``not in`` operator"
msgstr ""

#: ../../ref/templates/builtins.txt:506
# 615436ae32ca4aefb089779d84dfeff6
msgid "Not contained within.  This is the negation of the ``in`` operator."
msgstr ""

#: ../../ref/templates/builtins.txt:509
# 055f7d983f334093ab867a4570599579
msgid "The comparison operators cannot be 'chained' like in Python or in mathematical notation. For example, instead of using::"
msgstr ""

#: ../../ref/templates/builtins.txt:514
# b2834966e7894120b40d7551336a088e
msgid "you should use::"
msgstr ""

#: ../../ref/templates/builtins.txt:520
# bb96dcecab2f44649fc2685f0d2df7bc
msgid "Filters"
msgstr ""

#: ../../ref/templates/builtins.txt:522
# d85755866de34026ba31b19026d2a871
msgid "You can also use filters in the :ttag:`if` expression. For example::"
msgstr ""

#: ../../ref/templates/builtins.txt:529
# 0a4739531f214717ab462bf523e6d317
msgid "Complex expressions"
msgstr ""

#: ../../ref/templates/builtins.txt:531
# 395c241dbcbd43c0be63ad28c9b674a5
msgid "All of the above can be combined to form complex expressions. For such expressions, it can be important to know how the operators are grouped when the expression is evaluated - that is, the precedence rules.  The precedence of the operators, from lowest to highest, is as follows:"
msgstr ""

#: ../../ref/templates/builtins.txt:536
# 4d4b718eacbb426d9299f63ce4603863
msgid "``or``"
msgstr ""

#: ../../ref/templates/builtins.txt:537
# 83a4b9088772438cb05b12aaede180e1
msgid "``and``"
msgstr ""

#: ../../ref/templates/builtins.txt:538
# 878827db49a64649b7b22a1f641ef0a6
msgid "``not``"
msgstr ""

#: ../../ref/templates/builtins.txt:539
# 9609c26b8ba24e29a21b2b271cd21c49
msgid "``in``"
msgstr ""

#: ../../ref/templates/builtins.txt:540
# 3c3379dca2e749f4bb6b6bbe478a71fe
msgid "``==``, ``!=``, ``<``, ``>``, ``<=``, ``>=``"
msgstr ""

#: ../../ref/templates/builtins.txt:542
# 3dce01432d444d349be01a351b1b36bb
msgid "(This follows Python exactly). So, for example, the following complex :ttag:`if` tag:"
msgstr ""

#: ../../ref/templates/builtins.txt:549
# 6a96fa6aea454445a52e162d0d501af8
msgid "...will be interpreted as:"
msgstr ""

#: ../../ref/templates/builtins.txt:555
# 9036cdb208cb4acaa9f88d2fcf01f063
msgid "If you need different precedence, you will need to use nested :ttag:`if` tags. Sometimes that is better for clarity anyway, for the sake of those who do not know the precedence rules."
msgstr ""

#: ../../ref/templates/builtins.txt:563
# 45ae5165c43f4ba588fef51d7597bca6
msgid "ifchanged"
msgstr ""

#: ../../ref/templates/builtins.txt:565
# 4662a4889eff42c0848d51a5f1d70ee6
msgid "Check if a value has changed from the last iteration of a loop."
msgstr ""

#: ../../ref/templates/builtins.txt:567
# 6d833430993c4696b99cfa36db7b024b
msgid "The ``{% ifchanged %}`` block tag is used within a loop. It has two possible uses."
msgstr ""

#: ../../ref/templates/builtins.txt:570
# 33cc5a813a7c4044bba143711774a527
msgid "Checks its own rendered contents against its previous state and only displays the content if it has changed. For example, this displays a list of days, only displaying the month if it changes::"
msgstr ""

#: ../../ref/templates/builtins.txt:581
# fd4048cd034f4bb59eb8dd903e3de3b5
msgid "If given one or more variables, check whether any variable has changed. For example, the following shows the date every time it changes, while showing the hour if either the hour or the date has changed::"
msgstr ""

#: ../../ref/templates/builtins.txt:592
# dd33f49f469749639ba117e0fad7370e
msgid "The ``ifchanged`` tag can also take an optional ``{% else %}`` clause that will be displayed if the value has not changed::"
msgstr ""

#: ../../ref/templates/builtins.txt:608
# 1ac3a753a53b4977b0430e83b0775ab0
msgid "ifequal"
msgstr ""

#: ../../ref/templates/builtins.txt:610
# ec182b3059bc42a8b4f63506affb532c
msgid "Output the contents of the block if the two arguments equal each other."
msgstr ""

#: ../../ref/templates/builtins.txt:618
# 81ae9ec452fe44dd80226863e2284a84
msgid "As in the :ttag:`if` tag, an ``{% else %}`` clause is optional."
msgstr ""

#: ../../ref/templates/builtins.txt:620
# ec24836f19144fbe8d8b53a7e1f95c6f
msgid "The arguments can be hard-coded strings, so the following is valid::"
msgstr ""

#: ../../ref/templates/builtins.txt:626
# c84a2893f0b4461885d1e1a3a2f6919c
msgid "It is only possible to compare an argument to template variables or strings. You cannot check for equality with Python objects such as ``True`` or ``False``.  If you need to test if something is true or false, use the :ttag:`if` tag instead."
msgstr ""

#: ../../ref/templates/builtins.txt:631
# ba1cba535ef04bfb8fa149d7dcb31ab7
msgid "An alternative to the ``ifequal`` tag is to use the :ttag:`if` tag and the ``==`` operator."
msgstr ""

#: ../../ref/templates/builtins.txt:637
# 8ef68a596fe741869043b31cb39bbfbd
msgid "ifnotequal"
msgstr ""

#: ../../ref/templates/builtins.txt:639
# fac43a9cf3d948db87239eab15518587
msgid "Just like :ttag:`ifequal`, except it tests that the two arguments are not equal."
msgstr ""

#: ../../ref/templates/builtins.txt:642
# 4874273125f54564ab4441e7f6b2404a
msgid "An alternative to the ``ifnotequal`` tag is to use the :ttag:`if` tag and the ``!=`` operator."
msgstr ""

#: ../../ref/templates/builtins.txt:648
# 316f0535b2264cdfa47313557d2253d4
msgid "include"
msgstr ""

#: ../../ref/templates/builtins.txt:650
# 65d99b23d09f4610a0b0cf3c45763b87
msgid "Loads a template and renders it with the current context. This is a way of \"including\" other templates within a template."
msgstr ""

#: ../../ref/templates/builtins.txt:653
# 87aec42b59c14e2aacd63aee2d5d6210
msgid "The template name can either be a variable or a hard-coded (quoted) string, in either single or double quotes."
msgstr ""

#: ../../ref/templates/builtins.txt:656
# 372a514fde664010980fc5d93eb1f86f
msgid "This example includes the contents of the template ``\"foo/bar.html\"``::"
msgstr ""

#: ../../ref/templates/builtins.txt:660
# 7d141684e5364677884740132298b912
msgid "This example includes the contents of the template whose name is contained in the variable ``template_name``::"
msgstr ""

#: ../../ref/templates/builtins.txt:665
# a915904b219840a3b72ffe90fb09af6d
msgid "An included template is rendered with the context of the template that's including it. This example produces the output ``\"Hello, John\"``:"
msgstr ""

#: ../../ref/templates/builtins.txt:668
# 1f0395cc96064abda5e01ec44e83b6c6
msgid "Context: variable ``person`` is set to ``\"john\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:669
# a97ee8e75ce64d16a5eb6f7b20a24a49
msgid "Template::"
msgstr ""

#: ../../ref/templates/builtins.txt:673
# febfa5e9373e4f26a69b96f1e98ec668
msgid "The ``name_snippet.html`` template::"
msgstr ""

#: ../../ref/templates/builtins.txt:677
# 4bbbf105355b42dab23b4b3e9d2355a6
msgid "You can pass additional context to the template using keyword arguments::"
msgstr ""

#: ../../ref/templates/builtins.txt:681
# 9b9efc2511c3416b8b1ee316c89bcbec
msgid "If you want to only render the context with the variables provided (or even no variables at all), use the ``only`` option::"
msgstr ""

#: ../../ref/templates/builtins.txt:687
# 2b1f4d3b6a3f41c2b32cd1186912cddc
msgid "The :ttag:`include` tag should be considered as an implementation of \"render this subtemplate and include the HTML\", not as \"parse this subtemplate and include its contents as if it were part of the parent\". This means that there is no shared state between included templates -- each include is a completely independent rendering process."
msgstr ""

#: ../../ref/templates/builtins.txt:693
# 7df7463b3ccc433d81b2cd02d031d6f4
msgid "See also: :ttag:`{% ssi %}<ssi>`."
msgstr ""

#: ../../ref/templates/builtins.txt:698
# 0a82cc7790dc462fa40a3378ec5603eb
msgid "load"
msgstr ""

#: ../../ref/templates/builtins.txt:700
# a70c09c464744939bc0e763b73ebb33b
msgid "Loads a custom template tag set."
msgstr ""

#: ../../ref/templates/builtins.txt:702
# 68575e660e1c47a1b5c0c35e52f6a8d2
msgid "For example, the following template would load all the tags and filters registered in ``somelibrary`` and ``otherlibrary`` located in package ``package``::"
msgstr ""

#: ../../ref/templates/builtins.txt:708
# 097e85c3ae514a47bbd249c956acb3ec
msgid "You can also selectively load individual filters or tags from a library, using the ``from`` argument. In this example, the template tags/filters named ``foo`` and ``bar`` will be loaded from ``somelibrary``::"
msgstr ""

#: ../../ref/templates/builtins.txt:714
# 6ce807b1269743ba81f2ab4bb31a536b
msgid "See :doc:`Custom tag and filter libraries </howto/custom-template-tags>` for more information."
msgstr ""

#: ../../ref/templates/builtins.txt:720
# 3d35f09686b4414ea6e6101a9f40592d
msgid "now"
msgstr ""

#: ../../ref/templates/builtins.txt:722
# fdb1ccb6afc6445d9bc50ba23ac70871
msgid "Displays the current date and/or time, using a format according to the given string. Such string can contain format specifiers characters as described in the :tfilter:`date` filter section."
msgstr ""

#: ../../ref/templates/builtins.txt:730
# 54df931d078647588e8479ccbca7a142
msgid "Note that you can backslash-escape a format string if you want to use the \"raw\" value. In this example, \"f\" is backslash-escaped, because otherwise \"f\" is a format string that displays the time. The \"o\" doesn't need to be escaped, because it's not a format character::"
msgstr ""

#: ../../ref/templates/builtins.txt:737
# 7fa3cca5604b40b0bfd45fb83de26d61
msgid "This would display as \"It is the 4th of September\"."
msgstr ""

#: ../../ref/templates/builtins.txt:743
# fd36f3c213f946d1b8ad8f206e638709
msgid "The format passed can also be one of the predefined ones :setting:`DATE_FORMAT`, :setting:`DATETIME_FORMAT`, :setting:`SHORT_DATE_FORMAT` or :setting:`SHORT_DATETIME_FORMAT`. The predefined formats may vary depending on the current locale and if :ref:`format-localization` is enabled, e.g.::"
msgstr ""

#: ../../ref/templates/builtins.txt:754
# 90789f86d83f4121a121462ad42cd8e4
msgid "regroup"
msgstr ""

#: ../../ref/templates/builtins.txt:756
# e2f75803725b48c8bf6d77350d52d157
msgid "Regroups a list of alike objects by a common attribute."
msgstr ""

#: ../../ref/templates/builtins.txt:758
# b8e249256d14429281cf73d61c60453e
msgid "This complex tag is best illustrated by way of an example: say that \"places\" is a list of cities represented by dictionaries containing ``\"name\"``, ``\"population\"``, and ``\"country\"`` keys:"
msgstr ""

#: ../../ref/templates/builtins.txt:770
# 9073cab38e964116971fb188fcf86729
msgid "...and you'd like to display a hierarchical list that is ordered by country, like this:"
msgstr ""

#: ../../ref/templates/builtins.txt:773
#: ../../ref/templates/builtins.txt:833
# adab32e21d9b4ff59d5cafe9a1da5ce2
# aa13212d5e0e488fa3fec24640a50e71
msgid "Mumbai: 19,000,000"
msgstr ""

#: ../../ref/templates/builtins.txt:774
#: ../../ref/templates/builtins.txt:837
# 15e32ad8e7924d0ba8d24698c7ba9f09
# b5df5380b6fb43fd931e9e7bc64da80a
msgid "Calcutta: 15,000,000"
msgstr ""

#: ../../ref/templates/builtins.txt:776
#: ../../ref/templates/builtins.txt:835
# dcddc527873e4cb1a643a0e00065dc1b
# 2e90699dad6946fab617b9e835b018c1
msgid "New York: 20,000,000"
msgstr ""

#: ../../ref/templates/builtins.txt:777
# ab3b230147694a308d0a6d7dba0c9da6
msgid "Chicago: 7,000,000"
msgstr ""

#: ../../ref/templates/builtins.txt:779
#: ../../ref/templates/builtins.txt:839
# 7b7b7eb31e574dc7a207823029273d97
# 9a1019c3d32746d08c3f5e04a7a0bf0d
msgid "Tokyo: 33,000,000"
msgstr ""

#: ../../ref/templates/builtins.txt:782
# d254e83750d448fa84019c6af48293f3
msgid "You can use the ``{% regroup %}`` tag to group the list of cities by country. The following snippet of template code would accomplish this::"
msgstr ""

#: ../../ref/templates/builtins.txt:799
# 0e4566979b7a44638ed815ea5db5be33
msgid "Let's walk through this example. ``{% regroup %}`` takes three arguments: the list you want to regroup, the attribute to group by, and the name of the resulting list. Here, we're regrouping the ``cities`` list by the ``country`` attribute and calling the result ``country_list``."
msgstr ""

#: ../../ref/templates/builtins.txt:804
# dc2dab06d1d4468fb9a6846c73f9ad93
msgid "``{% regroup %}`` produces a list (in this case, ``country_list``) of **group objects**. Each group object has two attributes:"
msgstr ""

#: ../../ref/templates/builtins.txt:807
# 6efd4b78c93e43f990a9a1ad7dded3c9
msgid "``grouper`` -- the item that was grouped by (e.g., the string \"India\" or \"Japan\")."
msgstr ""

#: ../../ref/templates/builtins.txt:809
# 10e7e67e83534aac9375a1bb1364cea1
msgid "``list`` -- a list of all items in this group (e.g., a list of all cities with country='India')."
msgstr ""

#: ../../ref/templates/builtins.txt:812
# 55a309e2e3ff4d66933240ff6364697d
msgid "Note that ``{% regroup %}`` does not order its input! Our example relies on the fact that the ``cities`` list was ordered by ``country`` in the first place. If the ``cities`` list did *not* order its members by ``country``, the regrouping would naively display more than one group for a single country. For example, say the ``cities`` list was set to this (note that the countries are not grouped together):"
msgstr ""

#: ../../ref/templates/builtins.txt:829
# f7bda12d3fd44f2da19a341952ad8d00
msgid "With this input for ``cities``, the example ``{% regroup %}`` template code above would result in the following output:"
msgstr ""

#: ../../ref/templates/builtins.txt:841
# c0fbbc5ceb7447f097aabaf35f184352
msgid "The easiest solution to this gotcha is to make sure in your view code that the data is ordered according to how you want to display it."
msgstr ""

#: ../../ref/templates/builtins.txt:844
# 5e18c9bccf654afdae45e983314a7e6e
msgid "Another solution is to sort the data in the template using the :tfilter:`dictsort` filter, if your data is in a list of dictionaries::"
msgstr ""

#: ../../ref/templates/builtins.txt:850
# 63a5b5ca400e497d985cc7263d362cf8
msgid "Grouping on other properties"
msgstr ""

#: ../../ref/templates/builtins.txt:852
# 591f6fa6ec8243ab913a025ff412992a
msgid "Any valid template lookup is a legal grouping attribute for the regroup tag, including methods, attributes, dictionary keys and list items. For example, if the \"country\" field is a foreign key to a class with an attribute \"description,\" you could use::"
msgstr ""

#: ../../ref/templates/builtins.txt:859
# beb083537e134c5fb536eb1701e35564
msgid "Or, if ``country`` is a field with ``choices``, it will have a :meth:`~django.db.models.Model.get_FOO_display` method available as an attribute, allowing  you to group on the display string rather than the ``choices`` key::"
msgstr ""

#: ../../ref/templates/builtins.txt:866
# 1d681b7671bc4b0d8a2cf5d05ae63e51
msgid "``{{ country.grouper }}`` will now display the value fields from the ``choices`` set rather than the keys."
msgstr ""

#: ../../ref/templates/builtins.txt:872
# abe384aaa7c94228ad859f0eb8636cab
msgid "spaceless"
msgstr ""

#: ../../ref/templates/builtins.txt:874
# 352b33478018416ca3b9a477894e969d
msgid "Removes whitespace between HTML tags. This includes tab characters and newlines."
msgstr ""

#: ../../ref/templates/builtins.txt:885
# 9d9629f452e0491a9f1ba10b0684c790
msgid "This example would return this HTML::"
msgstr ""

#: ../../ref/templates/builtins.txt:889
# b79c1e2714d94905bbae5953ad8dccf2
msgid "Only space between *tags* is removed -- not space between tags and text. In this example, the space around ``Hello`` won't be stripped::"
msgstr ""

#: ../../ref/templates/builtins.txt:901
# cf8d82c24b8149b9807b340431835af5
msgid "ssi"
msgstr ""

#: ../../ref/templates/builtins.txt:903
# ecbba06479df4a31b9387564d748e069
msgid "Outputs the contents of a given file into the page."
msgstr ""

#: ../../ref/templates/builtins.txt:905
# 87c49c3132a642cd8b066ac9599ae013
msgid "Like a simple :ttag:`include` tag, ``{% ssi %}`` includes the contents of another file -- which must be specified using an absolute path -- in the current page::"
msgstr ""

#: ../../ref/templates/builtins.txt:911
# eda60ee153704395b6bf6c0a9d63f7c5
msgid "The first parameter of ``ssi`` can be a quoted literal or any other context variable."
msgstr ""

#: ../../ref/templates/builtins.txt:914
# a13c897e06534d828f277b7cb7875665
msgid "If the optional \"parsed\" parameter is given, the contents of the included file are evaluated as template code, within the current context::"
msgstr ""

#: ../../ref/templates/builtins.txt:919
# d5f7094c974e416bab7f005560ae6c57
msgid "Note that if you use ``{% ssi %}``, you'll need to define :setting:`ALLOWED_INCLUDE_ROOTS` in your Django settings, as a security measure."
msgstr ""

#: ../../ref/templates/builtins.txt:923
# f3f6aacf12da4a5987cbf359c013d545
msgid "See also: :ttag:`{% include %}<include>`."
msgstr ""

#: ../../ref/templates/builtins.txt:928
# 83665f28c6d2415d9a13fbbc956898a7
msgid "templatetag"
msgstr ""

#: ../../ref/templates/builtins.txt:930
# aedff524e94a47b4a4ed2b61083fab5d
msgid "Outputs one of the syntax characters used to compose template tags."
msgstr ""

#: ../../ref/templates/builtins.txt:932
# 96bca33f2f6347989aba9bd6f2aa4e3b
msgid "Since the template system has no concept of \"escaping\", to display one of the bits used in template tags, you must use the ``{% templatetag %}`` tag."
msgstr ""

#: ../../ref/templates/builtins.txt:935
# 8cb78b3cf7e2484aae8004617bb15842
msgid "The argument tells which template bit to output:"
msgstr ""

#: ../../ref/templates/builtins.txt:938
#: ../../ref/templates/builtins.txt:2271
# cf1f5a94c36a4561b18b56f7ccb883a1
# caf36ce0ef21484392aca724253724c1
msgid "Outputs"
msgstr ""

#: ../../ref/templates/builtins.txt:940
# 1c618d317a5140feaa5a5af77a883a03
msgid "``openblock``"
msgstr ""

#: ../../ref/templates/builtins.txt:940
# b9347f62f3d14e049ffd79d9057b9768
msgid "``{%``"
msgstr ""

#: ../../ref/templates/builtins.txt:941
# 9326a862b1dc43bbae5de5316647e06a
msgid "``closeblock``"
msgstr ""

#: ../../ref/templates/builtins.txt:941
# 54c45c50b5bd41c5a601d3c22515b9ec
msgid "``%}``"
msgstr ""

#: ../../ref/templates/builtins.txt:942
# 8fcbe8be63294e27b05f66a689d1af00
msgid "``openvariable``"
msgstr ""

#: ../../ref/templates/builtins.txt:942
# 371c2259186342eea048862222068c6f
msgid "``{{``"
msgstr ""

#: ../../ref/templates/builtins.txt:943
# bb8ae3bfdb57455999547247c8f6e9b9
msgid "``closevariable``"
msgstr ""

#: ../../ref/templates/builtins.txt:943
# 9087701ab4b44afdac8781e00181ac5a
msgid "``}}``"
msgstr ""

#: ../../ref/templates/builtins.txt:944
# 1cb42c1ab3cb4d328b8e5ff9bfbacbb5
msgid "``openbrace``"
msgstr ""

#: ../../ref/templates/builtins.txt:944
# a49e2c005f0c418d883594efc1127e73
msgid "``{``"
msgstr ""

#: ../../ref/templates/builtins.txt:945
# 36bbac99e1d148f8be84ba58710b8bea
msgid "``closebrace``"
msgstr ""

#: ../../ref/templates/builtins.txt:945
# 2e04378aa66144759cb6702f69f80192
msgid "``}``"
msgstr ""

#: ../../ref/templates/builtins.txt:946
# f6fb32ffd983480691e7a37bea11e4df
msgid "``opencomment``"
msgstr ""

#: ../../ref/templates/builtins.txt:946
# 7bce8d79f01b44ce92746ac66370f1d4
msgid "``{#``"
msgstr ""

#: ../../ref/templates/builtins.txt:947
# eea07f057eb24a8d959403f9eaae677d
msgid "``closecomment``"
msgstr ""

#: ../../ref/templates/builtins.txt:947
# 33e6110a3b3f44a28a2196cb6c5ef6d1
msgid "``#}``"
msgstr ""

#: ../../ref/templates/builtins.txt:953
# 9015c80dac014071b39e4b413ae83918
msgid "url"
msgstr ""

#: ../../ref/templates/builtins.txt:955
# ba1ccc5a11954dd3a10c542e0aaf8668
msgid "Returns an absolute path reference (a URL without the domain name) matching a given view function and optional parameters. This is a way to output links without violating the DRY principle by having to hard-code URLs in your templates::"
msgstr ""

#: ../../ref/templates/builtins.txt:962
# 4324f56868dc453191bfaca4abbd53ed
msgid "The first argument is a path to a view function in the format ``package.package.module.function``. It can be a quoted literal or any other context variable. Additional arguments are optional and should be space-separated values that will be used as arguments in the URL. The example above shows passing positional arguments. Alternatively you may use keyword syntax::"
msgstr ""

#: ../../ref/templates/builtins.txt:971
# d538a09a981b4bbab9c74ef78ae3c00a
msgid "Do not mix both positional and keyword syntax in a single call. All arguments required by the URLconf should be present."
msgstr ""

#: ../../ref/templates/builtins.txt:974
# 17e22dbb459142d6b250e6c49d8345d9
msgid "For example, suppose you have a view, ``app_views.client``, whose URLconf takes a client ID (here, ``client()`` is a method inside the views file ``app_views.py``). The URLconf line might look like this:"
msgstr ""

#: ../../ref/templates/builtins.txt:982
# 5493be9acba3482d98a1e69c4dd7527a
msgid "If this app's URLconf is included into the project's URLconf under a path such as this:"
msgstr ""

#: ../../ref/templates/builtins.txt:989
# dc4ac086d523417f8c8c555df666a418
msgid "...then, in a template, you can create a link to this view like this::"
msgstr ""

#: ../../ref/templates/builtins.txt:993
# ab6ea55a1379499c84f48e1d6be55e20
msgid "The template tag will output the string ``/clients/client/123/``."
msgstr ""

#: ../../ref/templates/builtins.txt:995
# 5450878dfc0b4df3838ce4b48911f254
msgid "If you're using :ref:`named URL patterns <naming-url-patterns>`, you can refer to the name of the pattern in the ``url`` tag instead of using the path to the view."
msgstr ""

#: ../../ref/templates/builtins.txt:999
# 3602380652ee44b3b06e23c6b5216b4d
msgid "Note that if the URL you're reversing doesn't exist, you'll get an :exc:`~django.core.urlresolvers.NoReverseMatch` exception raised, which will cause your site to display an error page."
msgstr ""

#: ../../ref/templates/builtins.txt:1003
# c11675fec8194e88b3ebc4aea8b9331c
msgid "If you'd like to retrieve a URL without displaying it, you can use a slightly different call::"
msgstr ""

#: ../../ref/templates/builtins.txt:1011
# bf0b0c2f70744767bc8f33a9932edf4c
msgid "This ``{% url ... as var %}`` syntax will *not* cause an error if the view is missing. In practice you'll use this to link to views that are optional::"
msgstr ""

#: ../../ref/templates/builtins.txt:1019
# 701f40dd1713450b9f20e6269c864a9b
msgid "If you'd like to retrieve a namespaced URL, specify the fully qualified name::"
msgstr ""

#: ../../ref/templates/builtins.txt:1023
# 15c6eb1dfddd45e2bf85542ea248b99f
msgid "This will follow the normal :ref:`namespaced URL resolution strategy <topics-http-reversing-url-namespaces>`, including using any hints provided by the context as to the current application."
msgstr ""

#: ../../ref/templates/builtins.txt:1029
# 3a40bde19aba4b2c937a3a1f45f4974b
msgid "Don't forget to put quotes around the function path or pattern name!"
msgstr ""

#: ../../ref/templates/builtins.txt:1040
# 1d33cc8779f646a1b9c4a54e6bddd806
msgid "verbatim"
msgstr ""

#: ../../ref/templates/builtins.txt:1044
# 98047b54a48b4fce892c10c76316767d
msgid "Stops the template engine from rendering the contents of this block tag."
msgstr ""

#: ../../ref/templates/builtins.txt:1046
# 0c66791525d447b2bb31e609fb9cda6c
msgid "A common use is to allow a Javascript template layer that collides with Django's syntax. For example::"
msgstr ""

#: ../../ref/templates/builtins.txt:1053
# c43694197ee74bc287a2879ad048c99e
msgid "You can also designate a specific closing tag, allowing the use of ``{% endverbatim %}`` as part of the unrendered contents::"
msgstr ""

#: ../../ref/templates/builtins.txt:1063
# 8cf07a20554047a3b507c518981fda09
msgid "widthratio"
msgstr ""

#: ../../ref/templates/builtins.txt:1065
# 8c38984e7d0e4a85b155fbeaf20222b0
msgid "For creating bar charts and such, this tag calculates the ratio of a given value to a maximum value, and then applies that ratio to a constant."
msgstr ""

#: ../../ref/templates/builtins.txt:1073
# e82fea656d764bc0821ec1bcae052ab8
msgid "If ``this_value`` is 175, ``max_value`` is 200, and ``max_width`` is 100, the image in the above example will be 88 pixels wide (because 175/200 = .875; .875 * 100 = 87.5 which is rounded up to 88)."
msgstr ""

#: ../../ref/templates/builtins.txt:1080
# 8568a822961844a6add17c29fedef2c3
msgid "with"
msgstr ""

#: ../../ref/templates/builtins.txt:1082
# 4a3c4125077841c89669cdf7478f83d8
msgid "Caches a complex variable under a simpler name. This is useful when accessing an \"expensive\" method (e.g., one that hits the database) multiple times."
msgstr ""

#: ../../ref/templates/builtins.txt:1091
# d610105859a54758ab4de164b66efb00
msgid "The populated variable (in the example above, ``total``) is only available between the ``{% with %}`` and ``{% endwith %}`` tags."
msgstr ""

#: ../../ref/templates/builtins.txt:1094
# 2b42b0d1862544439fcf10a138854730
msgid "You can assign more than one context variable::"
msgstr ""

#: ../../ref/templates/builtins.txt:1100
# 2beae7eaf31e409b8c0b4d0a3801fcea
msgid "The previous more verbose format is still supported: ``{% with business.employees.count as total %}``"
msgstr ""

#: ../../ref/templates/builtins.txt:1106
# 5f8f590d34734e5399cacc1604c6c2d4
msgid "Built-in filter reference"
msgstr ""

#: ../../ref/templates/builtins.txt:1111
# eff8937f76824150aca723c524713412
msgid "add"
msgstr ""

#: ../../ref/templates/builtins.txt:1113
# 96863ef96bfe4f5e8dd580e2d1e7595b
msgid "Adds the argument to the value."
msgstr ""

#: ../../ref/templates/builtins.txt:1119
# cd164a03d4964e3bbe66bd14660cacb2
msgid "If ``value`` is ``4``, then the output will be ``6``."
msgstr ""

#: ../../ref/templates/builtins.txt:1121
# 94f558921f55436cbfaee49acedf2463
msgid "This filter will first try to coerce both values to integers. If this fails, it'll attempt to add the values together anyway. This will work on some data types (strings, list, etc.) and fail on others. If it fails, the result will be an empty string."
msgstr ""

#: ../../ref/templates/builtins.txt:1126
# 69407d597fd64e8c84c550f47c148226
msgid "For example, if we have::"
msgstr ""

#: ../../ref/templates/builtins.txt:1130
# 6e9de2af40c44c439971e9a5918d991f
msgid "and ``first`` is ``[1, 2, 3]`` and ``second`` is ``[4, 5, 6]``, then the output will be ``[1, 2, 3, 4, 5, 6]``."
msgstr ""

#: ../../ref/templates/builtins.txt:1135
# 4aca4a7fee94405aad4e22ce02c28fde
msgid "Strings that can be coerced to integers will be **summed**, not concatenated, as in the first example above."
msgstr ""

#: ../../ref/templates/builtins.txt:1141
# c396500dfa3f446f81946e9313ae6205
msgid "addslashes"
msgstr ""

#: ../../ref/templates/builtins.txt:1143
# 0ae8e247ebdd4db391ccd71b009d3856
msgid "Adds slashes before quotes. Useful for escaping strings in CSV, for example."
msgstr ""

#: ../../ref/templates/builtins.txt:1149
# 2043172b3d2b401fb30bd0c1714db209
msgid "If ``value`` is ``\"I'm using Django\"``, the output will be ``\"I\\'m using Django\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1155
# a1fa736c60ae4404a38f924a7c91cdd2
msgid "capfirst"
msgstr ""

#: ../../ref/templates/builtins.txt:1157
# 8dbee7ea13d54f94ad3ef5782bc7c8eb
msgid "Capitalizes the first character of the value."
msgstr ""

#: ../../ref/templates/builtins.txt:1163
# a95d92a8870243b19149ce7b4c27546f
msgid "If ``value`` is ``\"django\"``, the output will be ``\"Django\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1168
# 9da22f021b884d1f8c96b16e9a0f6bbf
msgid "center"
msgstr ""

#: ../../ref/templates/builtins.txt:1170
# 6d4cdbdecc2a4a44a61b188aee1a4961
msgid "Centers the value in a field of a given width."
msgstr ""

#: ../../ref/templates/builtins.txt:1176
# f1d8f9908137401a9c2137b4896a662a
msgid "If ``value`` is ``\"Django\"``, the output will be ``\"     Django    \"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1181
# 684757274c66494a8346aa809dc99c59
msgid "cut"
msgstr ""

#: ../../ref/templates/builtins.txt:1183
# 913b56a7cbb1421fbda9bb3b7819b499
msgid "Removes all values of arg from the given string."
msgstr ""

#: ../../ref/templates/builtins.txt:1189
# 92068b9eb23a40808106489594288200
msgid "If ``value`` is ``\"String with spaces\"``, the output will be ``\"Stringwithspaces\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1195
# 1750ecfe84ce4dbe9227d371384150eb
msgid "date"
msgstr ""

#: ../../ref/templates/builtins.txt:1197
# 30d9a6ea148743b180ecb1deb8577ffe
msgid "Formats a date according to the given format."
msgstr ""

#: ../../ref/templates/builtins.txt:1199
# 03e4c0c5c04148b1ae2b28aac1b9cbd1
msgid "Uses a similar format as PHP's ``date()`` function (http://php.net/date) with some differences."
msgstr ""

#: ../../ref/templates/builtins.txt:1202
# b1f00a91fb9c489292d04ad5859b8857
msgid "Available format strings:"
msgstr ""

#: ../../ref/templates/builtins.txt:1205
# fa9902f81d43463397b4290b1051b783
msgid "Format character"
msgstr ""

#: ../../ref/templates/builtins.txt:1205
# 84b3e9d43db742d5a26615e163a80086
msgid "Example output"
msgstr ""

#: ../../ref/templates/builtins.txt:1207
# 024be96bc88048ada453b5e320bd6cf7
msgid "a"
msgstr ""

#: ../../ref/templates/builtins.txt:1207
# 51fa7ec68d59430d824f85fd7d0147ac
msgid "``'a.m.'`` or ``'p.m.'`` (Note that this is slightly different than PHP's output, because this includes periods to match Associated Press style.)"
msgstr ""

#: ../../ref/templates/builtins.txt:1207
# 005c6a85c1d44c56ae795004d9e84790
msgid "``'a.m.'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1211
# f78bd1aa25d94af78ded0092ec6534e9
msgid "A"
msgstr ""

#: ../../ref/templates/builtins.txt:1211
# 4d71dd131f6b4e2a830c08bb0116933a
msgid "``'AM'`` or ``'PM'``."
msgstr ""

#: ../../ref/templates/builtins.txt:1211
# 318c456144e143fd9bce3c0fb1637068
msgid "``'AM'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1212
# 1febfb84eb5c45678567af3fbd2d4079
msgid "b"
msgstr ""

#: ../../ref/templates/builtins.txt:1212
# 1cf17d78acda46c7a05ebc4ad8778316
msgid "Month, textual, 3 letters, lowercase."
msgstr ""

#: ../../ref/templates/builtins.txt:1212
# 6d9dad76dc1f49dca91275dca4daa43f
msgid "``'jan'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1213
# 75ae2c81a7054a228e3e21294454f065
msgid "B"
msgstr ""

#: ../../ref/templates/builtins.txt:1213
# 8b7f2e13ab4c4bdbbfe2447eb1a1c383
msgid "Not implemented."
msgstr ""

#: ../../ref/templates/builtins.txt:1214
# 0e3ef500664d4b63b3f97e8547dada7a
msgid "c"
msgstr ""

#: ../../ref/templates/builtins.txt:1214
# d762f14357d247db8152590e03cc0010
msgid "ISO 8601 format. (Note: unlike others formatters, such as \"Z\", \"O\" or \"r\", the \"c\" formatter will not add timezone offset if value is a naive datetime (see :class:`datetime.tzinfo`)."
msgstr ""

#: ../../ref/templates/builtins.txt:1214
# 8af543a0496a41b890057c14dac8735f
msgid "``2008-01-02T10:30:00.000123+02:00``, or ``2008-01-02T10:30:00.000123`` if the datetime is naive"
msgstr ""

#: ../../ref/templates/builtins.txt:1219
# e5183658e69f41c8a542d9efa2c715de
msgid "d"
msgstr ""

#: ../../ref/templates/builtins.txt:1219
# f6eb8961e43f47d78cdd9718c773850d
msgid "Day of the month, 2 digits with leading zeros."
msgstr ""

#: ../../ref/templates/builtins.txt:1219
# c8d52d6edc3b4d8a882083135491b77b
msgid "``'01'`` to ``'31'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1221
# 6c7591618e314cb38626a58041406781
msgid "D"
msgstr ""

#: ../../ref/templates/builtins.txt:1221
# a5e998461e9e4c5cb96c3e15c95a3da5
msgid "Day of the week, textual, 3 letters."
msgstr ""

#: ../../ref/templates/builtins.txt:1221
# 2cba3bf68c4d49c1b51c6641f61ee430
msgid "``'Fri'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1222
# ca7685d858644071931cda21134e681b
msgid "e"
msgstr ""

#: ../../ref/templates/builtins.txt:1222
# 31fc42630a3949f18931b5f5345359fb
msgid "Timezone name. Could be in any format, or might return an empty string, depending on the datetime."
msgstr ""

#: ../../ref/templates/builtins.txt:1223
# 16ffaab5166d404fb16bb85cb814e658
msgid "``''``, ``'GMT'``, ``'-500'``, ``'US/Eastern'``, etc."
msgstr ""

#: ../../ref/templates/builtins.txt:1225
# d898c946d92444c5ac64b2bbd4eb4908
msgid "E"
msgstr ""

#: ../../ref/templates/builtins.txt:1225
# f4231965dd3f4ee58a5ee8f7d4e4b2fd
msgid "Month, locale specific alternative representation usually used for long date representation."
msgstr ""

#: ../../ref/templates/builtins.txt:1227
# 5ca61f5109bd46ca94fc6609c7ac0a7b
msgid "``'listopada'`` (for Polish locale, as opposed to ``'Listopad'``)"
msgstr ""

#: ../../ref/templates/builtins.txt:1228
# 8543bd2ef3194ec8ad771e5bef0ef785
msgid "f"
msgstr ""

#: ../../ref/templates/builtins.txt:1228
# c006c15e8c5b46609ed75613212cce9a
msgid "Time, in 12-hour hours and minutes, with minutes left off if they're zero. Proprietary extension."
msgstr ""

#: ../../ref/templates/builtins.txt:1228
# 229b35104ce84dc3b27a016d46151038
msgid "``'1'``, ``'1:30'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1231
# e29d3d4f695a4a1c8375524d7aa28013
msgid "F"
msgstr ""

#: ../../ref/templates/builtins.txt:1231
# 37ce9a7800de4c1fb66134161bb603f7
msgid "Month, textual, long."
msgstr ""

#: ../../ref/templates/builtins.txt:1231
# 65c0c3f1e240454d90022d8c3d3f1570
msgid "``'January'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1232
# 26872a15c558431eabc605c91fe5f44b
msgid "g"
msgstr ""

#: ../../ref/templates/builtins.txt:1232
# 44d6724b9e1a4fe68aaa0b7a844fc9b6
msgid "Hour, 12-hour format without leading zeros."
msgstr ""

#: ../../ref/templates/builtins.txt:1232
#: ../../ref/templates/builtins.txt:1247
# b813a5d5fe5a40b9bf14e3f2665c30f9
# 0528385e1b674b51949eeb869f0880b4
msgid "``'1'`` to ``'12'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1234
# b33d9a87335e4ede81edafe0fcd81797
msgid "G"
msgstr ""

#: ../../ref/templates/builtins.txt:1234
# 4ad9a2f26ea0429bb075ebb1345fa87c
msgid "Hour, 24-hour format without leading zeros."
msgstr ""

#: ../../ref/templates/builtins.txt:1234
# 3e91c2a215cc405aa0cfb11f50ca374d
msgid "``'0'`` to ``'23'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1236
# 05e921e64b354f6391dd27444a6cb861
msgid "h"
msgstr ""

#: ../../ref/templates/builtins.txt:1236
# cfbae653eeb6468fbf50d17c00789b35
msgid "Hour, 12-hour format."
msgstr ""

#: ../../ref/templates/builtins.txt:1236
#: ../../ref/templates/builtins.txt:1245
# 87c6c45819b94be89def6f60d3b38ce4
# f4af72d06e0f46b69fd2fce2abce1fe3
msgid "``'01'`` to ``'12'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1237
# 923a7474e8a04534b91bd5e3886c7419
msgid "H"
msgstr ""

#: ../../ref/templates/builtins.txt:1237
# 277a1d743035475591628508f602467a
msgid "Hour, 24-hour format."
msgstr ""

#: ../../ref/templates/builtins.txt:1237
# 52baa78fb6aa48aa90cc3d613bbce954
msgid "``'00'`` to ``'23'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1238
# 29021dc7538648eba7f1c5818730fdf3
msgid "i"
msgstr ""

#: ../../ref/templates/builtins.txt:1238
# e8336a0198e54143a47f5a9f2c2a6fd3
msgid "Minutes."
msgstr ""

#: ../../ref/templates/builtins.txt:1238
#: ../../ref/templates/builtins.txt:1260
# 154c65a395d74348b67e0f111c67b67e
# 84e5761684f64a45b9a751ed88a0cbd6
msgid "``'00'`` to ``'59'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1239
# 66e06a36f10a48319b0c2c0e2e902d94
msgid "I"
msgstr ""

#: ../../ref/templates/builtins.txt:1239
# 582fb6b89ea84c31bbc6466f57d73406
msgid "Daylight Savings Time, whether it's in effect or not."
msgstr ""

#: ../../ref/templates/builtins.txt:1239
# 7f2c2f6fd4374de4bc032172a80b7a77
msgid "``'1'`` or ``'0'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1241
# 846f2a3cc163493586bb1cd37450c46f
msgid "j"
msgstr ""

#: ../../ref/templates/builtins.txt:1241
# d579a90109ed4302a672b6f7ece122d2
msgid "Day of the month without leading zeros."
msgstr ""

#: ../../ref/templates/builtins.txt:1241
# 36b9b52493f140cba01f8d0dc2ce685a
msgid "``'1'`` to ``'31'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1243
# 0cd98da2063b4ae5aa3c4d00c01d9082
msgid "l"
msgstr ""

#: ../../ref/templates/builtins.txt:1243
# d315d72f27ee4b5a97e473f0ddf8bdaa
msgid "Day of the week, textual, long."
msgstr ""

#: ../../ref/templates/builtins.txt:1243
# a003ddaadafc485db33d4f94112770ad
msgid "``'Friday'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1244
# ca5f851b14b5432381b5efe89cd79b2b
msgid "L"
msgstr ""

#: ../../ref/templates/builtins.txt:1244
# 3c8d14a844db4fa2a08e0b964dc9365c
msgid "Boolean for whether it's a leap year."
msgstr ""

#: ../../ref/templates/builtins.txt:1244
# c3e7fb3ec56d4f69957ff8671ba7c83d
msgid "``True`` or ``False``"
msgstr ""

#: ../../ref/templates/builtins.txt:1245
# 02ca595037e64c8884891398dca3799a
msgid "m"
msgstr ""

#: ../../ref/templates/builtins.txt:1245
# 39651bbf04294063a26d5eeda463b7ea
msgid "Month, 2 digits with leading zeros."
msgstr ""

#: ../../ref/templates/builtins.txt:1246
# a1f89e1794ab4c55b08e84dd11154d59
msgid "M"
msgstr ""

#: ../../ref/templates/builtins.txt:1246
# 6b0fa06156a04c809a4c921e3360b068
msgid "Month, textual, 3 letters."
msgstr ""

#: ../../ref/templates/builtins.txt:1246
# f4f18a58478e4a69bc7e6c90eb2ab421
msgid "``'Jan'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1247
# e69c1afc1af44fb395b406fae4b39236
msgid "n"
msgstr ""

#: ../../ref/templates/builtins.txt:1247
# a280d723b7384af0a1875e5927868ef9
msgid "Month without leading zeros."
msgstr ""

#: ../../ref/templates/builtins.txt:1248
# 8ea7a256c2ad40c8abc27d07fc444b91
msgid "N"
msgstr ""

#: ../../ref/templates/builtins.txt:1248
# e953dd51ca0f4bab9380a31bc68e3811
msgid "Month abbreviation in Associated Press style. Proprietary extension."
msgstr ""

#: ../../ref/templates/builtins.txt:1248
# 25996af8cd8643a9891fe7cfc72ccac0
msgid "``'Jan.'``, ``'Feb.'``, ``'March'``, ``'May'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1250
# 8266461095f64680a8946490f0c1b52c
msgid "o"
msgstr ""

#: ../../ref/templates/builtins.txt:1250
# 84d28c0369504732b2c6cd43e6a858d8
msgid "ISO-8601 week-numbering year, corresponding to the ISO-8601 week number (W)"
msgstr ""

#: ../../ref/templates/builtins.txt:1250
#: ../../ref/templates/builtins.txt:1273
# a670f6cb10f44c1c8209de96e2d4c50c
# 7f4020e7d4c34c838075a1c0541b3fd5
msgid "``'1999'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1253
# 7f2c13061a114c9f8e5931815302cf6c
msgid "O"
msgstr ""

#: ../../ref/templates/builtins.txt:1253
# c51fed12472a482da97749c44a9b6a74
msgid "Difference to Greenwich time in hours."
msgstr ""

#: ../../ref/templates/builtins.txt:1253
# 7316caba7dd3479dae6b827fc3964289
msgid "``'+0200'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1254
# 5c8fec1bb2a044e498eee4135f155426
msgid "P"
msgstr ""

#: ../../ref/templates/builtins.txt:1254
# 9f4678b952a64971ad9877ad6be4fc9e
msgid "Time, in 12-hour hours, minutes and 'a.m.'/'p.m.', with minutes left off if they're zero and the special-case strings 'midnight' and 'noon' if appropriate. Proprietary extension."
msgstr ""

#: ../../ref/templates/builtins.txt:1254
# 1f2422ae774647dcaacfd7680adf69ae
msgid "``'1 a.m.'``, ``'1:30 p.m.'``, ``'midnight'``, ``'noon'``, ``'12:30 p.m.'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1259
# 267f130794e146779971b1257c9b2611
msgid "r"
msgstr ""

#: ../../ref/templates/builtins.txt:1259
# 3b745f3db5f5417fa5231e67fc0253f5
msgid ":rfc:`2822` formatted date."
msgstr ""

#: ../../ref/templates/builtins.txt:1259
# 823fe49c87974c1c8def022637ab3197
msgid "``'Thu, 21 Dec 2000 16:01:07 +0200'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1260
# 01e984d176994532ad498a2c3f802b98
msgid "s"
msgstr ""

#: ../../ref/templates/builtins.txt:1260
# fb8a6fcb3aaa4e2794d63f630bb7bbaa
msgid "Seconds, 2 digits with leading zeros."
msgstr ""

#: ../../ref/templates/builtins.txt:1261
# a35d808ca99b429f89c75e93a78c4dd4
msgid "S"
msgstr ""

#: ../../ref/templates/builtins.txt:1261
# 811518af3d8a4061a7c8cee336750743
msgid "English ordinal suffix for day of the month, 2 characters."
msgstr ""

#: ../../ref/templates/builtins.txt:1261
# 991158756ef94db7bda37265789bf137
msgid "``'st'``, ``'nd'``, ``'rd'`` or ``'th'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1263
# 660dea9bbffa468db209bb26d4864a9a
msgid "t"
msgstr ""

#: ../../ref/templates/builtins.txt:1263
# 8932692299e842e2b444d65ff7d7a273
msgid "Number of days in the given month."
msgstr ""

#: ../../ref/templates/builtins.txt:1263
# 056222756d7840ac839637345b7d1934
msgid "``28`` to ``31``"
msgstr ""

#: ../../ref/templates/builtins.txt:1264
# c25e444900ea46b59f19d515c8c5f79b
msgid "T"
msgstr ""

#: ../../ref/templates/builtins.txt:1264
# 90af03b781dd46f8aaa0ad4be65717df
msgid "Time zone of this machine."
msgstr ""

#: ../../ref/templates/builtins.txt:1264
# e7dcb9895ff14e0eac986df35ed8de26
msgid "``'EST'``, ``'MDT'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1265
# 2bd0dbc1e92a4625ad100e03249bc8b7
msgid "u"
msgstr ""

#: ../../ref/templates/builtins.txt:1265
# f805e331962a42bb89c2e2e305f6a7c5
msgid "Microseconds."
msgstr ""

#: ../../ref/templates/builtins.txt:1265
# e0906c6843b140cf8e91c810767b2a2e
msgid "``000000`` to ``999999``"
msgstr ""

#: ../../ref/templates/builtins.txt:1266
# dde23c568a0f4aa3989a1e3ba1f64cc1
msgid "U"
msgstr ""

#: ../../ref/templates/builtins.txt:1266
# 8c05ccbdbcde4fe78810848dfe7a0730
msgid "Seconds since the Unix Epoch (January 1 1970 00:00:00 UTC)."
msgstr ""

#: ../../ref/templates/builtins.txt:1268
# 2046731e62a440f6a0057f0d2bc1fcdc
msgid "w"
msgstr ""

#: ../../ref/templates/builtins.txt:1268
# b0877c262dd64598b8baaf24f4fb6b98
msgid "Day of the week, digits without leading zeros."
msgstr ""

#: ../../ref/templates/builtins.txt:1268
# 543af862e7504bccace3a96a9124eb61
msgid "``'0'`` (Sunday) to ``'6'`` (Saturday)"
msgstr ""

#: ../../ref/templates/builtins.txt:1270
# 028924563bdd4425b71f460a64d30f15
msgid "W"
msgstr ""

#: ../../ref/templates/builtins.txt:1270
# 9ea0184122f642b8a00f883c75fcec73
msgid "ISO-8601 week number of year, with weeks starting on Monday."
msgstr ""

#: ../../ref/templates/builtins.txt:1270
# e9cb88cedc614ce88ae0180c5cb0eec6
msgid "``1``, ``53``"
msgstr ""

#: ../../ref/templates/builtins.txt:1272
# 624b5cf24246454c9ebe5a4138618e09
msgid "y"
msgstr ""

#: ../../ref/templates/builtins.txt:1272
# 47e9a9417bb941108a0c7deee523dfb3
msgid "Year, 2 digits."
msgstr ""

#: ../../ref/templates/builtins.txt:1272
# a2e471f598aa4463b2cb2f5db3764e13
msgid "``'99'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1273
# 50b52c95493f448b8bf4b1ade475dde3
msgid "Y"
msgstr ""

#: ../../ref/templates/builtins.txt:1273
# 6fcee8102f1c4a7bb233f4e4ca03904a
msgid "Year, 4 digits."
msgstr ""

#: ../../ref/templates/builtins.txt:1274
# 491bc6d1e0d44700b6fea745cd44b983
msgid "z"
msgstr ""

#: ../../ref/templates/builtins.txt:1274
# d9b91c8a5a5944f7b694d8becdbc09b7
msgid "Day of the year."
msgstr ""

#: ../../ref/templates/builtins.txt:1274
# 48ea98ce9dec4dda995fed6b39251a30
msgid "``0`` to ``365``"
msgstr ""

#: ../../ref/templates/builtins.txt:1275
# 463fd039d266405e9b02983dd0ebb89e
msgid "Z"
msgstr ""

#: ../../ref/templates/builtins.txt:1275
# 5b460226ac57459b8ec9eed4efdf23aa
msgid "Time zone offset in seconds. The offset for timezones west of UTC is always negative, and for those east of UTC is always positive."
msgstr ""

#: ../../ref/templates/builtins.txt:1275
# 7b3c06e3b090491483c06040d5da7942
msgid "``-43200`` to ``43200``"
msgstr ""

#: ../../ref/templates/builtins.txt:1283
# f0a05172cbb74323a70ec33883e89b7b
msgid "The ``e`` and ``o`` format specification characters were added in Django 1.4."
msgstr ""

#: ../../ref/templates/builtins.txt:1289
# 54d1820dbd1243698a028c3452a4c8fd
msgid "If ``value`` is a ``datetime`` object (e.g., the result of ``datetime.datetime.now()``), the output will be the string ``'Wed 09 Jan 2008'``."
msgstr ""

#: ../../ref/templates/builtins.txt:1293
# d2c6cdc972b24df584fa2e66e71a56ee
msgid "The format passed can be one of the predefined ones :setting:`DATE_FORMAT`, :setting:`DATETIME_FORMAT`, :setting:`SHORT_DATE_FORMAT` or :setting:`SHORT_DATETIME_FORMAT`, or a custom format that uses the format specifiers shown in the table above. Note that predefined formats may vary depending on the current locale."
msgstr ""

#: ../../ref/templates/builtins.txt:1299
# 05067338efc8475998455d2a081978bd
msgid "Assuming that :setting:`USE_L10N` is ``True`` and :setting:`LANGUAGE_CODE` is, for example, ``\"es\"``, then for::"
msgstr ""

#: ../../ref/templates/builtins.txt:1304
# 79a7ffc7438246bd8d834145826eb63e
msgid "the output would be the string ``\"09/01/2008\"`` (the ``\"SHORT_DATE_FORMAT\"`` format specifier for the ``es`` locale as shipped with Django is ``\"d/m/Y\"``)."
msgstr ""

#: ../../ref/templates/builtins.txt:1307
#: ../../ref/templates/builtins.txt:1982
# cd34a26ec3384f3d877b19a305ef2b86
# f1da2a95590a4498857fea13dd189d00
msgid "When used without a format string::"
msgstr ""

#: ../../ref/templates/builtins.txt:1311
# c0d4e87a55f74325be3512da00bd83bd
msgid "...the formatting string defined in the :setting:`DATE_FORMAT` setting will be used, without applying any localization."
msgstr ""

#: ../../ref/templates/builtins.txt:1317
# 40e72eaa992a4fa6bb3a83f8647356ed
msgid "default"
msgstr ""

#: ../../ref/templates/builtins.txt:1319
# 634cb20c1a2244a38405587319ee1b39
msgid "If value evaluates to ``False``, uses the given default. Otherwise, uses the value."
msgstr ""

#: ../../ref/templates/builtins.txt:1326
# 4f54f499b9ea4476924753faadf20a97
msgid "If ``value`` is ``\"\"`` (the empty string), the output will be ``nothing``."
msgstr ""

#: ../../ref/templates/builtins.txt:1331
# efd5e57987634855bd1a03ebdf4b31e5
msgid "default_if_none"
msgstr ""

#: ../../ref/templates/builtins.txt:1333
# 65bc0ff38c6a491fb1e8da62a9c1326c
msgid "If (and only if) value is ``None``, uses the given default. Otherwise, uses the value."
msgstr ""

#: ../../ref/templates/builtins.txt:1336
# 86a29a2a3d0b47fa860f44e486356818
msgid "Note that if an empty string is given, the default value will *not* be used. Use the :tfilter:`default` filter if you want to fallback for empty strings."
msgstr ""

#: ../../ref/templates/builtins.txt:1343
# d1e1bec2b05141e9bdbfb3402380b429
msgid "If ``value`` is ``None``, the output will be the string ``\"nothing\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1348
# b7f24aa03fcd4a44858116d789178efd
msgid "dictsort"
msgstr ""

#: ../../ref/templates/builtins.txt:1350
# c5796a8801cc44efb05643d74143d082
msgid "Takes a list of dictionaries and returns that list sorted by the key given in the argument."
msgstr ""

#: ../../ref/templates/builtins.txt:1357
# d57067aa0ae74a67b6809595e85145a8
msgid "If ``value`` is:"
msgstr ""

#: ../../ref/templates/builtins.txt:1367
# d7ff96ed08614bb486bd0af052bc59a5
msgid "then the output would be:"
msgstr ""

#: ../../ref/templates/builtins.txt:1380
# 06550db5638344c999fa21dc95103219
msgid "dictsortreversed"
msgstr ""

#: ../../ref/templates/builtins.txt:1382
# a9ec3275d70c444f9bcf1114161c9a98
msgid "Takes a list of dictionaries and returns that list sorted in reverse order by the key given in the argument. This works exactly the same as the above filter, but the returned value will be in reverse order."
msgstr ""

#: ../../ref/templates/builtins.txt:1389
# 80907edcb12d4c298d8e7eb80345d42a
msgid "divisibleby"
msgstr ""

#: ../../ref/templates/builtins.txt:1391
# cdb076cad03f403fa1a2804ebd597fbb
msgid "Returns ``True`` if the value is divisible by the argument."
msgstr ""

#: ../../ref/templates/builtins.txt:1397
# 46281670a6424a2487e3e00245e89401
msgid "If ``value`` is ``21``, the output would be ``True``."
msgstr ""

#: ../../ref/templates/builtins.txt:1402
# 3884d5ea75294017807d6d71e81275ed
msgid "escape"
msgstr ""

#: ../../ref/templates/builtins.txt:1404
# 1cb274e8c0fb41b0b2aa671948f4ada3
msgid "Escapes a string's HTML. Specifically, it makes these replacements:"
msgstr ""

#: ../../ref/templates/builtins.txt:1406
# 5758e461388b4272a60655186bf13042
msgid "``<`` is converted to ``&lt;``"
msgstr ""

#: ../../ref/templates/builtins.txt:1407
# 7f8a9f07b1094e33bf90b288caf6d1a5
msgid "``>`` is converted to ``&gt;``"
msgstr ""

#: ../../ref/templates/builtins.txt:1408
# 55f3b4aa940940579ab5b404c30b57b1
msgid "``'`` (single quote) is converted to ``&#39;``"
msgstr ""

#: ../../ref/templates/builtins.txt:1409
# 01fa022c49414bb28c97dd33e5e217f8
msgid "``\"`` (double quote) is converted to ``&quot;``"
msgstr ""

#: ../../ref/templates/builtins.txt:1410
# 06218de140dd4331878495d149d4787c
msgid "``&`` is converted to ``&amp;``"
msgstr ""

#: ../../ref/templates/builtins.txt:1412
# 2a13605280df447490d144e278cfc8f4
msgid "The escaping is only applied when the string is output, so it does not matter where in a chained sequence of filters you put ``escape``: it will always be applied as though it were the last filter. If you want escaping to be applied immediately, use the :tfilter:`force_escape` filter."
msgstr ""

#: ../../ref/templates/builtins.txt:1417
# c76ff96a2c6e45a090f08c75b8506bde
msgid "Applying ``escape`` to a variable that would normally have auto-escaping applied to the result will only result in one round of escaping being done. So it is safe to use this function even in auto-escaping environments. If you want multiple escaping passes to be applied, use the :tfilter:`force_escape` filter."
msgstr ""

#: ../../ref/templates/builtins.txt:1425
# 1ec1da2e6ad040c78cb1b2ec4133c561
msgid "escapejs"
msgstr ""

#: ../../ref/templates/builtins.txt:1427
# 1a212c539144486390bfe93f51674b88
msgid "Escapes characters for use in JavaScript strings. This does *not* make the string safe for use in HTML, but does protect you from syntax errors when using templates to generate JavaScript/JSON."
msgstr ""

#: ../../ref/templates/builtins.txt:1435
# 980ef588749043e28e88507829e9c20c
msgid "If ``value`` is ``\"testing\\r\\njavascript \\'string\" <b>escaping</b>\"``, the output will be ``\"testing\\\\u000D\\\\u000Ajavascript \\\\u0027string\\\\u0022 \\\\u003Cb\\\\u003Eescaping\\\\u003C/b\\\\u003E\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1441
# cf9f93e574494bf6b3624460b675de08
msgid "filesizeformat"
msgstr ""

#: ../../ref/templates/builtins.txt:1443
# 87b02a933eee422ba21f21d724271f9f
msgid "Formats the value like a 'human-readable' file size (i.e. ``'13 KB'``, ``'4.1 MB'``, ``'102 bytes'``, etc)."
msgstr ""

#: ../../ref/templates/builtins.txt:1450
# 2f27bd3aebdc4776b9c5f657d3e88745
msgid "If ``value`` is 123456789, the output would be ``117.7 MB``."
msgstr ""

#: ../../ref/templates/builtins.txt:1454
# b0e4acd727804860a5cb093a671974c8
msgid "Strictly speaking, ``filesizeformat`` does not conform to the International System of Units which recommends using KiB, MiB, GiB, etc. when byte sizes are calculated in powers of 1024 (which is the case here). Instead, Django uses traditional unit names (KB, MB, GB, etc.) corresponding to names that are more commonly used."
msgstr ""

#: ../../ref/templates/builtins.txt:1463
# be049af63ce140a8bd6710dfc994555d
msgid "first"
msgstr ""

#: ../../ref/templates/builtins.txt:1465
# 4a147787fdfd4289b9b8b24966fa99bd
msgid "Returns the first item in a list."
msgstr ""

#: ../../ref/templates/builtins.txt:1471
# 3ca8eca481b0409fae4790434db5a2cf
msgid "If ``value`` is the list ``['a', 'b', 'c']``, the output will be ``'a'``."
msgstr ""

#: ../../ref/templates/builtins.txt:1476
# 57978173682e40148208da433d9f60d8
msgid "fix_ampersands"
msgstr ""

#: ../../ref/templates/builtins.txt:1480
# 7aec7ca46f4442a78dded6db8aad1248
msgid "This is rarely useful as ampersands are automatically escaped. See :tfilter:`escape` for more information."
msgstr ""

#: ../../ref/templates/builtins.txt:1483
# 69ed473a324b454188b7e9c98a3c0a63
msgid "Replaces ampersands with ``&amp;`` entities."
msgstr ""

#: ../../ref/templates/builtins.txt:1489
# f442cd5df3bc4d4d99ad8fdb26917042
msgid "If ``value`` is ``Tom & Jerry``, the output will be ``Tom &amp; Jerry``."
msgstr ""

#: ../../ref/templates/builtins.txt:1491
# fa129b0db88542b2a194bf3310b2324e
msgid "However, ampersands used in named entities and numeric character references will not be replaced. For example, if ``value`` is ``Caf&eacute;``, the output will *not* be ``Caf&amp;eacute;`` but remain ``Caf&eacute;``. This means that in some edge cases, such as acronyms followed by semicolons, this filter will not replace ampersands that need replacing. For example, if ``value`` is ``Contact the R&D;``, the output will remain unchanged because ``&D;`` resembles a named entity."
msgstr ""

#: ../../ref/templates/builtins.txt:1502
# 86cab4d039aa49d5a5865ab900048a99
msgid "floatformat"
msgstr ""

#: ../../ref/templates/builtins.txt:1504
# 064f2f39beda481fbfb886669b4d8861
msgid "When used without an argument, rounds a floating-point number to one decimal place -- but only if there's a decimal part to be displayed. For example:"
msgstr ""

#: ../../ref/templates/builtins.txt:1508
#: ../../ref/templates/builtins.txt:1519
#: ../../ref/templates/builtins.txt:1530
#: ../../ref/templates/builtins.txt:1542
# a8744604a13b4982b42393ac48a65cb8
# f15953c28068430abdaa574325cbe1d3
# 1ce3297d408d43bba77140e68b602876
# 603d8552185d471b9893b8e0ea6e3f8b
msgid "``value``"
msgstr ""

#: ../../ref/templates/builtins.txt:1508
#: ../../ref/templates/builtins.txt:1519
#: ../../ref/templates/builtins.txt:1530
#: ../../ref/templates/builtins.txt:1542
# ccbc535d20164e4580c9f774da26ec62
# db8d493538f04a328f045849baf02285
# dd18dcab464c4a36ba6bb5e4ab0bd99d
# 8a2342b71e554b2c9b5a57d3573fed83
msgid "Output"
msgstr ""

#: ../../ref/templates/builtins.txt:1510
#: ../../ref/templates/builtins.txt:1521
#: ../../ref/templates/builtins.txt:1532
#: ../../ref/templates/builtins.txt:1544
# 5555ed3855ec4a74ad531acfee18a1cd
# b4159307d3a44eed99d35147b7a2ab16
# edaad7f651984aae912c9e61bb7d22c1
# 7b9c693820a74143a04fe952fffacee5
msgid "``34.23234``"
msgstr ""

#: ../../ref/templates/builtins.txt:1510
#: ../../ref/templates/builtins.txt:1511
#: ../../ref/templates/builtins.txt:1512
# 5ff85b19b18a4ad7b6db00b1b35be410
# 4ec03a05b98d4bbea370aef800c30e06
# cd18570b7f8044fc93e69433ce8b3ccc
msgid "``{{ value|floatformat }}``"
msgstr ""

#: ../../ref/templates/builtins.txt:1510
# edf869a6b5194180abc1ac10b9708cb3
msgid "``34.2``"
msgstr ""

#: ../../ref/templates/builtins.txt:1511
#: ../../ref/templates/builtins.txt:1522
#: ../../ref/templates/builtins.txt:1533
#: ../../ref/templates/builtins.txt:1545
# 0a864703477f4a638b9605c20264e370
# 1dfcba2c6b5e4b5d87fc99c9205f7824
# c99605af9813467e8155c78573bcc537
# 9f120353d14d49aaa3e20b9c0b221014
msgid "``34.00000``"
msgstr ""

#: ../../ref/templates/builtins.txt:1511
#: ../../ref/templates/builtins.txt:1532
#: ../../ref/templates/builtins.txt:1533
#: ../../ref/templates/builtins.txt:1545
# d5dc8f43a71248cb9adda55c335a5720
# ff82ef8252984ebc8bd33272f61eda60
# 920d8a32d42445769ac34ded2139da67
# f8696efc1487421c8fd5f2e7a4cbebf9
msgid "``34``"
msgstr ""

#: ../../ref/templates/builtins.txt:1512
#: ../../ref/templates/builtins.txt:1523
#: ../../ref/templates/builtins.txt:1546
# e6ce6176589c4099a198a53b12db5632
# 4dc3dcec0b224d7cb2ef838680db4bfe
# af8c01b1c8b3468397d12da82da06e30
msgid "``34.26000``"
msgstr ""

#: ../../ref/templates/builtins.txt:1512
# d6aecde4246b4fcc84e4d21f28a98449
msgid "``34.3``"
msgstr ""

#: ../../ref/templates/builtins.txt:1515
# c2837b7e9c264118bab464e606344797
msgid "If used with a numeric integer argument, ``floatformat`` rounds a number to that many decimal places. For example:"
msgstr ""

#: ../../ref/templates/builtins.txt:1521
#: ../../ref/templates/builtins.txt:1522
#: ../../ref/templates/builtins.txt:1523
# 207868711e184bd4930d7f4c67bcce8f
# 083ebd71012a472eb890f51db33f7f3e
# a689dbe68b29494a866c010a1752f28f
msgid "``{{ value|floatformat:3 }}``"
msgstr ""

#: ../../ref/templates/builtins.txt:1521
#: ../../ref/templates/builtins.txt:1544
# 5fe809a9e7ee49e9bcfb1ea24a06592d
# 061c23b0be0c432c92421e9e8b05d6b1
msgid "``34.232``"
msgstr ""

#: ../../ref/templates/builtins.txt:1522
# cdc8cb84d24144958c0433467b36329d
msgid "``34.000``"
msgstr ""

#: ../../ref/templates/builtins.txt:1523
#: ../../ref/templates/builtins.txt:1546
# 7650b3b9695f4e69b2d10b048e31e51f
# b68518fbdb0d4c1294560867b8263b40
msgid "``34.260``"
msgstr ""

#: ../../ref/templates/builtins.txt:1526
# d5ec544701a743a2946d13ff9377ca84
msgid "Particularly useful is passing 0 (zero) as the argument which will round the float to the nearest integer."
msgstr ""

#: ../../ref/templates/builtins.txt:1532
#: ../../ref/templates/builtins.txt:1533
#: ../../ref/templates/builtins.txt:1534
# fa4ef8be58d341c8b197aa9dbb14ab34
# dea15c195bb94a2fbf22adacbfca4f2b
# 87a6abf9216e4499a91b0b58be72258e
msgid "``{{ value|floatformat:\"0\" }}``"
msgstr ""

#: ../../ref/templates/builtins.txt:1534
# 2a43e53e6b084f5c9075bf541f3eab78
msgid "``39.56000``"
msgstr ""

#: ../../ref/templates/builtins.txt:1534
# 1273b93ff9af4c039ef740c4a2a42ff7
msgid "``40``"
msgstr ""

#: ../../ref/templates/builtins.txt:1537
# 095d11a542784039a9781b19ae868d42
msgid "If the argument passed to ``floatformat`` is negative, it will round a number to that many decimal places -- but only if there's a decimal part to be displayed. For example:"
msgstr ""

#: ../../ref/templates/builtins.txt:1544
#: ../../ref/templates/builtins.txt:1545
#: ../../ref/templates/builtins.txt:1546
# 5a8fa24b2b3a4e58b7229ee134d9e140
# abb8f1b69a7743ada41e3182b3a1b45e
# 7854282d54b54052a27cf40ea4ced4c3
msgid "``{{ value|floatformat:\"-3\" }}``"
msgstr ""

#: ../../ref/templates/builtins.txt:1549
# ff4d2d9ee7414dca9b3faed4bcd2e05f
msgid "Using ``floatformat`` with no argument is equivalent to using ``floatformat`` with an argument of ``-1``."
msgstr ""

#: ../../ref/templates/builtins.txt:1555
# c6443a4e669c4cba93127a26eaf156d8
msgid "force_escape"
msgstr ""

#: ../../ref/templates/builtins.txt:1557
# 43703138a0044ae9aa7150b2101366e3
msgid "Applies HTML escaping to a string (see the :tfilter:`escape` filter for details). This filter is applied *immediately* and returns a new, escaped string. This is useful in the rare cases where you need multiple escaping or want to apply other filters to the escaped results. Normally, you want to use the :tfilter:`escape` filter."
msgstr ""

#: ../../ref/templates/builtins.txt:1566
# 9538e04b612546b89d1d37de9964eca6
msgid "get_digit"
msgstr ""

#: ../../ref/templates/builtins.txt:1568
# c29cefa0239149fab7fb2e3157e4ec83
msgid "Given a whole number, returns the requested digit, where 1 is the right-most digit, 2 is the second-right-most digit, etc. Returns the original value for invalid input (if input or argument is not an integer, or if argument is less than 1). Otherwise, output is always an integer."
msgstr ""

#: ../../ref/templates/builtins.txt:1577
# e675b8621dc84378a23c7c96a3ac1b3d
msgid "If ``value`` is ``123456789``, the output will be ``8``."
msgstr ""

#: ../../ref/templates/builtins.txt:1582
# 7e5395668850418fb069dffcff0950d7
msgid "iriencode"
msgstr ""

#: ../../ref/templates/builtins.txt:1584
# 2af1691b3456443ca67056e9741bb916
msgid "Converts an IRI (Internationalized Resource Identifier) to a string that is suitable for including in a URL. This is necessary if you're trying to use strings containing non-ASCII characters in a URL."
msgstr ""

#: ../../ref/templates/builtins.txt:1588
# f0ef1fe67a4a48ce8dcf060259ddb82a
msgid "It's safe to use this filter on a string that has already gone through the :tfilter:`urlencode` filter."
msgstr ""

#: ../../ref/templates/builtins.txt:1595
# f36a4f58cc1f4e8c80da67e9983cc0a6
msgid "If ``value`` is ``\"?test=1&me=2\"``, the output will be ``\"?test=1&amp;me=2\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1600
# ae609924dcf44107a6b99f49c5540e56
msgid "join"
msgstr ""

#: ../../ref/templates/builtins.txt:1602
# c491403c2f244cff8cbabccdefaf4e61
msgid "Joins a list with a string, like Python's ``str.join(list)``"
msgstr ""

#: ../../ref/templates/builtins.txt:1608
# 6af6719445c440cfbb8b026d784385d9
msgid "If ``value`` is the list ``['a', 'b', 'c']``, the output will be the string ``\"a // b // c\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1614
# ade795626b8c4f5e996642243b69cbb5
msgid "last"
msgstr ""

#: ../../ref/templates/builtins.txt:1616
# d892dac2e46147f3867916709e139ea8
msgid "Returns the last item in a list."
msgstr ""

#: ../../ref/templates/builtins.txt:1622
# 791f584fdffb4651983c8fefd0fad54d
msgid "If ``value`` is the list ``['a', 'b', 'c', 'd']``, the output will be the string ``\"d\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1628
# bcc78613ebd4400da69706b2d50a12c0
msgid "length"
msgstr ""

#: ../../ref/templates/builtins.txt:1630
# 38d603ee4ca644ce8d1420adaa56f994
msgid "Returns the length of the value. This works for both strings and lists."
msgstr ""

#: ../../ref/templates/builtins.txt:1636
# 80fac487e74e4788a471004efd6a0ca9
msgid "If ``value`` is ``['a', 'b', 'c', 'd']``, the output will be ``4``."
msgstr ""

#: ../../ref/templates/builtins.txt:1641
# 2174972e23eb406b9228b88e913c6df1
msgid "length_is"
msgstr ""

#: ../../ref/templates/builtins.txt:1643
# 21ae8e5a3c2b4c9b9ab7b66835a432d1
msgid "Returns ``True`` if the value's length is the argument, or ``False`` otherwise."
msgstr ""

#: ../../ref/templates/builtins.txt:1649
# 14a7342b80994ff8b2d6d18ccffb534c
msgid "If ``value`` is ``['a', 'b', 'c', 'd']``, the output will be ``True``."
msgstr ""

#: ../../ref/templates/builtins.txt:1654
# 3b50802c1e2740cfbee8dc922fd03a92
msgid "linebreaks"
msgstr ""

#: ../../ref/templates/builtins.txt:1656
# e1e305a9fd284402992fa64296d335f6
msgid "Replaces line breaks in plain text with appropriate HTML; a single newline becomes an HTML line break (``<br />``) and a new line followed by a blank line becomes a paragraph break (``</p>``)."
msgstr ""

#: ../../ref/templates/builtins.txt:1664
# cd3537760b8145f0b0409f5632f70d12
msgid "If ``value`` is ``Joel\\nis a slug``, the output will be ``<p>Joel<br />is a slug</p>``."
msgstr ""

#: ../../ref/templates/builtins.txt:1670
# 4ad6f457931344fb8153b8089f60a8a6
msgid "linebreaksbr"
msgstr ""

#: ../../ref/templates/builtins.txt:1672
# ecbe9daa55d14efea84683a369ddf9f0
msgid "Converts all newlines in a piece of plain text to HTML line breaks (``<br />``)."
msgstr ""

#: ../../ref/templates/builtins.txt:1679
# 3f8782ce17a44a63836cbde1bc18e48a
msgid "If ``value`` is ``Joel\\nis a slug``, the output will be ``Joel<br />is a slug``."
msgstr ""

#: ../../ref/templates/builtins.txt:1685
# 0630c7f1ae044f78aa432473c3c2f1d5
msgid "linenumbers"
msgstr ""

#: ../../ref/templates/builtins.txt:1687
# e0aa2f436fb649c18ca7329baa8928d6
msgid "Displays text with line numbers."
msgstr ""

#: ../../ref/templates/builtins.txt:1693
# a74273fdd66e49358f47666d6b823958
msgid "If ``value`` is::"
msgstr ""

#: ../../ref/templates/builtins.txt:1699
# 141464e122bf4362b758f3ea39a6bae9
msgid "the output will be::"
msgstr ""

#: ../../ref/templates/builtins.txt:1708
# d979122153eb45b6a3ed5ab10f0fcde7
msgid "ljust"
msgstr ""

#: ../../ref/templates/builtins.txt:1710
# 73b10dc94dcd476ba43eec46575f1161
msgid "Left-aligns the value in a field of a given width."
msgstr ""

#: ../../ref/templates/builtins.txt:1712
#: ../../ref/templates/builtins.txt:1845
# 27eb92a56f054af2add4127a0bfaf8d2
# 11d151e19fe94e2ca03ce4371221c9f3
msgid "**Argument:** field size"
msgstr ""

#: ../../ref/templates/builtins.txt:1718
# f47dc54818dd4dd39ed08ae88a87fc39
msgid "If ``value`` is ``Django``, the output will be ``\"Django    \"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1723
# e98fd8b890be4af4a01dc72a66875349
msgid "lower"
msgstr ""

#: ../../ref/templates/builtins.txt:1725
# 18439f4b3ba146089ff83878d2639d0e
msgid "Converts a string into all lowercase."
msgstr ""

#: ../../ref/templates/builtins.txt:1731
# cb0a684d2d2a446abf56033d1acde0cc
msgid "If ``value`` is ``Still MAD At Yoko``, the output will be ``still mad at yoko``."
msgstr ""

#: ../../ref/templates/builtins.txt:1737
# 9c9f53be54104bd4a9958559554b20f9
msgid "make_list"
msgstr ""

#: ../../ref/templates/builtins.txt:1739
# e174ce6dc00d4ee4b237835efbcbf453
msgid "Returns the value turned into a list. For a string, it's a list of characters. For an integer, the argument is cast into an unicode string before creating a list."
msgstr ""

#: ../../ref/templates/builtins.txt:1747
# 5c7f87bfa91d4459bbde4e39b8f687f9
msgid "If ``value`` is the string ``\"Joel\"``, the output would be the list ``[u'J', u'o', u'e', u'l']``. If ``value`` is ``123``, the output will be the list ``[u'1', u'2', u'3']``."
msgstr ""

#: ../../ref/templates/builtins.txt:1754
# 947fe9cb388b4592b1c8c71a53b42a5f
msgid "phone2numeric"
msgstr ""

#: ../../ref/templates/builtins.txt:1756
# 2ca2a720afce49bc9a3b05e858c5b079
msgid "Converts a phone number (possibly containing letters) to its numerical equivalent."
msgstr ""

#: ../../ref/templates/builtins.txt:1759
# c0715da7ee2a4d50853d96fdc7886a8e
msgid "The input doesn't have to be a valid phone number. This will happily convert any string."
msgstr ""

#: ../../ref/templates/builtins.txt:1766
# 009fa0f5f87f4678985191a602be1a6d
msgid "If ``value`` is ``800-COLLECT``, the output will be ``800-2655328``."
msgstr ""

#: ../../ref/templates/builtins.txt:1771
# d88a956cf37d407b8d24d906fa2bcf91
msgid "pluralize"
msgstr ""

#: ../../ref/templates/builtins.txt:1773
# a28ea5a500e84a848019a69a29ce346a
msgid "Returns a plural suffix if the value is not 1. By default, this suffix is ``'s'``."
msgstr ""

#: ../../ref/templates/builtins.txt:1780
# 5dde215d21f9421cb365ef344253921c
msgid "If ``num_messages`` is ``1``, the output will be ``You have 1 message.`` If ``num_messages`` is ``2``  the output will be ``You have 2 messages.``"
msgstr ""

#: ../../ref/templates/builtins.txt:1783
# 39b2b3e460e04f87b4d1524096021994
msgid "For words that require a suffix other than ``'s'``, you can provide an alternate suffix as a parameter to the filter."
msgstr ""

#: ../../ref/templates/builtins.txt:1790
# ddc270c694ef42c29d6bdfb7444dbf6e
msgid "For words that don't pluralize by simple suffix, you can specify both a singular and plural suffix, separated by a comma."
msgstr ""

#: ../../ref/templates/builtins.txt:1797
# f2a97e5d765b42579b969dee0eda143b
msgid "Use :ttag:`blocktrans` to pluralize translated strings."
msgstr ""

#: ../../ref/templates/builtins.txt:1802
# a909d03e352a4f45886649d714fcd966
msgid "pprint"
msgstr ""

#: ../../ref/templates/builtins.txt:1804
# fa7109ff68c14cfe8346b977676cffaf
msgid "A wrapper around :func:`pprint.pprint` -- for debugging, really."
msgstr ""

#: ../../ref/templates/builtins.txt:1809
# 91b8f81dfef04a49aa86b85ce1d24600
msgid "random"
msgstr ""

#: ../../ref/templates/builtins.txt:1811
# 088dca528b7748ffbd73e0499d2cc7e3
msgid "Returns a random item from the given list."
msgstr ""

#: ../../ref/templates/builtins.txt:1817
# 86698f6d7e134591bf9c664747733047
msgid "If ``value`` is the list ``['a', 'b', 'c', 'd']``, the output could be ``\"b\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1822
# f32a7d605e5e49eb8c420b67fd3493bb
msgid "removetags"
msgstr ""

#: ../../ref/templates/builtins.txt:1824
# 17eec1f2cb5543af8b432500a55bad00
msgid "Removes a space-separated list of [X]HTML tags from the output."
msgstr ""

#: ../../ref/templates/builtins.txt:1830
# 3e777c16069d40459df5e80fa185d63b
msgid "If ``value`` is ``\"<b>Joel</b> <button>is</button> a <span>slug</span>\"`` the output will be ``\"Joel <button>is</button> a slug\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1833
#: ../../ref/utils.txt:582
# 379189ff4c304808a55cb8b9e8c90cd9
# e7f32d14b24947b29df00f21e879281c
msgid "Note that this filter is case-sensitive."
msgstr ""

#: ../../ref/templates/builtins.txt:1835
# 82c5e7e7b13741428b342e7fbb4cc1a4
msgid "If ``value`` is ``\"<B>Joel</B> <button>is</button> a <span>slug</span>\"`` the output will be ``\"<B>Joel</B> <button>is</button> a slug\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1841
# 2ccd8566a0d64bf59dcb93187229c04b
msgid "rjust"
msgstr ""

#: ../../ref/templates/builtins.txt:1843
# 51bba74a859f4d0bbaa30668dcad3162
msgid "Right-aligns the value in a field of a given width."
msgstr ""

#: ../../ref/templates/builtins.txt:1851
# 57f69ea8242646c1b0dfe5acb9a4668c
msgid "If ``value`` is ``Django``, the output will be ``\"    Django\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1856
# 2c34bacca33f4ad8b40e95e906f6233c
msgid "safe"
msgstr ""

#: ../../ref/templates/builtins.txt:1858
# 4da7ab480aaf4d6fabbb9d9d761d9986
msgid "Marks a string as not requiring further HTML escaping prior to output. When autoescaping is off, this filter has no effect."
msgstr ""

#: ../../ref/templates/builtins.txt:1863
# dd64ebc585e64475bb0ba7e36da910eb
msgid "If you are chaining filters, a filter applied after ``safe`` can make the contents unsafe again. For example, the following code prints the variable as is, unescaped:"
msgstr ""

#: ../../ref/templates/builtins.txt:1874
# 10472488760243ca995438996b45bb2f
msgid "safeseq"
msgstr ""

#: ../../ref/templates/builtins.txt:1876
# 4cc8d149d21d4b168fbdd7fd3eec1969
msgid "Applies the :tfilter:`safe` filter to each element of a sequence.  Useful in conjunction with other filters that operate on sequences, such as :tfilter:`join`.  For example::"
msgstr ""

#: ../../ref/templates/builtins.txt:1882
# d847226f29a947bf9d31cf68dffe761e
msgid "You couldn't use the :tfilter:`safe` filter directly in this case, as it would first convert the variable into a string, rather than working with the individual elements of the sequence."
msgstr ""

#: ../../ref/templates/builtins.txt:1889
# 49b5fd46b3a642cb8c3585c6ede9b7f5
msgid "slice"
msgstr ""

#: ../../ref/templates/builtins.txt:1891
# ecd25a57655245a8b4241ed4063954c2
msgid "Returns a slice of the list."
msgstr ""

#: ../../ref/templates/builtins.txt:1893
# c05605bf15c8462c90c7a7e92735c47f
msgid "Uses the same syntax as Python's list slicing. See http://diveintopython.net/native_data_types/lists.html#odbchelper.list.slice for an introduction."
msgstr ""

#: ../../ref/templates/builtins.txt:1901
# 1c56e82dfb1742688cdfb98b550f32c2
msgid "If ``some_list`` is ``['a', 'b', 'c']``, the output will be ``['a', 'b']``."
msgstr ""

#: ../../ref/templates/builtins.txt:1906
# c91dd10b915d4d97a9865bcd5faa663b
msgid "slugify"
msgstr ""

#: ../../ref/templates/builtins.txt:1908
#: ../../ref/utils.txt:707
# 377df16cf2a740d389583b52ec2031bb
# 3384aebcf22c42ac80995b9ca644b602
msgid "Converts to lowercase, removes non-word characters (alphanumerics and underscores) and converts spaces to hyphens. Also strips leading and trailing whitespace."
msgstr ""

#: ../../ref/templates/builtins.txt:1916
#: ../../ref/utils.txt:715
# 268310c111bb48cdb2f8ef55652da407
# 3b7a18d61e034fd7a1225a137cd7881d
msgid "If ``value`` is ``\"Joel is a slug\"``, the output will be ``\"joel-is-a-slug\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1921
# 6b8cdcef2d7b40d895a8a94ac41466e9
msgid "stringformat"
msgstr ""

#: ../../ref/templates/builtins.txt:1923
# 582022eb46d84917992d4c9c0df9be7a
msgid "Formats the variable according to the argument, a string formatting specifier. This specifier uses Python string formatting syntax, with the exception that the leading \"%\" is dropped."
msgstr ""

#: ../../ref/templates/builtins.txt:1927
# e0f3cc675a494cecb0cbe929de38cb32
msgid "See http://docs.python.org/library/stdtypes.html#string-formatting-operations for documentation of Python string formatting"
msgstr ""

#: ../../ref/templates/builtins.txt:1934
# 9735d7f00a25456f9aa1d557294d13b2
msgid "If ``value`` is ``10``, the output will be ``1.000000E+01``."
msgstr ""

#: ../../ref/templates/builtins.txt:1939
# 9fd91395646e468ebe1c24ef98b2f8d3
msgid "striptags"
msgstr ""

#: ../../ref/templates/builtins.txt:1941
# 4ed821850ce04624bceba3c6687e13db
msgid "Strips all [X]HTML tags."
msgstr ""

#: ../../ref/templates/builtins.txt:1947
# 506b82c559a34b9891e600ee1dbe85d1
msgid "If ``value`` is ``\"<b>Joel</b> <button>is</button> a <span>slug</span>\"``, the output will be ``\"Joel is a slug\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1953
# 9b014263b3064555a04a085946bfc692
msgid "time"
msgstr ""

#: ../../ref/templates/builtins.txt:1955
# 1cc1b52b86b144d7a1ecc1e4861dbca1
msgid "Formats a time according to the given format."
msgstr ""

#: ../../ref/templates/builtins.txt:1957
# 0dba58dba701433a8dc76f25bf2ae8fb
msgid "Given format can be the predefined one :setting:`TIME_FORMAT`, or a custom format, same as the :tfilter:`date` filter. Note that the predefined format is locale-dependant."
msgstr ""

#: ../../ref/templates/builtins.txt:1961
# 2b53dfc2a4354327a88d7ebef42fc917
msgid "The time filter will only accept parameters in the format string that relate to the time of day, not the date (for obvious reasons). If you need to format a date, use the :tfilter:`date` filter."
msgstr ""

#: ../../ref/templates/builtins.txt:1969
# 870eaad120304aacb43a2cb1578b3467
msgid "If ``value`` is equivalent to ``datetime.datetime.now()``, the output will be the string ``\"01:23\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1972
# 12f274893d764fa8bba99cf910f023a0
msgid "Another example:"
msgstr ""

#: ../../ref/templates/builtins.txt:1974
# a45b1f9bf129422b964b946af1e3dee9
msgid "Assuming that :setting:`USE_L10N` is ``True`` and :setting:`LANGUAGE_CODE` is, for example, ``\"de\"``, then for::"
msgstr ""

#: ../../ref/templates/builtins.txt:1979
# f6e05119cd334b39bcf4991fadaa3628
msgid "the output will be the string ``\"01:23:00\"`` (The ``\"TIME_FORMAT\"`` format specifier for the ``de`` locale as shipped with Django is ``\"H:i:s\"``)."
msgstr ""

#: ../../ref/templates/builtins.txt:1986
# 9628382bbc4f48b3b7be6c78af672d69
msgid "...the formatting string defined in the :setting:`TIME_FORMAT` setting will be used, without applying any localization."
msgstr ""

#: ../../ref/templates/builtins.txt:1992
# 1668945de2a0461fb0f51f2fc039eded
msgid "timesince"
msgstr ""

#: ../../ref/templates/builtins.txt:1994
# e442a52537b34854ab86e240c5c62636
msgid "Formats a date as the time since that date (e.g., \"4 days, 6 hours\")."
msgstr ""

#: ../../ref/templates/builtins.txt:1996
# 1c9c3327ca634ea38f0ed351f27e5bbf
msgid "Takes an optional argument that is a variable containing the date to use as the comparison point (without the argument, the comparison point is *now*). For example, if ``blog_date`` is a date instance representing midnight on 1 June 2006, and ``comment_date`` is a date instance for 08:00 on 1 June 2006, then ``{{ blog_date|timesince:comment_date }}`` would return \"8 hours\"."
msgstr ""

#: ../../ref/templates/builtins.txt:2002
#: ../../ref/templates/builtins.txt:2021
# 9becaaf469414098a9899f34cde36b3b
# 490643718c354aa1a7463896fc969d15
msgid "Comparing offset-naive and offset-aware datetimes will return an empty string."
msgstr ""

#: ../../ref/templates/builtins.txt:2004
# aaafa7f810a24d08b46d5139b395de6e
msgid "Minutes is the smallest unit used, and \"0 minutes\" will be returned for any date that is in the future relative to the comparison point."
msgstr ""

#: ../../ref/templates/builtins.txt:2010
# b164c89033a648ebb765b2740c563890
msgid "timeuntil"
msgstr ""

#: ../../ref/templates/builtins.txt:2012
# c818d054adbd42eb9f99c8bb075ead28
msgid "Similar to ``timesince``, except that it measures the time from now until the given date or datetime. For example, if today is 1 June 2006 and ``conference_date`` is a date instance holding 29 June 2006, then ``{{ conference_date|timeuntil }}`` will return \"4 weeks\"."
msgstr ""

#: ../../ref/templates/builtins.txt:2017
# 0084ac04c20c404ab9b63464363dd97d
msgid "Takes an optional argument that is a variable containing the date to use as the comparison point (instead of *now*). If ``from_date`` contains 22 June 2006, then ``{{ conference_date|timeuntil:from_date }}`` will return \"1 week\"."
msgstr ""

#: ../../ref/templates/builtins.txt:2023
# 2871b3e9c57b4b7ba038666a959dad75
msgid "Minutes is the smallest unit used, and \"0 minutes\" will be returned for any date that is in the past relative to the comparison point."
msgstr ""

#: ../../ref/templates/builtins.txt:2029
# 3fcf13544a224fb0ba738445f0b589f4
msgid "title"
msgstr ""

#: ../../ref/templates/builtins.txt:2031
# 994f48d069114c26a88d193626c0f59b
msgid "Converts a string into titlecase."
msgstr ""

#: ../../ref/templates/builtins.txt:2037
# ec6f897a0fc94a89a5ab3f80ec0e560c
msgid "If ``value`` is ``\"my first post\"``, the output will be ``\"My First Post\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2042
# 8124d7ffc646496eb5642ebd0b8df09e
msgid "truncatechars"
msgstr ""

#: ../../ref/templates/builtins.txt:2046
# bc9fafd69d53434f8582e49c2ccf473b
msgid "Truncates a string if it is longer than the specified number of characters. Truncated strings will end with a translatable ellipsis sequence (\"...\")."
msgstr ""

#: ../../ref/templates/builtins.txt:2049
# 3554ed3a6c7947c1b300fcf4e81c8824
msgid "**Argument:** Number of characters to truncate to"
msgstr ""

#: ../../ref/templates/builtins.txt:2055
# e2978ecd15a14ef1958fc97a6d5c973b
msgid "If ``value`` is ``\"Joel is a slug\"``, the output will be ``\"Joel i...\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2060
# 888ca1367d8b4fac8ad0f0be2bd3663c
msgid "truncatewords"
msgstr ""

#: ../../ref/templates/builtins.txt:2062
# c2f8e59496634134b4129a60388a2f71
msgid "Truncates a string after a certain number of words."
msgstr ""

#: ../../ref/templates/builtins.txt:2064
# 6c34d4f1af9d4835b45b940ee51b4336
msgid "**Argument:** Number of words to truncate after"
msgstr ""

#: ../../ref/templates/builtins.txt:2070
# ea3c3b2fd6454f168971ca84f3fd83f4
msgid "If ``value`` is ``\"Joel is a slug\"``, the output will be ``\"Joel is ...\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2072
# ef3f347b595843738fde8d70a5c05c97
msgid "Newlines within the string will be removed."
msgstr ""

#: ../../ref/templates/builtins.txt:2077
# fd610495c5eb4eeabd5d69049de0bad1
msgid "truncatewords_html"
msgstr ""

#: ../../ref/templates/builtins.txt:2079
# f2c6a2873e004731be3ad600e1b5f3e1
msgid "Similar to :tfilter:`truncatewords`, except that it is aware of HTML tags. Any tags that are opened in the string and not closed before the truncation point, are closed immediately after the truncation."
msgstr ""

#: ../../ref/templates/builtins.txt:2083
# a4c56ff3173b4681b104bbdc0e75e5f7
msgid "This is less efficient than :tfilter:`truncatewords`, so should only be used when it is being passed HTML text."
msgstr ""

#: ../../ref/templates/builtins.txt:2090
# 3bfc04cec4a44bdda4f2691b67743083
msgid "If ``value`` is ``\"<p>Joel is a slug</p>\"``, the output will be ``\"<p>Joel is ...</p>\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2093
# 012f3e2b3daf4e5497db771d73c7b7df
msgid "Newlines in the HTML content will be preserved."
msgstr ""

#: ../../ref/templates/builtins.txt:2098
# d3933bc279f7475cbdc9c653e1f73c8b
msgid "unordered_list"
msgstr ""

#: ../../ref/templates/builtins.txt:2100
# 4d705b4b6a9f4d779ae7ceee4c72af3c
msgid "Recursively takes a self-nested list and returns an HTML unordered list -- WITHOUT opening and closing <ul> tags."
msgstr ""

#: ../../ref/templates/builtins.txt:2103
# 82efb3ba46254bd3be97da209d391874
msgid "The list is assumed to be in the proper format. For example, if ``var`` contains ``['States', ['Kansas', ['Lawrence', 'Topeka'], 'Illinois']]``, then ``{{ var|unordered_list }}`` would return::"
msgstr ""

#: ../../ref/templates/builtins.txt:2119
# a084328226584520a42d348c6d154bdc
msgid "Note: An older, more restrictive and verbose input format is also supported: ``['States', [['Kansas', [['Lawrence', []], ['Topeka', []]]], ['Illinois', []]]]``,"
msgstr ""

#: ../../ref/templates/builtins.txt:2125
# 10f5c77ccd6c4aa580261dbebfcaf672
msgid "upper"
msgstr ""

#: ../../ref/templates/builtins.txt:2127
# dce646cb2ede4bd5944fcc5938a71aa7
msgid "Converts a string into all uppercase."
msgstr ""

#: ../../ref/templates/builtins.txt:2133
# 842f026bae9f429984f476ba53945cdc
msgid "If ``value`` is ``\"Joel is a slug\"``, the output will be ``\"JOEL IS A SLUG\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2138
# 46685ecf848b4b50978a753ffa7278e4
msgid "urlencode"
msgstr ""

#: ../../ref/templates/builtins.txt:2140
# dc98befadc5647b4bfdaee3b980fd572
msgid "Escapes a value for use in a URL."
msgstr ""

#: ../../ref/templates/builtins.txt:2146
# 3ee631ecdfa24d15af9e45d873ac6bc9
msgid "If ``value`` is ``\"http://www.example.org/foo?a=b&c=d\"``, the output will be ``\"http%3A//www.example.org/foo%3Fa%3Db%26c%3Dd\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2149
# 844cd4f8de5a4307b961ecf387eb8bb5
msgid "An optional argument containing the characters which should not be escaped can be provided."
msgstr ""

#: ../../ref/templates/builtins.txt:2152
# 42bcbc9ba02543ff8c034e1fee3c0b04
msgid "If not provided, the '/' character is assumed safe. An empty string can be provided when *all* characters should be escaped. For example::"
msgstr ""

#: ../../ref/templates/builtins.txt:2157
# e10fd46c458f463ea0035bfed2353c9e
msgid "If ``value`` is ``\"http://www.example.org/\"``, the output will be ``\"http%3A%2F%2Fwww.example.org%2F\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2163
# 01c8814f136a459db6d91f1709c985ae
msgid "urlize"
msgstr ""

#: ../../ref/templates/builtins.txt:2165
# b40900ce15244e48b7aa9784a5706f69
msgid "Converts URLs in text into clickable links."
msgstr ""

#: ../../ref/templates/builtins.txt:2167
# 8dd73527a32947f9937a1938af504734
msgid "This template tag works on links prefixed with ``http://``, ``https://``, or ``www.``. For example, ``http://goo.gl/aia1t`` will get converted but ``goo.gl/aia1t`` won't."
msgstr ""

#: ../../ref/templates/builtins.txt:2171
# e5d2cd9a7e81448faaf43126a92b81ad
msgid "It also supports domain-only links ending in one of the original top level domains (``.com``, ``.edu``, ``.gov``, ``.int``, ``.mil``, ``.net``, and ``.org``). For example, ``djangoproject.com`` gets converted."
msgstr ""

#: ../../ref/templates/builtins.txt:2177
# 6d6c69b6998747c8b5aad7fb4dc21a74
msgid "Until Django 1.4, only the ``.com``, ``.net`` and ``.org`` suffixes were supported for domain-only links."
msgstr ""

#: ../../ref/templates/builtins.txt:2180
# 6d7970cd7b2d459badf3442b9da39b73
msgid "Links can have trailing punctuation (periods, commas, close-parens) and leading punctuation (opening parens), and ``urlize`` will still do the right thing."
msgstr ""

#: ../../ref/templates/builtins.txt:2183
# be69544b5fad424a88f00e874f843e22
msgid "Links generated by ``urlize`` have a ``rel=\"nofollow\"`` attribute added to them."
msgstr ""

#: ../../ref/templates/builtins.txt:2190
# 10060c5309b444f2b32023c7570fbf9c
msgid "If ``value`` is ``\"Check out www.djangoproject.com\"``, the output will be ``\"Check out <a href=\"http://www.djangoproject.com\" rel=\"nofollow\">www.djangoproject.com</a>\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2194
# 9f83657728054c298a26b12fbd8339e7
msgid "The ``urlize`` filter also takes an optional parameter ``autoescape``. If ``autoescape`` is ``True``, the link text and URLs will be escaped using Django's built-in :tfilter:`escape` filter. The default value for ``autoescape`` is ``True``."
msgstr ""

#: ../../ref/templates/builtins.txt:2201
# ffcd7a8466ce48d79d5b770ca065b687
msgid "If ``urlize`` is applied to text that already contains HTML markup, things won't work as expected. Apply this filter only to plain text."
msgstr ""

#: ../../ref/templates/builtins.txt:2207
# a3a1701e6bf34ab78ff873d5f5d32d78
msgid "urlizetrunc"
msgstr ""

#: ../../ref/templates/builtins.txt:2209
# 5ded10206946457aac4ada696ac180cb
msgid "Converts URLs into clickable links just like urlize_, but truncates URLs longer than the given character limit."
msgstr ""

#: ../../ref/templates/builtins.txt:2212
# 791187aa73d64d7dbbfbe93a3956db79
msgid "**Argument:** Number of characters that link text should be truncated to, including the ellipsis that's added if truncation is necessary."
msgstr ""

#: ../../ref/templates/builtins.txt:2219
# 646b05734af74d8cb5fbb6ded50e8378
msgid "If ``value`` is ``\"Check out www.djangoproject.com\"``, the output would be ``'Check out <a href=\"http://www.djangoproject.com\" rel=\"nofollow\">www.djangopr...</a>'``."
msgstr ""

#: ../../ref/templates/builtins.txt:2223
# 373344454e7740ec8e034ddf98c571d1
msgid "As with urlize_, this filter should only be applied to plain text."
msgstr ""

#: ../../ref/templates/builtins.txt:2228
# 544c01d74ef448a88b4e554b10dd11e5
msgid "wordcount"
msgstr ""

#: ../../ref/templates/builtins.txt:2230
# 139a16f64313425f8c2154267592bd5c
msgid "Returns the number of words."
msgstr ""

#: ../../ref/templates/builtins.txt:2236
# 6d6636396ffe44dea1f1fd04f8fd40eb
msgid "If ``value`` is ``\"Joel is a slug\"``, the output will be ``4``."
msgstr ""

#: ../../ref/templates/builtins.txt:2241
# 0c185de2754a4b648edf9a7150148d59
msgid "wordwrap"
msgstr ""

#: ../../ref/templates/builtins.txt:2243
# c3793390746346fc84224a90829dc275
msgid "Wraps words at specified line length."
msgstr ""

#: ../../ref/templates/builtins.txt:2245
# dce41aeaa693432087456315b5202375
msgid "**Argument:** number of characters at which to wrap the text"
msgstr ""

#: ../../ref/templates/builtins.txt:2251
# f21b979066444b67ae0c15bd8ec48d73
msgid "If ``value`` is ``Joel is a slug``, the output would be::"
msgstr ""

#: ../../ref/templates/builtins.txt:2260
# ed77b6ba7ffb45f79f7e3e50b91c0839
msgid "yesno"
msgstr ""

#: ../../ref/templates/builtins.txt:2262
# da876def1ea24b2dbd1b419b9273094b
msgid "Maps values for true, false and (optionally) None, to the strings \"yes\", \"no\", \"maybe\", or a custom mapping passed as a comma-separated list, and returns one of those strings according to the value:"
msgstr ""

#: ../../ref/templates/builtins.txt:2273
#: ../../ref/templates/builtins.txt:2274
# bb8f0f85004b4f3c8c77f0bae2b48417
# 0a8cc37c02d14b56ac7f8bff611354dd
msgid "``True``"
msgstr ""

#: ../../ref/templates/builtins.txt:2273
# 7e0b785dda904923bd718f50196731b7
msgid "``yes``"
msgstr ""

#: ../../ref/templates/builtins.txt:2274
#: ../../ref/templates/builtins.txt:2275
#: ../../ref/templates/builtins.txt:2276
# 968c66b23f1b4f47b053d5759dc3609b
# 44f474ef57554c01a099612dbe055387
# 43c86895170e4a848ef53647f1548e98
msgid "``\"yeah,no,maybe\"``"
msgstr ""

#: ../../ref/templates/builtins.txt:2274
# bbba4bb04c904f94b1a339fc387dc231
msgid "``yeah``"
msgstr ""

#: ../../ref/templates/builtins.txt:2275
# e56847e60626426a940cfc8cc967f96c
msgid "``False``"
msgstr ""

#: ../../ref/templates/builtins.txt:2275
# 7844c3f9a95d408887bf67cb417ac567
msgid "``no``"
msgstr ""

#: ../../ref/templates/builtins.txt:2276
#: ../../ref/templates/builtins.txt:2277
# baf6196c09e74413b6e78d1c50a9a179
# 35ba1106f7974ba082c1b841c13a0b8c
msgid "``None``"
msgstr ""

#: ../../ref/templates/builtins.txt:2276
# 0b27581fe5ec41d1ac1f984b7ee1b678
msgid "``maybe``"
msgstr ""

#: ../../ref/templates/builtins.txt:2277
# 37a6d8e8eec34231ad3e6705c5b3e2f4
msgid "``\"yeah,no\"``"
msgstr ""

#: ../../ref/templates/builtins.txt:2277
# b82b9847c0094cad945a536dd684fce2
msgid "``\"no\"`` (converts None to False if no mapping for None is given)"
msgstr ""

#: ../../ref/templates/builtins.txt:2282
# 15a3730fd097403aa38321531fa8bcef
msgid "Internationalization tags and filters"
msgstr ""

#: ../../ref/templates/builtins.txt:2284
# 65b1e626754643abb721a20a323ce8a5
msgid "Django provides template tags and filters to control each aspect of :doc:`internationalization </topics/i18n/index>` in templates. They allow for granular control of translations, formatting, and time zone conversions."
msgstr ""

#: ../../ref/templates/builtins.txt:2289
# 27522efcbf834c01abd082d074adf1be
msgid "i18n"
msgstr ""

#: ../../ref/templates/builtins.txt:2291
# 48b4f4ad28884f9d8535014495048204
msgid "This library allows specifying translatable text in templates. To enable it, set :setting:`USE_I18N` to ``True``, then load it with ``{% load i18n %}``."
msgstr ""

#: ../../ref/templates/builtins.txt:2295
# bfe979083c4f4c46b8ae2974ed04dc5b
msgid "See :ref:`specifying-translation-strings-in-template-code`."
msgstr ""

#: ../../ref/templates/builtins.txt:2298
# 013c5da21262440d9ed5709b44511e91
msgid "l10n"
msgstr ""

#: ../../ref/templates/builtins.txt:2300
# b8c1c2ae7be24326a9585be35e41f812
msgid "This library provides control over the localization of values in templates. You only need to load the library using ``{% load l10n %}``, but you'll often set :setting:`USE_L10N` to ``True`` so that localization is active by default."
msgstr ""

#: ../../ref/templates/builtins.txt:2304
# 6144633936174395a1c9b3b6e6ee6a4b
msgid "See :ref:`topic-l10n-templates`."
msgstr ""

#: ../../ref/templates/builtins.txt:2307
# bfe05e998e6041129f6091d204796df8
msgid "tz"
msgstr ""

#: ../../ref/templates/builtins.txt:2311
# 0576194e96d54b0db00e061bd41f769b
msgid "This library provides control over time zone conversions in templates. Like ``l10n``, you only need to load the library using ``{% load tz %}``, but you'll usually also set :setting:`USE_TZ` to ``True`` so that conversion to local time happens by default."
msgstr ""

#: ../../ref/templates/builtins.txt:2316
# e8f83682e937489089b8d6a001ccd458
msgid "See :ref:`time-zones-in-templates`."
msgstr ""

#: ../../ref/templates/builtins.txt:2319
# d880ff0a069646559430d641995867ff
msgid "Other tags and filters libraries"
msgstr ""

#: ../../ref/templates/builtins.txt:2321
# 131b968390be43da82dd2990372c0214
msgid "Django comes with a couple of other template-tag libraries that you have to enable explicitly in your :setting:`INSTALLED_APPS` setting and enable in your template with the :ttag:`{% load %}<load>` tag."
msgstr ""

#: ../../ref/templates/builtins.txt:2328
# e666962ac98144c9a08856bbf7a2cd5d
msgid "A set of Django template filters useful for adding a \"human touch\" to data. See :doc:`/ref/contrib/humanize`."
msgstr ""

#: ../../ref/templates/builtins.txt:2334
# 440455dc4ca54725bfd2c3041e7a9074
msgid "A collection of template filters that implement these common markup languages:"
msgstr ""

#: ../../ref/templates/builtins.txt:2336
# d06c7f3a396b438188f8e046d2b6c3cf
msgid "Textile"
msgstr ""

#: ../../ref/templates/builtins.txt:2338
# a8c40d12b763494e9f4167b0256cb79c
msgid "reST (reStructuredText)"
msgstr ""

#: ../../ref/templates/builtins.txt:2345
# 806dee2f9cbc44728ad0057167599483
msgid "A collection of template tags that can be useful while designing a Web site, such as a generator of Lorem Ipsum text. See :doc:`/ref/contrib/webdesign`."
msgstr ""

#: ../../ref/templates/builtins.txt:2358
# 382250021a7d4e6b9100dad3ad5930ac
msgid "To link to static files that are saved in :setting:`STATIC_ROOT` Django ships with a :ttag:`static` template tag. You can use this regardless if you're using :class:`~django.template.RequestContext` or not."
msgstr ""

#: ../../ref/templates/builtins.txt:2367
# b8e192b3945146dc8f9d6b429e895179
msgid "It is also able to consume standard context variables, e.g. assuming a ``user_stylesheet`` variable is passed to the template:"
msgstr ""

#: ../../ref/templates/builtins.txt:2375
# befb12fc1f6e4c8ab5ca41663d585899
msgid "If you'd like to retrieve a static URL without displaying it, you can use a slightly different call::"
msgstr ""

#: ../../ref/templates/builtins.txt:2388
# 3e73a06709294e14894a90537539f225
msgid "The :mod:`staticfiles<django.contrib.staticfiles>` contrib app also ships with a :ttag:`static template tag<staticfiles-static>` which uses ``staticfiles'`` :setting:`STATICFILES_STORAGE` to build the URL of the given path (rather than simply using :func:`urlparse.urljoin` with the :setting:`STATIC_URL` setting and the given path). Use that instead if you have an advanced use case such as :ref:`using a cloud service to serve static files<staticfiles-from-cdn>`::"
msgstr ""

#: ../../ref/templates/builtins.txt:2402
# 5dc76efc001f4e6e8aa4fb66005e753a
msgid "get_static_prefix"
msgstr ""

#: ../../ref/templates/builtins.txt:2406
# 3a2ba0cf3fae4c65b073d76ea0be60f1
msgid "If you're not using :class:`~django.template.RequestContext`, or if you need more control over exactly where and how :setting:`STATIC_URL` is injected into the template, you can use the :ttag:`get_static_prefix` template tag instead::"
msgstr ""

#: ../../ref/templates/builtins.txt:2414
# f80f22f3e3494bcfa826085b0075c4a2
msgid "There's also a second form you can use to avoid extra processing if you need the value multiple times::"
msgstr ""

#: ../../ref/templates/builtins.txt:2426
# 68921c2bf8b04eaa97d294c4139d19ef
msgid "get_media_prefix"
msgstr ""

#: ../../ref/templates/builtins.txt:2430
# 5f436640dfc141f58cbd9a47263b6881
msgid "Similar to the :ttag:`get_static_prefix`, ``get_media_prefix`` populates a template variable with the media prefix :setting:`MEDIA_URL`, e.g.::"
msgstr ""

#: ../../ref/templates/index.txt:5
# 6a97a0cc348b41efb42172f35a1d21d9
msgid "Django's template engine provides a powerful mini-language for defining the user-facing layer of your application, encouraging a clean separation of application and presentation logic. Templates can be maintained by anyone with an understanding of HTML; no knowledge of Python is required."
msgstr ""

#: ../../ref/templates/index.txt:18
# bf22678f61c248248fb6faaa2b70cb78
msgid "For information on writing your own custom tags and filters, see :doc:`/howto/custom-template-tags`."
msgstr ""

#: ../../ref/unicode.txt:3
# 5bb318509c294e6eb8d75ece748bcf2e
msgid "Unicode data"
msgstr ""

#: ../../ref/unicode.txt:5
# ff00d867be274f4eae1bfe38fd448a0a
msgid "Django natively supports Unicode data everywhere. Providing your database can somehow store the data, you can safely pass around Unicode strings to templates, models and the database."
msgstr ""

#: ../../ref/unicode.txt:9
# 367c2566275544608cc9deb7d312dcb8
msgid "This document tells you what you need to know if you're writing applications that use data or templates that are encoded in something other than ASCII."
msgstr ""

#: ../../ref/unicode.txt:13
# 6bb6ccd17c5a4819a09f30e00e4c72d8
msgid "Creating the database"
msgstr ""

#: ../../ref/unicode.txt:15
# 148926044db549feab90cecb65c15d1a
msgid "Make sure your database is configured to be able to store arbitrary string data. Normally, this means giving it an encoding of UTF-8 or UTF-16. If you use a more restrictive encoding -- for example, latin1 (iso8859-1) -- you won't be able to store certain characters in the database, and information will be lost."
msgstr ""

#: ../../ref/unicode.txt:20
# efdb3787178a41f699a087f14c19516c
msgid "MySQL users, refer to the `MySQL manual`_ (section 9.1.3.2 for MySQL 5.1) for details on how to set or alter the database character set encoding."
msgstr ""

#: ../../ref/unicode.txt:23
# 15a9d03b8af84be5aba37c8166947ce7
msgid "PostgreSQL users, refer to the `PostgreSQL manual`_ (section 21.2.2 in PostgreSQL 8) for details on creating databases with the correct encoding."
msgstr ""

#: ../../ref/unicode.txt:26
# 4b4c6e8f57c04c3bb46e21ac9415aef3
msgid "SQLite users, there is nothing you need to do. SQLite always uses UTF-8 for internal encoding."
msgstr ""

#: ../../ref/unicode.txt:32
# 67d7c2a40cb34c679ec0cfa6627aef4c
msgid "All of Django's database backends automatically convert Unicode strings into the appropriate encoding for talking to the database. They also automatically convert strings retrieved from the database into Python Unicode strings. You don't even need to tell Django what encoding your database uses: that is handled transparently."
msgstr ""

#: ../../ref/unicode.txt:38
# 0ff4edc6c39742eab9b910b58b79b44a
msgid "For more, see the section \"The database API\" below."
msgstr ""

#: ../../ref/unicode.txt:41
# 204821bf516243cc819250223cc380c4
msgid "General string handling"
msgstr ""

#: ../../ref/unicode.txt:43
# 33da7a92cd884193bdf704cfa5848b5d
msgid "Whenever you use strings with Django -- e.g., in database lookups, template rendering or anywhere else -- you have two choices for encoding those strings. You can use Unicode strings, or you can use normal strings (sometimes called \"bytestrings\") that are encoded using UTF-8."
msgstr ""

#: ../../ref/unicode.txt:50
# 1ebee6118a944b3fb60e341f0b2e2419
msgid "In Python 3, the logic is reversed, that is normal strings are Unicode, and when you want to specifically create a bytestring, you have to prefix the string with a 'b'. As we are doing in Django code from version 1.5, we recommend that you import ``unicode_literals`` from the __future__ library in your code. Then, when you specifically want to create a bytestring literal, prefix the string with 'b'."
msgstr ""

#: ../../ref/unicode.txt:57
# 426a06ab6e5c406498e799d247e5003a
msgid "Python 2 legacy::"
msgstr ""

#: ../../ref/unicode.txt:62
# 37953f1eb6c64b918d942f33de1639e8
msgid "Python 2 with unicode literals or Python 3::"
msgstr ""

#: ../../ref/unicode.txt:69
# 6f8c4d814e384be19fb5d075d29044e3
msgid "See also :doc:`Python 3 compatibility </topics/python3>`."
msgstr ""

#: ../../ref/unicode.txt:73
# 1d9a0d9990624b288ee2b4fc962e9faf
msgid "A bytestring does not carry any information with it about its encoding. For that reason, we have to make an assumption, and Django assumes that all bytestrings are in UTF-8."
msgstr ""

#: ../../ref/unicode.txt:77
# d53a3a45ef1d4c11af41a9b8a2ea4c96
msgid "If you pass a string to Django that has been encoded in some other format, things will go wrong in interesting ways. Usually, Django will raise a ``UnicodeDecodeError`` at some point."
msgstr ""

#: ../../ref/unicode.txt:81
# aa0a6b8c5240431f9d9596552d3d836d
msgid "If your code only uses ASCII data, it's safe to use your normal strings, passing them around at will, because ASCII is a subset of UTF-8."
msgstr ""

#: ../../ref/unicode.txt:84
# 45d934dea0c9429683ef7deab6676d2d
msgid "Don't be fooled into thinking that if your :setting:`DEFAULT_CHARSET` setting is set to something other than ``'utf-8'`` you can use that other encoding in your bytestrings! :setting:`DEFAULT_CHARSET` only applies to the strings generated as the result of template rendering (and email). Django will always assume UTF-8 encoding for internal bytestrings. The reason for this is that the :setting:`DEFAULT_CHARSET` setting is not actually under your control (if you are the application developer). It's under the control of the person installing and using your application -- and if that person chooses a different setting, your code must still continue to work. Ergo, it cannot rely on that setting."
msgstr ""

#: ../../ref/unicode.txt:94
# a68dd02027314c079c0838b5a56b13e1
msgid "In most cases when Django is dealing with strings, it will convert them to Unicode strings before doing anything else. So, as a general rule, if you pass in a bytestring, be prepared to receive a Unicode string back in the result."
msgstr ""

#: ../../ref/unicode.txt:99
# ab9fe4bd0cad49d7bb118b273f6b9d34
msgid "Translated strings"
msgstr ""

#: ../../ref/unicode.txt:101
# 7636041ea98c46b590e49c0c869e0a88
msgid "Aside from Unicode strings and bytestrings, there's a third type of string-like object you may encounter when using Django. The framework's internationalization features introduce the concept of a \"lazy translation\" -- a string that has been marked as translated but whose actual translation result isn't determined until the object is used in a string. This feature is useful in cases where the translation locale is unknown until the string is used, even though the string might have originally been created when the code was first imported."
msgstr ""

#: ../../ref/unicode.txt:110
# 3b041d3fb58545d3a7e5ebb75b345a8f
msgid "Normally, you won't have to worry about lazy translations. Just be aware that if you examine an object and it claims to be a ``django.utils.functional.__proxy__`` object, it is a lazy translation. Calling ``unicode()`` with the lazy translation as the argument will generate a Unicode string in the current locale."
msgstr ""

#: ../../ref/unicode.txt:116
# 3cfc59502dbb45e88f8881438862aec3
msgid "For more details about lazy translation objects, refer to the :doc:`internationalization </topics/i18n/index>` documentation."
msgstr ""

#: ../../ref/unicode.txt:120
# f602650a9bdc4d8f879f29d0da6ffd19
msgid "Useful utility functions"
msgstr ""

#: ../../ref/unicode.txt:122
# 4ee47211bb7844799b3a4f0664487f66
msgid "Because some string operations come up again and again, Django ships with a few useful functions that should make working with Unicode and bytestring objects a bit easier."
msgstr ""

#: ../../ref/unicode.txt:127
# a836c0eb82104eb9b4f016b931d0a52c
msgid "Conversion functions"
msgstr ""

#: ../../ref/unicode.txt:129
# d32566df7f6b438d80fe1c199c7dacad
msgid "The ``django.utils.encoding`` module contains a few functions that are handy for converting back and forth between Unicode and bytestrings."
msgstr ""

#: ../../ref/unicode.txt:132
# 73169041420548589eaf63dc49047819
msgid "``smart_text(s, encoding='utf-8', strings_only=False, errors='strict')`` converts its input to a Unicode string. The ``encoding`` parameter specifies the input encoding. (For example, Django uses this internally when processing form input data, which might not be UTF-8 encoded.) The ``strings_only`` parameter, if set to True, will result in Python numbers, booleans and ``None`` not being converted to a string (they keep their original types). The ``errors`` parameter takes any of the values that are accepted by Python's ``unicode()`` function for its error handling."
msgstr ""

#: ../../ref/unicode.txt:142
# e1be64c02f76468dbe567205860af62b
msgid "If you pass ``smart_text()`` an object that has a ``__unicode__`` method, it will use that method to do the conversion."
msgstr ""

#: ../../ref/unicode.txt:145
# 257ae61d926049dcb4fc5e080737e85b
msgid "``force_text(s, encoding='utf-8', strings_only=False, errors='strict')`` is identical to ``smart_text()`` in almost all cases. The difference is when the first argument is a :ref:`lazy translation <lazy-translations>` instance. While ``smart_text()`` preserves lazy translations, ``force_text()`` forces those objects to a Unicode string (causing the translation to occur). Normally, you'll want to use ``smart_text()``. However, ``force_text()`` is useful in template tags and filters that absolutely *must* have a string to work with, not just something that can be converted to a string."
msgstr ""

#: ../../ref/unicode.txt:155
# b6981a37980e46a094ac521b4941dfd6
msgid "``smart_bytes(s, encoding='utf-8', strings_only=False, errors='strict')`` is essentially the opposite of ``smart_text()``. It forces the first argument to a bytestring. The ``strings_only`` parameter has the same behavior as for ``smart_text()`` and ``force_text()``. This is slightly different semantics from Python's builtin ``str()`` function, but the difference is needed in a few places within Django's internals."
msgstr ""

#: ../../ref/unicode.txt:162
# dddcbe882db24f1b86849190ca0bcbe8
msgid "Normally, you'll only need to use ``smart_text()``. Call it as early as possible on any input data that might be either Unicode or a bytestring, and from then on, you can treat the result as always being Unicode."
msgstr ""

#: ../../ref/unicode.txt:169
# 103b960fa22c42dca61641af475e2840
msgid "URI and IRI handling"
msgstr ""

#: ../../ref/unicode.txt:171
# d4786d67f0fd4ae1a5e7105408e10afe
msgid "Web frameworks have to deal with URLs (which are a type of IRI_). One requirement of URLs is that they are encoded using only ASCII characters. However, in an international environment, you might need to construct a URL from an IRI_ -- very loosely speaking, a URI_ that can contain Unicode characters. Quoting and converting an IRI to URI can be a little tricky, so Django provides some assistance."
msgstr ""

#: ../../ref/unicode.txt:178
# 5ffc1f76a9634d01a73671717e749b12
msgid "The function ``django.utils.encoding.iri_to_uri()`` implements the conversion from IRI to URI as required by the specification (:rfc:`3987`)."
msgstr ""

#: ../../ref/unicode.txt:181
# 7b23c9f596a14ddcb0d372307c82a1d7
msgid "The functions ``django.utils.http.urlquote()`` and ``django.utils.http.urlquote_plus()`` are versions of Python's standard ``urllib.quote()`` and ``urllib.quote_plus()`` that work with non-ASCII characters. (The data is converted to UTF-8 prior to encoding.)"
msgstr ""

#: ../../ref/unicode.txt:186
# 50d7a8dd97294fb2abb8ecac34667e81
msgid "These two groups of functions have slightly different purposes, and it's important to keep them straight. Normally, you would use ``urlquote()`` on the individual portions of the IRI or URI path so that any reserved characters such as '&' or '%' are correctly encoded. Then, you apply ``iri_to_uri()`` to the full IRI and it converts any non-ASCII characters to the correct encoded values."
msgstr ""

#: ../../ref/unicode.txt:194
# bef849afbed54bd9a7a40ff502004db5
msgid "Technically, it isn't correct to say that ``iri_to_uri()`` implements the full algorithm in the IRI specification. It doesn't (yet) perform the international domain name encoding portion of the algorithm."
msgstr ""

#: ../../ref/unicode.txt:198
# 82a14479fe85438db11328a3ddcd4391
msgid "The ``iri_to_uri()`` function will not change ASCII characters that are otherwise permitted in a URL. So, for example, the character '%' is not further encoded when passed to ``iri_to_uri()``. This means you can pass a full URL to this function and it will not mess up the query string or anything like that."
msgstr ""

#: ../../ref/unicode.txt:204
# 0474b7bbc8f94e0f8fb7fe4b59d0ffd1
msgid "An example might clarify things here::"
msgstr ""

#: ../../ref/unicode.txt:211
# a5b991ddf74140ba874fb3642d3ff797
msgid "If you look carefully, you can see that the portion that was generated by ``urlquote()`` in the second example was not double-quoted when passed to ``iri_to_uri()``. This is a very important and useful feature. It means that you can construct your IRI without worrying about whether it contains non-ASCII characters and then, right at the end, call ``iri_to_uri()`` on the result."
msgstr ""

#: ../../ref/unicode.txt:218
# d37e96a15ab84ccbb26033bdb48d8dd2
msgid "The ``iri_to_uri()`` function is also idempotent, which means the following is always true::"
msgstr ""

#: ../../ref/unicode.txt:223
# 713067f90d9f49d580637cf848927070
msgid "So you can safely call it multiple times on the same IRI without risking double-quoting problems."
msgstr ""

#: ../../ref/unicode.txt:232
# 98d47e14621448098f9459cf47806921
msgid "Because all strings are returned from the database as Unicode strings, model fields that are character based (CharField, TextField, URLField, etc) will contain Unicode values when Django retrieves data from the database. This is *always* the case, even if the data could fit into an ASCII bytestring."
msgstr ""

#: ../../ref/unicode.txt:237
# 4f54f034bb3b48cb879ebb6c031f06e4
msgid "You can pass in bytestrings when creating a model or populating a field, and Django will convert it to Unicode when it needs to."
msgstr ""

#: ../../ref/unicode.txt:241
# fd4bf5ff91244fa99319500fef1366db
msgid "Choosing between ``__str__()`` and ``__unicode__()``"
msgstr ""

#: ../../ref/unicode.txt:243
# e468a5cec88f4888b86b05e905970034
msgid "One consequence of using Unicode by default is that you have to take some care when printing data from the model."
msgstr ""

#: ../../ref/unicode.txt:246
# 87b171b9632a4ffdadf5f2205b44fe6e
msgid "In particular, rather than giving your model a ``__str__()`` method, we recommended you implement a ``__unicode__()`` method. In the ``__unicode__()`` method, you can quite safely return the values of all your fields without having to worry about whether they fit into a bytestring or not. (The way Python works, the result of ``__str__()`` is *always* a bytestring, even if you accidentally try to return a Unicode object)."
msgstr ""

#: ../../ref/unicode.txt:253
# e9bc0589c47741ff970055b0ef3f0740
msgid "You can still create a ``__str__()`` method on your models if you want, of course, but you shouldn't need to do this unless you have a good reason. Django's ``Model`` base class automatically provides a ``__str__()`` implementation that calls ``__unicode__()`` and encodes the result into UTF-8. This means you'll normally only need to implement a ``__unicode__()`` method and let Django handle the coercion to a bytestring when required."
msgstr ""

#: ../../ref/unicode.txt:261
# b0bbfbd454dd42e7838a314f54f3dfac
msgid "Taking care in ``get_absolute_url()``"
msgstr ""

#: ../../ref/unicode.txt:263
# 790dfabd8b8549b5a7ba9cb69a6338a1
msgid "URLs can only contain ASCII characters. If you're constructing a URL from pieces of data that might be non-ASCII, be careful to encode the results in a way that is suitable for a URL. The :func:`~django.core.urlresolvers.reverse` function handles this for you automatically."
msgstr ""

#: ../../ref/unicode.txt:268
# 40f5f777ef1641ceaa2662d4804b24e1
msgid "If you're constructing a URL manually (i.e., *not* using the ``reverse()`` function), you'll need to take care of the encoding yourself. In this case, use the ``iri_to_uri()`` and ``urlquote()`` functions that were documented above_. For example::"
msgstr ""

#: ../../ref/unicode.txt:280
# f88fd353b2dd431598fee4fed07e48f5
msgid "This function returns a correctly encoded URL even if ``self.location`` is something like \"Jack visited Paris & Orléans\". (In fact, the ``iri_to_uri()`` call isn't strictly necessary in the above example, because all the non-ASCII characters would have been removed in quoting in the first line.)"
msgstr ""

#: ../../ref/unicode.txt:288
# 01783ca133764223af1dd193c9b05b8f
msgid "The database API"
msgstr ""

#: ../../ref/unicode.txt:290
# 3e8104d15e7042289409c10a89fe7a85
msgid "You can pass either Unicode strings or UTF-8 bytestrings as arguments to ``filter()`` methods and the like in the database API. The following two querysets are identical::"
msgstr ""

#: ../../ref/unicode.txt:302
# f460c612482e4ec09324b5999c575593
msgid "You can use either Unicode or bytestrings when creating templates manually::"
msgstr ""

#: ../../ref/unicode.txt:309
# fe9cb8720bb04bc7b01a494167e281a8
msgid "But the common case is to read templates from the filesystem, and this creates a slight complication: not all filesystems store their data encoded as UTF-8. If your template files are not stored with a UTF-8 encoding, set the :setting:`FILE_CHARSET` setting to the encoding of the files on disk. When Django reads in a template file, it will convert the data from this encoding to Unicode. (:setting:`FILE_CHARSET` is set to ``'utf-8'`` by default.)"
msgstr ""

#: ../../ref/unicode.txt:316
# 31044f37d9cb450c8e8a2d9a66450d81
msgid "The :setting:`DEFAULT_CHARSET` setting controls the encoding of rendered templates. This is set to UTF-8 by default."
msgstr ""

#: ../../ref/unicode.txt:320
# 3dbef6fa8a5d401da0ff2ce1ea61d7c5
msgid "Template tags and filters"
msgstr ""

#: ../../ref/unicode.txt:322
# cf6313a1173140d3be1aeed2c0bb1d3e
msgid "A couple of tips to remember when writing your own template tags and filters:"
msgstr ""

#: ../../ref/unicode.txt:324
# f19fac7fe1174c49beee0dc99be83f2a
msgid "Always return Unicode strings from a template tag's ``render()`` method and from template filters."
msgstr ""

#: ../../ref/unicode.txt:327
# 6a77f1198f774feba72e5e9533d33102
msgid "Use ``force_text()`` in preference to ``smart_text()`` in these places. Tag rendering and filter calls occur as the template is being rendered, so there is no advantage to postponing the conversion of lazy translation objects into strings. It's easier to work solely with Unicode strings at that point."
msgstr ""

#: ../../ref/unicode.txt:334
# 4858db16433448ccb06feec5232e2729
msgid "Email"
msgstr ""

#: ../../ref/unicode.txt:336
# eca2236422834d54b9dc29353a4b6e87
msgid "Django's email framework (in ``django.core.mail``) supports Unicode transparently. You can use Unicode data in the message bodies and any headers. However, you're still obligated to respect the requirements of the email specifications, so, for example, email addresses should use only ASCII characters."
msgstr ""

#: ../../ref/unicode.txt:342
# 05e0df126b7048ac9f5daaacf68f6f07
msgid "The following code example demonstrates that everything except email addresses can be non-ASCII::"
msgstr ""

#: ../../ref/unicode.txt:357
# ad97504344c345c998cdbc2b606c4eab
msgid "Form submission"
msgstr ""

#: ../../ref/unicode.txt:359
# 151d4d7f9dc4461fa96ecf2471e5b5ba
msgid "HTML form submission is a tricky area. There's no guarantee that the submission will include encoding information, which means the framework might have to guess at the encoding of submitted data."
msgstr ""

#: ../../ref/unicode.txt:363
# 4f0766e11e52405c998e30f142730153
msgid "Django adopts a \"lazy\" approach to decoding form data. The data in an ``HttpRequest`` object is only decoded when you access it. In fact, most of the data is not decoded at all. Only the ``HttpRequest.GET`` and ``HttpRequest.POST`` data structures have any decoding applied to them. Those two fields will return their members as Unicode data. All other attributes and methods of ``HttpRequest`` return data exactly as it was submitted by the client."
msgstr ""

#: ../../ref/unicode.txt:371
# a5a49c61214d49f29837b38e8138223b
msgid "By default, the :setting:`DEFAULT_CHARSET` setting is used as the assumed encoding for form data. If you need to change this for a particular form, you can set the ``encoding`` attribute on an ``HttpRequest`` instance. For example::"
msgstr ""

#: ../../ref/unicode.txt:380
# a95bcd0b4b6f4f4f8810a67decb11dce
msgid "You can even change the encoding after having accessed ``request.GET`` or ``request.POST``, and all subsequent accesses will use the new encoding."
msgstr ""

#: ../../ref/unicode.txt:383
# 71492b75966b403e9711383f20e3f68b
msgid "Most developers won't need to worry about changing form encoding, but this is a useful feature for applications that talk to legacy systems whose encoding you cannot control."
msgstr ""

#: ../../ref/unicode.txt:387
# a01be43c3ef042b590d437a2f5b0ae94
msgid "Django does not decode the data of file uploads, because that data is normally treated as collections of bytes, rather than strings. Any automatic decoding there would alter the meaning of the stream of bytes."
msgstr ""

#: ../../ref/urlresolvers.txt:3
# bac55ea393e34937a26b7fd707285bf9
msgid "``django.core.urlresolvers`` utility functions"
msgstr ""

#: ../../ref/urlresolvers.txt:8
# 69f4149239e149deb00839b948c9965d
msgid "reverse()"
msgstr ""

#: ../../ref/urlresolvers.txt:10
# 3fa26b3078114ef0b8acf0034d9ac92d
msgid "If you need to use something similar to the :ttag:`url` template tag in your code, Django provides the following function:"
msgstr ""

#: ../../ref/urlresolvers.txt:15
# 3e1e9ea48a6547b68954de9df09e7bce
msgid "``viewname`` is either the function name (either a function reference, or the string version of the name, if you used that form in ``urlpatterns``) or the :ref:`URL pattern name <naming-url-patterns>`.  Normally, you won't need to worry about the ``urlconf`` parameter and will only pass in the positional and keyword arguments to use in the URL matching. For example::"
msgstr ""

#: ../../ref/urlresolvers.txt:26
# c2c6792043fe4f8280d7be874e2c9651
msgid "The ``reverse()`` function can reverse a large variety of regular expression patterns for URLs, but not every possible one. The main restriction at the moment is that the pattern cannot contain alternative choices using the vertical bar (``\"|\"``) character. You can quite happily use such patterns for matching against incoming URLs and sending them off to views, but you cannot reverse such patterns."
msgstr ""

#: ../../ref/urlresolvers.txt:33
# fd2f54dd1f294db2ac67d85c19999c9d
msgid "The ``current_app`` argument allows you to provide a hint to the resolver indicating the application to which the currently executing view belongs. This ``current_app`` argument is used as a hint to resolve application namespaces into URLs on specific application instances, according to the :ref:`namespaced URL resolution strategy <topics-http-reversing-url-namespaces>`."
msgstr ""

#: ../../ref/urlresolvers.txt:39
# a896c484b7634f8dbb52160814755fc8
msgid "You can use ``kwargs`` instead of ``args``. For example::"
msgstr ""

#: ../../ref/urlresolvers.txt:44
# 8cffe677c6f54163b9dbad4f59dcd236
msgid "``args`` and ``kwargs`` cannot be passed to ``reverse()`` at the same time."
msgstr ""

#: ../../ref/urlresolvers.txt:48
# 9af0aa10e86847b0b2841838ffbf32c2
msgid "As part of working out which URL names map to which patterns, the ``reverse()`` function has to import all of your URLconf files and examine the name of each view. This involves importing each view function. If there are *any* errors whilst importing any of your view functions, it will cause ``reverse()`` to raise an error, even if that view function is not the one you are trying to reverse."
msgstr ""

#: ../../ref/urlresolvers.txt:55
# d69d9c2ba81348579bf8eaf568bc2669
msgid "Make sure that any views you reference in your URLconf files exist and can be imported correctly. Do not include lines that reference views you haven't written yet, because those views will not be importable."
msgstr ""

#: ../../ref/urlresolvers.txt:61
# 4ccda55cc8b14ddf9b912b71f305f092
msgid "The string returned by ``reverse()`` is already :ref:`urlquoted <uri-and-iri-handling>`. For example::"
msgstr ""

#: ../../ref/urlresolvers.txt:67
# 8a4d15406ce24b7688330e4622e1a9d7
msgid "Applying further encoding (such as :meth:`~django.utils.http.urlquote` or ``urllib.quote``) to the output of ``reverse()`` may produce undesirable results."
msgstr ""

#: ../../ref/urlresolvers.txt:72
# fe1d00b0ce8248cb871f723ed94ebc31
msgid "reverse_lazy()"
msgstr ""

#: ../../ref/urlresolvers.txt:76
# c41c949ad9074b40894ded9df5c8d84b
msgid "A lazily evaluated version of `reverse()`_."
msgstr ""

#: ../../ref/urlresolvers.txt:80
# d4043b98b26e401c906d0171d2880abc
msgid "It is useful for when you need to use a URL reversal before your project's URLConf is loaded. Some common cases where this function is necessary are:"
msgstr ""

#: ../../ref/urlresolvers.txt:83
# 43ef22370ac34bf389213641590afb78
msgid "providing a reversed URL as the ``url`` attribute of a generic class-based view."
msgstr ""

#: ../../ref/urlresolvers.txt:86
# ec51aeb23dbf493db01323a0603f90e3
msgid "providing a reversed URL to a decorator (such as the ``login_url`` argument for the :func:`django.contrib.auth.decorators.permission_required` decorator)."
msgstr ""

#: ../../ref/urlresolvers.txt:90
# 4573a6e7de404eaeb617ea81ef5a9b0d
msgid "providing a reversed URL as a default value for a parameter in a function's signature."
msgstr ""

#: ../../ref/urlresolvers.txt:94
# 0edc41204d484c3699245ceb2752bc2e
msgid "resolve()"
msgstr ""

#: ../../ref/urlresolvers.txt:96
# e3941f9c25ba469d938a982ac773fe84
msgid "The ``resolve()`` function can be used for resolving URL paths to the corresponding view functions. It has the following signature:"
msgstr ""

#: ../../ref/urlresolvers.txt:101
# d48100fe86d440f2a0136a9629264813
msgid "``path`` is the URL path you want to resolve. As with :func:`~django.core.urlresolvers.reverse`, you don't need to worry about the ``urlconf`` parameter. The function returns a :class:`ResolverMatch` object that allows you to access various meta-data about the resolved URL."
msgstr ""

#: ../../ref/urlresolvers.txt:107
# 5a80a55258ce425ebba6fa52c81e2141
msgid "If the URL does not resolve, the function raises an :class:`~django.http.Http404` exception."
msgstr ""

#: ../../ref/urlresolvers.txt:114
# 6b7925151f34469bbaca153aed5e404f
msgid "The view function that would be used to serve the URL"
msgstr ""

#: ../../ref/urlresolvers.txt:118
# 63ee645521464a569a7f1057b91ad3c3
msgid "The arguments that would be passed to the view function, as parsed from the URL."
msgstr ""

#: ../../ref/urlresolvers.txt:123
# f63801ada1ef4bf384bf4067edfbe04f
msgid "The keyword arguments that would be passed to the view function, as parsed from the URL."
msgstr ""

#: ../../ref/urlresolvers.txt:128
# 6b9f385724284900afbeae2b3adffada
msgid "The name of the URL pattern that matches the URL."
msgstr ""

#: ../../ref/urlresolvers.txt:132
# c159eb9039054bd0b9d8f8c42348b320
msgid "The application namespace for the URL pattern that matches the URL."
msgstr ""

#: ../../ref/urlresolvers.txt:137
# 2e1008ffeae54ad4942ca970736da8ba
msgid "The instance namespace for the URL pattern that matches the URL."
msgstr ""

#: ../../ref/urlresolvers.txt:142
# 8238f6f0dc8041058de4ba6f825c79d9
msgid "The list of individual namespace components in the full instance namespace for the URL pattern that matches the URL. i.e., if the namespace is ``foo:bar``, then namespaces will be ``['foo', 'bar']``."
msgstr ""

#: ../../ref/urlresolvers.txt:147
# 7a6b18f1f62d466e9f052abfa9d9a78a
msgid "A :class:`ResolverMatch` object can then be interrogated to provide information about the URL pattern that matches a URL::"
msgstr ""

#: ../../ref/urlresolvers.txt:155
# b2830e8114584bfc924661ffb6492782
msgid "A :class:`ResolverMatch` object can also be assigned to a triple::"
msgstr ""

#: ../../ref/urlresolvers.txt:159
# 0ec9ec8bd8154beebc83adf3ddbfe4e5
msgid "One possible use of :func:`~django.core.urlresolvers.resolve` would be to test whether a view would raise a ``Http404`` error before redirecting to it::"
msgstr ""

#: ../../ref/urlresolvers.txt:182
# 8073263018bc494887bdb4cab333db4a
msgid "get_script_prefix()"
msgstr ""

#: ../../ref/urlresolvers.txt:186
# e00c9fcf4bf54e56a29e9b2093cae7ef
msgid "Normally, you should always use :func:`~django.core.urlresolvers.reverse` to define URLs within your application. However, if your application constructs part of the URL hierarchy itself, you may occasionally need to generate URLs. In that case, you need to be able to find the base URL of the Django project within its Web server (normally, :func:`~django.core.urlresolvers.reverse` takes care of this for you). In that case, you can call ``get_script_prefix()``, which will return the script prefix portion of the URL for your Django project. If your Django project is at the root of its web server, this is always ``\"/\"``."
msgstr ""

#: ../../ref/urls.txt:3
# 8626558547b9425dadba38a93fd732a5
msgid "``django.conf.urls`` utility functions"
msgstr ""

#: ../../ref/urls.txt:12
# f80069057b8d43fd8973ce59855fea5c
msgid "Until Django 1.3 they were located in ``django.conf.urls.defaults``. You still can import them from there but it will be removed in Django 1.6."
msgstr ""

#: ../../ref/urls.txt:16
# 7dcbcc251e3b4bdaabdcdf4a624ec4e0
msgid "patterns()"
msgstr ""

#: ../../ref/urls.txt:20
# eaabf30e3d214ea58035517a5ce131f4
msgid "A function that takes a prefix, and an arbitrary number of URL patterns, and returns a list of URL patterns in the format Django needs."
msgstr ""

#: ../../ref/urls.txt:23
# ef356c612ad24baea76e02b752158155
msgid "The first argument to ``patterns()`` is a string ``prefix``. See :ref:`The view prefix <urlpatterns-view-prefix>`."
msgstr ""

#: ../../ref/urls.txt:26
# d1fd0673cc1c433fa1bbef78ea68c601
msgid "The remaining arguments should be tuples in this format::"
msgstr ""

#: ../../ref/urls.txt:30
# 3fb9d5d9cb714ae592afdc159f79c1fc
msgid "The ``optional_dictionary`` and ``optional_name`` parameters are described in :ref:`Passing extra options to view functions <views-extra-options>`."
msgstr ""

#: ../../ref/urls.txt:34
# 480c8f7327e14df6992f8218ab3baa70
msgid "Because ``patterns()`` is a function call, it accepts a maximum of 255 arguments (URL patterns, in this case). This is a limit for all Python function calls. This is rarely a problem in practice, because you'll typically structure your URL patterns modularly by using ``include()`` sections. However, on the off-chance you do hit the 255-argument limit, realize that ``patterns()`` returns a Python list, so you can split up the construction of the list."
msgstr ""

#: ../../ref/urls.txt:51
# 4f8e7a71ab874247a879830cf0f46480
msgid "Python lists have unlimited size, so there's no limit to how many URL patterns you can construct. The only limit is that you can only create 254 at a time (the 255th argument is the initial prefix argument)."
msgstr ""

#: ../../ref/urls.txt:56
# 7380d43cc0604e7a99ab8b259c3ac00b
msgid "static()"
msgstr ""

#: ../../ref/urls.txt:60
# 4d825969af034f1c987577f3c76582b0
msgid "Helper function to return a URL pattern for serving files in debug mode::"
msgstr ""

#: ../../ref/urls.txt:70
# e5bfc6733cb240a2a4551394a0267e87
msgid "url()"
msgstr ""

#: ../../ref/urls.txt:74
# c171d22162cd415ca28c94ef3a4226b2
msgid "You can use the ``url()`` function, instead of a tuple, as an argument to ``patterns()``. This is convenient if you want to specify a name without the optional extra arguments dictionary. For example::"
msgstr ""

#: ../../ref/urls.txt:83
# 6ba0178739bf45ee80b9c53d00a34c24
msgid "This function takes five arguments, most of which are optional::"
msgstr ""

#: ../../ref/urls.txt:87
# 5fdeda91fa5e40b68f47edf031df120e
msgid "See :ref:`Naming URL patterns <naming-url-patterns>` for why the ``name`` parameter is useful."
msgstr ""

#: ../../ref/urls.txt:90
# 81f74c914bb04dc781e9a4e8598136c1
msgid "The ``prefix`` parameter has the same meaning as the first argument to ``patterns()`` and is only relevant when you're passing a string as the ``view`` parameter."
msgstr ""

#: ../../ref/urls.txt:95
# 4c1524929ffd48b1a9431546cfd34ed7
msgid "include()"
msgstr ""

#: ../../ref/urls.txt:101
# 3da47a58ea954a8291c91d032d6adb8c
msgid "A function that takes a full Python import path to another URLconf module that should be \"included\" in this place. Optionally, the :term:`application namespace` and :term:`instance namespace` where the entries will be included into can also be specified."
msgstr ""

#: ../../ref/urls.txt:106
# 85ed3fe26aa4479287fc5d883989dc6d
msgid "``include()`` also accepts as an argument either an iterable that returns URL patterns or a 3-tuple containing such iterable plus the names of the application and instance namespaces."
msgstr ""

#: ../../ref/urls.txt:121
# 1fcc19d030b64d8f96fbb22bb37cbf9b
msgid "See :ref:`including-other-urlconfs` and :ref:`namespaces-and-include`."
msgstr ""

#: ../../ref/urls.txt:124
# d8c5e79c65184328a0c43aa66cf8771e
msgid "handler403"
msgstr ""

#: ../../ref/urls.txt:128
# 03773ed8334545c781948111fd703122
msgid "A callable, or a string representing the full Python import path to the view that should be called if the user doesn't have the permissions required to access a resource."
msgstr ""

#: ../../ref/urls.txt:132
# 76ba8aae54c343ce9ad905430a8b5e19
msgid "By default, this is ``'django.views.defaults.permission_denied'``. That default value should suffice."
msgstr ""

#: ../../ref/urls.txt:135
# 5903c56d614848978ae5ddcb07914074
msgid "See the documentation about :ref:`the 403 (HTTP Forbidden) view <http_forbidden_view>` for more information."
msgstr ""

#: ../../ref/urls.txt:142
# 7d0975aa3bca49eabbecdfc43bfc1945
msgid "handler404"
msgstr ""

#: ../../ref/urls.txt:146
# c83b1a55d71e4009b5c96a908acc5fc7
msgid "A callable, or a string representing the full Python import path to the view that should be called if none of the URL patterns match."
msgstr ""

#: ../../ref/urls.txt:149
# 73694169d0fd475592a4a71dd593de82
msgid "By default, this is ``'django.views.defaults.page_not_found'``. That default value should suffice."
msgstr ""

#: ../../ref/urls.txt:152
# 2f38cf92e8034590adcb83c53c4f58f9
msgid "See the documentation about :ref:`the 404 (HTTP Not Found) view <http_not_found_view>` for more information."
msgstr ""

#: ../../ref/urls.txt:156
# ed10a5012fc541988a07c4d4a748e645
msgid "handler500"
msgstr ""

#: ../../ref/urls.txt:160
# 8112b74ddd54476e8a4aebcd3593c481
msgid "A callable, or a string representing the full Python import path to the view that should be called in case of server errors. Server errors happen when you have runtime errors in view code."
msgstr ""

#: ../../ref/urls.txt:164
# dc675a76830041fa8aab8ad54c38f028
msgid "By default, this is ``'django.views.defaults.server_error'``. That default value should suffice."
msgstr ""

#: ../../ref/urls.txt:167
# dc28dfbffc8e4871a7338ff7034df013
msgid "See the documentation about :ref:`the 500 (HTTP Internal Server Error) view <http_internal_server_error_view>` for more information."
msgstr ""

#: ../../ref/utils.txt:3
# 2aa26addf7aa45c59e0242af8440ea06
msgid "Django Utils"
msgstr ""

#: ../../ref/utils.txt:8
# c9f8d08f5dac4ba6b2226b3499b87ff5
msgid "This document covers all stable modules in ``django.utils``. Most of the modules in ``django.utils`` are designed for internal use and only the following parts can be considered stable and thus backwards compatible as per the :ref:`internal release deprecation policy <internal-release-deprecation-policy>`."
msgstr ""

#: ../../ref/utils.txt:14
# 8349c0725cd94700a14682e5f80bd963
msgid "``django.utils.cache``"
msgstr ""

#: ../../ref/utils.txt:19
# c454ca3fea2947709cea19b34550d7be
msgid "This module contains helper functions for controlling caching. It does so by managing the ``Vary`` header of responses. It includes functions to patch the header of response objects directly and decorators that change functions to do that header-patching themselves."
msgstr ""

#: ../../ref/utils.txt:24
# 3660b09560d84f24a6a6801dc51c2bcf
msgid "For information on the ``Vary`` header, see :rfc:`2616#section-14.44` section 14.44."
msgstr ""

#: ../../ref/utils.txt:27
# 469e34ee7da54a6aa6c49fe0efdbcf98
msgid "Essentially, the ``Vary`` HTTP header defines which headers a cache should take into account when building its cache key. Requests with the same path but different header content for headers named in ``Vary`` need to get different cache keys to prevent delivery of wrong content."
msgstr ""

#: ../../ref/utils.txt:32
# b9428f1deb384d58b8eb47ddebdfe7c7
msgid "For example, :doc:`internationalization </topics/i18n/index>` middleware would need to distinguish caches by the ``Accept-language`` header."
msgstr ""

#: ../../ref/utils.txt:37
# 8f5df3d4362b49c79bc80cf5fd0c2883
msgid "This function patches the ``Cache-Control`` header by adding all keyword arguments to it. The transformation is as follows:"
msgstr ""

#: ../../ref/utils.txt:40
# 4c97fe6a274c4ef2829f013e55db0f39
msgid "All keyword parameter names are turned to lowercase, and underscores are converted to hyphens."
msgstr ""

#: ../../ref/utils.txt:42
# 640047741e8a4803b0ce5c0dfc76d6ee
msgid "If the value of a parameter is ``True`` (exactly ``True``, not just a true value), only the parameter name is added to the header."
msgstr ""

#: ../../ref/utils.txt:44
# 609f2e4add6741fd91abbb382b8ea4ea
msgid "All other parameters are added with their value, after applying ``str()`` to it."
msgstr ""

#: ../../ref/utils.txt:49
# ee645a6d969645958a461da7e1aaed89
msgid "Returns the max-age from the response Cache-Control header as an integer (or ``None`` if it wasn't found or wasn't an integer)."
msgstr ""

#: ../../ref/utils.txt:54
# e8dfa45a50fa4406b8321935081d79bc
msgid "Adds some useful headers to the given ``HttpResponse`` object:"
msgstr ""

#: ../../ref/utils.txt:56
# e072db85c26349f9a7d946001e8f3c37
msgid "``ETag``"
msgstr ""

#: ../../ref/utils.txt:57
# 39e1a7e859de4f7697c91a74d4b43575
msgid "``Last-Modified``"
msgstr ""

#: ../../ref/utils.txt:58
# 86919c30e548422fb95ffce0a445ce93
msgid "``Expires``"
msgstr ""

#: ../../ref/utils.txt:59
# 87831dfd3d394e40afa2e9d84eeb72f9
msgid "``Cache-Control``"
msgstr ""

#: ../../ref/utils.txt:61
# b2acff191ec04dba99aed2c2e031dd9b
msgid "Each header is only added if it isn't already set."
msgstr ""

#: ../../ref/utils.txt:63
# 7a8226fbb1f446358fdcca322360f138
msgid "``cache_timeout`` is in seconds. The :setting:`CACHE_MIDDLEWARE_SECONDS` setting is used by default."
msgstr ""

#: ../../ref/utils.txt:68
# cd16bfbdfa584a59a879c53c76311bc9
msgid "Adds headers to a response to indicate that a page should never be cached."
msgstr ""

#: ../../ref/utils.txt:72
# 678bc47022fe4693a636a80a0441b5a1
msgid "Adds (or updates) the ``Vary`` header in the given ``HttpResponse`` object. ``newheaders`` is a list of header names that should be in ``Vary``. Existing headers in ``Vary`` aren't removed."
msgstr ""

#: ../../ref/utils.txt:78
# 2ff38c1e9dd34c25ac49ea21e1651600
msgid "Returns a cache key based on the request path. It can be used in the request phase because it pulls the list of headers to take into account from the global path registry and uses those to build a cache key to check against."
msgstr ""

#: ../../ref/utils.txt:83
# e7a4a1a30e3544468af12bf57914cde5
msgid "If there is no headerlist stored, the page needs to be rebuilt, so this function returns ``None``."
msgstr ""

#: ../../ref/utils.txt:88
# ca76a410db9c4b28ab4ea1b1dabecdb6
msgid "Learns what headers to take into account for some request path from the response object. It stores those headers in a global path registry so that later access to that path will know what headers to take into account without building the response object itself. The headers are named in the ``Vary`` header of the response, but we want to prevent response generation."
msgstr ""

#: ../../ref/utils.txt:95
# 84a18575eb9f498cbf8e3c4502c98513
msgid "The list of headers to use for cache key generation is stored in the same cache as the pages themselves. If the cache ages some data out of the cache, this just means that we have to build the response once to get at the Vary header and so at the list of headers to use for the cache key."
msgstr ""

#: ../../ref/utils.txt:101
# d349f0fc6e0c4e22b55cc4f319ba1293
msgid "``django.utils.datastructures``"
msgstr ""

#: ../../ref/utils.txt:108
# 1fb633b232c447429e236ae640a2495c
msgid "The :class:`django.utils.datastructures.SortedDict` class is a dictionary that keeps its keys in the order in which they're inserted. ``SortedDict`` adds two additional methods to the standard Python ``dict`` class:"
msgstr ""

#: ../../ref/utils.txt:117
# fbc5dc1a6afa4d5c81a0718125b1cadf
msgid "Inserts the key, value pair before the item with the given index."
msgstr ""

#: ../../ref/utils.txt:123
# 4e014a87074d4a7fae7ac0e317934213
msgid "Returns the value of the item at the given zero-based index."
msgstr ""

#: ../../ref/utils.txt:126
# 6aff53192de14789bed4b05dbbe79528
msgid "Creating a new SortedDict"
msgstr ""

#: ../../ref/utils.txt:128
# 6a31b28d0e3d4043a97bf88f783dd1eb
msgid "Creating a new ``SortedDict`` must be done in a way where ordering is guaranteed. For example::"
msgstr ""

#: ../../ref/utils.txt:133
# c3e305bacbac4c9ab5f128ac3a203992
msgid "will not work. Passing in a basic Python ``dict`` could produce unreliable results. Instead do::"
msgstr ""

#: ../../ref/utils.txt:139
# 38481485df7f4d85ac1ba14a044920b3
msgid "``django.utils.dateparse``"
msgstr ""

#: ../../ref/utils.txt:146
# d77e7e3112004157a3bab2ba981c2d7b
msgid "The functions defined in this module share the following properties:"
msgstr ""

#: ../../ref/utils.txt:148
# 51d68aedc08b4d4798bcd0afd2055d5a
msgid "They raise :exc:`~exceptions.ValueError` if their input is well formatted but isn't a valid date or time."
msgstr ""

#: ../../ref/utils.txt:150
# 5138b9c308114ebda1b2c4fbb695b373
msgid "They return ``None`` if it isn't well formatted at all."
msgstr ""

#: ../../ref/utils.txt:151
# 768ea032cca54c6ea04aff73017aa20f
msgid "They accept up to picosecond resolution in input, but they truncate it to microseconds, since that's what Python supports."
msgstr ""

#: ../../ref/utils.txt:156
# 287332ed15c44c11b9d3446641b5d82e
msgid "Parses a string and returns a :class:`datetime.date`."
msgstr ""

#: ../../ref/utils.txt:160
# 7b2e39a983e848408dcca85d662d8887
msgid "Parses a string and returns a :class:`datetime.time`."
msgstr ""

#: ../../ref/utils.txt:162
# 8105d55d16414916a5a0f4559dcae361
msgid "UTC offsets aren't supported; if ``value`` describes one, the result is ``None``."
msgstr ""

#: ../../ref/utils.txt:167
# a339724f2f0c4c8e946149ef399199d5
msgid "Parses a string and returns a :class:`datetime.datetime`."
msgstr ""

#: ../../ref/utils.txt:169
# 7cb0a161f5334796a1885b3b29ed09fd
msgid "UTC offsets are supported; if ``value`` describes one, the result's ``tzinfo`` attribute is a :class:`~django.utils.tzinfo.FixedOffset` instance."
msgstr ""

#: ../../ref/utils.txt:174
# 312331c3bb094a929111741e4ab64d1f
msgid "``django.utils.decorators``"
msgstr ""

#: ../../ref/utils.txt:181
# 31e794485a144f0c90119055ac64c217
msgid "Converts a function decorator into a method decorator. See :ref:`decorating class based views<decorating-class-based-views>` for example usage."
msgstr ""

#: ../../ref/utils.txt:186
# e1e567cf43484f0d9db82353603bb33c
msgid "Given a middleware class, returns a view decorator. This lets you use middleware functionality on a per-view basis. The middleware is created with no params passed."
msgstr ""

#: ../../ref/utils.txt:192
# 1c56ab123fc44361b11a99fca0225b52
msgid "Like ``decorator_from_middleware``, but returns a function that accepts the arguments to be passed to the middleware_class. For example, the :func:`~django.views.decorators.cache.cache_page` decorator is created from the ``CacheMiddleware`` like this::"
msgstr ""

#: ../../ref/utils.txt:204
# d80be619c6b04154b54ca1faa9053928
msgid "``django.utils.encoding``"
msgstr ""

#: ../../ref/utils.txt:211
# 662a745fc7154662baf40100985df7c4
msgid "A class that derives ``__str__`` from ``__unicode__``."
msgstr ""

#: ../../ref/utils.txt:213
# 35d1dd94004d4ab3ae1473bd7e3ea195
msgid "On Python 2, ``__str__`` returns the output of ``__unicode__`` encoded as a UTF-8 bytestring. On Python 3, ``__str__`` returns the output of ``__unicode__``."
msgstr ""

#: ../../ref/utils.txt:217
# c4516d63320e4118ab85b7249b5a084a
msgid "Useful as a mix-in. If you support Python 2 and 3 with a single code base, you can inherit this mix-in and just define ``__unicode__``."
msgstr ""

#: ../../ref/utils.txt:222
# 8fd18536e9a34cf388e3e6c24eea86ab
msgid "A decorator that defines ``__unicode__`` and ``__str__`` methods under Python 2. Under Python 3 it does nothing."
msgstr ""

#: ../../ref/utils.txt:225
# d351e408b6bd4befa1697d40a6ec5198
msgid "To support Python 2 and 3 with a single code base, define a ``__str__`` method returning text and apply this decorator to the class."
msgstr ""

#: ../../ref/utils.txt:232
# d16cc3625604474aa7538a48688cbf07
msgid "Returns a text object representing ``s`` -- ``unicode`` on Python 2 and ``str`` on Python 3. Treats bytestrings using the ``encoding`` codec."
msgstr ""

#: ../../ref/utils.txt:235
#: ../../ref/utils.txt:256
#: ../../ref/utils.txt:270
#: ../../ref/utils.txt:280
# b4b3f1bf75854fb3b2c632b36d0741c9
# bb1e70db271d4d93af49e379a8c8bac1
# 88be1a479b8249c3bbb3631210d5916f
# 59de03ffa7484b3a96c1faaf1e03a9f9
msgid "If ``strings_only`` is ``True``, don't convert (some) non-string-like objects."
msgstr ""

#: ../../ref/utils.txt:240
# 369a2765caaa42e9aacfbc50e1334fac
msgid "Historical name of :func:`smart_text`. Only available under Python 2."
msgstr ""

#: ../../ref/utils.txt:244
# 141533ed361c4baf8863350015131f46
msgid "Determine if the object instance is of a protected type."
msgstr ""

#: ../../ref/utils.txt:246
# 2b59764b6325420b89ab72585f396f9d
msgid "Objects of protected types are preserved as-is when passed to ``force_text(strings_only=True)``."
msgstr ""

#: ../../ref/utils.txt:253
# bb5b031f828645b484435e7e3982c0a1
msgid "Similar to ``smart_text``, except that lazy instances are resolved to strings, rather than kept as lazy objects."
msgstr ""

#: ../../ref/utils.txt:261
# de33082f67f14756a34a790a981adc4c
msgid "Historical name of :func:`force_text`. Only available under Python 2."
msgstr ""

#: ../../ref/utils.txt:267
# 1de1499e66d9471ba5e404f9a1bcab0e
msgid "Returns a bytestring version of ``s``, encoded as specified in ``encoding``."
msgstr ""

#: ../../ref/utils.txt:277
# c63249c1886e4586abdead7d16b2c45f
msgid "Similar to ``smart_bytes``, except that lazy instances are resolved to bytestrings, rather than kept as lazy objects."
msgstr ""

#: ../../ref/utils.txt:285
# 87b09df01873405aa34a4054d929203c
msgid "Alias of :func:`smart_bytes` on Python 2 and :func:`smart_text` on Python 3. This function returns a ``str`` or a lazy string."
msgstr ""

#: ../../ref/utils.txt:288
# a060926ee5d14fb3b68236cd8b746564
msgid "For instance, this is  suitable for writing to :data:`sys.stdout` on Python 2 and 3."
msgstr ""

#: ../../ref/utils.txt:293
# 8d01bb5f7e834f52b367f3befdf9d5b4
msgid "Alias of :func:`force_bytes` on Python 2 and :func:`force_text` on Python 3. This function always returns a ``str``."
msgstr ""

#: ../../ref/utils.txt:298
# b4185082b2e24408aaabc14fab3f0976
msgid "Convert an Internationalized Resource Identifier (IRI) portion to a URI portion that is suitable for inclusion in a URL."
msgstr ""

#: ../../ref/utils.txt:301
# b9ee8529429d4ee58d216a7844ff5e28
msgid "This is the algorithm from section 3.1 of :rfc:`3987#section-3.1`. However, since we are assuming input is either UTF-8 or unicode already, we can simplify things a little from the full method."
msgstr ""

#: ../../ref/utils.txt:305
#: ../../ref/utils.txt:317
# bb607b37b67a4c58958c2c9822c698e8
# 1067ad06737b4cd4a2e168bb72b14c40
msgid "Returns an ASCII string containing the encoded result."
msgstr ""

#: ../../ref/utils.txt:309
# 6282dd14c71a4eb197709b20172d24f5
msgid "Convert a file system path to a URI portion that is suitable for inclusion in a URL. The path is assumed to be either UTF-8 or unicode."
msgstr ""

#: ../../ref/utils.txt:312
# 0cf970515a604fad8a919dce539a1b92
msgid "This method will encode certain characters that would normally be recognized as special characters for URIs.  Note that this method does not encode the ' character, as it is a valid character within URIs. See ``encodeURIComponent()`` JavaScript function for more details."
msgstr ""

#: ../../ref/utils.txt:320
# eb6f7603bb2d481392bc1ae30ae7d256
msgid "``django.utils.feedgenerator``"
msgstr ""

#: ../../ref/utils.txt:342
# b2ecbd7c0f594d49bd4b6a588f2e05f3
msgid "For simplifying the selection of a generator use ``feedgenerator.DefaultFeed`` which is currently ``Rss201rev2Feed``"
msgstr ""

#: ../../ref/utils.txt:345
# 5c57e6d163a0402880ec66358ead06c2
msgid "For definitions of the different versions of RSS, see: http://web.archive.org/web/20110718035220/http://diveintomark.org/archives/2004/02/04/incompatible-rss"
msgstr ""

#: ../../ref/utils.txt:350
# b51c47f82c664c2ba43c1c6e045aeb25
msgid "Creates a TagURI."
msgstr ""

#: ../../ref/utils.txt:352
# 1347907df0864f48b6a016a357dfef92
msgid "See http://web.archive.org/web/20110514113830/http://diveintomark.org/archives/2004/05/28/howto-atom-id"
msgstr ""

#: ../../ref/utils.txt:355
# 5e5827320b8148af95d79643d071ecae
msgid "SyndicationFeed"
msgstr ""

#: ../../ref/utils.txt:359
# 48fe5fe6cd0c4e999dee6b55d60e3f37
msgid "Base class for all syndication feeds. Subclasses should provide write()."
msgstr ""

#: ../../ref/utils.txt:363
# 1841011819ae406e813af5f991c79f5f
msgid "Initialize the feed with the given dictionary of metadata, which applies to the entire feed."
msgstr ""

#: ../../ref/utils.txt:366
# 0d417001700749649b497193b309ce64
msgid "Any extra keyword arguments you pass to ``__init__`` will be stored in ``self.feed``."
msgstr ""

#: ../../ref/utils.txt:374
# ade09b3b89084ce995f930d10de9f021
msgid "Adds an item to the feed. All args are expected to be Python ``unicode`` objects except ``pubdate``, which is a ``datetime.datetime`` object, and ``enclosure``, which is an instance of the ``Enclosure`` class."
msgstr ""

#: ../../ref/utils.txt:382
# 55626e594c714d6eab43a530b9ae666b
msgid "Return extra attributes to place on the root (i.e. feed/channel) element. Called from ``write()``."
msgstr ""

#: ../../ref/utils.txt:387
# f84ba1cc262b4273bc9244a272619d67
msgid "Add elements in the root (i.e. feed/channel) element. Called from ``write()``."
msgstr ""

#: ../../ref/utils.txt:392
# 19038a8be98a4e458d703bf1f29fcf27
msgid "Return extra attributes to place on each item (i.e. item/entry) element."
msgstr ""

#: ../../ref/utils.txt:397
# f4d33a9704384ce18b6515f67702774d
msgid "Add elements on each item (i.e. item/entry) element."
msgstr ""

#: ../../ref/utils.txt:401
# 30df69bea05545408af721b61ae54b39
msgid "Outputs the feed in the given encoding to ``outfile``, which is a file-like object. Subclasses should override this."
msgstr ""

#: ../../ref/utils.txt:406
# f29ae1f74966464dad1c43fbb5addfcc
msgid "Returns the feed in the given encoding as a string."
msgstr ""

#: ../../ref/utils.txt:410
# 48b5411dd33c498db01d06a47e27a3f4
msgid "Returns the latest item's ``pubdate``. If none of them have a ``pubdate``, this returns the current date/time."
msgstr ""

#: ../../ref/utils.txt:414
# 0b69aac18fda4c929cfbef56dc540eff
msgid "Enclosure"
msgstr ""

#: ../../ref/utils.txt:418
# 4c9ccd2022bd4785a906ff5a08fc572d
msgid "Represents an RSS enclosure"
msgstr ""

#: ../../ref/utils.txt:421
# ad9d1ab0616641e58cc8721c2f6aebdf
msgid "RssFeed"
msgstr ""

#: ../../ref/utils.txt:426
# ba526293b69644d28c6847a55b1880a1
msgid "Rss201rev2Feed"
msgstr ""

#: ../../ref/utils.txt:430
# b13b9c05b6864fe6b7d7df89360794b9
msgid "Spec: http://cyber.law.harvard.edu/rss/rss.html"
msgstr ""

#: ../../ref/utils.txt:433
# 94dec33e18484c318a1072f9d67580a6
msgid "RssUserland091Feed"
msgstr ""

#: ../../ref/utils.txt:437
# 0a1d58913ea14c3bae012763c15e761f
msgid "Spec: http://backend.userland.com/rss091"
msgstr ""

#: ../../ref/utils.txt:440
# f67808527eee497fa28f3032a91fe78a
msgid "Atom1Feed"
msgstr ""

#: ../../ref/utils.txt:444
# f902ddde61154413aa8d7dd4c87ef9ea
msgid "Spec: http://www.atomenabled.org/developers/syndication/atom-format-spec.php"
msgstr ""

#: ../../ref/utils.txt:447
# c40ffb608eb64d809ebbd87b414086b2
msgid "``django.utils.functional``"
msgstr ""

#: ../../ref/utils.txt:454
# 8339630194354423b90cdfaca495aac2
msgid "Django offers many utility functions (particularly in ``django.utils``) that take a string as their first argument and do something to that string. These functions are used by template filters as well as directly in other code."
msgstr ""

#: ../../ref/utils.txt:458
# b1f8b707b13245ca9c478528b540ecbe
msgid "If you write your own similar functions and deal with translations, you'll face the problem of what to do when the first argument is a lazy translation object. You don't want to convert it to a string immediately, because you might be using this function outside of a view (and hence the current thread's locale setting will not be correct)."
msgstr ""

#: ../../ref/utils.txt:464
# da1dbc04ed284c8e97ee58a376cfe5bc
msgid "For cases like this, use the ``django.utils.functional.allow_lazy()`` decorator. It modifies the function so that *if* it's called with a lazy translation as the first argument, the function evaluation is delayed until it needs to be converted to a string."
msgstr ""

#: ../../ref/utils.txt:478
# 6f8463e07d7549c084e83abeb8244a72
msgid "The ``allow_lazy()`` decorator takes, in addition to the function to decorate, a number of extra arguments (``*args``) specifying the type(s) that the original function can return. Usually, it's enough to include ``unicode`` here and ensure that your function returns only Unicode strings."
msgstr ""

#: ../../ref/utils.txt:483
# 8d23f0a8fa9e4ba283e49efe758b8502
msgid "Using this decorator means you can write your function and assume that the input is a proper string, then add support for lazy translation objects at the end."
msgstr ""

#: ../../ref/utils.txt:488
# 1bd89660802d48339d0a709bcecc284b
msgid "``django.utils.html``"
msgstr ""

#: ../../ref/utils.txt:493
# 87b9cf5a5c3a42f4b37f1a93800c5519
msgid "Usually you should build up HTML using Django's templates to make use of its autoescape mechanism, using the utilities in :mod:`django.utils.safestring` where appropriate. This module provides some additional low level utilitiesfor escaping HTML."
msgstr ""

#: ../../ref/utils.txt:500
# 5cb052b3f4ea4a30b4719af04a86a482
msgid "Returns the given text with ampersands, quotes and angle brackets encoded for use in HTML. The input is first passed through :func:`~django.utils.encoding.force_text` and the output has :func:`~django.utils.safestring.mark_safe` applied."
msgstr ""

#: ../../ref/utils.txt:507
# 6c1bc1955aaf4224b5a1c74c8b369ff5
msgid "Similar to ``escape()``, except that it doesn't operate on pre-escaped strings, so it will not double escape."
msgstr ""

#: ../../ref/utils.txt:512
# 0358ea3811454cc08f94dca542a5ed55
msgid "This is similar to `str.format`_, except that it is appropriate for building up HTML fragments. All args and kwargs are passed through :func:`conditional_escape` before being passed to ``str.format``."
msgstr ""

#: ../../ref/utils.txt:516
# faaa31c1a1f54791a94b5dffae424860
msgid "For the case of building up small HTML fragments, this function is to be preferred over string interpolation using ``%`` or ``str.format`` directly, because it applies escaping to all arguments - just like the Template system applies escaping by default."
msgstr ""

#: ../../ref/utils.txt:521
# e336437dbb29422db6b0109fe449b50f
msgid "So, instead of writing:"
msgstr ""

#: ../../ref/utils.txt:530
# b391e096662e4beeb3acfd454b989038
msgid "you should instead use:"
msgstr ""

#: ../../ref/utils.txt:537
# 01c9278269f54538a802021231482df3
msgid "This has the advantage that you don't need to apply :func:`escape` to each argument and risk a bug and an XSS vulnerability if you forget one."
msgstr ""

#: ../../ref/utils.txt:540
# 2642fbe28d814785969c628ad6ef366b
msgid "Note that although this function uses ``str.format`` to do the interpolation, some of the formatting options provided by `str.format`_ (e.g. number formatting) will not work, since all arguments are passed through :func:`conditional_escape` which (ultimately) calls :func:`~django.utils.encoding.force_text` on the values."
msgstr ""

#: ../../ref/utils.txt:548
# a1ccf570b8774751a6afa3668595d080
msgid "A wrapper of :func:`format_html`, for the common case of a group of arguments that need to be formatted using the same format string, and then joined using ``sep``. ``sep`` is also passed through :func:`conditional_escape`."
msgstr ""

#: ../../ref/utils.txt:553
# 5daf676313b34c779e32d37866e90cf7
msgid "``args_generator`` should be an iterator that returns the sequence of ``args`` that will be passed to :func:`format_html`. For example::"
msgstr ""

#: ../../ref/utils.txt:561
# f4691a081337405b8e5c8ef1f43d105c
msgid "Removes anything that looks like an html tag from the string, that is anything contained within ``<>``."
msgstr ""

#: ../../ref/utils.txt:568
# c82d84513812498f9df784980600bf98
msgid "If ``value`` is ``\"<b>Joel</b> <button>is</button> a <span>slug</span>\"`` the return value will be ``\"Joel is a slug\"``."
msgstr ""

#: ../../ref/utils.txt:573
# e7ffb494cd804cfdb8ef12bf2c4d23ec
msgid "Removes a space-separated list of [X]HTML tag names from the output."
msgstr ""

#: ../../ref/utils.txt:579
# 1ffe0f4181024b7db58f1ac50593da16
msgid "If ``value`` is ``\"<b>Joel</b> <button>is</button> a <span>slug</span>\"`` the return value will be ``\"Joel <button>is</button> a slug\"``."
msgstr ""

#: ../../ref/utils.txt:584
# 1cd28aef0d224eddb2d56d24fe4ace11
msgid "If ``value`` is ``\"<B>Joel</B> <button>is</button> a <span>slug</span>\"`` the return value will be ``\"<B>Joel</B> <button>is</button> a slug\"``."
msgstr ""

#: ../../ref/utils.txt:590
# 106205f7eb614684a60e248ce2582bb3
msgid "``django.utils.http``"
msgstr ""

#: ../../ref/utils.txt:597
# 8905e7fc8acc48e2959fcdefaa97e109
msgid "A version of Python's ``urllib.quote()`` function that can operate on unicode strings. The url is first UTF-8 encoded before quoting. The returned string can safely be used as part of an argument to a subsequent ``iri_to_uri()`` call without double-quoting occurring. Employs lazy execution."
msgstr ""

#: ../../ref/utils.txt:605
# 3e483b9910a149d8921af3361a13f1c0
msgid "A version of Python's urllib.quote_plus() function that can operate on unicode strings. The url is first UTF-8 encoded before quoting. The returned string can safely be used as part of an argument to a subsequent ``iri_to_uri()`` call without double-quoting occurring. Employs lazy execution."
msgstr ""

#: ../../ref/utils.txt:613
# 06461ba4c059430ebc6f47134f769286
msgid "A version of Python's urllib.urlencode() function that can operate on unicode strings. The parameters are first case to UTF-8 encoded strings and then encoded as per normal."
msgstr ""

#: ../../ref/utils.txt:619
# 28f8f072d4944c23af503d8726c5129f
msgid "Formats the time to ensure compatibility with Netscape's cookie standard."
msgstr ""

#: ../../ref/utils.txt:621
#: ../../ref/utils.txt:632
# 8188b957e6314c9aaea009d600a9f2fa
# 3a80552b8a8a40a69e37ee281e97aac1
msgid "Accepts a floating point number expressed in seconds since the epoch in UTC--such as that outputted by ``time.time()``. If set to ``None``, defaults to the current time."
msgstr ""

#: ../../ref/utils.txt:625
# ee6e959954f642b09ac91133f2432d6b
msgid "Outputs a string in the format ``Wdy, DD-Mon-YYYY HH:MM:SS GMT``."
msgstr ""

#: ../../ref/utils.txt:629
# 69bf848aa97b44728ecfa3c3fda4754a
msgid "Formats the time to match the :rfc:`1123` date format as specified by HTTP :rfc:`2616#section-3.3.1` section 3.3.1."
msgstr ""

#: ../../ref/utils.txt:636
# 90117f6f5470427cb3df988f9c4cdde9
msgid "Outputs a string in the format ``Wdy, DD Mon YYYY HH:MM:SS GMT``."
msgstr ""

#: ../../ref/utils.txt:640
# ef62b32beb26463aaae2424b0c8a8ae8
msgid "Converts a base 36 string to an integer. On Python 2 the output is guaranteed to be an ``int`` and not a ``long``."
msgstr ""

#: ../../ref/utils.txt:645
# a86ea7e507324fb28ddc9221f81c599e
msgid "Converts a positive integer to a base 36 string. On Python 2 ``i`` must be smaller than :data:`sys.maxint`."
msgstr ""

#: ../../ref/utils.txt:649
# f9a0c6d6218e4bcc991cb63ed79a3c22
msgid "``django.utils.safestring``"
msgstr ""

#: ../../ref/utils.txt:654
# d5112ba25b0b4f098d2213b1a040bf45
msgid "Functions and classes for working with \"safe strings\": strings that can be displayed safely without further escaping in HTML. Marking something as a \"safe string\" means that the producer of the string has already turned characters that should not be interpreted by the HTML engine (e.g. '<') into the appropriate entities."
msgstr ""

#: ../../ref/utils.txt:664
# 1390cbb6886147f6a23678ca7df654b9
msgid "A ``bytes`` subclass that has been specifically marked as \"safe\" (requires no further escaping) for HTML output purposes."
msgstr ""

#: ../../ref/utils.txt:669
# 53b9c7eb142043148aad02ca6f39d233
msgid "A ``str`` subclass that has been specifically marked as \"safe\" (requires no further escaping) for HTML output purposes. This is :class:`SafeBytes` on Python 2 and :class:`SafeText` on Python 3."
msgstr ""

#: ../../ref/utils.txt:677
# 09c613fce3544d679a316ddbfcf53c46
msgid "A ``str`` (in Python 3) or ``unicode`` (in Python 2) subclass that has been specifically marked as \"safe\" for HTML output purposes."
msgstr ""

#: ../../ref/utils.txt:682
# e469042a68734bca9de6f60d11a9d782
msgid "Historical name of :class:`SafeText`. Only available under Python 2."
msgstr ""

#: ../../ref/utils.txt:686
# 5400bf3ab95c46c78e4a6ecee3eb934f
msgid "Explicitly mark a string as safe for (HTML) output purposes. The returned object can be used everywhere a string or unicode object is appropriate."
msgstr ""

#: ../../ref/utils.txt:689
# 2108774e0c74436495342ec2a8189832
msgid "Can be called multiple times on a single string."
msgstr ""

#: ../../ref/utils.txt:693
# fa6be8526fd141e985d37cbcf80112e3
msgid "Explicitly mark a string as requiring HTML escaping upon output. Has no effect on ``SafeData`` subclasses."
msgstr ""

#: ../../ref/utils.txt:696
# d9e2d4e031184af6ad8a2006fb0b4c09
msgid "Can be called multiple times on a single string (the resulting escaping is only applied once)."
msgstr ""

#: ../../ref/utils.txt:700
# a61d7964165f4cb4b0d202635d687da7
msgid "``django.utils.text``"
msgstr ""

#: ../../ref/utils.txt:718
# 70b991d22eee47ae86c69fcf74df4bb7
msgid "``django.utils.translation``"
msgstr ""

#: ../../ref/utils.txt:723
# f310d606fa8443298ca71e5f69ab2e52
msgid "For a complete discussion on the usage of the following see the :doc:`translation documentation </topics/i18n/translation>`."
msgstr ""

#: ../../ref/utils.txt:728
# b040547639d54787b987910d676d2724
msgid "Translates ``message`` and returns it in a UTF-8 bytestring"
msgstr ""

#: ../../ref/utils.txt:732
# b02a51ce2ce14656840ceef32aa55988
msgid "Translates ``message`` and returns it in a unicode string"
msgstr ""

#: ../../ref/utils.txt:736
# df9e8d6bdc3b406cadc57cebd4cce3c7
msgid "Translates ``message`` given the ``context`` and returns it in a unicode string."
msgstr ""

#: ../../ref/utils.txt:739
# 5d3ba55444ba4873bbecc0e7d67e61cc
msgid "For more information, see :ref:`contextual-markers`."
msgstr ""

#: ../../ref/utils.txt:745
#: ../../ref/utils.txt:776
# 8cb0613f98184536883bbf9c8f06d30a
# 56705158157f46618b53b9d60046df31
msgid "Same as the non-lazy versions above, but using lazy execution."
msgstr ""

#: ../../ref/utils.txt:747
#: ../../ref/utils.txt:778
# 2ac54fa1017f4a618e5c088ec87b8347
# 223eb4695fb745a5b708b74edc861804
msgid "See :ref:`lazy translations documentation <lazy-translations>`."
msgstr ""

#: ../../ref/utils.txt:752
# 923f7378d18d4cc096115fed2eeb652a
msgid "Marks strings for translation but doesn't translate them now. This can be used to store strings in global variables that should stay in the base language (because they might be used externally) and will be translated later."
msgstr ""

#: ../../ref/utils.txt:759
# efd7f9b1e13b47e985662f263f77ed83
msgid "Translates ``singular`` and ``plural`` and returns the appropriate string based on ``number`` in a UTF-8 bytestring."
msgstr ""

#: ../../ref/utils.txt:764
# 1d86b9d6ea0f412abc2dcbf56693c944
msgid "Translates ``singular`` and ``plural`` and returns the appropriate string based on ``number`` in a unicode string."
msgstr ""

#: ../../ref/utils.txt:769
# c1999b8a675546758f08cfca808a6f0f
msgid "Translates ``singular`` and ``plural`` and returns the appropriate string based on ``number`` and the ``context`` in a unicode string."
msgstr ""

#: ../../ref/utils.txt:782
# 5d6cf5bb70c24975a7fc9bbc9fe9ca9a
msgid "Lazy variant of string concatenation, needed for translations that are constructed from multiple parts."
msgstr ""

#: ../../ref/utils.txt:787
# f2baa18464e14f868909579566717154
msgid "Fetches the translation object for a given language and installs it as the current translation object for the current thread."
msgstr ""

#: ../../ref/utils.txt:792
# 1c454f3e78544fab9328529fb2c5d475
msgid "De-installs the currently active translation object so that further _ calls will resolve against the default translation object, again."
msgstr ""

#: ../../ref/utils.txt:797
# af89b4b09c834c6c9733a4f25f042e91
msgid "Makes the active translation object a NullTranslations() instance. This is useful when we want delayed translations to appear as the original string for some reason."
msgstr ""

#: ../../ref/utils.txt:805
# c1d3e15fbb004150b85f35d0d4fa4567
msgid "A Python context manager that uses :func:`django.utils.translation.activate` to fetch the translation object for a given language, installing it as the translation object for the current thread and reinstall the previous active language on exit. Optionally it can simply deinstall the temporary translation on exit with :func:`django.utils.translation.deactivate` if the deactivate argument is True. If you pass None as the language argument, a NullTranslations() instance is installed while the context is active."
msgstr ""

#: ../../ref/utils.txt:816
# 73ed035510114c0c9c41b5c24ecb1ac4
msgid "Returns the currently selected language code."
msgstr ""

#: ../../ref/utils.txt:820
# ccc30302fdc942e1a7128ddab1010c5d
msgid "Returns selected language's BiDi layout:"
msgstr ""

#: ../../ref/utils.txt:822
# 994f0719e7f2478a870a8a5d4a68ab16
msgid "``False`` = left-to-right layout"
msgstr ""

#: ../../ref/utils.txt:823
# d4a2f36594e14c7e847eeb4ce7c07f26
msgid "``True`` = right-to-left layout"
msgstr ""

#: ../../ref/utils.txt:829
# 0ba7650be3284ada939674feccdf28f3
msgid "Analyzes the request to find what language the user wants the system to show. Only languages listed in settings.LANGUAGES are taken into account. If the user requests a sublanguage where we have a main language, we send out the main language."
msgstr ""

#: ../../ref/utils.txt:834
# 7a98fba59abd40b591787489ff884421
msgid "If ``check_path`` is ``True``, the function first checks the requested URL for whether its path begins with a language code listed in the :setting:`LANGUAGES` setting."
msgstr ""

#: ../../ref/utils.txt:840
# cc7e7314f58c436a81ef28dfca38d8a0
msgid "Turns a language name (en-us) into a locale name (en_US)."
msgstr ""

#: ../../ref/utils.txt:844
# e86de366c4ed4851bdaa8098eecadb2c
msgid "Turns a Django template into something that is understood by xgettext. It does so by translating the Django translation tags into standard gettext function invocations."
msgstr ""

#: ../../ref/utils.txt:851
# 2c06f323d0e14613b470fa6e0c98cf32
msgid "``django.utils.timezone``"
msgstr ""

#: ../../ref/utils.txt:860
# aeaaf1eb33bc4767b9027c6141b1988e
msgid ":class:`~datetime.tzinfo` instance that represents UTC."
msgstr ""

#: ../../ref/utils.txt:864
# 5e02203b772c4b9aa9936fed1e9ba1bd
msgid "Returns a :class:`~datetime.tzinfo` instance that represents the :ref:`default time zone <default-current-time-zone>`."
msgstr ""

#: ../../ref/utils.txt:869
# 977a4df4a3a7474eb2708deb1120ea0d
msgid "Returns the name of the :ref:`default time zone <default-current-time-zone>`."
msgstr ""

#: ../../ref/utils.txt:874
# 5e9024da9e0a4739b19eed0e6c239dca
msgid "Returns a :class:`~datetime.tzinfo` instance that represents the :ref:`current time zone <default-current-time-zone>`."
msgstr ""

#: ../../ref/utils.txt:879
# 6c81d0acf77e49dab20741b485e0d12e
msgid "Returns the name of the :ref:`current time zone <default-current-time-zone>`."
msgstr ""

#: ../../ref/utils.txt:884
# 35b0146f9ca34298b5fa5a902c16c875
msgid "Sets the :ref:`current time zone <default-current-time-zone>`. The ``timezone`` argument must be an instance of a :class:`~datetime.tzinfo` subclass or, if pytz_ is available, a time zone name."
msgstr ""

#: ../../ref/utils.txt:890
# c5b6d833162b462386be2a6e3645cfd3
msgid "Unsets the :ref:`current time zone <default-current-time-zone>`."
msgstr ""

#: ../../ref/utils.txt:894
# 6a159079e94f4db68b9e9a4d6e1b867f
msgid "This is a Python context manager that sets the :ref:`current time zone <default-current-time-zone>` on entry with :func:`activate()`, and restores the previously active time zone on exit. If the ``timezone`` argument is ``None``, the :ref:`current time zone <default-current-time-zone>` is unset on entry with :func:`deactivate()` instead."
msgstr ""

#: ../../ref/utils.txt:904
# bc0af54c5b3244dfa7b3cff762b8ee45
msgid "Converts an aware :class:`~datetime.datetime` to a different time zone, by default the :ref:`current time zone <default-current-time-zone>`."
msgstr ""

#: ../../ref/utils.txt:907
# 56b74bda35964916a7e5c9fb3758b06f
msgid "This function doesn't work on naive datetimes; use :func:`make_aware` instead."
msgstr ""

#: ../../ref/utils.txt:912
# 09b2b51182424a799e2e4482936e0e4f
msgid "Returns an aware or naive :class:`~datetime.datetime` that represents the current point in time when :setting:`USE_TZ` is ``True`` or ``False`` respectively."
msgstr ""

#: ../../ref/utils.txt:918
# e30919b96cbb4cfeb2137131c6b90fda
msgid "Returns ``True`` if ``value`` is aware, ``False`` if it is naive. This function assumes that ``value`` is a :class:`~datetime.datetime`."
msgstr ""

#: ../../ref/utils.txt:923
# f7fc7d01fb9d44838d88cd308bed07f4
msgid "Returns ``True`` if ``value`` is naive, ``False`` if it is aware. This function assumes that ``value`` is a :class:`~datetime.datetime`."
msgstr ""

#: ../../ref/utils.txt:928
# 10c9f9f9d6d545fdad2e2c5818f69529
msgid "Returns an aware :class:`~datetime.datetime` that represents the same point in time as ``value`` in ``timezone``, ``value`` being a naive :class:`~datetime.datetime`."
msgstr ""

#: ../../ref/utils.txt:932
# 8386f6cd90364835b1b14cf3c181576f
msgid "This function can raise an exception if ``value`` doesn't exist or is ambiguous because of DST transitions."
msgstr ""

#: ../../ref/utils.txt:937
# ca6392029ae649f78f7c4af4ba012f3e
msgid "Returns an naive :class:`~datetime.datetime` that represents in ``timezone``  the same point in time as ``value``, ``value`` being an aware :class:`~datetime.datetime`"
msgstr ""

#: ../../ref/utils.txt:944
# e78b4c7b844843df894412eddc06b193
msgid "``django.utils.tzinfo``"
msgstr ""

#: ../../ref/utils.txt:951
# a12c8c1d70704905ae0d6d69c7b0a942
msgid "Fixed offset in minutes east from UTC."
msgstr ""

#: ../../ref/utils.txt:955
# 6dd56bfbb01f4d3c808209a5385c3380
msgid "Proxy timezone information from time module."
msgstr ""

#: ../../ref/validators.txt:3
# ab688c5b506b44cbb070679e3405b2e3
msgid "Validators"
msgstr ""

#: ../../ref/validators.txt:9
# bc467c2c78404522a3097a92833fb762
msgid "Writing validators"
msgstr ""

#: ../../ref/validators.txt:11
# 10f4b1d2289c451f9e05c67a7f672b0a
msgid "A validator is a callable that takes a value and raises a :exc:`~django.core.exceptions.ValidationError` if it doesn't meet some criteria. Validators can be useful for re-using validation logic between different types of fields."
msgstr ""

#: ../../ref/validators.txt:16
# d88e26b15b124b22a22c63de0b3d7926
msgid "For example, here's a validator that only allows even numbers::"
msgstr ""

#: ../../ref/validators.txt:24
# 478b63531ad24ee8be9f4f7f79f2bd7c
msgid "You can add this to a model field via the field's :attr:`~django.db.models.Field.validators` argument::"
msgstr ""

#: ../../ref/validators.txt:32
# dad30bf206364c59bc280bbbd870cdcf
msgid "Because values are converted to Python before validators are run, you can even use the same validator with forms::"
msgstr ""

#: ../../ref/validators.txt:41
# 8cf4dce826bd42f2bedb195f88b49ffc
msgid "How validators are run"
msgstr ""

#: ../../ref/validators.txt:43
# 9931f59e93294936a7e3e04cd721fb65
msgid "See the :doc:`form validation </ref/forms/validation>` for more information on how validators are run in forms, and :ref:`Validating objects <validating-objects>` for how they're run in models. Note that validators will not be run automatically when you save a model, but if you are using a :class:`~django.forms.ModelForm`, it will run your validators on any fields that are included in your form. See the :doc:`ModelForm documentation </topics/forms/modelforms>` for information on how model validation interacts with forms."
msgstr ""

#: ../../ref/validators.txt:53
# b07e9f77aa724cd992d0a1914bfbcb65
msgid "Built-in validators"
msgstr ""

#: ../../ref/validators.txt:55
# a657d1e4564a49fc926ac0c8007a0982
msgid "The :mod:`django.core.validators` module contains a collection of callable validators for use with model and form fields. They're used internally but are available for use with your own fields, too. They can be used in addition to, or in lieu of custom ``field.clean()`` methods."
msgstr ""

#: ../../ref/validators.txt:61
# 04f4062a71b64ce793e5504b58f69015
msgid "``RegexValidator``"
msgstr ""

#: ../../ref/validators.txt:71
# d83ed606f5ce43c997bacb1b66206dc4
msgid "The regular expression pattern to search for the provided ``value``, or a pre-compiled regular expression. Raises a :exc:`~django.core.exceptions.ValidationError` with :attr:`message` and :attr:`code` if no match is found. By default, matches any string (including an empty string)."
msgstr ""

#: ../../ref/validators.txt:79
# ccf935de97e745088487f2608510bd3e
msgid "The error message used by :exc:`~django.core.exceptions.ValidationError` if validation fails. Defaults to ``\"Enter a valid value\"``."
msgstr ""

#: ../../ref/validators.txt:85
# 78dc4feb13eb4bfaae212db8aefae826
msgid "The error code used by :exc:`~django.core.exceptions.ValidationError` if validation fails. Defaults to ``\"invalid\"``."
msgstr ""

#: ../../ref/validators.txt:89
# e0632ef371514a21b95a7eadd65cfdae
msgid "``URLValidator``"
msgstr ""

#: ../../ref/validators.txt:92
# 37f1fb979a654366ae08eba4c606d57e
msgid "A :class:`RegexValidator` that ensures a value looks like a URL, and raises an error code of ``'invalid'`` if it doesn't."
msgstr ""

#: ../../ref/validators.txt:96
# 3cb2471eeb7f4d2b9ca7b6a367ec3b9e
msgid "``validate_email``"
msgstr ""

#: ../../ref/validators.txt:99
# 63732ca4aff54f61b23deb1bc715342e
msgid "A :class:`RegexValidator` instance that ensures a value looks like an email address."
msgstr ""

#: ../../ref/validators.txt:103
# 8c35fa5a5f534fdc9d51d061e4929b12
msgid "``validate_slug``"
msgstr ""

#: ../../ref/validators.txt:106
# 8d88cbf964da4a8d9b2415bd47235ada
msgid "A :class:`RegexValidator` instance that ensures a value consists of only letters, numbers, underscores or hyphens."
msgstr ""

#: ../../ref/validators.txt:110
# d63b9253ae5c4923a5610250504df329
msgid "``validate_ipv4_address``"
msgstr ""

#: ../../ref/validators.txt:113
# 6f553b25543e4e07972e97a70fe36742
msgid "A :class:`RegexValidator` instance that ensures a value looks like an IPv4 address."
msgstr ""

#: ../../ref/validators.txt:117
# 2bebb63eecf94b96bd1434be92aad7a0
msgid "``validate_ipv6_address``"
msgstr ""

#: ../../ref/validators.txt:122
# d7ce6cd7c4c84fc39905ec8e14da2e4b
msgid "Uses ``django.utils.ipv6`` to check the validity of an IPv6 address."
msgstr ""

#: ../../ref/validators.txt:125
# 5a04d514e5ed492aa22a99208bcee93e
msgid "``validate_ipv46_address``"
msgstr ""

#: ../../ref/validators.txt:130
# a1dc0074ef3f43f8b288b760141eaf84
msgid "Uses both ``validate_ipv4_address`` and ``validate_ipv6_address`` to ensure a value is either a valid IPv4 or IPv6 address."
msgstr ""

#: ../../ref/validators.txt:134
# 0e16bb91c7a94aaebbd117792ff190bd
msgid "``validate_comma_separated_integer_list``"
msgstr ""

#: ../../ref/validators.txt:137
# 700d9c80bb8a448787ac92ca3ff86ddc
msgid "A :class:`RegexValidator` instance that ensures a value is a comma-separated list of integers."
msgstr ""

#: ../../ref/validators.txt:141
# 8d3a19f5dd53430c8aef69f23405f2c3
msgid "``MaxValueValidator``"
msgstr ""

#: ../../ref/validators.txt:144
# 535a212a1e97490b8619e192958c2b98
msgid "Raises a :exc:`~django.core.exceptions.ValidationError` with a code of ``'max_value'`` if ``value`` is greater than ``max_value``."
msgstr ""

#: ../../ref/validators.txt:148
# 1d6bea0dfdab47cfabf0d56774789655
msgid "``MinValueValidator``"
msgstr ""

#: ../../ref/validators.txt:151
# 104d5a3a35ec4cf0b25e9f24bd3c5c4b
msgid "Raises a :exc:`~django.core.exceptions.ValidationError` with a code of ``'min_value'`` if ``value`` is less than ``min_value``."
msgstr ""

#: ../../ref/validators.txt:155
# a3d72ad9d04f4d03ad43527b2bfb6cac
msgid "``MaxLengthValidator``"
msgstr ""

#: ../../ref/validators.txt:158
# b180048f35c4461fbd196fb6769cff4c
msgid "Raises a :exc:`~django.core.exceptions.ValidationError` with a code of ``'max_length'`` if the length of ``value`` is greater than ``max_length``."
msgstr ""

#: ../../ref/validators.txt:162
# c469b652166b4ed0bb766f6e0f7efb12
msgid "``MinLengthValidator``"
msgstr ""

#: ../../ref/validators.txt:165
# c9c8a4f704bd42528cfa0ebf1d5b7a98
msgid "Raises a :exc:`~django.core.exceptions.ValidationError` with a code of ``'min_length'`` if the length of ``value`` is less than ``min_length``."
msgstr ""

#: ../../ref/views.txt:3
# 2b3273fdd9ab45c393833866be86e19b
msgid "Built-in Views"
msgstr ""

#: ../../ref/views.txt:8
# 4cfe24ec9b3041af839c2c503a9ee77c
msgid "Several of Django's built-in views are documented in :doc:`/topics/http/views` as well as elsewhere in the documentation."
msgstr ""

#: ../../ref/views.txt:12
# 07dd4bab768f49459c2ef816a05c3eb8
msgid "Serving files in development"
msgstr ""

#: ../../ref/views.txt:16
# cfedd7dc30744c0ea0a4031fa18a292d
msgid "There may be files other than your project's static assets that, for convenience, you'd like to have Django serve for you in local development. The :func:`~django.views.static.serve` view can be used to serve any directory you give it. (This view is **not** hardened for production use and should be used only as a development aid; you should serve these files in production using a real front-end webserver)."
msgstr ""

#: ../../ref/views.txt:23
# c86eb244d7804b42b0337827c8c9a811
msgid "The most likely example is user-uploaded content in :setting:`MEDIA_ROOT`. ``django.contrib.staticfiles`` is intended for static assets and has no built-in handling for user-uploaded files, but you can have Django serve your :setting:`MEDIA_ROOT` by appending something like this to your URLconf::"
msgstr ""

#: ../../ref/views.txt:39
# b05c68897a4049d6a8909d16a90495a4
msgid "Note, the snippet assumes your :setting:`MEDIA_URL` has a value of ``'/media/'``. This will call the :func:`~django.views.static.serve` view, passing in the path from the URLconf and the (required) ``document_root`` parameter."
msgstr ""

#: ../../ref/views.txt:44
# aaeb056aacfb47dbad5a4c69a75c79e5
msgid "Since it can become a bit cumbersome to define this URL pattern, Django ships with a small URL helper function :func:`~django.conf.urls.static.static` that takes as parameters the prefix such as :setting:`MEDIA_URL` and a dotted path to a view, such as ``'django.views.static.serve'``. Any other function parameter will be transparently passed to the view."
msgstr ""

