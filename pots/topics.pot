# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Django 1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-04-02 21:26\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../topics/auth/customizing.txt:3
# 33fa9ca0bea5411ca014d66ce20576f7
msgid "Customizing authentication in Django"
msgstr ""

#: ../../topics/auth/customizing.txt:5
# bc3607162363461e8c5f81b16ee9a3ec
msgid "The authentication that comes with Django is good enough for most common cases, but you may have needs not met by the out-of-the-box defaults. To customize authentication to your projects needs involves understanding what points of the provided system are extendible or replaceable. This document provides details about how the auth system can be customized."
msgstr ""

#: ../../topics/auth/customizing.txt:11
# 86bb01d6e13c47119d7526adb7f0ba81
msgid ":ref:`Authentication backends <authentication-backends>` provide an extensible system for when a username and password stored with the User model need to be authenticated against a different service than Django's default."
msgstr ""

#: ../../topics/auth/customizing.txt:15
# ad698285fc36484585953ad28b4217d8
msgid "You can give your models :ref:`custom permissions <custom-permissions>` that can be checked through Django's authorization system."
msgstr ""

#: ../../topics/auth/customizing.txt:18
# a6804c7dbeeb4a59aaa7c98651b6ce7c
msgid "You can :ref:`extend <extending-user>` the default User model, or :ref:`substitute <auth-custom-user>` a completely customized model."
msgstr ""

#: ../../topics/auth/customizing.txt:24
# 8f4ef80006b94a8db7c036243dbda2d4
msgid "Other authentication sources"
msgstr ""

#: ../../topics/auth/customizing.txt:26
# 848a7d4e15cc4c11bb05c68637fa1239
msgid "There may be times you have the need to hook into another authentication source -- that is, another source of usernames and passwords or authentication methods."
msgstr ""

#: ../../topics/auth/customizing.txt:30
# 3d21831430e245cc8d199bed60353b64
msgid "For example, your company may already have an LDAP setup that stores a username and password for every employee. It'd be a hassle for both the network administrator and the users themselves if users had separate accounts in LDAP and the Django-based applications."
msgstr ""

#: ../../topics/auth/customizing.txt:35
# 51225c58dfa042c88fa0bfa22a3bbde7
msgid "So, to handle situations like this, the Django authentication system lets you plug in other authentication sources. You can override Django's default database-based scheme, or you can use the default system in tandem with other systems."
msgstr ""

#: ../../topics/auth/customizing.txt:40
# 3418737f5bac484d904266791cbbf3f4
msgid "See the `authentication backend reference <authentication-backends-reference>` for information on the authentication backends included with Django."
msgstr ""

#: ../../topics/auth/customizing.txt:45
# 45b4b8e5618145f4892eeeeaf16bafea
msgid "Specifying authentication backends"
msgstr ""

#: ../../topics/auth/customizing.txt:47
# 25018598ffb045a594d18ee09fcdbf7b
msgid "Behind the scenes, Django maintains a list of \"authentication backends\" that it checks for authentication. When somebody calls :func:`django.contrib.auth.authenticate()` -- as described in :ref:`How to log a user in <how-to-log-a-user-in>` above -- Django tries authenticating across all of its authentication backends. If the first authentication method fails, Django tries the second one, and so on, until all backends have been attempted."
msgstr ""

#: ../../topics/auth/customizing.txt:54
# 82f3bdf8c71f4de8b61f76f98ec6c1c5
msgid "The list of authentication backends to use is specified in the :setting:`AUTHENTICATION_BACKENDS` setting. This should be a tuple of Python path names that point to Python classes that know how to authenticate. These classes can be anywhere on your Python path."
msgstr ""

#: ../../topics/auth/customizing.txt:59
# 42ace59ef49f4757bd4a5a7b1fc1e2f3
msgid "By default, :setting:`AUTHENTICATION_BACKENDS` is set to::"
msgstr ""

#: ../../topics/auth/customizing.txt:63
# aec9409c28cf412b8759b390484df794
msgid "That's the basic authentication backend that checks the Django users database and queries the built-in permissions. It does not provide protection against brute force attacks via any rate limiting mechanism. You may either implement your own rate limiting mechanism in a custom auth backend, or use the mechanisms provided by most Web servers."
msgstr ""

#: ../../topics/auth/customizing.txt:69
# 68e9bd38f6434c85858bd7ea71a12af0
msgid "The order of :setting:`AUTHENTICATION_BACKENDS` matters, so if the same username and password is valid in multiple backends, Django will stop processing at the first positive match."
msgstr ""

#: ../../topics/auth/customizing.txt:75
# d9a27167e3634fb098f69a2713a7db9a
msgid "Once a user has authenticated, Django stores which backend was used to authenticate the user in the user's session, and re-uses the same backend for the duration of that session whenever access to the currently authenticated user is needed. This effectively means that authentication sources are cached on a per-session basis, so if you change :setting:`AUTHENTICATION_BACKENDS`, you'll need to clear out session data if you need to force users to re-authenticate using different methods. A simple way to do that is simply to execute ``Session.objects.all().delete()``."
msgstr ""

#: ../../topics/auth/customizing.txt:85
# 0e3fb962ffa94a8bb3e2cc004a061355
msgid "Writing an authentication backend"
msgstr ""

#: ../../topics/auth/customizing.txt:87
# 70fbb4254f66401d982020abd03e5600
msgid "An authentication backend is a class that implements two required methods: ``get_user(user_id)`` and ``authenticate(**credentials)``, as well as a set of optional permission related :ref:`authorization methods <authorization_methods>`."
msgstr ""

#: ../../topics/auth/customizing.txt:91
# aff1be62ba51464dbe1e249943b8295f
msgid "The ``get_user`` method takes a ``user_id`` -- which could be a username, database ID or whatever -- and returns a ``User`` object."
msgstr ""

#: ../../topics/auth/customizing.txt:94
# 9aef232355c74a3197a912ac85905b09
msgid "The ``authenticate`` method takes credentials as keyword arguments. Most of the time, it'll just look like this::"
msgstr ""

#: ../../topics/auth/customizing.txt:102
# 32e2e1e7dcfb43c09205baf168b6fed0
msgid "But it could also authenticate a token, like so::"
msgstr ""

#: ../../topics/auth/customizing.txt:109
# 88e2a597770d41d78e8dc6a9e605d72d
msgid "Either way, ``authenticate`` should check the credentials it gets, and it should return a ``User`` object that matches those credentials, if the credentials are valid. If they're not valid, it should return ``None``."
msgstr ""

#: ../../topics/auth/customizing.txt:113
# 7af09ce81cb745ab86a06971d8522ccb
msgid "The Django admin system is tightly coupled to the Django ``User`` object described at the beginning of this document. For now, the best way to deal with this is to create a Django ``User`` object for each user that exists for your backend (e.g., in your LDAP directory, your external SQL database, etc.) You can either write a script to do this in advance, or your ``authenticate`` method can do it the first time a user logs in."
msgstr ""

#: ../../topics/auth/customizing.txt:120
# 30b33b532f074ed9bb80701e296541e6
msgid "Here's an example backend that authenticates against a username and password variable defined in your ``settings.py`` file and creates a Django ``User`` object the first time a user authenticates::"
msgstr ""

#: ../../topics/auth/customizing.txt:163
# 2fc4a4b03e754994a6d645a9488b1ec5
msgid "Handling authorization in custom backends"
msgstr ""

#: ../../topics/auth/customizing.txt:165
# a5b2754fa02d49bfb324d8b4808cfa10
msgid "Custom auth backends can provide their own permissions."
msgstr ""

#: ../../topics/auth/customizing.txt:167
# 5977d226fe934d3799e2c4ad2a835ff3
msgid "The user model will delegate permission lookup functions (:meth:`~django.contrib.auth.models.User.get_group_permissions()`, :meth:`~django.contrib.auth.models.User.get_all_permissions()`, :meth:`~django.contrib.auth.models.User.has_perm()`, and :meth:`~django.contrib.auth.models.User.has_module_perms()`) to any authentication backend that implements these functions."
msgstr ""

#: ../../topics/auth/customizing.txt:174
# 169da48d6c6346408c6de53967199cb2
msgid "The permissions given to the user will be the superset of all permissions returned by all backends. That is, Django grants a permission to a user that any one backend grants."
msgstr ""

#: ../../topics/auth/customizing.txt:178
# cbe81a10edf04744848bef7fee6c8b0d
msgid "The simple backend above could implement permissions for the magic admin fairly simply::"
msgstr ""

#: ../../topics/auth/customizing.txt:189
# 522382d76d21448b8c9cdd79b0943f33
msgid "This gives full permissions to the user granted access in the above example. Notice that in addition to the same arguments given to the associated :class:`django.contrib.auth.models.User` functions, the backend auth functions all take the user object, which may be an anonymous user, as an argument."
msgstr ""

#: ../../topics/auth/customizing.txt:194
# ac18839feba04d02b85fc087eed248f5
msgid "A full authorization implementation can be found in the ``ModelBackend`` class in `django/contrib/auth/backends.py`_, which is the default backend and queries the ``auth_permission`` table most of the time. If you wish to provide custom behavior for only part of the backend API, you can take advantage of Python inheritance and subclass ``ModelBackend`` instead of implementing the complete API in a custom backend."
msgstr ""

#: ../../topics/auth/customizing.txt:206
# abed86114f864da58ff1820b0d35ee04
msgid "Authorization for anonymous users"
msgstr ""

#: ../../topics/auth/customizing.txt:208
# 64fc3937ff1f4dec8eb8c8ab2fd3837f
msgid "An anonymous user is one that is not authenticated i.e. they have provided no valid authentication details. However, that does not necessarily mean they are not authorized to do anything. At the most basic level, most Web sites authorize anonymous users to browse most of the site, and many allow anonymous posting of comments etc."
msgstr ""

#: ../../topics/auth/customizing.txt:214
# 556db84a6fc54e66ae5bfeca24641e8d
msgid "Django's permission framework does not have a place to store permissions for anonymous users. However, the user object passed to an authentication backend may be an :class:`django.contrib.auth.models.AnonymousUser` object, allowing the backend to specify custom authorization behavior for anonymous users. This is especially useful for the authors of re-usable apps, who can delegate all questions of authorization to the auth backend, rather than needing settings, for example, to control anonymous access."
msgstr ""

#: ../../topics/auth/customizing.txt:225
# 879fad23f2ca42b1b0cc2fe9d7a0f0ff
msgid "Authorization for inactive users"
msgstr ""

#: ../../topics/auth/customizing.txt:227
# aa6a847b903e41bfb5e4b1ab2c17ca43
msgid "An inactive user is a one that is authenticated but has its attribute ``is_active`` set to ``False``. However this does not mean they are not authorized to do anything. For example they are allowed to activate their account."
msgstr ""

#: ../../topics/auth/customizing.txt:232
# 5443e1a8233648f881cae493ee27e1a8
msgid "The support for anonymous users in the permission system allows for a scenario where anonymous users have permissions to do something while inactive authenticated users do not."
msgstr ""

#: ../../topics/auth/customizing.txt:236
# 61775d09c9334a34bb9e47284a2cfb10
msgid "Do not forget to test for the ``is_active`` attribute of the user in your own backend permission methods."
msgstr ""

#: ../../topics/auth/customizing.txt:241
# 5c22c61edbb14e68a3b26f2321b3fd2e
msgid "Handling object permissions"
msgstr ""

#: ../../topics/auth/customizing.txt:243
# 780050a0bff14eadb8e7e1d0a3e5c90a
msgid "Django's permission framework has a foundation for object permissions, though there is no implementation for it in the core. That means that checking for object permissions will always return ``False`` or an empty list (depending on the check performed). An authentication backend will receive the keyword parameters ``obj`` and ``user_obj`` for each object related authorization method and can return the object level permission as appropriate."
msgstr ""

#: ../../topics/auth/customizing.txt:253
# 8bc011e5df9e437c90b3bfb83fbbba94
msgid "Custom permissions"
msgstr ""

#: ../../topics/auth/customizing.txt:255
# 381e725eab9f4e76a3c39f816086d3ba
msgid "To create custom permissions for a given model object, use the ``permissions`` :ref:`model Meta attribute <meta-options>`."
msgstr ""

#: ../../topics/auth/customizing.txt:258
# 9d2135dfd0ed451d96ded211313a8aad
msgid "This example Task model creates three custom permissions, i.e., actions users can or cannot do with Task instances, specific to your application::"
msgstr ""

#: ../../topics/auth/customizing.txt:270
# 56aa96ff1d204228bd97a397e71e9746
msgid "The only thing this does is create those extra permissions when you run :djadmin:`manage.py syncdb <syncdb>`. Your code is in charge of checking the value of these permissions when an user is trying to access the functionality provided by the application (viewing tasks, changing the status of tasks, closing tasks.) Continuing the above example, the following checks if a user may view tasks::"
msgstr ""

#: ../../topics/auth/customizing.txt:282
# 69d2b32782394ec89b006bd92f652aa8
msgid "Extending the existing User model"
msgstr ""

#: ../../topics/auth/customizing.txt:284
# 71f3e898f9054335aad8271e4bff654e
msgid "There are two ways to extend the default :class:`~django.contrib.auth.models.User` model without substituting your own model. If the changes you need are purely behavioral, and don't require any change to what is stored in the database, you can create a :ref:`proxy model <proxy-models>` based on :class:`~django.contrib.auth.models.User`. This allows for any of the features offered by proxy models including default ordering, custom managers, or custom model methods."
msgstr ""

#: ../../topics/auth/customizing.txt:292
# fba966650902454aa71894e9462bb7b9
msgid "If you wish to store information related to ``User``, you can use a :ref:`one-to-one relationship <ref-onetoone>` to a model containing the fields for additional information. This one-to-one model is often called a profile model, as it might store non-auth related information about a site user. For example you might create an Employee model::"
msgstr ""

#: ../../topics/auth/customizing.txt:304
# 86bdd78159274d35b32d10344335ad7f
msgid "Assuming an existing Employee Fred Smith who has both a User and Employee model, you can access the related information using Django's standard related model conventions::"
msgstr ""

#: ../../topics/auth/customizing.txt:311
# 4b65d29dac9c4f53bb985232dd4fdf27
msgid "To add a profile model's fields to the user page in the admin, define an :class:`~django.contrib.admin.InlineModelAdmin` (for this example, we'll use a :class:`~django.contrib.admin.StackedInline`) in your app's ``admin.py`` and add it to a ``UserAdmin`` class which is registered with the :class:`~django.contrib.auth.models.User` class::"
msgstr ""

#: ../../topics/auth/customizing.txt:338
# 38ebb534ded147dd9de4ed2efe75de5e
msgid "These profile models are not special in any way - they are just Django models that happen to have a one-to-one link with a User model. As such, they do not get auto created when a user is created, but a :attr:`django.db.models.signals.post_save` could be used to create or update related models as appropriate."
msgstr ""

#: ../../topics/auth/customizing.txt:344
# be7618e638f54ea7a265fba631f946d8
msgid "Note that using related models results in additional queries or joins to retrieve the related data, and depending on your needs substituting the User model and adding the related fields may be your better option.  However existing links to the default User model within your project's apps may justify the extra database load."
msgstr ""

#: ../../topics/auth/customizing.txt:358
# dfe28472c4d243bbb93ccdf0fa255dcc
msgid "Prior to 1.5, a single profile model could be specified site-wide with the setting :setting:`AUTH_PROFILE_MODULE` with a string consisting of the following items, separated by a dot:"
msgstr ""

#: ../../topics/auth/customizing.txt:362
# add4c8995b7844ddb261c112231d37d1
msgid "The name of the application (case sensitive) in which the user profile model is defined (in other words, the name which was passed to :djadmin:`manage.py startapp <startapp>` to create the application)."
msgstr ""

#: ../../topics/auth/customizing.txt:367
# c167b70387f344659ffc3f90a92e1978
msgid "The name of the model (not case sensitive) class."
msgstr ""

#: ../../topics/auth/customizing.txt:369
# 81c3747eb61144c4acb9c0ca8269b2a7
msgid "For example, if the profile model was a class named ``UserProfile`` and was defined inside an application named ``accounts``, the appropriate setting would be::"
msgstr ""

#: ../../topics/auth/customizing.txt:375
# c54d243dc5ba439aa3291a76b86f4dad
msgid "When a user profile model has been defined and specified in this manner, each :class:`~django.contrib.auth.models.User` object will have a method -- :class:`~django.contrib.auth.models.User.get_profile()` -- which returns the instance of the user profile model associated with that :class:`~django.contrib.auth.models.User`."
msgstr ""

#: ../../topics/auth/customizing.txt:381
# ca177c125f084c819dbdc0746b7e0a74
msgid "The method :class:`~django.contrib.auth.models.User.get_profile()` does not create a profile if one does not exist."
msgstr ""

#: ../../topics/auth/customizing.txt:387
# 5b064b88f0fe43dbb46aca234aa7493d
msgid "Substituting a custom User model"
msgstr ""

#: ../../topics/auth/customizing.txt:391
# 90700ec69eb34468b2dda3996e99062c
msgid "Some kinds of projects may have authentication requirements for which Django's built-in :class:`~django.contrib.auth.models.User` model is not always appropriate. For instance, on some sites it makes more sense to use an email address as your identification token instead of a username."
msgstr ""

#: ../../topics/auth/customizing.txt:396
# d70cf707660d41018be7d01290b80ccd
msgid "Django allows you to override the default User model by providing a value for the :setting:`AUTH_USER_MODEL` setting that references a custom model::"
msgstr ""

#: ../../topics/auth/customizing.txt:401
# af1b5af4224448b7827a5bce40102a3b
msgid "This dotted pair describes the name of the Django app (which must be in your :setting:`INSTALLED_APPS`), and the name of the Django model that you wish to use as your User model."
msgstr ""

#: ../../topics/auth/customizing.txt:407
# 6cdfb48c228e41558766317e99e6dfc7
msgid "Changing :setting:`AUTH_USER_MODEL` has a big effect on your database structure. It changes the tables that are available, and it will affect the construction of foreign keys and many-to-many relationships. If you intend to set :setting:`AUTH_USER_MODEL`, you should set it before running ``manage.py syncdb`` for the first time."
msgstr ""

#: ../../topics/auth/customizing.txt:413
# 7ede17cd2cae4d829e354aeef528432d
msgid "If you have an existing project and you want to migrate to using a custom User model, you may need to look into using a migration tool like South_ to ease the transition."
msgstr ""

#: ../../topics/auth/customizing.txt:420
# 988fd06080384ecf84c73a4e07f9ac22
msgid "Referencing the User model"
msgstr ""

#: ../../topics/auth/customizing.txt:424
# 9213bf117db34141948b6e82c9826cec
msgid "If you reference :class:`~django.contrib.auth.models.User` directly (for example, by referring to it in a foreign key), your code will not work in projects where the :setting:`AUTH_USER_MODEL` setting has been changed to a different User model."
msgstr ""

#: ../../topics/auth/customizing.txt:431
# dc17ce9d5fe040f8a29a498186835286
msgid "Instead of referring to :class:`~django.contrib.auth.models.User` directly, you should reference the user model using ``django.contrib.auth.get_user_model()``. This method will return the currently active User model -- the custom User model if one is specified, or :class:`~django.contrib.auth.models.User` otherwise."
msgstr ""

#: ../../topics/auth/customizing.txt:437
# 90b8fb1c96a4417f9137b240d42a1560
msgid "When you define a foreign key or many-to-many relations to the User model, you should specify the custom model using the :setting:`AUTH_USER_MODEL` setting. For example::"
msgstr ""

#: ../../topics/auth/customizing.txt:448
# 542725afc8464f079cee18e4cc2fad9f
msgid "Specifying a custom User model"
msgstr ""

#: ../../topics/auth/customizing.txt:452
# 57b1af80c2fd4e678021d1b88b66cad1
msgid "Think carefully before handling information not directly related to authentication in your custom User Model."
msgstr ""

#: ../../topics/auth/customizing.txt:455
# 794c330db2f340e49bdfb77b68ccd6f8
msgid "It may be better to store app-specific user information in a model that has a relation with the User model. That allows each app to specify its own user data requirements without risking conflicts with other apps. On the other hand, queries to retrieve this related information will involve a database join, which may have an effect on performance."
msgstr ""

#: ../../topics/auth/customizing.txt:461
# efadc1bd20f744c5a82bd885307b61cb
msgid "Django expects your custom User model to meet some minimum requirements."
msgstr ""

#: ../../topics/auth/customizing.txt:463
# 1e675cf6b80247458fc86bc8d5cae112
msgid "Your model must have an integer primary key."
msgstr ""

#: ../../topics/auth/customizing.txt:465
# 391afee98a3645eeb8e87ba86e4c9c35
msgid "Your model must have a single unique field that can be used for identification purposes. This can be a username, an email address, or any other unique attribute."
msgstr ""

#: ../../topics/auth/customizing.txt:469
# 91389992892b4ba0904dc23cc9675eb4
msgid "Your model must provide a way to address the user in a \"short\" and \"long\" form. The most common interpretation of this would be to use the user's given name as the \"short\" identifier, and the user's full name as the \"long\" identifier. However, there are no constraints on what these two methods return - if you want, they can return exactly the same value."
msgstr ""

#: ../../topics/auth/customizing.txt:476
# debe948cf790476dbd098a12dba00416
msgid "The easiest way to construct a compliant custom User model is to inherit from :class:`~django.contrib.auth.models.AbstractBaseUser`. :class:`~django.contrib.auth.models.AbstractBaseUser` provides the core implementation of a ``User`` model, including hashed passwords and tokenized password resets. You must then provide some key implementation details:"
msgstr ""

#: ../../topics/auth/customizing.txt:488
# e8a353554e1643b8bf3241e38013c121
msgid "A string describing the name of the field on the User model that is used as the unique identifier. This will usually be a username of some kind, but it can also be an email address, or any other unique identifier. The field *must* be unique (i.e., have ``unique=True`` set in its definition)."
msgstr ""

#: ../../topics/auth/customizing.txt:494
# 4af459acc9c64cd3b0f1599bd1adda40
msgid "In the following example, the field ``identifier`` is used as the identifying field::"
msgstr ""

#: ../../topics/auth/customizing.txt:504
# 5afbbcb8b1ab46ccbfee864c3d015e56
msgid "A list of the field names that *must* be provided when creating a user via the :djadmin:`createsuperuser` management command. The user will be prompted to supply a value for each of these fields. It should include any field for which :attr:`~django.db.models.Field.blank` is ``False`` or undefined, but may include additional fields you want prompted for when a user is created interactively. However, it will not work for :class:`~django.db.models.ForeignKey` fields."
msgstr ""

#: ../../topics/auth/customizing.txt:512
# e0884a0eabd24fbca07e22bc31e5da63
msgid "For example, here is the partial definition for a ``User`` model that defines two required fields - a date of birth and height::"
msgstr ""

#: ../../topics/auth/customizing.txt:524
# ed2787ca8fba44e689dc3a7bf4c8ec8c
msgid "``REQUIRED_FIELDS`` must contain all required fields on your User model, but should *not* contain the ``USERNAME_FIELD``."
msgstr ""

#: ../../topics/auth/customizing.txt:529
# df2e8ab1bebf4abeb324c9bfec932033
msgid "A boolean attribute that indicates whether the user is considered \"active\".  This attribute is provided as an attribute on ``AbstractBaseUser`` defaulting to ``True``. How you choose to implement it will depend on the details of your chosen auth backends. See the documentation of the :attr:`attribute on the builtin user model <django.contrib.auth.models.User.is_active>` for details."
msgstr ""

#: ../../topics/auth/customizing.txt:538
# 4d903c0a31984da99f6715e1c2cc18c8
msgid "A longer formal identifier for the user. A common interpretation would be the full name name of the user, but it can be any string that identifies the user."
msgstr ""

#: ../../topics/auth/customizing.txt:544
# 180dbf46eb434301942c2e3469f9210f
msgid "A short, informal identifier for the user. A common interpretation would be the first name of the user, but it can be any string that identifies the user in an informal way. It may also return the same value as :meth:`django.contrib.auth.models.User.get_full_name()`."
msgstr ""

#: ../../topics/auth/customizing.txt:549
# f8dfaadc381946438b623a19f6e642d3
msgid "The following methods are available on any subclass of :class:`~django.contrib.auth.models.AbstractBaseUser`:"
msgstr ""

#: ../../topics/auth/customizing.txt:556
# 4def9ce90c3d41b58ee2a83c5182ab8d
msgid "Returns the value of the field nominated by ``USERNAME_FIELD``."
msgstr ""

#: ../../topics/auth/customizing.txt:560
# 8eb0391b753d4a498fe692a201f9b3d9
msgid "Always returns ``False``. This is a way of differentiating from  :class:`~django.contrib.auth.models.AnonymousUser` objects. Generally, you should prefer using :meth:`~django.contrib.auth.models.AbstractBaseUser.is_authenticated()` to this method."
msgstr ""

#: ../../topics/auth/customizing.txt:568
# a4a49e1f8317401a824ac8c32993f357
msgid "Always returns ``True``. This is a way to tell if the user has been authenticated. This does not imply any permissions, and doesn't check if the user is active - it only indicates that the user has provided a valid username and password."
msgstr ""

#: ../../topics/auth/customizing.txt:575
# ac0f23618c934818a7d2879af53e438b
msgid "Sets the user's password to the given raw string, taking care of the password hashing. Doesn't save the :class:`~django.contrib.auth.models.AbstractBaseUser` object."
msgstr ""

#: ../../topics/auth/customizing.txt:581
# d7b9dcbcc70f4e3b812b6ed7f1079b75
msgid "Returns ``True`` if the given raw string is the correct password for the user. (This takes care of the password hashing in making the comparison.)"
msgstr ""

#: ../../topics/auth/customizing.txt:587
# daf3c7ed85524f6d9c0afccef5b3ead3
msgid "Marks the user as having no password set.  This isn't the same as having a blank string for a password. :meth:`~django.contrib.auth.models.AbstractBaseUser.check_password()` for this user will never return ``True``. Doesn't save the :class:`~django.contrib.auth.models.AbstractBaseUser` object."
msgstr ""

#: ../../topics/auth/customizing.txt:593
# ad3a549d522448599ff1df18ef668a2f
msgid "You may need this if authentication for your application takes place against an existing external source such as an LDAP directory."
msgstr ""

#: ../../topics/auth/customizing.txt:598
# fa5d9b84658443378247d11668b8764f
msgid "Returns ``False`` if :meth:`~django.contrib.auth.models.AbstractBaseUser.set_unusable_password()` has been called for this user."
msgstr ""

#: ../../topics/auth/customizing.txt:602
# c2cb189ff5254ef09f2638ac65b8ebd5
msgid "You should also define a custom manager for your ``User`` model. If your ``User`` model defines ``username`` and ``email`` fields the same as Django's default ``User``, you can just install Django's :class:`~django.contrib.auth.models.UserManager`; however, if your ``User`` model defines different fields, you will need to define a custom manager that extends :class:`~django.contrib.auth.models.BaseUserManager` providing two additional methods:"
msgstr ""

#: ../../topics/auth/customizing.txt:614
# 27cd5ca64ea649c9b96d9b3268eee677
msgid "The prototype of ``create_user()`` should accept the username field, plus all required fields as arguments. For example, if your user model uses ``email`` as the username field, and has ``date_of_birth`` as a required fields, then ``create_user`` should be defined as::"
msgstr ""

#: ../../topics/auth/customizing.txt:625
# e9115c4c55724a03b5f48928290806b0
msgid "The prototype of ``create_superuser()`` should accept the username field, plus all required fields as arguments. For example, if your user model uses ``email`` as the username field, and has ``date_of_birth`` as a required fields, then ``create_superuser`` should be defined as::"
msgstr ""

#: ../../topics/auth/customizing.txt:634
# d855aa01a4ec4de2a952130a1d9a1ffd
msgid "Unlike ``create_user()``, ``create_superuser()`` *must* require the caller to provider a password."
msgstr ""

#: ../../topics/auth/customizing.txt:637
# 2a05cf7265bc488c84b56ff1de382a91
msgid ":class:`~django.contrib.auth.models.BaseUserManager` provides the following utility methods:"
msgstr ""

#: ../../topics/auth/customizing.txt:644
# 6073d14a942844c8a2710b706ca4c9d0
msgid "A classmethod that normalizes email addresses by lowercasing the domain portion of the email address."
msgstr ""

#: ../../topics/auth/customizing.txt:649
# 46037d826d2a4adf98c244cad798f5ee
msgid "Retrieves a user instance using the contents of the field nominated by ``USERNAME_FIELD``."
msgstr ""

#: ../../topics/auth/customizing.txt:654
# 6c1d9a24b8974fe79caea3f5c44141b4
msgid "Returns a random password with the given length and given string of allowed characters. (Note that the default value of ``allowed_chars`` doesn't contain letters that can cause user confusion, including:"
msgstr ""

#: ../../topics/auth/customizing.txt:658
# 30c558af78a84d9a80e68c50891f7d0f
msgid "``i``, ``l``, ``I``, and ``1`` (lowercase letter i, lowercase letter L, uppercase letter i, and the number one)"
msgstr ""

#: ../../topics/auth/customizing.txt:660
# 80c5cef59aef4d11a8ba1c3a2fde93c9
msgid "``o``, ``O``, and ``0`` (uppercase letter o, lowercase letter o, and zero)"
msgstr ""

#: ../../topics/auth/customizing.txt:664
# ee927174a72e4584b1bbb1d4c04246ff
msgid "Extending Django's default User"
msgstr ""

#: ../../topics/auth/customizing.txt:666
# 18cc42e0cfa64f6c92b0dfbf7f81e463
msgid "If you're entirely happy with Django's :class:`~django.contrib.auth.models.User` model and you just want to add some additional profile information, you can simply subclass ``django.contrib.auth.models.AbstractUser`` and add your custom profile fields. This class provides the full implementation of the default :class:`~django.contrib.auth.models.User` as an :ref:`abstract model <abstract-base-classes>`."
msgstr ""

#: ../../topics/auth/customizing.txt:676
# 22da08a9ac5d4867b4f8a0619941b5b9
msgid "Custom users and the built-in auth forms"
msgstr ""

#: ../../topics/auth/customizing.txt:678
# 55daa45b56cf4e3a873c97ecd77722c6
msgid "As you may expect, built-in Django's :ref:`forms <built-in-auth-forms>` and :ref:`views <built-in-auth-views>` make certain assumptions about the user model that they are working with."
msgstr ""

#: ../../topics/auth/customizing.txt:682
# 62db3d77c3ab428ca06d037e7f469a6f
msgid "If your user model doesn't follow the same assumptions, it may be necessary to define a replacement form, and pass that form in as part of the configuration of the auth views."
msgstr ""

#: ../../topics/auth/customizing.txt:686
# 6481d9ec904f4cc097fedf2a25918fb7
msgid ":class:`~django.contrib.auth.forms.UserCreationForm`"
msgstr ""

#: ../../topics/auth/customizing.txt:688
#: ../../topics/auth/customizing.txt:693
# 0cf9921f764f4925a26a41899658a588
# 98f6d9685bc04a0c8f6990eabd720dde
msgid "Depends on the :class:`~django.contrib.auth.models.User` model. Must be re-written for any custom user model."
msgstr ""

#: ../../topics/auth/customizing.txt:691
# fbe7eeb3b9474005b0ddd932e0c5c2c3
msgid ":class:`~django.contrib.auth.forms.UserChangeForm`"
msgstr ""

#: ../../topics/auth/customizing.txt:696
# 774d06d6cb7c4b5499162789605ad110
msgid ":class:`~django.contrib.auth.forms.AuthenticationForm`"
msgstr ""

#: ../../topics/auth/customizing.txt:698
# bfdfcda15b9b4abe9bbbd76e6813ba21
msgid "Works with any subclass of :class:`~django.contrib.auth.models.AbstractBaseUser`, and will adapt to use the field defined in `USERNAME_FIELD`."
msgstr ""

#: ../../topics/auth/customizing.txt:701
# f7c8e3d10abe429ba17fbf6776a0fa54
msgid ":class:`~django.contrib.auth.forms.PasswordResetForm`"
msgstr ""

#: ../../topics/auth/customizing.txt:703
# e660fe222ada4c709a0ea945184cbf8c
msgid "Assumes that the user model has an integer primary key, has a field named ``email`` that can be used to identify the user, and a boolean field named `is_active` to prevent password resets for inactive users."
msgstr ""

#: ../../topics/auth/customizing.txt:707
# e00825a71df84cb6aa1749b10103bdfc
msgid ":class:`~django.contrib.auth.forms.SetPasswordForm`"
msgstr ""

#: ../../topics/auth/customizing.txt:709
#: ../../topics/auth/customizing.txt:713
#: ../../topics/auth/customizing.txt:717
# 481476c109a34cdcb6f2f1d115e1af2c
# 427e5eb9abf74697a68128ed00162735
# 50185aa3d5604d01b6635166c02deda0
msgid "Works with any subclass of :class:`~django.contrib.auth.models.AbstractBaseUser`"
msgstr ""

#: ../../topics/auth/customizing.txt:711
# 5a5df2afc8684dd19f3c1feca9894161
msgid ":class:`~django.contrib.auth.forms.PasswordChangeForm`"
msgstr ""

#: ../../topics/auth/customizing.txt:715
# 4991c595d78d4b07965dfc8f420bf56a
msgid ":class:`~django.contrib.auth.forms.AdminPasswordChangeForm`"
msgstr ""

#: ../../topics/auth/customizing.txt:721
# 61cfb20444bf478abe9dd74cf05609bd
msgid "Custom users and :mod:`django.contrib.admin`"
msgstr ""

#: ../../topics/auth/customizing.txt:723
# c15bfae53e16418c9794d70718cc13bf
msgid "If you want your custom User model to also work with Admin, your User model must define some additional attributes and methods. These methods allow the admin to control access of the User to admin content:"
msgstr ""

#: ../../topics/auth/customizing.txt:731
# 008f02ec9ca541cd863d2f10512e3a83
msgid "Returns ``True`` if the user is allowed to have access to the admin site."
msgstr ""

#: ../../topics/auth/customizing.txt:735
# 8822eb90cd0c4f03a3636592715bd876
msgid "Returns ``True`` if the user account is currently active."
msgstr ""

#: ../../topics/auth/customizing.txt:739
# 098d4b5a154f4b43a56ebbac341c0ca8
msgid "Returns ``True`` if the user has the named permission. If ``obj`` is provided, the permission needs to be checked against a specific object instance."
msgstr ""

#: ../../topics/auth/customizing.txt:745
# fb2621271a5f489b8b4a933ae4c20aa8
msgid "Returns ``True`` if the user has permission to access models in the given app."
msgstr ""

#: ../../topics/auth/customizing.txt:748
# 308f45ac1c854e1dba814efef5016bdf
msgid "You will also need to register your custom User model with the admin. If your custom User model extends ``django.contrib.auth.models.AbstractUser``, you can use Django's existing ``django.contrib.auth.admin.UserAdmin`` class. However, if your User model extends :class:`~django.contrib.auth.models.AbstractBaseUser`, you'll need to define a custom ModelAdmin class. It may be possible to subclass the default ``django.contrib.auth.admin.UserAdmin``; however, you'll need to override any of the definitions that refer to fields on ``django.contrib.auth.models.AbstractUser`` that aren't on your custom User class."
msgstr ""

#: ../../topics/auth/customizing.txt:760
# ce7c901564c646d4ba757040f18d9dd5
msgid "Custom users and permissions"
msgstr ""

#: ../../topics/auth/customizing.txt:762
# d8850d8fd28c4dd280383a0ecdee8bc2
msgid "To make it easy to include Django's permission framework into your own User class, Django provides :class:`~django.contrib.auth.models.PermissionsMixin`. This is an abstract model you can include in the class hierarchy for your User model, giving you all the methods and database fields necessary to support Django's permission model."
msgstr ""

#: ../../topics/auth/customizing.txt:768
# 31542740d2a947aa9863dc12592cc1a9
msgid ":class:`~django.contrib.auth.models.PermissionsMixin` provides the following methods and attributes:"
msgstr ""

#: ../../topics/auth/customizing.txt:775
# 065cba9ddc574aadbd98aec3bbcdb6c8
msgid "Boolean. Designates that this user has all permissions without explicitly assigning them."
msgstr ""

#: ../../topics/auth/customizing.txt:780
# 88a7df2aa2ae4590a3ef87c77ae49924
msgid "Returns a set of permission strings that the user has, through his/her groups."
msgstr ""

#: ../../topics/auth/customizing.txt:783
# d2758e48bcde47c390c6f78cf1ae9e81
msgid "If ``obj`` is passed in, only returns the group permissions for this specific object."
msgstr ""

#: ../../topics/auth/customizing.txt:788
# c24de85ff96d4d16aebdad7f1c8473af
msgid "Returns a set of permission strings that the user has, both through group and user permissions."
msgstr ""

#: ../../topics/auth/customizing.txt:791
# 39496443320f4c23955c13178737c021
msgid "If ``obj`` is passed in, only returns the permissions for this specific object."
msgstr ""

#: ../../topics/auth/customizing.txt:796
# c39a082320bc44c690c49052a398c3f7
msgid "Returns ``True`` if the user has the specified permission, where perm is in the format ``\"<app label>.<permission codename>\"`` (see :ref:`permissions <topic-authorization>`). If the user is inactive, this method will always return ``False``."
msgstr ""

#: ../../topics/auth/customizing.txt:801
# 759be4ea8d464ac790941678245d76ba
msgid "If ``obj`` is passed in, this method won't check for a permission for the model, but for this specific object."
msgstr ""

#: ../../topics/auth/customizing.txt:806
# 1b168279cda24cb0bf52e61ffcb030cf
msgid "Returns ``True`` if the user has each of the specified permissions, where each perm is in the format ``\"<app label>.<permission codename>\"``. If the user is inactive, this method will always return ``False``."
msgstr ""

#: ../../topics/auth/customizing.txt:811
# 9414fd19a403407fa4f34dad06be629c
msgid "If ``obj`` is passed in, this method won't check for permissions for the model, but for the specific object."
msgstr ""

#: ../../topics/auth/customizing.txt:816
# 4ba12075256841bbbdbca91a034a2e90
msgid "Returns ``True`` if the user has any permissions in the given package (the Django app label). If the user is inactive, this method will always return ``False``."
msgstr ""

#: ../../topics/auth/customizing.txt:822
# e301f787aa0641859436db70ffedd956
msgid "If you don't include the :class:`~django.contrib.auth.models.PermissionsMixin`, you must ensure you don't invoke the permissions methods on ``ModelBackend``. ``ModelBackend`` assumes that certain fields are available on your user model. If your User model doesn't provide  those fields, you will receive database errors when you check permissions."
msgstr ""

#: ../../topics/auth/customizing.txt:830
# 1ac2b498af4a4d31a10e5fe61d846035
msgid "Custom users and Proxy models"
msgstr ""

#: ../../topics/auth/customizing.txt:832
# 8cf0a54ab9154ac5b635b9fadc3fa28a
msgid "One limitation of custom User models is that installing a custom User model will break any proxy model extending :class:`~django.contrib.auth.models.User`. Proxy models must be based on a concrete base class; by defining a custom User model, you remove the ability of Django to reliably identify the base class."
msgstr ""

#: ../../topics/auth/customizing.txt:837
# a5cad80b7c24498e95467261621bbc6c
msgid "If your project uses proxy models, you must either modify the proxy to extend the User model that is currently in use in your project, or merge your proxy's behavior into your User subclass."
msgstr ""

#: ../../topics/auth/customizing.txt:842
# bd7d2fa1b76849309bdfa833ca43b265
msgid "Custom users and signals"
msgstr ""

#: ../../topics/auth/customizing.txt:844
# 11aa8bde425a4239a224b7ece5f7968e
msgid "Another limitation of custom User models is that you can't use :func:`django.contrib.auth.get_user_model()` as the sender or target of a signal handler. Instead, you must register the handler with the resulting User model. See :doc:`/topics/signals` for more information on registering an sending signals."
msgstr ""

#: ../../topics/auth/customizing.txt:851
# 6582ea2e4f7e44c2b248365360d5aaa5
msgid "Custom users and testing/fixtures"
msgstr ""

#: ../../topics/auth/customizing.txt:853
# 81d32596888f4f8eaf215cd749d9a693
msgid "If you are writing an application that interacts with the User model, you must take some precautions to ensure that your test suite will run regardless of the User model that is being used by a project. Any test that instantiates an instance of User will fail if the User model has been swapped out. This includes any attempt to create an instance of User with a fixture."
msgstr ""

#: ../../topics/auth/customizing.txt:859
# 90a03b0e871e4352bfcd8edd56d6fb88
msgid "To ensure that your test suite will pass in any project configuration, ``django.contrib.auth.tests.utils`` defines a ``@skipIfCustomUser`` decorator. This decorator will cause a test case to be skipped if any User model other than the default Django user is in use. This decorator can be applied to a single test, or to an entire test class."
msgstr ""

#: ../../topics/auth/customizing.txt:865
# bcd5d03705f24b38a3d97be74ca80576
msgid "Depending on your application, tests may also be needed to be added to ensure that the application works with *any* user model, not just the default User model. To assist with this, Django provides two substitute user models that can be used in test suites:"
msgstr ""

#: ../../topics/auth/customizing.txt:870
# 7484b9d891ea4e2ebd05d380a1d15238
msgid "``django.contrib.auth.tests.custom_user.CustomUser``, a custom user model that uses an ``email`` field as the username, and has a basic admin-compliant permissions setup"
msgstr ""

#: ../../topics/auth/customizing.txt:874
# 1625c1d4a8664cc186b4c31d0ae1f4be
msgid "``django.contrib.auth.tests.custom_user.ExtensionUser``, a custom user model that extends ``django.contrib.auth.models.AbstractUser``, adding a ``date_of_birth`` field."
msgstr ""

#: ../../topics/auth/customizing.txt:878
# e4ff6840a7d84aec94745c03230664d0
msgid "You can then use the ``@override_settings`` decorator to make that test run with the custom User model. For example, here is a skeleton for a test that would test three possible User models -- the default, plus the two User models provided by ``auth`` app::"
msgstr ""

#: ../../topics/auth/customizing.txt:906
#: ../../topics/forms/modelforms.txt:143
# 7d6f293b13c84f8ab5978a951d943058
# bc838a7a048a49b597f9004e42cbe55f
msgid "A full example"
msgstr ""

#: ../../topics/auth/customizing.txt:908
# a383fae41713434699bd1d89f4c8d962
msgid "Here is an example of an admin-compliant custom user app. This user model uses an email address as the username, and has a required date of birth; it provides no permission checking, beyond a simple ``admin`` flag on the user account. This model would be compatible with all the built-in auth forms and views, except for the User creation forms. This example illustrates how most of the components work together, but is not intended to be copied directly into projects for production use."
msgstr ""

#: ../../topics/auth/customizing.txt:916
# 17e201eadf9a402e91490f0449ced776
msgid "This code would all live in a ``models.py`` file for a custom authentication app::"
msgstr ""

#: ../../topics/auth/customizing.txt:1000
# 5b5f1771dcd345d298cb0c0bd382052b
msgid "Then, to register this custom User model with Django's admin, the following code would be required in the app's ``admin.py`` file::"
msgstr ""

#: ../../topics/auth/default.txt:3
# 7055aebafc794d9ea08a8ced55f015e0
msgid "Using the Django authentication system"
msgstr ""

#: ../../topics/auth/default.txt:7
# 83049c66f3274ae0a2b03b14091c3c11
msgid "This document explains the usage of Django's authentication system in its default configuration. This configuration has evolved to serve the most common project needs, handling a reasonably wide range of tasks, and has a careful implementation of passwords and permissions, and can handle many projects as is.  For projects where authentication needs differ from the default, Django supports extensive :doc:`extension and customization </topics/auth/customizing>` of authentication."
msgstr ""

#: ../../topics/auth/default.txt:15
# 61f611c11daf4b59868e626520966f55
msgid "Django authentication provides both authentication and authorization, together and is generally referred to as the authentication system, as these features somewhat coupled."
msgstr ""

#: ../../topics/auth/default.txt:22
# 9660608c47cd4cc69febd585a66d1d57
msgid "User objects"
msgstr ""

#: ../../topics/auth/default.txt:24
# 6b261320fa604482a4f9c422a4a7ed21
msgid ":class:`~django.contrib.auth.models.User` objects are the core of the authentication system. They typically represent the people interacting with your site and are used to enable things like restricting access, registering user profiles, associating content with creators etc. Only one class of user exists in Django's authentication framework, i.e., 'superusers' or admin 'staff' users are just user objects with special attributes set, not different classes of user objects."
msgstr ""

#: ../../topics/auth/default.txt:32
# 4d86d30b62894766a189fd383f58034a
msgid "The primary attributes of the default user are:"
msgstr ""

#: ../../topics/auth/default.txt:34
# e6b5bd70ea5d4fff8eed581420e05734
msgid "username"
msgstr ""

#: ../../topics/auth/default.txt:35
# 7d1748f98e2c40c99db859d679d72ef6
msgid "password"
msgstr ""

#: ../../topics/auth/default.txt:36
# 961327dd0c9d4633b8bd896e21f0ea1a
msgid "email"
msgstr ""

#: ../../topics/auth/default.txt:37
# ac2dbcc4a4a949afbd0e229e3530220a
msgid "first name"
msgstr ""

#: ../../topics/auth/default.txt:38
# a39ea392f5cb4abf8b71186eb39aab13
msgid "last name"
msgstr ""

#: ../../topics/auth/default.txt:40
# 37828c0b3ae0473ba9d17e751e45ac3e
msgid "See the :class:`full API documentation <django.contrib.auth.models.User>` for full reference, the documentation that follows is more task oriented."
msgstr ""

#: ../../topics/auth/default.txt:46
# 3663a415276547ae9ed87f2de51af4ab
msgid "Creating users"
msgstr ""

#: ../../topics/auth/default.txt:48
# 3642e55550554fbd936ff62f1843f41f
msgid "The most direct way to create users is to use the included :meth:`~django.contrib.auth.models.UserManager.create_user` helper function::"
msgstr ""

#: ../../topics/auth/default.txt:60
# 2c1df69a261f4c6c9a38d6e0ab3dd39e
msgid "If you have the Django admin installed, you can also :ref:`create users interactively <auth-admin>`."
msgstr ""

#: ../../topics/auth/default.txt:66
# c8606d8020a34aeb809c132938c9a80e
msgid "Creating superusers"
msgstr ""

#: ../../topics/auth/default.txt:68
# e71c96f2d21d4fa69e236efe7ea42dcb
msgid ":djadmin:`manage.py syncdb <syncdb>` prompts you to create a superuser the first time you run it with ``'django.contrib.auth'`` in your :setting:`INSTALLED_APPS`. If you need to create a superuser at a later date, you can use a command line utility::"
msgstr ""

#: ../../topics/auth/default.txt:75
# a791d933009b466a8f82be2041b9f8ab
msgid "You will be prompted for a password. After you enter one, the user will be created immediately. If you leave off the :djadminopt:`--username` or the :djadminopt:`--email` options, it will prompt you for those values."
msgstr ""

#: ../../topics/auth/default.txt:80
# b327521ac7434905bba95ab00be403d7
msgid "Changing passwords"
msgstr ""

#: ../../topics/auth/default.txt:82
# 13bf09a3fcf446fd83cfcc151f91945e
msgid "Django does not store raw (clear text) passwords on the user model, but only a hash (see :doc:`documentation of how passwords are managed </topics/auth/passwords>` for full details). Because of this, do not attempt to manipulate the password attribute of the user directly. This is why a helper function is used when creating a user."
msgstr ""

#: ../../topics/auth/default.txt:88
# 92854085be37432aa7f3d289fb67f521
msgid "To change a user's password, you have several options:"
msgstr ""

#: ../../topics/auth/default.txt:90
# 60a7ca94c77f41f19fd7a60a3f6a0440
msgid ":djadmin:`manage.py changepassword *username* <changepassword>` offers a method of changing a User's password from the command line. It prompts you to change the password of a given user which you must enter twice. If they both match, the new password will be changed immediately. If you do not supply a user, the command will attempt to change the password whose username matches the current system user."
msgstr ""

#: ../../topics/auth/default.txt:97
# 46e5d87631024011b0ceed09a62cc4f0
msgid "You can also change a password programmatically, using :meth:`~django.contrib.auth.models.User.set_password()`:"
msgstr ""

#: ../../topics/auth/default.txt:107
# 08d2a71f6f154e07a1d99699e784b7fe
msgid "If you have the Django admin installed, you can also change user's passwords on the :ref:`authentication system's admin pages <auth-admin>`."
msgstr ""

#: ../../topics/auth/default.txt:110
# a0e6fdaa99954f0aa54b819a1ebd0576
msgid "Django also provides :ref:`views <built-in-auth-views>` and :ref:`forms <built-in-auth-forms>` that may be used to allow users to change their own passwords."
msgstr ""

#: ../../topics/auth/default.txt:115
# e6aafd7b3d394f348230772f47f6971f
msgid "Authenticating Users"
msgstr ""

#: ../../topics/auth/default.txt:119
# c7bbef6b432f422ea07a9e87be5d4e57
msgid "To authenticate a given username and password, use :func:`~django.contrib.auth.authenticate()`. It takes credentials in the form of keyword arguments, for the default configuration this is ``username`` and ``password``, and it returns a :class:`~django.contrib.auth.models.User` object if the password is valid for the given username. If the password is invalid, :func:`~django.contrib.auth.authenticate()` returns ``None``. Example::"
msgstr ""

#: ../../topics/auth/default.txt:142
# 5d9eb22815ee4e4aa780c25cd5b3026e
msgid "Permissions and Authorization"
msgstr ""

#: ../../topics/auth/default.txt:144
# 9f4c15d5ad0e415097fa396060245d0f
msgid "Django comes with a simple permissions system. It provides a way to assign permissions to specific users and groups of users."
msgstr ""

#: ../../topics/auth/default.txt:147
# 393e06f50561485cbc200f6e07d67e52
msgid "It's used by the Django admin site, but you're welcome to use it in your own code."
msgstr ""

#: ../../topics/auth/default.txt:150
# 7ec7fbf9365d4897b3f5ceca39267142
msgid "The Django admin site uses permissions as follows:"
msgstr ""

#: ../../topics/auth/default.txt:152
# d93aa4b3b0294c219b6409a0b840a728
msgid "Access to view the \"add\" form and add an object is limited to users with the \"add\" permission for that type of object."
msgstr ""

#: ../../topics/auth/default.txt:154
# 06c4407d5a134e7b986a5e49aa95d909
msgid "Access to view the change list, view the \"change\" form and change an object is limited to users with the \"change\" permission for that type of object."
msgstr ""

#: ../../topics/auth/default.txt:157
# 297d81ec4f0b49febb0bdc538677518c
msgid "Access to delete an object is limited to users with the \"delete\" permission for that type of object."
msgstr ""

#: ../../topics/auth/default.txt:160
# c539b85766c8494db8cc6f86144ebb4a
msgid "Permissions can be set not only per type of object, but also per specific object instance. By using the :meth:`~django.contrib.admin.ModelAdmin.has_add_permission`, :meth:`~django.contrib.admin.ModelAdmin.has_change_permission` and :meth:`~django.contrib.admin.ModelAdmin.has_delete_permission` methods provided by the :class:`~django.contrib.admin.ModelAdmin` class, it is possible to customize permissions for different object instances of the same type."
msgstr ""

#: ../../topics/auth/default.txt:168
# bc54c82ad2a54df3ac11c018e1cb6ba0
msgid ":class:`~django.contrib.auth.models.User` objects have two many-to-many fields: ``groups`` and ``user_permissions``. :class:`~django.contrib.auth.models.User` objects can access their related objects in the same way as any other :doc:`Django model </topics/db/models>`:"
msgstr ""

#: ../../topics/auth/default.txt:186
# fc3f89b6947e4a01b82ce9dddcc3a8d5
msgid "Default permissions"
msgstr ""

#: ../../topics/auth/default.txt:188
# 5ab8e6cac47a48f09d091e0165a3ad94
msgid "When ``django.contrib.auth`` is listed in your :setting:`INSTALLED_APPS` setting, it will ensure that three default permissions -- add, change and delete -- are created for each Django model defined in one of your installed applications."
msgstr ""

#: ../../topics/auth/default.txt:193
# 7796747c48fc46a79f0f7ae72bc34954
msgid "These permissions will be created when you run :djadmin:`manage.py syncdb <syncdb>`; the first time you run ``syncdb`` after adding ``django.contrib.auth`` to :setting:`INSTALLED_APPS`, the default permissions will be created for all previously-installed models, as well as for any new models being installed at that time. Afterward, it will create default permissions for new models each time you run :djadmin:`manage.py syncdb <syncdb>`."
msgstr ""

#: ../../topics/auth/default.txt:201
# 64e136da037b429e9cfab809a7d0db0e
msgid "Assuming you have an application with an :attr:`~django.db.models.Options.app_label` ``foo`` and a model named ``Bar``, to test for basic permissions you should use:"
msgstr ""

#: ../../topics/auth/default.txt:205
# f8993595be4b4904b43c4f54ef99f46d
msgid "add: ``user.has_perm('foo.add_bar')``"
msgstr ""

#: ../../topics/auth/default.txt:206
# 570d7f630e754f09aafef3645abd83a9
msgid "change: ``user.has_perm('foo.change_bar')``"
msgstr ""

#: ../../topics/auth/default.txt:207
# 3d469e1a55324cfeacbf0c258fe4ef54
msgid "delete: ``user.has_perm('foo.delete_bar')``"
msgstr ""

#: ../../topics/auth/default.txt:209
# 673eb78d686546a494cd48af1e8a78a4
msgid "The :class:`~django.contrib.auth.models.Permission` model is rarely accessed directly."
msgstr ""

#: ../../topics/auth/default.txt:213
# a8d104b11d2a4d8ebda0c93bfd00b0b3
msgid "Groups"
msgstr ""

#: ../../topics/auth/default.txt:215
# 13475f76405d42d7a0b47e2140b0ba98
msgid ":class:`django.contrib.auth.models.Group` models are a generic way of categorizing users so you can apply permissions, or some other label, to those users. A user can belong to any number of groups."
msgstr ""

#: ../../topics/auth/default.txt:219
# 319c0fa222ca4cfbbee5a382830782e9
msgid "A user in a group automatically has the permissions granted to that group. For example, if the group ``Site editors`` has the permission ``can_edit_home_page``, any user in that group will have that permission."
msgstr ""

#: ../../topics/auth/default.txt:223
# cdd52442d9854361b7ac0646882d8a75
msgid "Beyond permissions, groups are a convenient way to categorize users to give them some label, or extended functionality. For example, you could create a group ``'Special users'``, and you could write code that could, say, give them access to a members-only portion of your site, or send them members-only email messages."
msgstr ""

#: ../../topics/auth/default.txt:230
# 64756f031c1543dfb203066532e4db0c
msgid "Programmatically creating permissions"
msgstr ""

#: ../../topics/auth/default.txt:232
# d05a79e477134683b86464a625dee5ce
msgid "While :ref:`custom permissions <custom-permissions>` can be defined within a model's ``Meta`` class, you can also create permissions directly. For example, you can create the ``can_publish`` permission for a ``BlogPost`` model in ``myapp``::"
msgstr ""

#: ../../topics/auth/default.txt:245
# b219a5fb67b14f1290cedb275412952f
msgid "The permission can then be assigned to a :class:`~django.contrib.auth.models.User` via its ``user_permissions`` attribute or to a :class:`~django.contrib.auth.models.Group` via its ``permissions`` attribute."
msgstr ""

#: ../../topics/auth/default.txt:253
# 343c2ca981a04a09b67534e66f18991d
msgid "Authentication in Web requests"
msgstr ""

#: ../../topics/auth/default.txt:255
# 8227dbf3c2a34a26bc4805ac7638779e
msgid "Django uses :doc:`sessions </topics/http/sessions>` and middleware to hook the authentication system into :class:`request objects <django.http.HttpRequest>`."
msgstr ""

#: ../../topics/auth/default.txt:258
# 02501fbf6fa542a2ab5a8f31de789079
msgid "These provide a :attr:`request.user <django.http.HttpRequest.user>`  attribute on every request which represents the current user. If the current user has not logged in, this attribute will be set to an instance of :class:`~django.contrib.auth.models.AnonymousUser`, otherwise it will be an instance of :class:`~django.contrib.auth.models.User`."
msgstr ""

#: ../../topics/auth/default.txt:264
# 9f8e8f66b4c741c5bf54a24e8e19e1d8
msgid "You can tell them apart with :meth:`~django.contrib.auth.models.User.is_authenticated()`, like so::"
msgstr ""

#: ../../topics/auth/default.txt:275
# 399c0bc6f81f490a8da4ae594ed5887a
msgid "How to log a user in"
msgstr ""

#: ../../topics/auth/default.txt:277
# 5a3981e6c8e5440786a74d307e5fcf94
msgid "If you have an authenticated user you want to attach to the current session - this is done with a :func:`~django.contrib.auth.login` function."
msgstr ""

#: ../../topics/auth/default.txt:282
# 80479c6ba4f54d229dfdeb81142f03fe
msgid "To log a user in, from a view, use :func:`~django.contrib.auth.login()`. It takes an :class:`~django.http.HttpRequest` object and a :class:`~django.contrib.auth.models.User` object. :func:`~django.contrib.auth.login()` saves the user's ID in the session, using Django's session framework."
msgstr ""

#: ../../topics/auth/default.txt:288
# b75154ff758340ba8a3bddd93a1e8b75
msgid "Note that any data set during the anonymous session is retained in the session after a user logs in."
msgstr ""

#: ../../topics/auth/default.txt:291
# 1fa1e306c81147aca453db00e990f67b
msgid "This example shows how you might use both :func:`~django.contrib.auth.authenticate()` and :func:`~django.contrib.auth.login()`::"
msgstr ""

#: ../../topics/auth/default.txt:312
# ef85f0c8c8f84ec292241dcf1e25b792
msgid "When you're manually logging a user in, you *must* call :func:`~django.contrib.auth.authenticate()` before you call :func:`~django.contrib.auth.login()`. :func:`~django.contrib.auth.authenticate()` sets an attribute on the :class:`~django.contrib.auth.models.User` noting which authentication backend successfully authenticated that user (see the :ref:`backends documentation <authentication-backends>` for details), and this information is needed later during the login process. An error will be raise if you try to login a user object retrieved from the database directly."
msgstr ""

#: ../../topics/auth/default.txt:324
# d034e61c21ec4a76aa70406440d7c3ed
msgid "How to log a user out"
msgstr ""

#: ../../topics/auth/default.txt:328
# 60a45a014c1a4214bf7f24365f8e69db
msgid "To log out a user who has been logged in via :func:`django.contrib.auth.login()`, use :func:`django.contrib.auth.logout()` within your view. It takes an :class:`~django.http.HttpRequest` object and has no return value. Example::"
msgstr ""

#: ../../topics/auth/default.txt:340
# 7518a3d7e01b4036b843f53709f16b89
msgid "Note that :func:`~django.contrib.auth.logout()` doesn't throw any errors if the user wasn't logged in."
msgstr ""

#: ../../topics/auth/default.txt:343
# 27c0463b3c254321baa0239ef870d37e
msgid "When you call :func:`~django.contrib.auth.logout()`, the session data for the current request is completely cleaned out. All existing data is removed. This is to prevent another person from using the same Web browser to log in and have access to the previous user's session data. If you want to put anything into the session that will be available to the user immediately after logging out, do that *after* calling :func:`django.contrib.auth.logout()`."
msgstr ""

#: ../../topics/auth/default.txt:352
# c6371a66bd5440e5b07f6735bcb6ed04
msgid "Limiting access to logged-in users"
msgstr ""

#: ../../topics/auth/default.txt:355
# 023d45dc544a4ec9b56114677205bcb6
msgid "The raw way"
msgstr ""

#: ../../topics/auth/default.txt:357
# 3ccb07b2706242c4951e012952a74b91
msgid "The simple, raw way to limit access to pages is to check :meth:`request.user.is_authenticated() <django.contrib.auth.models.User.is_authenticated()>` and either redirect to a login page::"
msgstr ""

#: ../../topics/auth/default.txt:369
# 9c10038b0ad74a839746540edb8e85ea
msgid "...or display an error message::"
msgstr ""

#: ../../topics/auth/default.txt:381
# 9fc19b91c4e14c23ae1abbe6c8e65ca2
msgid "The login_required decorator"
msgstr ""

#: ../../topics/auth/default.txt:385
# 6422be48dffd4514bcb14848e25b6d78
msgid "As a shortcut, you can use the convenient :func:`~django.contrib.auth.decorators.login_required` decorator::"
msgstr ""

#: ../../topics/auth/default.txt:394
# 869fb56caacd48b2964f64e7d9d097e3
msgid ":func:`~django.contrib.auth.decorators.login_required` does the following:"
msgstr ""

#: ../../topics/auth/default.txt:396
# 8a433577baca4c488022ede485ad9c33
msgid "If the user isn't logged in, redirect to :setting:`settings.LOGIN_URL <LOGIN_URL>`, passing the current absolute path in the query string. Example: ``/accounts/login/?next=/polls/3/``."
msgstr ""

#: ../../topics/auth/default.txt:400
# 6cff4f82e30a474db4b644278c4e3fe1
msgid "If the user is logged in, execute the view normally. The view code is free to assume the user is logged in."
msgstr ""

#: ../../topics/auth/default.txt:403
# 996cc2f6cae24a538e878294af8a7885
msgid "By default, the path that the user should be redirected to upon successful authentication is stored in a query string parameter called ``\"next\"``. If you would prefer to use a different name for this parameter, :func:`~django.contrib.auth.decorators.login_required` takes an optional ``redirect_field_name`` parameter::"
msgstr ""

#: ../../topics/auth/default.txt:415
# daabd77d213f4b39bf7ae33a0fda0dbc
msgid "Note that if you provide a value to ``redirect_field_name``, you will most likely need to customize your login template as well, since the template context variable which stores the redirect path will use the value of ``redirect_field_name`` as its key rather than ``\"next\"`` (the default)."
msgstr ""

#: ../../topics/auth/default.txt:420
# 82dc0485d1df4ab0a045858fcab78f03
msgid ":func:`~django.contrib.auth.decorators.login_required` also takes an optional ``login_url`` parameter. Example::"
msgstr ""

#: ../../topics/auth/default.txt:429
# 77185a5adb6f42269aa2cbf54155a999
msgid "Note that if you don't specify the ``login_url`` parameter, you'll need to ensure that the :setting:`settings.LOGIN_URL <LOGIN_URL>` and your login view are properly associated. For example, using the defaults, add the following line to your URLconf::"
msgstr ""

#: ../../topics/auth/default.txt:438
# 8216aa376db9473eb8a60e362e3fd2ba
msgid "The :setting:`settings.LOGIN_URL <LOGIN_URL>` also accepts view function names and :ref:`named URL patterns <naming-url-patterns>`. This allows you to freely remap your login view within your URLconf without having to update the setting."
msgstr ""

#: ../../topics/auth/default.txt:445
# 388848a6386a4cc99fbb6e5c1868c59f
msgid "The login_required decorator does NOT check the is_active flag on a user."
msgstr ""

#: ../../topics/auth/default.txt:448
# a01441b0e0714bc8a59e9f3493088eab
msgid "Limiting access to logged-in users that pass a test"
msgstr ""

#: ../../topics/auth/default.txt:450
# 72963a2ba94348d186e888697cb216d2
msgid "To limit access based on certain permissions or some other test, you'd do essentially the same thing as described in the previous section."
msgstr ""

#: ../../topics/auth/default.txt:453
# 20350db4089d4646b8f6c731e1cd7a41
msgid "The simple way is to run your test on :attr:`request.user <django.http.HttpRequest.user>` in the view directly. For example, this view checks to make sure the user has an email in the desired domain::"
msgstr ""

#: ../../topics/auth/default.txt:464
# 8b98776c5132471c8d9f5d7eaee572d0
msgid "As a shortcut, you can use the convenient ``user_passes_test`` decorator::"
msgstr ""

#: ../../topics/auth/default.txt:475
# a772c6c848ce4530923c60f135e997f7
msgid ":func:`~django.contrib.auth.decorators.user_passes_test` takes a required argument: a callable that takes a :class:`~django.contrib.auth.models.User` object and returns ``True`` if the user is allowed to view the page. Note that :func:`~django.contrib.auth.decorators.user_passes_test` does not automatically check that the :class:`~django.contrib.auth.models.User` is not anonymous."
msgstr ""

#: ../../topics/auth/default.txt:483
# 8ef23afefb674ad7a91c77ea65a0ec0d
msgid ":func:`~django.contrib.auth.decorators.user_passes_test()` takes an optional ``login_url`` argument, which lets you specify the URL for your login page (:setting:`settings.LOGIN_URL <LOGIN_URL>` by default)."
msgstr ""

#: ../../topics/auth/default.txt:487
#: ../../topics/db/managers.txt:147
#: ../../topics/db/queries.txt:1199
#: ../../topics/email.txt:266
#: ../../topics/email.txt:309
#: ../../topics/forms/modelforms.txt:23
#: ../../topics/http/urls.txt:401
#: ../../topics/http/urls.txt:806
#: ../../topics/i18n/formatting.txt:119
#: ../../topics/i18n/formatting.txt:137
#: ../../topics/i18n/timezones.txt:339
#: ../../topics/i18n/timezones.txt:352
#: ../../topics/i18n/timezones.txt:368
#: ../../topics/i18n/translation.txt:190
#: ../../topics/i18n/translation.txt:276
#: ../../topics/i18n/translation.txt:1433
#: ../../topics/settings.txt:252
#: ../../topics/templates.txt:152
#: ../../topics/testing/overview.txt:1293
#: ../../topics/testing/overview.txt:1329
# 76dc154a7406490b97d95fd037ff8cea
# b692b48cb5ba4231b5abf9b7c9b58ac6
# cb4c0dc3fd5d4583820b703aee3a4284
# 3a70b507bd344f7b8002fa1cff4a1149
# 17ebe7a1fa02464aa901b01a3cf11a46
# 615c62fcdbc7431c9bebd70045bc20e8
# 4e47143f75c1439c87e788c5921a3b20
# 14c51dfb970b4ddc95dd4837e3f0b7e9
# 165199da7b4f4952aba33d24f7efdf68
# 49c12d64eb9143448466ea698c5d2ff9
# e8373c79a19d4c5f80d33ac733a3b9e3
# 9849cceb72d846db9913170f3ff4b171
# 95b4cadb305b47f791eef264289118e2
# f895f723f38b4523a9524b1587c57668
# 93119e88bdda4f26bb1c21190b4b5529
# 0e79cb0fb3264eedaf8dd6a6eae09ef7
# f79c2529b17044ed815d03d46b9995bf
# 7e7eaebcd14644f89fef461e262ac4dd
# bd50089175534a679ebd2586955c2ec7
# cdc9107950d045648ef1f54caceb1783
msgid "For example::"
msgstr ""

#: ../../topics/auth/default.txt:494
# f708c6e97b014cc5bc64d53599c18278
msgid "The permission_required decorator"
msgstr ""

#: ../../topics/auth/default.txt:498
# c0b5ae9a825546fda7680f7353297d6f
msgid "It's a relatively common task to check whether a user has a particular permission. For that reason, Django provides a shortcut for that case: the :func:`~django.contrib.auth.decorators.permission_required()` decorator.::"
msgstr ""

#: ../../topics/auth/default.txt:508
# 1b7e552999bf481a8de4261e76dfe18e
msgid "As for the :meth:`~django.contrib.auth.models.User.has_perm` method, permission names take the form ``\"<app label>.<permission codename>\"`` (i.e. ``polls.can_vote`` for a permission on a model in the ``polls`` application)."
msgstr ""

#: ../../topics/auth/default.txt:513
# 1a35d60ba86e414099db9b15797d80ed
msgid "Note that :func:`~django.contrib.auth.decorators.permission_required()` also takes an optional ``login_url`` parameter. Example::"
msgstr ""

#: ../../topics/auth/default.txt:522
# 5f14eeeb75f8449cb907f627c22416b9
msgid "As in the :func:`~django.contrib.auth.decorators.login_required` decorator, ``login_url`` defaults to :setting:`settings.LOGIN_URL <LOGIN_URL>`."
msgstr ""

#: ../../topics/auth/default.txt:527
# d634ed6061df42a48d97f9f50a547b47
msgid "Added ``raise_exception`` parameter. If given, the decorator will raise :exc:`~django.core.exceptions.PermissionDenied`, prompting :ref:`the 403 (HTTP Forbidden) view<http_forbidden_view>` instead of redirecting to the login page."
msgstr ""

#: ../../topics/auth/default.txt:533
# 940a6402cb7b44edb6bd075541d2456b
msgid "Applying permissions to generic views"
msgstr ""

#: ../../topics/auth/default.txt:535
# a699d3f9908040c7afc9eecd9b424af2
msgid "To apply a permission to a :doc:`class-based generic view </ref/class-based-views/index>`, decorate the :meth:`View.dispatch <django.views.generic.base.View.dispatch>` method on the class. See :ref:`decorating-class-based-views` for details."
msgstr ""

#: ../../topics/auth/default.txt:544
# 2498cf5fcbf44473806515d58db8db59
msgid "Authentication Views"
msgstr ""

#: ../../topics/auth/default.txt:548
# b794d8cc6f554266b91ee44e2401bd15
msgid "Django provides several views that you can use for handling login, logout, and password management. These make use of the :ref:`stock auth forms <built-in-auth-forms>` but you can pass in your own forms as well."
msgstr ""

#: ../../topics/auth/default.txt:552
# 09a9367ef20840eeb81d821f8b3853ac
msgid "Django provides no default template for the authentication views - however the template context is documented for each view below."
msgstr ""

#: ../../topics/auth/default.txt:557
# f9601f9509e24c8b8171942d9c94e6f0
msgid "The built-in views all return a :class:`~django.template.response.TemplateResponse` instance, which allows you to easily customize the response data before rendering.  For more details, see the :doc:`TemplateResponse documentation </ref/template-response>`."
msgstr ""

#: ../../topics/auth/default.txt:562
# b7bbed27e7f14c3bbc768700d9ed7ca5
msgid "Most built-in authentication views provide a URL name for easier reference. See :doc:`the URL documentation </topics/http/urls>` for details on using named URL patterns."
msgstr ""

#: ../../topics/auth/default.txt:569
# e818bd13a70042dc8030ce7693bd251b
msgid "**URL name:** ``login``"
msgstr ""

#: ../../topics/auth/default.txt:571
# d2de6a72b9f44f3dadb2a0dc21d110c4
msgid "See :doc:`the URL documentation </topics/http/urls>` for details on using named URL patterns."
msgstr ""

#: ../../topics/auth/default.txt:574
# ce5fd2afd90541d3bbf39e5e3031d40e
msgid "Here's what ``django.contrib.auth.views.login`` does:"
msgstr ""

#: ../../topics/auth/default.txt:576
# 43e296e74b194eeeaadbd2771d7d19d1
msgid "If called via ``GET``, it displays a login form that POSTs to the same URL. More on this in a bit."
msgstr ""

#: ../../topics/auth/default.txt:579
# befbb380cc47495aa1b31ce27aa292a8
msgid "If called via ``POST`` with user submitted credentials, it tries to log the user in. If login is successful, the view redirects to the URL specified in ``next``. If ``next`` isn't provided, it redirects to :setting:`settings.LOGIN_REDIRECT_URL <LOGIN_REDIRECT_URL>` (which defaults to ``/accounts/profile/``). If login isn't successful, it redisplays the login form."
msgstr ""

#: ../../topics/auth/default.txt:586
# 1f0318283f874004b088c3ac0411a601
msgid "It's your responsibility to provide the html for the login template , called ``registration/login.html`` by default. This template gets passed four template context variables:"
msgstr ""

#: ../../topics/auth/default.txt:590
# e071dd8b59934c138daaba4f240b92fb
msgid "``form``: A :class:`~django.forms.Form` object representing the :class:`~django.contrib.auth.forms.AuthenticationForm`."
msgstr ""

#: ../../topics/auth/default.txt:593
# 59a920aa1d3749e2820f3f2c3bfe3e9b
msgid "``next``: The URL to redirect to after successful login. This may contain a query string, too."
msgstr ""

#: ../../topics/auth/default.txt:596
#: ../../topics/auth/default.txt:685
# 5e0a29d4e86948e1937dfa53dfb91823
# 05757c37f4c44d6f9ea4f394682794a5
msgid "``site``: The current :class:`~django.contrib.sites.models.Site`, according to the :setting:`SITE_ID` setting. If you don't have the site framework installed, this will be set to an instance of :class:`~django.contrib.sites.models.RequestSite`, which derives the site name and domain from the current :class:`~django.http.HttpRequest`."
msgstr ""

#: ../../topics/auth/default.txt:603
#: ../../topics/auth/default.txt:692
#: ../../topics/auth/default.txt:801
# 55d9708f3f75429bb10bd488574fffc5
# 692a6a4dd3cb479c8a01c22d70e1a08f
# 83c358e43ffa4d08bb44fbbb2c258af5
msgid "``site_name``: An alias for ``site.name``. If you don't have the site framework installed, this will be set to the value of :attr:`request.META['SERVER_NAME'] <django.http.HttpRequest.META>`. For more on sites, see :doc:`/ref/contrib/sites`."
msgstr ""

#: ../../topics/auth/default.txt:608
# 003ce5b392ff4d2b96ddc0ec4c60fe22
msgid "If you'd prefer not to call the template :file:`registration/login.html`, you can pass the ``template_name`` parameter via the extra arguments to the view in your URLconf. For example, this URLconf line would use :file:`myapp/login.html` instead::"
msgstr ""

#: ../../topics/auth/default.txt:615
# ff5ac9a391bd4470b91a824d00077cb7
msgid "You can also specify the name of the ``GET`` field which contains the URL to redirect to after login by passing ``redirect_field_name`` to the view. By default, the field is called ``next``."
msgstr ""

#: ../../topics/auth/default.txt:619
# 6879ff36f9ee4bbdbc3b10d46d22e2df
msgid "Here's a sample :file:`registration/login.html` template you can use as a starting point. It assumes you have a :file:`base.html` template that defines a ``content`` block:"
msgstr ""

#: ../../topics/auth/default.txt:652
# c05ac5bc0ca8405a8c8add4b2a7d8d57
msgid "If you have customized authentication (see :doc:`Customizing Authentication </topics/auth/customizing>`) you can pass a custom authentication form to the login view via the ``authentication_form`` parameter. This form must accept a ``request`` keyword argument in its ``__init__`` method, and provide a ``get_user`` method which returns the authenticated user object (this method is only ever called after successful form validation)."
msgstr ""

#: ../../topics/auth/default.txt:665
# dde2f945b17e495a980a5fc02e652da4
msgid "Logs a user out."
msgstr ""

#: ../../topics/auth/default.txt:667
# fcae0b64d00842a9b41848646994e0af
msgid "**URL name:** ``logout``"
msgstr ""

#: ../../topics/auth/default.txt:669
#: ../../topics/auth/default.txt:703
#: ../../topics/auth/default.txt:714
#: ../../topics/auth/default.txt:738
#: ../../topics/auth/default.txt:758
#: ../../topics/auth/default.txt:835
#: ../../topics/auth/default.txt:847
#: ../../topics/auth/default.txt:882
#: ../../topics/auth/default.txt:901
# 4dd4cc4f3ddb43889a81c8dd699ebbc1
# b3a05057e9324b658ee7a0825fc0aae8
# 55c8088ada5a4a4cb25aea820acd4c4a
# f516f1c3cac04141b2ee8351ea44bb34
# 9322b2f71c9f45049ff0554626c4b387
# 57873f6cf1564ff7b2753c4c3a87be72
# 9af6e004eae541199411ddeb6b01b959
# e832428be50d4e0386149034c158fbd3
# 2f78c93ec4e0431b935a260e292137c4
msgid "**Optional arguments:**"
msgstr ""

#: ../../topics/auth/default.txt:671
# 1688dff9e8474e0ab3657181ea55dbe0
msgid "``next_page``: The URL to redirect to after logout."
msgstr ""

#: ../../topics/auth/default.txt:673
# b547299b84e64886bddecd34db5a6b6e
msgid "``template_name``: The full name of a template to display after logging the user out. Defaults to :file:`registration/logged_out.html` if no argument is supplied."
msgstr ""

#: ../../topics/auth/default.txt:677
# ed6c290489874ca38a50bca5b2157dd1
msgid "``redirect_field_name``: The name of a ``GET`` field containing the URL to redirect to after log out. Overrides ``next_page`` if the given ``GET`` parameter is passed."
msgstr ""

#: ../../topics/auth/default.txt:681
#: ../../topics/auth/default.txt:728
#: ../../topics/auth/default.txt:788
#: ../../topics/auth/default.txt:867
# e556444d11324bb1b8082d1f2dc23d99
# 7948622da04440bba69d7788bb89c8ee
# 39e394c7905f43d6b9716b5d19cee938
# ca24dc20d8df4119b1c7c6d2d1be5215
msgid "**Template context:**"
msgstr ""

#: ../../topics/auth/default.txt:683
# 2d883727eff64fe58d85501d9c6b9423
msgid "``title``: The string \"Logged out\", localized."
msgstr ""

#: ../../topics/auth/default.txt:699
# ecab8bf149504673a3624d98dbb037c5
msgid "Logs a user out, then redirects to the login page."
msgstr ""

#: ../../topics/auth/default.txt:701
# ab2a19808c694cbba4cd66b1ddcfa4ca
msgid "**URL name:** No default URL provided"
msgstr ""

#: ../../topics/auth/default.txt:705
#: ../../topics/auth/default.txt:903
# c7e5353877214bbf8f2968cf5ae681d1
# d843033e45d84ba8892653add8228cfa
msgid "``login_url``: The URL of the login page to redirect to. Defaults to :setting:`settings.LOGIN_URL <LOGIN_URL>` if not supplied."
msgstr ""

#: ../../topics/auth/default.txt:710
# d4a3ded4d9ab4818b3e4cc1ffab8bb62
msgid "Allows a user to change their password."
msgstr ""

#: ../../topics/auth/default.txt:712
# f01dad1d49064c86ac0a0805cee90b88
msgid "**URL name:** ``password_change``"
msgstr ""

#: ../../topics/auth/default.txt:716
# 36a871cd9a0e4b37ac1836e9fbf40a98
msgid "``template_name``: The full name of a template to use for displaying the password change form. Defaults to :file:`registration/password_change_form.html` if not supplied."
msgstr ""

#: ../../topics/auth/default.txt:720
# 2b981b6be40843d181fd4d0f24a19def
msgid "``post_change_redirect``: The URL to redirect to after a successful password change."
msgstr ""

#: ../../topics/auth/default.txt:723
# 2bca587f05f94fe3a22c9e6ac3cb876f
msgid "``password_change_form``: A custom \"change password\" form which must accept a ``user`` keyword argument. The form is responsible for actually changing the user's password. Defaults to :class:`~django.contrib.auth.forms.PasswordChangeForm`."
msgstr ""

#: ../../topics/auth/default.txt:730
# b3e9570177a94b8ca09fef2740443c41
msgid "``form``: The password change form (see ``password_change_form`` above)."
msgstr ""

#: ../../topics/auth/default.txt:734
# a22dcf957f8646dc8da9005231f7cf84
msgid "The page shown after a user has changed their password."
msgstr ""

#: ../../topics/auth/default.txt:736
# fc4082ccba0e4698a0a51b53201169d9
msgid "**URL name:** ``password_change_done``"
msgstr ""

#: ../../topics/auth/default.txt:740
# 993c3d2897b74b7fabe2eaa5cdd39196
msgid "``template_name``: The full name of a template to use. Defaults to :file:`registration/password_change_done.html` if not supplied."
msgstr ""

#: ../../topics/auth/default.txt:746
# 4f3e773fbce940af8f7e0f57f364e198
msgid "Allows a user to reset their password by generating a one-time use link that can be used to reset the password, and sending that link to the user's registered email address."
msgstr ""

#: ../../topics/auth/default.txt:756
# 8993e92a1475482695d9e07c3b5d3239
msgid "**URL name:** ``password_reset``"
msgstr ""

#: ../../topics/auth/default.txt:760
# d8981433d15a4380b2f416d7979e3c85
msgid "``template_name``: The full name of a template to use for displaying the password reset form. Defaults to :file:`registration/password_reset_form.html` if not supplied."
msgstr ""

#: ../../topics/auth/default.txt:764
# 8601327a5072446299080afa69d39279
msgid "``email_template_name``: The full name of a template to use for generating the email with the reset password link. Defaults to :file:`registration/password_reset_email.html` if not supplied."
msgstr ""

#: ../../topics/auth/default.txt:768
# c4e8952523b44e518b37db3591d6ea92
msgid "``subject_template_name``: The full name of a template to use for the subject of the email with the reset password link. Defaults to :file:`registration/password_reset_subject.txt` if not supplied."
msgstr ""

#: ../../topics/auth/default.txt:774
# 96b1d1855742490193ba3c7beada6010
msgid "``password_reset_form``: Form that will be used to get the email of the user to reset the password for. Defaults to :class:`~django.contrib.auth.forms.PasswordResetForm`."
msgstr ""

#: ../../topics/auth/default.txt:778
# efab7596c5424b4681f6c076fd44c6e6
msgid "``token_generator``: Instance of the class to check the one time link. This will default to ``default_token_generator``, it's an instance of ``django.contrib.auth.tokens.PasswordResetTokenGenerator``."
msgstr ""

#: ../../topics/auth/default.txt:782
# b3511ea4b5294cd9b297ef623429a441
msgid "``post_reset_redirect``: The URL to redirect to after a successful password reset request."
msgstr ""

#: ../../topics/auth/default.txt:785
# 38c49b4c05294cceb215206c6a902be7
msgid "``from_email``: A valid email address. By default Django uses the :setting:`DEFAULT_FROM_EMAIL`."
msgstr ""

#: ../../topics/auth/default.txt:790
# 598fe07283ec4d2ab851375eb2746a65
msgid "``form``: The form (see ``password_reset_form`` above) for resetting the user's password."
msgstr ""

#: ../../topics/auth/default.txt:793
# 15e246d02f604b6b918c2fd4e2f36931
msgid "**Email template context:**"
msgstr ""

#: ../../topics/auth/default.txt:795
# 60eab535287b46e48f2b0bfe97763cf9
msgid "``email``: An alias for ``user.email``"
msgstr ""

#: ../../topics/auth/default.txt:797
# 59a4c694d5e7497b83bd7d50d36894d7
msgid "``user``: The current :class:`~django.contrib.auth.models.User`, according to the ``email`` form field. Only active users are able to reset their passwords (``User.is_active is True``)."
msgstr ""

#: ../../topics/auth/default.txt:806
# 6c949f1e7fda4964ba534a820b6c1062
msgid "``domain``: An alias for ``site.domain``. If you don't have the site framework installed, this will be set to the value of ``request.get_host()``."
msgstr ""

#: ../../topics/auth/default.txt:810
# 07f7f7084ead4d7b938e1028ae8b6013
msgid "``protocol``: http or https"
msgstr ""

#: ../../topics/auth/default.txt:812
# 5cd1f75f93d841498aa23a17f2c99505
msgid "``uid``: The user's id encoded in base 36."
msgstr ""

#: ../../topics/auth/default.txt:814
# c8fc91936b9947afbb521240dc6e06aa
msgid "``token``: Token to check that the reset link is valid."
msgstr ""

#: ../../topics/auth/default.txt:816
# d10e42eafef140d7bc9e0fe56ad8384f
msgid "Sample ``registration/password_reset_email.html`` (email body template):"
msgstr ""

#: ../../topics/auth/default.txt:823
# abc7abca258e4279976617c28052e52c
msgid "The same template context is used for subject template. Subject must be single line plain text string."
msgstr ""

#: ../../topics/auth/default.txt:829
# 058fc4ad1c83423ab8fd166ae6aa6d2a
msgid "The page shown after a user has been emailed a link to reset their password. This view is called by default if the :func:`password_reset` view doesn't have an explicit ``post_reset_redirect`` URL set."
msgstr ""

#: ../../topics/auth/default.txt:833
# dda56794d0bd48bfbafeda0be08ffd50
msgid "**URL name:** ``password_reset_done``"
msgstr ""

#: ../../topics/auth/default.txt:837
# eefa0ece23164455964b912bd5df240a
msgid "``template_name``: The full name of a template to use. Defaults to :file:`registration/password_reset_done.html` if not supplied."
msgstr ""

#: ../../topics/auth/default.txt:843
# 85167c50fe2040fb9f90caaa686f8211
msgid "Presents a form for entering a new password."
msgstr ""

#: ../../topics/auth/default.txt:845
# 5abfc129a26044bc84ed67b22a6d50b6
msgid "**URL name:** ``password_reset_confirm``"
msgstr ""

#: ../../topics/auth/default.txt:849
# cad2fac34c2747fa84a63824af633240
msgid "``uidb36``: The user's id encoded in base 36. Defaults to ``None``."
msgstr ""

#: ../../topics/auth/default.txt:851
# 7e848f475c874db4ac0a99375c2df6e2
msgid "``token``: Token to check that the password is valid. Defaults to ``None``."
msgstr ""

#: ../../topics/auth/default.txt:854
# b9eae2f14cb441a38192c288d36cc289
msgid "``template_name``: The full name of a template to display the confirm password view. Default value is :file:`registration/password_reset_confirm.html`."
msgstr ""

#: ../../topics/auth/default.txt:857
# 58a538abad1a44958e06a8a356fd6fe0
msgid "``token_generator``: Instance of the class to check the password. This will default to ``default_token_generator``, it's an instance of ``django.contrib.auth.tokens.PasswordResetTokenGenerator``."
msgstr ""

#: ../../topics/auth/default.txt:861
# 640052abae164f0d9cb1853e68aeec1a
msgid "``set_password_form``: Form that will be used to set the password. Defaults to :class:`~django.contrib.auth.forms.SetPasswordForm`"
msgstr ""

#: ../../topics/auth/default.txt:864
# 9d9da19fae9c416fbe14382033e48cb8
msgid "``post_reset_redirect``: URL to redirect after the password reset done. Defaults to ``None``."
msgstr ""

#: ../../topics/auth/default.txt:869
# dcd22f5cc0e347679d8db9b7959d102f
msgid "``form``: The form (see ``set_password_form`` above) for setting the new user's password."
msgstr ""

#: ../../topics/auth/default.txt:872
# 58d7dfafa5014b51b53f72b35a2ed460
msgid "``validlink``: Boolean, True if the link (combination of uidb36 and token) is valid or unused yet."
msgstr ""

#: ../../topics/auth/default.txt:877
# fe4833180c4e4edfbfd5950db76de327
msgid "Presents a view which informs the user that the password has been successfully changed."
msgstr ""

#: ../../topics/auth/default.txt:880
# dc144d9ecee54a67acc9345842052cb6
msgid "**URL name:** ``password_reset_complete``"
msgstr ""

#: ../../topics/auth/default.txt:884
# 08a2b64b9fa74b7fab54242738b9e689
msgid "``template_name``: The full name of a template to display the view. Defaults to :file:`registration/password_reset_complete.html`."
msgstr ""

#: ../../topics/auth/default.txt:888
# 700dbb52d8074c9ead740cf01ce2f75b
msgid "Helper functions"
msgstr ""

#: ../../topics/auth/default.txt:894
# 9c35c6e4e87c47ac8a83e359f07fe26a
msgid "Redirects to the login page, and then back to another URL after a successful login."
msgstr ""

#: ../../topics/auth/default.txt:897
# b73c86f62736436da91fa55f591cb2a7
msgid "**Required arguments:**"
msgstr ""

#: ../../topics/auth/default.txt:899
# ed6d5506a48d411da77c3ba4c2b50a7f
msgid "``next``: The URL to redirect to after a successful login."
msgstr ""

#: ../../topics/auth/default.txt:906
# cb1937a4327e4a9aa867781f8ea45f52
msgid "``redirect_field_name``: The name of a ``GET`` field containing the URL to redirect to after log out. Overrides ``next`` if the given ``GET`` parameter is passed."
msgstr ""

#: ../../topics/auth/default.txt:914
# a2ede8649af14139b737193d25761f38
msgid "Built-in forms"
msgstr ""

#: ../../topics/auth/default.txt:918
# 8afb9ba2040c411687dc78901638c768
msgid "If you don't want to use the built-in views, but want the convenience of not having to write forms for this functionality, the authentication system provides several built-in forms located in :mod:`django.contrib.auth.forms`:"
msgstr ""

#: ../../topics/auth/default.txt:923
# 42bd32b5ad1a49db97f3f6ac103259fd
msgid "The built-in authentication forms make certain assumptions about the user model that they are working with. If you're using a :ref:`custom User model <auth-custom-user>`, it may be necessary to define your own forms for the authentication system. For more information, refer to the documentation about :ref:`using the built-in authentication forms with custom user models <custom-users-and-the-built-in-auth-forms>`."
msgstr ""

#: ../../topics/auth/default.txt:932
# 07d97911165d4b60909ddfea25e408c5
msgid "A form used in the admin interface to change a user's password."
msgstr ""

#: ../../topics/auth/default.txt:936
# d9d92b9a8f2e4652bb5baba9b33a46d3
msgid "A form for logging a user in."
msgstr ""

#: ../../topics/auth/default.txt:940
# c7b405258818474fb401eaf8e44e88a0
msgid "A form for allowing a user to change their password."
msgstr ""

#: ../../topics/auth/default.txt:944
# 97d31f2aa50c42eea91c3910d6cf6baf
msgid "A form for generating and emailing a one-time use link to reset a user's password."
msgstr ""

#: ../../topics/auth/default.txt:949
# d8327095c9a342a98713b49a4d3b1fcd
msgid "A form that lets a user change his/her password without entering the old password."
msgstr ""

#: ../../topics/auth/default.txt:954
# 2caccb5953a64adf9acb12f70a9b08ed
msgid "A form used in the admin interface to change a user's information and permissions."
msgstr ""

#: ../../topics/auth/default.txt:959
# 3edc247d8ba742b0bc83fb97445653a6
msgid "A form for creating a new user."
msgstr ""

#: ../../topics/auth/default.txt:965
# cbf87bba11bb4ce7a19ac4fe8bd28131
msgid "Authentication data in templates"
msgstr ""

#: ../../topics/auth/default.txt:967
# cba0061e778c4368be5eab41ba35bbc9
msgid "The currently logged-in user and his/her permissions are made available in the :doc:`template context </ref/templates/api>` when you use :class:`~django.template.RequestContext`."
msgstr ""

#: ../../topics/auth/default.txt:973
# 86720f7d0ac64c8f937b99af6aea52a3
msgid "Technically, these variables are only made available in the template context if you use :class:`~django.template.RequestContext` *and* your :setting:`TEMPLATE_CONTEXT_PROCESSORS` setting contains ``\"django.contrib.auth.context_processors.auth\"``, which is default. For more, see the :ref:`RequestContext docs <subclassing-context-requestcontext>`."
msgstr ""

#: ../../topics/auth/default.txt:980
#: ../../topics/auth/index.txt:31
# 65bd7b4dc17b4ee393f4c073e12ee773
# 326a6d49b29448888660f5d3a36f6a82
msgid "Users"
msgstr ""

#: ../../topics/auth/default.txt:982
# 8aa4ae94d9304133a1972be95af23a3e
msgid "When rendering a template :class:`~django.template.RequestContext`, the currently logged-in user, either a  :class:`~django.contrib.auth.models.User` instance or an :class:`~django.contrib.auth.models.AnonymousUser` instance, is stored in the template variable ``{{ user }}``:"
msgstr ""

#: ../../topics/auth/default.txt:995
# cbf5c4f7c7cb4116950eaa662899ec2e
msgid "This template context variable is not available if a ``RequestContext`` is not being used."
msgstr ""

#: ../../topics/auth/default.txt:999
# 412bbe62b02f4b419d7d18176d6e6ff4
msgid "Permissions"
msgstr ""

#: ../../topics/auth/default.txt:1001
# ed776ce29a5f44fcbb02d25f764c3244
msgid "The currently logged-in user's permissions are stored in the template variable ``{{ perms }}``. This is an instance of ``django.contrib.auth.context_processors.PermWrapper``, which is a template-friendly proxy of permissions."
msgstr ""

#: ../../topics/auth/default.txt:1006
# 4be7d03d832e4b00a670481fe4649caa
msgid "In the ``{{ perms }}`` object, single-attribute lookup is a proxy to :meth:`User.has_module_perms <django.contrib.auth.models.User.has_module_perms>`. This example would display ``True`` if the logged-in user had any permissions in the ``foo`` app::"
msgstr ""

#: ../../topics/auth/default.txt:1013
# 063082442858411ca30f3cd0f0412662
msgid "Two-level-attribute lookup is a proxy to :meth:`User.has_perm <django.contrib.auth.models.User.has_perm>`. This example would display ``True`` if the logged-in user had the permission ``foo.can_vote``::"
msgstr ""

#: ../../topics/auth/default.txt:1020
# a8a087b7a1b744099412a515358062b5
msgid "Thus, you can check permissions in template ``{% if %}`` statements:"
msgstr ""

#: ../../topics/auth/default.txt:1039
# 482a6cf7960e4e978e8ad2437b036606
msgid "It is possible to also look permissions up by ``{% if in %}`` statements. For example:"
msgstr ""

#: ../../topics/auth/default.txt:1053
# a90b5539aa8c45c085d0a30ba61d6f38
msgid "Managing users in the admin"
msgstr ""

#: ../../topics/auth/default.txt:1055
# e02781ffb7d944beb532c970ebf7980f
msgid "When you have both ``django.contrib.admin`` and ``django.contrib.auth`` installed, the admin provides a convenient way to view and manage users, groups, and permissions. Users can be created and deleted like any Django model. Groups can be created, and permissions can be assigned to users or groups. A log of user edits to models made within the admin is also stored and displayed."
msgstr ""

#: ../../topics/auth/default.txt:1063
# b4b6142834c248cb86ac16bc3a4cc9cd
msgid "Creating Users"
msgstr ""

#: ../../topics/auth/default.txt:1065
# 66bf31422ded413b8b1c5c48377c539e
msgid "You should see a link to \"Users\" in the \"Auth\" section of the main admin index page. The \"Add user\" admin page is different than standard admin pages in that it requires you to choose a username and password before allowing you to edit the rest of the user's fields."
msgstr ""

#: ../../topics/auth/default.txt:1070
# 21d7500f1514467ca29d6584c980421e
msgid "Also note: if you want a user account to be able to create users using the Django admin site, you'll need to give them permission to add users *and* change users (i.e., the \"Add user\" and \"Change user\" permissions). If an account has permission to add users but not to change them, that account won't be able to add users. Why? Because if you have permission to add users, you have the power to create superusers, which can then, in turn, change other users. So Django requires add *and* change permissions as a slight security measure."
msgstr ""

#: ../../topics/auth/default.txt:1080
# c149e387255442dba4466d2e0d82b78e
msgid "Changing Passwords"
msgstr ""

#: ../../topics/auth/default.txt:1082
# 6cb0b1c1ee03451484b5434a6be08bff
msgid "User passwords are not displayed in the admin (nor stored in the database), but the :doc:`password storage details </topics/auth/passwords>` are displayed. Included in the display of this information is a link to a password change form that allows admins to change user passwords."
msgstr ""

#: ../../topics/auth/index.txt:3
# 8fca9c12edae40cdb2be3b0e394d08f1
msgid "User authentication in Django"
msgstr ""

#: ../../topics/auth/index.txt:15
# f2ea2bd183b6466998c5e3b4a34947bf
msgid "Django comes with an user authentication system. It handles user accounts, groups, permissions and cookie-based user sessions. This section of the documentation explains how the default implementation works out of the box, as well as how to :doc:`extend and customize </topics/auth/customizing>` it to suit your project's needs."
msgstr ""

#: ../../topics/auth/index.txt:22
#: ../../topics/forms/index.txt:26
#: ../../topics/http/urls.txt:18
#: ../../topics/i18n/formatting.txt:8
#: ../../topics/i18n/index.txt:14
#: ../../topics/i18n/timezones.txt:12
#: ../../topics/i18n/translation.txt:8
# 33d5ac07a3a5436daa73a0437ecf5574
# c7b449a0c1764bb69004d237c13f8057
# b860b9dac3014ceb98f42aed3c318152
# 4cccb3b1d63d4347977cc1b796185ab3
# 2b7ccb9b383645bfaef05af0e830bb4f
# 42eae14703e347389307c5e01f4ea3a4
# 9a744d00eb0e4784a292afa4e016e328
msgid "Overview"
msgstr ""

#: ../../topics/auth/index.txt:24
# 6451b850a73d4c4abac01f081c114ae4
msgid "The Django authentication system handles both authentication and authorization. Briefly, authentication verifies a user is who they claim to be, and authorization determines what an authenticated user is allowed to do. Here the term authentication is used to refer to both tasks."
msgstr ""

#: ../../topics/auth/index.txt:29
# b7721d16e16e4073acc6fd01c0ffef65
msgid "The auth system consists of:"
msgstr ""

#: ../../topics/auth/index.txt:32
# 731e3ff0dc3243c993e51417b2ec9aad
msgid "Permissions: Binary (yes/no) flags designating whether a user may perform a certain task."
msgstr ""

#: ../../topics/auth/index.txt:34
# c57c1ac5eb2742a3b4ef539205d2947a
msgid "Groups: A generic way of applying labels and permissions to more than one user."
msgstr ""

#: ../../topics/auth/index.txt:36
# d01b1bf8a8994d3da06b23c80c4fccc0
msgid "A configurable password hashing system"
msgstr ""

#: ../../topics/auth/index.txt:37
# 8e51551544eb4d609a4acb6f6a056004
msgid "Forms and view tools for logging in users, or restricting content"
msgstr ""

#: ../../topics/auth/index.txt:38
# f7f632d939bb4743b66a28eaa393b860
msgid "A pluggable backend system"
msgstr ""

#: ../../topics/auth/index.txt:40
# 4186e4416ffe45dab7c172eaecbc375e
msgid "The authentication system in Django aims to be very generic and doesn't provide some features commonly found in web authentication systems. Solutions for some of these common problems have been implemented in third-party packages:"
msgstr ""

#: ../../topics/auth/index.txt:44
# f5b5e7df3d93415fb67c3ac30ed0fc37
msgid "Password strength checking"
msgstr ""

#: ../../topics/auth/index.txt:45
# 4a955bc60f0b4baba00c20b4ca6d856f
msgid "Throttling of login attempts"
msgstr ""

#: ../../topics/auth/index.txt:46
# 1c93fa624a6f47b387b14ae41dc31c44
msgid "Authentication against third-parties (OAuth, for example)"
msgstr ""

#: ../../topics/auth/index.txt:49
# 4484f0665bcd43658d8f39849aae9170
msgid "Installation"
msgstr ""

#: ../../topics/auth/index.txt:51
# d87f982c1552475399c18b81529866ef
msgid "Authentication support is bundled as a Django contrib module in ``django.contrib.auth``. By default, the required configuration is already included in the :file:`settings.py` generated by :djadmin:`django-admin.py startproject <startproject>`, these consist of two items listed in your :setting:`INSTALLED_APPS` setting:"
msgstr ""

#: ../../topics/auth/index.txt:57
# 3a2dac9826f143a9b5cc6ce66830b689
msgid "``'django.contrib.auth'`` contains the core of the authentication framework, and its default models."
msgstr ""

#: ../../topics/auth/index.txt:59
# 26264131e75b426e8da331ebc2b3b476
msgid "``'django.contrib.contenttypes'`` is the Django :doc:`content type system </ref/contrib/contenttypes>`, which allows permissions to be associated with models you create."
msgstr ""

#: ../../topics/auth/index.txt:63
# 6995ce6f0b3b490eae88570e3ddae873
msgid "and two items in your :setting:`MIDDLEWARE_CLASSES` setting:"
msgstr ""

#: ../../topics/auth/index.txt:65
# a7a33899052047c7a500f6d82d1baa38
msgid ":class:`~django.contrib.sessions.middleware.SessionMiddleware` manages :doc:`sessions </topics/http/sessions>` across requests."
msgstr ""

#: ../../topics/auth/index.txt:67
# d2c5444766d2454ba7fd5039248ce609
msgid ":class:`~django.contrib.auth.middleware.AuthenticationMiddleware` associates users with requests using sessions."
msgstr ""

#: ../../topics/auth/index.txt:70
# c2352b3515b647a28686e91a0ee678bd
msgid "With these settings in place, running the command ``manage.py syncdb`` creates the necessary database tables for auth related models, creates permissions for any models defined in your installed apps, and prompts you to create a superuser account the first time you run it."
msgstr ""

#: ../../topics/auth/index.txt:76
#: ../../topics/i18n/timezones.txt:649
# 4857397190744d75a4849be159e8f5ae
# 7f8485383d524e04934c2f3550dbdbfb
msgid "Usage"
msgstr ""

#: ../../topics/auth/index.txt:78
# 402edb250d2c4103ba19a8cee62954fc
msgid ":doc:`Using Django's default implementation <default>`"
msgstr ""

#: ../../topics/auth/index.txt:80
# d1b5beacc872473baa49cd1519a25136
msgid ":ref:`Working with User objects <user-objects>`"
msgstr ""

#: ../../topics/auth/index.txt:81
# 265a9da7bb2d44d29e0f2c3f844bf6be
msgid ":ref:`Permissions and authorization <topic-authorization>`"
msgstr ""

#: ../../topics/auth/index.txt:82
# 87aee945231f4fccb494736f9ee384a2
msgid ":ref:`Authentication in web requests <auth-web-requests>`"
msgstr ""

#: ../../topics/auth/index.txt:83
# d7621c17f2eb4f479c299f88e7dee1b8
msgid ":ref:`Managing users in the admin <auth-admin>`"
msgstr ""

#: ../../topics/auth/index.txt:85
# 75190e8bdb274dfeb75c0b500df44bc0
msgid ":doc:`API reference for the default implementation </ref/contrib/auth>`"
msgstr ""

#: ../../topics/auth/index.txt:87
# 8d048b95e2224098821eebe98066d591
msgid ":doc:`Customizing Users and authentication <customizing>`"
msgstr ""

#: ../../topics/auth/index.txt:89
# eff1324ae63043ae992e4245faeeca5f
msgid ":doc:`Password management in Django <passwords>`"
msgstr ""

#: ../../topics/auth/passwords.txt:3
# b19ef2614a92409c9da06b771e7d3b74
msgid "Password management in Django"
msgstr ""

#: ../../topics/auth/passwords.txt:5
# 8ee04fd16f0d413395650d5019ec8cc8
msgid "Password management is something that should generally not be reinvented unnecessarily, and Django endeavors to provide a secure and flexible set of tools for managing user passwords. This document describes how Django stores passwords, how the storage hashing can be configured, and some utilities to work with hashed passwords."
msgstr ""

#: ../../topics/auth/passwords.txt:14
# b30d9de8ceeb4369a6ba8f07903f87ee
msgid "How Django stores passwords"
msgstr ""

#: ../../topics/auth/passwords.txt:21
# 5b39864817654cfc9cb2125de1e6c180
msgid "The :attr:`~django.contrib.auth.models.User.password` attribute of a :class:`~django.contrib.auth.models.User` object is a string in this format::"
msgstr ""

#: ../../topics/auth/passwords.txt:26
# 85990eb19bcd46ec8206d412a4d4d061
msgid "Those are the components used for storing a User's password, separated by the dollar-sign character and consist of: the hashing algorithm, the number of algorithm iterations (work factor), the random salt, and the resulting password hash.  The algorithm is one of a number of one-way hashing or password storage algorithms Django can use; see below. Iterations describe the number of times the algorithm is run over the hash. Salt is the random seed used and the hash is the result of the one-way function."
msgstr ""

#: ../../topics/auth/passwords.txt:34
# 169c62f20f5048b9985f0097b41d45e0
msgid "By default, Django uses the PBKDF2_ algorithm with a SHA256 hash, a password stretching mechanism recommended by NIST_. This should be sufficient for most users: it's quite secure, requiring massive amounts of computing time to break."
msgstr ""

#: ../../topics/auth/passwords.txt:39
# b8e9a104a0924cd4ba065a55287c6c7f
msgid "However, depending on your requirements, you may choose a different algorithm, or even use a custom algorithm to match your specific security situation. Again, most users shouldn't need to do this -- if you're not sure, you probably don't.  If you do, please read on:"
msgstr ""

#: ../../topics/auth/passwords.txt:44
# afd57c41d7194b88b3ef112bdcab6900
msgid "Django chooses the algorithm to use by consulting the :setting:`PASSWORD_HASHERS` setting. This is a list of hashing algorithm classes that this Django installation supports. The first entry in this list (that is, ``settings.PASSWORD_HASHERS[0]``) will be used to store passwords, and all the other entries are valid hashers that can be used to check existing passwords.  This means that if you want to use a different algorithm, you'll need to modify :setting:`PASSWORD_HASHERS` to list your preferred algorithm first in the list."
msgstr ""

#: ../../topics/auth/passwords.txt:53
# 7f171ed9d6ed485385ba2cc6851c4365
msgid "The default for :setting:`PASSWORD_HASHERS` is::"
msgstr ""

#: ../../topics/auth/passwords.txt:64
# afd99b3619084b2e965370d1a2c74cb3
msgid "This means that Django will use PBKDF2_ to store all passwords, but will support checking passwords stored with PBKDF2SHA1, bcrypt_, SHA1_, etc. The next few sections describe a couple of common ways advanced users may want to modify this setting."
msgstr ""

#: ../../topics/auth/passwords.txt:72
# d1f62a7f18b7420a95c9d79725dadfe0
msgid "Using bcrypt with Django"
msgstr ""

#: ../../topics/auth/passwords.txt:74
# ed5cd97646c84741b8391930c13833c4
msgid "Bcrypt_ is a popular password storage algorithm that's specifically designed for long-term password storage. It's not the default used by Django since it requires the use of third-party libraries, but since many people may want to use it Django supports bcrypt with minimal effort."
msgstr ""

#: ../../topics/auth/passwords.txt:79
# f3468507081742e88fa668bbb4ea7a46
msgid "To use Bcrypt as your default storage algorithm, do the following:"
msgstr ""

#: ../../topics/auth/passwords.txt:81
# c10d33106c5b4ab687bedc090287e2ee
msgid "Install the `py-bcrypt`_ library (probably by running ``sudo pip install py-bcrypt``, or downloading the library and installing it with ``python setup.py install``)."
msgstr ""

#: ../../topics/auth/passwords.txt:85
# bd56d020bc4f42bd9de06f92bb6ffe1c
msgid "Modify :setting:`PASSWORD_HASHERS` to list ``BCryptPasswordHasher`` first. That is, in your settings file, you'd put::"
msgstr ""

#: ../../topics/auth/passwords.txt:97
# 7543fd30775147cb99fa9612bf8401f0
msgid "(You need to keep the other entries in this list, or else Django won't be able to upgrade passwords; see below)."
msgstr ""

#: ../../topics/auth/passwords.txt:100
# b62a3996076a433da2b5c75cc35d09cc
msgid "That's it -- now your Django install will use Bcrypt as the default storage algorithm."
msgstr ""

#: ../../topics/auth/passwords.txt:105
# 1866af41db8d47ba88707738e65f4c91
msgid "The designers of bcrypt truncate all passwords at 72 characters which means that ``bcrypt(password_with_100_chars) == bcrypt(password_with_100_chars[:72])``. ``BCryptPasswordHasher`` does not have any special handling and thus is also subject to this hidden password length limit. The practical ramification of this truncation is pretty marginal as the average user does not have a password greater than 72 characters in length and even being truncated at 72 the compute powered required to brute force bcrypt in any useful amount of time is still astronomical."
msgstr ""

#: ../../topics/auth/passwords.txt:116
# c938ae04dae34ef6878f2c4d49460353
msgid "There are several other implementations that allow bcrypt to be used with Django. Django's bcrypt support is NOT directly compatible with these. To upgrade, you will need to modify the hashes in your database to be in the form ``bcrypt$(raw bcrypt output)``. For example: ``bcrypt$$2a$12$NT0I31Sa7ihGEWpka9ASYrEFkhuTNeBQ2xfZskIiiJeyFXhRgS.Sy``."
msgstr ""

#: ../../topics/auth/passwords.txt:124
# be6f5795e14f488286d460fc6db1356c
msgid "Increasing the work factor"
msgstr ""

#: ../../topics/auth/passwords.txt:126
# 3a31fae00818448084356bb6833e5173
msgid "The PBKDF2 and bcrypt algorithms use a number of iterations or rounds of hashing. This deliberately slows down attackers, making attacks against hashed passwords harder. However, as computing power increases, the number of iterations needs to be increased. We've chosen a reasonable default (and will increase it with each release of Django), but you may wish to tune it up or down, depending on your security needs and available processing power. To do so, you'll subclass the appropriate algorithm and override the ``iterations`` parameters. For example, to increase the number of iterations used by the default PBKDF2 algorithm:"
msgstr ""

#: ../../topics/auth/passwords.txt:136
# 3cfbcc907c8c447bb2e9186e3751b041
msgid "Create a subclass of ``django.contrib.auth.hashers.PBKDF2PasswordHasher``::"
msgstr ""

#: ../../topics/auth/passwords.txt:146
# 4fc14ad9254e42979d0d062c92348d32
msgid "Save this somewhere in your project. For example, you might put this in a file like ``myproject/hashers.py``."
msgstr ""

#: ../../topics/auth/passwords.txt:149
# 8b450a4d266a44abb3c4f05834aa6fb6
msgid "Add your new hasher as the first entry in :setting:`PASSWORD_HASHERS`::"
msgstr ""

#: ../../topics/auth/passwords.txt:162
# d678f7da374c410ab73e26af455ab44a
msgid "That's it -- now your Django install will use more iterations when it stores passwords using PBKDF2."
msgstr ""

#: ../../topics/auth/passwords.txt:166
# b27815b7f29a4653b3f36837ee7852ea
msgid "Password upgrading"
msgstr ""

#: ../../topics/auth/passwords.txt:168
# 4ef12468f31847f58e8fab94888ddd95
msgid "When users log in, if their passwords are stored with anything other than the preferred algorithm, Django will automatically upgrade the algorithm to the preferred one. This means that old installs of Django will get automatically more secure as users log in, and it also means that you can switch to new (and better) storage algorithms as they get invented."
msgstr ""

#: ../../topics/auth/passwords.txt:174
# 8e3cc9635bfd418c9bd518fdfdadced8
msgid "However, Django can only upgrade passwords that use algorithms mentioned in :setting:`PASSWORD_HASHERS`, so as you upgrade to new systems you should make sure never to *remove* entries from this list. If you do, users using un- mentioned algorithms won't be able to upgrade."
msgstr ""

#: ../../topics/auth/passwords.txt:187
# 4f08eae21e4f499fb99ef30adeba605f
msgid "Manually managing a user's password"
msgstr ""

#: ../../topics/auth/passwords.txt:200
# 7354e2d1ddde4ae2a5ddcb8dbb83395a
msgid "If you'd like to manually authenticate a user by comparing a plain-text password to the hashed password in the database, use the convenience function :func:`check_password`. It takes two arguments: the plain-text password to check, and the full value of a user's ``password`` field in the database to check against, and returns ``True`` if they match, ``False`` otherwise."
msgstr ""

#: ../../topics/auth/passwords.txt:211
# 505b1a75fd2c4422915772713346c9f5
msgid "Creates a hashed password in the format used by this application. It takes one mandatory argument: the password in plain-text. Optionally, you can provide a salt and a hashing algorithm to use, if you don't want to use the defaults (first entry of ``PASSWORD_HASHERS`` setting). Currently supported algorithms are: ``'pbkdf2_sha256'``, ``'pbkdf2_sha1'``, ``'bcrypt'`` (see :ref:`bcrypt_usage`), ``'sha1'``, ``'md5'``, ``'unsalted_md5'`` (only for backward compatibility) and ``'crypt'`` if you have the ``crypt`` library installed. If the password argument is ``None``, an unusable password is returned (a one that will be never accepted by :func:`check_password`)."
msgstr ""

#: ../../topics/auth/passwords.txt:226
# 5df85a1619da41e5a342c423fa05b96b
msgid "Checks if the given string is a hashed password that has a chance of being verified against :func:`check_password`."
msgstr ""

#: ../../topics/cache.txt:3
# 83f80100e40b49398e49cf132b0cae1c
msgid "Django's cache framework"
msgstr ""

#: ../../topics/cache.txt:5
# 62aa52147c3c4c3383a63fa261b7dc45
msgid "A fundamental trade-off in dynamic Web sites is, well, they're dynamic. Each time a user requests a page, the Web server makes all sorts of calculations -- from database queries to template rendering to business logic -- to create the page that your site's visitor sees. This is a lot more expensive, from a processing-overhead perspective, than your standard read-a-file-off-the-filesystem server arrangement."
msgstr ""

#: ../../topics/cache.txt:12
# 1223b8e09cd441cea2cae987f215474f
msgid "For most Web applications, this overhead isn't a big deal. Most Web applications aren't washingtonpost.com or slashdot.org; they're simply small- to medium-sized sites with so-so traffic. But for medium- to high-traffic sites, it's essential to cut as much overhead as possible."
msgstr ""

#: ../../topics/cache.txt:17
# b6be7e4acb024e2f8bfba9efb3cf9926
msgid "That's where caching comes in."
msgstr ""

#: ../../topics/cache.txt:19
# da44c0dd645c40f2abd6cdcbb88a1c7a
msgid "To cache something is to save the result of an expensive calculation so that you don't have to perform the calculation next time. Here's some pseudocode explaining how this would work for a dynamically generated Web page::"
msgstr ""

#: ../../topics/cache.txt:31
# f51c5a078c9c4c338e09d75999b4a390
msgid "Django comes with a robust cache system that lets you save dynamic pages so they don't have to be calculated for each request. For convenience, Django offers different levels of cache granularity: You can cache the output of specific views, you can cache only the pieces that are difficult to produce, or you can cache your entire site."
msgstr ""

#: ../../topics/cache.txt:37
# 1e06343aede2424e9f1af20be6d5dc1f
msgid "Django also works well with \"upstream\" caches, such as `Squid <http://www.squid-cache.org>`_ and browser-based caches. These are the types of caches that you don't directly control but to which you can provide hints (via HTTP headers) about which parts of your site should be cached, and how."
msgstr ""

#: ../../topics/cache.txt:43
# 7878e1180ed34556b63312f928cc9765
msgid "Setting up the cache"
msgstr ""

#: ../../topics/cache.txt:45
# 764fa8eaf8224b9992b3f607963c134f
msgid "The cache system requires a small amount of setup. Namely, you have to tell it where your cached data should live -- whether in a database, on the filesystem or directly in memory. This is an important decision that affects your cache's performance; yes, some cache types are faster than others."
msgstr ""

#: ../../topics/cache.txt:50
# 93389a8c991f41fc9a73aefe4b95ab61
msgid "Your cache preference goes in the :setting:`CACHES` setting in your settings file. Here's an explanation of all available values for :setting:`CACHES`."
msgstr ""

#: ../../topics/cache.txt:57
# 08031147af71477c99fe795d7d59f4f4
msgid "Memcached"
msgstr ""

#: ../../topics/cache.txt:59
# 96bfde13bf99474dbff19de247db506f
msgid "By far the fastest, most efficient type of cache available to Django, Memcached__ is an entirely memory-based cache framework originally developed to handle high loads at LiveJournal.com and subsequently open-sourced by Danga Interactive.  It is used by sites such as Facebook and Wikipedia to reduce database access and dramatically increase site performance."
msgstr ""

#: ../../topics/cache.txt:67
# 5ff1e71a2d9e407b8115e7c68836cebe
msgid "Memcached runs as a daemon and is allotted a specified amount of RAM. All it does is provide a fast interface for adding, retrieving and deleting arbitrary data in the cache.  All data is stored directly in memory, so there's no overhead of database or filesystem usage."
msgstr ""

#: ../../topics/cache.txt:72
# 845e5fa126bb489aacd09eb4f3b42a44
msgid "After installing Memcached itself, you'll need to install a memcached binding. There are several python memcached bindings available; the two most common are `python-memcached`_ and `pylibmc`_."
msgstr ""

#: ../../topics/cache.txt:79
# cf7fcb0ac72545b88a9abbbd167312f6
msgid "To use Memcached with Django:"
msgstr ""

#: ../../topics/cache.txt:81
# 16a12475658b4cea880122c7711b1079
msgid "Set :setting:`BACKEND <CACHES-BACKEND>` to ``django.core.cache.backends.memcached.MemcachedCache`` or ``django.core.cache.backends.memcached.PyLibMCCache`` (depending on your chosen memcached binding)"
msgstr ""

#: ../../topics/cache.txt:86
# fbb3685c5fc74cd79dd8119c345e8a0c
msgid "Set :setting:`LOCATION <CACHES-LOCATION>` to ``ip:port`` values, where ``ip`` is the IP address of the Memcached daemon and ``port`` is the port on which Memcached is running, or to a ``unix:path`` value, where ``path`` is the path to a Memcached Unix socket file."
msgstr ""

#: ../../topics/cache.txt:91
# 3cac41aa2e554b9f82417b9ed1bef0a9
msgid "In this example, Memcached is running on localhost (127.0.0.1) port 11211, using the ``python-memcached`` binding::"
msgstr ""

#: ../../topics/cache.txt:101
# cf0f55331db34e99a32a0405561200d8
msgid "In this example, Memcached is available through a local Unix socket file :file:`/tmp/memcached.sock` using the ``python-memcached`` binding::"
msgstr ""

#: ../../topics/cache.txt:111
# 22c8cfd761434654b2386da699b415eb
msgid "One excellent feature of Memcached is its ability to share cache over multiple servers. This means you can run Memcached daemons on multiple machines, and the program will treat the group of machines as a *single* cache, without the need to duplicate cache values on each machine. To take advantage of this feature, include all server addresses in :setting:`LOCATION <CACHES-LOCATION>`, either separated by semicolons or as a list."
msgstr ""

#: ../../topics/cache.txt:118
# 043e7992677a457096709330f96914d7
msgid "In this example, the cache is shared over Memcached instances running on IP address 172.19.26.240 and 172.19.26.242, both on port 11211::"
msgstr ""

#: ../../topics/cache.txt:131
# 93b110f138b449a28fdd4879013444bc
msgid "In the following example, the cache is shared over Memcached instances running on the IP addresses 172.19.26.240 (port 11211), 172.19.26.242 (port 11212), and 172.19.26.244 (port 11213)::"
msgstr ""

#: ../../topics/cache.txt:146
# 59e76d832e9043a0ba59594e9aec06a4
msgid "A final point about Memcached is that memory-based caching has one disadvantage: Because the cached data is stored in memory, the data will be lost if your server crashes. Clearly, memory isn't intended for permanent data storage, so don't rely on memory-based caching as your only data storage. Without a doubt, *none* of the Django caching backends should be used for permanent storage -- they're all intended to be solutions for caching, not storage -- but we point this out here because memory-based caching is particularly temporary."
msgstr ""

#: ../../topics/cache.txt:156
# f245dbb4d967437c9ef2eb77461d3a5c
msgid "Database caching"
msgstr ""

#: ../../topics/cache.txt:158
# c6c798e873984009804e579b8c175d6b
msgid "To use a database table as your cache backend, first create a cache table in your database by running this command::"
msgstr ""

#: ../../topics/cache.txt:163
# 9cb3d7b0bda4426b8410d15fb358c627
msgid "...where ``[cache_table_name]`` is the name of the database table to create. (This name can be whatever you want, as long as it's a valid table name that's not already being used in your database.) This command creates a single table in your database that is in the proper format that Django's database-cache system expects."
msgstr ""

#: ../../topics/cache.txt:169
# 90e99104092f4c35a160cd6bb4577399
msgid "Once you've created that database table, set your :setting:`BACKEND <CACHES-BACKEND>` setting to ``\"django.core.cache.backends.db.DatabaseCache\"``, and :setting:`LOCATION <CACHES-LOCATION>` to ``tablename`` -- the name of the database table. In this example, the cache table's name is ``my_cache_table``::"
msgstr ""

#: ../../topics/cache.txt:183
# 0756837adea9479d929d5b40f34a22ca
msgid "The database caching backend uses the same database as specified in your settings file. You can't use a different database backend for your cache table."
msgstr ""

#: ../../topics/cache.txt:186
# 9a63e8344a2344bea7a9b5aec6a0ecc0
msgid "Database caching works best if you've got a fast, well-indexed database server."
msgstr ""

#: ../../topics/cache.txt:189
# b02fb73ba8e742e6ad4092459b517e61
msgid "Database caching and multiple databases"
msgstr ""

#: ../../topics/cache.txt:191
# d0c6e0dd02d144d0b3591a77227052f4
msgid "If you use database caching with multiple databases, you'll also need to set up routing instructions for your database cache table. For the purposes of routing, the database cache table appears as a model named ``CacheEntry``, in an application named ``django_cache``. This model won't appear in the models cache, but the model details can be used for routing purposes."
msgstr ""

#: ../../topics/cache.txt:198
# 418067b07c7749eab3baa2c03fbe19dc
msgid "For example, the following router would direct all cache read operations to ``cache_slave``, and all write operations to ``cache_master``. The cache table will only be synchronized onto ``cache_master``::"
msgstr ""

#: ../../topics/cache.txt:224
# 550e8633145b45d0bbccd1ee396fd98c
msgid "If you don't specify routing directions for the database cache model, the cache backend will use the ``default`` database."
msgstr ""

#: ../../topics/cache.txt:227
# 7e72dfd58e1148daa74d2dd84f527e77
msgid "Of course, if you don't use the database cache backend, you don't need to worry about providing routing instructions for the database cache model."
msgstr ""

#: ../../topics/cache.txt:232
# 6833dfb5a7274f8c94d785e683244290
msgid "Filesystem caching"
msgstr ""

#: ../../topics/cache.txt:234
# 808e466b0a7047ef94fd2b3264b79347
msgid "To store cached items on a filesystem, use ``\"django.core.cache.backends.filebased.FileBasedCache\"`` for :setting:`BACKEND <CACHES-BACKEND>`. For example, to store cached data in ``/var/tmp/django_cache``, use this setting::"
msgstr ""

#: ../../topics/cache.txt:247
# cab88629801a434cbfaf777bf40bb308
msgid "If you're on Windows, put the drive letter at the beginning of the path, like this::"
msgstr ""

#: ../../topics/cache.txt:257
# 9c8d3d9d55d04a619583b759a5c37a22
msgid "The directory path should be absolute -- that is, it should start at the root of your filesystem. It doesn't matter whether you put a slash at the end of the setting."
msgstr ""

#: ../../topics/cache.txt:261
# 5a0ad96236c4452c8aa6bef8fa9e2cc8
msgid "Make sure the directory pointed-to by this setting exists and is readable and writable by the system user under which your Web server runs. Continuing the above example, if your server runs as the user ``apache``, make sure the directory ``/var/tmp/django_cache`` exists and is readable and writable by the user ``apache``."
msgstr ""

#: ../../topics/cache.txt:267
# 22772af2caec48ff9a33c32c01c83450
msgid "Each cache value will be stored as a separate file whose contents are the cache data saved in a serialized (\"pickled\") format, using Python's ``pickle`` module. Each file's name is the cache key, escaped for safe filesystem use."
msgstr ""

#: ../../topics/cache.txt:272
# a986a863812146d2ae3068821b13bd47
msgid "Local-memory caching"
msgstr ""

#: ../../topics/cache.txt:274
# 800d40b0586b42768ae461c2821bdecb
msgid "If you want the speed advantages of in-memory caching but don't have the capability of running Memcached, consider the local-memory cache backend. This cache is multi-process and thread-safe. To use it, set :setting:`BACKEND <CACHES-BACKEND>` to ``\"django.core.cache.backends.locmem.LocMemCache\"``. For example::"
msgstr ""

#: ../../topics/cache.txt:287
# 5dc44c466ace44d5a73d75d1bca7c613
msgid "The cache :setting:`LOCATION <CACHES-LOCATION>` is used to identify individual memory stores. If you only have one locmem cache, you can omit the :setting:`LOCATION <CACHES-LOCATION>`; however, if you have more than one local memory cache, you will need to assign a name to at least one of them in order to keep them separate."
msgstr ""

#: ../../topics/cache.txt:293
# 2a3c432d5d35407d84368839b6b9c25e
msgid "Note that each process will have its own private cache instance, which means no cross-process caching is possible. This obviously also means the local memory cache isn't particularly memory-efficient, so it's probably not a good choice for production environments. It's nice for development."
msgstr ""

#: ../../topics/cache.txt:299
# 5be578869f3f4a268f0cf6e894df677f
msgid "Dummy caching (for development)"
msgstr ""

#: ../../topics/cache.txt:301
# dff9447f3c494e40bb01553692eb277b
msgid "Finally, Django comes with a \"dummy\" cache that doesn't actually cache -- it just implements the cache interface without doing anything."
msgstr ""

#: ../../topics/cache.txt:304
# 816f1b4df5e341e9a0ca93ce014c516f
msgid "This is useful if you have a production site that uses heavy-duty caching in various places but a development/test environment where you don't want to cache and don't want to have to change your code to special-case the latter. To activate dummy caching, set :setting:`BACKEND <CACHES-BACKEND>` like so::"
msgstr ""

#: ../../topics/cache.txt:316
# 5fda8ec72161418b93849549a010dde9
msgid "Using a custom cache backend"
msgstr ""

#: ../../topics/cache.txt:318
# 0baed15eec3d4fcda49748c77ddf2101
msgid "While Django includes support for a number of cache backends out-of-the-box, sometimes you might want to use a customized cache backend. To use an external cache backend with Django, use the Python import path as the :setting:`BACKEND <CACHES-BACKEND>` of the :setting:`CACHES` setting, like so::"
msgstr ""

#: ../../topics/cache.txt:329
# ad3cd7e86c034d63adda5ff6fcc3738e
msgid "If you're building your own backend, you can use the standard cache backends as reference implementations. You'll find the code in the ``django/core/cache/backends/`` directory of the Django source."
msgstr ""

#: ../../topics/cache.txt:333
# e4c8b7e6882843eea433a8f116dbdcf2
msgid "Note: Without a really compelling reason, such as a host that doesn't support them, you should stick to the cache backends included with Django. They've been well-tested and are easy to use."
msgstr ""

#: ../../topics/cache.txt:338
# 22bead4ea07e495e99e2962be59d652d
msgid "Cache arguments"
msgstr ""

#: ../../topics/cache.txt:340
# d47102303d204361b739eb6b2bc57916
msgid "In addition to the defining the engine and name of the each cache backend, each cache backend can be given additional arguments to control caching behavior. These arguments are provided as additional keys in the :setting:`CACHES` setting. Valid arguments are as follows:"
msgstr ""

#: ../../topics/cache.txt:345
# bbc01023a5524487945edcbb9a11a33b
msgid ":setting:`TIMEOUT <CACHES-TIMEOUT>`: The default timeout, in seconds, to use for the cache. This argument defaults to 300 seconds (5 minutes)."
msgstr ""

#: ../../topics/cache.txt:349
# 5a9c65e00db447638b8d70d4a3bbe11d
msgid ":setting:`OPTIONS <CACHES-OPTIONS>`: Any options that should be passed to cache backend. The list options understood by each backend vary with each backend."
msgstr ""

#: ../../topics/cache.txt:353
# e41f40f413eb47959fb4b7cf2f4b1871
msgid "Cache backends that implement their own culling strategy (i.e., the ``locmem``, ``filesystem`` and ``database`` backends) will honor the following options:"
msgstr ""

#: ../../topics/cache.txt:357
# 86f42f66530149ed9093314ad90bc3ee
msgid "``MAX_ENTRIES``: the maximum number of entries allowed in the cache before old values are deleted. This argument defaults to ``300``."
msgstr ""

#: ../../topics/cache.txt:361
# 0066d24140fe4a4c8842d49fa83b4074
msgid "``CULL_FREQUENCY``: The fraction of entries that are culled when ``MAX_ENTRIES`` is reached. The actual ratio is ``1/CULL_FREQUENCY``, so set ``CULL_FREQUENCY``: to ``2`` to cull half of the entries when ``MAX_ENTRIES`` is reached."
msgstr ""

#: ../../topics/cache.txt:366
# 4e1ae4adbb494d40aeec40c2267fff7b
msgid "A value of ``0`` for ``CULL_FREQUENCY`` means that the entire cache will be dumped when ``MAX_ENTRIES`` is reached. This makes culling *much* faster at the expense of more cache misses."
msgstr ""

#: ../../topics/cache.txt:371
# 3b850248962b49618f30406fd4a9f9f8
msgid "Cache backends backed by a third-party library will pass their options directly to the underlying cache library. As a result, the list of valid options depends on the library in use."
msgstr ""

#: ../../topics/cache.txt:375
# ff0796c2c49a49c1910c61fd72054128
msgid ":setting:`KEY_PREFIX <CACHES-KEY_PREFIX>`: A string that will be automatically included (prepended by default) to all cache keys used by the Django server."
msgstr ""

#: ../../topics/cache.txt:379
# 515fb052469946c3a3ae9c1b461216f2
msgid "See the :ref:`cache documentation <cache_key_prefixing>` for more information."
msgstr ""

#: ../../topics/cache.txt:382
# 3d8a9e81665242688db98b44ee87bc3b
msgid ":setting:`VERSION <CACHES-VERSION>`: The default version number for cache keys generated by the Django server."
msgstr ""

#: ../../topics/cache.txt:385
# 3b33c2f19cb9467abbcd182575c0d8ef
msgid "See the :ref:`cache documentation <cache_versioning>` for more information."
msgstr ""

#: ../../topics/cache.txt:388
# a27dcdb1ba2b47929770560b6ded0c28
msgid ":setting:`KEY_FUNCTION <CACHES-KEY_FUNCTION>` A string containing a dotted path to a function that defines how to compose a prefix, version and key into a final cache key."
msgstr ""

#: ../../topics/cache.txt:392
# 3aaeb43d96a0455c81355646b67163a8
msgid "See the :ref:`cache documentation <cache_key_transformation>` for more information."
msgstr ""

#: ../../topics/cache.txt:395
# e1d66a8568664216bb94e7028442d275
msgid "In this example, a filesystem backend is being configured with a timeout of 60 seconds, and a maximum capacity of 1000 items::"
msgstr ""

#: ../../topics/cache.txt:409
# 93f965f691c64d5787053a4c07c70c30
msgid "Invalid arguments are silently ignored, as are invalid values of known arguments."
msgstr ""

#: ../../topics/cache.txt:413
# 1fcd0ca9d52a4f3f8a930c3f3ab8189d
msgid "The per-site cache"
msgstr ""

#: ../../topics/cache.txt:415
# ac201df275d94abdb749a2b22dd43bd4
msgid "Once the cache is set up, the simplest way to use caching is to cache your entire site. You'll need to add ``'django.middleware.cache.UpdateCacheMiddleware'`` and ``'django.middleware.cache.FetchFromCacheMiddleware'`` to your :setting:`MIDDLEWARE_CLASSES` setting, as in this example::"
msgstr ""

#: ../../topics/cache.txt:429
# da000c414d214ddfbc70aee305667b06
msgid "No, that's not a typo: the \"update\" middleware must be first in the list, and the \"fetch\" middleware must be last. The details are a bit obscure, but see `Order of MIDDLEWARE_CLASSES`_ below if you'd like the full story."
msgstr ""

#: ../../topics/cache.txt:433
# d4823f3d9a464391aeb42f2456ad439e
msgid "Then, add the following required settings to your Django settings file:"
msgstr ""

#: ../../topics/cache.txt:435
# 6e34c68b113845e799d067d8dff26b31
msgid ":setting:`CACHE_MIDDLEWARE_ALIAS` -- The cache alias to use for storage."
msgstr ""

#: ../../topics/cache.txt:436
# 29a6ffa6019143c1b05c5677523478da
msgid ":setting:`CACHE_MIDDLEWARE_SECONDS` -- The number of seconds each page should be cached."
msgstr ""

#: ../../topics/cache.txt:438
# 430d2abe34ab4031bd0070926306f239
msgid ":setting:`CACHE_MIDDLEWARE_KEY_PREFIX` -- If the cache is shared across multiple sites using the same Django installation, set this to the name of the site, or some other string that is unique to this Django instance, to prevent key collisions. Use an empty string if you don't care."
msgstr ""

#: ../../topics/cache.txt:443
# c6b9c12ad3bd41a9be09c4798a4d1f59
msgid "The cache middleware caches GET and HEAD responses with status 200, where the request and response headers allow. Responses to requests for the same URL with different query parameters are considered to be unique pages and are cached separately. Optionally, if the :setting:`CACHE_MIDDLEWARE_ANONYMOUS_ONLY` setting is ``True``, only anonymous requests (i.e., not those made by a logged-in user) will be cached. This is a simple and effective way of disabling caching for any user-specific pages (including Django's admin interface). Note that if you use :setting:`CACHE_MIDDLEWARE_ANONYMOUS_ONLY`, you should make sure you've activated ``AuthenticationMiddleware``. The cache middleware expects that a HEAD request is answered with the same response headers as the corresponding GET request; in which case it can return a cached GET response for HEAD request."
msgstr ""

#: ../../topics/cache.txt:456
# b3b47e918718412981a10c1a86096773
msgid "Additionally, the cache middleware automatically sets a few headers in each :class:`~django.http.HttpResponse`:"
msgstr ""

#: ../../topics/cache.txt:459
# d5129f9b33294d0a9a5252652c15739e
msgid "Sets the ``Last-Modified`` header to the current date/time when a fresh (uncached) version of the page is requested."
msgstr ""

#: ../../topics/cache.txt:462
# be6db37b479141f98a3ccca83622f79f
msgid "Sets the ``Expires`` header to the current date/time plus the defined :setting:`CACHE_MIDDLEWARE_SECONDS`."
msgstr ""

#: ../../topics/cache.txt:465
# fe2a46cd22a9448fb25fb566a81c5d2e
msgid "Sets the ``Cache-Control`` header to give a max age for the page -- again, from the :setting:`CACHE_MIDDLEWARE_SECONDS` setting."
msgstr ""

#: ../../topics/cache.txt:468
# fb2707184f1448fb93f769cde1fad250
msgid "See :doc:`/topics/http/middleware` for more on middleware."
msgstr ""

#: ../../topics/cache.txt:470
# b9e48b5507e844cd80270817a0a6385f
msgid "If a view sets its own cache expiry time (i.e. it has a ``max-age`` section in its ``Cache-Control`` header) then the page will be cached until the expiry time, rather than :setting:`CACHE_MIDDLEWARE_SECONDS`. Using the decorators in ``django.views.decorators.cache`` you can easily set a view's expiry time (using the ``cache_control`` decorator) or disable caching for a view (using the ``never_cache`` decorator). See the `using other headers`__ section for more on these decorators."
msgstr ""

#: ../../topics/cache.txt:480
# d04fdfbf2a5b48798665c7cf7662827f
msgid "If :setting:`USE_I18N` is set to ``True`` then the generated cache key will include the name of the active :term:`language<language code>` -- see also :ref:`how-django-discovers-language-preference`). This allows you to easily cache multilingual sites without having to create the cache key yourself."
msgstr ""

#: ../../topics/cache.txt:487
# c2550e3e9e704793953c0710d3cc092f
msgid "Cache keys also include the active :term:`language <language code>` when :setting:`USE_L10N` is set to ``True`` and the :ref:`current time zone <default-current-time-zone>` when :setting:`USE_TZ` is set to ``True``."
msgstr ""

#: ../../topics/cache.txt:494
# d7c0aeea61f94c0eb4bc9adcbd91b64e
msgid "The per-view cache"
msgstr ""

#: ../../topics/cache.txt:498
# 25d6b28008864a629f9c4b8322a8690d
msgid "A more granular way to use the caching framework is by caching the output of individual views. ``django.views.decorators.cache`` defines a ``cache_page`` decorator that will automatically cache the view's response for you. It's easy to use::"
msgstr ""

#: ../../topics/cache.txt:509
# 961f0760a8f94bd1b52f00a778a11907
msgid "``cache_page`` takes a single argument: the cache timeout, in seconds. In the above example, the result of the ``my_view()`` view will be cached for 15 minutes. (Note that we've written it as ``60 * 15`` for the purpose of readability. ``60 * 15`` will be evaluated to ``900`` -- that is, 15 minutes multiplied by 60 seconds per minute.)"
msgstr ""

#: ../../topics/cache.txt:515
# 74967238d57e48d6bfbf50dae75ad637
msgid "The per-view cache, like the per-site cache, is keyed off of the URL. If multiple URLs point at the same view, each URL will be cached separately. Continuing the ``my_view`` example, if your URLconf looks like this::"
msgstr ""

#: ../../topics/cache.txt:523
# a8a17f3a13124328828fdd430bae6858
msgid "then requests to ``/foo/1/`` and ``/foo/23/`` will be cached separately, as you may expect. But once a particular URL (e.g., ``/foo/23/``) has been requested, subsequent requests to that URL will use the cache."
msgstr ""

#: ../../topics/cache.txt:527
# 5d1fb93af7a2477ea4b14a98f505c30e
msgid "``cache_page`` can also take an optional keyword argument, ``cache``, which directs the decorator to use a specific cache (from your :setting:`CACHES` setting) when caching view results. By default, the ``default`` cache will be used, but you can specify any cache you want::"
msgstr ""

#: ../../topics/cache.txt:537
# 455768aef8d74ed6ba55adab4e3ea127
msgid "You can also override the cache prefix on a per-view basis. ``cache_page`` takes an optional keyword argument, ``key_prefix``, which works in the same way as the :setting:`CACHE_MIDDLEWARE_KEY_PREFIX` setting for the middleware.  It can be used like this::"
msgstr ""

#: ../../topics/cache.txt:546
# 574e7a0212f547869208428aab058150
msgid "The two settings can also be combined. If you specify a ``cache`` *and* a ``key_prefix``, you will get all the settings of the requested cache alias, but with the key_prefix overridden."
msgstr ""

#: ../../topics/cache.txt:551
# ce428a9b5abb472485e20e9447ef3107
msgid "Specifying per-view cache in the URLconf"
msgstr ""

#: ../../topics/cache.txt:553
# 449fda41b4d34ec5a9f22473b4d034b5
msgid "The examples in the previous section have hard-coded the fact that the view is cached, because ``cache_page`` alters the ``my_view`` function in place. This approach couples your view to the cache system, which is not ideal for several reasons. For instance, you might want to reuse the view functions on another, cache-less site, or you might want to distribute the views to people who might want to use them without being cached. The solution to these problems is to specify the per-view cache in the URLconf rather than next to the view functions themselves."
msgstr ""

#: ../../topics/cache.txt:562
# 1882c85baeda464aa84c01075401faf6
msgid "Doing so is easy: simply wrap the view function with ``cache_page`` when you refer to it in the URLconf. Here's the old URLconf from earlier::"
msgstr ""

#: ../../topics/cache.txt:569
# 7592a59d00e74686b47a6af3532ffa84
msgid "Here's the same thing, with ``my_view`` wrapped in ``cache_page``::"
msgstr ""

#: ../../topics/cache.txt:580
# d2bc367670c843e8a18799664f3a9cdd
msgid "Template fragment caching"
msgstr ""

#: ../../topics/cache.txt:582
# ce89ed7bf780425fb24aa4fb216eb4e2
msgid "If you're after even more control, you can also cache template fragments using the ``cache`` template tag. To give your template access to this tag, put ``{% load cache %}`` near the top of your template."
msgstr ""

#: ../../topics/cache.txt:586
# 0712746869f44d6e8a78faabb55fa7cb
msgid "The ``{% cache %}`` template tag caches the contents of the block for a given amount of time. It takes at least two arguments: the cache timeout, in seconds, and the name to give the cache fragment. The name will be taken as is, do not use a variable. For example:"
msgstr ""

#: ../../topics/cache.txt:598
# f1f9dee91d8d46098aec4faf555d2e0e
msgid "Sometimes you might want to cache multiple copies of a fragment depending on some dynamic data that appears inside the fragment. For example, you might want a separate cached copy of the sidebar used in the previous example for every user of your site. Do this by passing additional arguments to the ``{% cache %}`` template tag to uniquely identify the cache fragment:"
msgstr ""

#: ../../topics/cache.txt:611
# 9dff62a0d38f479ebf4e0403f1b84697
msgid "It's perfectly fine to specify more than one argument to identify the fragment. Simply pass as many arguments to ``{% cache %}`` as you need."
msgstr ""

#: ../../topics/cache.txt:614
# 56c6d7e213674ce6883511be250a10c1
msgid "If :setting:`USE_I18N` is set to ``True`` the per-site middleware cache will :ref:`respect the active language<i18n-cache-key>`. For the ``cache`` template tag you could use one of the :ref:`translation-specific variables<template-translation-vars>` available in templates to achieve the same result:"
msgstr ""

#: ../../topics/cache.txt:631
# b2bf3588525548f8b88e350fefd2b691
msgid "The cache timeout can be a template variable, as long as the template variable resolves to an integer value. For example, if the template variable ``my_timeout`` is set to the value ``600``, then the following two examples are equivalent:"
msgstr ""

#: ../../topics/cache.txt:641
# 651113b212a74274b7bbc0e3be12674e
msgid "This feature is useful in avoiding repetition in templates. You can set the timeout in a variable, in one place, and just reuse that value."
msgstr ""

#: ../../topics/cache.txt:645
# b6d7e0c2104942a0a4784bdddde4950a
msgid "The low-level cache API"
msgstr ""

#: ../../topics/cache.txt:649
# 3d60e24dac2c4f39a062a0248f3611fc
msgid "Sometimes, caching an entire rendered page doesn't gain you very much and is, in fact, inconvenient overkill."
msgstr ""

#: ../../topics/cache.txt:652
# f7847e57b24646898cc112186f20c044
msgid "Perhaps, for instance, your site includes a view whose results depend on several expensive queries, the results of which change at different intervals. In this case, it would not be ideal to use the full-page caching that the per-site or per-view cache strategies offer, because you wouldn't want to cache the entire result (since some of the data changes often), but you'd still want to cache the results that rarely change."
msgstr ""

#: ../../topics/cache.txt:659
# 49fdf57d4866430c9dcea6b5888da9a4
msgid "For cases like this, Django exposes a simple, low-level cache API. You can use this API to store objects in the cache with any level of granularity you like. You can cache any Python object that can be pickled safely: strings, dictionaries, lists of model objects, and so forth. (Most common Python objects can be pickled; refer to the Python documentation for more information about pickling.)"
msgstr ""

#: ../../topics/cache.txt:667
# c43dd09586f34b8a8a7977c216a86d83
msgid "Accessing the cache"
msgstr ""

#: ../../topics/cache.txt:671
# ab414001e3df4b12ab44d45b78bde33f
msgid "The cache module, ``django.core.cache``, has a ``cache`` object that's automatically created from the ``'default'`` entry in the :setting:`CACHES` setting::"
msgstr ""

#: ../../topics/cache.txt:677
# cf40168eb8954a3ab45d603eacfb7978
msgid "If you have multiple caches defined in :setting:`CACHES`, then you can use :func:`django.core.cache.get_cache` to retrieve a cache object for any key::"
msgstr ""

#: ../../topics/cache.txt:683
# 2cf8d9c68a49406f82c3f934b08afffa
msgid "If the named key does not exist, ``InvalidCacheBackendError`` will be raised."
msgstr ""

#: ../../topics/cache.txt:687
# 99bba06ce63f48119f2f481308aed263
msgid "Basic usage"
msgstr ""

#: ../../topics/cache.txt:689
# 1ed3d9a6c17043ccbeb51be364d06c51
msgid "The basic interface is ``set(key, value, timeout)`` and ``get(key)``::"
msgstr ""

#: ../../topics/cache.txt:695
# 9e1d6a9723bd4f4081487831e09a82a2
msgid "The ``timeout`` argument is optional and defaults to the ``timeout`` argument of the appropriate backend in the :setting:`CACHES` setting (explained above). It's the number of seconds the value should be stored in the cache."
msgstr ""

#: ../../topics/cache.txt:700
# b5f9ddae56404166890edb8baa987235
msgid "If the object doesn't exist in the cache, ``cache.get()`` returns ``None``::"
msgstr ""

#: ../../topics/cache.txt:707
# a730e1e651134a32a495697df1b4861e
msgid "We advise against storing the literal value ``None`` in the cache, because you won't be able to distinguish between your stored ``None`` value and a cache miss signified by a return value of ``None``."
msgstr ""

#: ../../topics/cache.txt:711
# 1a9629e6c49a484aaf7b9c1593686746
msgid "``cache.get()`` can take a ``default`` argument. This specifies which value to return if the object doesn't exist in the cache::"
msgstr ""

#: ../../topics/cache.txt:717
# ad1aeb77411749f6b8d928dfdc7f04be
msgid "To add a key only if it doesn't already exist, use the ``add()`` method. It takes the same parameters as ``set()``, but it will not attempt to update the cache if the key specified is already present::"
msgstr ""

#: ../../topics/cache.txt:726
# 02c8b250880e4d65893b349e94f46130
msgid "If you need to know whether ``add()`` stored a value in the cache, you can check the return value. It will return ``True`` if the value was stored, ``False`` otherwise."
msgstr ""

#: ../../topics/cache.txt:730
# 8607cdecbde8470cb87704bc09245177
msgid "There's also a ``get_many()`` interface that only hits the cache once. ``get_many()`` returns a dictionary with all the keys you asked for that actually exist in the cache (and haven't expired)::"
msgstr ""

#: ../../topics/cache.txt:740
# 48e5b356d7c84436ac3b973ab64d944e
msgid "To set multiple values more efficiently, use ``set_many()`` to pass a dictionary of key-value pairs::"
msgstr ""

#: ../../topics/cache.txt:747
# c45e4fb673264cdb91234896a7a0dfc3
msgid "Like ``cache.set()``, ``set_many()`` takes an optional ``timeout`` parameter."
msgstr ""

#: ../../topics/cache.txt:749
# 84c230991a384493a9637db8ad4f7b3b
msgid "You can delete keys explicitly with ``delete()``. This is an easy way of clearing the cache for a particular object::"
msgstr ""

#: ../../topics/cache.txt:754
# 1c2b6d6ac76e4f90ab81fb71aaaaa216
msgid "If you want to clear a bunch of keys at once, ``delete_many()`` can take a list of keys to be cleared::"
msgstr ""

#: ../../topics/cache.txt:759
# c5ba57d6e89745368c64627773eeb4ca
msgid "Finally, if you want to delete all the keys in the cache, use ``cache.clear()``.  Be careful with this; ``clear()`` will remove *everything* from the cache, not just the keys set by your application. ::"
msgstr ""

#: ../../topics/cache.txt:765
# 3a9cb52b1e1a4040ac29b1873435f896
msgid "You can also increment or decrement a key that already exists using the ``incr()`` or ``decr()`` methods, respectively. By default, the existing cache value will incremented or decremented by 1. Other increment/decrement values can be specified by providing an argument to the increment/decrement call. A ValueError will be raised if you attempt to increment or decrement a nonexistent cache key.::"
msgstr ""

#: ../../topics/cache.txt:784
# b5c6e512bb9e4590b2d11c1cb35dfeea
msgid "``incr()``/``decr()`` methods are not guaranteed to be atomic. On those backends that support atomic increment/decrement (most notably, the memcached backend), increment and decrement operations will be atomic. However, if the backend doesn't natively provide an increment/decrement operation, it will be implemented using a two-step retrieve/update."
msgstr ""

#: ../../topics/cache.txt:793
# 7599e6d8e9de4d0389625a21cd98eaa8
msgid "Cache key prefixing"
msgstr ""

#: ../../topics/cache.txt:795
# 99e87c40574f48d096d8b8541cf09f54
msgid "If you are sharing a cache instance between servers, or between your production and development environments, it's possible for data cached by one server to be used by another server. If the format of cached data is different between servers, this can lead to some very hard to diagnose problems."
msgstr ""

#: ../../topics/cache.txt:801
# b15ed3e0d24d4696918ed81955780712
msgid "To prevent this, Django provides the ability to prefix all cache keys used by a server. When a particular cache key is saved or retrieved, Django will automatically prefix the cache key with the value of the :setting:`KEY_PREFIX <CACHES-KEY_PREFIX>` cache setting."
msgstr ""

#: ../../topics/cache.txt:806
# 7ec5e05449874fc2b7b50faeca908d35
msgid "By ensuring each Django instance has a different :setting:`KEY_PREFIX <CACHES-KEY_PREFIX>`, you can ensure that there will be no collisions in cache values."
msgstr ""

#: ../../topics/cache.txt:813
# ee502a58cc5f47b1883d8f82c5a7141a
msgid "Cache versioning"
msgstr ""

#: ../../topics/cache.txt:815
# bb2675d9f3754feeba40278566cc25a7
msgid "When you change running code that uses cached values, you may need to purge any existing cached values. The easiest way to do this is to flush the entire cache, but this can lead to the loss of cache values that are still valid and useful."
msgstr ""

#: ../../topics/cache.txt:820
# 49c0124b56004298889b31fbf55b2df9
msgid "Django provides a better way to target individual cache values. Django's cache framework has a system-wide version identifier, specified using the :setting:`VERSION <CACHES-VERSION>` cache setting. The value of this setting is automatically combined with the cache prefix and the user-provided cache key to obtain the final cache key."
msgstr ""

#: ../../topics/cache.txt:826
# 7e3a4fd2a5af44a4ba3d0315e9487981
msgid "By default, any key request will automatically include the site default cache key version. However, the primitive cache functions all include a ``version`` argument, so you can specify a particular cache key version to set or get. For example::"
msgstr ""

#: ../../topics/cache.txt:840
# 7793048bd828403ba1d87b33685ac0d9
msgid "The version of a specific key can be incremented and decremented using the ``incr_version()`` and ``decr_version()`` methods. This enables specific keys to be bumped to a new version, leaving other keys unaffected. Continuing our previous example::"
msgstr ""

#: ../../topics/cache.txt:860
# defbbc279e824458843c5cba31ad6a02
msgid "Cache key transformation"
msgstr ""

#: ../../topics/cache.txt:862
# f11d9c00ffae4ffc8f6fbc8b61dcba3b
msgid "As described in the previous two sections, the cache key provided by a user is not used verbatim -- it is combined with the cache prefix and key version to provide a final cache key. By default, the three parts are joined using colons to produce a final string::"
msgstr ""

#: ../../topics/cache.txt:870
# 93acf7c08d26494886ef3f94e416356b
msgid "If you want to combine the parts in different ways, or apply other processing to the final key (e.g., taking a hash digest of the key parts), you can provide a custom key function."
msgstr ""

#: ../../topics/cache.txt:874
# 3ea14c1c6cff4793b9e7a8ae71eed30a
msgid "The :setting:`KEY_FUNCTION <CACHES-KEY_FUNCTION>` cache setting specifies a dotted-path to a function matching the prototype of ``make_key()`` above. If provided, this custom key function will be used instead of the default key combining function."
msgstr ""

#: ../../topics/cache.txt:880
# 44e7f19b0a834238b4af457407d0d62b
msgid "Cache key warnings"
msgstr ""

#: ../../topics/cache.txt:882
# 82f659906a0143f0a73e5c44eb400e76
msgid "Memcached, the most commonly-used production cache backend, does not allow cache keys longer than 250 characters or containing whitespace or control characters, and using such keys will cause an exception. To encourage cache-portable code and minimize unpleasant surprises, the other built-in cache backends issue a warning (``django.core.cache.backends.base.CacheKeyWarning``) if a key is used that would cause an error on memcached."
msgstr ""

#: ../../topics/cache.txt:889
# 667dc7d1010748aaae57a23c1d101587
msgid "If you are using a production backend that can accept a wider range of keys (a custom backend, or one of the non-memcached built-in backends), and want to use this wider range without warnings, you can silence ``CacheKeyWarning`` with this code in the ``management`` module of one of your :setting:`INSTALLED_APPS`::"
msgstr ""

#: ../../topics/cache.txt:901
# a57205f3e6c240ed90a9514a6a19f35e
msgid "If you want to instead provide custom key validation logic for one of the built-in backends, you can subclass it, override just the ``validate_key`` method, and follow the instructions for `using a custom cache backend`_. For instance, to do this for the ``locmem`` backend, put this code in a module::"
msgstr ""

#: ../../topics/cache.txt:913
# d606fd73ffbf4a169aebf2323c0b35cb
msgid "...and use the dotted Python path to this class in the :setting:`BACKEND <CACHES-BACKEND>` portion of your :setting:`CACHES` setting."
msgstr ""

#: ../../topics/cache.txt:917
# 1cdebc3c0bbd4cf1914c999b71b96e25
msgid "Upstream caches"
msgstr ""

#: ../../topics/cache.txt:919
# 05e12192bb174b5294135a3cdde427c4
msgid "So far, this document has focused on caching your *own* data. But another type of caching is relevant to Web development, too: caching performed by \"upstream\" caches. These are systems that cache pages for users even before the request reaches your Web site."
msgstr ""

#: ../../topics/cache.txt:924
# 942449122d754fac8ba02d76ff8f853a
msgid "Here are a few examples of upstream caches:"
msgstr ""

#: ../../topics/cache.txt:926
# 275d7696687d4082844fa7b330c90264
msgid "Your ISP may cache certain pages, so if you requested a page from http://example.com/, your ISP would send you the page without having to access example.com directly. The maintainers of example.com have no knowledge of this caching; the ISP sits between example.com and your Web browser, handling all of the caching transparently."
msgstr ""

#: ../../topics/cache.txt:932
# 0ab4a91e05504468aef2201b336016d0
msgid "Your Django Web site may sit behind a *proxy cache*, such as Squid Web Proxy Cache (http://www.squid-cache.org/), that caches pages for performance. In this case, each request first would be handled by the proxy, and it would be passed to your application only if needed."
msgstr ""

#: ../../topics/cache.txt:937
# e2a4e574b522440eb09a2f1c7c7cb21a
msgid "Your Web browser caches pages, too. If a Web page sends out the appropriate headers, your browser will use the local cached copy for subsequent requests to that page, without even contacting the Web page again to see whether it has changed."
msgstr ""

#: ../../topics/cache.txt:942
# 7c0a793bb69140118b583634c6b0189f
msgid "Upstream caching is a nice efficiency boost, but there's a danger to it: Many Web pages' contents differ based on authentication and a host of other variables, and cache systems that blindly save pages based purely on URLs could expose incorrect or sensitive data to subsequent visitors to those pages."
msgstr ""

#: ../../topics/cache.txt:947
# 5eb4f7a693394589a07a247946647f54
msgid "For example, say you operate a Web email system, and the contents of the \"inbox\" page obviously depend on which user is logged in. If an ISP blindly cached your site, then the first user who logged in through that ISP would have his user-specific inbox page cached for subsequent visitors to the site. That's not cool."
msgstr ""

#: ../../topics/cache.txt:953
# bc79ec164cdc47e3bfb4faeb002c31d8
msgid "Fortunately, HTTP provides a solution to this problem. A number of HTTP headers exist to instruct upstream caches to differ their cache contents depending on designated variables, and to tell caching mechanisms not to cache particular pages. We'll look at some of these headers in the sections that follow."
msgstr ""

#: ../../topics/cache.txt:961
# fe929802243544ea9fa8fdd48b3077cb
msgid "Using Vary headers"
msgstr ""

#: ../../topics/cache.txt:963
# d8aebe48b6c5493ea7f8875834d1e733
msgid "The ``Vary`` header defines which request headers a cache mechanism should take into account when building its cache key. For example, if the contents of a Web page depend on a user's language preference, the page is said to \"vary on language.\""
msgstr ""

#: ../../topics/cache.txt:968
# c12d985aecfa44cebdd9ec562f5b656f
msgid "By default, Django's cache system creates its cache keys using the requested path and query -- e.g., ``\"/stories/2005/?order_by=author\"``. This means every request to that URL will use the same cached version, regardless of user-agent differences such as cookies or language preferences. However, if this page produces different content based on some difference in request headers -- such as a cookie, or a language, or a user-agent -- you'll need to use the ``Vary`` header to tell caching mechanisms that the page output depends on those things."
msgstr ""

#: ../../topics/cache.txt:976
# 6cc5f27370344595a95c42d7655a79b0
msgid "To do this in Django, use the convenient ``vary_on_headers`` view decorator, like so::"
msgstr ""

#: ../../topics/cache.txt:985
# 9fc9d6a60d45474fb12493281f8e7179
msgid "In this case, a caching mechanism (such as Django's own cache middleware) will cache a separate version of the page for each unique user-agent."
msgstr ""

#: ../../topics/cache.txt:988
# 05236ce127e141e081f96c44e0f2e686
msgid "The advantage to using the ``vary_on_headers`` decorator rather than manually setting the ``Vary`` header (using something like ``response['Vary'] = 'user-agent'``) is that the decorator *adds* to the ``Vary`` header (which may already exist), rather than setting it from scratch and potentially overriding anything that was already in there."
msgstr ""

#: ../../topics/cache.txt:994
# 3bc47c9acb4c428aa7eb72f8f27c2bc6
msgid "You can pass multiple headers to ``vary_on_headers()``::"
msgstr ""

#: ../../topics/cache.txt:1000
# cbb8a5ae064f41338379a5fec8142857
msgid "This tells upstream caches to vary on *both*, which means each combination of user-agent and cookie will get its own cache value. For example, a request with the user-agent ``Mozilla`` and the cookie value ``foo=bar`` will be considered different from a request with the user-agent ``Mozilla`` and the cookie value ``foo=ham``."
msgstr ""

#: ../../topics/cache.txt:1006
# af4516f35cee48ea94d1fd5809da01e1
msgid "Because varying on cookie is so common, there's a ``vary_on_cookie`` decorator. These two views are equivalent::"
msgstr ""

#: ../../topics/cache.txt:1017
# 1424fe4f4a94400abfe5f7703031f289
msgid "The headers you pass to ``vary_on_headers`` are not case sensitive; ``\"User-Agent\"`` is the same thing as ``\"user-agent\"``."
msgstr ""

#: ../../topics/cache.txt:1020
# 6268d417b61b49628a81a4046964444f
msgid "You can also use a helper function, ``django.utils.cache.patch_vary_headers``, directly. This function sets, or adds to, the ``Vary header``. For example::"
msgstr ""

#: ../../topics/cache.txt:1031
# a3c3f9dee6334e73a6727cba6a1a76c5
msgid "``patch_vary_headers`` takes an :class:`~django.http.HttpResponse` instance as its first argument and a list/tuple of case-insensitive header names as its second argument."
msgstr ""

#: ../../topics/cache.txt:1035
# 85b857622a27408da836aac52b419cbc
msgid "For more on Vary headers, see the `official Vary spec`_."
msgstr ""

#: ../../topics/cache.txt:1040
# 87261d68b70249ce831924e2076d119e
msgid "Controlling cache: Using other headers"
msgstr ""

#: ../../topics/cache.txt:1042
# 1fee46edaf3a4ff5987a20f8c65f27a0
msgid "Other problems with caching are the privacy of data and the question of where data should be stored in a cascade of caches."
msgstr ""

#: ../../topics/cache.txt:1045
# dc85eae93fad4936a7f85e42ac616da9
msgid "A user usually faces two kinds of caches: his or her own browser cache (a private cache) and his or her provider's cache (a public cache). A public cache is used by multiple users and controlled by someone else. This poses problems with sensitive data--you don't want, say, your bank account number stored in a public cache. So Web applications need a way to tell caches which data is private and which is public."
msgstr ""

#: ../../topics/cache.txt:1052
# 210d2376c2104eb58c439cb88b387e66
msgid "The solution is to indicate a page's cache should be \"private.\" To do this in Django, use the ``cache_control`` view decorator. Example::"
msgstr ""

#: ../../topics/cache.txt:1061
# 4d6815a8f08e42d99c825efb80449d32
msgid "This decorator takes care of sending out the appropriate HTTP header behind the scenes."
msgstr ""

#: ../../topics/cache.txt:1064
# a34f2ded74ee4ba8b1711902e469ec76
msgid "Note that the cache control settings \"private\" and \"public\" are mutually exclusive. The decorator ensures that the \"public\" directive is removed if \"private\" should be set (and vice versa). An example use of the two directives would be a blog site that offers both private and public entries. Public entries may be cached on any shared cache. The following code uses ``patch_cache_control``, the manual way to modify the cache control header (it is internally called by the ``cache_control`` decorator)::"
msgstr ""

#: ../../topics/cache.txt:1086
# 4bb0c005a72c4cecaea055667d9a3797
msgid "There are a few other ways to control cache parameters. For example, HTTP allows applications to do the following:"
msgstr ""

#: ../../topics/cache.txt:1089
# 52d1a8c3c0834c32879499fcda9375ed
msgid "Define the maximum time a page should be cached."
msgstr ""

#: ../../topics/cache.txt:1091
# 53b495511b584d75b92ddf6918dc4201
msgid "Specify whether a cache should always check for newer versions, only delivering the cached content when there are no changes. (Some caches might deliver cached content even if the server page changed, simply because the cache copy isn't yet expired.)"
msgstr ""

#: ../../topics/cache.txt:1096
# d56caa660814461caae08fc1d582c041
msgid "In Django, use the ``cache_control`` view decorator to specify these cache parameters. In this example, ``cache_control`` tells caches to revalidate the cache on every access and to store cached versions for, at most, 3,600 seconds::"
msgstr ""

#: ../../topics/cache.txt:1106
# 5ee97edcc6b045c5ba39a1727eb9a921
msgid "Any valid ``Cache-Control`` HTTP directive is valid in ``cache_control()``. Here's a full list:"
msgstr ""

#: ../../topics/cache.txt:1109
# 8ff75fc8317c459bb6c1f8605d1befd4
msgid "``public=True``"
msgstr ""

#: ../../topics/cache.txt:1110
# 1a0aba58146c4714a6ed261909520a10
msgid "``private=True``"
msgstr ""

#: ../../topics/cache.txt:1111
# e821463e47c64fcea9bcb705ce3b6e21
msgid "``no_cache=True``"
msgstr ""

#: ../../topics/cache.txt:1112
# 2b1722eef21e4820b205370eb8db0f66
msgid "``no_transform=True``"
msgstr ""

#: ../../topics/cache.txt:1113
# d6458db8445f46e58a67542a56515ebf
msgid "``must_revalidate=True``"
msgstr ""

#: ../../topics/cache.txt:1114
# 53e6e24f1821495087ec5c77da7b98bd
msgid "``proxy_revalidate=True``"
msgstr ""

#: ../../topics/cache.txt:1115
# 03a8a731858b4c6f8d7f020744de8994
msgid "``max_age=num_seconds``"
msgstr ""

#: ../../topics/cache.txt:1116
# 06169d4ace8b48c0a56ed532d6c31226
msgid "``s_maxage=num_seconds``"
msgstr ""

#: ../../topics/cache.txt:1118
# 2b68296632c040a88491cf116ca12a31
msgid "For explanation of Cache-Control HTTP directives, see the `Cache-Control spec`_."
msgstr ""

#: ../../topics/cache.txt:1120
# decffb5fd86d48b2a181cca19dfb9037
msgid "(Note that the caching middleware already sets the cache header's max-age with the value of the :setting:`CACHE_MIDDLEWARE_SECONDS` setting. If you use a custom ``max_age`` in a ``cache_control`` decorator, the decorator will take precedence, and the header values will be merged correctly.)"
msgstr ""

#: ../../topics/cache.txt:1125
# 28121f950e9643549f8ad688626e41fd
msgid "If you want to use headers to disable caching altogether, ``django.views.decorators.cache.never_cache`` is a view decorator that adds headers to ensure the response won't be cached by browsers or other caches. Example::"
msgstr ""

#: ../../topics/cache.txt:1139
# 40650df8470c486aafae4a0f09220a8d
msgid "Other optimizations"
msgstr ""

#: ../../topics/cache.txt:1141
# 6033fdb486de41ec8e28a24d47bbf41f
msgid "Django comes with a few other pieces of middleware that can help optimize your site's performance:"
msgstr ""

#: ../../topics/cache.txt:1144
# 088274ef4b404a45aa03717fdf055203
msgid "``django.middleware.http.ConditionalGetMiddleware`` adds support for modern browsers to conditionally GET responses based on the ``ETag`` and ``Last-Modified`` headers."
msgstr ""

#: ../../topics/cache.txt:1148
# 7ade504e85694152a77ba33a03ef0a17
msgid ":class:`django.middleware.gzip.GZipMiddleware` compresses responses for all modern browsers, saving bandwidth and transfer time."
msgstr ""

#: ../../topics/cache.txt:1152
# b35bd9aefae441409df60aa289a0e126
msgid "Order of MIDDLEWARE_CLASSES"
msgstr ""

#: ../../topics/cache.txt:1154
# a5c28ad697fc40f592d4f369f4a44f86
msgid "If you use caching middleware, it's important to put each half in the right place within the :setting:`MIDDLEWARE_CLASSES` setting. That's because the cache middleware needs to know which headers by which to vary the cache storage. Middleware always adds something to the ``Vary`` response header when it can."
msgstr ""

#: ../../topics/cache.txt:1159
# a7ebdda54e694653a1eb4c7767959ebc
msgid "``UpdateCacheMiddleware`` runs during the response phase, where middleware is run in reverse order, so an item at the top of the list runs *last* during the response phase. Thus, you need to make sure that ``UpdateCacheMiddleware`` appears *before* any other middleware that might add something to the ``Vary`` header. The following middleware modules do so:"
msgstr ""

#: ../../topics/cache.txt:1165
# 87a4e4c1ea394cdcb6ab03c6cfce5e5b
msgid "``SessionMiddleware`` adds ``Cookie``"
msgstr ""

#: ../../topics/cache.txt:1166
# b62fa7040094465cb9fc92be17df88da
msgid "``GZipMiddleware`` adds ``Accept-Encoding``"
msgstr ""

#: ../../topics/cache.txt:1167
# 3b85f9f345ee43b1adecdd931546e86d
msgid "``LocaleMiddleware`` adds ``Accept-Language``"
msgstr ""

#: ../../topics/cache.txt:1169
# 60a5b7f995aa4ababd2362d010e3deac
msgid "``FetchFromCacheMiddleware``, on the other hand, runs during the request phase, where middleware is applied first-to-last, so an item at the top of the list runs *first* during the request phase. The ``FetchFromCacheMiddleware`` also needs to run after other middleware updates the ``Vary`` header, so ``FetchFromCacheMiddleware`` must be *after* any item that does so."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:5
# 2ec710a849424828ae8f62f976f85c25
msgid "Class-based generic views"
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:7
# cd50b2d1a2ad472aaf9c50f8322ed529
msgid "Writing Web applications can be monotonous, because we repeat certain patterns again and again. Django tries to take away some of that monotony at the model and template layers, but Web developers also experience this boredom at the view level."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:12
# cdcce2ce2163430d81f36201ff29bb8b
msgid "Django's *generic views* were developed to ease that pain. They take certain common idioms and patterns found in view development and abstract them so that you can quickly write common views of data without having to write too much code."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:17
# 01bcbc48486d40979d28fb7878cb750f
msgid "We can recognize certain common tasks, like displaying a list of objects, and write code that displays a list of *any* object. Then the model in question can be passed as an extra argument to the URLconf."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:21
# 9076ba1cfd5b4fa0af7fb9a065e8aec9
msgid "Django ships with generic views to do the following:"
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:23
# 6b95d7d5ddc740e9a5d9cd85632afd91
msgid "Display list and detail pages for a single object. If we were creating an application to manage conferences then a ``TalkListView`` and a ``RegisteredUserListView`` would be examples of list views. A single talk page is an example of what we call a \"detail\" view."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:28
# 31f0618bd19148ee8d02298416ed6282
msgid "Present date-based objects in year/month/day archive pages, associated detail, and \"latest\" pages."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:31
# ecde8fdde3124254be2979e10451b57c
msgid "Allow users to create, update, and delete objects -- with or without authorization."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:34
# 74b4f7c1e18c4bf08aef5e9e4ffaee8b
msgid "Taken together, these views provide easy interfaces to perform the most common tasks developers encounter."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:39
# ec80fc8902174fc0939f798d7a628dd2
msgid "Extending generic views"
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:41
# 47c6822e93fd421c9eb03cc82d09eedc
msgid "There's no question that using generic views can speed up development substantially. In most projects, however, there comes a moment when the generic views no longer suffice. Indeed, the most common question asked by new Django developers is how to make generic views handle a wider array of situations."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:47
# a31591e5a0a64e9c88a0354abc2530d6
msgid "This is one of the reasons generic views were redesigned for the 1.3 release - previously, they were just view functions with a bewildering array of options; now, rather than passing in a large amount of configuration in the URLconf, the recommended way to extend generic views is to subclass them, and override their attributes or methods."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:53
# fd6d81a8dcef4d18a524db25f553b87e
msgid "That said, generic views will have a limit. If you find you're struggling to implement your view as a subclass of a generic view, then you may find it more effective to write just the code you need, using your own class-based or functional views."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:58
# 59b0fe42e4b7485b9d97affcc852b1b6
msgid "More examples of generic views are available in some third party applications, or you could write your own as needed."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:63
# ae3a2d1dedc04c63bd7aae8c9bd24e37
msgid "Generic views of objects"
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:65
# fd7a7d66c72841c88fa99ae740d9f8dd
msgid ":class:`~django.views.generic.base.TemplateView` certainly is useful, but Django's generic views really shine when it comes to presenting views of your database content. Because it's such a common task, Django comes with a handful of built-in generic views that make generating list and detail views of objects incredibly easy."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:71
# 7c673e7687414277aab3a2fac99a4d1b
msgid "Let's start by looking at some examples of showing a list of objects or an individual object."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:76
# 1ab5f229661e4d53823cdef8e6700862
msgid "We'll be using these models::"
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:101
# 2768b8668c4844239e500d82ff460441
msgid "Now we need to define a view::"
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:110
# abe27a8c11784f8f8bf04e327a22b7af
msgid "Finally hook that view into your urls::"
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:120
# d8916bb385e64006a03b35ff57c64e83
msgid "That's all the Python code we need to write. We still need to write a template, however. We could explicitly tell the view which template to use by adding a ``template_name`` attribute to the view, but in the absence of an explicit template Django will infer one from the object's name. In this case, the inferred template will be ``\"books/publisher_list.html\"`` -- the \"books\" part comes from the name of the app that defines the model, while the \"publisher\" bit is just the lowercased version of the model's name."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:130
# 43382318e8e54608940aeb32566151d0
msgid "Thus, when (for example) the :class:`django.template.loaders.app_directories.Loader` template loader is enabled in :setting:`TEMPLATE_LOADERS`, a template location could be: /path/to/project/books/templates/books/publisher_list.html"
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:137
# bf7cf0c3d7c04b95b46911f4d4a44d84
msgid "This template will be rendered against a context containing a variable called ``object_list`` that contains all the publisher objects. A very simple template might look like the following::"
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:152
# 39fde1b62b0a4ca1bc55f3e80e1959f6
msgid "That's really all there is to it. All the cool features of generic views come from changing the attributes set on the generic view. The :doc:`generic views reference</ref/class-based-views/index>` documents all the generic views and their options in detail; the rest of this document will consider some of the common ways you might customize and extend generic views."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:160
# 80d9aa465ba848999534a8816a8d4d4a
msgid "Making \"friendly\" template contexts"
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:164
# 64cdf0fb8f574621bf63f4dae9bafdd1
msgid "You might have noticed that our sample publisher list template stores all the publishers in a variable named ``object_list``. While this works just fine, it isn't all that \"friendly\" to template authors: they have to \"just know\" that they're dealing with publishers here."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:169
# c7c0c81294494f8a989e55fb454f6004
msgid "Well, if you're dealing with a model object, this is already done for you. When you are dealing with an object or queryset, Django is able to populate the context using the lower cased version of the model class' name. This is provided in addition to the default ``object_list`` entry, but contains exactly the same data, i.e. ``publisher_list``."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:175
# d35e6fa1046041658767e32e48e218cd
msgid "If this still isn't a good match, you can manually set the name of the context variable. The ``context_object_name`` attribute on a generic view specifies the context variable to use::"
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:187
# 85bde74739de4f9291e13d9338a0fc9e
msgid "Providing a useful ``context_object_name`` is always a good idea. Your coworkers who design templates will thank you."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:192
# f6e87cbdf49f4616bd04a33e4dedce06
msgid "Adding extra context"
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:194
# 4a80dca73581482dafe38eb9d0f52ac7
msgid "Often you simply need to present some extra information beyond that provided by the generic view. For example, think of showing a list of all the books on each publisher detail page. The :class:`~django.views.generic.detail.DetailView` generic view provides the publisher to the context, but how do we get additional information in that template."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:201
# 8c9dc69006854100a4e90222788e2661
msgid "However, there is; you can subclass :class:`~django.views.generic.detail.DetailView` and provide your own implementation of the ``get_context_data`` method. The default implementation of this that comes with :class:`~django.views.generic.detail.DetailView` simply adds in the object being displayed to the template, but you can override it to send more::"
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:225
# 5be2bb1c1a4d4f159c66cfd5207a5ee7
msgid "Generally, get_context_data will merge the context data of all parent classes with those of the current class. To preserve this behavior in your own classes where you want to alter the context, you should be sure to call get_context_data on the super class. When no two classes try to define the same key, this will give the expected results. However if any class attempts to override a key after parent classes have set it (after the call to super), any children of that class will also need to explictly set it after super if they want to be sure to override all parents. If you're having trouble, review the method resolution order of your view."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:238
# bd174954ea054554bd8791d65f1af0ce
msgid "Viewing subsets of objects"
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:240
# d30d65cb43714d4e9ed232147c19bf62
msgid "Now let's take a closer look at the ``model`` argument we've been using all along. The ``model`` argument, which specifies the database model that the view will operate upon, is available on all the generic views that operate on a single object or a collection of objects. However, the ``model`` argument is not the only way to specify the objects that the view will operate upon -- you can also specify the list of objects using the ``queryset`` argument::"
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:256
# 443cdf4c6c694546a153e4a5c1930fda
msgid "Specifying ``model = Publisher`` is really just shorthand for saying ``queryset = Publisher.objects.all()``. However, by using ``queryset`` to define a filtered list of objects you can be more specific about the objects that will be visible in the view (see :doc:`/topics/db/queries` for more information about :class:`~django.db.models.query.QuerySet` objects, and see the :doc:`class-based views reference </ref/class-based-views/index>` for the complete details)."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:264
# f4271a6c279f4f5db1dec2e2234c49b6
msgid "To pick a simple example, we might want to order a list of books by publication date, with the most recent first::"
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:274
# e2a1fb54bce14b9b83bb9f318dd54804
msgid "That's a pretty simple example, but it illustrates the idea nicely. Of course, you'll usually want to do more than just reorder objects. If you want to present a list of books by a particular publisher, you can use the same technique::"
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:288
# 7da8c10838c84626a2fc35f6d853a765
msgid "Notice that along with a filtered ``queryset``, we're also using a custom template name. If we didn't, the generic view would use the same template as the \"vanilla\" object list, which might not be what we want."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:292
# e5ed6cc40a6a4e63bf176f44cdb9062b
msgid "Also notice that this isn't a very elegant way of doing publisher-specific books. If we want to add another publisher page, we'd need another handful of lines in the URLconf, and more than a few publishers would get unreasonable. We'll deal with this problem in the next section."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:299
# fc173b4055d64bf7b459b697d09b995d
msgid "If you get a 404 when requesting ``/books/acme/``, check to ensure you actually have a Publisher with the name 'ACME Publishing'.  Generic views have an ``allow_empty`` parameter for this case.  See the :doc:`class-based-views reference</ref/class-based-views/index>` for more details."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:307
# 353b4cbee1dd4445909fb9f4ae1105ae
msgid "Dynamic filtering"
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:309
# d88df91642af4b0c9af5ffaeadf467db
msgid "Another common need is to filter down the objects given in a list page by some key in the URL. Earlier we hard-coded the publisher's name in the URLconf, but what if we wanted to write a view that displayed all the books by some arbitrary publisher?"
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:314
# d3ea1aea110049e1bee69b05655cc913
msgid "Handily, the ``ListView`` has a :meth:`~django.views.generic.list.MultipleObjectMixin.get_queryset` method we can override. Previously, it has just been returning the value of the ``queryset`` attribute, but now we can add more logic."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:319
# b85623f551694c62a88aae81cd74b077
msgid "The key part to making this work is that when class-based views are called, various useful things are stored on ``self``; as well as the request (``self.request``) this includes the positional (``self.args``) and name-based (``self.kwargs``) arguments captured according to the URLconf."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:324
# 1f6af9a7b5aa43aeb52cd6b90e174481
msgid "Here, we have a URLconf with a single captured group::"
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:333
# c50cdc071c5443c49a92f37901b542d3
msgid "Next, we'll write the ``PublisherBookList`` view itself::"
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:348
# 6a921d6e97b145b3bfdea70bf1740452
msgid "As you can see, it's quite easy to add more logic to the queryset selection; if we wanted, we could use ``self.request.user`` to filter using the current user, or other more complex logic."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:352
# bd267945031841afbbca5cb3d2de812e
msgid "We can also add the publisher into the context at the same time, so we can use it in the template::"
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:367
# 3f05119099714961839dce76f928eed5
msgid "Performing extra work"
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:369
# 091a6784b05040d3a8bf5e89cf81e58f
msgid "The last common pattern we'll look at involves doing some extra work before or after calling the generic view."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:372
# 326b8593aba74b82921e021501c90d7f
msgid "Imagine we had a ``last_accessed`` field on our ``Author`` object that we were using to keep track of the last time anybody looked at that author::"
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:384
# b9195d8530d74ebfb7a964fc82601b48
msgid "The generic ``DetailView`` class, of course, wouldn't know anything about this field, but once again we could easily write a custom view to keep that field updated."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:388
# 91a09cae91344d0a970f1b018dda81b5
msgid "First, we'd need to add an author detail bit in the URLconf to point to a custom view::"
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:398
# d1280ca953fa4109a49acf87512405f3
msgid "Then we'd write our new view -- ``get_object`` is the method that retrieves the object -- so we simply override it and wrap the call::"
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:421
# 66b01d4947e04f978ee67f9a58105892
msgid "The URLconf here uses the named group ``pk`` - this name is the default name that ``DetailView`` uses to find the value of the primary key used to filter the queryset."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:425
# beb8013c4fd74c74829cc8d201987c64
msgid "If you want to call the group something else, you can set ``pk_url_kwarg`` on the view. More details can be found in the reference for :class:`~django.views.generic.detail.DetailView`"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:2
# 066ffa021eec424993133db717ce6bbc
msgid "Form handling with class-based views"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:4
# 2bf86b8765e94620b9345651b99fcb0c
msgid "Form processing generally has 3 paths:"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:6
# 9763b8dd651743e6a49faf3bbe355b4c
msgid "Initial GET (blank or prepopulated form)"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:7
# 0d1732be2c8b4b2fb864aecc9ad70e6c
msgid "POST with invalid data (typically redisplay form with errors)"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:8
# 3a3eed98d92549b49c75ca2139e46978
msgid "POST with valid data (process the data and typically redirect)"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:10
# 9ceff7022217499287f2ea250451d9e9
msgid "Implementing this yourself often results in a lot of repeated boilerplate code (see :ref:`Using a form in a view<using-a-form-in-a-view>`). To help avoid this, Django provides a collection of generic class-based views for form processing."
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:16
# 7eb068f60b014578a7376e3221e991a4
msgid "Basic Forms"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:18
# 5e3ef0db594742eb9b17628f4e449c3e
msgid "Given a simple contact form::"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:31
# 713ffb62e0ca47afa824a997e8e73bf8
msgid "The view can be constructed using a ``FormView``::"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:48
#: ../../topics/http/urls.txt:79
#: ../../topics/i18n/translation.txt:1548
# 6f193ba553ef4c4ea39e6310e95aab4e
# 31051b96f02a4b6ba8be570a97b35dda
# c78837929999464dba1cb3e6bda73bcc
msgid "Notes:"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:50
# 664f7ad4d7f74cdb8ec1144f0d05d51d
msgid "FormView inherits :class:`~django.views.generic.base.TemplateResponseMixin` so :attr:`~django.views.generic.base.TemplateResponseMixin.template_name` can be used here."
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:54
# a7c72f2f7257401e97538358596410f5
msgid "The default implementation for :meth:`~django.views.generic.edit.FormMixin.form_valid` simply redirects to the :attr:`~django.views.generic.edit.FormMixin.success_url`."
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:59
# ea28cc6cec2b4bb8bad30c7eb3fcfc22
msgid "Model Forms"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:61
# 06b402195f0044509dc45d43bf2b54c1
msgid "Generic views really shine when working with models.  These generic views will automatically create a :class:`~django.forms.ModelForm`, so long as they can work out which model class to use:"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:65
# ec0393be8349485394186d0808e3cd4f
msgid "If the :attr:`~django.views.generic.edit.ModelFormMixin.model` attribute is given, that model class will be used."
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:67
# c74523b2210140ea9de102033eeb2f2f
msgid "If :meth:`~django.views.generic.detail.SingleObjectMixin.get_object()` returns an object, the class of that object will be used."
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:69
# 0600e771b20345e4b16c39bb232744c6
msgid "If a :attr:`~django.views.generic.detail.SingleObjectMixin.queryset` is given, the model for that queryset will be used."
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:72
# 21b4bab89664459ba4020b6a306d7550
msgid "Model form views provide a :meth:`~django.views.generic.edit.ModelFormMixin.form_valid()` implementation that saves the model automatically.  You can override this if you have any special requirements; see below for examples."
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:77
# eaa97763a9b74cf9a2ccbacea9de6e6b
msgid "You don't even need to provide a ``success_url`` for :class:`~django.views.generic.edit.CreateView` or :class:`~django.views.generic.edit.UpdateView` - they will use :meth:`~django.db.models.Model.get_absolute_url()` on the model object if available."
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:82
# a08e72ef07a249a1959d1bcad231bed1
msgid "If you want to use a custom :class:`~django.forms.ModelForm` (for instance to add extra validation) simply set :attr:`~django.views.generic.edit.FormMixin.form_class` on your view."
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:87
# 0860b5f10e784bcbbcc0ad83b2170bf1
msgid "When specifying a custom form class, you must still specify the model, even though the :attr:`~django.views.generic.edit.FormMixin.form_class` may be a :class:`~django.forms.ModelForm`."
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:91
# cb11850f2add4b8bacb4326f116e966a
msgid "First we need to add :meth:`~django.db.models.Model.get_absolute_url()` to our ``Author`` class:"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:106
# 85fe4b5b15554a4baf28cdd2bea75bad
msgid "Then we can use :class:`CreateView` and friends to do the actual work. Notice how we're just configuring the generic class-based views here; we don't have to write any logic ourselves::"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:126
# 34d52751e11b4f3d90ef91d8c33677f0
msgid "We have to use :func:`~django.core.urlresolvers.reverse_lazy` here, not just ``reverse`` as the urls are not loaded when the file is imported."
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:129
# 7669b9933c34420ba2770b0996928ac7
msgid "Finally, we hook these new views into the URLconf::"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:144
# 62e9351a1f93400b849f6d0071662860
msgid "These views inherit :class:`~django.views.generic.detail.SingleObjectTemplateResponseMixin` which uses :attr:`~django.views.generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix` to construct the :attr:`~django.views.generic.base.TemplateResponseMixin.template_name` based on the model."
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:152
# c81989c83d914febb3eaefc7517c57d9
msgid "In this example:"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:154
# 360a44777df242538b34bbd7895195ab
msgid ":class:`CreateView` and :class:`UpdateView` use ``myapp/author_form.html``"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:155
# 7f224000ce434646a03d75fdac06a75f
msgid ":class:`DeleteView` uses ``myapp/author_confirm_delete.html``"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:157
# b7ad05e3c4aa4cec84b0c66b4497c266
msgid "If you wish to have separate templates for :class:`CreateView` and :class:`UpdateView`, you can set either :attr:`~django.views.generic.base.TemplateResponseMixin.template_name` or :attr:`~django.views.generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix` on your view class."
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:164
# 7cd4d0ca8f974285a2e103e8995c3a63
msgid "Models and request.user"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:166
# 4c0181e477fe4515a8c4a88762fad466
msgid "To track the user that created an object using a :class:`CreateView`, you can use a custom :class:`~django.forms.ModelForm` to do this. First, add the foreign key relation to the model::"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:180
# 72e09e624549434b90e06f74d3a80585
msgid "Create a custom :class:`~django.forms.ModelForm` in order to exclude the ``created_by`` field and prevent the user from editing it:"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:194
# 8475ebd2ca8045ec97179d02afe6bc08
msgid "In the view, use the custom :attr:`~django.views.generic.edit.FormMixin.form_class` and override :meth:`~django.views.generic.edit.ModelFormMixin.form_valid()` to add the user::"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:212
# 267b7a5dbcdc42009993070ea1e00066
msgid "Note that you'll need to :ref:`decorate this view<decorating-class-based-views>` using :func:`~django.contrib.auth.decorators.login_required`, or alternatively handle unauthorized users in the :meth:`~django.views.generic.edit.ModelFormMixin.form_valid()`."
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:219
# ed6e6922d56640e582e374bc3539b7ca
msgid "AJAX example"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:221
# 65ff050287a44304aebfb7fd9230f175
msgid "Here is a simple example showing how you might go about implementing a form that works for AJAX requests as well as 'normal' form POSTs::"
msgstr ""

#: ../../topics/class-based-views/index.txt:3
# 898ecc131c224e00b93b56bdbfdf62f9
msgid "Class-based views"
msgstr ""

#: ../../topics/class-based-views/index.txt:5
# be7acd85ddc84d0bb53472b5e19d3d36
msgid "A view is a callable which takes a request and returns a response. This can be more than just a function, and Django provides an example of some classes which can be used as views. These allow you to structure your views and reuse code by harnessing inheritance and mixins. There are also some generic views for simple tasks which we'll get to later, but you may want to design your own structure of reusable views which suits your use case. For full details, see the :doc:`class-based views reference documentation</ref/class-based-views/index>`."
msgstr ""

#: ../../topics/class-based-views/index.txt:23
# 3f2214ac83384a2e86593a099d07b8a6
msgid "Basic examples"
msgstr ""

#: ../../topics/class-based-views/index.txt:25
# 65b6abc198f04974bf70eac0b1d8649f
msgid "Django provides base view classes which will suit a wide range of applications. All views inherit from the :class:`~django.views.generic.base.View` class, which handles linking the view in to the URLs, HTTP method dispatching and other simple features. :class:`~django.views.generic.base.RedirectView` is for a simple HTTP redirect, and :class:`~django.views.generic.base.TemplateView` extends the base class to make it also render a template."
msgstr ""

#: ../../topics/class-based-views/index.txt:34
# 756652433fe24aa7a2104d84ccce0c76
msgid "Simple usage in your URLconf"
msgstr ""

#: ../../topics/class-based-views/index.txt:36
# c22c4a73fe2e476381193e5be99fba43
msgid "The simplest way to use generic views is to create them directly in your URLconf. If you're only changing a few simple attributes on a class-based view, you can simply pass them into the :meth:`~django.views.generic.base.View.as_view` method call itself::"
msgstr ""

#: ../../topics/class-based-views/index.txt:48
# 7f010a6632294227b9b261869b586527
msgid "Any arguments passed to :meth:`~django.views.generic.base.View.as_view` will override attributes set on the class. In this example, we set ``template_name`` on the ``TemplateView``. A similar overriding pattern can be used for the ``url`` attribute on :class:`~django.views.generic.base.RedirectView`."
msgstr ""

#: ../../topics/class-based-views/index.txt:55
# 1e1715aab6f945bb86ef20b03d51f424
msgid "Subclassing generic views"
msgstr ""

#: ../../topics/class-based-views/index.txt:57
# e53a8bbee46b4455a26c4a7a33f23d94
msgid "The second, more powerful way to use generic views is to inherit from an existing view and override attributes (such as the ``template_name``) or methods (such as ``get_context_data``) in your subclass to provide new values or methods. Consider, for example, a view that just displays one template, ``about.html``. Django has a generic view to do this - :class:`~django.views.generic.base.TemplateView` - so we can just subclass it, and override the template name::"
msgstr ""

#: ../../topics/class-based-views/index.txt:71
# 79ca553aae20435894988f7a9de5ba31
msgid "Then we just need to add this new view into our URLconf. `~django.views.generic.base.TemplateView` is a class, not a function, so we point the URL to the :meth:`~django.views.generic.base.View.as_view` class method instead, which provides a function-like entry to class-based views::"
msgstr ""

#: ../../topics/class-based-views/index.txt:85
# ec02ace8be1042fdbf71f76b9e7bcec4
msgid "For more information on how to use the built in generic views, consult the next topic on :doc:`generic class based views</topics/class-based-views/generic-display>`."
msgstr ""

#: ../../topics/class-based-views/index.txt:91
# 46c001b0db45418d8caf35ab98b21793
msgid "Supporting other HTTP methods"
msgstr ""

#: ../../topics/class-based-views/index.txt:93
# e721a5fd32a248baae53f1ced3c7e1f4
msgid "Suppose somebody wants to access our book library over HTTP using the views as an API. The API client would connect every now and then and download book data for the books published since last visit. But if no new books appeared since then, it is a waste of CPU time and bandwidth to fetch the books from the database, render a full response and send it to the client. It might be preferable to ask the API when the most recent book was published."
msgstr ""

#: ../../topics/class-based-views/index.txt:100
# 7aab8839a15f4c54974837bcc806c78e
msgid "We map the URL to book list view in the URLconf::"
msgstr ""

#: ../../topics/class-based-views/index.txt:109
# 265ae02f915640948500de7992f5cc4f
msgid "And the view::"
msgstr ""

#: ../../topics/class-based-views/index.txt:125
# f9cbea86730149a8acf659b405978f20
msgid "If the view is accessed from a ``GET`` request, a plain-and-simple object list is returned in the response (using ``book_list.html`` template). But if the client issues a ``HEAD`` request, the response has an empty body and the ``Last-Modified`` header indicates when the most recent book was published. Based on this information, the client may or may not download the full object list."
msgstr ""

#: ../../topics/class-based-views/intro.txt:3
# dc8bc38fdb7b410eb3dc9e2cffcee4f0
msgid "Introduction to Class-based views"
msgstr ""

#: ../../topics/class-based-views/intro.txt:5
# bcfb027a9ab64e838fb22076a1185e92
msgid "Class-based views provide an alternative way to implement views as Python objects instead of functions. They do not replace function-based views, but have certain differences and advantages when compared to function-based views:"
msgstr ""

#: ../../topics/class-based-views/intro.txt:9
# e4b15ade810a494fbfe64e0719d21442
msgid "Organization of code related to specific HTTP methods (``GET``, ``POST``, etc) can be addressed by separate methods instead of conditional branching."
msgstr ""

#: ../../topics/class-based-views/intro.txt:12
# f52430576b364f67870b65f8c19b53e5
msgid "Object oriented techniques such as mixins (multiple inheritance) can be used to factor code into reusable components."
msgstr ""

#: ../../topics/class-based-views/intro.txt:16
# b22549239119454da6d8e4acab4bdc02
msgid "The relationship and history of generic views, class-based views, and class-based generic views"
msgstr ""

#: ../../topics/class-based-views/intro.txt:18
# f99e1476d39d42d39b8baf8359cdaa80
msgid "In the beginning there was only the view function contract, Django passed your function an :class:`~django.http.HttpRequest` and expected back an :class:`~django.http.HttpResponse`. This was the extent of what Django provided."
msgstr ""

#: ../../topics/class-based-views/intro.txt:22
# 9f17ad0213bd4f468057819d73da2fc4
msgid "Early on it was recognized that there were common idioms and patterns found in view development. Function-based generic views were introduced to abstract these patterns and ease view development for the common cases."
msgstr ""

#: ../../topics/class-based-views/intro.txt:26
# fd13960589cd49c59bf0f498b461dc55
msgid "The problem with function-based generic views is that while they covered the simple cases well, there was no way to extend or customize them beyond some simple configuration options, limiting their usefulness in many real-world applications."
msgstr ""

#: ../../topics/class-based-views/intro.txt:31
# abcd3779ac5d4ab483af79ec0c900cea
msgid "Class-based generic views were created with the same objective as function-based generic views, to make view development easier. However, the way the solution is implemented, through the use of mixins, provides a toolkit that results in class-based generic views being more extensible and flexible than their function-based counterparts."
msgstr ""

#: ../../topics/class-based-views/intro.txt:37
# b965c988bd314161b277695d9f021015
msgid "If you have tried function based generic views in the past and found them lacking, you should not think of class-based generic views as simply a class-based equivalent, but rather as a fresh approach to solving the original problems that generic views were meant to solve."
msgstr ""

#: ../../topics/class-based-views/intro.txt:42
# ff41197c5f5f4cd9863f4feea955e096
msgid "The toolkit of base classes and mixins that Django uses to build class-based generic views are built for maximum flexibility, and as such have many hooks in the form of default method implementations and attributes that you are unlikely to be concerned with in the simplest use cases. For example, instead of limiting you to a class based attribute for ``form_class``, the implementation uses a ``get_form`` method, which calls a ``get_form_class`` method, which in its default implementation just returns the ``form_class`` attribute of the class. This gives you several options for specifying what form to use, from a simple attribute, to a fully dynamic, callable hook. These options seem to add hollow complexity for simple situations, but without them, more advanced designs would be limited."
msgstr ""

#: ../../topics/class-based-views/intro.txt:55
# 851816f383ec44559c356d6f77b44e2e
msgid "Using class-based views"
msgstr ""

#: ../../topics/class-based-views/intro.txt:57
# ef3479a613f84398bad237d5033d116a
msgid "At its core, a class-based view allows you to respond to different HTTP request methods with different class instance methods, instead of with conditionally branching code inside a single view function."
msgstr ""

#: ../../topics/class-based-views/intro.txt:61
# 1c08213319bc418eb666b6103d908c80
msgid "So where the code to handle HTTP ``GET`` in a view function would look something like::"
msgstr ""

#: ../../topics/class-based-views/intro.txt:71
# f41abe8de0b54dd7816eb36778c9aa22
msgid "In a class-based view, this would become::"
msgstr ""

#: ../../topics/class-based-views/intro.txt:81
# 192be43d40ce4805b39b9dcf21f6df59
msgid "Because Django's URL resolver expects to send the request and associated arguments to a callable function, not a class, class-based views have an :meth:`~django.views.generic.base.View.as_view` class method which serves as the callable entry point to your class. The ``as_view`` entry point creates an instance of your class and calls its :meth:`~django.views.generic.base.View.dispatch` method. ``dispatch`` looks at the request to determine whether it is a ``GET``, ``POST``, etc, and relays the request to a matching method if one is defined, or raises :class:`~django.http.HttpResponseNotAllowed` if not::"
msgstr ""

#: ../../topics/class-based-views/intro.txt:100
# b22177093f994ebab2c6ee01d13540fa
msgid "It is worth noting that what your method returns is identical to what you return from a function-based view, namely some form of :class:`~django.http.HttpResponse`. This means that :doc:`http shortcuts </topics/http/shortcuts>` or :class:`~django.template.response.TemplateResponse` objects are valid to use inside a class-based view."
msgstr ""

#: ../../topics/class-based-views/intro.txt:107
# a5e49e84eade4431a51a0b766f37e895
msgid "While a minimal class-based view does not require any class attributes to perform its job, class attributes are useful in many class-based designs, and there are two ways to configure or set class attributes."
msgstr ""

#: ../../topics/class-based-views/intro.txt:111
# a8bffe12834945d0b6d1cc4ee7ff3999
msgid "The first is the standard Python way of subclassing and overriding attributes and methods in the subclass. So that if your parent class had an attribute ``greeting`` like this::"
msgstr ""

#: ../../topics/class-based-views/intro.txt:124
# f7ae5754c8a54cfaaf5c26f09cb4019c
msgid "You can override that in a subclass::"
msgstr ""

#: ../../topics/class-based-views/intro.txt:129
# 03dfba04a5fa4a2cb42ef6fa20690bf2
msgid "Another option is to configure class attributes as keyword arguments to the :meth:`~django.views.generic.base.View.as_view` call in the URLconf::"
msgstr ""

#: ../../topics/class-based-views/intro.txt:138
# ce076c2dd1354f4cb56653185fc824cb
msgid "While your class is instantiated for each request dispatched to it, class attributes set through the :meth:`~django.views.generic.base.View.as_view` entry point are configured only once at the time your URLs are imported."
msgstr ""

#: ../../topics/class-based-views/intro.txt:144
# 57942bafda45450cac29993b7892e16c
msgid "Using mixins"
msgstr ""

#: ../../topics/class-based-views/intro.txt:146
# 6bca6e3a53154259803bc59c73125a8b
msgid "Mixins are a form of multiple inheritance where behaviors and attributes of multiple parent classes can be combined."
msgstr ""

#: ../../topics/class-based-views/intro.txt:149
# 4c8483e75cc64c0a942e7be488b55b40
msgid "For example, in the generic class-based views there is a mixin called :class:`~django.views.generic.base.TemplateResponseMixin` whose primary purpose is to define the method :meth:`~django.views.generic.base.TemplateResponseMixin.render_to_response`. When combined with the behavior of the :class:`~django.views.generic.base.View` base class, the result is a :class:`~django.views.generic.base.TemplateView` class that will dispatch requests to the appropriate matching methods (a behavior defined in the ``View`` base class), and that has a :meth:`~django.views.generic.base.TemplateResponseMixin.render_to_response` method that uses a :attr:`~django.views.generic.base.TemplateResponseMixin.template_name` attribute to return a :class:`~django.template.response.TemplateResponse` object (a behavior defined in the ``TemplateResponseMixin``)."
msgstr ""

#: ../../topics/class-based-views/intro.txt:163
# 74edc0b4140b4c969e04bbf033925115
msgid "Mixins are an excellent way of reusing code across multiple classes, but they come with some cost. The more your code is scattered among mixins, the harder it will be to read a child class and know what exactly it is doing, and the harder it will be to know which methods from which mixins to override if you are subclassing something that has a deep inheritance tree."
msgstr ""

#: ../../topics/class-based-views/intro.txt:169
# 969d4ea0101340b4b1971a76b0ab4e2d
msgid "Note also that you can only inherit from one generic view - that is, only one parent class may inherit from :class:`~django.views.generic.base.View` and the rest (if any) should be mixins. Trying to inherit from more than one class that inherits from ``View`` - for example, trying to use a form at the top of a list and combining :class:`~django.views.generic.edit.ProcessFormView` and :class:`~django.views.generic.list.ListView` - won't work as expected."
msgstr ""

#: ../../topics/class-based-views/intro.txt:177
# 1f0bd6b7467e4ac58f884ac735f6e19b
msgid "Handling forms with class-based views"
msgstr ""

#: ../../topics/class-based-views/intro.txt:179
# 7bfbed160d3d46efad590ec15daa6827
msgid "A basic function-based view that handles forms may look something like this::"
msgstr ""

#: ../../topics/class-based-views/intro.txt:197
# 23c6b2ba4f2d4f398c8c3f628cfb7e40
msgid "A similar class-based view might look like::"
msgstr ""

#: ../../topics/class-based-views/intro.txt:221
# e7b093af67f04c4dbf2fd3d8ae063baf
msgid "This is a very simple case, but you can see that you would then have the option of customizing this view by overriding any of the class attributes, e.g. ``form_class``, via URLconf configuration, or subclassing and overriding one or more of the methods (or both!)."
msgstr ""

#: ../../topics/class-based-views/intro.txt:227
# cd97d12d66b1440ebb3ba5fe8e8ef322
msgid "Decorating class-based views"
msgstr ""

#: ../../topics/class-based-views/intro.txt:229
# 3662e7b059964638821cc890bdafb4fa
msgid "The extension of class-based views isn't limited to using mixins. You can use also use decorators. Since class-based views aren't functions, decorating them works differently depending on if you're using ``as_view`` or creating a subclass."
msgstr ""

#: ../../topics/class-based-views/intro.txt:235
# 6953908c7ecd4c61afcb04ab444a0a0c
msgid "Decorating in URLconf"
msgstr ""

#: ../../topics/class-based-views/intro.txt:237
# 582e005e367f4c28b205f899186260ff
msgid "The simplest way of decorating class-based views is to decorate the result of the :meth:`~django.views.generic.base.View.as_view` method. The easiest place to do this is in the URLconf where you deploy your view::"
msgstr ""

#: ../../topics/class-based-views/intro.txt:251
# 0ac4663aaaa24aedaf56be9e228eda55
msgid "This approach applies the decorator on a per-instance basis. If you want every instance of a view to be decorated, you need to take a different approach."
msgstr ""

#: ../../topics/class-based-views/intro.txt:258
# af81f309f80f45a4bb8389c6f176ba45
msgid "Decorating the class"
msgstr ""

#: ../../topics/class-based-views/intro.txt:260
# 4aadc07674ed4fb19af60c6f5dbdcdc2
msgid "To decorate every instance of a class-based view, you need to decorate the class definition itself. To do this you apply the decorator to the :meth:`~django.views.generic.base.View.dispatch` method of the class."
msgstr ""

#: ../../topics/class-based-views/intro.txt:264
# 7b83a28c150e4ae6be9b661ea58d75b7
msgid "A method on a class isn't quite the same as a standalone function, so you can't just apply a function decorator to the method -- you need to transform it into a method decorator first. The ``method_decorator`` decorator transforms a function decorator into a method decorator so that it can be used on an instance method. For example::"
msgstr ""

#: ../../topics/class-based-views/intro.txt:281
# 5b6324cb84494ca48bee4698cdc767e2
msgid "In this example, every instance of ``ProtectedView`` will have login protection."
msgstr ""

#: ../../topics/class-based-views/intro.txt:286
# c20da8f3ac8d4f75a5b308e82b86f823
msgid "``method_decorator`` passes ``*args`` and ``**kwargs`` as parameters to the decorated method on the class. If your method does not accept a compatible set of parameters it will raise a ``TypeError`` exception."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:3
# 12743c6f39ee4e76a0eee46b6454e18d
msgid "Using mixins with class-based views"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:7
# 57afb750bfeb44cf95b52c8772091193
msgid "This is an advanced topic. A working knowledge of :doc:`Django's class-based views<index>` is advised before exploring these techniques."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:11
# 9a0a0317467645a58fce1e6485eb1f54
msgid "Django's built-in class-based views provide a lot of functionality, but some of it you may want to use separately. For instance, you may want to write a view that renders a template to make the HTTP response, but you can't use :class:`~django.views.generic.base.TemplateView`; perhaps you need to render a template only on ``POST``, with ``GET`` doing something else entirely. While you could use :class:`~django.template.response.TemplateResponse` directly, this will likely result in duplicate code."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:21
# 9550d41db3c847b69c0edea2fa8cf599
msgid "For this reason, Django also provides a number of mixins that provide more discrete functionality. Template rendering, for instance, is encapsulated in the :class:`~django.views.generic.base.TemplateResponseMixin`. The Django reference documentation contains :doc:`full documentation of all the mixins</ref/class-based-views/mixins>`."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:29
# a4cb734a012642bbad07eee41c7e13bd
msgid "Context and template responses"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:31
# c27ca21af3c3433a899913bc05d97bf8
msgid "Two central mixins are provided that help in providing a consistent interface to working with templates in class-based views."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:35
# d0cfdc953c7a4a958967cfacb91190b1
msgid "Every built in view which returns a :class:`~django.template.response.TemplateResponse` will call the :meth:`~django.views.generic.base.TemplateResponseMixin.render_to_response` method that ``TemplateResponseMixin`` provides. Most of the time this will be called for you (for instance, it is called by the ``get()`` method implemented by both :class:`~django.views.generic.base.TemplateView` and :class:`~django.views.generic.detail.DetailView`); similarly, it's unlikely that you'll need to override it, although if you want your response to return something not rendered via a Django template then you'll want to do it. For an example of this, see the :ref:`JSONResponseMixin example <jsonresponsemixin-example>`."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:47
# 9c9d803e9d32490c866be59aeaad7ab7
msgid "``render_to_response`` itself calls :meth:`~django.views.generic.base.TemplateResponseMixin.get_template_names`, which by default will just look up :attr:`~django.views.generic.base.TemplateResponseMixin.template_name` on the class-based view; two other mixins (:class:`~django.views.generic.detail.SingleObjectTemplateResponseMixin` and :class:`~django.views.generic.list.MultipleObjectTemplateResponseMixin`) override this to provide more flexible defaults when dealing with actual objects."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:61
# 9d878994396a4cc18068474380720a99
msgid "Every built in view which needs context data, such as for rendering a template (including ``TemplateResponseMixin`` above), should call :meth:`~django.views.generic.base.ContextMixin.get_context_data` passing any data they want to ensure is in there as keyword arguments. ``get_context_data`` returns a dictionary; in ``ContextMixin`` it simply returns its keyword arguments, but it is common to override this to add more members to the dictionary."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:70
# 86b54db1798f434ba4560b653c54ea2c
msgid "Building up Django's generic class-based views"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:72
# 67b44580099e466f90d7a4fed1f9c4f2
msgid "Let's look at how two of Django's generic class-based views are built out of mixins providing discrete functionality. We'll consider :class:`~django.views.generic.detail.DetailView`, which renders a \"detail\" view of an object, and :class:`~django.views.generic.list.ListView`, which will render a list of objects, typically from a queryset, and optionally paginate them. This will introduce us to four mixins which between them provide useful functionality when working with either a single Django object, or multiple objects."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:82
# b9d4c837d41d426db02cbdfb543008f2
msgid "There are also mixins involved in the generic edit views (:class:`~django.views.generic.edit.FormView`, and the model-specific views :class:`~django.views.generic.edit.CreateView`, :class:`~django.views.generic.edit.UpdateView` and :class:`~django.views.generic.edit.DeleteView`), and in the date-based generic views. These are covered in the :doc:`mixin reference documentation</ref/class-based-views/mixins>`."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:92
# 95a3088dc0904fc9af1eef3e07c5ea67
msgid "DetailView: working with a single Django object"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:94
# 66653764bc414a24b7acdf70b780c499
msgid "To show the detail of an object, we basically need to do two things: we need to look up the object and then we need to make a :class:`~django.template.response.TemplateResponse` with a suitable template, and that object as context."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:99
# 97dac57b59814539ab2da390a34c384f
msgid "To get the object, :class:`~django.views.generic.detail.DetailView` relies on :class:`~django.views.generic.detail.SingleObjectMixin`, which provides a :meth:`~django.views.generic.detail.SingleObjectMixin.get_object` method that figures out the object based on the URL of the request (it looks for ``pk`` and ``slug`` keyword arguments as declared in the URLConf, and looks the object up either from the :attr:`~django.views.generic.detail.SingleObjectMixin.model` attribute on the view, or the :attr:`~django.views.generic.detail.SingleObjectMixin.queryset` attribute if that's provided). ``SingleObjectMixin`` also overrides :meth:`~django.views.generic.base.ContextMixin.get_context_data`, which is used across all Django's built in class-based views to supply context data for template renders."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:114
# 41b95b5f54f44d9d87276ada55a826ab
msgid "To then make a :class:`~django.template.response.TemplateResponse`, :class:`DetailView` uses :class:`~django.views.generic.detail.SingleObjectTemplateResponseMixin`, which extends :class:`~django.views.generic.base.TemplateResponseMixin`, overriding :meth:`~django.views.generic.base.TemplateResponseMixin.get_template_names()` as discussed above. It actually provides a fairly sophisticated set of options, but the main one that most people are going to use is ``<app_label>/<object_name>_detail.html``. The ``_detail`` part can be changed by setting :attr:`~django.views.generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix` on a subclass to something else. (For instance, the :doc:`generic edit views<generic-editing>` use ``_form`` for create and update views, and ``_confirm_delete`` for delete views.)"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:130
# c21933f857c04039a25df8201f382d50
msgid "ListView: working with many Django objects"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:132
# 34b5c8e80dba4c7b880192f4cd212a68
msgid "Lists of objects follow roughly the same pattern: we need a (possibly paginated) list of objects, typically a :class:`~django.db.models.query.QuerySet`, and then we need to make a :class:`~django.template.response.TemplateResponse` with a suitable template using that list of objects."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:138
# 55714e74e43545d1ac6f52b61fb0713a
msgid "To get the objects, :class:`~django.views.generic.list.ListView` uses :class:`~django.views.generic.list.MultipleObjectMixin`, which provides both :meth:`~django.views.generic.list.MultipleObjectMixin.get_queryset` and :meth:`~django.views.generic.list.MultipleObjectMixin.paginate_queryset`. Unlike with :class:`~django.views.generic.detail.SingleObjectMixin`, there's no need to key off parts of the URL to figure out the queryset to work with, so the default just uses the :attr:`~django.views.generic.list.MultipleObjectMixin.queryset` or :attr:`~django.views.generic.list.MultipleObjectMixin.model` attribute on the view class. A common reason to override :meth:`~django.views.generic.list.MultipleObjectMixin.get_queryset` here would be to dynamically vary the objects, such as depending on the current user or to exclude posts in the future for a blog."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:154
# c9227b21a7c34106846538aa7a1c95cf
msgid ":class:`~django.views.generic.list.MultipleObjectMixin` also overrides :meth:`~django.views.generic.base.ContextMixin.get_context_data` to include appropriate context variables for pagination (providing dummies if pagination is disabled). It relies on ``object_list`` being passed in as a keyword argument, which :class:`ListView` arranges for it."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:161
# 77af7c4435e2480cbea8fa12634d80b5
msgid "To make a :class:`~django.template.response.TemplateResponse`, :class:`ListView` then uses :class:`~django.views.generic.list.MultipleObjectTemplateResponseMixin`; as with :class:`~django.views.generic.detail.SingleObjectTemplateResponseMixin` above, this overrides ``get_template_names()`` to provide :meth:`a range of options <django.views.generic.list.MultipleObjectTemplateResponseMixin>`, with the most commonly-used being ``<app_label>/<object_name>_list.html``, with the ``_list`` part again being taken from the :attr:`~django.views.generic.list.MultipleObjectTemplateResponseMixin.template_name_suffix` attribute. (The date based generic views use suffixes such as ``_archive``, ``_archive_year`` and so on to use different templates for the various specialised date-based list views.)"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:176
# 346f1b8f1f0c4293b9a5493e066a15e3
msgid "Using Django's class-based view mixins"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:178
# 18414859cad34a29a42f3f2d85257454
msgid "Now we've seen how Django's generic class-based views use the provided mixins, let's look at other ways we can combine them. Of course we're still going to be combining them with either built-in class-based views, or other generic class-based views, but there are a range of rarer problems you can solve than are provided for by Django out of the box."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:187
# 9d6cc5efcf3b4931ac7bcc830f207209
msgid "Not all mixins can be used together, and not all generic class based views can be used with all other mixins. Here we present a few examples that do work; if you want to bring together other functionality then you'll have to consider interactions between attributes and methods that overlap between the different classes you're using, and how `method resolution order`_ will affect which versions of the methods will be called in what order."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:195
# d01252bb4f0d4e159dc97bd0762232cc
msgid "The reference documentation for Django's :doc:`class-based views</ref/class-based-views/index>` and :doc:`class-based view mixins</ref/class-based-views/mixins>` will help you in understanding which attributes and methods are likely to cause conflict between different classes and mixins."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:201
# c1212840f47444f7b2f745214195d2ae
msgid "If in doubt, it's often better to back off and base your work on :class:`View` or :class:`TemplateView`, perhaps with :class:`~django.views.generic.detail.SingleObjectMixin` and :class:`~django.views.generic.list.MultipleObjectMixin`. Although you will probably end up writing more code, it is more likely to be clearly understandable to someone else coming to it later, and with fewer interactions to worry about you will save yourself some thinking. (Of course, you can always dip into Django's implementation of the generic class based views for inspiration on how to tackle problems.)"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:215
# 41f035d65c9d4c4d86e9df27b7592b27
msgid "Using SingleObjectMixin with View"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:217
# 88ef52f5f7d44be49bb542a7220cf39e
msgid "If we want to write a simple class-based view that responds only to ``POST``, we'll subclass :class:`~django.views.generic.base.View` and write a ``post()`` method in the subclass. However if we want our processing to work on a particular object, identified from the URL, we'll want the functionality provided by :class:`~django.views.generic.detail.SingleObjectMixin`."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:224
# 1e1e31ea0da84e0eb5ecc1d6ac3642fb
msgid "We'll demonstrate this with the publisher modelling we used in the :doc:`generic class-based views introduction<generic-display>`."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:250
# ec3dcafca5c14d84b4b7e732b050c22c
msgid "In practice you'd probably want to record the interest in a key-value store rather than in a relational database, so we've left that bit out. The only bit of the view that needs to worry about using :class:`~django.views.generic.detail.SingleObjectMixin` is where we want to look up the author we're interested in, which it just does with a simple call to ``self.get_object()``. Everything else is taken care of for us by the mixin."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:258
# 1c8f29b3eefb48ea88eab24a4d5864f3
msgid "We can hook this into our URLs easily enough::"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:268
# 3f556c8d03c643aca8bda2f48ea5ae27
msgid "Note the ``pk`` named group, which :meth:`~django.views.generic.detail.SingleObjectMixin.get_object` uses to look up the ``Author`` instance. You could also use a slug, or any of the other features of :class:`~django.views.generic.detail.SingleObjectMixin`."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:275
# 60662b49663d4accbf739f2f95efa0a3
msgid "Using SingleObjectMixin with ListView"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:277
# 5952c85edfe440cb8239c4f2a459bab2
msgid ":class:`~django.views.generic.list.ListView` provides built-in pagination, but you might want to paginate a list of objects that are all linked (by a foreign key) to another object. In our publishing example, you might want to paginate through all the books by a particular publisher."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:283
# bb884c3ce8784afca2cff2a002ab9474
msgid "One way to do this is to combine :class:`ListView` with :class:`~django.views.generic.detail.SingleObjectMixin`, so that the queryset for the paginated list of books can hang off the publisher found as the single object. In order to do this, we need to have two different querysets:"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:289
# 440962ebabe94ab587781bdf24840385
msgid "We'll set that up directly when we call ``get_object()``."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:292
# 26982d49210f4c4c977edeba2251fe3a
msgid "We'll figure that out ourselves in ``get_queryset()`` so we can take into account the ``Publisher`` we're looking at."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:297
# 52f53da4b59f4bf183765c039908432e
msgid "We have to think carefully about ``get_context_data()``. Since both :class:`~django.views.generic.detail.SingleObjectMixin` and :class:`ListView` will put things in the context data under the value of ``context_object_name`` if it's set, we'll instead explictly ensure the Publisher is in the context data. :class:`ListView` will add in the suitable ``page_obj`` and ``paginator`` for us providing we remember to call ``super()``."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:306
# 5ab41a63f15d46ddba35923f180221dd
msgid "Now we can write a new ``PublisherDetail``::"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:324
# 77b4a87b066a469a9a98d1bad3116fb0
msgid "Notice how we set ``self.object`` within ``get_queryset()`` so we can use it again later in ``get_context_data()``. If you don't set ``template_name``, the template will default to the normal :class:`ListView` choice, which in this case would be ``\"books/book_list.html\"`` because it's a list of books; :class:`ListView` knows nothing about :class:`~django.views.generic.detail.SingleObjectMixin`, so it doesn't have any clue this view is anything to do with a Publisher."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:335
# 510a6cac61bd49c0830007c45a7e676c
msgid "The ``paginate_by`` is deliberately small in the example so you don't have to create lots of books to see the pagination working! Here's the template you'd want to use::"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:368
# 5489290357ac47409df5e667729bf730
msgid "Avoid anything more complex"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:370
# c34a54d65afb4b55b655aff248a8c970
msgid "Generally you can use :class:`~django.views.generic.base.TemplateResponseMixin` and :class:`~django.views.generic.detail.SingleObjectMixin` when you need their functionality. As shown above, with a bit of care you can even combine ``SingleObjectMixin`` with :class:`~django.views.generic.list.ListView`. However things get increasingly complex as you try to do so, and a good rule of thumb is:"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:380
# daef193fa3d5454786373e9bf29fb639
msgid "Each of your views should use only mixins or views from one of the groups of generic class-based views: :doc:`detail, list<generic-display>`, :doc:`editing<generic-editing>` and date. For example it's fine to combine :class:`TemplateView` (built in view) with :class:`~django.views.generic.list.MultipleObjectMixin` (generic list), but you're likely to have problems combining ``SingleObjectMixin`` (generic detail) with ``MultipleObjectMixin`` (generic list)."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:389
# 25acff0f3af54dee93f8a194769e22e9
msgid "To show what happens when you try to get more sophisticated, we show an example that sacrifices readability and maintainability when there is a simpler solution. First, let's look at a naive attempt to combine :class:`~django.views.generic.detail.DetailView` with :class:`~django.views.generic.edit.FormMixin` to enable use to ``POST`` a Django :class:`~django.forms.Form` to the same URL as we're displaying an object using :class:`DetailView`."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:398
# fb74305cd3464e7ca3937880ed8a13e1
msgid "Using FormMixin with DetailView"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:400
# d41eae1d86bc4552a987953012e40230
msgid "Think back to our earlier example of using :class:`View` and :class:`~django.views.generic.detail.SingleObjectMixin` together. We were recording a user's interest in a particular author; say now that we want to let them leave a message saying why they like them. Again, let's assume we're not going to store this in a relational database but instead in something more esoteric that we won't worry about here."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:407
# 7b679ea196b04834aff0a3f0f6f8f69e
msgid "At this point it's natural to reach for a :class:`~django.forms.Form` to encapsulate the information sent from the user's browser to Django. Say also that we're heavily invested in `REST`_, so we want to use the same URL for displaying the author as for capturing the message from the user. Let's rewrite our ``AuthorDetailView`` to do that."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:415
# bb70fbe4cb3446f78672946c091dff6d
msgid "We'll keep the ``GET`` handling from :class:`DetailView`, although we'll have to add a :class:`~django.forms.Form` into the context data so we can render it in the template. We'll also want to pull in form processing from :class:`~django.views.generic.edit.FormMixin`, and write a bit of code so that on ``POST`` the form gets called appropriately."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:423
# de9482dd5ff94817acaf14f691f2ea82
msgid "We use :class:`~django.views.generic.edit.FormMixin` and implement ``post()`` ourselves rather than try to mix :class:`DetailView` with :class:`FormView` (which provides a suitable ``post()`` already) because both of the views implement ``get()``, and things would get much more confusing."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:431
# 9a058c59510742ab86ad259635f15aec
msgid "Our new ``AuthorDetail`` looks like this::"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:481
# 71dc7292260646959ea858467c93c6da
msgid "``get_success_url()`` is just providing somewhere to redirect to, which gets used in the default implementation of ``form_valid()``. We have to provide our own ``post()`` as noted earlier, and override ``get_context_data()`` to make the :class:`~django.forms.Form` available in the context data."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:488
# d845467990cc46abba02e3886a2ef221
msgid "A better solution"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:490
# 2c7e00475afe4d09b807012114949191
msgid "It should be obvious that the number of subtle interactions between :class:`~django.views.generic.edit.FormMixin` and :class:`DetailView` is already testing our ability to manage things. It's unlikely you'd want to write this kind of class yourself."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:495
# 8e5d1a9d43274b4ab789337bf2f332c5
msgid "In this case, it would be fairly easy to just write the ``post()`` method yourself, keeping :class:`DetailView` as the only generic functionality, although writing :class:`~django.forms.Form` handling code involves a lot of duplication."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:500
# 41bc822b91a748b18859b2afe1bed33e
msgid "Alternatively, it would still be easier than the above approach to have a separate view for processing the form, which could use :class:`~django.views.generic.edit.FormView` distinct from :class:`DetailView` without concerns."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:506
# ceb3d6ab4da847b59e615df17b9d0d07
msgid "An alternative better solution"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:508
# e110401a24df4ce89bc69d9522e87ac2
msgid "What we're really trying to do here is to use two different class based views from the same URL. So why not do just that? We have a very clear division here: ``GET`` requests should get the :class:`DetailView` (with the :class:`~django.forms.Form` added to the context data), and ``POST`` requests should get the :class:`FormView`. Let's set up those views first."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:515
# a113c4ee98e74b1c820c063b4619a5ce
msgid "The ``AuthorDisplay`` view is almost the same as :ref:`when we first introduced AuthorDetail<generic-views-extra-work>`; we have to write our own ``get_context_data()`` to make the ``AuthorInterestForm`` available to the template. We'll skip the ``get_object()`` override from before for clarity."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:541
# bf800a4dbeda470593d43616c4c006e3
msgid "Then the ``AuthorInterest`` is a simple :class:`FormView`, but we have to bring in :class:`~django.views.generic.detail.SingleObjectMixin` so we can find the author we're talking about, and we have to remember to set ``template_name`` to ensure that form errors will render the same template as ``AuthorDisplay`` is using on ``GET``."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:576
# dbb15275c7744882850b677632711ac0
msgid "Finally we bring this together in a new ``AuthorDetail`` view. We already know that calling :meth:`~django.views.generic.base.View.as_view()` on a class-based view gives us something that behaves exactly like a function based view, so we can do that at the point we choose between the two subviews."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:581
# ce1d50ca0f524f4ea3d8c2acac5b0eae
msgid "You can of course pass through keyword arguments to :meth:`~django.views.generic.base.View.as_view()` in the same way you would in your URLconf, such as if you wanted the ``AuthorInterest`` behavior to also appear at another URL but using a different template."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:600
# 4a19283a30ea47858089bd91b1f54fbc
msgid "This approach can also be used with any other generic class-based views or your own class-based views inheriting directly from :class:`View` or :class:`TemplateView`, as it keeps the different views as separate as possible."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:608
# f411d07e017d45078e06e02fb05061f5
msgid "More than just HTML"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:610
# d116d97ed88b4c2e9e3cc60f85dad12c
msgid "Where class based views shine is when you want to do the same thing many times. Suppose you're writing an API, and every view should return JSON instead of rendered HTML."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:614
# a6437ecf5df740c7a823fa9a3a42a470
msgid "We can create a mixin class to use in all of our views, handling the conversion to JSON once."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:617
# 4e5986c4c81f415ab938a925eaa32338
msgid "For example, a simple JSON mixin might look something like this::"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:646
# aeeedaf0399e4cae97f0e8de96ff93e9
msgid "Now we mix this into the base TemplateView::"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:653
# eba938a7954a464eac5319c581b5f9b0
msgid "Equally we could use our mixin with one of the generic views. We can make our own version of :class:`~django.views.generic.detail.DetailView` by mixing ``JSONResponseMixin`` with the ``django.views.generic.detail.BaseDetailView`` -- (the :class:`~django.views.generic.detail.DetailView` before template rendering behavior has been mixed in)::"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:663
# a4c450bbbe8b433ba318c93361643a58
msgid "This view can then be deployed in the same way as any other :class:`~django.views.generic.detail.DetailView`, with exactly the same behavior -- except for the format of the response."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:667
# 943f66f1139d4118b3a959cd1899031d
msgid "If you want to be really adventurous, you could even mix a :class:`~django.views.generic.detail.DetailView` subclass that is able to return *both* HTML and JSON content, depending on some property of the HTTP request, such as a query argument or a HTTP header. Just mix in both the ``JSONResponseMixin`` and a :class:`~django.views.generic.detail.SingleObjectTemplateResponseMixin`, and override the implementation of :func:`~django.views.generic.base.TemplateResponseMixin.render_to_response()` to defer to the appropriate subclass depending on the type of response that the user requested::"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:686
# 2f9080b5ffd8422f84b9eed558811355
msgid "Because of the way that Python resolves method overloading, the local ``render_to_response()`` implementation will override the versions provided by ``JSONResponseMixin`` and :class:`~django.views.generic.detail.SingleObjectTemplateResponseMixin`."
msgstr ""

#: ../../topics/conditional-view-processing.txt:3
# 970c58f013db4e5a926c5f6702a795d5
msgid "Conditional View Processing"
msgstr ""

#: ../../topics/conditional-view-processing.txt:5
# 8e21e26369da4091a342c8c48ee15a85
msgid "HTTP clients can send a number of headers to tell the server about copies of a resource that they have already seen. This is commonly used when retrieving a Web page (using an HTTP ``GET`` request) to avoid sending all the data for something the client has already retrieved. However, the same headers can be used for all HTTP methods (``POST``, ``PUT``, ``DELETE``, etc)."
msgstr ""

#: ../../topics/conditional-view-processing.txt:11
# ab1390e7cbb34b1dbe3a49f869c0c15e
msgid "For each page (response) that Django sends back from a view, it might provide two HTTP headers: the ``ETag`` header and the ``Last-Modified`` header. These headers are optional on HTTP responses. They can be set by your view function, or you can rely on the :class:`~django.middleware.common.CommonMiddleware` middleware to set the ``ETag`` header."
msgstr ""

#: ../../topics/conditional-view-processing.txt:17
# b850dc96287d41c78e1989461ae875f4
msgid "When the client next requests the same resource, it might send along a header such as `If-modified-since`_, containing the date of the last modification time it was sent, or `If-none-match`_, containing the ``ETag`` it was sent. If the current version of the page matches the ``ETag`` sent by the client, or if the resource has not been modified, a 304 status code can be sent back, instead of a full response, telling the client that nothing has changed."
msgstr ""

#: ../../topics/conditional-view-processing.txt:27
# 8f08391aa5784175b97a464a88e559e7
msgid "When you need more fine-grained control you may use per-view conditional processing functions."
msgstr ""

#: ../../topics/conditional-view-processing.txt:33
# cf595bd71fdf4742a75eb3d1f6c469f4
msgid "The ``condition`` decorator"
msgstr ""

#: ../../topics/conditional-view-processing.txt:35
# 6b05a65707d5444ba31ee338247c047f
msgid "Sometimes (in fact, quite often) you can create functions to rapidly compute the ETag_ value or the last-modified time for a resource, **without** needing to do all the computations needed to construct the full view. Django can then use these functions to provide an \"early bailout\" option for the view processing. Telling the client that the content has not been modified since the last request, perhaps."
msgstr ""

#: ../../topics/conditional-view-processing.txt:44
# 3dd2c505dfdb43999c17237ba7025c43
msgid "These two functions are passed as parameters the ``django.views.decorators.http.condition`` decorator. This decorator uses the two functions (you only need to supply one, if you can't compute both quantities easily and quickly) to work out if the headers in the HTTP request match those on the resource. If they don't match, a new copy of the resource must be computed and your normal view is called."
msgstr ""

#: ../../topics/conditional-view-processing.txt:51
# 2c6ee1e117fe442aa121e5ebe8a8bcdb
msgid "The ``condition`` decorator's signature looks like this::"
msgstr ""

#: ../../topics/conditional-view-processing.txt:55
# 54752b5326ee437ab21fc77a1c0dc54d
msgid "The two functions, to compute the ETag and the last modified time, will be passed the incoming ``request`` object and the same parameters, in the same order, as the view function they are helping to wrap. The function passed ``last_modified_func`` should return a standard datetime value specifying the last time the resource was modified, or ``None`` if the resource doesn't exist. The function passed to the ``etag`` decorator should return a string representing the `Etag`_ for the resource, or ``None`` if it doesn't exist."
msgstr ""

#: ../../topics/conditional-view-processing.txt:63
# ae5e23130e7f4c2da609368d5f89f903
msgid "Using this feature usefully is probably best explained with an example. Suppose you have this pair of models, representing a simple blog system::"
msgstr ""

#: ../../topics/conditional-view-processing.txt:77
# b07c1fac10e4472fac9dedfc0c96c3c6
msgid "If the front page, displaying the latest blog entries, only changes when you add a new blog entry, you can compute the last modified time very quickly. You need the latest ``published`` date for every entry associated with that blog. One way to do this would be::"
msgstr ""

#: ../../topics/conditional-view-processing.txt:85
# fd92f61659ec45fb9e56808c47c58308
msgid "You can then use this function to provide early detection of an unchanged page for your front page view::"
msgstr ""

#: ../../topics/conditional-view-processing.txt:95
# da76df3e8b1843fba61995d96f487ed3
msgid "Shortcuts for only computing one value"
msgstr ""

#: ../../topics/conditional-view-processing.txt:97
# 71cdf627189c4de3ad6617d95bf734da
msgid "As a general rule, if you can provide functions to compute *both* the ETag and the last modified time, you should do so. You don't know which headers any given HTTP client will send you, so be prepared to handle both. However, sometimes only one value is easy to compute and Django provides decorators that handle only ETag or only last-modified computations."
msgstr ""

#: ../../topics/conditional-view-processing.txt:103
# a2a5e18a849a4bfcba1e5d5388410e51
msgid "The ``django.views.decorators.http.etag`` and ``django.views.decorators.http.last_modified`` decorators are passed the same type of functions as the ``condition`` decorator. Their signatures are::"
msgstr ""

#: ../../topics/conditional-view-processing.txt:110
# 5b7555f95aa54ee7a57ae97759902d39
msgid "We could write the earlier example, which only uses a last-modified function, using one of these decorators::"
msgstr ""

#: ../../topics/conditional-view-processing.txt:117
# f0d3cc61f33544da82b564e5dd7bbdc6
msgid "...or::"
msgstr ""

#: ../../topics/conditional-view-processing.txt:124
# 6bf0aa83324049859a13953472d8dba2
msgid "Use ``condition`` when testing both conditions"
msgstr ""

#: ../../topics/conditional-view-processing.txt:126
# a758b52a441343ae8c5f3ee883adf087
msgid "It might look nicer to some people to try and chain the ``etag`` and ``last_modified`` decorators if you want to test both preconditions. However, this would lead to incorrect behavior."
msgstr ""

#: ../../topics/conditional-view-processing.txt:140
# 5addfab8923d4655bc7ca8f32b0c8c00
msgid "The first decorator doesn't know anything about the second and might answer that the response is not modified even if the second decorators would determine otherwise. The ``condition`` decorator uses both callback functions simultaneously to work out the right action to take."
msgstr ""

#: ../../topics/conditional-view-processing.txt:146
# 12ceb971cb314ab7b8db0c041ef21e43
msgid "Using the decorators with other HTTP methods"
msgstr ""

#: ../../topics/conditional-view-processing.txt:148
# 4ad8dae6e2cc4b918bd8b038ef9fe3ce
msgid "The ``condition`` decorator is useful for more than only ``GET`` and ``HEAD`` requests (``HEAD`` requests are the same as ``GET`` in this situation). It can be used also to be used to provide checking for ``POST``, ``PUT`` and ``DELETE`` requests. In these situations, the idea isn't to return a \"not modified\" response, but to tell the client that the resource they are trying to change has been altered in the meantime."
msgstr ""

#: ../../topics/conditional-view-processing.txt:155
# fa754fa107e1472289179bb7569c61a8
msgid "For example, consider the following exchange between the client and server:"
msgstr ""

#: ../../topics/conditional-view-processing.txt:157
# dd3f71fae26a4571b390329225d9563c
msgid "Client requests ``/foo/``."
msgstr ""

#: ../../topics/conditional-view-processing.txt:158
# 19c81a3a604e47b0a04c1fcf263e3142
msgid "Server responds with some content with an ETag of ``\"abcd1234\"``."
msgstr ""

#: ../../topics/conditional-view-processing.txt:159
# c578cc0c61ef4b679dc9a07f907d9ba0
msgid "Client sends an HTTP ``PUT`` request to ``/foo/`` to update the resource. It also sends an ``If-Match: \"abcd1234\"`` header to specify the version it is trying to update."
msgstr ""

#: ../../topics/conditional-view-processing.txt:162
# b000b479319a4c5baca6cd227757c182
msgid "Server checks to see if the resource has changed, by computing the ETag the same way it does for a ``GET`` request (using the same function). If the resource *has* changed, it will return a 412 status code code, meaning \"precondition failed\"."
msgstr ""

#: ../../topics/conditional-view-processing.txt:166
# 188155a8ac0b47988ce2f675a08550c3
msgid "Client sends a ``GET`` request to ``/foo/``, after receiving a 412 response, to retrieve an updated version of the content before updating it."
msgstr ""

#: ../../topics/conditional-view-processing.txt:170
# 828e9a67e01b4a57ae0aac8eaafd8dd9
msgid "The important thing this example shows is that the same functions can be used to compute the ETag and last modification values in all situations. In fact, you **should** use the same functions, so that the same values are returned every time."
msgstr ""

#: ../../topics/conditional-view-processing.txt:176
# ea1a3ce40ec84defa18c88035798491a
msgid "Comparison with middleware conditional processing"
msgstr ""

#: ../../topics/conditional-view-processing.txt:178
# 41275cd446ca4485a9e7cd4f4f880445
msgid "You may notice that Django already provides simple and straightforward conditional ``GET`` handling via the :class:`django.middleware.http.ConditionalGetMiddleware` and :class:`~django.middleware.common.CommonMiddleware`. Whilst certainly being easy to use and suitable for many situations, those pieces of middleware functionality have limitations for advanced usage:"
msgstr ""

#: ../../topics/conditional-view-processing.txt:185
# e35c9b0bbebd4bca8dacc84e837ac3be
msgid "They are applied globally to all views in your project"
msgstr ""

#: ../../topics/conditional-view-processing.txt:186
# 2bdbf589351348c29be56d28b02a438a
msgid "They don't save you from generating the response itself, which may be expensive"
msgstr ""

#: ../../topics/conditional-view-processing.txt:188
# c5edf62ee0f64af5a7182ab3510e5f7a
msgid "They are only appropriate for HTTP ``GET`` requests."
msgstr ""

#: ../../topics/conditional-view-processing.txt:190
# 5be74836f84c4a5dbc296bcdd81c3e84
msgid "You should choose the most appropriate tool for your particular problem here. If you have a way to compute ETags and modification times quickly and if some view takes a while to generate the content, you should consider using the ``condition`` decorator described in this document. If everything already runs fairly quickly, stick to using the middleware and the amount of network traffic sent back to the clients will still be reduced if the view hasn't changed."
msgstr ""

#: ../../topics/db/aggregation.txt:3
# 3cdf6adf3e5f42d59828db11797ef709
msgid "Aggregation"
msgstr ""

#: ../../topics/db/aggregation.txt:7
# d7a1178963944ddd8ac6ca7848017fd5
msgid "The topic guide on :doc:`Django's database-abstraction API </topics/db/queries>` described the way that you can use Django queries that create, retrieve, update and delete individual objects. However, sometimes you will need to retrieve values that are derived by summarizing or *aggregating* a collection of objects. This topic guide describes the ways that aggregate values can be generated and returned using Django queries."
msgstr ""

#: ../../topics/db/aggregation.txt:14
# a08e68aa78b74864981c8d6aa9c6d170
msgid "Throughout this guide, we'll refer to the following models. These models are used to track the inventory for a series of online bookstores:"
msgstr ""

#: ../../topics/db/aggregation.txt:44
# a4d4150997be4ce1a5d204fa5fc74b5d
msgid "Cheat sheet"
msgstr ""

#: ../../topics/db/aggregation.txt:46
# cc9dd7d2b8ca4d78bb8ac9ededd4b870
msgid "In a hurry? Here's how to do common aggregate queries, assuming the models above:"
msgstr ""

#: ../../topics/db/aggregation.txt:85
# 14435a149d9944b182c3332eddd6a5d3
msgid "Generating aggregates over a QuerySet"
msgstr ""

#: ../../topics/db/aggregation.txt:87
# 7aec71fb1f32401b966c5244708d61df
msgid "Django provides two ways to generate aggregates. The first way is to generate summary values over an entire ``QuerySet``. For example, say you wanted to calculate the average price of all books available for sale. Django's query syntax provides a means for describing the set of all books::"
msgstr ""

#: ../../topics/db/aggregation.txt:94
# 1fd3280876d04b1aaf7c060b78635cdc
msgid "What we need is a way to calculate summary values over the objects that belong to this ``QuerySet``. This is done by appending an ``aggregate()`` clause onto the ``QuerySet``::"
msgstr ""

#: ../../topics/db/aggregation.txt:102
# 7662203019b14884882d85b018b994ae
msgid "The ``all()`` is redundant in this example, so this could be simplified to::"
msgstr ""

#: ../../topics/db/aggregation.txt:107
# 2a25b7a70f6e4e6480f6c736db24b93e
msgid "The argument to the ``aggregate()`` clause describes the aggregate value that we want to compute - in this case, the average of the ``price`` field on the ``Book`` model. A list of the aggregate functions that are available can be found in the :ref:`QuerySet reference <aggregation-functions>`."
msgstr ""

#: ../../topics/db/aggregation.txt:112
# f780c1c051f747868f58340c95e53e7c
msgid "``aggregate()`` is a terminal clause for a ``QuerySet`` that, when invoked, returns a dictionary of name-value pairs. The name is an identifier for the aggregate value; the value is the computed aggregate. The name is automatically generated from the name of the field and the aggregate function. If you want to manually specify a name for the aggregate value, you can do so by providing that name when you specify the aggregate clause::"
msgstr ""

#: ../../topics/db/aggregation.txt:122
# c8ccba3da7d146eea68b86f9f7f24069
msgid "If you want to generate more than one aggregate, you just add another argument to the ``aggregate()`` clause. So, if we also wanted to know the maximum and minimum price of all books, we would issue the query::"
msgstr ""

#: ../../topics/db/aggregation.txt:131
# b05bba171ba5470a88f3892937458645
msgid "Generating aggregates for each item in a QuerySet"
msgstr ""

#: ../../topics/db/aggregation.txt:133
# 661ec692773b4437ab21dc04e37253cd
msgid "The second way to generate summary values is to generate an independent summary for each object in a ``QuerySet``. For example, if you are retrieving a list of books, you may want to know how many authors contributed to each book. Each Book has a many-to-many relationship with the Author; we want to summarize this relationship for each book in the ``QuerySet``."
msgstr ""

#: ../../topics/db/aggregation.txt:139
# 8e681f2847b842bd9adc0f9c47ebd1b5
msgid "Per-object summaries can be generated using the ``annotate()`` clause. When an ``annotate()`` clause is specified, each object in the ``QuerySet`` will be annotated with the specified values."
msgstr ""

#: ../../topics/db/aggregation.txt:143
# 25dfd6561da44ac7a1ad8b287286039b
msgid "The syntax for these annotations is identical to that used for the ``aggregate()`` clause. Each argument to ``annotate()`` describes an aggregate that is to be calculated. For example, to annotate books with the number of authors:"
msgstr ""

#: ../../topics/db/aggregation.txt:163
# 939b7462db124a948684bd051342cc8c
msgid "As with ``aggregate()``, the name for the annotation is automatically derived from the name of the aggregate function and the name of the field being aggregated. You can override this default name by providing an alias when you specify the annotation::"
msgstr ""

#: ../../topics/db/aggregation.txt:174
# dda733531a61446d8c6189e0873cb974
msgid "Unlike ``aggregate()``, ``annotate()`` is *not* a terminal clause. The output of the ``annotate()`` clause is a ``QuerySet``; this ``QuerySet`` can be modified using any other ``QuerySet`` operation, including ``filter()``, ``order_by()``, or even additional calls to ``annotate()``."
msgstr ""

#: ../../topics/db/aggregation.txt:180
# d581c291fd1c4e5eb447bbd98a90e182
msgid "Joins and aggregates"
msgstr ""

#: ../../topics/db/aggregation.txt:182
# 916373619b7a4951a6d5f8a3063ec1a0
msgid "So far, we have dealt with aggregates over fields that belong to the model being queried. However, sometimes the value you want to aggregate will belong to a model that is related to the model you are querying."
msgstr ""

#: ../../topics/db/aggregation.txt:186
# dbeeba4b64ec4666ae9c9fe6efad73f0
msgid "When specifying the field to be aggregated in an aggregate function, Django will allow you to use the same :ref:`double underscore notation <field-lookups-intro>` that is used when referring to related fields in filters. Django will then handle any table joins that are required to retrieve and aggregate the related value."
msgstr ""

#: ../../topics/db/aggregation.txt:192
# b1e905bd555a4b0c8a262b74cacf20ba
msgid "For example, to find the price range of books offered in each store, you could use the annotation::"
msgstr ""

#: ../../topics/db/aggregation.txt:197
# 78e7de2be5844adba8d67ed50332cdcb
msgid "This tells Django to retrieve the ``Store`` model, join (through the many-to-many relationship) with the ``Book`` model, and aggregate on the price field of the book model to produce a minimum and maximum value."
msgstr ""

#: ../../topics/db/aggregation.txt:201
# 76a018e23e28468b9ae44d6bbb14563e
msgid "The same rules apply to the ``aggregate()`` clause. If you wanted to know the lowest and highest price of any book that is available for sale in a store, you could use the aggregate::"
msgstr ""

#: ../../topics/db/aggregation.txt:207
# cd993481c4d14b4e824d7a8247ca9cb8
msgid "Join chains can be as deep as you require. For example, to extract the age of the youngest author of any book available for sale, you could issue the query::"
msgstr ""

#: ../../topics/db/aggregation.txt:214
# e25271fd24c944618fd06fc10e67eb01
msgid "Following relationships backwards"
msgstr ""

#: ../../topics/db/aggregation.txt:216
# 061506f63dbf4fa58541ab208453f87c
msgid "In a way similar to :ref:`lookups-that-span-relationships`, aggregations and annotations on fields of models or models that are related to the one you are querying can include traversing \"reverse\" relationships. The lowercase name of related models and double-underscores are used here too."
msgstr ""

#: ../../topics/db/aggregation.txt:221
# 2fb6edb6afa141f3927652cb59466daf
msgid "For example, we can ask for all publishers, annotated with their respective total book stock counters (note how we use ``'book'`` to specify the ``Publisher`` -> ``Book`` reverse foreign key hop)::"
msgstr ""

#: ../../topics/db/aggregation.txt:228
# 6dbf33e71fb646689f54198fcf39d85a
msgid "(Every ``Publisher`` in the resulting ``QuerySet`` will have an extra attribute called ``book__count``.)"
msgstr ""

#: ../../topics/db/aggregation.txt:231
# 1da4a5bea8494c56af90745bbf0f4639
msgid "We can also ask for the oldest book of any of those managed by every publisher::"
msgstr ""

#: ../../topics/db/aggregation.txt:235
# 3938159dd12842bebf420ad60519a0e1
msgid "(The resulting dictionary will have a key called ``'oldest_pubdate'``. If no such alias were specified, it would be the rather long ``'book__pubdate__min'``.)"
msgstr ""

#: ../../topics/db/aggregation.txt:238
# 11e8df865f0b4e348630f33f9c52db39
msgid "This doesn't apply just to foreign keys. It also works with many-to-many relations. For example, we can ask for every author, annotated with the total number of pages considering all the books he/she has (co-)authored (note how we use ``'book'`` to specify the ``Author`` -> ``Book`` reverse many-to-many hop)::"
msgstr ""

#: ../../topics/db/aggregation.txt:245
# 46c9e144e6784eab8289df69bcec21c4
msgid "(Every ``Author`` in the resulting ``QuerySet`` will have an extra attribute called ``total_pages``. If no such alias were specified, it would be the rather long ``book__pages__sum``.)"
msgstr ""

#: ../../topics/db/aggregation.txt:249
# fa6826013207455ea6f7f9595b0c612d
msgid "Or ask for the average rating of all the books written by author(s) we have on file::"
msgstr ""

#: ../../topics/db/aggregation.txt:254
# 6a19b279fa59408b894ba7021d352885
msgid "(The resulting dictionary will have a key called ``'average__rating'``. If no such alias were specified, it would be the rather long ``'book__rating__avg'``.)"
msgstr ""

#: ../../topics/db/aggregation.txt:258
# 18967128ffc24680bf4080ca2d6366aa
msgid "Aggregations and other QuerySet clauses"
msgstr ""

#: ../../topics/db/aggregation.txt:261
# ad5878fb0fc14328bf01a19180ab2d2d
msgid "``filter()`` and ``exclude()``"
msgstr ""

#: ../../topics/db/aggregation.txt:263
# c12cfd1006dd4a2ea6e2876174b92f77
msgid "Aggregates can also participate in filters. Any ``filter()`` (or ``exclude()``) applied to normal model fields will have the effect of constraining the objects that are considered for aggregation."
msgstr ""

#: ../../topics/db/aggregation.txt:267
# 075d88ae80304fd0b1e58c73c4863bac
msgid "When used with an ``annotate()`` clause, a filter has the effect of constraining the objects for which an annotation is calculated. For example, you can generate an annotated list of all books that have a title starting with \"Django\" using the query::"
msgstr ""

#: ../../topics/db/aggregation.txt:274
# 5dc8d63ff6db4520827f381da1404ee8
msgid "When used with an ``aggregate()`` clause, a filter has the effect of constraining the objects over which the aggregate is calculated. For example, you can generate the average price of all books with a title that starts with \"Django\" using the query::"
msgstr ""

#: ../../topics/db/aggregation.txt:282
# 503f05912a57489b927243f5466313f5
msgid "Filtering on annotations"
msgstr ""

#: ../../topics/db/aggregation.txt:284
# a64ffeb323754b0da091fd281945deb4
msgid "Annotated values can also be filtered. The alias for the annotation can be used in ``filter()`` and ``exclude()`` clauses in the same way as any other model field."
msgstr ""

#: ../../topics/db/aggregation.txt:288
# 1ab213248c7d48cb8a1c95d8ee3c5ac6
msgid "For example, to generate a list of books that have more than one author, you can issue the query::"
msgstr ""

#: ../../topics/db/aggregation.txt:293
# d41d40bb4e7c42ee850bf99e08c8d36a
msgid "This query generates an annotated result set, and then generates a filter based upon that annotation."
msgstr ""

#: ../../topics/db/aggregation.txt:297
# 86c28248f7504a0790ae752df7096d7e
msgid "Order of ``annotate()`` and ``filter()`` clauses"
msgstr ""

#: ../../topics/db/aggregation.txt:299
# 12d73d663a5b45229cd6855a08012200
msgid "When developing a complex query that involves both ``annotate()`` and ``filter()`` clauses, particular attention should be paid to the order in which the clauses are applied to the ``QuerySet``."
msgstr ""

#: ../../topics/db/aggregation.txt:303
# 7bc60025a1dd4376bdb698e9c6a748d5
msgid "When an ``annotate()`` clause is applied to a query, the annotation is computed over the state of the query up to the point where the annotation is requested. The practical implication of this is that ``filter()`` and ``annotate()`` are not commutative operations -- that is, there is a difference between the query::"
msgstr ""

#: ../../topics/db/aggregation.txt:311
# 964e7723bc584672909da3d3da607390
msgid "and the query::"
msgstr ""

#: ../../topics/db/aggregation.txt:315
# ca44792e1d8147e6819254951f498661
msgid "Both queries will return a list of publishers that have at least one good book (i.e., a book with a rating exceeding 3.0). However, the annotation in the first query will provide the total number of all books published by the publisher; the second query will only include good books in the annotated count. In the first query, the annotation precedes the filter, so the filter has no effect on the annotation. In the second query, the filter precedes the annotation, and as a result, the filter constrains the objects considered when calculating the annotation."
msgstr ""

#: ../../topics/db/aggregation.txt:325
# a637085fd401491dbf7b03b9bea60c96
msgid "``order_by()``"
msgstr ""

#: ../../topics/db/aggregation.txt:327
# f999f22fa1ba4aa9a0ae718f6fa9bc44
msgid "Annotations can be used as a basis for ordering. When you define an ``order_by()`` clause, the aggregates you provide can reference any alias defined as part of an ``annotate()`` clause in the query."
msgstr ""

#: ../../topics/db/aggregation.txt:331
# 106fcac2e26b4264bacdde4029b77f47
msgid "For example, to order a ``QuerySet`` of books by the number of authors that have contributed to the book, you could use the following query::"
msgstr ""

#: ../../topics/db/aggregation.txt:337
# 16c22199c92f400e817f84fafa3e4d0e
msgid "``values()``"
msgstr ""

#: ../../topics/db/aggregation.txt:339
# 87039863931648e59059b2d3b7bd278a
msgid "Ordinarily, annotations are generated on a per-object basis - an annotated ``QuerySet`` will return one result for each object in the original ``QuerySet``. However, when a ``values()`` clause is used to constrain the columns that are returned in the result set, the method for evaluating annotations is slightly different. Instead of returning an annotated result for each result in the original ``QuerySet``, the original results are grouped according to the unique combinations of the fields specified in the ``values()`` clause. An annotation is then provided for each unique group; the annotation is computed over all members of the group."
msgstr ""

#: ../../topics/db/aggregation.txt:349
# 572b5f8d71314da08a7d4dbeb59207e7
msgid "For example, consider an author query that attempts to find out the average rating of books written by each author:"
msgstr ""

#: ../../topics/db/aggregation.txt:354
# 6799a740056c4ecd9b83acab190b41c7
msgid "This will return one result for each author in the database, annotated with their average book rating."
msgstr ""

#: ../../topics/db/aggregation.txt:357
# 120da4b91db842c38e92598227f83321
msgid "However, the result will be slightly different if you use a ``values()`` clause::"
msgstr ""

#: ../../topics/db/aggregation.txt:361
# 0ba8570ef5a549619a47b484eb16c7a8
msgid "In this example, the authors will be grouped by name, so you will only get an annotated result for each *unique* author name. This means if you have two authors with the same name, their results will be merged into a single result in the output of the query; the average will be computed as the average over the books written by both authors."
msgstr ""

#: ../../topics/db/aggregation.txt:368
# 2736e50ebfd6416db353b050e4161be9
msgid "Order of ``annotate()`` and ``values()`` clauses"
msgstr ""

#: ../../topics/db/aggregation.txt:370
# cbbd60d5a13d40afb61b57e28056a91d
msgid "As with the ``filter()`` clause, the order in which ``annotate()`` and ``values()`` clauses are applied to a query is significant. If the ``values()`` clause precedes the ``annotate()``, the annotation will be computed using the grouping described by the ``values()`` clause."
msgstr ""

#: ../../topics/db/aggregation.txt:375
# 5f6da7b6d40249eb8ee4be0f52b45e72
msgid "However, if the ``annotate()`` clause precedes the ``values()`` clause, the annotations will be generated over the entire query set. In this case, the ``values()`` clause only constrains the fields that are generated on output."
msgstr ""

#: ../../topics/db/aggregation.txt:380
# c959745ce9594701b3c9a80091af5d76
msgid "For example, if we reverse the order of the ``values()`` and ``annotate()`` clause from our previous example::"
msgstr ""

#: ../../topics/db/aggregation.txt:385
# 58c53f879ea74e618c8f22e1e3e24f80
msgid "This will now yield one unique result for each author; however, only the author's name and the ``average_rating`` annotation will be returned in the output data."
msgstr ""

#: ../../topics/db/aggregation.txt:389
# b5205fc843b44355ac9fd88a2632f6bc
msgid "You should also note that ``average_rating`` has been explicitly included in the list of values to be returned. This is required because of the ordering of the ``values()`` and ``annotate()`` clause."
msgstr ""

#: ../../topics/db/aggregation.txt:393
# cc20a3b9883a40f686d2071c8916adc6
msgid "If the ``values()`` clause precedes the ``annotate()`` clause, any annotations will be automatically added to the result set. However, if the ``values()`` clause is applied after the ``annotate()`` clause, you need to explicitly include the aggregate column."
msgstr ""

#: ../../topics/db/aggregation.txt:399
# 0e0c09c2384c43db83a718cdc56f810b
msgid "Interaction with default ordering or ``order_by()``"
msgstr ""

#: ../../topics/db/aggregation.txt:401
# 3b314fb01ddd441ea6bdd2f324a07144
msgid "Fields that are mentioned in the ``order_by()`` part of a queryset (or which are used in the default ordering on a model) are used when selecting the output data, even if they are not otherwise specified in the ``values()`` call. These extra fields are used to group \"like\" results together and they can make otherwise identical result rows appear to be separate. This shows up, particularly, when counting things."
msgstr ""

#: ../../topics/db/aggregation.txt:408
# d8ae223cfe8d4377b696e0fa8c48f57e
msgid "By way of example, suppose you have a model like this::"
msgstr ""

#: ../../topics/db/aggregation.txt:417
# 3f2eeabbfc12417aa391a608c6963772
msgid "The important part here is the default ordering on the ``name`` field. If you want to count how many times each distinct ``data`` value appears, you might try this::"
msgstr ""

#: ../../topics/db/aggregation.txt:424
# 522801558da7496cab4a180078f88332
msgid "...which will group the ``Item`` objects by their common ``data`` values and then count the number of ``id`` values in each group. Except that it won't quite work. The default ordering by ``name`` will also play a part in the grouping, so this query will group by distinct ``(data, name)`` pairs, which isn't what you want. Instead, you should construct this queryset::"
msgstr ""

#: ../../topics/db/aggregation.txt:432
# 6531730a9b724b1daf78c3ae351a82b2
msgid "...clearing any ordering in the query. You could also order by, say, ``data`` without any harmful effects, since that is already playing a role in the query."
msgstr ""

#: ../../topics/db/aggregation.txt:436
# c881531708584fd18f4506493db14faf
msgid "This behavior is the same as that noted in the queryset documentation for :meth:`~django.db.models.query.QuerySet.distinct` and the general rule is the same: normally you won't want extra columns playing a part in the result, so clear out the ordering, or at least make sure it's restricted only to those fields you also select in a ``values()`` call."
msgstr ""

#: ../../topics/db/aggregation.txt:443
# dc8bfcd4da6147d194121059db2256c5
msgid "You might reasonably ask why Django doesn't remove the extraneous columns for you. The main reason is consistency with ``distinct()`` and other places: Django **never** removes ordering constraints that you have specified (and we can't change those other methods' behavior, as that would violate our :doc:`/misc/api-stability` policy)."
msgstr ""

#: ../../topics/db/aggregation.txt:450
# 095909e19cd74b04a700869c3677c0a3
msgid "Aggregating annotations"
msgstr ""

#: ../../topics/db/aggregation.txt:452
# 603ff2bb549c43bfb0437e1529408844
msgid "You can also generate an aggregate on the result of an annotation. When you define an ``aggregate()`` clause, the aggregates you provide can reference any alias defined as part of an ``annotate()`` clause in the query."
msgstr ""

#: ../../topics/db/aggregation.txt:456
# 3d552407bc1749beb2cfe88320f80490
msgid "For example, if you wanted to calculate the average number of authors per book you first annotate the set of books with the author count, then aggregate that author count, referencing the annotation field::"
msgstr ""

#: ../../topics/db/examples/index.txt:3
# d8aebc1cc0234e75b4223ea422e0df0c
msgid "Examples of model relationship API usage"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:3
#: ../../topics/db/models.txt:329
#: ../../topics/db/queries.txt:1165
# c5af30d6f9084ec4ad4e39e13a992aa8
# 7862761330c845ad8318eb851aa09b09
# fb2dd82f867f480dab701892cf398e0e
msgid "Many-to-many relationships"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:7
# 05c711bf0ccf46a6a3455bb9b61c5354
msgid "To define a many-to-many relationship, use :ref:`ref-manytomany`."
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:9
# 38bc624513f7460aa091ceb5907e3d40
msgid "In this example, an ``Article`` can be published in multiple ``Publication`` objects, and a ``Publication`` has multiple ``Article`` objects:"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:35
#: ../../topics/db/examples/many_to_one.txt:32
#: ../../topics/db/examples/one_to_one.txt:37
# 5314cc4348e841128c67f9cb1ae7b86a
# 5e01b3cd6e3d4e6a90c41f2dec9aa3f9
# 2062b06a903e41f0ac5b095b52f76093
msgid "What follows are examples of operations that can be performed using the Python API facilities."
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:38
# dbe0cec08a9847ac836b674331b53af6
msgid "Create a couple of ``Publications``::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:47
# b6adf923686d4cb69a7b1af2a6b6813d
msgid "Create an ``Article``::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:51
# 097ebcdbee2440c08ce2f1b542797377
msgid "You can't associate it with a ``Publication`` until it's been saved::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:58
# 21a34c8317a14647876565f4df9da645
msgid "Save it! ::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:63
# fecb158c1bb144f0ab0b129d6c9fb529
msgid "Associate the ``Article`` with a ``Publication``::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:67
# 00d1bd5e139648cd9c359f8a499aed0d
msgid "Create another ``Article``, and set it to appear in both ``Publications``::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:74
# 25a5a3ab9aea401ca44ba7447aca1f13
msgid "Adding a second time is OK::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:78
# 1b104ed76b13408394fc29c314d1eb0e
msgid "Adding an object of the wrong type raises :exc:`~exceptions.TypeError`::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:85
# 648b17c0c0df46cbb475fa533fbe18f9
msgid "Create and add a ``Publication`` to an ``Article`` in one step using :meth:`~django.db.models.fields.related.RelatedManager.create`::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:90
# c36f64f1411e488589529d73a735678b
msgid "``Article`` objects have access to their related ``Publication`` objects::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:97
# da20ea68124542eea26a424522da2215
msgid "``Publication`` objects have access to their related ``Article`` objects::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:106
# cc86a3d5e1dc42c9956b68a86682e311
msgid "Many-to-many relationships can be queried using :ref:`lookups across relationships <lookups-that-span-relationships>`::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:124
# aba8fc2e519d4223be3dd9913e13954f
msgid "The :meth:`~django.db.models.query.QuerySet.count` function respects :meth:`~django.db.models.query.QuerySet.distinct` as well::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:138
# 197d597d51694526b8e103ecbee29cab
msgid "Reverse m2m queries are supported (i.e., starting at the table that doesn't have a :class:`~django.db.models.ManyToManyField`)::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:163
# ad8707f17e524168998fff5f2a368bd9
msgid "Excluding a related item works as you would expect, too (although the SQL involved is a little complex)::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:169
# a4af73e09d80431fac2b8fbd9cea5b53
msgid "If we delete a ``Publication``, its ``Articles`` won't be able to access it::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:178
# 7bbb5a65161847718361eed97fdb2653
msgid "If we delete an ``Article``, its ``Publications`` won't be able to access it::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:186
# a8fdaa0c18a54e35a06fc4c0a2b674d6
msgid "Adding via the 'other' end of an m2m::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:196
# 89954d58bc204940b391f2a9f5c96084
msgid "Adding via the other end using keywords::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:205
# acc54549c93544e695357a33306e2789
msgid "Removing ``Publication`` from an ``Article``::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:213
# 5c3d64cc003b41b7b194097aa0d68663
msgid "And from the other end::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:221
# 49ad1fc31be84fe3a3db46f16c7dacfa
msgid "Relation sets can be assigned. Assignment clears any existing set members::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:229
# c610ba20c4e84d4dba6d7b8ab15078a7
msgid "Relation sets can be cleared::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:235
# e1c094476cbe486c835a2007c6271157
msgid "And you can clear from the other end::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:248
# 2142216474164360aa5d080a5ecd0266
msgid "Recreate the ``Article`` and ``Publication`` we have deleted::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:256
# 4cbb33f5bcac4ff5b05d40921974bcc5
msgid "Bulk delete some ``Publications`` - references to deleted publications should go::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:267
# 003701d82e9d4c968c61c2384f9e0441
msgid "Bulk delete some articles - references to deleted objects should go::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:274
# d6805e838e804578825c15c98615f39a
msgid "After the :meth:`~django.db.models.query.QuerySet.delete`, the :class:`~django.db.models.query.QuerySet` cache needs to be cleared, and the referenced objects should be gone::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:283
# cb8a4e7bd59c46c59cc57ca749bdfcf4
msgid "An alternate to calling :meth:`~django.db.models.fields.related.RelatedManager.clear` is to assign the empty set::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:3
#: ../../topics/db/models.txt:280
# 62e286e76731412496b297967558d154
# cd86f6ae32324b4abbb79109f0ae78cc
msgid "Many-to-one relationships"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:7
# b39f16f967504d14a2ad45313ed0e972
msgid "To define a many-to-one relationship, use :class:`~django.db.models.ForeignKey`."
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:35
# 1632327bfb2f454ca3bf1cf9c67efdc2
msgid "Create a few Reporters::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:43
# 0d96036284f04c36958f3500e6eb227b
msgid "Create an Article::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:55
# d2c903494a614f569e9496345e754927
msgid "Article objects have access to their related Reporter objects::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:59
# fc47b24c8f564159b32b16bacf562436
msgid "These are strings instead of unicode strings because that's what was used in the creation of this reporter (and we haven't refreshed the data from the database, which always returns unicode strings)::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:66
# d082f116c031462c8236bff8f7241102
msgid "Create an Article via the Reporter object::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:76
# 53099a179f234003a934930559d30571
msgid "Create a new article, and add it to the article set::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:87
# 3b2ea1f5d2114ce8b36a4880a107ecd0
msgid "Add the same article to a different article set - check that it moves::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:95
# 07da7c174b754cbcb5c6930033968c5f
msgid "Adding an object of the wrong type raises TypeError::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:113
# 5fab234d0fe04a639604be0c7c49ddd6
msgid "Note that in the last example the article has moved from John to Paul."
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:115
# 80ff3b5d2003410f89fa16e541a7f9ac
msgid "Related managers support field lookups as well. The API automatically follows relationships as far as you need. Use double underscores to separate relationships. This works as many levels deep as you want. There's no limit. For example::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:127
# e11b0fb63c3e479c9893551249c40517
msgid "Exact match is implied here::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:132
# 3468499ca09c430c9abfd395cfd260e7
msgid "Query twice over the related field. This translates to an AND condition in the WHERE clause::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:138
# 2fe0fd11e62040f783c7f1d64d8ec5af
msgid "For the related lookup you can supply a primary key value or pass the related object explicitly::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:153
# 4a92b13e15874699bc47f60b8d75e0c6
msgid "You can also use a queryset instead of a literal list of instances::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:158
# 0ffa1b44f82343da84ae13449825bd9e
msgid "Querying in the opposite direction::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:172
# 3e5d37c614ed45fb891260b06dd30cbb
msgid "Counting in the opposite direction works in conjunction with distinct()::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:179
# 45e9c62fb52f424ca52e34378af7cc35
msgid "Queries can go round in circles::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:188
# 6fe44270259c42a880c91290bea17b98
msgid "If you delete a reporter, his articles will be deleted (assuming that the ForeignKey was defined with :attr:`django.db.models.ForeignKey.on_delete` set to ``CASCADE``, which is the default)::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:202
# febf9f27f5224ad78f6ebf95e5d28c3b
msgid "You can delete using a JOIN in the query::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:3
#: ../../topics/db/models.txt:536
#: ../../topics/db/queries.txt:1192
# 8f8ada63d7ba429080112297900f23aa
# 72ba252ac79d49bbb778d903eebbd997
# 5e7e0c5a9fe748428f4fa0d3e4a0c7c9
msgid "One-to-one relationships"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:7
# 1499c5a0007041f185c3804320eaf818
msgid "To define a one-to-one relationship, use :ref:`ref-onetoone`."
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:9
# 46861802052845d4a2a2bf4bc17bdfa4
msgid "In this example, a ``Place`` optionally can be a ``Restaurant``:"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:40
# f9929588a4cc4134ab999240e04d683d
msgid "Create a couple of Places::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:47
# 72d2e342b64c4f488f132bffecd013ff
msgid "Create a Restaurant. Pass the ID of the \"parent\" object as this object's ID::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:52
# e4a2666a76a04e45a3c2f7b9e0279cb3
msgid "A Restaurant can access its place::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:57
# 1363d328cc8140a29146d1f42372195e
msgid "A Place can access its restaurant, if available::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:62
# 5bf88ba2d87943b482515341cbab2035
msgid "p2 doesn't have an associated restaurant::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:69
# 0d5f3806085d43b3939487aa4793b53c
msgid "Set the place using assignment notation. Because place is the primary key on Restaurant, the save will create a new restaurant::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:79
# 62b53109d9bb4df49b64c3fa7d79e160
msgid "Set the place back again, using assignment in the reverse direction::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:85
# 7d9ebb39968f48eaafb4bf3a8d62132e
msgid "Restaurant.objects.all() just returns the Restaurants, not the Places.  Note that there are two restaurants - Ace Hardware the Restaurant was created in the call to r.place = p2::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:92
# da78fb845e134040940831d5df07ae82
msgid "Place.objects.all() returns all Places, regardless of whether they have Restaurants::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:98
# 2864ba2251604b5181cd9e4c183a7cdb
msgid "You can query the models using :ref:`lookups across relationships <lookups-that-span-relationships>`::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:109
# 89c115e4c90a4d62b9019916e7f4b69f
msgid "This of course works in reverse::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:120
# 17fcb678e58e4192ab217e3acf5e3a3e
msgid "Add a Waiter to the Restaurant::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:127
# faaa9254433048da95528fdaa40058b3
msgid "Query the waiters::"
msgstr ""

#: ../../topics/db/index.txt:2
# e2a47e341ee340a0847c6e558c0d5d59
msgid "Models and databases"
msgstr ""

#: ../../topics/db/index.txt:6
#: ../../topics/db/models.txt:7
# da8355cfd918485eb904152c6f6fb35e
# e8c87e67482649968cbb17c2d4f20e2d
msgid "A model is the single, definitive source of data about your data. It contains the essential fields and behaviors of the data you're storing. Generally, each model maps to a single database table."
msgstr ""

#: ../../topics/db/managers.txt:3
# c45131d5146c43a4ad3c25554129525b
msgid "Managers"
msgstr ""

#: ../../topics/db/managers.txt:9
# 7227b608f6a746e6afb18d7ef814531a
msgid "A ``Manager`` is the interface through which database query operations are provided to Django models. At least one ``Manager`` exists for every model in a Django application."
msgstr ""

#: ../../topics/db/managers.txt:13
# 05babda338374d08bad118aa5f6bc787
msgid "The way ``Manager`` classes work is documented in :doc:`/topics/db/queries`; this document specifically touches on model options that customize ``Manager`` behavior."
msgstr ""

#: ../../topics/db/managers.txt:20
# 64945e602e834dddb13592b26e017866
msgid "Manager names"
msgstr ""

#: ../../topics/db/managers.txt:22
# 85ec09c3e59e4b96ae05208af9aa1991
msgid "By default, Django adds a ``Manager`` with the name ``objects`` to every Django model class. However, if you want to use ``objects`` as a field name, or if you want to use a name other than ``objects`` for the ``Manager``, you can rename it on a per-model basis. To rename the ``Manager`` for a given class, define a class attribute of type ``models.Manager()`` on that model. For example::"
msgstr ""

#: ../../topics/db/managers.txt:34
# 84924b0dcf054d6abf8205c0da8fdc15
msgid "Using this example model, ``Person.objects`` will generate an ``AttributeError`` exception, but ``Person.people.all()`` will provide a list of all ``Person`` objects."
msgstr ""

#: ../../topics/db/managers.txt:41
# 6df310f8adac4045a4f7fb66b05f4506
msgid "Custom Managers"
msgstr ""

#: ../../topics/db/managers.txt:43
# 2bd3ba53d0ad49f49b5329c1b8980345
msgid "You can use a custom ``Manager`` in a particular model by extending the base ``Manager`` class and instantiating your custom ``Manager`` in your model."
msgstr ""

#: ../../topics/db/managers.txt:46
# 9d0e23fcbd6745e6bba72d65553d72ee
msgid "There are two reasons you might want to customize a ``Manager``: to add extra ``Manager`` methods, and/or to modify the initial ``QuerySet`` the ``Manager`` returns."
msgstr ""

#: ../../topics/db/managers.txt:51
# 71b2089d56d140eda394451abbfbe7b2
msgid "Adding extra Manager methods"
msgstr ""

#: ../../topics/db/managers.txt:53
# 9147a5c03793404b86fec2cadd0a78b1
msgid "Adding extra ``Manager`` methods is the preferred way to add \"table-level\" functionality to your models. (For \"row-level\" functionality -- i.e., functions that act on a single instance of a model object -- use :ref:`Model methods <model-methods>`, not custom ``Manager`` methods.)"
msgstr ""

#: ../../topics/db/managers.txt:58
# 6b404ac1afdb47b1ba404510195c332f
msgid "A custom ``Manager`` method can return anything you want. It doesn't have to return a ``QuerySet``."
msgstr ""

#: ../../topics/db/managers.txt:61
# f693aca521c04b08a5291ffa5227b932
msgid "For example, this custom ``Manager`` offers a method ``with_counts()``, which returns a list of all ``OpinionPoll`` objects, each with an extra ``num_responses`` attribute that is the result of an aggregate query::"
msgstr ""

#: ../../topics/db/managers.txt:92
# 6826a536d82846538298ae29ccb72e79
msgid "With this example, you'd use ``OpinionPoll.objects.with_counts()`` to return that list of ``OpinionPoll`` objects with ``num_responses`` attributes."
msgstr ""

#: ../../topics/db/managers.txt:95
# 0282504b36354f3395abd2d2fa5b1b46
msgid "Another thing to note about this example is that ``Manager`` methods can access ``self.model`` to get the model class to which they're attached."
msgstr ""

#: ../../topics/db/managers.txt:99
# 6a992ee8d94a4594b49b0e7ef08a494c
msgid "Modifying initial Manager QuerySets"
msgstr ""

#: ../../topics/db/managers.txt:101
# d101f20ae6ec4b97a6797ae7d37a17f6
msgid "A ``Manager``'s base ``QuerySet`` returns all objects in the system. For example, using this model::"
msgstr ""

#: ../../topics/db/managers.txt:108
# cd48ad1ba8bb4bde8eec05743611d720
msgid "...the statement ``Book.objects.all()`` will return all books in the database."
msgstr ""

#: ../../topics/db/managers.txt:110
# 56addf3c8b664b278538ca29aa115d0b
msgid "You can override a ``Manager``\\'s base ``QuerySet`` by overriding the ``Manager.get_query_set()`` method. ``get_query_set()`` should return a ``QuerySet`` with the properties you require."
msgstr ""

#: ../../topics/db/managers.txt:114
# 53b71348955b44eaabbca1589854975a
msgid "For example, the following model has *two* ``Manager``\\s -- one that returns all objects, and one that returns only the books by Roald Dahl::"
msgstr ""

#: ../../topics/db/managers.txt:130
# 13c166d621dd4af8b988fb206f5adede
msgid "With this sample model, ``Book.objects.all()`` will return all books in the database, but ``Book.dahl_objects.all()`` will only return the ones written by Roald Dahl."
msgstr ""

#: ../../topics/db/managers.txt:134
# 4bd1b03d62894fcd92c440f1e2ee128f
msgid "Of course, because ``get_query_set()`` returns a ``QuerySet`` object, you can use ``filter()``, ``exclude()`` and all the other ``QuerySet`` methods on it. So these statements are all legal::"
msgstr ""

#: ../../topics/db/managers.txt:142
# 4632d336a8404577ad2c93a86bfd043d
msgid "This example also pointed out another interesting technique: using multiple managers on the same model. You can attach as many ``Manager()`` instances to a model as you'd like. This is an easy way to define common \"filters\" for your models."
msgstr ""

#: ../../topics/db/managers.txt:165
# d5bd5eda62794c6884e851921944d9c7
msgid "This example allows you to request ``Person.men.all()``, ``Person.women.all()``, and ``Person.people.all()``, yielding predictable results."
msgstr ""

#: ../../topics/db/managers.txt:168
# 44a97f7855044ed0acd2b7ddabfc2a54
msgid "If you use custom ``Manager`` objects, take note that the first ``Manager`` Django encounters (in the order in which they're defined in the model) has a special status. Django interprets the first ``Manager`` defined in a class as the \"default\" ``Manager``, and several parts of Django (including :djadmin:`dumpdata`) will use that ``Manager`` exclusively for that model. As a result, it's a good idea to be careful in your choice of default manager in order to avoid a situation where overriding ``get_query_set()`` results in an inability to retrieve objects you'd like to work with."
msgstr ""

#: ../../topics/db/managers.txt:181
# 0df2c6a73779429992014a297125150f
msgid "Using managers for related object access"
msgstr ""

#: ../../topics/db/managers.txt:183
# aafd2c81b8d3483b8eb6b9219f1588f1
msgid "By default, Django uses an instance of a \"plain\" manager class when accessing related objects (i.e. ``choice.poll``), not the default manager on the related object. This is because Django needs to be able to retrieve the related object, even if it would otherwise be filtered out (and hence be inaccessible) by the default manager."
msgstr ""

#: ../../topics/db/managers.txt:189
# 614483f505624774b0dcdf15f77e140e
msgid "If the normal plain manager class (:class:`django.db.models.Manager`) is not appropriate for your circumstances, you can force Django to use the same class as the default manager for your model by setting the ``use_for_related_fields`` attribute on the manager class. This is documented fully below_."
msgstr ""

#: ../../topics/db/managers.txt:199
# d9c84fd56d7d4a568654c6767eb57f6d
msgid "Custom managers and model inheritance"
msgstr ""

#: ../../topics/db/managers.txt:201
# 7a979551317f401a9e3147ac40009aff
msgid "Class inheritance and model managers aren't quite a perfect match for each other. Managers are often specific to the classes they are defined on and inheriting them in subclasses isn't necessarily a good idea. Also, because the first manager declared is the *default manager*, it is important to allow that to be controlled. So here's how Django handles custom managers and :ref:`model inheritance <model-inheritance>`:"
msgstr ""

#: ../../topics/db/managers.txt:208
# d27d50a6441e423eb3f4044dcc1f3e2a
msgid "Managers defined on non-abstract base classes are *not* inherited by child classes. If you want to reuse a manager from a non-abstract base, redeclare it explicitly on the child class. These sorts of managers are likely to be fairly specific to the class they are defined on, so inheriting them can often lead to unexpected results (particularly as far as the default manager goes). Therefore, they aren't passed onto child classes."
msgstr ""

#: ../../topics/db/managers.txt:216
# 251c5d813bc841ce9019141f1890af21
msgid "Managers from abstract base classes are always inherited by the child class, using Python's normal name resolution order (names on the child class override all others; then come names on the first parent class, and so on). Abstract base classes are designed to capture information and behavior that is common to their child classes. Defining common managers is an appropriate part of this common information."
msgstr ""

#: ../../topics/db/managers.txt:223
# d6f7560ae0ef44198e0842a31e546823
msgid "The default manager on a class is either the first manager declared on the class, if that exists, or the default manager of the first abstract base class in the parent hierarchy, if that exists. If no default manager is explicitly declared, Django's normal default manager is used."
msgstr ""

#: ../../topics/db/managers.txt:229
# 6277d23817ad47ac9b62cc931e171e15
msgid "These rules provide the necessary flexibility if you want to install a collection of custom managers on a group of models, via an abstract base class, but still customize the default manager. For example, suppose you have this base class::"
msgstr ""

#: ../../topics/db/managers.txt:241
# c394fe5073364f9e8c51cd31d3d2c2e5
msgid "If you use this directly in a subclass, ``objects`` will be the default manager if you declare no managers in the base class::"
msgstr ""

#: ../../topics/db/managers.txt:248
# b185c0932a154550b4759452630daa3f
msgid "If you want to inherit from ``AbstractBase``, but provide a different default manager, you can provide the default manager on the child class::"
msgstr ""

#: ../../topics/db/managers.txt:256
# 69d1ec5e45d34c1d85b016632ae749ba
msgid "Here, ``default_manager`` is the default. The ``objects`` manager is still available, since it's inherited. It just isn't used as the default."
msgstr ""

#: ../../topics/db/managers.txt:259
# 654a0b0712a04257ad6f389839b56f1a
msgid "Finally for this example, suppose you want to add extra managers to the child class, but still use the default from ``AbstractBase``. You can't add the new manager directly in the child class, as that would override the default and you would have to also explicitly include all the managers from the abstract base class. The solution is to put the extra managers in another base class and introduce it into the inheritance hierarchy *after* the defaults::"
msgstr ""

#: ../../topics/db/managers.txt:277
# 19086a97c66b44fb92cefeed46cff9eb
msgid "Note that while you can *define* a custom manager on the abstract model, you can't *invoke* any methods using the abstract model. That is::"
msgstr ""

#: ../../topics/db/managers.txt:282
# f23c90f467bb4cf79fd154ef8fb47b91
msgid "is legal, but::"
msgstr ""

#: ../../topics/db/managers.txt:286
# 9d094ab47584464dbae245a7814231b4
msgid "will raise an exception. This is because managers are intended to encapsulate logic for managing collections of objects. Since you can't have a collection of abstract objects, it doesn't make sense to be managing them. If you have functionality that applies to the abstract model, you should put that functionality in a ``staticmethod`` or ``classmethod`` on the abstract model."
msgstr ""

#: ../../topics/db/managers.txt:293
# 25cc88978733477bb0a3740a199552eb
msgid "Implementation concerns"
msgstr ""

#: ../../topics/db/managers.txt:295
# 585c361128574f08a36096467cfb3819
msgid "Whatever features you add to your custom ``Manager``, it must be possible to make a shallow copy of a ``Manager`` instance; i.e., the following code must work::"
msgstr ""

#: ../../topics/db/managers.txt:303
# b5693bac3f1c4524a98aea2cdb2b5263
msgid "Django makes shallow copies of manager objects during certain queries; if your Manager cannot be copied, those queries will fail."
msgstr ""

#: ../../topics/db/managers.txt:306
# f2248f5b14e640ce913473796f997763
msgid "This won't be an issue for most custom managers. If you are just adding simple methods to your ``Manager``, it is unlikely that you will inadvertently make instances of your ``Manager`` uncopyable. However, if you're overriding ``__getattr__`` or some other private method of your ``Manager`` object that controls object state, you should ensure that you don't affect the ability of your ``Manager`` to be copied."
msgstr ""

#: ../../topics/db/managers.txt:317
# d70e779559734958b809d9c77a5e43d5
msgid "Controlling automatic Manager types"
msgstr ""

#: ../../topics/db/managers.txt:319
# 4f4c6493b513433798a25bd078e1e7f0
msgid "This document has already mentioned a couple of places where Django creates a manager class for you: `default managers`_ and the \"plain\" manager used to `access related objects`_. There are other places in the implementation of Django where temporary plain managers are needed. Those automatically created managers will normally be instances of the :class:`django.db.models.Manager` class."
msgstr ""

#: ../../topics/db/managers.txt:329
# ec52ab5253d04950826f3649b653d0bc
msgid "Throughout this section, we will use the term \"automatic manager\" to mean a manager that Django creates for you -- either as a default manager on a model with no managers, or to use temporarily when accessing related objects."
msgstr ""

#: ../../topics/db/managers.txt:333
# 966c6ab6569a4993b774e5015dcac028
msgid "Sometimes this default class won't be the right choice. One example is in the :mod:`django.contrib.gis` application that ships with Django itself. All ``gis`` models must use a special manager class (:class:`~django.contrib.gis.db.models.GeoManager`) because they need a special queryset (:class:`~django.contrib.gis.db.models.GeoQuerySet`) to be used for interacting with the database.  It turns out that models which require a special manager like this need to use the same manager class wherever an automatic manager is created."
msgstr ""

#: ../../topics/db/managers.txt:341
# af46ed6149394ce3b1a91c0d3834e163
msgid "Django provides a way for custom manager developers to say that their manager class should be used for automatic managers whenever it is the default manager on a model. This is done by setting the ``use_for_related_fields`` attribute on the manager class::"
msgstr ""

#: ../../topics/db/managers.txt:351
# d37bfab9fa4642889accd69e1e06c59d
msgid "If this attribute is set on the *default* manager for a model (only the default manager is considered in these situations), Django will use that class whenever it needs to automatically create a manager for the class.  Otherwise, it will use :class:`django.db.models.Manager`."
msgstr ""

#: ../../topics/db/managers.txt:358
# 5569b8f74b2749049bb2021f4e54882f
msgid "Given the purpose for which it's used, the name of this attribute (``use_for_related_fields``) might seem a little odd. Originally, the attribute only controlled the type of manager used for related field access, which is where the name came from. As it became clear the concept was more broadly useful, the name hasn't been changed. This is primarily so that existing code will :doc:`continue to work </misc/api-stability>` in future Django versions."
msgstr ""

#: ../../topics/db/managers.txt:367
# 4cebe0e262894608acf3647da877f73c
msgid "Writing correct Managers for use in automatic Manager instances"
msgstr ""

#: ../../topics/db/managers.txt:369
# bc589d3038a64cd7a680f034c2f408d2
msgid "As already suggested by the :mod:`django.contrib.gis` example, above, the ``use_for_related_fields`` feature is primarily for managers that need to return a custom ``QuerySet`` subclass. In providing this functionality in your manager, there are a couple of things to remember."
msgstr ""

#: ../../topics/db/managers.txt:375
# a21214dbf95f49738a7ac9c17c97a2e4
msgid "Do not filter away any results in this type of manager subclass"
msgstr ""

#: ../../topics/db/managers.txt:377
# 8022b0b507d0484095d8eb7b1b2363d6
msgid "One reason an automatic manager is used is to access objects that are related to from some other model. In those situations, Django has to be able to see all the objects for the model it is fetching, so that *anything* which is referred to can be retrieved."
msgstr ""

#: ../../topics/db/managers.txt:382
# c014c15e87c2460ebb3099acaebad9d3
msgid "If you override the ``get_query_set()`` method and filter out any rows, Django will return incorrect results. Don't do that. A manager that filters results in ``get_query_set()`` is not appropriate for use as an automatic manager."
msgstr ""

#: ../../topics/db/managers.txt:387
# 007ceed9909644c88cc8cc7a9c959119
msgid "Set ``use_for_related_fields`` when you define the class"
msgstr ""

#: ../../topics/db/managers.txt:389
# d080f6b6dde4404ca61f5e613907f90c
msgid "The ``use_for_related_fields`` attribute must be set on the manager *class*, not on an *instance* of the class. The earlier example shows the correct way to set it, whereas the following will not work::"
msgstr ""

#: ../../topics/db/managers.txt:408
# 61ab17cca59748a7bf1048d4eaef8bd2
msgid "You also shouldn't change the attribute on the class object after it has been used in a model, since the attribute's value is processed when the model class is created and not subsequently reread. Set the attribute on the manager class when it is first defined, as in the initial example of this section and everything will work smoothly."
msgstr ""

#: ../../topics/db/models.txt:3
# d31e8abe9b6c4a45b46970974990abcc
msgid "Models"
msgstr ""

#: ../../topics/db/models.txt:11
# 68e90168fc9a4be8a957c93e341b2ac3
msgid "The basics:"
msgstr ""

#: ../../topics/db/models.txt:13
# 2933621409ea46c08ff9a290806f9ba1
msgid "Each model is a Python class that subclasses :class:`django.db.models.Model`."
msgstr ""

#: ../../topics/db/models.txt:16
# 20e79e989f4d4d20b1f5f3c325583eb1
msgid "Each attribute of the model represents a database field."
msgstr ""

#: ../../topics/db/models.txt:18
# 920355b94db84970a847c724964a0b52
msgid "With all of this, Django gives you an automatically-generated database-access API; see :doc:`/topics/db/queries`."
msgstr ""

#: ../../topics/db/models.txt:23
#: ../../topics/email.txt:17
# 7207bb119ba5430bb2eda4062e3490df
# 0488ed57b4a743d0a65b793b99b0ca59
msgid "Quick example"
msgstr ""

#: ../../topics/db/models.txt:25
# 69e320f39794495ea6e40822357d9e41
msgid "This example model defines a ``Person``, which has a ``first_name`` and ``last_name``::"
msgstr ""

#: ../../topics/db/models.txt:34
# 1e7619bed5624739bf7816fb63c56137
msgid "``first_name`` and ``last_name`` are fields_ of the model. Each field is specified as a class attribute, and each attribute maps to a database column."
msgstr ""

#: ../../topics/db/models.txt:37
# 86e6b7d00bda4dc991ec6b44c0f08f56
msgid "The above ``Person`` model would create a database table like this:"
msgstr ""

#: ../../topics/db/models.txt:47
# 9cffd938c737492fbe37c0810895a468
msgid "Some technical notes:"
msgstr ""

#: ../../topics/db/models.txt:49
# d4bfb1fc235546c79ec06ca2013b8072
msgid "The name of the table, ``myapp_person``, is automatically derived from some model metadata but can be overridden. See :ref:`table-names` for more details.."
msgstr ""

#: ../../topics/db/models.txt:53
# e5b63f8db2434f5ba0f772cae9753acc
msgid "An ``id`` field is added automatically, but this behavior can be overridden. See :ref:`automatic-primary-key-fields`."
msgstr ""

#: ../../topics/db/models.txt:56
# d87b73facce34f36add6e3d5dceefaae
msgid "The ``CREATE TABLE`` SQL in this example is formatted using PostgreSQL syntax, but it's worth noting Django uses SQL tailored to the database backend specified in your :doc:`settings file </topics/settings>`."
msgstr ""

#: ../../topics/db/models.txt:61
# 45014c4f151e447d8e35634ada40ae42
msgid "Using models"
msgstr ""

#: ../../topics/db/models.txt:63
# a86725993bbe4dc3b4f7ae29e1350d96
msgid "Once you have defined your models, you need to tell Django you're going to *use* those models. Do this by editing your settings file and changing the :setting:`INSTALLED_APPS` setting to add the name of the module that contains your ``models.py``."
msgstr ""

#: ../../topics/db/models.txt:68
# 67dd45e341c94543ac6f5e0ea9b67f9c
msgid "For example, if the models for your application live in the module ``myapp.models`` (the package structure that is created for an application by the :djadmin:`manage.py startapp <startapp>` script), :setting:`INSTALLED_APPS` should read, in part::"
msgstr ""

#: ../../topics/db/models.txt:79
# 957b3ae727094a8ab348ec5820e8c7e3
msgid "When you add new apps to :setting:`INSTALLED_APPS`, be sure to run :djadmin:`manage.py syncdb <syncdb>`."
msgstr ""

#: ../../topics/db/models.txt:83
# af3fd4065cde476a9cff09a455e65a74
msgid "Fields"
msgstr ""

#: ../../topics/db/models.txt:85
# b03afa8e31664d82b3363696e8de4a9a
msgid "The most important part of a model -- and the only required part of a model -- is the list of database fields it defines. Fields are specified by class attributes. Be careful not to choose field names that conflict with the :doc:`models API </ref/models/instances>` like ``clean``, ``save``, or ``delete``."
msgstr ""

#: ../../topics/db/models.txt:91
#: ../../topics/db/queries.txt:249
#: ../../topics/db/queries.txt:1044
#: ../../topics/db/queries.txt:1093
#: ../../topics/db/transactions.txt:121
#: ../../topics/settings.txt:182
# 1eac2f5099e740df9d65c7a243059a1c
# f165ecc82f7840ac94ea7a9abc09a1f5
# 42b30ad4477e445b9ad45121c8136eba
# b728270af32f413eae672a5f11ca1ed4
# 381cf0c896f94ac581674d1ad40d547f
# 69c25d0024464a51b08a9960df46f185
msgid "Example::"
msgstr ""

#: ../../topics/db/models.txt:105
#: ../../topics/forms/modelforms.txt:40
# 1f11c8280cf44bd4994ddbdbb16f438f
# d421db0237c24033aa780be8e920b9d0
msgid "Field types"
msgstr ""

#: ../../topics/db/models.txt:107
# c1996d53b1d44ce3bd8abaecf9f749a1
msgid "Each field in your model should be an instance of the appropriate :class:`~django.db.models.Field` class. Django uses the field class types to determine a few things:"
msgstr ""

#: ../../topics/db/models.txt:111
# 9bbb1447d64d4559929d6bbafa5503b3
msgid "The database column type (e.g. ``INTEGER``, ``VARCHAR``)."
msgstr ""

#: ../../topics/db/models.txt:113
# 0048d03b611e4028b3a77bfa4e54b772
msgid "The default :doc:`widget </ref/forms/widgets>` to use when rendering a form field (e.g. ``<input type=\"text\">``, ``<select>``)."
msgstr ""

#: ../../topics/db/models.txt:116
# 8d81085220de49678fb291caa4544799
msgid "The minimal validation requirements, used in Django's admin and in automatically-generated forms."
msgstr ""

#: ../../topics/db/models.txt:119
# 71295eea76de48858c65f311117c52f9
msgid "Django ships with dozens of built-in field types; you can find the complete list in the :ref:`model field reference <model-field-types>`. You can easily write your own fields if Django's built-in ones don't do the trick; see :doc:`/howto/custom-model-fields`."
msgstr ""

#: ../../topics/db/models.txt:125
# 8f638778530b4df9bd41fc2beb6abf17
msgid "Field options"
msgstr ""

#: ../../topics/db/models.txt:127
# 73f9c8c4ef364158a1aeec3a825c3269
msgid "Each field takes a certain set of field-specific arguments (documented in the :ref:`model field reference <model-field-types>`). For example, :class:`~django.db.models.CharField` (and its subclasses) require a :attr:`~django.db.models.CharField.max_length` argument which specifies the size of the ``VARCHAR`` database field used to store the data."
msgstr ""

#: ../../topics/db/models.txt:133
# 58a58d6b89ec436381e037fd9e9d5e55
msgid "There's also a set of common arguments available to all field types. All are optional. They're fully explained in the :ref:`reference <common-model-field-options>`, but here's a quick summary of the most often-used ones:"
msgstr ""

#: ../../topics/db/models.txt:139
# 02a08849f244449c9702ceff4c5f989e
msgid "If ``True``, Django will store empty values as ``NULL`` in the database. Default is ``False``."
msgstr ""

#: ../../topics/db/models.txt:143
# d5cffc46204e4c28b883bd16761d9571
msgid "If ``True``, the field is allowed to be blank. Default is ``False``."
msgstr ""

#: ../../topics/db/models.txt:145
# 20bc177405584823b0c70bc1b64b7373
msgid "Note that this is different than :attr:`~Field.null`. :attr:`~Field.null` is purely database-related, whereas :attr:`~Field.blank` is validation-related. If a field has :attr:`blank=True <Field.blank>`, form validation will allow entry of an empty value. If a field has :attr:`blank=False <Field.blank>`, the field will be required."
msgstr ""

#: ../../topics/db/models.txt:153
# 83248f7449074cda94701c87810b7243
msgid "An iterable (e.g., a list or tuple) of 2-tuples to use as choices for this field. If this is given, the default form widget will be a select box instead of the standard text field and will limit choices to the choices given."
msgstr ""

#: ../../topics/db/models.txt:158
# 1a7a42c9e91e44e0bca2c6349c6baf8c
msgid "A choices list looks like this::"
msgstr ""

#: ../../topics/db/models.txt:168
# a9b30425aa3540d18bfd5dd4f93646e8
msgid "The first element in each tuple is the value that will be stored in the database, the second element will be displayed by the default form widget or in a ModelChoiceField. Given an instance of a model object, the display value for a choices field can be accessed using the ``get_FOO_display`` method. For example::"
msgstr ""

#: ../../topics/db/models.txt:195
# 67d5d62c23704f77815bb0e91c90ab9f
msgid "The default value for the field. This can be a value or a callable object. If callable it will be called every time a new object is created."
msgstr ""

#: ../../topics/db/models.txt:200
# abeaa592a03e4df28724b9c7364c626b
msgid "Extra \"help\" text to be displayed with the form widget. It's useful for documentation even if your field isn't used on a form."
msgstr ""

#: ../../topics/db/models.txt:204
# 8c1d86e8b2ff4bac9de70f16a7fc6bea
msgid "If ``True``, this field is the primary key for the model."
msgstr ""

#: ../../topics/db/models.txt:206
# 99fed6f1c3d4453dbca52210da426629
msgid "If you don't specify :attr:`primary_key=True <Field.primary_key>` for any fields in your model, Django will automatically add an :class:`IntegerField` to hold the primary key, so you don't need to set :attr:`primary_key=True <Field.primary_key>` on any of your fields unless you want to override the default primary-key behavior. For more, see :ref:`automatic-primary-key-fields`."
msgstr ""

#: ../../topics/db/models.txt:214
# e9f2bc8e43054556b0a9a1ef9699de7c
msgid "If ``True``, this field must be unique throughout the table."
msgstr ""

#: ../../topics/db/models.txt:216
# 5599ac2eb3dc4497a37f88989078a0f2
msgid "Again, these are just short descriptions of the most common field options. Full details can be found in the :ref:`common model field option reference <common-model-field-options>`."
msgstr ""

#: ../../topics/db/models.txt:223
# c433ac5999e44cfd8661893d91951c29
msgid "Automatic primary key fields"
msgstr ""

#: ../../topics/db/models.txt:225
# e2fc78bc5faa45248d3f429ad67c887b
msgid "By default, Django gives each model the following field::"
msgstr ""

#: ../../topics/db/models.txt:229
# 57d8d344f8f4443083f26937f0a77e91
msgid "This is an auto-incrementing primary key."
msgstr ""

#: ../../topics/db/models.txt:231
# 251ce3ca44d341f0ae4f8f1649a8ebe8
msgid "If you'd like to specify a custom primary key, just specify :attr:`primary_key=True <Field.primary_key>` on one of your fields. If Django sees you've explicitly set :attr:`Field.primary_key`, it won't add the automatic ``id`` column."
msgstr ""

#: ../../topics/db/models.txt:236
# 482cb9c55f34471c88c2d3159aa05aa3
msgid "Each model requires exactly one field to have :attr:`primary_key=True <Field.primary_key>`."
msgstr ""

#: ../../topics/db/models.txt:242
# d8c0a098bea6465ebb0a0562b2c3323e
msgid "Verbose field names"
msgstr ""

#: ../../topics/db/models.txt:244
# 49ce14cc9fe74dcea3ff3be1e5e7b9df
msgid "Each field type, except for :class:`~django.db.models.ForeignKey`, :class:`~django.db.models.ManyToManyField` and :class:`~django.db.models.OneToOneField`, takes an optional first positional argument -- a verbose name. If the verbose name isn't given, Django will automatically create it using the field's attribute name, converting underscores to spaces."
msgstr ""

#: ../../topics/db/models.txt:251
# d81ecf126c634080a9e75f58ebd001de
msgid "In this example, the verbose name is ``\"person's first name\"``::"
msgstr ""

#: ../../topics/db/models.txt:255
# 836aa507400849ae919fca9918f7bb91
msgid "In this example, the verbose name is ``\"first name\"``::"
msgstr ""

#: ../../topics/db/models.txt:259
# a13304c1f6e94f95981aac3c883fa4cd
msgid ":class:`~django.db.models.ForeignKey`, :class:`~django.db.models.ManyToManyField` and :class:`~django.db.models.OneToOneField` require the first argument to be a model class, so use the :attr:`~Field.verbose_name` keyword argument::"
msgstr ""

#: ../../topics/db/models.txt:268
# b9762c35fbdc4209aab90c993c9f0a14
msgid "The convention is not to capitalize the first letter of the :attr:`~Field.verbose_name`. Django will automatically capitalize the first letter where it needs to."
msgstr ""

#: ../../topics/db/models.txt:273
# 7d4a38c4d9354a0c94a8060bb2d192f9
msgid "Relationships"
msgstr ""

#: ../../topics/db/models.txt:275
# a7d387b3b2594178beb9a773371c351f
msgid "Clearly, the power of relational databases lies in relating tables to each other. Django offers ways to define the three most common types of database relationships: many-to-one, many-to-many and one-to-one."
msgstr ""

#: ../../topics/db/models.txt:282
# 81087b127fb4421094988989c5498766
msgid "To define a many-to-one relationship, use :class:`django.db.models.ForeignKey`. You use it just like any other :class:`~django.db.models.Field` type: by including it as a class attribute of your model."
msgstr ""

#: ../../topics/db/models.txt:286
# 0f71606278b94f0fa5186cc20a67bcad
msgid ":class:`~django.db.models.ForeignKey` requires a positional argument: the class to which the model is related."
msgstr ""

#: ../../topics/db/models.txt:289
# 0458931b8aca4fb28b4df3b6d936bd40
msgid "For example, if a ``Car`` model has a ``Manufacturer`` -- that is, a ``Manufacturer`` makes multiple cars but each ``Car`` only has one ``Manufacturer`` -- use the following definitions::"
msgstr ""

#: ../../topics/db/models.txt:300
# 38fde97e31954fb583b4d305f78af3bf
msgid "You can also create :ref:`recursive relationships <recursive-relationships>` (an object with a many-to-one relationship to itself) and :ref:`relationships to models not yet defined <lazy-relationships>`; see :ref:`the model field reference <ref-foreignkey>` for details."
msgstr ""

#: ../../topics/db/models.txt:305
# d82307dd1d2343c793f07f069f6ebcf4
msgid "It's suggested, but not required, that the name of a :class:`~django.db.models.ForeignKey` field (``manufacturer`` in the example above) be the name of the model, lowercase. You can, of course, call the field whatever you want. For example::"
msgstr ""

#: ../../topics/db/models.txt:316
# a47d555796e14226bae638e871186493
msgid ":class:`~django.db.models.ForeignKey` fields accept a number of extra arguments which are explained in :ref:`the model field reference <foreign-key-arguments>`. These options help define how the relationship should work; all are optional."
msgstr ""

#: ../../topics/db/models.txt:321
# 6b35074bf5e34e7a9b88b97f5b17e03a
msgid "For details on accessing backwards-related objects, see the :ref:`Following relationships backward example <backwards-related-objects>`."
msgstr ""

#: ../../topics/db/models.txt:324
# 577b3c0547c84f07bf732d8c5ce23bca
msgid "For sample code, see the :doc:`Many-to-one relationship model example </topics/db/examples/many_to_one>`."
msgstr ""

#: ../../topics/db/models.txt:331
# 68590a7ce0c041a791dfe5de6a2140a1
msgid "To define a many-to-many relationship, use :class:`~django.db.models.ManyToManyField`. You use it just like any other :class:`~django.db.models.Field` type: by including it as a class attribute of your model."
msgstr ""

#: ../../topics/db/models.txt:336
# fca0423caefa4bbeafaa0f9126fd9404
msgid ":class:`~django.db.models.ManyToManyField` requires a positional argument: the class to which the model is related."
msgstr ""

#: ../../topics/db/models.txt:339
# 025aed435f834bed94cc603e9da3391c
msgid "For example, if a ``Pizza`` has multiple ``Topping`` objects -- that is, a ``Topping`` can be on multiple pizzas and each ``Pizza`` has multiple toppings -- here's how you'd represent that::"
msgstr ""

#: ../../topics/db/models.txt:350
# 62f2d7d794bf423cb06fba3b94f3c698
msgid "As with :class:`~django.db.models.ForeignKey`, you can also create :ref:`recursive relationships <recursive-relationships>` (an object with a many-to-many relationship to itself) and :ref:`relationships to models not yet defined <lazy-relationships>`; see :ref:`the model field reference <ref-manytomany>` for details."
msgstr ""

#: ../../topics/db/models.txt:356
# 16252f5b22a94fda82eafd8e06dd59f3
msgid "It's suggested, but not required, that the name of a :class:`~django.db.models.ManyToManyField` (``toppings`` in the example above) be a plural describing the set of related model objects."
msgstr ""

#: ../../topics/db/models.txt:360
# 40697069709f4ddb9484c4329176da9d
msgid "It doesn't matter which model has the :class:`~django.db.models.ManyToManyField`, but you should only put it in one of the models -- not both."
msgstr ""

#: ../../topics/db/models.txt:364
# c9200ae633524ff1a18559c8bf48c453
msgid "Generally, :class:`~django.db.models.ManyToManyField` instances should go in the object that's going to be edited on a form. In the above example, ``toppings`` is in ``Pizza`` (rather than ``Topping`` having a ``pizzas`` :class:`~django.db.models.ManyToManyField` ) because it's more natural to think about a pizza having toppings than a topping being on multiple pizzas. The way it's set up above, the ``Pizza`` form would let users select the toppings."
msgstr ""

#: ../../topics/db/models.txt:373
# 4070ef184ea54aab8b186ec23cb8032d
msgid "See the :doc:`Many-to-many relationship model example </topics/db/examples/many_to_many>` for a full example."
msgstr ""

#: ../../topics/db/models.txt:376
# fe237549ee894e85add133ec17b236ef
msgid ":class:`~django.db.models.ManyToManyField` fields also accept a number of extra arguments which are explained in :ref:`the model field reference <manytomany-arguments>`. These options help define how the relationship should work; all are optional."
msgstr ""

#: ../../topics/db/models.txt:384
# 73b87feba030499aac9fdfa802f5ac62
msgid "Extra fields on many-to-many relationships"
msgstr ""

#: ../../topics/db/models.txt:386
# 0d1836169a064952bbd2d7c2af1864be
msgid "When you're only dealing with simple many-to-many relationships such as mixing and matching pizzas and toppings, a standard :class:`~django.db.models.ManyToManyField` is all you need. However, sometimes you may need to associate data with the relationship between two models."
msgstr ""

#: ../../topics/db/models.txt:391
# a8e6e2b1b76b4682a6c071e46ed3dfa0
msgid "For example, consider the case of an application tracking the musical groups which musicians belong to. There is a many-to-many relationship between a person and the groups of which they are a member, so you could use a :class:`~django.db.models.ManyToManyField` to represent this relationship. However, there is a lot of detail about the membership that you might want to collect, such as the date at which the person joined the group."
msgstr ""

#: ../../topics/db/models.txt:398
# c2ebcb71d87a4fbc93068b999551f083
msgid "For these situations, Django allows you to specify the model that will be used to govern the many-to-many relationship. You can then put extra fields on the intermediate model. The intermediate model is associated with the :class:`~django.db.models.ManyToManyField` using the :attr:`through <ManyToManyField.through>` argument to point to the model that will act as an intermediary. For our musician example, the code would look something like this::"
msgstr ""

#: ../../topics/db/models.txt:425
# ae2e3d87c030401b9021a4b9543d2143
msgid "When you set up the intermediary model, you explicitly specify foreign keys to the models that are involved in the ManyToMany relation. This explicit declaration defines how the two models are related."
msgstr ""

#: ../../topics/db/models.txt:429
# 47a95c24381148a4b54c50c8f62347c8
msgid "There are a few restrictions on the intermediate model:"
msgstr ""

#: ../../topics/db/models.txt:431
# 2e0414b876dd4e39a79af9a3157166fb
msgid "Your intermediate model must contain one - and *only* one - foreign key to the target model (this would be ``Person`` in our example). If you have more than one foreign key, a validation error will be raised."
msgstr ""

#: ../../topics/db/models.txt:435
# 3d69c7e5d45545a790a50f93bfd27718
msgid "Your intermediate model must contain one - and *only* one - foreign key to the source model (this would be ``Group`` in our example). If you have more than one foreign key, a validation error will be raised."
msgstr ""

#: ../../topics/db/models.txt:439
# 72f90b28b5fe4ca09b6db941bb1bec5a
msgid "The only exception to this is a model which has a many-to-many relationship to itself, through an intermediary model. In this case, two foreign keys to the same model are permitted, but they will be treated as the two (different) sides of the many-to-many relation."
msgstr ""

#: ../../topics/db/models.txt:445
# 1735728f62ae4726b5195761d6bca5ef
msgid "When defining a many-to-many relationship from a model to itself, using an intermediary model, you *must* use :attr:`symmetrical=False <ManyToManyField.symmetrical>` (see :ref:`the model field reference <manytomany-arguments>`)."
msgstr ""

#: ../../topics/db/models.txt:450
# 9b88f02458bc4a0888fe181fab11e698
msgid "Now that you have set up your :class:`~django.db.models.ManyToManyField` to use your intermediary model (``Membership``, in this case), you're ready to start creating some many-to-many relationships. You do this by creating instances of the intermediate model::"
msgstr ""

#: ../../topics/db/models.txt:472
# 5629ba1947b44191b1fe29b62e858aa6
msgid "Unlike normal many-to-many fields, you *can't* use ``add``, ``create``, or assignment (i.e., ``beatles.members = [...]``) to create relationships::"
msgstr ""

#: ../../topics/db/models.txt:482
# 9308987d4edb49389c58a8f86fcf676c
msgid "Why? You can't just create a relationship between a ``Person`` and a ``Group`` - you need to specify all the detail for the relationship required by the ``Membership`` model. The simple ``add``, ``create`` and assignment calls don't provide a way to specify this extra detail. As a result, they are disabled for many-to-many relationships that use an intermediate model. The only way to create this type of relationship is to create instances of the intermediate model."
msgstr ""

#: ../../topics/db/models.txt:490
# 71a93d2f1b3c46ed9055e546718482ee
msgid "The :meth:`~django.db.models.fields.related.RelatedManager.remove` method is disabled for similar reasons. However, the :meth:`~django.db.models.fields.related.RelatedManager.clear` method can be used to remove all many-to-many relationships for an instance::"
msgstr ""

#: ../../topics/db/models.txt:498
# 1b7ce1de67d048b6826abfccbc3a6a1a
msgid "Once you have established the many-to-many relationships by creating instances of your intermediate model, you can issue queries. Just as with normal many-to-many relationships, you can query using the attributes of the many-to-many-related model::"
msgstr ""

#: ../../topics/db/models.txt:507
# 731bea9eaee14659926b901677220d04
msgid "As you are using an intermediate model, you can also query on its attributes::"
msgstr ""

#: ../../topics/db/models.txt:515
# 3631ab50cd1f432f961d617262aef7ab
msgid "If you need to access a membership's information you may do so by directly querying the ``Membership`` model::"
msgstr ""

#: ../../topics/db/models.txt:524
# 762df2010e1c4f1c89640f72c9fc978a
msgid "Another way to access the same information is by querying the :ref:`many-to-many reverse relationship<m2m-reverse-relationships>` from a ``Person`` object::"
msgstr ""

#: ../../topics/db/models.txt:538
# 86c517ea40bd4604bed5982552c2f158
msgid "To define a one-to-one relationship, use :class:`~django.db.models.OneToOneField`. You use it just like any other ``Field`` type: by including it as a class attribute of your model."
msgstr ""

#: ../../topics/db/models.txt:542
# 82fbe7eecfc14ac8a76faf1a61a3d297
msgid "This is most useful on the primary key of an object when that object \"extends\" another object in some way."
msgstr ""

#: ../../topics/db/models.txt:545
# 18db3d87b68747f0b73dbdc07022815c
msgid ":class:`~django.db.models.OneToOneField` requires a positional argument: the class to which the model is related."
msgstr ""

#: ../../topics/db/models.txt:548
# 26faee45cbc04d78b080dda6d9736acc
msgid "For example, if you were building a database of \"places\", you would build pretty standard stuff such as address, phone number, etc. in the database. Then, if you wanted to build a database of restaurants on top of the places, instead of repeating yourself and replicating those fields in the ``Restaurant`` model, you could make ``Restaurant`` have a :class:`~django.db.models.OneToOneField` to ``Place`` (because a restaurant \"is a\" place; in fact, to handle this you'd typically use :ref:`inheritance <model-inheritance>`, which involves an implicit one-to-one relation)."
msgstr ""

#: ../../topics/db/models.txt:558
# 9b17110736104599877cf145838d6959
msgid "As with :class:`~django.db.models.ForeignKey`, a :ref:`recursive relationship <recursive-relationships>` can be defined and :ref:`references to as-yet undefined models <lazy-relationships>` can be made; see :ref:`the model field reference <ref-onetoone>` for details."
msgstr ""

#: ../../topics/db/models.txt:566
# 2b1bd9b1f437425b88e9ccf8189ee286
msgid "See the :doc:`One-to-one relationship model example </topics/db/examples/one_to_one>` for a full example."
msgstr ""

#: ../../topics/db/models.txt:569
# 24d0a2e3bd3149458b0a0ec98a40c5ca
msgid ":class:`~django.db.models.OneToOneField` fields also accept one specific, optional ``parent_link`` argument described in the :ref:`model field reference <ref-onetoone>`."
msgstr ""

#: ../../topics/db/models.txt:573
# 8542f6f57d5746758096a77afce24de9
msgid ":class:`~django.db.models.OneToOneField` classes used to automatically become the primary key on a model. This is no longer true (although you can manually pass in the :attr:`~django.db.models.Field.primary_key` argument if you like). Thus, it's now possible to have multiple fields of type :class:`~django.db.models.OneToOneField` on a single model."
msgstr ""

#: ../../topics/db/models.txt:580
# 51c830ab2f274438a33bfd0c2241c036
msgid "Models across files"
msgstr ""

#: ../../topics/db/models.txt:582
# 7930f5cd60164b36a827ed678d1ee7c1
msgid "It's perfectly OK to relate a model to one from another app. To do this, import the related model at the top of the file where your model is defined. Then, just refer to the other model class wherever needed. For example::"
msgstr ""

#: ../../topics/db/models.txt:593
# ccf0f86637ab4c829b2ba827a34ae1ba
msgid "Field name restrictions"
msgstr ""

#: ../../topics/db/models.txt:595
# e357270402194d6b81178c40f751692c
msgid "Django places only two restrictions on model field names:"
msgstr ""

#: ../../topics/db/models.txt:597
# c29b270ffa904f6c9b931dee491b92cb
msgid "A field name cannot be a Python reserved word, because that would result in a Python syntax error. For example::"
msgstr ""

#: ../../topics/db/models.txt:603
# 11cfe8da00654738a6285b22598c52be
msgid "A field name cannot contain more than one underscore in a row, due to the way Django's query lookup syntax works. For example::"
msgstr ""

#: ../../topics/db/models.txt:609
# b5b334ba168e45a58985d924ba33bae1
msgid "These limitations can be worked around, though, because your field name doesn't necessarily have to match your database column name. See the :attr:`~Field.db_column` option."
msgstr ""

#: ../../topics/db/models.txt:613
# a76974503026461cbd689a666667f975
msgid "SQL reserved words, such as ``join``, ``where`` or ``select``, *are* allowed as model field names, because Django escapes all database table names and column names in every underlying SQL query. It uses the quoting syntax of your particular database engine."
msgstr ""

#: ../../topics/db/models.txt:619
# 253e0b79bf384415b2a96201bfb58c96
msgid "Custom field types"
msgstr ""

#: ../../topics/db/models.txt:621
# 24b1adac90b74ef4ac7dc76650f491ae
msgid "If one of the existing model fields cannot be used to fit your purposes, or if you wish to take advantage of some less common database column types, you can create your own field class. Full coverage of creating your own fields is provided in :doc:`/howto/custom-model-fields`."
msgstr ""

#: ../../topics/db/models.txt:629
# efda4e6d80af4e0e8d02fa3890c84dfe
msgid "Meta options"
msgstr ""

#: ../../topics/db/models.txt:631
# ed3fe37696d344f083b0c690e61a325d
msgid "Give your model metadata by using an inner ``class Meta``, like so::"
msgstr ""

#: ../../topics/db/models.txt:640
# 069ab26958cb4464bd28934dc4127034
msgid "Model metadata is \"anything that's not a field\", such as ordering options (:attr:`~Options.ordering`), database table name (:attr:`~Options.db_table`), or human-readable singular and plural names (:attr:`~Options.verbose_name` and :attr:`~Options.verbose_name_plural`). None are required, and adding ``class Meta`` to a model is completely optional."
msgstr ""

#: ../../topics/db/models.txt:646
# 9841d516f3074b0aa05513e274bb9d6c
msgid "A complete list of all possible ``Meta`` options can be found in the :doc:`model option reference </ref/models/options>`."
msgstr ""

#: ../../topics/db/models.txt:652
# e4531dca349345989b12f0d06d8e7f76
msgid "Model methods"
msgstr ""

#: ../../topics/db/models.txt:654
# b193e600e19449cfb2c2aa04510cf536
msgid "Define custom methods on a model to add custom \"row-level\" functionality to your objects. Whereas :class:`~django.db.models.Manager` methods are intended to do \"table-wide\" things, model methods should act on a particular model instance."
msgstr ""

#: ../../topics/db/models.txt:658
# 9a62f39ea2104b7fa1b11a0a0ea0acf6
msgid "This is a valuable technique for keeping business logic in one place -- the model."
msgstr ""

#: ../../topics/db/models.txt:661
# 6722f255dcbc4030ac59b1ae9759e31e
msgid "For example, this model has a few custom methods::"
msgstr ""

#: ../../topics/db/models.txt:692
# c553793cee644e7b896b9a05aff98dfb
msgid "The last method in this example is a :term:`property`."
msgstr ""

#: ../../topics/db/models.txt:694
# 12eb5562c4244ea1840c6c9615bddc1b
msgid "The :doc:`model instance reference </ref/models/instances>` has a complete list of :ref:`methods automatically given to each model <model-instance-methods>`. You can override most of these -- see `overriding predefined model methods`_, below -- but there are a couple that you'll almost always want to define:"
msgstr ""

#: ../../topics/db/models.txt:700
# 1a8c78197fd64fed87841a81453e4e14
msgid "A Python \"magic method\" that returns a unicode \"representation\" of any object. This is what Python and Django will use whenever a model instance needs to be coerced and displayed as a plain string. Most notably, this happens when you display an object in an interactive console or in the admin."
msgstr ""

#: ../../topics/db/models.txt:706
# 81d970ee74ef492484fa67297c59abdc
msgid "You'll always want to define this method; the default isn't very helpful at all."
msgstr ""

#: ../../topics/db/models.txt:710
# 221e93cb5cc5421992b1daac2e3054af
msgid "This tells Django how to calculate the URL for an object. Django uses this in its admin interface, and any time it needs to figure out a URL for an object."
msgstr ""

#: ../../topics/db/models.txt:714
# 7087bd256fe0449b8de0c14722f413d3
msgid "Any object that has a URL that uniquely identifies it should define this method."
msgstr ""

#: ../../topics/db/models.txt:720
# 31060f0b5c2a48acba57502f8fefda92
msgid "Overriding predefined model methods"
msgstr ""

#: ../../topics/db/models.txt:722
# 7de16eca610e4218a33820f26a1cbc69
msgid "There's another set of :ref:`model methods <model-instance-methods>` that encapsulate a bunch of database behavior that you'll want to customize. In particular you'll often want to change the way :meth:`~Model.save` and :meth:`~Model.delete` work."
msgstr ""

#: ../../topics/db/models.txt:727
# 885b5776c1c4489abf7d6a92d62a3ec1
msgid "You're free to override these methods (and any other model method) to alter behavior."
msgstr ""

#: ../../topics/db/models.txt:730
# a56e7d2750624b9bbd0d4d8bf6256261
msgid "A classic use-case for overriding the built-in methods is if you want something to happen whenever you save an object. For example (see :meth:`~Model.save` for documentation of the parameters it accepts)::"
msgstr ""

#: ../../topics/db/models.txt:743
# d0197c48032b40409f6255aa7770226f
msgid "You can also prevent saving::"
msgstr ""

#: ../../topics/db/models.txt:755
# c8c2ae28a6f24bd38fe19c72ba1594e3
msgid "It's important to remember to call the superclass method -- that's that ``super(Blog, self).save(*args, **kwargs)`` business -- to ensure that the object still gets saved into the database. If you forget to call the superclass method, the default behavior won't happen and the database won't get touched."
msgstr ""

#: ../../topics/db/models.txt:761
# 82ad8da71fce494e81d5cb9c67ef1714
msgid "It's also important that you pass through the arguments that can be passed to the model method -- that's what the ``*args, **kwargs`` bit does. Django will, from time to time, extend the capabilities of built-in model methods, adding new arguments. If you use ``*args, **kwargs`` in your method definitions, you are guaranteed that your code will automatically support those arguments when they are added."
msgstr ""

#: ../../topics/db/models.txt:770
# 203038bc887140f38d1f604763ae7205
msgid "Note that the :meth:`~Model.delete()` method for an object is not necessarily called when :ref:`deleting objects in bulk using a QuerySet<topics-db-queries-delete>`. To ensure customized delete logic gets executed, you can use :data:`~django.db.models.signals.pre_delete` and/or :data:`~django.db.models.signals.post_delete` signals."
msgstr ""

#: ../../topics/db/models.txt:776
# 187a18385d9a4711a2d8a877ff480429
msgid "Unfortunately, there isn't a workaround when :meth:`creating<django.db.models.query.QuerySet.bulk_create>` or :meth:`updating<django.db.models.query.QuerySet.update>` objects in bulk, since none of :meth:`~Model.save()`, :data:`~django.db.models.signals.pre_save`, and :data:`~django.db.models.signals.post_save` are called."
msgstr ""

#: ../../topics/db/models.txt:784
# cb997891ef0a43e99d864752b3245221
msgid "Executing custom SQL"
msgstr ""

#: ../../topics/db/models.txt:786
# 021f261367bc453d986cbf509895cb55
msgid "Another common pattern is writing custom SQL statements in model methods and module-level methods. For more details on using raw SQL, see the documentation on :doc:`using raw SQL</topics/db/sql>`."
msgstr ""

#: ../../topics/db/models.txt:793
# c7ab9b15c5014ab68ed4ebc710a3c831
msgid "Model inheritance"
msgstr ""

#: ../../topics/db/models.txt:795
# bc124ab5b10a41dc97f974f99806824d
msgid "Model inheritance in Django works almost identically to the way normal class inheritance works in Python. The only decision you have to make is whether you want the parent models to be models in their own right (with their own database tables), or if the parents are just holders of common information that will only be visible through the child models."
msgstr ""

#: ../../topics/db/models.txt:802
# 1eabff6101fd47bea417951d56a37721
msgid "There are three styles of inheritance that are possible in Django."
msgstr ""

#: ../../topics/db/models.txt:804
# 67c849cb1788403080414ac0b4ce0f51
msgid "Often, you will just want to use the parent class to hold information that you don't want to have to type out for each child model. This class isn't going to ever be used in isolation, so :ref:`abstract-base-classes` are what you're after."
msgstr ""

#: ../../topics/db/models.txt:808
# a735b68684e940af9aa0e9cbd502b7d3
msgid "If you're subclassing an existing model (perhaps something from another application entirely) and want each model to have its own database table, :ref:`multi-table-inheritance` is the way to go."
msgstr ""

#: ../../topics/db/models.txt:811
# daf5608ef09b4c2691dd158658ce2509
msgid "Finally, if you only want to modify the Python-level behavior of a model, without changing the models fields in any way, you can use :ref:`proxy-models`."
msgstr ""

#: ../../topics/db/models.txt:818
# 3c6db0e56c1548e582ccdd9e70631522
msgid "Abstract base classes"
msgstr ""

#: ../../topics/db/models.txt:820
# 00738c9a2a804985adcc1336b3ad2513
msgid "Abstract base classes are useful when you want to put some common information into a number of other models. You write your base class and put ``abstract=True`` in the :ref:`Meta <meta-options>` class. This model will then not be used to create any database table. Instead, when it is used as a base class for other models, its fields will be added to those of the child class. It is an error to have fields in the abstract base class with the same name as those in the child (and Django will raise an exception)."
msgstr ""

#: ../../topics/db/models.txt:829
#: ../../topics/i18n/translation.txt:601
# e2950c4ab15945668959f2af75ee8731
# 431c092ed7e54917816f8430e9b1fa75
msgid "An example::"
msgstr ""

#: ../../topics/db/models.txt:841
# 6a15c31b21734e42b83bcd6602c6e8aa
msgid "The ``Student`` model will have three fields: ``name``, ``age`` and ``home_group``. The ``CommonInfo`` model cannot be used as a normal Django model, since it is an abstract base class. It does not generate a database table or have a manager, and cannot be instantiated or saved directly."
msgstr ""

#: ../../topics/db/models.txt:846
# 184454daa89a4feaa6cff5f5a185fd07
msgid "For many uses, this type of model inheritance will be exactly what you want. It provides a way to factor out common information at the Python level, whilst still only creating one database table per child model at the database level."
msgstr ""

#: ../../topics/db/models.txt:851
# e25aeaad3139438681e382122a20b7e6
msgid "``Meta`` inheritance"
msgstr ""

#: ../../topics/db/models.txt:853
# c5bfd4b460684e08aeeef9bdae500057
msgid "When an abstract base class is created, Django makes any :ref:`Meta <meta-options>` inner class you declared in the base class available as an attribute. If a child class does not declare its own :ref:`Meta <meta-options>` class, it will inherit the parent's :ref:`Meta <meta-options>`. If the child wants to extend the parent's :ref:`Meta <meta-options>` class, it can subclass it. For example::"
msgstr ""

#: ../../topics/db/models.txt:870
# f673098d04c447b5bde59205acc712e4
msgid "Django does make one adjustment to the :ref:`Meta <meta-options>` class of an abstract base class: before installing the :ref:`Meta <meta-options>` attribute, it sets ``abstract=False``. This means that children of abstract base classes don't automatically become abstract classes themselves. Of course, you can make an abstract base class that inherits from another abstract base class. You just need to remember to explicitly set ``abstract=True`` each time."
msgstr ""

#: ../../topics/db/models.txt:877
# 9a60bb55eb3d4d4aac00bc4f18236f71
msgid "Some attributes won't make sense to include in the :ref:`Meta <meta-options>` class of an abstract base class. For example, including ``db_table`` would mean that all the child classes (the ones that don't specify their own :ref:`Meta <meta-options>`) would use the same database table, which is almost certainly not what you want."
msgstr ""

#: ../../topics/db/models.txt:885
# 76255c06fe1e4735a0512500cf8a4b3c
msgid "Be careful with ``related_name``"
msgstr ""

#: ../../topics/db/models.txt:887
# 7ee747b8165448e1bf23b5091da3b684
msgid "If you are using the :attr:`~django.db.models.ForeignKey.related_name` attribute on a ``ForeignKey`` or ``ManyToManyField``, you must always specify a *unique* reverse name for the field. This would normally cause a problem in abstract base classes, since the fields on this class are included into each of the child classes, with exactly the same values for the attributes (including :attr:`~django.db.models.ForeignKey.related_name`) each time."
msgstr ""

#: ../../topics/db/models.txt:893
# d617eae281024d93862820a902ef38ad
msgid "To work around this problem, when you are using :attr:`~django.db.models.ForeignKey.related_name` in an abstract base class (only), part of the name should contain ``'%(app_label)s'`` and ``'%(class)s'``."
msgstr ""

#: ../../topics/db/models.txt:897
# ce2bb5b7c6c04e978db8ca7df9dc5b02
msgid "``'%(class)s'`` is replaced by the lower-cased name of the child class that the field is used in."
msgstr ""

#: ../../topics/db/models.txt:899
# df7bb609e62c43668e4eac2ccfd8f1b5
msgid "``'%(app_label)s'`` is replaced by the lower-cased name of the app the child class is contained within. Each installed application name must be unique and the model class names within each app must also be unique, therefore the resulting name will end up being different."
msgstr ""

#: ../../topics/db/models.txt:904
# 26190731f02e4508b3da80b4ad529f29
msgid "For example, given an app ``common/models.py``::"
msgstr ""

#: ../../topics/db/models.txt:918
# c71c8201c71743dfbc979d77a7d68d92
msgid "Along with another app ``rare/models.py``::"
msgstr ""

#: ../../topics/db/models.txt:925
# 4961f416827540869332445ef9e4425a
msgid "The reverse name of the ``common.ChildA.m2m`` field will be ``common_childa_related``, whilst the reverse name of the ``common.ChildB.m2m`` field will be ``common_childb_related``, and finally the reverse name of the ``rare.ChildB.m2m`` field will be ``rare_childb_related``. It is up to you how you use the ``'%(class)s'`` and ``'%(app_label)s`` portion to construct your related name, but if you forget to use it, Django will raise errors when you validate your models (or run :djadmin:`syncdb`)."
msgstr ""

#: ../../topics/db/models.txt:933
# f98468aebf164aba898ba5bebb9be152
msgid "If you don't specify a :attr:`~django.db.models.ForeignKey.related_name` attribute for a field in an abstract base class, the default reverse name will be the name of the child class followed by ``'_set'``, just as it normally would be if you'd declared the field directly on the child class. For example, in the above code, if the :attr:`~django.db.models.ForeignKey.related_name` attribute was omitted, the reverse name for the ``m2m`` field would be ``childa_set`` in the ``ChildA`` case and ``childb_set`` for the ``ChildB`` field."
msgstr ""

#: ../../topics/db/models.txt:945
# d7f2874eb2274099b970e92d895de501
msgid "Multi-table inheritance"
msgstr ""

#: ../../topics/db/models.txt:947
# d75c26b4b4eb4ea1908bd579603cc607
msgid "The second type of model inheritance supported by Django is when each model in the hierarchy is a model all by itself. Each model corresponds to its own database table and can be queried and created individually. The inheritance relationship introduces links between the child model and each of its parents (via an automatically-created :class:`~django.db.models.OneToOneField`). For example::"
msgstr ""

#: ../../topics/db/models.txt:962
# c43da9a7b5964750ba9aeab4a791f624
msgid "All of the fields of ``Place`` will also be available in ``Restaurant``, although the data will reside in a different database table. So these are both possible::"
msgstr ""

#: ../../topics/db/models.txt:969
# 724efe4798084c15b31395e5b0431712
msgid "If you have a ``Place`` that is also a ``Restaurant``, you can get from the ``Place`` object to the ``Restaurant`` object by using the lower-case version of the model name::"
msgstr ""

#: ../../topics/db/models.txt:978
# 6d3b92b5869544f8b5264fcf4babc993
msgid "However, if ``p`` in the above example was *not* a ``Restaurant`` (it had been created directly as a ``Place`` object or was the parent of some other class), referring to ``p.restaurant`` would raise a Restaurant.DoesNotExist exception."
msgstr ""

#: ../../topics/db/models.txt:983
# 7614d517f0ae4c1f8ce07b05decb4cd8
msgid "``Meta`` and multi-table inheritance"
msgstr ""

#: ../../topics/db/models.txt:985
# 3466a611cce34d44b227b8c90a8491c0
msgid "In the multi-table inheritance situation, it doesn't make sense for a child class to inherit from its parent's :ref:`Meta <meta-options>` class. All the :ref:`Meta <meta-options>` options have already been applied to the parent class and applying them again would normally only lead to contradictory behavior (this is in contrast with the abstract base class case, where the base class doesn't exist in its own right)."
msgstr ""

#: ../../topics/db/models.txt:992
# 0371e96671fa4680899f95c50983fb99
msgid "So a child model does not have access to its parent's :ref:`Meta <meta-options>` class. However, there are a few limited cases where the child inherits behavior from the parent: if the child does not specify an :attr:`~django.db.models.Options.ordering` attribute or a :attr:`~django.db.models.Options.get_latest_by` attribute, it will inherit these from its parent."
msgstr ""

#: ../../topics/db/models.txt:999
# 99fa954b7270402c8d83b40365104b62
msgid "If the parent has an ordering and you don't want the child to have any natural ordering, you can explicitly disable it::"
msgstr ""

#: ../../topics/db/models.txt:1009
# d9edff9582004fe4b320724e5be6d8e5
msgid "Inheritance and reverse relations"
msgstr ""

#: ../../topics/db/models.txt:1011
# f047352093864af3b9b90abca594f8ad
msgid "Because multi-table inheritance uses an implicit :class:`~django.db.models.OneToOneField` to link the child and the parent, it's possible to move from the parent down to the child, as in the above example. However, this uses up the name that is the default :attr:`~django.db.models.ForeignKey.related_name` value for :class:`~django.db.models.ForeignKey` and :class:`~django.db.models.ManyToManyField` relations.  If you are putting those types of relations on a subclass of another model, you **must** specify the :attr:`~django.db.models.ForeignKey.related_name` attribute on each such field. If you forget, Django will raise an error when you run :djadmin:`validate` or :djadmin:`syncdb`."
msgstr ""

#: ../../topics/db/models.txt:1024
# faf01f01bcc34baf923a085e947f592d
msgid "For example, using the above ``Place`` class again, let's create another subclass with a :class:`~django.db.models.ManyToManyField`::"
msgstr ""

#: ../../topics/db/models.txt:1033
# fab0680a282a4e99b0b6329ed6d452cc
msgid "Specifying the parent link field"
msgstr ""

#: ../../topics/db/models.txt:1035
# 72cdc23643db47e9b6669cfcf4a7f16e
msgid "As mentioned, Django will automatically create a :class:`~django.db.models.OneToOneField` linking your child class back any non-abstract parent models. If you want to control the name of the attribute linking back to the parent, you can create your own :class:`~django.db.models.OneToOneField` and set :attr:`parent_link=True <django.db.models.OneToOneField.parent_link>` to indicate that your field is the link back to the parent class."
msgstr ""

#: ../../topics/db/models.txt:1046
# c923250c30d44acfa742558325b67ec3
msgid "Proxy models"
msgstr ""

#: ../../topics/db/models.txt:1048
# 0ca4c35021cd4aeba83e527cced32fc0
msgid "When using :ref:`multi-table inheritance <multi-table-inheritance>`, a new database table is created for each subclass of a model. This is usually the desired behavior, since the subclass needs a place to store any additional data fields that are not present on the base class. Sometimes, however, you only want to change the Python behavior of a model -- perhaps to change the default manager, or add a new method."
msgstr ""

#: ../../topics/db/models.txt:1055
# 7c0094b7ffc7423ab8be740bd0eca621
msgid "This is what proxy model inheritance is for: creating a *proxy* for the original model. You can create, delete and update instances of the proxy model and all the data will be saved as if you were using the original (non-proxied) model. The difference is that you can change things like the default model ordering or the default manager in the proxy, without having to alter the original."
msgstr ""

#: ../../topics/db/models.txt:1062
# 24e5893d7ade48b8a797b0a91f56384a
msgid "Proxy models are declared like normal models. You tell Django that it's a proxy model by setting the :attr:`~django.db.models.Options.proxy` attribute of the ``Meta`` class to ``True``."
msgstr ""

#: ../../topics/db/models.txt:1066
# 7e6901a426ed48cb96a54295395223cc
msgid "For example, suppose you want to add a method to the ``Person`` model described above. You can do it like this::"
msgstr ""

#: ../../topics/db/models.txt:1076
# 5f3ec17783364dc0837853293a416d47
msgid "The ``MyPerson`` class operates on the same database table as its parent ``Person`` class. In particular, any new instances of ``Person`` will also be accessible through ``MyPerson``, and vice-versa::"
msgstr ""

#: ../../topics/db/models.txt:1084
# a42262a54dd64b05974472596abc0189
msgid "You could also use a proxy model to define a different default ordering on a model. You might not always want to order the ``Person`` model, but regularly order by the ``last_name`` attribute when you use the proxy. This is easy::"
msgstr ""

#: ../../topics/db/models.txt:1093
# 05c00f11c3db4d59bab185d27abfc18c
msgid "Now normal ``Person`` queries will be unordered and ``OrderedPerson`` queries will be ordered by ``last_name``."
msgstr ""

#: ../../topics/db/models.txt:1097
# aa6fa590e4e24eb8af44974ef2aa7abb
msgid "QuerySets still return the model that was requested"
msgstr ""

#: ../../topics/db/models.txt:1099
# 19f2f5e45f6a4d33b24d24f51ae86eeb
msgid "There is no way to have Django return, say, a ``MyPerson`` object whenever you query for ``Person`` objects. A queryset for ``Person`` objects will return those types of objects. The whole point of proxy objects is that code relying on the original ``Person`` will use those and your own code can use the extensions you included (that no other code is relying on anyway). It is not a way to replace the ``Person`` (or any other) model everywhere with something of your own creation."
msgstr ""

#: ../../topics/db/models.txt:1108
# 8964c9c1bf5e45858026d7a8eb182bf2
msgid "Base class restrictions"
msgstr ""

#: ../../topics/db/models.txt:1110
# 33be5f94b8f247959d3bd13cc493c4d0
msgid "A proxy model must inherit from exactly one non-abstract model class. You can't inherit from multiple non-abstract models as the proxy model doesn't provide any connection between the rows in the different database tables. A proxy model can inherit from any number of abstract model classes, providing they do *not* define any model fields."
msgstr ""

#: ../../topics/db/models.txt:1116
# 19d04fa6e906499db92a837a44e383da
msgid "Proxy models inherit any ``Meta`` options that they don't define from their non-abstract model parent (the model they are proxying for)."
msgstr ""

#: ../../topics/db/models.txt:1120
# 6ff77ee720ed460c9c8c54e17491dbdc
msgid "Proxy model managers"
msgstr ""

#: ../../topics/db/models.txt:1122
# 5a7e9064a2fb4366a379abccb8d093c3
msgid "If you don't specify any model managers on a proxy model, it inherits the managers from its model parents. If you define a manager on the proxy model, it will become the default, although any managers defined on the parent classes will still be available."
msgstr ""

#: ../../topics/db/models.txt:1127
# 925341edb135432984b3c69498710387
msgid "Continuing our example from above, you could change the default manager used when you query the ``Person`` model like this::"
msgstr ""

#: ../../topics/db/models.txt:1139
# 60f4277b415e491db1a36a585c63a87d
msgid "If you wanted to add a new manager to the Proxy, without replacing the existing default, you can use the techniques described in the :ref:`custom manager <custom-managers-and-inheritance>` documentation: create a base class containing the new managers and inherit that after the primary base class::"
msgstr ""

#: ../../topics/db/models.txt:1155
# e790d5d00c104ae788c33f59b8a442f3
msgid "You probably won't need to do this very often, but, when you do, it's possible."
msgstr ""

#: ../../topics/db/models.txt:1161
# 81649be70f0a441fa012f940e8d78074
msgid "Differences between proxy inheritance and  unmanaged models"
msgstr ""

#: ../../topics/db/models.txt:1163
# 6440fe44f9174d99b9862ddaebe75fb5
msgid "Proxy model inheritance might look fairly similar to creating an unmanaged model, using the :attr:`~django.db.models.Options.managed` attribute on a model's ``Meta`` class. The two alternatives are not quite the same and it's worth considering which one you should use."
msgstr ""

#: ../../topics/db/models.txt:1168
# efa8e27bb8844fe9adaa4d6545977351
msgid "One difference is that you can (and, in fact, must unless you want an empty model) specify model fields on models with ``Meta.managed=False``. You could, with careful setting of :attr:`Meta.db_table <django.db.models.Options.db_table>` create an unmanaged model that shadowed an existing model and add Python methods to it. However, that would be very repetitive and fragile as you need to keep both copies synchronized if you make any changes."
msgstr ""

#: ../../topics/db/models.txt:1176
# 314b18e78232405ab660486ba0dad165
msgid "The other difference that is more important for proxy models, is how model managers are handled. Proxy models are intended to behave exactly like the model they are proxying for. So they inherit the parent model's managers, including the default manager. In the normal multi-table model inheritance case, children do not inherit managers from their parents as the custom managers aren't always appropriate when extra fields are involved. The :ref:`manager documentation <custom-managers-and-inheritance>` has more details about this latter case."
msgstr ""

#: ../../topics/db/models.txt:1185
# 903554dd4c3e4ddc884180666bfec936
msgid "When these two features were implemented, attempts were made to squash them into a single option. It turned out that interactions with inheritance, in general, and managers, in particular, made the API very complicated and potentially difficult to understand and use. It turned out that two options were needed in any case, so the current separation arose."
msgstr ""

#: ../../topics/db/models.txt:1191
# b2e3a7152244440da9dd58189f784e90
msgid "So, the general rules are:"
msgstr ""

#: ../../topics/db/models.txt:1193
# 689661815c6e4143956be903c2328b3f
msgid "If you are mirroring an existing model or database table and don't want all the original database table columns, use ``Meta.managed=False``. That option is normally useful for modeling database views and tables not under the control of Django."
msgstr ""

#: ../../topics/db/models.txt:1197
# 336e800a7fee47cb9a13941bd6ce4af1
msgid "If you are wanting to change the Python-only behavior of a model, but keep all the same fields as in the original, use ``Meta.proxy=True``. This sets things up so that the proxy model is an exact copy of the storage structure of the original model when data is saved."
msgstr ""

#: ../../topics/db/models.txt:1203
# 777bbf738ff84b25bdf38b224c0945a2
msgid "Multiple inheritance"
msgstr ""

#: ../../topics/db/models.txt:1205
# e94503fc57a84f0b9969eeb5b22e5832
msgid "Just as with Python's subclassing, it's possible for a Django model to inherit from multiple parent models. Keep in mind that normal Python name resolution rules apply. The first base class that a particular name (e.g. :ref:`Meta <meta-options>`) appears in will be the one that is used; for example, this means that if multiple parents contain a :ref:`Meta <meta-options>` class, only the first one is going to be used, and all others will be ignored."
msgstr ""

#: ../../topics/db/models.txt:1212
# 9fdbcf1ab57044b18b49bf554d51f8a3
msgid "Generally, you won't need to inherit from multiple parents. The main use-case where this is useful is for \"mix-in\" classes: adding a particular extra field or method to every class that inherits the mix-in. Try to keep your inheritance hierarchies as simple and straightforward as possible so that you won't have to struggle to work out where a particular piece of information is coming from."
msgstr ""

#: ../../topics/db/models.txt:1220
# e53634d9eeac4602a601376f0a204f89
msgid "Field name \"hiding\" is not permitted"
msgstr ""

#: ../../topics/db/models.txt:1222
# d1942a3543fa4c44b2f4d9cb35965f82
msgid "In normal Python class inheritance, it is permissible for a child class to override any attribute from the parent class. In Django, this is not permitted for attributes that are :class:`~django.db.models.Field` instances (at least, not at the moment). If a base class has a field called ``author``, you cannot create another model field called ``author`` in any class that inherits from that base class."
msgstr ""

#: ../../topics/db/models.txt:1229
# aaf1a25b1e4d4329b467277bc1d45061
msgid "Overriding fields in a parent model leads to difficulties in areas such as initializing new instances (specifying which field is being initialized in ``Model.__init__``) and serialization. These are features which normal Python class inheritance doesn't have to deal with in quite the same way, so the difference between Django model inheritance and Python class inheritance isn't arbitrary."
msgstr ""

#: ../../topics/db/models.txt:1236
# ec833f97ed3a499f9793bafc8041a8ff
msgid "This restriction only applies to attributes which are :class:`~django.db.models.Field` instances. Normal Python attributes can be overridden if you wish. It also only applies to the name of the attribute as Python sees it: if you are manually specifying the database column name, you can have the same column name appearing in both a child and an ancestor model for multi-table inheritance (they are columns in two different database tables)."
msgstr ""

#: ../../topics/db/models.txt:1244
# e2f4e6ac249744fe87471e6d82571e03
msgid "Django will raise a :exc:`~django.core.exceptions.FieldError` if you override any model field in any ancestor model."
msgstr ""

#: ../../topics/db/multi-db.txt:3
# 41ef2323e134483899073e097a792a4e
msgid "Multiple databases"
msgstr ""

#: ../../topics/db/multi-db.txt:5
# 61fcec7c40fc4fb48e940db825c86f08
msgid "This topic guide describes Django's support for interacting with multiple databases. Most of the rest of Django's documentation assumes you are interacting with a single database. If you want to interact with multiple databases, you'll need to take some additional steps."
msgstr ""

#: ../../topics/db/multi-db.txt:11
# 1affa6de8e8e45888914aa07914ffb7b
msgid "Defining your databases"
msgstr ""

#: ../../topics/db/multi-db.txt:13
# 05165cff5cb54f03a64c317672bf5298
msgid "The first step to using more than one database with Django is to tell Django about the database servers you'll be using. This is done using the :setting:`DATABASES` setting. This setting maps database aliases, which are a way to refer to a specific database throughout Django, to a dictionary of settings for that specific connection. The settings in the inner dictionaries are described fully in the :setting:`DATABASES` documentation."
msgstr ""

#: ../../topics/db/multi-db.txt:21
# d502514925c645fbac6f81eeeaf6b830
msgid "Databases can have any alias you choose. However, the alias ``default`` has special significance. Django uses the database with the alias of ``default`` when no other database has been selected."
msgstr ""

#: ../../topics/db/multi-db.txt:25
# 81a9118034ee457db17b58767ffe1134
msgid "The following is an example ``settings.py`` snippet defining two databases -- a default PostgreSQL database and a MySQL database called ``users``:"
msgstr ""

#: ../../topics/db/multi-db.txt:46
# d6d0c8d082264a81b5a0fe44cd71cf2f
msgid "If the concept of a ``default`` database doesn't make sense in the context of your project, you need to be careful to always specify the database that you want to use. Django requires that a ``default`` database entry be defined, but the parameters dictionary can be left blank if it will not be used. The following is an example ``settings.py`` snippet defining two non-default databases, with the ``default`` entry intentionally left empty::"
msgstr ""

#: ../../topics/db/multi-db.txt:69
# f97988d88d9449bca021014749bc9440
msgid "If you attempt to access a database that you haven't defined in your :setting:`DATABASES` setting, Django will raise a ``django.db.utils.ConnectionDoesNotExist`` exception."
msgstr ""

#: ../../topics/db/multi-db.txt:74
# 853d7e71b4f0464098809b64232ca7c0
msgid "Synchronizing your databases"
msgstr ""

#: ../../topics/db/multi-db.txt:76
# c140db25c0534812ba1747a53aa1bfa3
msgid "The :djadmin:`syncdb` management command operates on one database at a time. By default, it operates on the ``default`` database, but by providing a :djadminopt:`--database` argument, you can tell syncdb to synchronize a different database. So, to synchronize all models onto all databases in our example, you would need to call::"
msgstr ""

#: ../../topics/db/multi-db.txt:85
# 1ea12da44d5747febe7b09ea03ce02fe
msgid "If you don't want every application to be synchronized onto a particular database, you can define a :ref:`database router<topics-db-multi-db-routing>` that implements a policy constraining the availability of particular models."
msgstr ""

#: ../../topics/db/multi-db.txt:90
# e55d39d189534f0caad3300cf954682f
msgid "Alternatively, if you want fine-grained control of synchronization, you can pipe all or part of the output of :djadmin:`sqlall` for a particular application directly into your database prompt, like this::"
msgstr ""

#: ../../topics/db/multi-db.txt:97
# 2d76fabe8a164cc8a8e457bc2eb67a80
msgid "Using other management commands"
msgstr ""

#: ../../topics/db/multi-db.txt:99
# 7dd2509f09a148b495e142daa8cdf807
msgid "The other ``django-admin.py`` commands that interact with the database operate in the same way as :djadmin:`syncdb` -- they only ever operate on one database at a time, using :djadminopt:`--database` to control the database used."
msgstr ""

#: ../../topics/db/multi-db.txt:107
# 66b2855fc1d9489690ef7afcf450ed25
msgid "Automatic database routing"
msgstr ""

#: ../../topics/db/multi-db.txt:109
# fb03b2bf00d04b92b68d1ef32a9b41cd
msgid "The easiest way to use multiple databases is to set up a database routing scheme. The default routing scheme ensures that objects remain 'sticky' to their original database (i.e., an object retrieved from the ``foo`` database will be saved on the same database). The default routing scheme ensures that if a database isn't specified, all queries fall back to the ``default`` database."
msgstr ""

#: ../../topics/db/multi-db.txt:116
# f1a4cce6e0194ad6a26fa52b34442964
msgid "You don't have to do anything to activate the default routing scheme -- it is provided 'out of the box' on every Django project. However, if you want to implement more interesting database allocation behaviors, you can define and install your own database routers."
msgstr ""

#: ../../topics/db/multi-db.txt:122
# 8ed56c94e794457ba075cbc0dd534ac5
msgid "Database routers"
msgstr ""

#: ../../topics/db/multi-db.txt:124
# 65fa8b4cc45540639633ec1e00b09f39
msgid "A database Router is a class that provides up to four methods:"
msgstr ""

#: ../../topics/db/multi-db.txt:128
# f96ec180987440f58e3bce96f818ecee
msgid "Suggest the database that should be used for read operations for objects of type ``model``."
msgstr ""

#: ../../topics/db/multi-db.txt:131
#: ../../topics/db/multi-db.txt:143
# 8efc694fcf754c33ac7c9ccd8e4dfeef
# c2078e1d3a81439899aaf81a678015d5
msgid "If a database operation is able to provide any additional information that might assist in selecting a database, it will be provided in the ``hints`` dictionary. Details on valid hints are provided :ref:`below <topics-db-multi-db-hints>`."
msgstr ""

#: ../../topics/db/multi-db.txt:136
#: ../../topics/db/multi-db.txt:148
# e0a8c38b4e77456c9185e5a42d586347
# 397d905021904d21b8169eddc340ad98
msgid "Returns None if there is no suggestion."
msgstr ""

#: ../../topics/db/multi-db.txt:140
# 2f050a93ee2849499979150c2ec333f4
msgid "Suggest the database that should be used for writes of objects of type Model."
msgstr ""

#: ../../topics/db/multi-db.txt:152
# 4349179342834b7c80e5fdd2cf4b0465
msgid "Return True if a relation between obj1 and obj2 should be allowed, False if the relation should be prevented, or None if the router has no opinion. This is purely a validation operation, used by foreign key and many to many operations to determine if a relation should be allowed between two objects."
msgstr ""

#: ../../topics/db/multi-db.txt:160
# 025c82d478ce437c9009124fd274d4f1
msgid "Determine if the ``model`` should be synchronized onto the database with alias ``db``. Return True if the model should be synchronized, False if it should not be synchronized, or None if the router has no opinion. This method can be used to determine the availability of a model on a given database."
msgstr ""

#: ../../topics/db/multi-db.txt:166
# 82068261b5954352b8292ef753ff4c39
msgid "A router doesn't have to provide *all* these methods -- it may omit one or more of them. If one of the methods is omitted, Django will skip that router when performing the relevant check."
msgstr ""

#: ../../topics/db/multi-db.txt:173
# 796831babd4d4338b7c85fcd77a68656
msgid "Hints"
msgstr ""

#: ../../topics/db/multi-db.txt:175
# 78e700e04d8d4da0be732a7445056d3b
msgid "The hints received by the database router can be used to decide which database should receive a given request."
msgstr ""

#: ../../topics/db/multi-db.txt:178
# 098fcb5f1ad346bfa4c80d983c4b5776
msgid "At present, the only hint that will be provided is ``instance``, an object instance that is related to the read or write operation that is underway. This might be the instance that is being saved, or it might be an instance that is being added in a many-to-many relation. In some cases, no instance hint will be provided at all. The router checks for the existence of an instance hint, and determine if that hint should be used to alter routing behavior."
msgstr ""

#: ../../topics/db/multi-db.txt:187
# 227f180a0eac4f2882cac17417f7d302
msgid "Using routers"
msgstr ""

#: ../../topics/db/multi-db.txt:189
# 10d075249fbb4cef9fd7ed12c35f29cc
msgid "Database routers are installed using the :setting:`DATABASE_ROUTERS` setting. This setting defines a list of class names, each specifying a router that should be used by the master router (``django.db.router``)."
msgstr ""

#: ../../topics/db/multi-db.txt:194
# b8ec1182fe464f5da2d1671ddb4096a6
msgid "The master router is used by Django's database operations to allocate database usage. Whenever a query needs to know which database to use, it calls the master router, providing a model and a hint (if available). Django then tries each router in turn until a database suggestion can be found. If no suggestion can be found, it tries the current ``_state.db`` of the hint instance. If a hint instance wasn't provided, or the instance doesn't currently have database state, the master router will allocate the ``default`` database."
msgstr ""

#: ../../topics/db/multi-db.txt:204
#: ../../topics/db/tablespaces.txt:45
#: ../../topics/logging.txt:240
# da0f4b7723534ff582408074dcd2d541
# b96ccf1aaf2a45cd94447ccca397d413
# 05a365ec38384f7aa37e708a435863df
msgid "An example"
msgstr ""

#: ../../topics/db/multi-db.txt:208
# ddc7b60b1f4a423a85f7f2a8f5e3d71d
msgid "This example is intended as a demonstration of how the router infrastructure can be used to alter database usage. It intentionally ignores some complex issues in order to demonstrate how routers are used."
msgstr ""

#: ../../topics/db/multi-db.txt:213
# d4ca55ad792c4b619025ba1279a6b28e
msgid "This example won't work if any of the models in ``myapp`` contain relationships to models outside of the ``other`` database. :ref:`Cross-database relationships <no_cross_database_relations>` introduce referential integrity problems that Django can't currently handle."
msgstr ""

#: ../../topics/db/multi-db.txt:219
# a6a2aa7ee940493a8372825ec9a41705
msgid "The master/slave configuration described is also flawed -- it doesn't provide any solution for handling replication lag (i.e., query inconsistencies introduced because of the time taken for a write to propagate to the slaves). It also doesn't consider the interaction of transactions with the database utilization strategy."
msgstr ""

#: ../../topics/db/multi-db.txt:225
# 0f55b3f8bf5c46fb8243af936bda422e
msgid "So - what does this mean in practice? Let's consider another sample configuration. This one will have several databases: one for the ``auth`` application, and all other apps using a master/slave setup with two read slaves. Here are the settings specifying these databases::"
msgstr ""

#: ../../topics/db/multi-db.txt:258
# 24f11b2587a541db9b145df59b892ba1
msgid "Now we'll need to handle routing. First we want a router that knows to send queries for the ``auth`` app to ``auth_db``::"
msgstr ""

#: ../../topics/db/multi-db.txt:302
# fc981ca9529d4238829d49528176d499
msgid "And we also want a router that sends all other apps to the master/slave configuration, and randomly chooses a slave to read from::"
msgstr ""

#: ../../topics/db/multi-db.txt:337
# ea6bbde7dad84aec8a6629db4c58aa32
msgid "Finally, in the settings file, we add the following (substituting ``path.to.`` with the actual python path to the module(s) where the routers are defined)::"
msgstr ""

#: ../../topics/db/multi-db.txt:343
# 247ad9d433aa469aa46a409af93c59bd
msgid "The order in which routers are processed is significant. Routers will be queried in the order the are listed in the :setting:`DATABASE_ROUTERS` setting . In this example, the ``AuthRouter`` is processed before the ``MasterSlaveRouter``, and as a result, decisions concerning the models in ``auth`` are processed before any other decision is made. If the :setting:`DATABASE_ROUTERS` setting listed the two routers in the other order, ``MasterSlaveRouter.allow_syncdb()`` would be processed first. The catch-all nature of the MasterSlaveRouter implementation would mean that all models would be available on all databases."
msgstr ""

#: ../../topics/db/multi-db.txt:354
# 869cf895681c44eea57c9b35a61a15e6
msgid "With this setup installed, lets run some Django code::"
msgstr ""

#: ../../topics/db/multi-db.txt:381
# 14313f96193c4f5bbc4c12e500dbbd05
msgid "Manually selecting a database"
msgstr ""

#: ../../topics/db/multi-db.txt:383
# 8823afa92c0844f087f5d80b6df6c494
msgid "Django also provides an API that allows you to maintain complete control over database usage in your code. A manually specified database allocation will take priority over a database allocated by a router."
msgstr ""

#: ../../topics/db/multi-db.txt:388
# 5c7cfa25bc1044cb97b7bcf6cfb49380
msgid "Manually selecting a database for a ``QuerySet``"
msgstr ""

#: ../../topics/db/multi-db.txt:390
# 550d522982b84bd9a93697a27c000ee3
msgid "You can select the database for a ``QuerySet`` at any point in the ``QuerySet`` \"chain.\" Just call ``using()`` on the ``QuerySet`` to get another ``QuerySet`` that uses the specified database."
msgstr ""

#: ../../topics/db/multi-db.txt:394
# 5791651e568c417f967507c14f78a591
msgid "``using()`` takes a single argument: the alias of the database on which you want to run the query. For example::"
msgstr ""

#: ../../topics/db/multi-db.txt:407
# 75a7094ca4d64517aa308de2645f445d
msgid "Selecting a database for ``save()``"
msgstr ""

#: ../../topics/db/multi-db.txt:409
# cc8a2b8cc9784d52b8d3e77a33db586d
msgid "Use the ``using`` keyword to ``Model.save()`` to specify to which database the data should be saved."
msgstr ""

#: ../../topics/db/multi-db.txt:412
# 231e650317c540bca97d12be01ac6d5b
msgid "For example, to save an object to the ``legacy_users`` database, you'd use this::"
msgstr ""

#: ../../topics/db/multi-db.txt:417
# cf640c293fe2479c88be2e784f3c41eb
msgid "If you don't specify ``using``, the ``save()`` method will save into the default database allocated by the routers."
msgstr ""

#: ../../topics/db/multi-db.txt:421
# 9e8026c6632e46aeb6aa3411aea73c98
msgid "Moving an object from one database to another"
msgstr ""

#: ../../topics/db/multi-db.txt:423
# bd360b6e3a714fca8345e83271ece90e
msgid "If you've saved an instance to one database, it might be tempting to use ``save(using=...)`` as a way to migrate the instance to a new database. However, if you don't take appropriate steps, this could have some unexpected consequences."
msgstr ""

#: ../../topics/db/multi-db.txt:428
# 031ff5dfafdd40c9b7cc0ce6f8bee485
msgid "Consider the following example::"
msgstr ""

#: ../../topics/db/multi-db.txt:434
# be2ced7d033e462983a245bc0b1a7ee9
msgid "In statement 1, a new ``Person`` object is saved to the ``first`` database. At this time, ``p`` doesn't have a primary key, so Django issues a SQL ``INSERT`` statement. This creates a primary key, and Django assigns that primary key to ``p``."
msgstr ""

#: ../../topics/db/multi-db.txt:439
# 6de81b95abb0480cabaa763e93143e8f
msgid "When the save occurs in statement 2, ``p`` already has a primary key value, and Django will attempt to use that primary key on the new database. If the primary key value isn't in use in the ``second`` database, then you won't have any problems -- the object will be copied to the new database."
msgstr ""

#: ../../topics/db/multi-db.txt:445
# cf3e620c8ac5448dae496b3f4d6fe025
msgid "However, if the primary key of ``p`` is already in use on the ``second`` database, the existing object in the ``second`` database will be overridden when ``p`` is saved."
msgstr ""

#: ../../topics/db/multi-db.txt:449
# d9094426a3d74458a8ea1c3a1772acbb
msgid "You can avoid this in two ways. First, you can clear the primary key of the instance. If an object has no primary key, Django will treat it as a new object, avoiding any loss of data on the ``second`` database::"
msgstr ""

#: ../../topics/db/multi-db.txt:459
# 418e8ea40fd8471abe9285f0226c2893
msgid "The second option is to use the ``force_insert`` option to ``save()`` to ensure that Django does a SQL ``INSERT``::"
msgstr ""

#: ../../topics/db/multi-db.txt:466
# b00fd1941780491cabfc03396ccd9748
msgid "This will ensure that the person named ``Fred`` will have the same primary key on both databases. If that primary key is already in use when you try to save onto the ``second`` database, an error will be raised."
msgstr ""

#: ../../topics/db/multi-db.txt:472
# 8ce3f641f3f8421f9189e00bb3ae4025
msgid "Selecting a database to delete from"
msgstr ""

#: ../../topics/db/multi-db.txt:474
# 1233cf64d899492b899b9c98b65ea8b1
msgid "By default, a call to delete an existing object will be executed on the same database that was used to retrieve the object in the first place::"
msgstr ""

#: ../../topics/db/multi-db.txt:481
# 14b7233bf0954d7e82617d55da996f02
msgid "To specify the database from which a model will be deleted, pass a ``using`` keyword argument to the ``Model.delete()`` method. This argument works just like the ``using`` keyword argument to ``save()``."
msgstr ""

#: ../../topics/db/multi-db.txt:485
# ed688b89467240d9ba123625ead4f585
msgid "For example, if you're migrating a user from the ``legacy_users`` database to the ``new_users`` database, you might use these commands::"
msgstr ""

#: ../../topics/db/multi-db.txt:492
# aa3225cf84344703a9b554ac68df8e6d
msgid "Using managers with multiple databases"
msgstr ""

#: ../../topics/db/multi-db.txt:494
# a23fb77762b5426c9db35fc9b80052a9
msgid "Use the ``db_manager()`` method on managers to give managers access to a non-default database."
msgstr ""

#: ../../topics/db/multi-db.txt:497
# abf3edfa1fe44791b20acdfd5bd274ad
msgid "For example, say you have a custom manager method that touches the database -- ``User.objects.create_user()``. Because ``create_user()`` is a manager method, not a ``QuerySet`` method, you can't do ``User.objects.using('new_users').create_user()``. (The ``create_user()`` method is only available on ``User.objects``, the manager, not on ``QuerySet`` objects derived from the manager.) The solution is to use ``db_manager()``, like this::"
msgstr ""

#: ../../topics/db/multi-db.txt:507
# 174768a399db49099196ab570b9f0818
msgid "``db_manager()`` returns a copy of the manager bound to the database you specify."
msgstr ""

#: ../../topics/db/multi-db.txt:510
# 8983fa881abf4d24b17ff859321ad6b7
msgid "Using ``get_query_set()`` with multiple databases"
msgstr ""

#: ../../topics/db/multi-db.txt:512
# 9b808925a801499d99d1608f0277c9ed
msgid "If you're overriding ``get_query_set()`` on your manager, be sure to either call the method on the parent (using ``super()``) or do the appropriate handling of the ``_db`` attribute on the manager (a string containing the name of the database to use)."
msgstr ""

#: ../../topics/db/multi-db.txt:517
# 9ca0590df0754751a192a729c30c31f7
msgid "For example, if you want to return a custom ``QuerySet`` class from the ``get_query_set`` method, you could do this::"
msgstr ""

#: ../../topics/db/multi-db.txt:528
# 33908943ec0c49b3b8cdaf4caa25cd29
msgid "Exposing multiple databases in Django's admin interface"
msgstr ""

#: ../../topics/db/multi-db.txt:530
# 1d9353c8214e4ee3a74638a7f8a66b49
msgid "Django's admin doesn't have any explicit support for multiple databases. If you want to provide an admin interface for a model on a database other than that specified by your router chain, you'll need to write custom :class:`~django.contrib.admin.ModelAdmin` classes that will direct the admin to use a specific database for content."
msgstr ""

#: ../../topics/db/multi-db.txt:536
# 20ab01d075f14d3ea2d22a2f2f82f164
msgid "``ModelAdmin`` objects have five methods that require customization for multiple-database support::"
msgstr ""

#: ../../topics/db/multi-db.txt:565
# 4354cd552bcc4006801a5f7313f6411e
msgid "The implementation provided here implements a multi-database strategy where all objects of a given type are stored on a specific database (e.g., all ``User`` objects are in the ``other`` database). If your usage of multiple databases is more complex, your ``ModelAdmin`` will need to reflect that strategy."
msgstr ""

#: ../../topics/db/multi-db.txt:571
# 1f2b53d690f54e01a2918b0f3d032e07
msgid "Inlines can be handled in a similar fashion. They require three customized methods::"
msgstr ""

#: ../../topics/db/multi-db.txt:590
# 89e508ee6bfd435ba0cfc00fc59953a7
msgid "Once you've written your model admin definitions, they can be registered with any ``Admin`` instance::"
msgstr ""

#: ../../topics/db/multi-db.txt:608
# f92974e59ac9488791b621da40753368
msgid "This example sets up two admin sites. On the first site, the ``Author`` and ``Publisher`` objects are exposed; ``Publisher`` objects have an tabular inline showing books published by that publisher. The second site exposes just publishers, without the inlines."
msgstr ""

#: ../../topics/db/multi-db.txt:615
# 8fb58e5473dd41ac9b162d06bac11792
msgid "Using raw cursors with multiple databases"
msgstr ""

#: ../../topics/db/multi-db.txt:617
# 714c2edb48d14031847ccd97e1200ba6
msgid "If you are using more than one database you can use ``django.db.connections`` to obtain the connection (and cursor) for a specific database. ``django.db.connections`` is a dictionary-like object that allows you to retrieve a specific connection using its alias::"
msgstr ""

#: ../../topics/db/multi-db.txt:627
# 0aad736d28034994a58d58e8197166de
msgid "Limitations of multiple databases"
msgstr ""

#: ../../topics/db/multi-db.txt:632
# 5f272feb69b14c11907bdd8e743e1d01
msgid "Cross-database relations"
msgstr ""

#: ../../topics/db/multi-db.txt:634
# 66d4189eacb94e6faa44075fc010b378
msgid "Django doesn't currently provide any support for foreign key or many-to-many relationships spanning multiple databases. If you have used a router to partition models to different databases, any foreign key and many-to-many relationships defined by those models must be internal to a single database."
msgstr ""

#: ../../topics/db/multi-db.txt:640
# c2f41960174e4accbbad70c7c84db390
msgid "This is because of referential integrity. In order to maintain a relationship between two objects, Django needs to know that the primary key of the related object is valid. If the primary key is stored on a separate database, it's not possible to easily evaluate the validity of a primary key."
msgstr ""

#: ../../topics/db/multi-db.txt:646
# b62f7b8f4ce14c23a9b59ebbc0683860
msgid "If you're using Postgres, Oracle, or MySQL with InnoDB, this is enforced at the database integrity level -- database level key constraints prevent the creation of relations that can't be validated."
msgstr ""

#: ../../topics/db/multi-db.txt:650
# 11c268ad6ce64d40aef4f4350745588b
msgid "However, if you're using SQLite or MySQL with MyISAM tables, there is no enforced referential integrity; as a result, you may be able to 'fake' cross database foreign keys. However, this configuration is not officially supported by Django."
msgstr ""

#: ../../topics/db/multi-db.txt:658
# d2711789a5e94bcd80ec0b8150e8630c
msgid "Behavior of contrib apps"
msgstr ""

#: ../../topics/db/multi-db.txt:660
# bfc73fb71ccf4effa7d8bc36e2870442
msgid "Several contrib apps include models, and some apps depend on others. Since cross-database relationships are impossible, this creates some restrictions on how you can split these models across databases:"
msgstr ""

#: ../../topics/db/multi-db.txt:664
# 89cde852462c4b8a8b5379e7f9cfbced
msgid "each one of ``contenttypes.ContentType``, ``sessions.Session`` and ``sites.Site`` can be stored in any database, given a suitable router."
msgstr ""

#: ../../topics/db/multi-db.txt:666
# abfbf8f54b7f4ff883534e492c194ae0
msgid "``auth`` models — ``User``, ``Group`` and ``Permission`` — are linked together and linked to ``ContentType``, so they must be stored in the same database as ``ContentType``."
msgstr ""

#: ../../topics/db/multi-db.txt:669
# 658e3fe91bfc4b3097b4a2341afeab9e
msgid "``admin`` and ``comments`` depend on ``auth``, so their models must be in the same database as ``auth``."
msgstr ""

#: ../../topics/db/multi-db.txt:671
# d83518f0d8c647a0b33911fc9e2a03b1
msgid "``flatpages`` and ``redirects`` depend on ``sites``, so their models must be in the same database as ``sites``."
msgstr ""

#: ../../topics/db/multi-db.txt:674
# 280796ce19354ae6a3104cfd7762a9c8
msgid "In addition, some objects are automatically created just after :djadmin:`syncdb` creates a table to hold them in a database:"
msgstr ""

#: ../../topics/db/multi-db.txt:677
# 3ad0c71c320b4844a06ebe379297f26a
msgid "a default ``Site``,"
msgstr ""

#: ../../topics/db/multi-db.txt:678
# 634c41b1b0bb4d52b3993115e77521f4
msgid "a ``ContentType`` for each model (including those not stored in that database),"
msgstr ""

#: ../../topics/db/multi-db.txt:680
# a8d247504f044d4d848187473c926c45
msgid "three ``Permission`` for each model (including those not stored in that database)."
msgstr ""

#: ../../topics/db/multi-db.txt:687
# 12afbb3d1f054e88984216f838fc08f6
msgid "For common setups with multiple databases, it isn't useful to have these objects in more than one database. Common setups include master / slave and connecting to external databases. Therefore, it's recommended:"
msgstr ""

#: ../../topics/db/multi-db.txt:691
# ced964f6dfa34577802cb7a6c775a211
msgid "either to run :djadmin:`syncdb` only for the default database;"
msgstr ""

#: ../../topics/db/multi-db.txt:692
# fcc2bbf90cce49268a3e3f29c07814ff
msgid "or to write :ref:`database router<topics-db-multi-db-routing>` that allows synchronizing these three models only to one database."
msgstr ""

#: ../../topics/db/multi-db.txt:697
# e5a3cf4eb0ed4687af5911b4464033a3
msgid "If you're synchronizing content types to more that one database, be aware that their primary keys may not match across databases. This may result in data corruption or data loss."
msgstr ""

#: ../../topics/db/optimization.txt:3
# ef697e2139df4ce0b47b1f61877c3051
msgid "Database access optimization"
msgstr ""

#: ../../topics/db/optimization.txt:5
# 3992e3b2ec304d028896ceb2bc8b342a
msgid "Django's database layer provides various ways to help developers get the most out of their databases. This document gathers together links to the relevant documentation, and adds various tips, organized under a number of headings that outline the steps to take when attempting to optimize your database usage."
msgstr ""

#: ../../topics/db/optimization.txt:11
# 8e080328f3364d4fa2b8c96c1d401ae9
msgid "Profile first"
msgstr ""

#: ../../topics/db/optimization.txt:13
# f0aae79f44274d9da9c6c842aa2360ca
msgid "As general programming practice, this goes without saying. Find out :ref:`what queries you are doing and what they are costing you <faq-see-raw-sql-queries>`. You may also want to use an external project like django-debug-toolbar_, or a tool that monitors your database directly."
msgstr ""

#: ../../topics/db/optimization.txt:18
# ed85ef92b1b24cd7aa1ea8712e4c4f69
msgid "Remember that you may be optimizing for speed or memory or both, depending on your requirements. Sometimes optimizing for one will be detrimental to the other, but sometimes they will help each other. Also, work that is done by the database process might not have the same cost (to you) as the same amount of work done in your Python process. It is up to you to decide what your priorities are, where the balance must lie, and profile all of these as required since this will depend on your application and server."
msgstr ""

#: ../../topics/db/optimization.txt:26
# 343d52629f124cd9bce90d2e9424c18e
msgid "With everything that follows, remember to profile after every change to ensure that the change is a benefit, and a big enough benefit given the decrease in readability of your code. **All** of the suggestions below come with the caveat that in your circumstances the general principle might not apply, or might even be reversed."
msgstr ""

#: ../../topics/db/optimization.txt:35
# b8e5ae82945242eeb108fa7bf121be1a
msgid "Use standard DB optimization techniques"
msgstr ""

#: ../../topics/db/optimization.txt:37
# 6f43dcf52ada4ab189982f74496bb406
msgid "...including:"
msgstr ""

#: ../../topics/db/optimization.txt:39
# a8257102a90f40b18e5a162cb3d4ab2b
msgid "Indexes. This is a number one priority, *after* you have determined from profiling what indexes should be added. Use :attr:`django.db.models.Field.db_index` to add these from Django."
msgstr ""

#: ../../topics/db/optimization.txt:43
# 8ca3918b13be464ebf1c4fa2f7cd0994
msgid "Appropriate use of field types."
msgstr ""

#: ../../topics/db/optimization.txt:45
# 2a45b0d9bb2f4b89b2a2b1d9bc88dd9a
msgid "We will assume you have done the obvious things above. The rest of this document focuses on how to use Django in such a way that you are not doing unnecessary work. This document also does not address other optimization techniques that apply to all expensive operations, such as :doc:`general purpose caching </topics/cache>`."
msgstr ""

#: ../../topics/db/optimization.txt:52
# 283bc29228c644bbb22085d67eb1b857
msgid "Understand QuerySets"
msgstr ""

#: ../../topics/db/optimization.txt:54
# 9825cb5ba5aa4482875ed2723633a255
msgid "Understanding :doc:`QuerySets </ref/models/querysets>` is vital to getting good performance with simple code. In particular:"
msgstr ""

#: ../../topics/db/optimization.txt:58
# f1516d7a5835490bae0bb16a1bb5c48c
msgid "Understand QuerySet evaluation"
msgstr ""

#: ../../topics/db/optimization.txt:60
# 1a08eb2b2cdd42d6a935b9ad30d35374
msgid "To avoid performance problems, it is important to understand:"
msgstr ""

#: ../../topics/db/optimization.txt:62
# d44309f3709d4f0a9578f63018a0ec2c
msgid "that :ref:`QuerySets are lazy <querysets-are-lazy>`."
msgstr ""

#: ../../topics/db/optimization.txt:64
# 55ac17bddc374504af40c72ccce355ea
msgid "when :ref:`they are evaluated <when-querysets-are-evaluated>`."
msgstr ""

#: ../../topics/db/optimization.txt:66
# 185ea227f9114a1f9de98807ba2e095e
msgid "how :ref:`the data is held in memory <caching-and-querysets>`."
msgstr ""

#: ../../topics/db/optimization.txt:69
# 30f4be1145734cbca14c8a70d9b4e336
msgid "Understand cached attributes"
msgstr ""

#: ../../topics/db/optimization.txt:71
# d72e7e3153d643debd943fb0fec0c569
msgid "As well as caching of the whole ``QuerySet``, there is caching of the result of attributes on ORM objects. In general, attributes that are not callable will be cached. For example, assuming the :ref:`example Weblog models <queryset-model-example>`::"
msgstr ""

#: ../../topics/db/optimization.txt:80
# fe17bf7ef7b149a1ae667b94d9d694e3
msgid "But in general, callable attributes cause DB lookups every time::"
msgstr ""

#: ../../topics/db/optimization.txt:86
# 58f6a80f946f4944b8cfd8f4e7429ba7
msgid "Be careful when reading template code - the template system does not allow use of parentheses, but will call callables automatically, hiding the above distinction."
msgstr ""

#: ../../topics/db/optimization.txt:90
# 4c64d6e7e08d4a4ab19ede65d6f3aefb
msgid "Be careful with your own custom properties - it is up to you to implement caching."
msgstr ""

#: ../../topics/db/optimization.txt:94
# 036d56075a0a45b4abbf258de8c5d4ef
msgid "Use the ``with`` template tag"
msgstr ""

#: ../../topics/db/optimization.txt:96
# 4b8577b9a62b4ed18ea382861f7cb839
msgid "To make use of the caching behavior of ``QuerySet``, you may need to use the :ttag:`with` template tag."
msgstr ""

#: ../../topics/db/optimization.txt:100
# 0b3c3d40fdc64fa490f4b2893f5b4cab
msgid "Use ``iterator()``"
msgstr ""

#: ../../topics/db/optimization.txt:102
# 54bbba693956432793d8d2186fe53611
msgid "When you have a lot of objects, the caching behavior of the ``QuerySet`` can cause a large amount of memory to be used. In this case, :meth:`~django.db.models.query.QuerySet.iterator()` may help."
msgstr ""

#: ../../topics/db/optimization.txt:107
# 7ad60e59b08746968abd997c0c6e07ac
msgid "Do database work in the database rather than in Python"
msgstr ""

#: ../../topics/db/optimization.txt:109
# c27427abfe9c4fd3812997f30f67789c
msgid "For instance:"
msgstr ""

#: ../../topics/db/optimization.txt:111
# 0827ced9b51b4277bb3a290a5f7b2bae
msgid "At the most basic level, use :ref:`filter and exclude <queryset-api>` to do filtering in the database."
msgstr ""

#: ../../topics/db/optimization.txt:114
# 6e0b52e9296f47779c8ca88e14fd0fe0
msgid "Use :ref:`F() object query expressions <query-expressions>` to do filtering against other fields within the same model."
msgstr ""

#: ../../topics/db/optimization.txt:117
# 10799dd2c6e94d87a56dbfab10cfe80b
msgid "Use :doc:`annotate to do aggregation in the database </topics/db/aggregation>`."
msgstr ""

#: ../../topics/db/optimization.txt:119
# b060194996a34888b392124d154b6620
msgid "If these aren't enough to generate the SQL you need:"
msgstr ""

#: ../../topics/db/optimization.txt:122
# 86ece2151d04477c95820928ebf72580
msgid "Use ``QuerySet.extra()``"
msgstr ""

#: ../../topics/db/optimization.txt:124
# d3b6f2126ec94a18bbc5092b438981df
msgid "A less portable but more powerful method is :meth:`~django.db.models.query.QuerySet.extra()`, which allows some SQL to be explicitly added to the query. If that still isn't powerful enough:"
msgstr ""

#: ../../topics/db/optimization.txt:129
# e2f41dfe3d47457494760ee08dea2d44
msgid "Use raw SQL"
msgstr ""

#: ../../topics/db/optimization.txt:131
# 327b8eb63299415daf84615d08b8e847
msgid "Write your own :doc:`custom SQL to retrieve data or populate models </topics/db/sql>`. Use ``django.db.connection.queries`` to find out what Django is writing for you and start from there."
msgstr ""

#: ../../topics/db/optimization.txt:136
# b91c4397b8f54786ba51249451a901a5
msgid "Retrieve individual objects using a unique, indexed column"
msgstr ""

#: ../../topics/db/optimization.txt:138
# 19cf0298c4414c739147013cd58f5397
msgid "There are two reasons to use a column with :attr:`~django.db.models.Field.unique` or :attr:`~django.db.models.Field.db_index` when using :meth:`~django.db.models.query.QuerySet.get` to retrieve individual objects. First, the query will be quicker because of the underlying database index. Also, the query could run much slower if multiple objects match the lookup; having a unique constraint on the column guarantees this will never happen."
msgstr ""

#: ../../topics/db/optimization.txt:146
# 5eb81ca4c3a94a06a69aa793ffc0d4a5
msgid "So using the :ref:`example Weblog models <queryset-model-example>`::"
msgstr ""

#: ../../topics/db/optimization.txt:150
# 4972bfa93ae14d7697d9f02bce8393d2
msgid "will be quicker than:"
msgstr ""

#: ../../topics/db/optimization.txt:154
# 2366d3245c9b4a9597355e21b374d6c1
msgid "because ``id`` is indexed by the database and is guaranteed to be unique."
msgstr ""

#: ../../topics/db/optimization.txt:156
# ec06d6817e264a85a11e9825787b1cf3
msgid "Doing the following is potentially quite slow:"
msgstr ""

#: ../../topics/db/optimization.txt:160
# b8702c196fce4db9a8dd687677826d3a
msgid "First of all, ``headline`` is not indexed, which will make the underlying database fetch slower."
msgstr ""

#: ../../topics/db/optimization.txt:163
# d788d3be21d7458ab5b4ab26b5fcd029
msgid "Second, the lookup doesn't guarantee that only one object will be returned. If the query matches more than one object, it will retrieve and transfer all of them from the database. This penalty could be substantial if hundreds or thousands of records are returned. The penalty will be compounded if the database lives on a separate server, where network overhead and latency also play a factor."
msgstr ""

#: ../../topics/db/optimization.txt:171
# fcac4190dcef42658755d25ac2c5d545
msgid "Retrieve everything at once if you know you will need it"
msgstr ""

#: ../../topics/db/optimization.txt:173
# a1ad9075411a422794cb25963da3a384
msgid "Hitting the database multiple times for different parts of a single 'set' of data that you will need all parts of is, in general, less efficient than retrieving it all in one query. This is particularly important if you have a query that is executed in a loop, and could therefore end up doing many database queries, when only one was needed. So:"
msgstr ""

#: ../../topics/db/optimization.txt:180
# af8d4be348c94972a2d43a6a486d9ae4
msgid "Use ``QuerySet.select_related()`` and ``prefetch_related()``"
msgstr ""

#: ../../topics/db/optimization.txt:182
# 780b206c76b647e48638afe57684135b
msgid "Understand :meth:`~django.db.models.query.QuerySet.select_related` and :meth:`~django.db.models.query.QuerySet.prefetch_related` thoroughly, and use them:"
msgstr ""

#: ../../topics/db/optimization.txt:186
# d15ccc64968f4890951b9b300905821b
msgid "in view code,"
msgstr ""

#: ../../topics/db/optimization.txt:188
# 05301710b18f45a48e3998dc17418c9e
msgid "and in :doc:`managers and default managers </topics/db/managers>` where appropriate. Be aware when your manager is and is not used; sometimes this is tricky so don't make assumptions."
msgstr ""

#: ../../topics/db/optimization.txt:193
# b839181d9a3547b7b9bb51a0d182097a
msgid "Don't retrieve things you don't need"
msgstr ""

#: ../../topics/db/optimization.txt:196
# 00fe734d4cea43e085e89b4463a66709
msgid "Use ``QuerySet.values()`` and ``values_list()``"
msgstr ""

#: ../../topics/db/optimization.txt:198
# c5e458c562324592ac56502e3c2a0e45
msgid "When you just want a ``dict`` or ``list`` of values, and don't need ORM model objects, make appropriate usage of :meth:`~django.db.models.query.QuerySet.values()`. These can be useful for replacing model objects in template code - as long as the dicts you supply have the same attributes as those used in the template, you are fine."
msgstr ""

#: ../../topics/db/optimization.txt:206
# 7cde6667e7c24cec823f27556e3c2ac8
msgid "Use ``QuerySet.defer()`` and ``only()``"
msgstr ""

#: ../../topics/db/optimization.txt:208
# 30017cbbe72841aea5d28ddc8156f5a5
msgid "Use :meth:`~django.db.models.query.QuerySet.defer()` and :meth:`~django.db.models.query.QuerySet.only()` if there are database columns you know that you won't need (or won't need in most cases) to avoid loading them. Note that if you *do* use them, the ORM will have to go and get them in a separate query, making this a pessimization if you use it inappropriately."
msgstr ""

#: ../../topics/db/optimization.txt:214
# 83963b8771f446babe46cc2010ff8c59
msgid "Also, be aware that there is some (small extra) overhead incurred inside Django when constructing a model with deferred fields. Don't be too aggressive in deferring fields without profiling as the database has to read most of the non-text, non-VARCHAR data from the disk for a single row in the results, even if it ends up only using a few columns. The ``defer()`` and ``only()`` methods are most useful when you can avoid loading a lot of text data or for fields that might take a lot of processing to convert back to Python. As always, profile first, then optimize."
msgstr ""

#: ../../topics/db/optimization.txt:224
# c68cce264df84860b1065e6c256f1a86
msgid "Use QuerySet.count()"
msgstr ""

#: ../../topics/db/optimization.txt:226
# e76b06c8494943e6a2b385fb18448a2b
msgid "...if you only want the count, rather than doing ``len(queryset)``."
msgstr ""

#: ../../topics/db/optimization.txt:229
# ba82aad9ee6e433b8327092aa469ba57
msgid "Use QuerySet.exists()"
msgstr ""

#: ../../topics/db/optimization.txt:231
# 9c29538c0b584f6c891321df8c27deb8
msgid "...if you only want to find out if at least one result exists, rather than ``if queryset``."
msgstr ""

#: ../../topics/db/optimization.txt:234
# 9d2880e76cd84e87a183533e093573ec
msgid "But:"
msgstr ""

#: ../../topics/db/optimization.txt:237
# 56e72277143f476d988e33579531f1d8
msgid "Don't overuse ``count()`` and ``exists()``"
msgstr ""

#: ../../topics/db/optimization.txt:239
# e2eaab23b6f0442fa9aac17fdfaf4d67
msgid "If you are going to need other data from the QuerySet, just evaluate it."
msgstr ""

#: ../../topics/db/optimization.txt:241
# 32bfed1fc6ea4965977690405b6652fa
msgid "For example, assuming an Email model that has a ``body`` attribute and a many-to-many relation to User, the following template code is optimal:"
msgstr ""

#: ../../topics/db/optimization.txt:260
# fb55f6489e764eb7b1a41b617e965ca7
msgid "It is optimal because:"
msgstr ""

#: ../../topics/db/optimization.txt:262
# 35a8e05e3d294a398f8fc51b30be4587
msgid "Since QuerySets are lazy, this does no database queries if 'display_inbox' is False."
msgstr ""

#: ../../topics/db/optimization.txt:265
# f91f9047b0c5488088696a14123dd11f
msgid "Use of :ttag:`with` means that we store ``user.emails.all`` in a variable for later use, allowing its cache to be re-used."
msgstr ""

#: ../../topics/db/optimization.txt:268
# 7ed9be333ae3490dbb82f4c10b379887
msgid "The line ``{% if emails %}`` causes ``QuerySet.__bool__()`` to be called, which causes the ``user.emails.all()`` query to be run on the database, and at the least the first line to be turned into an ORM object. If there aren't any results, it will return False, otherwise True."
msgstr ""

#: ../../topics/db/optimization.txt:273
# 9897b5f41c85440b9efcde87580dd3fd
msgid "The use of ``{{ emails|length }}`` calls ``QuerySet.__len__()``, filling out the rest of the cache without doing another query."
msgstr ""

#: ../../topics/db/optimization.txt:276
# b043397272a94ed3b6d56924013fb1ca
msgid "The :ttag:`for` loop iterates over the already filled cache."
msgstr ""

#: ../../topics/db/optimization.txt:278
# cb40f47cd32248afa7c9d1b510869dc9
msgid "In total, this code does either one or zero database queries. The only deliberate optimization performed is the use of the :ttag:`with` tag. Using ``QuerySet.exists()`` or ``QuerySet.count()`` at any point would cause additional queries."
msgstr ""

#: ../../topics/db/optimization.txt:284
# 2cb1b616983647b3a96da190b2842449
msgid "Use ``QuerySet.update()`` and ``delete()``"
msgstr ""

#: ../../topics/db/optimization.txt:286
# 4cb5851e091545e58de1710c34f9c010
msgid "Rather than retrieve a load of objects, set some values, and save them individual, use a bulk SQL UPDATE statement, via :ref:`QuerySet.update() <topics-db-queries-update>`. Similarly, do :ref:`bulk deletes <topics-db-queries-delete>` where possible."
msgstr ""

#: ../../topics/db/optimization.txt:291
# 7bf5294661804d999b6f9678df416481
msgid "Note, however, that these bulk update methods cannot call the ``save()`` or ``delete()`` methods of individual instances, which means that any custom behavior you have added for these methods will not be executed, including anything driven from the normal database object :doc:`signals </ref/signals>`."
msgstr ""

#: ../../topics/db/optimization.txt:297
# 7a0355cdbcdf421991e3c6475600b5d0
msgid "Use foreign key values directly"
msgstr ""

#: ../../topics/db/optimization.txt:299
# 55dde0ad992e4bb38042da34cd77722f
msgid "If you only need a foreign key value, use the foreign key value that is already on the object you've got, rather than getting the whole related object and taking its primary key. i.e. do::"
msgstr ""

#: ../../topics/db/optimization.txt:305
# 05a04354d5d64a0480d439ba8b94ca5d
msgid "instead of::"
msgstr ""

#: ../../topics/db/optimization.txt:310
# c18fef23bfd04a549e48a4664cdd303a
msgid "Insert in bulk"
msgstr ""

#: ../../topics/db/optimization.txt:312
# 6eddf3e43a0747bca732f6e691f188cd
msgid "When creating objects, where possible, use the :meth:`~django.db.models.query.QuerySet.bulk_create()` method to reduce the number of SQL queries. For example::"
msgstr ""

#: ../../topics/db/optimization.txt:321
#: ../../topics/db/optimization.txt:335
# 727f7272c0d148738612cd5ee015fccb
# b1b07e38ed994bf2bad0e339de6be3d7
msgid "...is preferable to::"
msgstr ""

#: ../../topics/db/optimization.txt:326
# 48fad55ebdaa4bddbf2e51043be22db4
msgid "Note that there are a number of :meth:`caveats to this method <django.db.models.query.QuerySet.bulk_create>`, so make sure it's appropriate for your use case."
msgstr ""

#: ../../topics/db/optimization.txt:330
# d0725a93d9514c488880e96a84e035f4
msgid "This also applies to :class:`ManyToManyFields <django.db.models.ManyToManyField>`, so doing::"
msgstr ""

#: ../../topics/db/optimization.txt:340
# bfd84db3315a4fb68f29f8baf40f03c9
msgid "...where ``Bands`` and ``Artists`` have a many-to-many relationship."
msgstr ""

#: ../../topics/db/queries.txt:3
# b5aefa3b354b4e19b0c958b413a1fa4c
msgid "Making queries"
msgstr ""

#: ../../topics/db/queries.txt:7
# 78745c87d98b428cb7a7a82e1620accf
msgid "Once you've created your :doc:`data models </topics/db/models>`, Django automatically gives you a database-abstraction API that lets you create, retrieve, update and delete objects. This document explains how to use this API. Refer to the :doc:`data model reference </ref/models/index>` for full details of all the various model lookup options."
msgstr ""

#: ../../topics/db/queries.txt:13
# c9fcf26e36334911bc41677f43330eb2
msgid "Throughout this guide (and in the reference), we'll refer to the following models, which comprise a Weblog application:"
msgstr ""

#: ../../topics/db/queries.txt:49
# cd946c95483f41f78f7dba3aad8f7dc2
msgid "Creating objects"
msgstr ""

#: ../../topics/db/queries.txt:51
# 83f8dd1c2b6b4411b389c7d8d7f3d56d
msgid "To represent database-table data in Python objects, Django uses an intuitive system: A model class represents a database table, and an instance of that class represents a particular record in the database table."
msgstr ""

#: ../../topics/db/queries.txt:55
# 6e4ee0e41e994066a22055652d16146a
msgid "To create an object, instantiate it using keyword arguments to the model class, then call :meth:`~django.db.models.Model.save` to save it to the database."
msgstr ""

#: ../../topics/db/queries.txt:58
# 668c1d2cd6e54d2dbc57012e591174fd
msgid "You import the model class from wherever it lives on the Python path, as you may expect. (We point this out here because previous Django versions required funky model importing.)"
msgstr ""

#: ../../topics/db/queries.txt:62
# 03a1ec2b1fe748508bf5a70e38e8d761
msgid "Assuming models live in a file ``mysite/blog/models.py``, here's an example::"
msgstr ""

#: ../../topics/db/queries.txt:68
# 64701a3b74284cd6b60a8a66d0a14d1f
msgid "This performs an ``INSERT`` SQL statement behind the scenes. Django doesn't hit the database until you explicitly call :meth:`~django.db.models.Model.save`."
msgstr ""

#: ../../topics/db/queries.txt:71
# bb7955fdea0543b4830dd7ea50ad1ef2
msgid "The :meth:`~django.db.models.Model.save` method has no return value."
msgstr ""

#: ../../topics/db/queries.txt:75
# 082b0e1e10ab4a8a8a90089a4a5caaf3
msgid ":meth:`~django.db.models.Model.save` takes a number of advanced options not described here. See the documentation for :meth:`~django.db.models.Model.save` for complete details."
msgstr ""

#: ../../topics/db/queries.txt:79
# b50a98cc6bc14de58d5fe9e0e8623621
msgid "To create and save an object in a single step, use the :meth:`~django.db.models.query.QuerySet.create()` method."
msgstr ""

#: ../../topics/db/queries.txt:83
# f0736be6d2634a89a989fbb0290d8c73
msgid "Saving changes to objects"
msgstr ""

#: ../../topics/db/queries.txt:85
# 4e944c1814f341dda9818b19d4a9c502
msgid "To save changes to an object that's already in the database, use :meth:`~django.db.models.Model.save`."
msgstr ""

#: ../../topics/db/queries.txt:88
# 93ca3a2a798b45ab84c00b322a20ff56
msgid "Given a ``Blog`` instance ``b5`` that has already been saved to the database, this example changes its name and updates its record in the database::"
msgstr ""

#: ../../topics/db/queries.txt:94
# 41a91606899d422fb50347124381865c
msgid "This performs an ``UPDATE`` SQL statement behind the scenes. Django doesn't hit the database until you explicitly call :meth:`~django.db.models.Model.save`."
msgstr ""

#: ../../topics/db/queries.txt:98
# 37ad168c3739428c9978c8d383c94a63
msgid "Saving ``ForeignKey`` and ``ManyToManyField`` fields"
msgstr ""

#: ../../topics/db/queries.txt:100
# 1e71f6175f824eb1a17f1ded21dedb31
msgid "Updating a :class:`~django.db.models.ForeignKey` field works exactly the same way as saving a normal field -- simply assign an object of the right type to the field in question. This example updates the ``blog`` attribute of an ``Entry`` instance ``entry``::"
msgstr ""

#: ../../topics/db/queries.txt:111
# 02393f626681453a9e655bdc47407bbf
msgid "Updating a :class:`~django.db.models.ManyToManyField` works a little differently -- use the :meth:`~django.db.models.fields.related.RelatedManager.add` method on the field to add a record to the relation. This example adds the ``Author`` instance ``joe`` to the ``entry`` object::"
msgstr ""

#: ../../topics/db/queries.txt:121
# 1e6f5bafb83b405da2a83feb81b657db
msgid "To add multiple records to a :class:`~django.db.models.ManyToManyField` in one go, include multiple arguments in the call to :meth:`~django.db.models.fields.related.RelatedManager.add`, like this::"
msgstr ""

#: ../../topics/db/queries.txt:131
# 4aef01dc6410403b8c3e4b8f95410b04
msgid "Django will complain if you try to assign or add an object of the wrong type."
msgstr ""

#: ../../topics/db/queries.txt:134
# 1317ad403c2145b19925cd82c91d9070
msgid "Retrieving objects"
msgstr ""

#: ../../topics/db/queries.txt:136
# 44669e1f73504b4f98eae6f5be103fc2
msgid "To retrieve objects from your database, construct a :class:`~django.db.models.query.QuerySet` via a :class:`~django.db.models.Manager` on your model class."
msgstr ""

#: ../../topics/db/queries.txt:140
# f9479f86d5cc4d8b9e4e98b7693878e2
msgid "A :class:`~django.db.models.query.QuerySet` represents a collection of objects from your database. It can have zero, one or many *filters* -- criteria that narrow down the collection based on given parameters. In SQL terms, a :class:`~django.db.models.query.QuerySet` equates to a ``SELECT`` statement, and a filter is a limiting clause such as ``WHERE`` or ``LIMIT``."
msgstr ""

#: ../../topics/db/queries.txt:146
# 7c82c8c11cd841cc9b9c5cc2fd08c28c
msgid "You get a :class:`~django.db.models.query.QuerySet` by using your model's :class:`~django.db.models.Manager`. Each model has at least one :class:`~django.db.models.Manager`, and it's called ``objects`` by default. Access it directly via the model class, like so::"
msgstr ""

#: ../../topics/db/queries.txt:161
# af1d74fa7dd7459a8573c72710c076f5
msgid "``Managers`` are accessible only via model classes, rather than from model instances, to enforce a separation between \"table-level\" operations and \"record-level\" operations."
msgstr ""

#: ../../topics/db/queries.txt:165
# 9e6a1496edee4d02b41c103f3e0f828c
msgid "The :class:`~django.db.models.Manager` is the main source of ``QuerySets`` for a model. For example, ``Blog.objects.all()`` returns a :class:`~django.db.models.query.QuerySet` that contains all ``Blog`` objects in the database."
msgstr ""

#: ../../topics/db/queries.txt:171
# e4badface4e246c39c91b0af354d733d
msgid "Retrieving all objects"
msgstr ""

#: ../../topics/db/queries.txt:173
# 3594b9dc858e4278995497a65fb19150
msgid "The simplest way to retrieve objects from a table is to get all of them. To do this, use the :meth:`~django.db.models.query.QuerySet.all` method on a :class:`~django.db.models.Manager`::"
msgstr ""

#: ../../topics/db/queries.txt:179
# ccd6ccb125854398b356feaa9181aad3
msgid "The :meth:`~django.db.models.query.QuerySet.all` method returns a :class:`~django.db.models.query.QuerySet` of all the objects in the database."
msgstr ""

#: ../../topics/db/queries.txt:183
# 8faad5e14604483b89b13065e259f3cd
msgid "Retrieving specific objects with filters"
msgstr ""

#: ../../topics/db/queries.txt:185
# 39417496c6384dfeb5733e09a7e7a839
msgid "The :class:`~django.db.models.query.QuerySet` returned by :meth:`~django.db.models.query.QuerySet.all` describes all objects in the database table. Usually, though, you'll need to select only a subset of the complete set of objects."
msgstr ""

#: ../../topics/db/queries.txt:190
# a060e06b25af4bbfb6134a642725e3f9
msgid "To create such a subset, you refine the initial :class:`~django.db.models.query.QuerySet`, adding filter conditions. The two most common ways to refine a :class:`~django.db.models.query.QuerySet` are:"
msgstr ""

#: ../../topics/db/queries.txt:195
# 2523d38435194951a111bd23d3ee8532
msgid "Returns a new :class:`~django.db.models.query.QuerySet` containing objects that match the given lookup parameters."
msgstr ""

#: ../../topics/db/queries.txt:199
# 0b54b557547743649e577263cf50a054
msgid "Returns a new :class:`~django.db.models.query.QuerySet` containing objects that do *not* match the given lookup parameters."
msgstr ""

#: ../../topics/db/queries.txt:202
# 2bdb07c4a28d4cad8b92e0abb4789ef7
msgid "The lookup parameters (``**kwargs`` in the above function definitions) should be in the format described in `Field lookups`_ below."
msgstr ""

#: ../../topics/db/queries.txt:205
# f13148ca78f4480a8367a704f6230a02
msgid "For example, to get a :class:`~django.db.models.query.QuerySet` of blog entries from the year 2006, use :meth:`~django.db.models.query.QuerySet.filter` like so::"
msgstr ""

#: ../../topics/db/queries.txt:211
# 63d9fdba148b4a099b2f4c27c54baec5
msgid "With the default manager class, it is the same as::"
msgstr ""

#: ../../topics/db/queries.txt:218
# 15a40f83c4324e63894658d52a47a0d4
msgid "Chaining filters"
msgstr ""

#: ../../topics/db/queries.txt:220
# 1202820c698c4988833978cf0120782e
msgid "The result of refining a :class:`~django.db.models.query.QuerySet` is itself a :class:`~django.db.models.query.QuerySet`, so it's possible to chain refinements together. For example::"
msgstr ""

#: ../../topics/db/queries.txt:232
# 60185e3009bf45cebe57a7c455589d8c
msgid "This takes the initial :class:`~django.db.models.query.QuerySet` of all entries in the database, adds a filter, then an exclusion, then another filter. The final result is a :class:`~django.db.models.query.QuerySet` containing all entries with a headline that starts with \"What\", that were published between January 30, 2005, and the current day."
msgstr ""

#: ../../topics/db/queries.txt:241
# 68e3b5d51f5d4712a4eaf42ec969bad2
msgid "Filtered QuerySets are unique"
msgstr ""

#: ../../topics/db/queries.txt:243
# 64e5352072594ce7a4e9140ae803850d
msgid "Each time you refine a :class:`~django.db.models.query.QuerySet`, you get a brand-new :class:`~django.db.models.query.QuerySet` that is in no way bound to the previous :class:`~django.db.models.query.QuerySet`. Each refinement creates a separate and distinct :class:`~django.db.models.query.QuerySet` that can be stored, used and reused."
msgstr ""

#: ../../topics/db/queries.txt:255
# d9d5330d5f6e48da80f43a54dad0eb17
msgid "These three ``QuerySets`` are separate. The first is a base :class:`~django.db.models.query.QuerySet` containing all entries that contain a headline starting with \"What\". The second is a subset of the first, with an additional criteria that excludes records whose ``pub_date`` is greater than now. The third is a subset of the first, with an additional criteria that selects only the records whose ``pub_date`` is greater than now. The initial :class:`~django.db.models.query.QuerySet` (``q1``) is unaffected by the refinement process."
msgstr ""

#: ../../topics/db/queries.txt:267
# dab26ae573984e728d2559965e5cae34
msgid "QuerySets are lazy"
msgstr ""

#: ../../topics/db/queries.txt:269
# 1e08a7c00a6540e284e0e0764887aaee
msgid "``QuerySets`` are lazy -- the act of creating a :class:`~django.db.models.query.QuerySet` doesn't involve any database activity. You can stack filters together all day long, and Django won't actually run the query until the :class:`~django.db.models.query.QuerySet` is *evaluated*. Take a look at this example::"
msgstr ""

#: ../../topics/db/queries.txt:280
# 94680afbf8b64d098f8cf0a3565723ef
msgid "Though this looks like three database hits, in fact it hits the database only once, at the last line (``print(q)``). In general, the results of a :class:`~django.db.models.query.QuerySet` aren't fetched from the database until you \"ask\" for them. When you do, the :class:`~django.db.models.query.QuerySet` is *evaluated* by accessing the database. For more details on exactly when evaluation takes place, see :ref:`when-querysets-are-evaluated`."
msgstr ""

#: ../../topics/db/queries.txt:292
# 6acd7881cc694f969131bf6f55a72506
msgid "Retrieving a single object with get"
msgstr ""

#: ../../topics/db/queries.txt:294
# 596fe4e516724231aa0cd76f1dbee107
msgid ":meth:`~django.db.models.query.QuerySet.filter` will always give you a :class:`~django.db.models.query.QuerySet`, even if only a single object matches the query - in this case, it will be a :class:`~django.db.models.query.QuerySet` containing a single element."
msgstr ""

#: ../../topics/db/queries.txt:299
# 354d47ea46da45048434a55a3b3c858a
msgid "If you know there is only one object that matches your query, you can use the :meth:`~django.db.models.query.QuerySet.get` method on a :class:`~django.db.models.Manager` which returns the object directly::"
msgstr ""

#: ../../topics/db/queries.txt:305
# 8968825a650d4905b64a6ad42b6cd9af
msgid "You can use any query expression with :meth:`~django.db.models.query.QuerySet.get`, just like with :meth:`~django.db.models.query.QuerySet.filter` - again, see `Field lookups`_ below."
msgstr ""

#: ../../topics/db/queries.txt:310
# 2e7c5d46c1b7468c99d73863d5343d8c
msgid "Note that there is a difference between using :meth:`~django.db.models.query.QuerySet.get`, and using :meth:`~django.db.models.query.QuerySet.filter` with a slice of ``[0]``. If there are no results that match the query, :meth:`~django.db.models.query.QuerySet.get` will raise a ``DoesNotExist`` exception. This exception is an attribute of the model class that the query is being performed on - so in the code above, if there is no ``Entry`` object with a primary key of 1, Django will raise ``Entry.DoesNotExist``."
msgstr ""

#: ../../topics/db/queries.txt:319
# 1a5fe4126c184b0a94abc88da420f953
msgid "Similarly, Django will complain if more than one item matches the :meth:`~django.db.models.query.QuerySet.get` query. In this case, it will raise :exc:`~django.core.exceptions.MultipleObjectsReturned`, which again is an attribute of the model class itself."
msgstr ""

#: ../../topics/db/queries.txt:326
# de6d6a7795df49e0abe17fc9623f4467
msgid "Other QuerySet methods"
msgstr ""

#: ../../topics/db/queries.txt:328
# 58a873da00ae4cdfb18dc397ac0c428f
msgid "Most of the time you'll use :meth:`~django.db.models.query.QuerySet.all`, :meth:`~django.db.models.query.QuerySet.get`, :meth:`~django.db.models.query.QuerySet.filter` and :meth:`~django.db.models.query.QuerySet.exclude` when you need to look up objects from the database. However, that's far from all there is; see the :ref:`QuerySet API Reference <queryset-api>` for a complete list of all the various :class:`~django.db.models.query.QuerySet` methods."
msgstr ""

#: ../../topics/db/queries.txt:339
# 3831b334c60045ecb1ef5d562e6f3940
msgid "Limiting QuerySets"
msgstr ""

#: ../../topics/db/queries.txt:341
# 4748452fe9e640c68323aaab92fb2358
msgid "Use a subset of Python's array-slicing syntax to limit your :class:`~django.db.models.query.QuerySet` to a certain number of results. This is the equivalent of SQL's ``LIMIT`` and ``OFFSET`` clauses."
msgstr ""

#: ../../topics/db/queries.txt:345
# 4aecfa1984cd49aeb824fc13398e34b8
msgid "For example, this returns the first 5 objects (``LIMIT 5``)::"
msgstr ""

#: ../../topics/db/queries.txt:349
# 8951a96654cf4b6d9718fca4692be7cf
msgid "This returns the sixth through tenth objects (``OFFSET 5 LIMIT 5``)::"
msgstr ""

#: ../../topics/db/queries.txt:353
# 452b67476d5045049d0616e01f1f3534
msgid "Negative indexing (i.e. ``Entry.objects.all()[-1]``) is not supported."
msgstr ""

#: ../../topics/db/queries.txt:355
# 5ccb072d23f643d6b720c4f0b8b0db01
msgid "Generally, slicing a :class:`~django.db.models.query.QuerySet` returns a new :class:`~django.db.models.query.QuerySet` -- it doesn't evaluate the query. An exception is if you use the \"step\" parameter of Python slice syntax. For example, this would actually execute the query in order to return a list of every *second* object of the first 10::"
msgstr ""

#: ../../topics/db/queries.txt:363
# 764cbfd489ac443f85c369df0aa97753
msgid "To retrieve a *single* object rather than a list (e.g. ``SELECT foo FROM bar LIMIT 1``), use a simple index instead of a slice. For example, this returns the first ``Entry`` in the database, after ordering entries alphabetically by headline::"
msgstr ""

#: ../../topics/db/queries.txt:370
# a32b019a832346ebb5fdc9b28a3ce198
msgid "This is roughly equivalent to::"
msgstr ""

#: ../../topics/db/queries.txt:374
# dd9e9b55c5ea4055a57495c46d45b8f1
msgid "Note, however, that the first of these will raise ``IndexError`` while the second will raise ``DoesNotExist`` if no objects match the given criteria. See :meth:`~django.db.models.query.QuerySet.get` for more details."
msgstr ""

#: ../../topics/db/queries.txt:381
# 8aef730e0a4c4277b2df0f89e99490f7
msgid "Field lookups"
msgstr ""

#: ../../topics/db/queries.txt:383
# b73214e58af3464394a3db96d42db1ea
msgid "Field lookups are how you specify the meat of an SQL ``WHERE`` clause. They're specified as keyword arguments to the :class:`~django.db.models.query.QuerySet` methods :meth:`~django.db.models.query.QuerySet.filter`, :meth:`~django.db.models.query.QuerySet.exclude` and :meth:`~django.db.models.query.QuerySet.get`."
msgstr ""

#: ../../topics/db/queries.txt:389
# c27909887f4144b3852b2b1ee3d3762d
msgid "Basic lookups keyword arguments take the form ``field__lookuptype=value``. (That's a double-underscore). For example::"
msgstr ""

#: ../../topics/db/queries.txt:394
# a3e7bef9f27544739eee3c073c35b1b8
msgid "translates (roughly) into the following SQL::"
msgstr ""

#: ../../topics/db/queries.txt:400
# 2de74bcc644849bfba6d7b2b9a5b8ec4
msgid "Python has the ability to define functions that accept arbitrary name-value arguments whose names and values are evaluated at runtime. For more information, see `Keyword Arguments`_ in the official Python tutorial."
msgstr ""

#: ../../topics/db/queries.txt:415
# 3c9fafe8b345456a8c7e3968163d129e
msgid "If you pass an invalid keyword argument, a lookup function will raise ``TypeError``."
msgstr ""

#: ../../topics/db/queries.txt:418
# f602e389de5a4879bc4739a5b190bb09
msgid "The database API supports about two dozen lookup types; a complete reference can be found in the :ref:`field lookup reference <field-lookups>`. To give you a taste of what's available, here's some of the more common lookups you'll probably use:"
msgstr ""

#: ../../topics/db/queries.txt:424
# 8b0bdc68c68e4b6bb9b97036dbfbc3c2
msgid "An \"exact\" match. For example::"
msgstr ""

#: ../../topics/db/queries.txt:428
# 7b5f6e3b4cfd40d1b2cf861433de9701
msgid "Would generate SQL along these lines:"
msgstr ""

#: ../../topics/db/queries.txt:434
# 4658085b8c7449e88b8d11a377ab487d
msgid "If you don't provide a lookup type -- that is, if your keyword argument doesn't contain a double underscore -- the lookup type is assumed to be ``exact``."
msgstr ""

#: ../../topics/db/queries.txt:438
# 215170da61564d5e8ad56cb657f9b4bd
msgid "For example, the following two statements are equivalent::"
msgstr ""

#: ../../topics/db/queries.txt:443
# 7a76303d27e24768930ff0fccdeb3a4d
msgid "This is for convenience, because ``exact`` lookups are the common case."
msgstr ""

#: ../../topics/db/queries.txt:446
# 9041c4961204463a8f87a589d3f3a174
msgid "A case-insensitive match. So, the query::"
msgstr ""

#: ../../topics/db/queries.txt:450
# 66b670a7d85f4211a267264afe839da8
msgid "Would match a ``Blog`` titled \"Beatles Blog\", \"beatles blog\", or even \"BeAtlES blOG\"."
msgstr ""

#: ../../topics/db/queries.txt:454
# 5cb217e0bf6a48809b9637454f77a4e1
msgid "Case-sensitive containment test. For example::"
msgstr ""

#: ../../topics/db/queries.txt:458
# aad9632187f546848cb977f39b8c6e2e
msgid "Roughly translates to this SQL:"
msgstr ""

#: ../../topics/db/queries.txt:464
# 94551ba29e2849daa6c1baa978ada183
msgid "Note this will match the headline ``'Today Lennon honored'`` but not ``'today lennon honored'``."
msgstr ""

#: ../../topics/db/queries.txt:467
# 3ecfbb8922934cd692e6f14bf0d61cf7
msgid "There's also a case-insensitive version, :lookup:`icontains`."
msgstr ""

#: ../../topics/db/queries.txt:470
# cff5301dfc974ef1bb8ec82525e99569
msgid "Starts-with and ends-with search, respectively. There are also case-insensitive versions called :lookup:`istartswith` and :lookup:`iendswith`."
msgstr ""

#: ../../topics/db/queries.txt:474
# d4d6b155f28b4463afd22571e47b5635
msgid "Again, this only scratches the surface. A complete reference can be found in the :ref:`field lookup reference <field-lookups>`."
msgstr ""

#: ../../topics/db/queries.txt:480
# 93db7e1ed4564185b7f74b9f6f397b15
msgid "Lookups that span relationships"
msgstr ""

#: ../../topics/db/queries.txt:482
# ebefd38a17014e46a2b71204c68ece0c
msgid "Django offers a powerful and intuitive way to \"follow\" relationships in lookups, taking care of the SQL ``JOIN``\\s for you automatically, behind the scenes. To span a relationship, just use the field name of related fields across models, separated by double underscores, until you get to the field you want."
msgstr ""

#: ../../topics/db/queries.txt:488
# a2d1ff4d15314a41bfc44a2adde9be94
msgid "This example retrieves all ``Entry`` objects with a ``Blog`` whose ``name`` is ``'Beatles Blog'``::"
msgstr ""

#: ../../topics/db/queries.txt:493
# 9d66710f0cd54a4daa150c5cadfc25e3
msgid "This spanning can be as deep as you'd like."
msgstr ""

#: ../../topics/db/queries.txt:495
# b5108bfb9c4c4b8289230b839cc67665
msgid "It works backwards, too. To refer to a \"reverse\" relationship, just use the lowercase name of the model."
msgstr ""

#: ../../topics/db/queries.txt:498
# 0a1f1385361940bababa47e27d2bc0de
msgid "This example retrieves all ``Blog`` objects which have at least one ``Entry`` whose ``headline`` contains ``'Lennon'``::"
msgstr ""

#: ../../topics/db/queries.txt:503
# 38accaae827f40ed91dcd8b8cd9e13d6
msgid "If you are filtering across multiple relationships and one of the intermediate models doesn't have a value that meets the filter condition, Django will treat it as if there is an empty (all values are ``NULL``), but valid, object there. All this means is that no error will be raised. For example, in this filter::"
msgstr ""

#: ../../topics/db/queries.txt:510
# 16a00649c6da41f4b3b5d47e62b8bc77
msgid "(if there was a related ``Author`` model), if there was no ``author`` associated with an entry, it would be treated as if there was also no ``name`` attached, rather than raising an error because of the missing ``author``. Usually this is exactly what you want to have happen. The only case where it might be confusing is if you are using :lookup:`isnull`. Thus::"
msgstr ""

#: ../../topics/db/queries.txt:518
# b949364bf54447029979aad7e6fd7d52
msgid "will return ``Blog`` objects that have an empty ``name`` on the ``author`` and also those which have an empty ``author`` on the ``entry``. If you don't want those latter objects, you could write::"
msgstr ""

#: ../../topics/db/queries.txt:526
# 2f6c4469eef843d888b0656c6b4fb041
msgid "Spanning multi-valued relationships"
msgstr ""

#: ../../topics/db/queries.txt:528
# 50d4f834c85c48a7b002bb8476fe5092
msgid "When you are filtering an object based on a :class:`~django.db.models.ManyToManyField` or a reverse :class:`~django.db.models.ForeignKey`, there are two different sorts of filter you may be interested in. Consider the ``Blog``/``Entry`` relationship (``Blog`` to ``Entry`` is a one-to-many relation). We might be interested in finding blogs that have an entry which has both *\"Lennon\"* in the headline and was published in 2008. Or we might want to find blogs that have an entry with *\"Lennon\"* in the headline as well as an entry that was published in 2008. Since there are multiple entries associated with a single ``Blog``, both of these queries are possible and make sense in some situations."
msgstr ""

#: ../../topics/db/queries.txt:539
# 43ddc1c8ef264936a55a172830d4444a
msgid "The same type of situation arises with a :class:`~django.db.models.ManyToManyField`. For example, if an ``Entry`` has a :class:`~django.db.models.ManyToManyField` called ``tags``, we might want to find entries linked to tags called *\"music\"* and *\"bands\"* or we might want an entry that contains a tag with a name of *\"music\"* and a status of *\"public\"*."
msgstr ""

#: ../../topics/db/queries.txt:545
# b55f140f8bb0480988b0c97883e2569f
msgid "To handle both of these situations, Django has a consistent way of processing :meth:`~django.db.models.query.QuerySet.filter` and :meth:`~django.db.models.query.QuerySet.exclude` calls. Everything inside a single :meth:`~django.db.models.query.QuerySet.filter` call is applied simultaneously to filter out items matching all those requirements. Successive :meth:`~django.db.models.query.QuerySet.filter` calls further restrict the set of objects, but for multi-valued relations, they apply to any object linked to the primary model, not necessarily those objects that were selected by an earlier :meth:`~django.db.models.query.QuerySet.filter` call."
msgstr ""

#: ../../topics/db/queries.txt:555
# d49c19de0e3b423ca368ccaf2db42c91
msgid "That may sound a bit confusing, so hopefully an example will clarify. To select all blogs that contain entries with both *\"Lennon\"* in the headline and that were published in 2008 (the same entry satisfying both conditions), we would write::"
msgstr ""

#: ../../topics/db/queries.txt:563
# 87cabb890d4f457e924aba49d2b41085
msgid "To select all blogs that contain an entry with *\"Lennon\"* in the headline **as well as** an entry that was published in 2008, we would write::"
msgstr ""

#: ../../topics/db/queries.txt:569
# 70a3489444a44b40a4afd3a7f5dd2916
msgid "Suppose there is only one blog that had both entries containing *\"Lennon\"* and entries from 2008, but that none of the entries from 2008 contained *\"Lennon\"*. The first query would not return any blogs, but the second query would return that one blog."
msgstr ""

#: ../../topics/db/queries.txt:574
# d43454372bd3431ab9e15f15534a6c43
msgid "In the second example, the first filter restricts the queryset to all those blogs linked to entries with *\"Lennon\"* in the headline. The second filter restricts the set of blogs *further* to those that are also linked to entries that were published in 2008. The entries selected by the second filter may or may not be the same as the entries in the first filter. We are filtering the ``Blog`` items with each filter statement, not the ``Entry`` items."
msgstr ""

#: ../../topics/db/queries.txt:581
# 3b21a8658c4548ee929ae412f41d836e
msgid "All of this behavior also applies to :meth:`~django.db.models.query.QuerySet.exclude`: all the conditions in a single :meth:`~django.db.models.query.QuerySet.exclude` statement apply to a single instance (if those conditions are talking about the same multi-valued relation). Conditions in subsequent :meth:`~django.db.models.query.QuerySet.filter` or :meth:`~django.db.models.query.QuerySet.exclude` calls that refer to the same relation may end up filtering on different linked objects."
msgstr ""

#: ../../topics/db/queries.txt:593
# fcd5878f99a948539160a1c93b26076e
msgid "Filters can reference fields on the model"
msgstr ""

#: ../../topics/db/queries.txt:597
# 9dd6d926117b470e8113e2764512fc44
msgid "In the examples given so far, we have constructed filters that compare the value of a model field with a constant. But what if you want to compare the value of a model field with another field on the same model?"
msgstr ""

#: ../../topics/db/queries.txt:601
# 356b37862d5e4126bb0b8ef733566a8d
msgid "Django provides the :ref:`F() expressions <query-expressions>` to allow such comparisons. Instances of ``F()`` act as a reference to a model field within a query. These references can then be used in query filters to compare the values of two different fields on the same model instance."
msgstr ""

#: ../../topics/db/queries.txt:606
# 9fbad05a8fa647e59603942cc6dacf31
msgid "For example, to find a list of all blog entries that have had more comments than pingbacks, we construct an ``F()`` object to reference the pingback count, and use that ``F()`` object in the query::"
msgstr ""

#: ../../topics/db/queries.txt:613
# f31281e6db064c6c91e248c3a54cf958
msgid "Django supports the use of addition, subtraction, multiplication, division and modulo arithmetic with ``F()`` objects, both with constants and with other ``F()`` objects. To find all the blog entries with more than *twice* as many comments as pingbacks, we modify the query::"
msgstr ""

#: ../../topics/db/queries.txt:620
# 7bbb533643354ac29776ceda583b1b79
msgid "To find all the entries where the rating of the entry is less than the sum of the pingback count and comment count, we would issue the query::"
msgstr ""

#: ../../topics/db/queries.txt:626
# c7762ba5cb5a46ef8774f5a4f9f4d1fa
msgid "You can also use the double underscore notation to span relationships in an ``F()`` object. An ``F()`` object with a double underscore will introduce any joins needed to access the related object. For example, to retrieve all the entries where the author's name is the same as the blog name, we could issue the query::"
msgstr ""

#: ../../topics/db/queries.txt:634
# 27fca18191344e3594f7ab2011f14368
msgid "For date and date/time fields, you can add or subtract a :class:`~datetime.timedelta` object. The following would return all entries that were modified more than 3 days after they were published::"
msgstr ""

#: ../../topics/db/queries.txt:644
# b3632e6c56f74a37b8c71f48d4f6d2ad
msgid "The ``F()`` objects now support bitwise operations by ``.bitand()`` and ``.bitor()``, for example::"
msgstr ""

#: ../../topics/db/queries.txt:654
# 4deb9ae3c4f0401dbab13c56f16a928b
msgid "The pk lookup shortcut"
msgstr ""

#: ../../topics/db/queries.txt:656
# 2f22c09067a74952b9a1e7d07ba5d77c
msgid "For convenience, Django provides a ``pk`` lookup shortcut, which stands for \"primary key\"."
msgstr ""

#: ../../topics/db/queries.txt:659
# 0ebf034dba5349b1b8bd8bf83181d0e1
msgid "In the example ``Blog`` model, the primary key is the ``id`` field, so these three statements are equivalent::"
msgstr ""

#: ../../topics/db/queries.txt:666
# 5959f22307da468189c0f46dd3996d1b
msgid "The use of ``pk`` isn't limited to ``__exact`` queries -- any query term can be combined with ``pk`` to perform a query on the primary key of a model::"
msgstr ""

#: ../../topics/db/queries.txt:675
# be6b6464f8d54e56b2502fb99aa65783
msgid "``pk`` lookups also work across joins. For example, these three statements are equivalent::"
msgstr ""

#: ../../topics/db/queries.txt:683
# c9afbc17d3474705bdfae3f050326d7c
msgid "Escaping percent signs and underscores in LIKE statements"
msgstr ""

#: ../../topics/db/queries.txt:685
# 6a805d5a030446ddbcc59e46dd8da1ba
msgid "The field lookups that equate to ``LIKE`` SQL statements (``iexact``, ``contains``, ``icontains``, ``startswith``, ``istartswith``, ``endswith`` and ``iendswith``) will automatically escape the two special characters used in ``LIKE`` statements -- the percent sign and the underscore. (In a ``LIKE`` statement, the percent sign signifies a multiple-character wildcard and the underscore signifies a single-character wildcard.)"
msgstr ""

#: ../../topics/db/queries.txt:692
# a076e59875344b19bef830d68341e8c6
msgid "This means things should work intuitively, so the abstraction doesn't leak. For example, to retrieve all the entries that contain a percent sign, just use the percent sign as any other character::"
msgstr ""

#: ../../topics/db/queries.txt:698
# 2895057c60954dcf8ca2882fcad261a4
msgid "Django takes care of the quoting for you; the resulting SQL will look something like this:"
msgstr ""

#: ../../topics/db/queries.txt:705
# dd1a90c86c7541bdba855b1a96464d6c
msgid "Same goes for underscores. Both percentage signs and underscores are handled for you transparently."
msgstr ""

#: ../../topics/db/queries.txt:711
# 82b3f6f5940746b78ade6868bbbd8d6e
msgid "Caching and QuerySets"
msgstr ""

#: ../../topics/db/queries.txt:713
# 8bc11286d472400e97e9843b3040369e
msgid "Each :class:`~django.db.models.query.QuerySet` contains a cache, to minimize database access. It's important to understand how it works, in order to write the most efficient code."
msgstr ""

#: ../../topics/db/queries.txt:717
# 9a2c16bb50d0439d95aebbb0c0e11c9f
msgid "In a newly created :class:`~django.db.models.query.QuerySet`, the cache is empty. The first time a :class:`~django.db.models.query.QuerySet` is evaluated -- and, hence, a database query happens -- Django saves the query results in the :class:`~django.db.models.query.QuerySet`\\'s cache and returns the results that have been explicitly requested (e.g., the next element, if the :class:`~django.db.models.query.QuerySet` is being iterated over). Subsequent evaluations of the :class:`~django.db.models.query.QuerySet` reuse the cached results."
msgstr ""

#: ../../topics/db/queries.txt:726
# 1eede6fa910c4fea94294354b87e0f4b
msgid "Keep this caching behavior in mind, because it may bite you if you don't use your :class:`~django.db.models.query.QuerySet`\\s correctly. For example, the following will create two :class:`~django.db.models.query.QuerySet`\\s, evaluate them, and throw them away::"
msgstr ""

#: ../../topics/db/queries.txt:734
# 6552a03ff5e7496f80416b48cc56f8b0
msgid "That means the same database query will be executed twice, effectively doubling your database load. Also, there's a possibility the two lists may not include the same database records, because an ``Entry`` may have been added or deleted in the split second between the two requests."
msgstr ""

#: ../../topics/db/queries.txt:739
# 9522a12e544f4e1aa1b3a660f8a0f5c2
msgid "To avoid this problem, simply save the :class:`~django.db.models.query.QuerySet` and reuse it::"
msgstr ""

#: ../../topics/db/queries.txt:749
# 51a7d10ce8e64ca2939162a87888e82c
msgid "Complex lookups with Q objects"
msgstr ""

#: ../../topics/db/queries.txt:753
# 155c7270733f451d88b8e798ccccf560
msgid "Keyword argument queries -- in :meth:`~django.db.models.query.QuerySet.filter`, etc. -- are \"AND\"ed together. If you need to execute more complex queries (for example, queries with ``OR`` statements), you can use ``Q`` objects."
msgstr ""

#: ../../topics/db/queries.txt:759
# 7db0305c52624ae0ad2e8d481f8233d1
msgid "A :class:`~django.db.models.Q` object (``django.db.models.Q``) is an object used to encapsulate a collection of keyword arguments. These keyword arguments are specified as in \"Field lookups\" above."
msgstr ""

#: ../../topics/db/queries.txt:763
# cc71cf2fea9e4ed9b0315a6db2e3a756
msgid "For example, this ``Q`` object encapsulates a single ``LIKE`` query::"
msgstr ""

#: ../../topics/db/queries.txt:768
# 5d70c4f09add4e92b71429e8eeebf308
msgid "``Q`` objects can be combined using the ``&`` and ``|`` operators. When an operator is used on two ``Q`` objects, it yields a new ``Q`` object."
msgstr ""

#: ../../topics/db/queries.txt:771
# 90b1c4a2ab8d442dbb48edbac04ac945
msgid "For example, this statement yields a single ``Q`` object that represents the \"OR\" of two ``\"question__startswith\"`` queries::"
msgstr ""

#: ../../topics/db/queries.txt:776
# b1121c981014436a99b9cf7937daadfe
msgid "This is equivalent to the following SQL ``WHERE`` clause::"
msgstr ""

#: ../../topics/db/queries.txt:780
# feab3fbca9ff47c2a6c6d92f2f430feb
msgid "You can compose statements of arbitrary complexity by combining ``Q`` objects with the ``&`` and ``|`` operators and use parenthetical grouping. Also, ``Q`` objects can be negated using the ``~`` operator, allowing for combined lookups that combine both a normal query and a negated (``NOT``) query::"
msgstr ""

#: ../../topics/db/queries.txt:787
# 775072d167d64f3db72b3b37dcc543a0
msgid "Each lookup function that takes keyword-arguments (e.g. :meth:`~django.db.models.query.QuerySet.filter`, :meth:`~django.db.models.query.QuerySet.exclude`, :meth:`~django.db.models.query.QuerySet.get`) can also be passed one or more ``Q`` objects as positional (not-named) arguments. If you provide multiple ``Q`` object arguments to a lookup function, the arguments will be \"AND\"ed together. For example::"
msgstr ""

#: ../../topics/db/queries.txt:800
# 9a5e12bdc8c34fe08419f1bf382305d4
msgid "... roughly translates into the SQL::"
msgstr ""

#: ../../topics/db/queries.txt:805
# 42157252312e4d1eb0cc0656e6c0571c
msgid "Lookup functions can mix the use of ``Q`` objects and keyword arguments. All arguments provided to a lookup function (be they keyword arguments or ``Q`` objects) are \"AND\"ed together. However, if a ``Q`` object is provided, it must precede the definition of any keyword arguments. For example::"
msgstr ""

#: ../../topics/db/queries.txt:814
# 74d0edc3de5a40caa61298842a5a93e4
msgid "... would be a valid query, equivalent to the previous example; but::"
msgstr ""

#: ../../topics/db/queries.txt:821
# e3526e7f7fe14d8da39167a410893b73
msgid "... would not be valid."
msgstr ""

#: ../../topics/db/queries.txt:825
# 358bf399cca743029558985b7cb23d9b
msgid "The `OR lookups examples`_ in the Django unit tests show some possible uses of ``Q``."
msgstr ""

#: ../../topics/db/queries.txt:831
# a6f091021f7a444d8f6034bef76b405e
msgid "Comparing objects"
msgstr ""

#: ../../topics/db/queries.txt:833
# 4c7eefd908ad47d39b9a61e6b26cba56
msgid "To compare two model instances, just use the standard Python comparison operator, the double equals sign: ``==``. Behind the scenes, that compares the primary key values of two models."
msgstr ""

#: ../../topics/db/queries.txt:837
# 55f786acc30a4551890c5722df7b103c
msgid "Using the ``Entry`` example above, the following two statements are equivalent::"
msgstr ""

#: ../../topics/db/queries.txt:842
# a338ef9aa8214576894dfc5211d25036
msgid "If a model's primary key isn't called ``id``, no problem. Comparisons will always use the primary key, whatever it's called. For example, if a model's primary key field is called ``name``, these two statements are equivalent::"
msgstr ""

#: ../../topics/db/queries.txt:852
# 1cf4bd91c4fd4688aa59396aeac2b402
msgid "Deleting objects"
msgstr ""

#: ../../topics/db/queries.txt:854
# 608b932604ce464f9b8146c43b56090a
msgid "The delete method, conveniently, is named :meth:`~django.db.models.Model.delete`. This method immediately deletes the object and has no return value. Example::"
msgstr ""

#: ../../topics/db/queries.txt:860
# 9d3fb4075f2c4a058966207d8ac52e37
msgid "You can also delete objects in bulk. Every :class:`~django.db.models.query.QuerySet` has a :meth:`~django.db.models.query.QuerySet.delete` method, which deletes all members of that :class:`~django.db.models.query.QuerySet`."
msgstr ""

#: ../../topics/db/queries.txt:865
# 215adb9492624eb1813a5eccf070429c
msgid "For example, this deletes all ``Entry`` objects with a ``pub_date`` year of 2005::"
msgstr ""

#: ../../topics/db/queries.txt:870
# b511bea32ab64fc5ba3396b35a040656
msgid "Keep in mind that this will, whenever possible, be executed purely in SQL, and so the ``delete()`` methods of individual object instances will not necessarily be called during the process. If you've provided a custom ``delete()`` method on a model class and want to ensure that it is called, you will need to \"manually\" delete instances of that model (e.g., by iterating over a :class:`~django.db.models.query.QuerySet` and calling ``delete()`` on each object individually) rather than using the bulk :meth:`~django.db.models.query.QuerySet.delete` method of a :class:`~django.db.models.query.QuerySet`."
msgstr ""

#: ../../topics/db/queries.txt:880
# 1dbac27ddf8d40a09af2fec1a2d0fa09
msgid "When Django deletes an object, by default it emulates the behavior of the SQL constraint ``ON DELETE CASCADE`` -- in other words, any objects which had foreign keys pointing at the object to be deleted will be deleted along with it. For example::"
msgstr ""

#: ../../topics/db/queries.txt:889
# 05f656a1a2ce4f6e9c4f482449d1cf73
msgid "This cascade behavior is customizable via the :attr:`~django.db.models.ForeignKey.on_delete` argument to the :class:`~django.db.models.ForeignKey`."
msgstr ""

#: ../../topics/db/queries.txt:893
# dec8fd5e6fb9442fbdf829552fd2e288
msgid "Note that :meth:`~django.db.models.query.QuerySet.delete` is the only :class:`~django.db.models.query.QuerySet` method that is not exposed on a :class:`~django.db.models.Manager` itself. This is a safety mechanism to prevent you from accidentally requesting ``Entry.objects.delete()``, and deleting *all* the entries. If you *do* want to delete all the objects, then you have to explicitly request a complete query set::"
msgstr ""

#: ../../topics/db/queries.txt:905
# fee9ca8e11c5403698e622b4514da911
msgid "Copying model instances"
msgstr ""

#: ../../topics/db/queries.txt:907
# 518a033683b74ac1bb77128e719c37ec
msgid "Although there is no built-in method for copying model instances, it is possible to easily create new instance with all fields' values copied. In the simplest case, you can just set ``pk`` to ``None``. Using our blog example::"
msgstr ""

#: ../../topics/db/queries.txt:917
# 10073dcb42fe49db943c0bc3088de0fd
msgid "Things get more complicated if you use inheritance. Consider a subclass of ``Blog``::"
msgstr ""

#: ../../topics/db/queries.txt:926
# 8e0c5c30b4c545e6aa7aa81b6ef18af2
msgid "Due to how inheritance works, you have to set both ``pk`` and ``id`` to None::"
msgstr ""

#: ../../topics/db/queries.txt:932
# 371cd9ccbb95427bb05ef3109a2a4fdb
msgid "This process does not copy related objects. If you want to copy relations, you have to write a little bit more code. In our example, ``Entry`` has a many to many field to ``Author``::"
msgstr ""

#: ../../topics/db/queries.txt:945
# 3c0814ff216d435f9dc3388d30c83e3e
msgid "Updating multiple objects at once"
msgstr ""

#: ../../topics/db/queries.txt:947
# 7a3ddea5a5c34e7ea0210f7a840d7a6b
msgid "Sometimes you want to set a field to a particular value for all the objects in a :class:`~django.db.models.query.QuerySet`. You can do this with the :meth:`~django.db.models.query.QuerySet.update` method. For example::"
msgstr ""

#: ../../topics/db/queries.txt:954
# 72cfa98e75244a4bb6fae5eb3938a288
msgid "You can only set non-relation fields and :class:`~django.db.models.ForeignKey` fields using this method. To update a non-relation field, provide the new value as a constant. To update :class:`~django.db.models.ForeignKey` fields, set the new value to be the new model instance you want to point to. For example::"
msgstr ""

#: ../../topics/db/queries.txt:964
# 9978bf2889d348ebb2b373674bbc10ed
msgid "The ``update()`` method is applied instantly and returns the number of rows matched by the query (which may not be equal to the number of rows updated if some rows already have the new value). The only restriction on the :class:`~django.db.models.query.QuerySet` that is updated is that it can only access one database table, the model's main table. You can filter based on related fields, but you can only update columns in the model's main table. Example::"
msgstr ""

#: ../../topics/db/queries.txt:977
# 51ecf172f62e4b199dc5b8cca4b5b58d
msgid "Be aware that the ``update()`` method is converted directly to an SQL statement. It is a bulk operation for direct updates. It doesn't run any :meth:`~django.db.models.Model.save` methods on your models, or emit the ``pre_save`` or ``post_save`` signals (which are a consequence of calling :meth:`~django.db.models.Model.save`), or honor the :attr:`~django.db.models.DateField.auto_now` field option. If you want to save every item in a :class:`~django.db.models.query.QuerySet` and make sure that the :meth:`~django.db.models.Model.save` method is called on each instance, you don't need any special function to handle that. Just loop over them and call :meth:`~django.db.models.Model.save`::"
msgstr ""

#: ../../topics/db/queries.txt:991
# 32573dcaefaf4120953fe1648c5d60b0
msgid "Calls to update can also use :ref:`F() objects <query-expressions>` to update one field based on the value of another field in the model. This is especially useful for incrementing counters based upon their current value. For example, to increment the pingback count for every entry in the blog::"
msgstr ""

#: ../../topics/db/queries.txt:998
# 157e8725f5ce42a88380eba19b83cbcc
msgid "However, unlike ``F()`` objects in filter and exclude clauses, you can't introduce joins when you use ``F()`` objects in an update -- you can only reference fields local to the model being updated. If you attempt to introduce a join with an ``F()`` object, a ``FieldError`` will be raised::"
msgstr ""

#: ../../topics/db/queries.txt:1009
# 2ffa06e540ab49f89ae52264dbbd7d13
msgid "Related objects"
msgstr ""

#: ../../topics/db/queries.txt:1011
# 8d0112e28d7f429eb562810dfe7d1b76
msgid "When you define a relationship in a model (i.e., a :class:`~django.db.models.ForeignKey`, :class:`~django.db.models.OneToOneField`, or :class:`~django.db.models.ManyToManyField`), instances of that model will have a convenient API to access the related object(s)."
msgstr ""

#: ../../topics/db/queries.txt:1017
# c06aa3e8a39d48a2a83fa721e6af0181
msgid "Using the models at the top of this page, for example, an ``Entry`` object ``e`` can get its associated ``Blog`` object by accessing the ``blog`` attribute: ``e.blog``."
msgstr ""

#: ../../topics/db/queries.txt:1021
# 9abc112e714a4da4a49966d927d0eb53
msgid "(Behind the scenes, this functionality is implemented by Python descriptors_. This shouldn't really matter to you, but we point it out here for the curious.)"
msgstr ""

#: ../../topics/db/queries.txt:1024
# 2f9c75ee48974bceb3c98006b8ecafc4
msgid "Django also creates API accessors for the \"other\" side of the relationship -- the link from the related model to the model that defines the relationship. For example, a ``Blog`` object ``b`` has access to a list of all related ``Entry`` objects via the ``entry_set`` attribute: ``b.entry_set.all()``."
msgstr ""

#: ../../topics/db/queries.txt:1029
# 461c3684aaa84dd382ca9a066e3801ad
msgid "All examples in this section use the sample ``Blog``, ``Author`` and ``Entry`` models defined at the top of this page."
msgstr ""

#: ../../topics/db/queries.txt:1035
# ba80324fee0240f89da65eed1648d895
msgid "One-to-many relationships"
msgstr ""

#: ../../topics/db/queries.txt:1038
# a0f057795e0d405a9d0690917ae695dd
msgid "Forward"
msgstr ""

#: ../../topics/db/queries.txt:1040
# c58c2709dc574cb8b1b1f624453aa885
msgid "If a model has a :class:`~django.db.models.ForeignKey`, instances of that model will have access to the related (foreign) object via a simple attribute of the model."
msgstr ""

#: ../../topics/db/queries.txt:1049
# 45b0df05766c47c08b6f25426479b299
msgid "You can get and set via a foreign-key attribute. As you may expect, changes to the foreign key aren't saved to the database until you call :meth:`~django.db.models.Model.save`. Example::"
msgstr ""

#: ../../topics/db/queries.txt:1057
# 3a5a0d4188f44aeab5c1299ed23e1fe9
msgid "If a :class:`~django.db.models.ForeignKey` field has ``null=True`` set (i.e., it allows ``NULL`` values), you can assign ``None`` to it. Example::"
msgstr ""

#: ../../topics/db/queries.txt:1064
# 6f1bcf1ff67a488db7d9c53482da3677
msgid "Forward access to one-to-many relationships is cached the first time the related object is accessed. Subsequent accesses to the foreign key on the same object instance are cached. Example::"
msgstr ""

#: ../../topics/db/queries.txt:1072
# aec50c68d7e848328b12bf976e663fe4
msgid "Note that the :meth:`~django.db.models.query.QuerySet.select_related` :class:`~django.db.models.query.QuerySet` method recursively prepopulates the cache of all one-to-many relationships ahead of time. Example::"
msgstr ""

#: ../../topics/db/queries.txt:1083
# 19279366dc4c4f6597f5acfe44cb5140
msgid "Following relationships \"backward\""
msgstr ""

#: ../../topics/db/queries.txt:1085
# 1ece3c3e7a9f48c984eabf27f0cbafc0
msgid "If a model has a :class:`~django.db.models.ForeignKey`, instances of the foreign-key model will have access to a :class:`~django.db.models.Manager` that returns all instances of the first model. By default, this :class:`~django.db.models.Manager` is named ``FOO_set``, where ``FOO`` is the source model name, lowercased. This :class:`~django.db.models.Manager` returns ``QuerySets``, which can be filtered and manipulated as described in the \"Retrieving objects\" section above."
msgstr ""

#: ../../topics/db/queries.txt:1102
# ea54599b09f74a759dcd719af630c1e3
msgid "You can override the ``FOO_set`` name by setting the ``related_name`` parameter in the ``ForeignKey()`` definition. For example, if the ``Entry`` model was altered to ``blog = ForeignKey(Blog, related_name='entries')``, the above example code would look like this::"
msgstr ""

#: ../../topics/db/queries.txt:1114
# eb3ac2a3986d49ac929e430c7bb9d243
msgid "You cannot access a reverse :class:`~django.db.models.ForeignKey` :class:`~django.db.models.Manager` from the class; it must be accessed from an instance::"
msgstr ""

#: ../../topics/db/queries.txt:1123
# 50c9c5e184f04bb6843287d6054ab436
msgid "In addition to the :class:`~django.db.models.query.QuerySet` methods defined in \"Retrieving objects\" above, the :class:`~django.db.models.ForeignKey` :class:`~django.db.models.Manager` has additional methods used to handle the set of related objects. A synopsis of each is below, and complete details can be found in the :doc:`related objects reference </ref/models/relations>`."
msgstr ""

#: ../../topics/db/queries.txt:1130
# 37a9ee586cb64c37a1078a8a1900be03
msgid "Adds the specified model objects to the related object set."
msgstr ""

#: ../../topics/db/queries.txt:1133
# 566b3f8b9dd643c291f0368f78efd67d
msgid "Creates a new object, saves it and puts it in the related object set. Returns the newly created object."
msgstr ""

#: ../../topics/db/queries.txt:1137
# 8e75cfd6467c4a69bc4f4d1993f1cdfb
msgid "Removes the specified model objects from the related object set."
msgstr ""

#: ../../topics/db/queries.txt:1140
# 78126851e39c4be989dc6f510cfad87b
msgid "Removes all objects from the related object set."
msgstr ""

#: ../../topics/db/queries.txt:1142
# 7d8f6ca2abe84de8bca3aef5c502be53
msgid "To assign the members of a related set in one fell swoop, just assign to it from any iterable object. The iterable can contain object instances, or just a list of primary key values. For example::"
msgstr ""

#: ../../topics/db/queries.txt:1149
# 7d3699d98c4f4a91b0ae2512f8f430b2
msgid "In this example, ``e1`` and ``e2`` can be full Entry instances, or integer primary key values."
msgstr ""

#: ../../topics/db/queries.txt:1152
# 0acf5084967640bfbae85af064c15e72
msgid "If the ``clear()`` method is available, any pre-existing objects will be removed from the ``entry_set`` before all objects in the iterable (in this case, a list) are added to the set. If the ``clear()`` method is *not* available, all objects in the iterable will be added without removing any existing elements."
msgstr ""

#: ../../topics/db/queries.txt:1158
# 883c36694d454448b5cc5c51a7285a5e
msgid "Each \"reverse\" operation described in this section has an immediate effect on the database. Every addition, creation and deletion is immediately and automatically saved to the database."
msgstr ""

#: ../../topics/db/queries.txt:1167
# 3104940712ea4559b3b2573a9ea989d7
msgid "Both ends of a many-to-many relationship get automatic API access to the other end. The API works just as a \"backward\" one-to-many relationship, above."
msgstr ""

#: ../../topics/db/queries.txt:1170
# 4c480b5953324e2b937c35842e7644a4
msgid "The only difference is in the attribute naming: The model that defines the :class:`~django.db.models.ManyToManyField` uses the attribute name of that field itself, whereas the \"reverse\" model uses the lowercased model name of the original model, plus ``'_set'`` (just like reverse one-to-many relationships)."
msgstr ""

#: ../../topics/db/queries.txt:1175
# 895dd9b605e94859a29d617aea1cf86d
msgid "An example makes this easier to understand::"
msgstr ""

#: ../../topics/db/queries.txt:1185
# a02c7c7b192c49ba8c8a6bd42b9979a2
msgid "Like :class:`~django.db.models.ForeignKey`, :class:`~django.db.models.ManyToManyField` can specify ``related_name``. In the above example, if the :class:`~django.db.models.ManyToManyField` in ``Entry`` had specified ``related_name='entries'``, then each ``Author`` instance would have an ``entries`` attribute instead of ``entry_set``."
msgstr ""

#: ../../topics/db/queries.txt:1194
# 78c6a6a214094a519343c35d500dd46e
msgid "One-to-one relationships are very similar to many-to-one relationships. If you define a :class:`~django.db.models.OneToOneField` on your model, instances of that model will have access to the related object via a simple attribute of the model."
msgstr ""

#: ../../topics/db/queries.txt:1208
# 39b558255ded4627a76df7f704de42cc
msgid "The difference comes in \"reverse\" queries. The related model in a one-to-one relationship also has access to a :class:`~django.db.models.Manager` object, but that :class:`~django.db.models.Manager` represents a single object, rather than a collection of objects::"
msgstr ""

#: ../../topics/db/queries.txt:1216
# 52bfade33f5e4c5d94b874b4d3f40cb1
msgid "If no object has been assigned to this relationship, Django will raise a ``DoesNotExist`` exception."
msgstr ""

#: ../../topics/db/queries.txt:1219
# 15717436acda4966933e2513ff99a1ff
msgid "Instances can be assigned to the reverse relationship in the same way as you would assign the forward relationship::"
msgstr ""

#: ../../topics/db/queries.txt:1225
# 62aa667a1422401490c31448c2f369e2
msgid "How are the backward relationships possible?"
msgstr ""

#: ../../topics/db/queries.txt:1227
# 7e589b504c794b65b65ea16502dcf2cb
msgid "Other object-relational mappers require you to define relationships on both sides. The Django developers believe this is a violation of the DRY (Don't Repeat Yourself) principle, so Django only requires you to define the relationship on one end."
msgstr ""

#: ../../topics/db/queries.txt:1232
# 9ce4e79503a14a10bdde23eb5d1c988d
msgid "But how is this possible, given that a model class doesn't know which other model classes are related to it until those other model classes are loaded?"
msgstr ""

#: ../../topics/db/queries.txt:1235
# 6b71e3d56c644dc6a7f9ffc9175ace5d
msgid "The answer lies in the :setting:`INSTALLED_APPS` setting. The first time any model is loaded, Django iterates over every model in :setting:`INSTALLED_APPS` and creates the backward relationships in memory as needed. Essentially, one of the functions of :setting:`INSTALLED_APPS` is to tell Django the entire model domain."
msgstr ""

#: ../../topics/db/queries.txt:1242
# 340c0e85e7514039a9b6d1e988268006
msgid "Queries over related objects"
msgstr ""

#: ../../topics/db/queries.txt:1244
# d024f229c53945d585efabe87f2e7bc4
msgid "Queries involving related objects follow the same rules as queries involving normal value fields. When specifying the value for a query to match, you may use either an object instance itself, or the primary key value for the object."
msgstr ""

#: ../../topics/db/queries.txt:1248
# 1b9bfb698ba64ec5ad07b6807d3191e8
msgid "For example, if you have a Blog object ``b`` with ``id=5``, the following three queries would be identical::"
msgstr ""

#: ../../topics/db/queries.txt:1256
# 29399202b6b640c8812a3da1e7e443e7
msgid "Falling back to raw SQL"
msgstr ""

#: ../../topics/db/queries.txt:1258
# a049df5be167478484e56345ca0b5271
msgid "If you find yourself needing to write an SQL query that is too complex for Django's database-mapper to handle, you can fall back on writing SQL by hand. Django has a couple of options for writing raw SQL queries; see :doc:`/topics/db/sql`."
msgstr ""

#: ../../topics/db/queries.txt:1263
# ee38ccc30f3a477a8f192570ab05a391
msgid "Finally, it's important to note that the Django database layer is merely an interface to your database. You can access your database via other tools, programming languages or database frameworks; there's nothing Django-specific about your database."
msgstr ""

#: ../../topics/db/sql.txt:3
# c7fc608551cb4bee992f0302db233228
msgid "Performing raw SQL queries"
msgstr ""

#: ../../topics/db/sql.txt:7
# d8649c4c2d884148978d8d8d72c336c9
msgid "When the :doc:`model query APIs </topics/db/queries>` don't go far enough, you can fall back to writing raw SQL. Django gives you two ways of performing raw SQL queries: you can use :meth:`Manager.raw()` to `perform raw queries and return model instances`__, or you can avoid the model layer entirely and `execute custom SQL directly`__."
msgstr ""

#: ../../topics/db/sql.txt:19
# 4912e125b6ff42a198d4abe0365d1589
msgid "Performing raw queries"
msgstr ""

#: ../../topics/db/sql.txt:21
# 1c14ffcc93b74c2ba82970c93b89dd5c
msgid "The ``raw()`` manager method can be used to perform raw SQL queries that return model instances:"
msgstr ""

#: ../../topics/db/sql.txt:26
# 07f2949595e646bd91eb0c0561fe535c
msgid "This method method takes a raw SQL query, executes it, and returns a ``django.db.models.query.RawQuerySet`` instance. This ``RawQuerySet`` instance can be iterated over just like an normal QuerySet to provide object instances."
msgstr ""

#: ../../topics/db/sql.txt:30
# 3b03f3387e5e4f1bba8a9b82e888f703
msgid "This is best illustrated with an example. Suppose you've got the following model::"
msgstr ""

#: ../../topics/db/sql.txt:37
# a066db4f6db6479e8113920ba56ba083
msgid "You could then execute custom SQL like so::"
msgstr ""

#: ../../topics/db/sql.txt:44
# ac3240c50e624cb2a36971ad1dce3dc9
msgid "Of course, this example isn't very exciting -- it's exactly the same as running ``Person.objects.all()``. However, ``raw()`` has a bunch of other options that make it very powerful."
msgstr ""

#: ../../topics/db/sql.txt:50
# 3d548a70165a478aabbcb1b2436b3b54
msgid "Where'd the name of the ``Person`` table come from in that example?"
msgstr ""

#: ../../topics/db/sql.txt:52
# 7e361ef08317449ea65855f5e5930a25
msgid "By default, Django figures out a database table name by joining the model's \"app label\" -- the name you used in ``manage.py startapp`` -- to the model's class name, with an underscore between them. In the example we've assumed that the ``Person`` model lives in an app named ``myapp``, so its table would be ``myapp_person``."
msgstr ""

#: ../../topics/db/sql.txt:58
# e68104da5933427da728b8585eaf09e9
msgid "For more details check out the documentation for the :attr:`~Options.db_table` option, which also lets you manually set the database table name."
msgstr ""

#: ../../topics/db/sql.txt:64
# 3ee9a7b1a1f641d988c9e27e82bf8e3a
msgid "No checking is done on the SQL statement that is passed in to ``.raw()``. Django expects that the statement will return a set of rows from the database, but does nothing to enforce that. If the query does not return rows, a (possibly cryptic) error will result."
msgstr ""

#: ../../topics/db/sql.txt:70
# 70689faed2394e78a881c4fc38183cba
msgid "Mapping query fields to model fields"
msgstr ""

#: ../../topics/db/sql.txt:72
# 1135e02be11641a5bec60354a619a5f6
msgid "``raw()`` automatically maps fields in the query to fields on the model."
msgstr ""

#: ../../topics/db/sql.txt:74
# 0b2ba0933e1b4e20be822797ae81b1a4
msgid "The order of fields in your query doesn't matter. In other words, both of the following queries work identically::"
msgstr ""

#: ../../topics/db/sql.txt:82
# 397bc82027924a32a7f7dc3274ebf42b
msgid "Matching is done by name. This means that you can use SQL's ``AS`` clauses to map fields in the query to model fields. So if you had some other table that had ``Person`` data in it, you could easily map it into ``Person`` instances::"
msgstr ""

#: ../../topics/db/sql.txt:92
# 373d4d03b0fe4eeab0455755ad4ba8ff
msgid "As long as the names match, the model instances will be created correctly."
msgstr ""

#: ../../topics/db/sql.txt:94
# 93ffbf6a62e648f9906efd0f428b3624
msgid "Alternatively, you can map fields in the query to model fields using the ``translations`` argument to ``raw()``. This is a dictionary mapping names of fields in the query to names of fields on the model. For example, the above query could also be written::"
msgstr ""

#: ../../topics/db/sql.txt:103
# 68f065dbda7b45fa9c96d6b901b7179a
msgid "Index lookups"
msgstr ""

#: ../../topics/db/sql.txt:105
# e17d6eda9ec544db99702ca5919c67e6
msgid "``raw()`` supports indexing, so if you need only the first result you can write::"
msgstr ""

#: ../../topics/db/sql.txt:110
# 20b1a2be5a63496f814df4bf2c4d67de
msgid "However, the indexing and slicing are not performed at the database level. If you have a big amount of ``Person`` objects in your database, it is more efficient to limit the query at the SQL level::"
msgstr ""

#: ../../topics/db/sql.txt:117
# 0f2b3ccab3734d6fb729a7c1e2ee812f
msgid "Deferring model fields"
msgstr ""

#: ../../topics/db/sql.txt:119
# 0b96c1099ce04084a9207cc85f0a2dfa
msgid "Fields may also be left out::"
msgstr ""

#: ../../topics/db/sql.txt:123
# 2db5e619039845b18bc56a6d0bb03525
msgid "The ``Person`` objects returned by this query will be deferred model instances (see :meth:`~django.db.models.query.QuerySet.defer()`). This means that the fields that are omitted from the query will be loaded on demand. For example::"
msgstr ""

#: ../../topics/db/sql.txt:134
# 647641b8473a460bb7e73fc4fe4a61f2
msgid "From outward appearances, this looks like the query has retrieved both the first name and last name. However, this example actually issued 3 queries. Only the first names were retrieved by the raw() query -- the last names were both retrieved on demand when they were printed."
msgstr ""

#: ../../topics/db/sql.txt:139
# 24bbaea96e5944269992d78e38c02d8e
msgid "There is only one field that you can't leave out - the primary key field. Django uses the primary key to identify model instances, so it must always be included in a raw query. An ``InvalidQuery`` exception will be raised if you forget to include the primary key."
msgstr ""

#: ../../topics/db/sql.txt:145
# 11d1c45f64794b058de6f0e6c083d3ef
msgid "Adding annotations"
msgstr ""

#: ../../topics/db/sql.txt:147
# 91b3818241a1433983105d5250a6e67a
msgid "You can also execute queries containing fields that aren't defined on the model. For example, we could use `PostgreSQL's age() function`__ to get a list of people with their ages calculated by the database::"
msgstr ""

#: ../../topics/db/sql.txt:161
# 5c2418a31394485aa272d424b0e73d53
msgid "Passing parameters into ``raw()``"
msgstr ""

#: ../../topics/db/sql.txt:163
# 3b8191c09d284c278114fba7522cb9cc
msgid "If you need to perform parameterized queries, you can use the ``params`` argument to ``raw()``::"
msgstr ""

#: ../../topics/db/sql.txt:169
# 7009358de15549f5b5bb78ec9769604d
msgid "``params`` is a list of parameters. You'll use ``%s`` placeholders in the query string (regardless of your database engine); they'll be replaced with parameters from the ``params`` list."
msgstr ""

#: ../../topics/db/sql.txt:175
# 7c717f24aa1745558dc27ebeb1006c94
msgid "**Do not use string formatting on raw queries!**"
msgstr ""

#: ../../topics/db/sql.txt:177
# 70505849ab0c4c66b1103dc0b71e85d2
msgid "It's tempting to write the above query as::"
msgstr ""

#: ../../topics/db/sql.txt:182
# 300f7451cf984d168aba29cc0ebe66eb
msgid "**Don't.**"
msgstr ""

#: ../../topics/db/sql.txt:184
# 531242e13f684034aca45e2961e8b56f
msgid "Using the ``params`` list completely protects you from `SQL injection attacks`__, a common exploit where attackers inject arbitrary SQL into your database. If you use string interpolation, sooner or later you'll fall victim to SQL injection. As long as you remember to always use the ``params`` list you'll be protected."
msgstr ""

#: ../../topics/db/sql.txt:195
# 2f3161e44d0d428dbf1e2908d7008bd5
msgid "Executing custom SQL directly"
msgstr ""

#: ../../topics/db/sql.txt:197
# 185157b0df7643bdb6c0a1f306869956
msgid "Sometimes even :meth:`Manager.raw` isn't quite enough: you might need to perform queries that don't map cleanly to models, or directly execute ``UPDATE``, ``INSERT``, or ``DELETE`` queries."
msgstr ""

#: ../../topics/db/sql.txt:201
# a83904ba5dd644bfa7d2706cccefbe3e
msgid "In these cases, you can always access the database directly, routing around the model layer entirely."
msgstr ""

#: ../../topics/db/sql.txt:204
# f11882d9032549259e60b391838f820d
msgid "The object ``django.db.connection`` represents the default database connection, and ``django.db.transaction`` represents the default database transaction. To use the database connection, call ``connection.cursor()`` to get a cursor object. Then, call ``cursor.execute(sql, [params])`` to execute the SQL and ``cursor.fetchone()`` or ``cursor.fetchall()`` to return the resulting rows. After performing a data changing operation, you should then call ``transaction.commit_unless_managed()`` to ensure your changes are committed to the database. If your query is purely a data retrieval operation, no commit is required. For example::"
msgstr ""

#: ../../topics/db/sql.txt:229
# 1dd0fef3751446aab42c05d62f8f9c35
msgid "If you are using :doc:`more than one database </topics/db/multi-db>`, you can use ``django.db.connections`` to obtain the connection (and cursor) for a specific database. ``django.db.connections`` is a dictionary-like object that allows you to retrieve a specific connection using its alias::"
msgstr ""

#: ../../topics/db/sql.txt:240
# 2632681de09640119698caf331cca638
msgid "By default, the Python DB API will return results without their field names, which means you end up with a ``list`` of values, rather than a ``dict``. At a small performance cost, you can return results as a ``dict`` by using something like this::"
msgstr ""

#: ../../topics/db/sql.txt:253
# cc70cc026df448cfab348d6c6265a6ee
msgid "Here is an example of the difference between the two::"
msgstr ""

#: ../../topics/db/sql.txt:267
# 13f64c64acdc41b69c0c9e14b8ed6aaf
msgid "Transactions and raw SQL"
msgstr ""

#: ../../topics/db/sql.txt:269
# 113c75ec79ad44b7bb74ba87ea00c726
msgid "When you make a raw SQL call, Django will automatically mark the current transaction as dirty. You must then ensure that the transaction containing those calls is closed correctly. See :ref:`the notes on the requirements of Django's transaction handling <topics-db-transactions-requirements>` for more details."
msgstr ""

#: ../../topics/db/sql.txt:276
# 59a27d5374004f0b8079e8f9c7081f92
msgid "Connections and cursors"
msgstr ""

#: ../../topics/db/sql.txt:278
# 0b24bdda443e493491a450a8e09d7ed9
msgid "``connection`` and ``cursor`` mostly implement the standard Python DB-API described in :pep:`249` (except when it comes to :doc:`transaction handling </topics/db/transactions>`). If you're not familiar with the Python DB-API, note that the SQL statement in ``cursor.execute()`` uses placeholders, ``\"%s\"``, rather than adding parameters directly within the SQL. If you use this technique, the underlying database library will automatically add quotes and escaping to your parameter(s) as necessary. (Also note that Django expects the ``\"%s\"`` placeholder, *not* the ``\"?\"`` placeholder, which is used by the SQLite Python bindings. This is for the sake of consistency and sanity.)"
msgstr ""

#: ../../topics/db/tablespaces.txt:3
# 1be15d34330345cf9a3855db8775093a
msgid "Tablespaces"
msgstr ""

#: ../../topics/db/tablespaces.txt:5
# 6b92147332ab4c53b0fe1cd3f02a4d43
msgid "A common paradigm for optimizing performance in database systems is the use of `tablespaces`_ to organize disk layout."
msgstr ""

#: ../../topics/db/tablespaces.txt:11
# a82799030f5947aeb133eae4e7964e08
msgid "Django does not create the tablespaces for you. Please refer to your database engine's documentation for details on creating and managing tablespaces."
msgstr ""

#: ../../topics/db/tablespaces.txt:17
# 50253401b57c49a7aef08da01b99872b
msgid "Declaring tablespaces for tables"
msgstr ""

#: ../../topics/db/tablespaces.txt:19
# 15c6ad3752c449ec8f285d38a0d661b3
msgid "A tablespace can be specified for the table generated by a model by supplying the :attr:`~django.db.models.Options.db_tablespace` option inside the model's ``class Meta``. This option also affects tables automatically created for :class:`~django.db.models.ManyToManyField`\\ s in the model."
msgstr ""

#: ../../topics/db/tablespaces.txt:24
# 70fca1a2c8124551b0b71a3b57cec028
msgid "You can use the :setting:`DEFAULT_TABLESPACE` setting to specify a default value for :attr:`~django.db.models.Options.db_tablespace`. This is useful for setting a tablespace for the built-in Django apps and other applications whose code you cannot control."
msgstr ""

#: ../../topics/db/tablespaces.txt:30
# 4046c7f8893d485b97d4d06e3c84feab
msgid "Declaring tablespaces for indexes"
msgstr ""

#: ../../topics/db/tablespaces.txt:32
# faa26246c9c045aa85519966d96dc997
msgid "You can pass the :attr:`~django.db.models.Field.db_tablespace` option to a ``Field`` constructor to specify an alternate tablespace for the ``Field``'s column index. If no index would be created for the column, the option is ignored."
msgstr ""

#: ../../topics/db/tablespaces.txt:37
# 4c0b91a6cf6846579e0fb9e2df960e1d
msgid "You can use the :setting:`DEFAULT_INDEX_TABLESPACE` setting to specify a default value for :attr:`~django.db.models.Field.db_tablespace`."
msgstr ""

#: ../../topics/db/tablespaces.txt:40
# f1db1b7e2bbd48068adf9f89b4a40246
msgid "If :attr:`~django.db.models.Field.db_tablespace` isn't specified and you didn't set :setting:`DEFAULT_INDEX_TABLESPACE`, the index is created in the same tablespace as the tables."
msgstr ""

#: ../../topics/db/tablespaces.txt:57
# 8a651a255bc247eb9ef004b0bf97c835
msgid "In this example, the tables generated by the ``TablespaceExample`` model (i.e. the model table and the many-to-many table) would be stored in the ``tables`` tablespace. The index for the name field and the indexes on the many-to-many table would be stored in the ``indexes`` tablespace. The ``data`` field would also generate an index, but no tablespace for it is specified, so it would be stored in the model tablespace ``tables`` by default."
msgstr ""

#: ../../topics/db/tablespaces.txt:65
# 7079b4c2652d4fd09046b40b5fb9a20c
msgid "Database support"
msgstr ""

#: ../../topics/db/tablespaces.txt:67
# e2475c897e324b1d98e9a95c47713ee1
msgid "PostgreSQL and Oracle support tablespaces. SQLite and MySQL don't."
msgstr ""

#: ../../topics/db/tablespaces.txt:69
# 1684b33d917b4c5f877d6748531d4e22
msgid "When you use a backend that lacks support for tablespaces, Django ignores all tablespace-related options."
msgstr ""

#: ../../topics/db/transactions.txt:3
# 95950510a1834dc19f00199745290d91
msgid "Managing database transactions"
msgstr ""

#: ../../topics/db/transactions.txt:7
# 91562a75960c4d4d8ef38647863443ea
msgid "Django gives you a few ways to control how database transactions are managed, if you're using a database that supports transactions."
msgstr ""

#: ../../topics/db/transactions.txt:11
# 45cd838bcd5c46a3a7f0faf9873c4b5e
msgid "Django's default transaction behavior"
msgstr ""

#: ../../topics/db/transactions.txt:13
# beeddd7fc0444a2ba691bc04597e4fa9
msgid "Django's default behavior is to run with an open transaction which it commits automatically when any built-in, data-altering model function is called. For example, if you call ``model.save()`` or ``model.delete()``, the change will be committed immediately."
msgstr ""

#: ../../topics/db/transactions.txt:18
# 71af682ec844403093bccd83b3409990
msgid "This is much like the auto-commit setting for most databases. As soon as you perform an action that needs to write to the database, Django produces the ``INSERT``/``UPDATE``/``DELETE`` statements and then does the ``COMMIT``. There's no implicit ``ROLLBACK``."
msgstr ""

#: ../../topics/db/transactions.txt:24
# 91a4a26b6ce342d584902ec2293c67fa
msgid "Tying transactions to HTTP requests"
msgstr ""

#: ../../topics/db/transactions.txt:26
# 2dcb3851c28b469982091657f4385285
msgid "The recommended way to handle transactions in Web requests is to tie them to the request and response phases via Django's ``TransactionMiddleware``."
msgstr ""

#: ../../topics/db/transactions.txt:29
# 544c02ebd45f46b7b5caf5722cfa1e0e
msgid "It works like this: When a request starts, Django starts a transaction. If the response is produced without problems, Django commits any pending transactions. If the view function produces an exception, Django rolls back any pending transactions."
msgstr ""

#: ../../topics/db/transactions.txt:34
# 8b232df6498e4742939858acf06c98f8
msgid "To activate this feature, just add the ``TransactionMiddleware`` middleware to your :setting:`MIDDLEWARE_CLASSES` setting::"
msgstr ""

#: ../../topics/db/transactions.txt:45
# 9d13f5021eae420f850cca8b1902916a
msgid "The order is quite important. The transaction middleware applies not only to view functions, but also for all middleware modules that come after it. So if you use the session middleware after the transaction middleware, session creation will be part of the transaction."
msgstr ""

#: ../../topics/db/transactions.txt:50
# 4474cfe15e4b4d898a9394167ed29971
msgid "The various cache middlewares are an exception: ``CacheMiddleware``, :class:`~django.middleware.cache.UpdateCacheMiddleware`, and :class:`~django.middleware.cache.FetchFromCacheMiddleware` are never affected. Even when using database caching, Django's cache backend uses its own database cursor (which is mapped to its own database connection internally)."
msgstr ""

#: ../../topics/db/transactions.txt:58
# e3e9897f493d48c082e00ae54e58373f
msgid "The ``TransactionMiddleware`` only affects the database aliased as \"default\" within your :setting:`DATABASES` setting.  If you are using multiple databases and want transaction control over databases other than \"default\", you will need to write your own transaction middleware."
msgstr ""

#: ../../topics/db/transactions.txt:66
# 02aaa8aa03c64715a22d5f05a965bb73
msgid "Controlling transaction management in views"
msgstr ""

#: ../../topics/db/transactions.txt:68
# 702240fb926843738229cc7a6a76d6e8
msgid "For most people, implicit request-based transactions work wonderfully. However, if you need more fine-grained control over how transactions are managed, you can use a set of functions in ``django.db.transaction`` to control transactions on a per-function or per-code-block basis."
msgstr ""

#: ../../topics/db/transactions.txt:73
# 5c33423b328f471786becd29c4595993
msgid "These functions, described in detail below, can be used in two different ways:"
msgstr ""

#: ../../topics/db/transactions.txt:75
# ea78347235f44929b8343fbe30262550
msgid "As a decorator_ on a particular function. For example::"
msgstr ""

#: ../../topics/db/transactions.txt:85
# 87696a755a2d4ae6aaeea0790ddca563
msgid "As a `context manager`_ around a particular block of code::"
msgstr ""

#: ../../topics/db/transactions.txt:99
# e70c89934f2b47c0953bb56ef59e4645
msgid "Both techniques work with all supported version of Python."
msgstr ""

#: ../../topics/db/transactions.txt:104
# c64295f377614d6296ba8bf47927fc6e
msgid "For maximum compatibility, all of the examples below show transactions using the decorator syntax, but all of the follow functions may be used as context managers, too."
msgstr ""

#: ../../topics/db/transactions.txt:110
# 3c0bf198b6834f3f874d304154bb9ee5
msgid "Although the examples below use view functions as examples, these decorators and context managers can be used anywhere in your code that you need to deal with transactions."
msgstr ""

#: ../../topics/db/transactions.txt:118
# 10ab22e5047b4730b5cbed5fdbb81646
msgid "Use the ``autocommit`` decorator to switch a view function to Django's default commit behavior, regardless of the global transaction setting."
msgstr ""

#: ../../topics/db/transactions.txt:133
# f41dba9a0a364ee2871dca2c59cf08f0
msgid "Within ``viewfunc()``, transactions will be committed as soon as you call ``model.save()``, ``model.delete()``, or any other function that writes to the database.  ``viewfunc2()`` will have this same behavior, but for the ``\"my_other_database\"`` connection."
msgstr ""

#: ../../topics/db/transactions.txt:140
# 99e9b95b803a4d5f87f3fdabb5f31409
msgid "Use the ``commit_on_success`` decorator to use a single transaction for all the work done in a function::"
msgstr ""

#: ../../topics/db/transactions.txt:153
# c3b621bdfce04e81909c6e73445e393f
msgid "If the function returns successfully, then Django will commit all work done within the function at that point. If the function raises an exception, though, Django will roll back the transaction."
msgstr ""

#: ../../topics/db/transactions.txt:159
# abba8c920d5b40db8e348fafe0c4eda2
msgid "Use the ``commit_manually`` decorator if you need full control over transactions. It tells Django you'll be managing the transaction on your own."
msgstr ""

#: ../../topics/db/transactions.txt:163
# bd4aed46ea864ad2898392eb41d0f6cd
msgid "Whether you are writing or simply reading from the database, you must ``commit()`` or ``rollback()`` explicitly or Django will raise a :exc:`TransactionManagementError` exception. This is required when reading from the database because ``SELECT`` statements may call functions which modify tables, and thus it is impossible to know if any data has been modified."
msgstr ""

#: ../../topics/db/transactions.txt:170
# 31e48b2f313047d7a01cfa13572efdf4
msgid "Manual transaction management looks like this::"
msgstr ""

#: ../../topics/db/transactions.txt:196
# 554647decbaa4ccf99cf7ee428bbd785
msgid "Requirements for transaction handling"
msgstr ""

#: ../../topics/db/transactions.txt:198
# 17eaa7d0c4ba4dfebb46ce2f897ab5ba
msgid "Django requires that every transaction that is opened is closed before the completion of a request. If you are using :func:`autocommit` (the default commit mode) or :func:`commit_on_success`, this will be done for you automatically (with the exception of :ref:`executing custom SQL <executing-custom-sql>`). However, if you are manually managing transactions (using the :func:`commit_manually` decorator), you must ensure that the transaction is either committed or rolled back before a request is completed."
msgstr ""

#: ../../topics/db/transactions.txt:207
# 7c3c6f96a6ef4ebeb877728dc961ad67
msgid "This applies to all database operations, not just write operations. Even if your transaction only reads from the database, the transaction must be committed or rolled back before you complete a request."
msgstr ""

#: ../../topics/db/transactions.txt:214
# 4342b3f1cb6e408cae550f514c3d595d
msgid "How to globally deactivate transaction management"
msgstr ""

#: ../../topics/db/transactions.txt:216
# 5f21652679f24522b65ab25d36974ed6
msgid "Control freaks can totally disable all transaction management by setting :setting:`TRANSACTIONS_MANAGED` to ``True`` in the Django settings file."
msgstr ""

#: ../../topics/db/transactions.txt:219
# 433c0b61c99242ecbe513c0a8b794566
msgid "If you do this, Django won't provide any automatic transaction management whatsoever. Middleware will no longer implicitly commit transactions, and you'll need to roll management yourself. This even requires you to commit changes done by middleware somewhere else."
msgstr ""

#: ../../topics/db/transactions.txt:224
# c943ca16ffd74cfd92d4c7a61a1de6c4
msgid "Thus, this is best used in situations where you want to run your own transaction-controlling middleware or do something really strange. In almost all situations, you'll be better off using the default behavior, or the transaction middleware, and only modify selected functions as needed."
msgstr ""

#: ../../topics/db/transactions.txt:232
# 4b915de52b8b4d7daecf2869ac7eecde
msgid "Savepoints"
msgstr ""

#: ../../topics/db/transactions.txt:234
# 83ca0de83487460ea11d0cd3f4c885e9
msgid "A savepoint is a marker within a transaction that enables you to roll back part of a transaction, rather than the full transaction. Savepoints are available with the PostgreSQL 8, Oracle and MySQL (when using the InnoDB storage engine) backends. Other backends provide the savepoint functions, but they're empty operations -- they don't actually do anything."
msgstr ""

#: ../../topics/db/transactions.txt:243
# 6b93e22159c14b049bc1e010dfde4f5d
msgid "Savepoints aren't especially useful if you are using the default ``autocommit`` behavior of Django. However, if you are using ``commit_on_success`` or ``commit_manually``, each open transaction will build up a series of database operations, awaiting a commit or rollback. If you issue a rollback, the entire transaction is rolled back. Savepoints provide the ability to perform a fine-grained rollback, rather than the full rollback that would be performed by ``transaction.rollback()``."
msgstr ""

#: ../../topics/db/transactions.txt:251
# 27898191db1947ae9e369670f89051a0
msgid "Each of these functions takes a ``using`` argument which should be the name of a database for which the behavior applies.  If no ``using`` argument is provided then the ``\"default\"`` database is used."
msgstr ""

#: ../../topics/db/transactions.txt:255
# 5988025b89d44b2bb3006493ab887829
msgid "Savepoints are controlled by three methods on the transaction object:"
msgstr ""

#: ../../topics/db/transactions.txt:259
# 282b524fcc014f5fb3fa6dbc19a32912
msgid "Creates a new savepoint. This marks a point in the transaction that is known to be in a \"good\" state."
msgstr ""

#: ../../topics/db/transactions.txt:262
# 4b85eb1ff67f481292a99e3779775550
msgid "Returns the savepoint ID (sid)."
msgstr ""

#: ../../topics/db/transactions.txt:266
# 1f313e3f883748fab386822adfa08f94
msgid "Updates the savepoint to include any operations that have been performed since the savepoint was created, or since the last commit."
msgstr ""

#: ../../topics/db/transactions.txt:271
# 7dcd686f74a04f8a9f35b540105cd7dd
msgid "Rolls the transaction back to the last point at which the savepoint was committed."
msgstr ""

#: ../../topics/db/transactions.txt:274
# 161af2114a3347b085253d0c189e4d88
msgid "The following example demonstrates the use of savepoints::"
msgstr ""

#: ../../topics/db/transactions.txt:298
# 80eb075b7630482384b18dba945a3418
msgid "Transactions in MySQL"
msgstr ""

#: ../../topics/db/transactions.txt:300
# 63d5918fc6344686bfcf0fa3e77a73dc
msgid "If you're using MySQL, your tables may or may not support transactions; it depends on your MySQL version and the table types you're using. (By \"table types,\" we mean something like \"InnoDB\" or \"MyISAM\".) MySQL transaction peculiarities are outside the scope of this article, but the MySQL site has `information on MySQL transactions`_."
msgstr ""

#: ../../topics/db/transactions.txt:306
# d0e8257f704741ccbd6228017e211fe0
msgid "If your MySQL setup does *not* support transactions, then Django will function in auto-commit mode: Statements will be executed and committed as soon as they're called. If your MySQL setup *does* support transactions, Django will handle transactions as explained in this document."
msgstr ""

#: ../../topics/db/transactions.txt:314
# e4a3a19f82b245b8831afb401564172b
msgid "Handling exceptions within PostgreSQL transactions"
msgstr ""

#: ../../topics/db/transactions.txt:316
# e5f10f87c3494704926dfee67b738ef6
msgid "When a call to a PostgreSQL cursor raises an exception (typically ``IntegrityError``), all subsequent SQL in the same transaction will fail with the error \"current transaction is aborted, queries ignored until end of transaction block\". Whilst simple use of ``save()`` is unlikely to raise an exception in PostgreSQL, there are more advanced usage patterns which might, such as saving objects with unique fields, saving using the force_insert/force_update flag, or invoking custom SQL."
msgstr ""

#: ../../topics/db/transactions.txt:324
# e83398d031854e3ca452a0c2832e9a35
msgid "There are several ways to recover from this sort of error."
msgstr ""

#: ../../topics/db/transactions.txt:327
# 0934a81a0e7f467e9f444a2fbc234c1d
msgid "Transaction rollback"
msgstr ""

#: ../../topics/db/transactions.txt:329
# 7955de0f8d5e4056a569c8a7458f0ff6
msgid "The first option is to roll back the entire transaction. For example::"
msgstr ""

#: ../../topics/db/transactions.txt:338
# bf17a7c3cf034709b8b2e7c88f8bdd08
msgid "Calling ``transaction.rollback()`` rolls back the entire transaction. Any uncommitted database operations will be lost. In this example, the changes made by ``a.save()`` would be lost, even though that operation raised no error itself."
msgstr ""

#: ../../topics/db/transactions.txt:344
# 7a8aca7138aa40ae9125e76342f2acb8
msgid "Savepoint rollback"
msgstr ""

#: ../../topics/db/transactions.txt:346
# 0befa378ac4a40dab0313613a1fcbae7
msgid "If you are using PostgreSQL 8 or later, you can use :ref:`savepoints <topics-db-transactions-savepoints>` to control the extent of a rollback. Before performing a database operation that could fail, you can set or update the savepoint; that way, if the operation fails, you can roll back the single offending operation, rather than the entire transaction. For example::"
msgstr ""

#: ../../topics/db/transactions.txt:361
# ee2388f259674b86acac172d057a5c9f
msgid "In this example, ``a.save()`` will not be undone in the case where ``b.save()`` raises an exception."
msgstr ""

#: ../../topics/db/transactions.txt:365
# 6c630b60be5d4c41a4e33503590852a6
msgid "Database-level autocommit"
msgstr ""

#: ../../topics/db/transactions.txt:367
# 4ae02c1ed8a84d2c811e237aa554dc82
msgid "With PostgreSQL 8.2 or later, there is an advanced option to run PostgreSQL with :doc:`database-level autocommit </ref/databases>`. If you use this option, there is no constantly open transaction, so it is always possible to continue after catching an exception. For example::"
msgstr ""

#: ../../topics/db/transactions.txt:381
# 0569a68b942c4fbd875805871a3d3581
msgid "This is not the same as the :ref:`autocommit decorator <topics-db-transactions-autocommit>`. When using database level autocommit there is no database transaction at all. The ``autocommit`` decorator still uses transactions, automatically committing each transaction when a database modifying operation occurs."
msgstr ""

#: ../../topics/email.txt:3
# 81e92bc3632c466884f71051b8f1263d
msgid "Sending email"
msgstr ""

#: ../../topics/email.txt:8
# 5724d9b544184e2f9770b3ee8dfa486b
msgid "Although Python makes sending email relatively easy via the :mod:`smtplib` module, Django provides a couple of light wrappers over it. These wrappers are provided to make sending email extra quick, to make it easy to test email sending during development, and to provide support for platforms that can't use SMTP."
msgstr ""

#: ../../topics/email.txt:14
# 5f1e41a6a7e54cbc81b9d7e5f18d0a83
msgid "The code lives in the ``django.core.mail`` module."
msgstr ""

#: ../../topics/email.txt:19
# c5e0837939c5474e802e559068f733dc
msgid "In two lines::"
msgstr ""

#: ../../topics/email.txt:26
# 7592959ec7a545369dfc17255bb32a50
msgid "Mail is sent using the SMTP host and port specified in the :setting:`EMAIL_HOST` and :setting:`EMAIL_PORT` settings. The :setting:`EMAIL_HOST_USER` and :setting:`EMAIL_HOST_PASSWORD` settings, if set, are used to authenticate to the SMTP server, and the :setting:`EMAIL_USE_TLS` setting controls whether a secure connection is used."
msgstr ""

#: ../../topics/email.txt:34
# 505bb4874f5e4a86843aa214e11bd792
msgid "The character set of email sent with ``django.core.mail`` will be set to the value of your :setting:`DEFAULT_CHARSET` setting."
msgstr ""

#: ../../topics/email.txt:38
# 78bfb9728b87462b82203ed4cf2e5c48
msgid "send_mail()"
msgstr ""

#: ../../topics/email.txt:42
# 0175a423185f4e22b795eacd23a76779
msgid "The simplest way to send email is using ``django.core.mail.send_mail()``."
msgstr ""

#: ../../topics/email.txt:45
# dfcd1a79dcd44a25a17518b4b435117b
msgid "The ``subject``, ``message``, ``from_email`` and ``recipient_list`` parameters are required."
msgstr ""

#: ../../topics/email.txt:48
# 5b3f68077c6a42d095ae9d596a25fc50
msgid "``subject``: A string."
msgstr ""

#: ../../topics/email.txt:49
# 03df4be1d01e4b0a801e0a8c59ec1a53
msgid "``message``: A string."
msgstr ""

#: ../../topics/email.txt:50
# 8d0ee0855f95429c9518df5d80c5a7d4
msgid "``from_email``: A string."
msgstr ""

#: ../../topics/email.txt:51
# e16c48f9b792480799f8cd298182f192
msgid "``recipient_list``: A list of strings, each an email address. Each member of ``recipient_list`` will see the other recipients in the \"To:\" field of the email message."
msgstr ""

#: ../../topics/email.txt:54
# 51a34fa9bffb4817adcc89e54b4e938b
msgid "``fail_silently``: A boolean. If it's ``False``, ``send_mail`` will raise an :exc:`smtplib.SMTPException`. See the :mod:`smtplib` docs for a list of possible exceptions, all of which are subclasses of :exc:`~smtplib.SMTPException`."
msgstr ""

#: ../../topics/email.txt:58
# 22fb384a1dce4454966f1e70be4978f2
msgid "``auth_user``: The optional username to use to authenticate to the SMTP server. If this isn't provided, Django will use the value of the :setting:`EMAIL_HOST_USER` setting."
msgstr ""

#: ../../topics/email.txt:61
# 9d55d7ec178f46c8881c0ccaad8f345d
msgid "``auth_password``: The optional password to use to authenticate to the SMTP server. If this isn't provided, Django will use the value of the :setting:`EMAIL_HOST_PASSWORD` setting."
msgstr ""

#: ../../topics/email.txt:64
# e6e81538d33c4c4d9618dbbb19dfadd4
msgid "``connection``: The optional email backend to use to send the mail. If unspecified, an instance of the default backend will be used. See the documentation on :ref:`Email backends <topic-email-backends>` for more details."
msgstr ""

#: ../../topics/email.txt:70
# 20af921c21784aa1a7f4aef103ad12c3
msgid "send_mass_mail()"
msgstr ""

#: ../../topics/email.txt:74
# e098df0afbd4426f841199c88efc8ce6
msgid "``django.core.mail.send_mass_mail()`` is intended to handle mass emailing."
msgstr ""

#: ../../topics/email.txt:76
# 282e1aea613448738c859613ade5f3fe
msgid "``datatuple`` is a tuple in which each element is in this format::"
msgstr ""

#: ../../topics/email.txt:80
# b4fc92315a49480c99429f27e730c31b
msgid "``fail_silently``, ``auth_user`` and ``auth_password`` have the same functions as in :meth:`~django.core.mail.send_mail()`."
msgstr ""

#: ../../topics/email.txt:83
# 5e60f0873ce74c69ab218586b594d1a5
msgid "Each separate element of ``datatuple`` results in a separate email message. As in :meth:`~django.core.mail.send_mail()`, recipients in the same ``recipient_list`` will all see the other addresses in the email messages' \"To:\" field."
msgstr ""

#: ../../topics/email.txt:88
# 070bbe5999df4731b468efe4cfc53dc8
msgid "For example, the following code would send two different messages to two different sets of recipients; however, only one connection to the mail server would be opened::"
msgstr ""

#: ../../topics/email.txt:97
# 6858ed477cce454d86036d392b7d424f
msgid "send_mass_mail() vs. send_mail()"
msgstr ""

#: ../../topics/email.txt:99
# 01b455f516ec49ccb4937832b5983152
msgid "The main difference between :meth:`~django.core.mail.send_mass_mail()` and :meth:`~django.core.mail.send_mail()` is that :meth:`~django.core.mail.send_mail()` opens a connection to the mail server each time it's executed, while :meth:`~django.core.mail.send_mass_mail()` uses a single connection for all of its messages. This makes :meth:`~django.core.mail.send_mass_mail()` slightly more efficient."
msgstr ""

#: ../../topics/email.txt:107
# 000fc394012b4dddb6ba3180175191ab
msgid "mail_admins()"
msgstr ""

#: ../../topics/email.txt:111
# 820cf525ff584348804c343f47045950
msgid "``django.core.mail.mail_admins()`` is a shortcut for sending an email to the site admins, as defined in the :setting:`ADMINS` setting."
msgstr ""

#: ../../topics/email.txt:114
# 6f6c4513b87446c8871c5e8f26be0c4f
msgid "``mail_admins()`` prefixes the subject with the value of the :setting:`EMAIL_SUBJECT_PREFIX` setting, which is ``\"[Django] \"`` by default."
msgstr ""

#: ../../topics/email.txt:117
# 54a8f55636b647ed8d1cc68a0be179d8
msgid "The \"From:\" header of the email will be the value of the :setting:`SERVER_EMAIL` setting."
msgstr ""

#: ../../topics/email.txt:120
# c90c7c6f59cf4352b1c4a701098edd56
msgid "This method exists for convenience and readability."
msgstr ""

#: ../../topics/email.txt:122
# 2cf7918ab57742b3a027802aff1e0b7d
msgid "If ``html_message`` is provided, the resulting email will be a :mimetype:`multipart/alternative` email with ``message`` as the :mimetype:`text/plain` content type and ``html_message`` as the :mimetype:`text/html` content type."
msgstr ""

#: ../../topics/email.txt:128
# 6fe1ae878b8b47df90f547d40f31b530
msgid "mail_managers()"
msgstr ""

#: ../../topics/email.txt:132
# 3f629708b16e4879bf9512d2fe84f0e1
msgid "``django.core.mail.mail_managers()`` is just like ``mail_admins()``, except it sends an email to the site managers, as defined in the :setting:`MANAGERS` setting."
msgstr ""

#: ../../topics/email.txt:137
#: ../../topics/http/sessions.txt:304
#: ../../topics/http/shortcuts.txt:182
#: ../../topics/http/urls.txt:562
# 6a1ea619049b49318826f60dc6ecc964
# fc51ed4e64bb41e3a1ba88e27817a8bb
# d29265f4c10f4de18e403a35b9279db3
# 6e0d9b98aa0a4e54a79e10449a7571e7
msgid "Examples"
msgstr ""

#: ../../topics/email.txt:139
# 40fb0eb8a0184d4fb34ca473d85f4a0d
msgid "This sends a single email to john@example.com and jane@example.com, with them both appearing in the \"To:\"::"
msgstr ""

#: ../../topics/email.txt:145
# 6b57c8eaadbf4261adf0372028c27338
msgid "This sends a message to john@example.com and jane@example.com, with them both receiving a separate email::"
msgstr ""

#: ../../topics/email.txt:155
# 562049daac0c4f57976d72361dd13901
msgid "Preventing header injection"
msgstr ""

#: ../../topics/email.txt:157
# 08e9c5c9563c4658b078edcd1999aa81
msgid "`Header injection`_ is a security exploit in which an attacker inserts extra email headers to control the \"To:\" and \"From:\" in email messages that your scripts generate."
msgstr ""

#: ../../topics/email.txt:161
# 7265f23b9fca40a3aedcc0786ef6251e
msgid "The Django email functions outlined above all protect against header injection by forbidding newlines in header values. If any ``subject``, ``from_email`` or ``recipient_list`` contains a newline (in either Unix, Windows or Mac style), the email function (e.g. :meth:`~django.core.mail.send_mail()`) will raise ``django.core.mail.BadHeaderError`` (a subclass of ``ValueError``) and, hence, will not send the email. It's your responsibility to validate all data before passing it to the email functions."
msgstr ""

#: ../../topics/email.txt:169
# f2de55ab9fbf4550845d8a81cb5df3fc
msgid "If a ``message`` contains headers at the start of the string, the headers will simply be printed as the first bit of the email message."
msgstr ""

#: ../../topics/email.txt:172
# 2c23e5d36888426ca3010a3a7090cb97
msgid "Here's an example view that takes a ``subject``, ``message`` and ``from_email`` from the request's POST data, sends that to admin@example.com and redirects to \"/contact/thanks/\" when it's done::"
msgstr ""

#: ../../topics/email.txt:198
# a465b711a14e49b48c40e92c0ca2c927
msgid "The EmailMessage class"
msgstr ""

#: ../../topics/email.txt:200
# 81b01297d5064a49b5549ce9bb20221f
msgid "Django's :meth:`~django.core.mail.send_mail()` and :meth:`~django.core.mail.send_mass_mail()` functions are actually thin wrappers that make use of the :class:`~django.core.mail.EmailMessage` class."
msgstr ""

#: ../../topics/email.txt:204
# 7541565c0645438ca337f6422c8b88bf
msgid "Not all features of the :class:`~django.core.mail.EmailMessage` class are available through the :meth:`~django.core.mail.send_mail()` and related wrapper functions. If you wish to use advanced features, such as BCC'ed recipients, file attachments, or multi-part email, you'll need to create :class:`~django.core.mail.EmailMessage` instances directly."
msgstr ""

#: ../../topics/email.txt:211
# 813b3b7b6bfe4ed787dcd326659362a9
msgid "This is a design feature. :meth:`~django.core.mail.send_mail()` and related functions were originally the only interface Django provided. However, the list of parameters they accepted was slowly growing over time. It made sense to move to a more object-oriented design for email messages and retain the original functions only for backwards compatibility."
msgstr ""

#: ../../topics/email.txt:218
# a283c49ea433404881876cd09a6bf7fa
msgid ":class:`~django.core.mail.EmailMessage` is responsible for creating the email message itself. The :ref:`email backend <topic-email-backends>` is then responsible for sending the email."
msgstr ""

#: ../../topics/email.txt:222
# b9cd702d96fb47df938eaf897f29db6c
msgid "For convenience, :class:`~django.core.mail.EmailMessage` provides a simple ``send()`` method for sending a single email. If you need to send multiple messages, the email backend API :ref:`provides an alternative <topics-sending-multiple-emails>`."
msgstr ""

#: ../../topics/email.txt:228
# e0b6c117d37447b0981a74fc9e518101
msgid "EmailMessage Objects"
msgstr ""

#: ../../topics/email.txt:232
# 676b7fc53b5b48e7ba5b251adba945a7
msgid "The :class:`~django.core.mail.EmailMessage` class is initialized with the following parameters (in the given order, if positional arguments are used). All parameters are optional and can be set at any time prior to calling the ``send()`` method."
msgstr ""

#: ../../topics/email.txt:237
# 86f5765b596549a78f709a53fba618ee
msgid "``subject``: The subject line of the email."
msgstr ""

#: ../../topics/email.txt:239
# 314f2ae6d7f34de097be9d524e00cff7
msgid "``body``: The body text. This should be a plain text message."
msgstr ""

#: ../../topics/email.txt:241
# 45396095da124ff29dd823d41d79fd08
msgid "``from_email``: The sender's address. Both ``fred@example.com`` and ``Fred <fred@example.com>`` forms are legal. If omitted, the :setting:`DEFAULT_FROM_EMAIL` setting is used."
msgstr ""

#: ../../topics/email.txt:245
# 78fdeb74620c42b293d3a529c0b79293
msgid "``to``: A list or tuple of recipient addresses."
msgstr ""

#: ../../topics/email.txt:247
# 3ffda47a457d45df9baa83f68d0e0b69
msgid "``bcc``: A list or tuple of addresses used in the \"Bcc\" header when sending the email."
msgstr ""

#: ../../topics/email.txt:250
# 7e738a6ac0834b279b85891f6c577118
msgid "``connection``: An email backend instance. Use this parameter if you want to use the same connection for multiple messages. If omitted, a new connection is created when ``send()`` is called."
msgstr ""

#: ../../topics/email.txt:254
# 8a58e85b4e824e1aa3d15cfbb78931b0
msgid "``attachments``: A list of attachments to put on the message. These can be either ``email.MIMEBase.MIMEBase`` instances, or ``(filename, content, mimetype)`` triples."
msgstr ""

#: ../../topics/email.txt:258
# 5cbae0891ffe402e9532a58c3e34861b
msgid "``headers``: A dictionary of extra headers to put on the message. The keys are the header name, values are the header values. It's up to the caller to ensure header names and values are in the correct format for an email message."
msgstr ""

#: ../../topics/email.txt:263
# da254490e0484147a72347dc15dd10e8
msgid "``cc``: A list or tuple of recipient addresses used in the \"Cc\" header when sending the email."
msgstr ""

#: ../../topics/email.txt:272
# 45224133e8c84c2085d432a9b92235d5
msgid "The class has the following methods:"
msgstr ""

#: ../../topics/email.txt:274
# 09e751f7428042d78d1486ea910159ec
msgid "``send(fail_silently=False)`` sends the message. If a connection was specified when the email was constructed, that connection will be used. Otherwise, an instance of the default backend will be instantiated and used. If the keyword argument ``fail_silently`` is ``True``, exceptions raised while sending the message will be quashed."
msgstr ""

#: ../../topics/email.txt:280
# 430d921499764a6593566bebbc828b15
msgid "``message()`` constructs a ``django.core.mail.SafeMIMEText`` object (a subclass of Python's ``email.MIMEText.MIMEText`` class) or a ``django.core.mail.SafeMIMEMultipart`` object holding the message to be sent. If you ever need to extend the :class:`~django.core.mail.EmailMessage` class, you'll probably want to override this method to put the content you want into the MIME object."
msgstr ""

#: ../../topics/email.txt:287
# 438d3e7dca074f2a854ed34d74b36c37
msgid "``recipients()`` returns a list of all the recipients of the message, whether they're recorded in the ``to``, ``cc`` or ``bcc`` attributes. This is another method you might need to override when subclassing, because the SMTP server needs to be told the full list of recipients when the message is sent. If you add another way to specify recipients in your class, they need to be returned from this method as well."
msgstr ""

#: ../../topics/email.txt:294
# b644e4670b114ada8ebaa61ad1f30a2e
msgid "``attach()`` creates a new file attachment and adds it to the message. There are two ways to call ``attach()``:"
msgstr ""

#: ../../topics/email.txt:297
# 7fbbbf16b39d46da993a955419f805d7
msgid "You can pass it a single argument that is an ``email.MIMEBase.MIMEBase`` instance. This will be inserted directly into the resulting message."
msgstr ""

#: ../../topics/email.txt:301
# 63c124b2edcd4f8fb778ee386fde9638
msgid "Alternatively, you can pass ``attach()`` three arguments: ``filename``, ``content`` and ``mimetype``. ``filename`` is the name of the file attachment as it will appear in the email, ``content`` is the data that will be contained inside the attachment and ``mimetype`` is the optional MIME type for the attachment. If you omit ``mimetype``, the MIME content type will be guessed from the filename of the attachment."
msgstr ""

#: ../../topics/email.txt:313
# dbf2c59aefe54bd1b874632ff0c86921
msgid "``attach_file()`` creates a new attachment using a file from your filesystem. Call it with the path of the file to attach and, optionally, the MIME type to use for the attachment. If the MIME type is omitted, it will be guessed from the filename. The simplest use would be::"
msgstr ""

#: ../../topics/email.txt:323
# 2d06dc9a3258477689a3b8919440f8a9
msgid "Sending alternative content types"
msgstr ""

#: ../../topics/email.txt:325
# b1bb780e2c1149fdab6ff698bbf45cb6
msgid "It can be useful to include multiple versions of the content in an email; the classic example is to send both text and HTML versions of a message. With Django's email library, you can do this using the ``EmailMultiAlternatives`` class. This subclass of :class:`~django.core.mail.EmailMessage` has an ``attach_alternative()`` method for including extra versions of the message body in the email. All the other methods (including the class initialization) are inherited directly from :class:`~django.core.mail.EmailMessage`."
msgstr ""

#: ../../topics/email.txt:333
# fd48cc9be6b143c89db2326603968f57
msgid "To send a text and HTML combination, you could write::"
msgstr ""

#: ../../topics/email.txt:344
# 1c4c830dd5c04bae85942ba7c0da8238
msgid "By default, the MIME type of the ``body`` parameter in an :class:`~django.core.mail.EmailMessage` is ``\"text/plain\"``. It is good practice to leave this alone, because it guarantees that any recipient will be able to read the email, regardless of their mail client. However, if you are confident that your recipients can handle an alternative content type, you can use the ``content_subtype`` attribute on the :class:`~django.core.mail.EmailMessage` class to change the main content type. The major type will always be ``\"text\"``, but you can change the subtype. For example::"
msgstr ""

#: ../../topics/email.txt:361
# a676ec534a69497599cb57952b65e84e
msgid "Email backends"
msgstr ""

#: ../../topics/email.txt:363
# 0a3c94835b38404c952e41d90f898304
msgid "The actual sending of an email is handled by the email backend."
msgstr ""

#: ../../topics/email.txt:365
# 9c9ed2b9454f4eda865ecb1baffd1a8c
msgid "The email backend class has the following methods:"
msgstr ""

#: ../../topics/email.txt:367
# 2f9b227388694b6c91af75d07ce1a2bb
msgid "``open()`` instantiates an long-lived email-sending connection."
msgstr ""

#: ../../topics/email.txt:369
# aaf3be25ff62476e976f028f6562049b
msgid "``close()`` closes the current email-sending connection."
msgstr ""

#: ../../topics/email.txt:371
# 1e5a28f4ade44b9b8bea5aecdd749377
msgid "``send_messages(email_messages)`` sends a list of :class:`~django.core.mail.EmailMessage` objects. If the connection is not open, this call will implicitly open the connection, and close the connection afterwards. If the connection is already open, it will be left open after mail has been sent."
msgstr ""

#: ../../topics/email.txt:378
# e26ae4667fee44d2be7e50150819fac0
msgid "Obtaining an instance of an email backend"
msgstr ""

#: ../../topics/email.txt:380
# 41721b1b63804797bfcdc4e41f6ff9cb
msgid "The :meth:`get_connection` function in ``django.core.mail`` returns an instance of the email backend that you can use."
msgstr ""

#: ../../topics/email.txt:387
# 3e10a9c1c5064119b077604abbde9542
msgid "By default, a call to ``get_connection()`` will return an instance of the email backend specified in :setting:`EMAIL_BACKEND`. If you specify the ``backend`` argument, an instance of that backend will be instantiated."
msgstr ""

#: ../../topics/email.txt:391
# 143d6cb8bef743fe942005e5c1e5887c
msgid "The ``fail_silently`` argument controls how the backend should handle errors. If ``fail_silently`` is True, exceptions during the email sending process will be silently ignored."
msgstr ""

#: ../../topics/email.txt:395
# da2fc31c57584ee78c5e2a017c9e8d19
msgid "All other arguments are passed directly to the constructor of the email backend."
msgstr ""

#: ../../topics/email.txt:398
# 246d553d9846457caef6908218d033eb
msgid "Django ships with several email sending backends. With the exception of the SMTP backend (which is the default), these backends are only useful during testing and development. If you have special email sending requirements, you can :ref:`write your own email backend <topic-custom-email-backend>`."
msgstr ""

#: ../../topics/email.txt:406
# 9d484b623b264e5da10eb47cde36a800
msgid "SMTP backend"
msgstr ""

#: ../../topics/email.txt:408
# 17a7dcd287da4574aeb09f0a69cdf381
msgid "This is the default backend. Email will be sent through a SMTP server. The server address and authentication credentials are set in the :setting:`EMAIL_HOST`, :setting:`EMAIL_PORT`, :setting:`EMAIL_HOST_USER`, :setting:`EMAIL_HOST_PASSWORD` and :setting:`EMAIL_USE_TLS` settings in your settings file."
msgstr ""

#: ../../topics/email.txt:414
# 2c671deb51f74cf8b8858206da495783
msgid "The SMTP backend is the default configuration inherited by Django. If you want to specify it explicitly, put the following in your settings::"
msgstr ""

#: ../../topics/email.txt:422
# d169573ae1bd4c6999c01fab90625442
msgid "Console backend"
msgstr ""

#: ../../topics/email.txt:424
# cc0f6aad21dd47e59970685fb7ddd5d2
msgid "Instead of sending out real emails the console backend just writes the emails that would be send to the standard output. By default, the console backend writes to ``stdout``. You can use a different stream-like object by providing the ``stream`` keyword argument when constructing the connection."
msgstr ""

#: ../../topics/email.txt:429
#: ../../topics/email.txt:447
#: ../../topics/email.txt:466
# 77ca2bf395964feb98481e405d9f2d68
# 8fb875eb4a494b488035dae21fd1343f
# 158bab4a3d7c4c1c8a77f479d74d9172
msgid "To specify this backend, put the following in your settings::"
msgstr ""

#: ../../topics/email.txt:433
#: ../../topics/email.txt:452
#: ../../topics/email.txt:483
# 0cf89db9a1774e3092632ceb47b0dbaa
# 0f65b9b9b6ae4f98b552ee24fc37a78b
# dd09dc5e265e4a5395af08754c267d55
msgid "This backend is not intended for use in production -- it is provided as a convenience that can be used during development."
msgstr ""

#: ../../topics/email.txt:439
# dcd99edd45e1400388302d408d2f8a90
msgid "File backend"
msgstr ""

#: ../../topics/email.txt:441
# 637282c1d53b4bc2bedfe5bff7ca35c7
msgid "The file backend writes emails to a file. A new file is created for each new session that is opened on this backend. The directory to which the files are written is either taken from the :setting:`EMAIL_FILE_PATH` setting or from the ``file_path`` keyword when creating a connection with :meth:`~django.core.mail.get_connection`."
msgstr ""

#: ../../topics/email.txt:458
# ae59d3fe80a744ddac4957357eb1dab1
msgid "In-memory backend"
msgstr ""

#: ../../topics/email.txt:460
# 1b813eaabbb84e6bb229656c8bd33267
msgid "The ``'locmem'`` backend stores messages in a special attribute of the ``django.core.mail`` module. The ``outbox`` attribute is created when the first message is sent. It's a list with an :class:`~django.core.mail.EmailMessage` instance for each message that would be send."
msgstr ""

#: ../../topics/email.txt:470
# 203f9e24b647452a860242c34ac22051
msgid "This backend is not intended for use in production -- it is provided as a convenience that can be used during development and testing."
msgstr ""

#: ../../topics/email.txt:476
# 1cb4bbb58280499a953237919a9c777f
msgid "Dummy backend"
msgstr ""

#: ../../topics/email.txt:478
# 73cc4813fa4b43eeaf93a9ccbde78ec7
msgid "As the name suggests the dummy backend does nothing with your messages. To specify this backend, put the following in your settings::"
msgstr ""

#: ../../topics/email.txt:489
# 1337f04c2ae242ddadcde1d8db7f49d8
msgid "Defining a custom email backend"
msgstr ""

#: ../../topics/email.txt:491
# edd6504adc8945929324135d93870d9a
msgid "If you need to change how emails are sent you can write your own email backend. The :setting:`EMAIL_BACKEND` setting in your settings file is then the Python import path for your backend class."
msgstr ""

#: ../../topics/email.txt:495
# 3346be2202574ebebbf5c1a5ab561de2
msgid "Custom email backends should subclass ``BaseEmailBackend`` that is located in the ``django.core.mail.backends.base`` module. A custom email backend must implement the ``send_messages(email_messages)`` method. This method receives a list of :class:`~django.core.mail.EmailMessage` instances and returns the number of successfully delivered messages. If your backend has any concept of a persistent session or connection, you should also implement the ``open()`` and ``close()`` methods. Refer to ``smtp.EmailBackend`` for a reference implementation."
msgstr ""

#: ../../topics/email.txt:507
# 06a40fdf70544d0babaec4524d286453
msgid "Sending multiple emails"
msgstr ""

#: ../../topics/email.txt:509
# 6a825a6a20c542f3a4a3ff89d5a75a0b
msgid "Establishing and closing an SMTP connection (or any other network connection, for that matter) is an expensive process. If you have a lot of emails to send, it makes sense to reuse an SMTP connection, rather than creating and destroying a connection every time you want to send an email."
msgstr ""

#: ../../topics/email.txt:514
# 7ddf874dc4b949c5a6b74e97b78e08d4
msgid "There are two ways you tell an email backend to reuse a connection."
msgstr ""

#: ../../topics/email.txt:516
# 092bf101ac4548fba9c23776eb8a3113
msgid "Firstly, you can use the ``send_messages()`` method. ``send_messages()`` takes a list of :class:`~django.core.mail.EmailMessage` instances (or subclasses), and sends them all using a single connection."
msgstr ""

#: ../../topics/email.txt:520
# 8e08ac853688495a9c81b0c08bb286f6
msgid "For example, if you have a function called ``get_notification_email()`` that returns a list of :class:`~django.core.mail.EmailMessage` objects representing some periodic email you wish to send out, you could send these emails using a single call to send_messages::"
msgstr ""

#: ../../topics/email.txt:530
# 25b1f358a7104771ac0d0e455a7c076f
msgid "In this example, the call to ``send_messages()`` opens a connection on the backend, sends the list of messages, and then closes the connection again."
msgstr ""

#: ../../topics/email.txt:533
# 856fb37ebdb94cd89a25e0e0869e90e2
msgid "The second approach is to use the ``open()`` and ``close()`` methods on the email backend to manually control the connection. ``send_messages()`` will not manually open or close the connection if it is already open, so if you manually open the connection, you can control when it is closed. For example::"
msgstr ""

#: ../../topics/email.txt:563
# 89ee52fad1b64705b91628db097b4776
msgid "Testing email sending"
msgstr ""

#: ../../topics/email.txt:565
# d5ec1741733942d99ec72f4b742ac193
msgid "There are times when you do not want Django to send emails at all. For example, while developing a Web site, you probably don't want to send out thousands of emails -- but you may want to validate that emails will be sent to the right people under the right conditions, and that those emails will contain the correct content."
msgstr ""

#: ../../topics/email.txt:571
# c36f497eb2ef435b84b562daa669caf5
msgid "The easiest way to test your project's use of email is to use the ``console`` email backend. This backend redirects all email to stdout, allowing you to inspect the content of mail."
msgstr ""

#: ../../topics/email.txt:575
# 8550a965737544d88ae8ead0061fd6d7
msgid "The ``file`` email backend can also be useful during development -- this backend dumps the contents of every SMTP connection to a file that can be inspected at your leisure."
msgstr ""

#: ../../topics/email.txt:579
# b30b2c0b8059456e8e51696130e61150
msgid "Another approach is to use a \"dumb\" SMTP server that receives the emails locally and displays them to the terminal, but does not actually send anything. Python has a built-in way to accomplish this with a single command::"
msgstr ""

#: ../../topics/email.txt:585
# 38a99e32ba3f47e099d3e13be9e8177a
msgid "This command will start a simple SMTP server listening on port 1025 of localhost. This server simply prints to standard output all email headers and the email body. You then only need to set the :setting:`EMAIL_HOST` and :setting:`EMAIL_PORT` accordingly, and you are set."
msgstr ""

#: ../../topics/email.txt:590
# 365b99944e58486a9263c698dcf73712
msgid "For a more detailed discussion of testing and processing of emails locally, see the Python documentation for the :mod:`smtpd` module."
msgstr ""

#: ../../topics/files.txt:3
# b36043be870e42a2a6565217aa4f79e5
msgid "Managing files"
msgstr ""

#: ../../topics/files.txt:5
# ca6d9dfc11f6486fa76167c832e3f494
msgid "This document describes Django's file access APIs for files such as those uploaded by a user. The lower level APIs are general enough that you could use them for other purposes. If you want to handle \"static files\" (JS, CSS, etc), see :doc:`/howto/static-files/index`."
msgstr ""

#: ../../topics/files.txt:10
# c3213a70e0384a96bda7b77ff75e0db3
msgid "By default, Django stores files locally, using the :setting:`MEDIA_ROOT` and :setting:`MEDIA_URL` settings. The examples below assume that you're using these defaults."
msgstr ""

#: ../../topics/files.txt:14
# d48e7936f26e41788271acca01994847
msgid "However, Django provides ways to write custom `file storage systems`_ that allow you to completely customize where and how Django stores files. The second half of this document describes how these storage systems work."
msgstr ""

#: ../../topics/files.txt:21
# c37394e5725a4efabe10f444fdbf2a6a
msgid "Using files in models"
msgstr ""

#: ../../topics/files.txt:23
# 8cd6f2a0e5aa4da6b32c303f4cb8c585
msgid "When you use a :class:`~django.db.models.FileField` or :class:`~django.db.models.ImageField`, Django provides a set of APIs you can use to deal with that file."
msgstr ""

#: ../../topics/files.txt:27
# b5c1310ac4cf4434af66762c31e3ee6a
msgid "Consider the following model, using an :class:`~django.db.models.ImageField` to store a photo::"
msgstr ""

#: ../../topics/files.txt:35
# ce52f6117f274bf49012950d014d9e78
msgid "Any ``Car`` instance will have a ``photo`` attribute that you can use to get at the details of the attached photo::"
msgstr ""

#: ../../topics/files.txt:48
# 4c61cf1accc44d02bfd2d1aaa9ead432
msgid "This object -- ``car.photo`` in the example -- is a ``File`` object, which means it has all the methods and attributes described below."
msgstr ""

#: ../../topics/files.txt:52
# ca79a3a9299045f6b757d7b3b19d5422
msgid "The file is saved as part of saving the model in the database, so the actual file name used on disk cannot be relied on until after the model has been saved."
msgstr ""

#: ../../topics/files.txt:58
# 0d830928bb744d68b54b3b6c413749db
msgid "The ``File`` object"
msgstr ""

#: ../../topics/files.txt:60
# 6746637a72634328adea639366e8af25
msgid "Internally, Django uses a :class:`django.core.files.File` instance any time it needs to represent a file. This object is a thin wrapper around Python's `built-in file object`_ with some Django-specific additions."
msgstr ""

#: ../../topics/files.txt:66
# a80257e9bb7848d1a14456523a74fa1a
msgid "Most of the time you'll simply use a ``File`` that Django's given you (i.e. a file attached to a model as above, or perhaps an uploaded file)."
msgstr ""

#: ../../topics/files.txt:69
# 9d1b5eb30584483589e396ff48ea8b56
msgid "If you need to construct a ``File`` yourself, the easiest way is to create one using a Python built-in ``file`` object::"
msgstr ""

#: ../../topics/files.txt:78
# f82764de57e74aee9c9e10c43d5af560
msgid "Now you can use any of the documented attributes and methods of the :class:`~django.core.files.File` class."
msgstr ""

#: ../../topics/files.txt:81
# 712d63e882334ee7bc3a9964087c4a32
msgid "Be aware that files created in this way are not automatically closed. The following approach may be used to close files automatically::"
msgstr ""

#: ../../topics/files.txt:96
# 92b95f81b8ef42b9b0555708535e19ca
msgid "Closing files is especially important when accessing file fields in a loop over a large number of objects:: If files are not manually closed after accessing them, the risk of running out of file descriptors may arise. This may lead to the following error::"
msgstr ""

#: ../../topics/files.txt:105
# e4bbcdabb29e4530886b64b3855c6b63
msgid "File storage"
msgstr ""

#: ../../topics/files.txt:107
# 4e396b30807547ec94d71bd97db17492
msgid "Behind the scenes, Django delegates decisions about how and where to store files to a file storage system. This is the object that actually understands things like file systems, opening and reading files, etc."
msgstr ""

#: ../../topics/files.txt:111
# a3fbe4dcb33043119c9300e4b84da762
msgid "Django's default file storage is given by the :setting:`DEFAULT_FILE_STORAGE` setting; if you don't explicitly provide a storage system, this is the one that will be used."
msgstr ""

#: ../../topics/files.txt:115
# 4f36ae7665b54edfb1b1ece1ca60fde2
msgid "See below for details of the built-in default file storage system, and see :doc:`/howto/custom-file-storage` for information on writing your own file storage system."
msgstr ""

#: ../../topics/files.txt:120
# 648ef710c2114a83b380f0fe3a5ab068
msgid "Storage objects"
msgstr ""

#: ../../topics/files.txt:122
# c878974da7e64d8b8660f6594fc1978a
msgid "Though most of the time you'll want to use a ``File`` object (which delegates to the proper storage for that file), you can use file storage systems directly. You can create an instance of some custom file storage class, or -- often more useful -- you can use the global default storage system::"
msgstr ""

#: ../../topics/files.txt:143
# 80b6c6ea939c4816842986f534f38d8c
msgid "See :doc:`/ref/files/storage` for the file storage API."
msgstr ""

#: ../../topics/files.txt:148
# 75e969f4ef3f4326abf3aee38c8c5f19
msgid "The built-in filesystem storage class"
msgstr ""

#: ../../topics/files.txt:150
# 2e6c03bac8ca452088e9af5bf2c77ab8
msgid "Django ships with a built-in ``FileSystemStorage`` class (defined in ``django.core.files.storage``) which implements basic local filesystem file storage. Its initializer takes two arguments:"
msgstr ""

#: ../../topics/files.txt:155
# 9a88b1e0b5874ab8abd96a2ba66c716b
msgid "Argument"
msgstr ""

#: ../../topics/files.txt:155
# fcd5a47afad24db19fc0ec4e797c87b2
msgid "Description"
msgstr ""

#: ../../topics/files.txt:157
# eaecc345070348878627cbbd08d0c8ce
msgid "``location``"
msgstr ""

#: ../../topics/files.txt:157
# 1fcdfd008c5d4067b5e1e683c8cea590
msgid "Optional. Absolute path to the directory that will hold the files. If omitted, it will be set to the value of your :setting:`MEDIA_ROOT` setting."
msgstr ""

#: ../../topics/files.txt:160
# e76c0eb06a4f466386601a071055b143
msgid "``base_url``"
msgstr ""

#: ../../topics/files.txt:160
# 0cecbae48b5a4f2cad2af7ad0179cc1e
msgid "Optional. URL that serves the files stored at this location. If omitted, it will default to the value of your :setting:`MEDIA_URL` setting."
msgstr ""

#: ../../topics/files.txt:165
# 1e9511afda7a464b8c6327cc9b0ee95a
msgid "For example, the following code will store uploaded files under ``/media/photos`` regardless of what your :setting:`MEDIA_ROOT` setting is::"
msgstr ""

#: ../../topics/files.txt:177
# 743d6e7b58194502b60c5c75b5a034b8
msgid ":doc:`Custom storage systems </howto/custom-file-storage>` work the same way: you can pass them in as the ``storage`` argument to a :class:`~django.db.models.FileField`."
msgstr ""

#: ../../topics/forms/formsets.txt:4
# 413c9ea727f24787bb6562c9d29b89cd
msgid "Formsets"
msgstr ""

#: ../../topics/forms/formsets.txt:8
# 2d1ad252d85747d68e5af8830e4b974b
msgid "A formset is a layer of abstraction to working with multiple forms on the same page. It can be best compared to a data grid. Let's say you have the following form::"
msgstr ""

#: ../../topics/forms/formsets.txt:17
# 0f7a661ec705480595702b598f3d0fc4
msgid "You might want to allow the user to create several articles at once. To create a formset out of an ``ArticleForm`` you would do::"
msgstr ""

#: ../../topics/forms/formsets.txt:23
# b0842f48af5f457fa45c9431ffd0c3fb
msgid "You now have created a formset named ``ArticleFormSet``. The formset gives you the ability to iterate over the forms in the formset and display them as you would with a regular form::"
msgstr ""

#: ../../topics/forms/formsets.txt:33
# 38d2b9f7d03f40f9b5a92673ef76eb66
msgid "As you can see it only displayed one empty form. The number of empty forms that is displayed is controlled by the ``extra`` parameter. By default, ``formset_factory`` defines one extra form; the following example will display two blank forms::"
msgstr ""

#: ../../topics/forms/formsets.txt:40
# 4a5193a6a4dc499eadcae701e8ffbbf7
msgid "Iterating over the ``formset`` will render the forms in the order they were created. You can change this order by providing an alternate implementation for the ``__iter__()`` method."
msgstr ""

#: ../../topics/forms/formsets.txt:44
# 49a364853909483581758defa5dc2393
msgid "Formsets can also be indexed into, which returns the corresponding form. If you override ``__iter__``, you will need to also override ``__getitem__`` to have matching behavior."
msgstr ""

#: ../../topics/forms/formsets.txt:51
# 7c0a1889da2b4889a1474287f6e58a38
msgid "Using initial data with a formset"
msgstr ""

#: ../../topics/forms/formsets.txt:53
# b6869e96123345afa36f80cee5a7aebb
msgid "Initial data is what drives the main usability of a formset. As shown above you can define the number of extra forms. What this means is that you are telling the formset how many additional forms to show in addition to the number of forms it generates from the initial data. Lets take a look at an example::"
msgstr ""

#: ../../topics/forms/formsets.txt:74
# 7e5818eb86d6429698d44323a665ccaf
msgid "There are now a total of three forms showing above. One for the initial data that was passed in and two extra forms. Also note that we are passing in a list of dictionaries as the initial data."
msgstr ""

#: ../../topics/forms/formsets.txt:80
# a7dc211f5a0442e0b921eaa58a978929
msgid ":ref:`Creating formsets from models with model formsets <model-formsets>`."
msgstr ""

#: ../../topics/forms/formsets.txt:85
# c738df7c376c48d6b7b6bd6a31a42794
msgid "Limiting the maximum number of forms"
msgstr ""

#: ../../topics/forms/formsets.txt:87
# eb960e89a96244b4b29681b7bcec019e
msgid "The ``max_num`` parameter to ``formset_factory`` gives you the ability to limit the maximum number of empty forms the formset will display::"
msgstr ""

#: ../../topics/forms/formsets.txt:97
# 26869178563a44ae830e58fbea09dd8f
msgid "If the value of ``max_num`` is greater than the number of existing objects, up to ``extra`` additional blank forms will be added to the formset, so long as the total number of forms does not exceed ``max_num``."
msgstr ""

#: ../../topics/forms/formsets.txt:101
#: ../../topics/forms/modelforms.txt:730
# 3715be95337f4e4b847cd69fdff4efc1
# 84ec559234fc4c4195678d5453dbaab3
msgid "A ``max_num`` value of ``None`` (the default) puts a high limit on the number of forms displayed (1000). In practice this is equivalent to no limit."
msgstr ""

#: ../../topics/forms/formsets.txt:105
# cb1fc5eb0e8b410da23de40e5637525f
msgid "Formset validation"
msgstr ""

#: ../../topics/forms/formsets.txt:107
# 9572d4b771394f98835e627098e69e48
msgid "Validation with a formset is almost identical to a regular ``Form``. There is an ``is_valid`` method on the formset to provide a convenient way to validate all forms in the formset::"
msgstr ""

#: ../../topics/forms/formsets.txt:121
# fd85f3bf81c245009f12bb87c592eff9
msgid "We passed in no data to the formset which is resulting in a valid form. The formset is smart enough to ignore extra forms that were not changed. If we provide an invalid article::"
msgstr ""

#: ../../topics/forms/formsets.txt:140
# ce575af23fdd4a95b0b10e767b14f8ef
msgid "As we can see, ``formset.errors`` is a list whose entries correspond to the forms in the formset. Validation was performed for each of the two forms, and the expected error message appears for the second item."
msgstr ""

#: ../../topics/forms/formsets.txt:146
# 94f2ef11a2844e5ea54951a501830c4b
msgid "We can also check if form data differs from the initial data (i.e. the form was sent without any data)::"
msgstr ""

#: ../../topics/forms/formsets.txt:163
# b4d51d76508c459c86b512f6cb765c96
msgid "Understanding the ManagementForm"
msgstr ""

#: ../../topics/forms/formsets.txt:165
# c86ad454b31141188c2260c4d7b48950
msgid "You may have noticed the additional data (``form-TOTAL_FORMS``, ``form-INITIAL_FORMS`` and ``form-MAX_NUM_FORMS``) that was required in the formset's data above. This data is required for the ``ManagementForm``. This form is used by the formset to manage the collection of forms contained in the formset. If you don't provide this management data, an exception will be raised::"
msgstr ""

#: ../../topics/forms/formsets.txt:181
# 528b02a6294244cfbc742c5cb34c36b0
msgid "It is used to keep track of how many form instances are being displayed. If you are adding new forms via JavaScript, you should increment the count fields in this form as well. On the other hand, if you are using JavaScript to allow deletion of existing objects, then you need to ensure the ones being removed are properly marked for deletion by including ``form-#-DELETE`` in the ``POST`` data. It is expected that all forms are present in the ``POST`` data regardless."
msgstr ""

#: ../../topics/forms/formsets.txt:188
# d90685b1fdab400e9d2e3edd6906660d
msgid "The management form is available as an attribute of the formset itself. When rendering a formset in a template, you can include all the management data by rendering ``{{ my_formset.management_form }}`` (substituting the name of your formset as appropriate)."
msgstr ""

#: ../../topics/forms/formsets.txt:194
# 7ce1ee5cd4e14913b6b0a369b8cdc031
msgid "``total_form_count`` and ``initial_form_count``"
msgstr ""

#: ../../topics/forms/formsets.txt:196
# c315f76ec3aa4a37bb173ddbbd1f4e72
msgid "``BaseFormSet`` has a couple of methods that are closely related to the ``ManagementForm``, ``total_form_count`` and ``initial_form_count``."
msgstr ""

#: ../../topics/forms/formsets.txt:199
# e3ba915fd7b14cbfa9817484b939f2ec
msgid "``total_form_count`` returns the total number of forms in this formset. ``initial_form_count`` returns the number of forms in the formset that were pre-filled, and is also used to determine how many forms are required. You will probably never need to override either of these methods, so please be sure you understand what they do before doing so."
msgstr ""

#: ../../topics/forms/formsets.txt:206
# de41c53cf8b5495a98fb16a59c64ad18
msgid "``empty_form``"
msgstr ""

#: ../../topics/forms/formsets.txt:208
# 39e5ade6c973496ab452af720ea0697a
msgid "``BaseFormSet`` provides an additional attribute ``empty_form`` which returns a form instance with a prefix of ``__prefix__`` for easier use in dynamic forms with JavaScript."
msgstr ""

#: ../../topics/forms/formsets.txt:213
# 6597d3ac9eb14d7bb070e977e620066a
msgid "Custom formset validation"
msgstr ""

#: ../../topics/forms/formsets.txt:215
# 9ad2d51f35cd4774bcab06cb255a8b9f
msgid "A formset has a ``clean`` method similar to the one on a ``Form`` class. This is where you define your own validation that works at the formset level::"
msgstr ""

#: ../../topics/forms/formsets.txt:252
# c11796ac57854e73be30da0b4c88d03f
msgid "The formset ``clean`` method is called after all the ``Form.clean`` methods have been called. The errors will be found using the ``non_form_errors()`` method on the formset."
msgstr ""

#: ../../topics/forms/formsets.txt:257
# 53814e71c4e646ebaa9c5bb609c1b729
msgid "Dealing with ordering and deletion of forms"
msgstr ""

#: ../../topics/forms/formsets.txt:259
# 131e31d961ed42bebeb4665744a844f4
msgid "Common use cases with a formset is dealing with ordering and deletion of the form instances. This has been dealt with for you. The ``formset_factory`` provides two optional parameters ``can_order`` and ``can_delete`` that will do the extra work of adding the extra fields and providing simpler ways of getting to that data."
msgstr ""

#: ../../topics/forms/formsets.txt:266
# 8a4e114df8094ae294c12a9d30e0972e
msgid "``can_order``"
msgstr ""

#: ../../topics/forms/formsets.txt:268
#: ../../topics/forms/formsets.txt:324
#: ../../topics/http/sessions.txt:598
#: ../../topics/http/sessions.txt:607
#: ../../topics/http/sessions.txt:615
# be0474c053784e308bd65ecd513f6766
# 73d69d6182c046c1b87dd8533782235e
# 95030558cff94dd2bc36b56e15e1ec95
# ef0118f43ed343d5ab0323adf45aa6a9
# 6b5b7df18d5346c2a2e7c41980da1b89
msgid "Default: ``False``"
msgstr ""

#: ../../topics/forms/formsets.txt:270
# abb984d86a80424b86b6fb762ced37ca
msgid "Lets you create a formset with the ability to order::"
msgstr ""

#: ../../topics/forms/formsets.txt:289
# 9bcf0d049d094527aa915af6ff90f2da
msgid "This adds an additional field to each form. This new field is named ``ORDER`` and is an ``forms.IntegerField``. For the forms that came from the initial data it automatically assigned them a numeric value. Let's look at what will happen when the user changes these values::"
msgstr ""

#: ../../topics/forms/formsets.txt:322
# e42b2b7ecace4283aeaf7781544cc733
msgid "``can_delete``"
msgstr ""

#: ../../topics/forms/formsets.txt:326
# 3e9ae81bfc2a405cb76885aec4f22485
msgid "Lets you create a formset with the ability to delete::"
msgstr ""

#: ../../topics/forms/formsets.txt:346
# 45a7a494d7034b02ab27a66cc89ceca7
msgid "Similar to ``can_order`` this adds a new field to each form named ``DELETE`` and is a ``forms.BooleanField``. When data comes through marking any of the delete fields you can access them with ``deleted_forms``::"
msgstr ""

#: ../../topics/forms/formsets.txt:373
# fabbe1b76838439696bcd6183a06a97a
msgid "Adding additional fields to a formset"
msgstr ""

#: ../../topics/forms/formsets.txt:375
# 4efc11f2f62f41719f976e6848dd488d
msgid "If you need to add additional fields to the formset this can be easily accomplished. The formset base class provides an ``add_fields`` method. You can simply override this method to add your own fields or even redefine the default fields/attributes of the order and deletion fields::"
msgstr ""

#: ../../topics/forms/formsets.txt:394
# 6487b1c244fc48cb8a5a6869dc5d898a
msgid "Using a formset in views and templates"
msgstr ""

#: ../../topics/forms/formsets.txt:396
# d4dbd448fa854959b2947cf2abedeab7
msgid "Using a formset inside a view is as easy as using a regular ``Form`` class. The only thing you will want to be aware of is making sure to use the management form inside the template. Let's look at a sample view:"
msgstr ""

#: ../../topics/forms/formsets.txt:413
# ee409d9cc3164614ba508e34c2e53450
msgid "The ``manage_articles.html`` template might look like this:"
msgstr ""

#: ../../topics/forms/formsets.txt:426
# 2a4a33facc5243e084ef295a58eaa4b0
msgid "However the above can be slightly shortcutted and let the formset itself deal with the management form:"
msgstr ""

#: ../../topics/forms/formsets.txt:437
# eda42f3ec8e04ee1b656815eb6669a72
msgid "The above ends up calling the ``as_table`` method on the formset class."
msgstr ""

#: ../../topics/forms/formsets.txt:442
# 69316ecfc5da40e9ba67938f91846bdb
msgid "Manually rendered ``can_delete`` and ``can_order``"
msgstr ""

#: ../../topics/forms/formsets.txt:444
# 46d5f37b9dc04d99a3fe5b99c5f2e5ef
msgid "If you manually render fields in the template, you can render ``can_delete`` parameter with ``{{ form.DELETE }}``:"
msgstr ""

#: ../../topics/forms/formsets.txt:463
# 7c6eb32ddc164b769bd7277b66353c9d
msgid "Similarly, if the formset has the ability to order (``can_order=True``), it is possible to render it with ``{{ form.ORDER }}``."
msgstr ""

#: ../../topics/forms/formsets.txt:467
# 0a84022d16cd4dd48999f36ac7828654
msgid "Using more than one formset in a view"
msgstr ""

#: ../../topics/forms/formsets.txt:469
# dedb803b70ef4b1484ddbd88ff96b2ae
msgid "You are able to use more than one formset in a view if you like. Formsets borrow much of its behavior from forms. With that said you are able to use ``prefix`` to prefix formset form field names with a given value to allow more than one formset to be sent to a view without name clashing. Lets take a look at how this might be accomplished:"
msgstr ""

#: ../../topics/forms/formsets.txt:494
# 694d9918e368420093a10939014cf87b
msgid "You would then render the formsets as normal. It is important to point out that you need to pass ``prefix`` on both the POST and non-POST cases so that it is rendered and processed correctly."
msgstr ""

#: ../../topics/forms/index.txt:3
# 3b8c992840484957b2bd70ff93b1efa9
msgid "Working with forms"
msgstr ""

#: ../../topics/forms/index.txt:7
# 38669e79620a4ce9a3986dbff2abc748
msgid "This document provides an introduction to Django's form handling features. For a more detailed look at specific areas of the forms API, see :doc:`/ref/forms/api`, :doc:`/ref/forms/fields`, and :doc:`/ref/forms/validation`."
msgstr ""

#: ../../topics/forms/index.txt:14
# 5bc9de271f1e4c15a1bb9585e0dd0084
msgid "``django.forms`` is Django's form-handling library."
msgstr ""

#: ../../topics/forms/index.txt:16
# eed5780745bb4d9a8e1f6f548f99c920
msgid "While it is possible to process form submissions just using Django's :class:`~django.http.HttpRequest` class, using the form library takes care of a number of common form-related tasks. Using it, you can:"
msgstr ""

#: ../../topics/forms/index.txt:20
# 58230f7fe8934bc88fb3e29447240930
msgid "Display an HTML form with automatically generated form widgets."
msgstr ""

#: ../../topics/forms/index.txt:21
# 51b7025330924ee39c83400e77d2a9d8
msgid "Check submitted data against a set of validation rules."
msgstr ""

#: ../../topics/forms/index.txt:22
# 9ea412e323cf45fc8acb26d7867505df
msgid "Redisplay a form in the case of validation errors."
msgstr ""

#: ../../topics/forms/index.txt:23
# b363b61c4b4a4229afb77ebfa6b90ee1
msgid "Convert submitted form data to the relevant Python data types."
msgstr ""

#: ../../topics/forms/index.txt:28
# 7daea32d468a4566b42248f30248ac5b
msgid "The library deals with these concepts:"
msgstr ""

#: ../../topics/forms/index.txt:33
# 3f5060942022425daaec4fb0d0d2b524
msgid "A class that corresponds to an HTML form widget, e.g. ``<input type=\"text\">`` or ``<textarea>``. This handles rendering of the widget as HTML."
msgstr ""

#: ../../topics/forms/index.txt:38
# ef3309e63307489f8daac90a6062bcf9
msgid "A class that is responsible for doing validation, e.g. an ``EmailField`` that makes sure its data is a valid email address."
msgstr ""

#: ../../topics/forms/index.txt:42
# 75c188d29519497e99721c6f427c0453
msgid "A collection of fields that knows how to validate itself and display itself as HTML."
msgstr ""

#: ../../topics/forms/index.txt:46
# 72a183d9d7b94cf7ac13a120455deffc
msgid "The CSS and JavaScript resources that are required to render a form."
msgstr ""

#: ../../topics/forms/index.txt:48
# 006b5117594e4e17a0cf89c2c82f91d3
msgid "The library is decoupled from the other Django components, such as the database layer, views and templates. It relies only on Django settings, a couple of ``django.utils`` helper functions and Django's internationalization hooks (but you're not required to be using internationalization features to use this library)."
msgstr ""

#: ../../topics/forms/index.txt:55
# e978065836f54ac9a3eab6cba98dfe51
msgid "Form objects"
msgstr ""

#: ../../topics/forms/index.txt:57
# 95cff50ad3d94e17be52c6899200e368
msgid "A Form object encapsulates a sequence of form fields and a collection of validation rules that must be fulfilled in order for the form to be accepted. Form classes are created as subclasses of ``django.forms.Form`` and make use of a declarative style that you'll be familiar with if you've used Django's database models."
msgstr ""

#: ../../topics/forms/index.txt:63
# 0a5026b2ba544edb948b30370d124580
msgid "For example, consider a form used to implement \"contact me\" functionality on a personal Web site:"
msgstr ""

#: ../../topics/forms/index.txt:76
# 8b59a20f10c14712aa70e3b9c3e1aa48
msgid "A form is composed of ``Field`` objects. In this case, our form has four fields: ``subject``, ``message``, ``sender`` and ``cc_myself``. ``CharField``, ``EmailField`` and ``BooleanField`` are just three of the available field types; a full list can be found in :doc:`/ref/forms/fields`."
msgstr ""

#: ../../topics/forms/index.txt:81
# aa218c65e3c6468790122e51bb733ddf
msgid "If your form is going to be used to directly add or edit a Django model, you can use a :doc:`ModelForm </topics/forms/modelforms>` to avoid duplicating your model description."
msgstr ""

#: ../../topics/forms/index.txt:88
# 7c128fd32de0442faafeea5ab818ef2f
msgid "Using a form in a view"
msgstr ""

#: ../../topics/forms/index.txt:90
# 776a74cafd3c44e9b38f94474371c560
msgid "The standard pattern for processing a form in a view looks like this:"
msgstr ""

#: ../../topics/forms/index.txt:112
# 592b32ad30944beaa9cdeb6cca3c2f7f
msgid "There are three possible code paths here:"
msgstr ""

#: ../../topics/forms/index.txt:115
# 6a61986242bd4b9195e515637d4003a4
msgid "Form submitted?"
msgstr ""

#: ../../topics/forms/index.txt:115
# 370a1869f88b446b83cd7057a91c4faf
msgid "Data?"
msgstr ""

#: ../../topics/forms/index.txt:115
# a872dd261c0f448dbb4e61b26c681c99
msgid "What occurs"
msgstr ""

#: ../../topics/forms/index.txt:117
# b97886efe48f4bdebfaf5e9f561dc77f
msgid "Unsubmitted"
msgstr ""

#: ../../topics/forms/index.txt:117
# 228f760c102845159a02313f44dbdede
msgid "None yet"
msgstr ""

#: ../../topics/forms/index.txt:117
# 0638c1ea49c94918bc4843eac1a37537
msgid "Template gets passed unbound instance of ContactForm."
msgstr ""

#: ../../topics/forms/index.txt:120
#: ../../topics/forms/index.txt:123
# 2f4deaca68384dde806c31ad21de4b1c
# 93fa8463cb274e69b2df071e888c9ff5
msgid "Submitted"
msgstr ""

#: ../../topics/forms/index.txt:120
# 34878bab1088417fba84560788b00b96
msgid "Invalid data"
msgstr ""

#: ../../topics/forms/index.txt:120
# c73432857dff43f0ba179c4917cb183b
msgid "Template gets passed bound instance of ContactForm."
msgstr ""

#: ../../topics/forms/index.txt:123
# 1c3222c0078d49caa9f20cd93c4cdab3
msgid "Valid data"
msgstr ""

#: ../../topics/forms/index.txt:123
# a590d582d6ac46838b3f5bbf177e0343
msgid "Valid data is processed. Redirect to a \"thanks\" page."
msgstr ""

#: ../../topics/forms/index.txt:127
# 06d6a7df264e4bdf84f636fc3f145b10
msgid "The distinction between :ref:`ref-forms-api-bound-unbound` is important:"
msgstr ""

#: ../../topics/forms/index.txt:129
# 4ce2bf575ef34092997ddd6ee2c87adc
msgid "An unbound form has no data associated with it. When rendered to the user, it will be empty or will contain default values."
msgstr ""

#: ../../topics/forms/index.txt:132
# f06e64dbab634759b9a766599126d0ff
msgid "A bound form has submitted data, and hence can be used to tell if that data is valid. If an invalid bound form is rendered, it can include inline error messages telling the user what data to correct."
msgstr ""

#: ../../topics/forms/index.txt:137
# cfa98e599ba44f84859be049ff0f50b5
msgid "Handling file uploads with a form"
msgstr ""

#: ../../topics/forms/index.txt:139
# 9c40c0f691194f3e99005fa0de0fd482
msgid "To see how to handle file uploads with your form, see :ref:`binding-uploaded-files`."
msgstr ""

#: ../../topics/forms/index.txt:143
# fa661644cb514f1c8420b323bb6d4357
msgid "Processing the data from a form"
msgstr ""

#: ../../topics/forms/index.txt:145
# 27c1e62083204306a9203759355a6c6f
msgid "Once ``is_valid()`` returns ``True``, the successfully validated form data will be in the ``form.cleaned_data`` dictionary. This data will have been converted nicely into Python types for you."
msgstr ""

#: ../../topics/forms/index.txt:151
# 07164575ee5a469884a0e65477f248f4
msgid "You can still access the unvalidated data directly from ``request.POST`` at this point, but the validated data is better."
msgstr ""

#: ../../topics/forms/index.txt:154
# 904ef16bc9a24e44b5c340757bb1ff63
msgid "In the above example, ``cc_myself`` will be a boolean value. Likewise, fields such as ``IntegerField`` and ``FloatField`` convert values to a Python int and float respectively."
msgstr ""

#: ../../topics/forms/index.txt:158
# 96337b14640c4e3d979b54690e4207f1
msgid "Read-only fields are not available in ``form.cleaned_data`` (and setting a value in a custom ``clean()`` method won't have any effect). These fields are displayed as text rather than as input elements, and thus are not posted back to the server."
msgstr ""

#: ../../topics/forms/index.txt:163
# 04ba589f199f4d5696e73d8f8adf674f
msgid "Extending the earlier example, here's how the form data could be processed:"
msgstr ""

#: ../../topics/forms/index.txt:183
# b53200979f6e4fb588d493571560e12b
msgid "For more on sending email from Django, see :doc:`/topics/email`."
msgstr ""

#: ../../topics/forms/index.txt:186
# 54f4eddcec83446a905c21fdd6fc7edb
msgid "Displaying a form using a template"
msgstr ""

#: ../../topics/forms/index.txt:188
# 947c40dd19e44a05b7963c9746fc8e86
msgid "Forms are designed to work with the Django template language. In the above example, we passed our ``ContactForm`` instance to the template using the context variable ``form``. Here's a simple example template::"
msgstr ""

#: ../../topics/forms/index.txt:197
# 6df13de6700d4f17812260402b1e7dbc
msgid "The form only outputs its own fields; it is up to you to provide the surrounding ``<form>`` tags and the submit button."
msgstr ""

#: ../../topics/forms/index.txt:200
# 7fa6866c213b4b5cac31fee7f82c3261
msgid "If your form includes uploaded files, be sure to include ``enctype=\"multipart/form-data\"`` in the ``form`` element. If you wish to write a generic template that will work whether or not the form has files, you can use the :meth:`~django.forms.Form.is_multipart` attribute on the form::"
msgstr ""

#: ../../topics/forms/index.txt:210
# 817908f716f54b61b3c646767738c9e7
msgid "Django ships with an easy-to-use :doc:`protection against Cross Site Request Forgeries </ref/contrib/csrf>`. When submitting a form via POST with CSRF protection enabled you must use the :ttag:`csrf_token` template tag as in the preceding example. However, since CSRF protection is not directly tied to forms in templates, this tag is omitted from the following examples in this document."
msgstr ""

#: ../../topics/forms/index.txt:217
# 31f616fe83064980a3c5c6fb28bfe068
msgid "``form.as_p`` will output the form with each form field and accompanying label wrapped in a paragraph. Here's the output for our example template::"
msgstr ""

#: ../../topics/forms/index.txt:232
# 0fddaaa38ef84b7b947f8567e9bde0b4
msgid "Note that each form field has an ID attribute set to ``id_<field-name>``, which is referenced by the accompanying label tag. This is important for ensuring forms are accessible to assistive technology such as screen reader software. You can also :ref:`customize the way in which labels and ids are generated <ref-forms-api-configuring-label>`."
msgstr ""

#: ../../topics/forms/index.txt:238
# 757c6b11e9c14e0595a71e62ade14012
msgid "You can also use ``form.as_table`` to output table rows (you'll need to provide your own ``<table>`` tags) and ``form.as_ul`` to output list items."
msgstr ""

#: ../../topics/forms/index.txt:242
# bb6c916c58d84b3a965a283569c991cc
msgid "Customizing the form template"
msgstr ""

#: ../../topics/forms/index.txt:244
# 9d1af086bca54209834dcd0c90da134f
msgid "If the default generated HTML is not to your taste, you can completely customize the way a form is presented using the Django template language. Extending the above example::"
msgstr ""

#: ../../topics/forms/index.txt:273
# 1af3a95c39d642ef8d7dee836c6ad0b6
msgid "Each named form-field can be output to the template using ``{{ form.name_of_field }}``, which will produce the HTML needed to display the form widget. Using ``{{ form.name_of_field.errors }}`` displays a list of form errors, rendered as an unordered list. This might look like::"
msgstr ""

#: ../../topics/forms/index.txt:282
# cb21d37ca90143558e8e82b32d0b367d
msgid "The list has a CSS class of ``errorlist`` to allow you to style its appearance. If you wish to further customize the display of errors you can do so by looping over them::"
msgstr ""

#: ../../topics/forms/index.txt:295
# 4ba4107a40b945c68704f1604c639456
msgid "Looping over the form's fields"
msgstr ""

#: ../../topics/forms/index.txt:297
# 6314d7fe7f904ab9b5e265bfccbfa9de
msgid "If you're using the same HTML for each of your form fields, you can reduce duplicate code by looping through each field in turn using a ``{% for %}`` loop::"
msgstr ""

#: ../../topics/forms/index.txt:311
# e62361b813554f679ee42de022059e86
msgid "Within this loop, ``{{ field }}`` is an instance of :class:`~django.forms.BoundField`. ``BoundField`` also has the following attributes, which can be useful in your templates:"
msgstr ""

#: ../../topics/forms/index.txt:316
# 3f6b48d87ad541ec81afda0baf77a260
msgid "The label of the field, e.g. ``Email address``."
msgstr ""

#: ../../topics/forms/index.txt:319
# 7bd1c045019f460faaf7b4e4b0dcdba0
msgid "The field's label wrapped in the appropriate HTML ``<label>`` tag, e.g. ``<label for=\"id_email\">Email address</label>``"
msgstr ""

#: ../../topics/forms/index.txt:323
# c0c55ddfa38c46c3b144c009e230fd0d
msgid "The value of the field. e.g ``someone@example.com``"
msgstr ""

#: ../../topics/forms/index.txt:326
# 53afa16d6c844dbd89400717bee385b7
msgid "The name of the field that will be used in the input element's name field. This takes the form prefix into account, if it has been set."
msgstr ""

#: ../../topics/forms/index.txt:330
# 74dbdebf72384740b87cebf03f9c81f2
msgid "Any help text that has been associated with the field."
msgstr ""

#: ../../topics/forms/index.txt:333
# 06cd844143db405790728cf1ac63362b
msgid "Outputs a ``<ul class=\"errorlist\">`` containing any validation errors corresponding to this field. You can customize the presentation of the errors with a ``{% for error in field.errors %}`` loop. In this case, each object in the loop is a simple string containing the error message."
msgstr ""

#: ../../topics/forms/index.txt:340
# cf86783e83934b419b245cf4684324a8
msgid "This attribute is ``True`` if the form field is a hidden field and ``False`` otherwise. It's not particularly useful as a template variable, but could be useful in conditional tests such as::"
msgstr ""

#: ../../topics/forms/index.txt:349
# ee67cff8b92d4c109953ef757ff3deb8
msgid "The :class:`~django.forms.Field` instance from the form class that this :class:`~django.forms.BoundField` wraps. You can use it to access :class:`~django.forms.Field` attributes , e.g. ``{{ char_field.field.max_length }}``."
msgstr ""

#: ../../topics/forms/index.txt:355
# b7b29e0d318949cbb0aecf26f5c921cc
msgid "Looping over hidden and visible fields"
msgstr ""

#: ../../topics/forms/index.txt:357
# b1cd5270702e4268a8634abbb291b055
msgid "If you're manually laying out a form in a template, as opposed to relying on Django's default form layout, you might want to treat ``<input type=\"hidden\">`` fields differently than non-hidden fields. For example, because hidden fields don't display anything, putting error messages \"next to\" the field could cause confusion for your users -- so errors for those fields should be handled differently."
msgstr ""

#: ../../topics/forms/index.txt:364
# f9bd54ad8f644ce78874b94e1bd978d5
msgid "Django provides two methods on a form that allow you to loop over the hidden and visible fields independently: ``hidden_fields()`` and ``visible_fields()``. Here's a modification of an earlier example that uses these two methods::"
msgstr ""

#: ../../topics/forms/index.txt:384
# a13f74b6faa74cc4b64c81995c49ab42
msgid "This example does not handle any errors in the hidden fields. Usually, an error in a hidden field is a sign of form tampering, since normal form interaction won't alter them. However, you could easily insert some error displays for those form errors, as well."
msgstr ""

#: ../../topics/forms/index.txt:390
# d30928fd873e4b67aab4fa2ad8bd5ea3
msgid "Reusable form templates"
msgstr ""

#: ../../topics/forms/index.txt:392
# ae2fc338bfc8443dbbf3d5095d5cb54c
msgid "If your site uses the same rendering logic for forms in multiple places, you can reduce duplication by saving the form's loop in a standalone template and using the :ttag:`include` tag to reuse it in other templates::"
msgstr ""

#: ../../topics/forms/index.txt:410
# e62fbd8196c345a085ae4ae06ce0e245
msgid "If the form object passed to a template has a different name within the context, you can alias it using the ``with`` argument of the :ttag:`include` tag::"
msgstr ""

#: ../../topics/forms/index.txt:419
# ec7a8a5b113947e59511ace9674ffa40
msgid "If you find yourself doing this often, you might consider creating a custom :ref:`inclusion tag<howto-custom-template-tags-inclusion-tags>`."
msgstr ""

#: ../../topics/forms/index.txt:423
# a1ed2c984aaa42589a5e48c9caeee1a8
msgid "Further topics"
msgstr ""

#: ../../topics/forms/index.txt:425
# 347758c8f4034beeb0d5464978a9748d
msgid "This covers the basics, but forms can do a whole lot more:"
msgstr ""

#: ../../topics/forms/index.txt:437
# 94fd464d95d443dba622885e4913c4ec
msgid "Covers the full API reference, including form fields, form widgets, and form and field validation."
msgstr ""

#: ../../topics/forms/media.txt:2
# 374c003f11fc4295b98e92c1859ba490
msgid "Form Media"
msgstr ""

#: ../../topics/forms/media.txt:4
# 92772855b51946ccad5665d082bca4fb
msgid "Rendering an attractive and easy-to-use Web form requires more than just HTML - it also requires CSS stylesheets, and if you want to use fancy \"Web2.0\" widgets, you may also need to include some JavaScript on each page. The exact combination of CSS and JavaScript that is required for any given page will depend upon the widgets that are in use on that page."
msgstr ""

#: ../../topics/forms/media.txt:10
# 131c9cad327e46b2b69c9e20715155bb
msgid "This is where Django media definitions come in. Django allows you to associate different media files with the forms and widgets that require that media. For example, if you want to use a calendar to render DateFields, you can define a custom Calendar widget. This widget can then be associated with the CSS and JavaScript that is required to render the calendar. When the Calendar widget is used on a form, Django is able to identify the CSS and JavaScript files that are required, and provide the list of file names in a form suitable for easy inclusion on your Web page."
msgstr ""

#: ../../topics/forms/media.txt:21
# 1e6f9ad0f32c45208250d603b05c5f0e
msgid "The Django Admin application defines a number of customized widgets for calendars, filtered selections, and so on. These widgets define media requirements, and the Django Admin uses the custom widgets in place of the Django defaults. The Admin templates will only include those media files that are required to render the widgets on any given page."
msgstr ""

#: ../../topics/forms/media.txt:28
# 503cf00151c0486bab51e2a749ac3247
msgid "If you like the widgets that the Django Admin application uses, feel free to use them in your own application! They're all stored in ``django.contrib.admin.widgets``."
msgstr ""

#: ../../topics/forms/media.txt:34
# 487f73b048cf4747a1a385574bbbc770
msgid "Many JavaScript toolkits exist, and many of them include widgets (such as calendar widgets) that can be used to enhance your application. Django has deliberately avoided blessing any one JavaScript toolkit. Each toolkit has its own relative strengths and weaknesses - use whichever toolkit suits your requirements. Django is able to integrate with any JavaScript toolkit."
msgstr ""

#: ../../topics/forms/media.txt:44
# 183560f918d44ed2ae274edde9478eda
msgid "Media as a static definition"
msgstr ""

#: ../../topics/forms/media.txt:46
# 83766b9ae4be4568b286a0b39fff5b1c
msgid "The easiest way to define media is as a static definition. Using this method, the media declaration is an inner class. The properties of the inner class define the media requirements."
msgstr ""

#: ../../topics/forms/media.txt:50
# 26e4a3a462a3426b8364185baeeb96d6
msgid "Here's a simple example::"
msgstr ""

#: ../../topics/forms/media.txt:59
# c351d8f0955f449081fa4b4be78b38ad
msgid "This code defines a ``CalendarWidget``, which will be based on ``TextInput``. Every time the CalendarWidget is used on a form, that form will be directed to include the CSS file ``pretty.css``, and the JavaScript files ``animations.js`` and ``actions.js``."
msgstr ""

#: ../../topics/forms/media.txt:64
# 309320e0f9324f2692dc8fe438779dea
msgid "This static media definition is converted at runtime into a widget property named ``media``. The media for a CalendarWidget instance can be retrieved through this property::"
msgstr ""

#: ../../topics/forms/media.txt:74
# 7107633f357c47fea226a5ff9f7be0c4
msgid "Here's a list of all possible ``Media`` options. There are no required options."
msgstr ""

#: ../../topics/forms/media.txt:77
# 5184d0bd4d044e9d95a29ab76c967d76
msgid "``css``"
msgstr ""

#: ../../topics/forms/media.txt:79
# 309edb140d914b4d994ddd709eac82da
msgid "A dictionary describing the CSS files required for various forms of output media."
msgstr ""

#: ../../topics/forms/media.txt:82
# 86aa4dc9846e44e784b99bfeeb4fe83b
msgid "The values in the dictionary should be a tuple/list of file names. See :ref:`the section on media paths <form-media-paths>` for details of how to specify paths to media files."
msgstr ""

#: ../../topics/forms/media.txt:86
# 0e7923acd22244849fc2890755fe36d8
msgid "The keys in the dictionary are the output media types. These are the same types accepted by CSS files in media declarations: 'all', 'aural', 'braille', 'embossed', 'handheld', 'print', 'projection', 'screen', 'tty' and 'tv'. If you need to have different stylesheets for different media types, provide a list of CSS files for each output medium. The following example would provide two CSS options -- one for the screen, and one for print::"
msgstr ""

#: ../../topics/forms/media.txt:99
# f36dac0b15b54f67b69c12b8f9168727
msgid "If a group of CSS files are appropriate for multiple output media types, the dictionary key can be a comma separated list of output media types. In the following example, TV's and projectors will have the same media requirements::"
msgstr ""

#: ../../topics/forms/media.txt:111
# ccd14ea0a068422cb9a863969261d98d
msgid "If this last CSS definition were to be rendered, it would become the following HTML::"
msgstr ""

#: ../../topics/forms/media.txt:118
# 1409290b88bb4396a311923780b6b2c6
msgid "``js``"
msgstr ""

#: ../../topics/forms/media.txt:120
# b4c3d9760e1d476ea8f2ca149c2f1358
msgid "A tuple describing the required JavaScript files. See :ref:`the section on media paths <form-media-paths>` for details of how to specify paths to media files."
msgstr ""

#: ../../topics/forms/media.txt:125
# 8dacf9a732544020a4a613178c384d16
msgid "``extend``"
msgstr ""

#: ../../topics/forms/media.txt:127
# a7e37671aaf8419f9672c0b66aa4781f
msgid "A boolean defining inheritance behavior for media declarations."
msgstr ""

#: ../../topics/forms/media.txt:129
# 20d9260a6a39483bb179163db619932b
msgid "By default, any object using a static media definition will inherit all the media associated with the parent widget. This occurs regardless of how the parent defines its media requirements. For example, if we were to extend our basic Calendar widget from the example above::"
msgstr ""

#: ../../topics/forms/media.txt:149
# 334cd5dc64d147208f93d5492c75b743
msgid "The FancyCalendar widget inherits all the media from it's parent widget. If you don't want media to be inherited in this way, add an ``extend=False`` declaration to the media declaration::"
msgstr ""

#: ../../topics/forms/media.txt:166
# 8b218c45aed0432895287149774bdb53
msgid "If you require even more control over media inheritance, define your media using a :ref:`dynamic property <dynamic-property>`. Dynamic properties give you complete control over which media files are inherited, and which are not."
msgstr ""

#: ../../topics/forms/media.txt:173
# 272cdcaa30eb4f3f99e8dedd689166ca
msgid "Media as a dynamic property"
msgstr ""

#: ../../topics/forms/media.txt:175
# eb38469fe656454fad9173539c5aca6e
msgid "If you need to perform some more sophisticated manipulation of media requirements, you can define the media property directly. This is done by defining a widget property that returns an instance of ``forms.Media``. The constructor for ``forms.Media`` accepts ``css`` and ``js`` keyword arguments in the same format as that used in a static media definition."
msgstr ""

#: ../../topics/forms/media.txt:181
# a79bc28c76514bc29f4b9747665f15e5
msgid "For example, the static media definition for our Calendar Widget could also be defined in a dynamic fashion::"
msgstr ""

#: ../../topics/forms/media.txt:190
# b78d216609b7443a8591f4723826a436
msgid "See the section on `Media objects`_ for more details on how to construct return values for dynamic media properties."
msgstr ""

#: ../../topics/forms/media.txt:196
# a8b76e491c1a474f89d59068c68cf078
msgid "Paths in media definitions"
msgstr ""

#: ../../topics/forms/media.txt:198
# 6a80095e07d74c6f868b0f85540b1de7
msgid "Paths used to specify media can be either relative or absolute. If a path starts with ``/``, ``http://`` or ``https://``, it will be interpreted as an absolute path, and left as-is. All other paths will be prepended with the value of the appropriate prefix."
msgstr ""

#: ../../topics/forms/media.txt:203
# a2cb7513381e4fc7a3ff24135b6da18b
msgid "As part of the introduction of the :doc:`staticfiles app </ref/contrib/staticfiles>` two new settings were added to refer to \"static files\" (images, CSS, Javascript, etc.) that are needed to render a complete web page: :setting:`STATIC_URL` and :setting:`STATIC_ROOT`."
msgstr ""

#: ../../topics/forms/media.txt:208
# 21ea692c3c14474a910c6a033b8f1082
msgid "To find the appropriate prefix to use, Django will check if the :setting:`STATIC_URL` setting is not ``None`` and automatically fall back to using :setting:`MEDIA_URL`. For example, if the :setting:`MEDIA_URL` for your site was ``'http://uploads.example.com/'`` and :setting:`STATIC_URL` was ``None``::"
msgstr ""

#: ../../topics/forms/media.txt:227
# 4e1b5c2bf4254a76862411993c04ecf6
msgid "But if :setting:`STATIC_URL` is ``'http://static.example.com/'``::"
msgstr ""

#: ../../topics/forms/media.txt:237
# b4bbf875ec1c44e0a3ee03c95c25c0ba
msgid "Media objects"
msgstr ""

#: ../../topics/forms/media.txt:239
# ff2a9f9f336b49b6a13e40827acfd543
msgid "When you interrogate the media attribute of a widget or form, the value that is returned is a ``forms.Media`` object. As we have already seen, the string representation of a Media object is the HTML required to include media in the ``<head>`` block of your HTML page."
msgstr ""

#: ../../topics/forms/media.txt:244
# f2763908f97845d88f65bdc9f47fc2f1
msgid "However, Media objects have some other interesting properties."
msgstr ""

#: ../../topics/forms/media.txt:247
# 8f817e2a511b4ed6b8e4c74809139fd0
msgid "Media subsets"
msgstr ""

#: ../../topics/forms/media.txt:249
# 50eea897e7504ed1a9cbc402afe50a46
msgid "If you only want media of a particular type, you can use the subscript operator to filter out a medium of interest. For example::"
msgstr ""

#: ../../topics/forms/media.txt:261
# 42820a44e43d4547bde4d948e84a9672
msgid "When you use the subscript operator, the value that is returned is a new Media object -- but one that only contains the media of interest."
msgstr ""

#: ../../topics/forms/media.txt:265
# c3d436e4a6f5474e9da9261db628e9c4
msgid "Combining media objects"
msgstr ""

#: ../../topics/forms/media.txt:267
# 3f4375eac43f469881be247cf71c06af
msgid "Media objects can also be added together. When two media objects are added, the resulting Media object contains the union of the media from both files::"
msgstr ""

#: ../../topics/forms/media.txt:290
# 59f0da4a59db4f1e8956433e7cd62438
msgid "Media on Forms"
msgstr ""

#: ../../topics/forms/media.txt:292
# 928e5f014d4945a38ceda0708cfde8fe
msgid "Widgets aren't the only objects that can have media definitions -- forms can also define media. The rules for media definitions on forms are the same as the rules for widgets: declarations can be static or dynamic; path and inheritance rules for those declarations are exactly the same."
msgstr ""

#: ../../topics/forms/media.txt:297
# a471461a2f654a239cffe3774c5bc129
msgid "Regardless of whether you define a media declaration, *all* Form objects have a media property. The default value for this property is the result of adding the media definitions for all widgets that are part of the form::"
msgstr ""

#: ../../topics/forms/media.txt:312
# 8b8c913885fe40e5a6d52d91438ec586
msgid "If you want to associate additional media with a form -- for example, CSS for form layout -- simply add a media declaration to the form::"
msgstr ""

#: ../../topics/forms/modelforms.txt:3
# adf42b4e4c0e43eb88f777fb4578fb97
msgid "Creating forms from models"
msgstr ""

#: ../../topics/forms/modelforms.txt:11
# 4e38b922041a4729b4d1487c66dfd071
msgid "``ModelForm``"
msgstr ""

#: ../../topics/forms/modelforms.txt:14
# dd14a786919943af93d9bc8d7982ae7c
msgid "If you're building a database-driven app, chances are you'll have forms that map closely to Django models. For instance, you might have a ``BlogComment`` model, and you want to create a form that lets people submit comments. In this case, it would be redundant to define the field types in your form, because you've already defined the fields in your model."
msgstr ""

#: ../../topics/forms/modelforms.txt:20
# 872d06048de24b148d476f5990611ed7
msgid "For this reason, Django provides a helper class that let you create a ``Form`` class from a Django model."
msgstr ""

#: ../../topics/forms/modelforms.txt:42
# 142405a8249f448ab93e11ed0e36fc9e
msgid "The generated ``Form`` class will have a form field for every model field. Each model field has a corresponding default form field. For example, a ``CharField`` on a model is represented as a ``CharField`` on a form. A model ``ManyToManyField`` is represented as a ``MultipleChoiceField``. Here is the full list of conversions:"
msgstr ""

#: ../../topics/forms/modelforms.txt:49
# 68f0d74a1db048d39b2edd0368054c29
msgid "Model field"
msgstr ""

#: ../../topics/forms/modelforms.txt:49
# e45adda5212448c8a8193ec302ea1f38
msgid "Form field"
msgstr ""

#: ../../topics/forms/modelforms.txt:51
# 43c1be38b33c4072bb0a14d1dcc45cb4
msgid "``AutoField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:51
# ea1f2f0154554d088acb6985bdcac0ec
msgid "Not represented in the form"
msgstr ""

#: ../../topics/forms/modelforms.txt:53
# 0fabf5a7dba04cab84e82e93bdce9967
msgid "``BigIntegerField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:53
# 4062b618290041c99ece665cc2c13927
msgid "``IntegerField`` with ``min_value`` set to -9223372036854775808 and ``max_value`` set to 9223372036854775807."
msgstr ""

#: ../../topics/forms/modelforms.txt:57
#: ../../topics/forms/modelforms.txt:57
# b25dd50ec28d440791bf22196eb020f5
# c62525614bb54f6783d527a37b8bb3f7
msgid "``BooleanField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:59
#: ../../topics/forms/modelforms.txt:62
#: ../../topics/forms/modelforms.txt:74
#: ../../topics/forms/modelforms.txt:91
# dc6d7136458e4e31ab34887615e923c5
# 79d7227b69254707ae22898def554dc8
# 4beae9a1423044d3bd782189bd4a6917
# b4e818be08da48b2881c7b876e71e8a4
msgid "``CharField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:59
# bdb280f8f214422ba3db2401b7eed834
msgid "``CharField`` with ``max_length`` set to the model field's ``max_length``"
msgstr ""

#: ../../topics/forms/modelforms.txt:62
# f7892b53690c49d8b0bedcb743701492
msgid "``CommaSeparatedIntegerField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:64
#: ../../topics/forms/modelforms.txt:64
# 21951dcbc2e846f39c2c57c77c96965b
# d3727135b94a4c9188bf2553641bec9b
msgid "``DateField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:66
#: ../../topics/forms/modelforms.txt:66
# 223a537998554ba8bd3a477828e75368
# 08fad91c52f64b96b784e2fb9c4f2dff
msgid "``DateTimeField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:68
#: ../../topics/forms/modelforms.txt:68
# 6720319ce2314f859e43c673b32fcde9
# 489fc23d3a484db3b84e619c0ce9a131
msgid "``DecimalField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:70
#: ../../topics/forms/modelforms.txt:70
# 5604349d6a3a4d538cd49487f1dc47c7
# feee4f8ee2d048c999aafd4de055284a
msgid "``EmailField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:72
#: ../../topics/forms/modelforms.txt:72
# c737f448eedf49c1a08adc483a023773
# 0d9d8f423c9c487aa57e7e70a6c0faf0
msgid "``FileField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:74
# 9384e8f2b28c4ec9af76f94c5b66ae5c
msgid "``FilePathField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:76
#: ../../topics/forms/modelforms.txt:76
# 9c2a413fc60c4363ac3a5794d3542da4
# 8e2434d0f1594f48b8dd0652c1032468
msgid "``FloatField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:78
# 93946c6337bd46e3b791ba70918a720b
msgid "``ForeignKey``"
msgstr ""

#: ../../topics/forms/modelforms.txt:78
# 413138b7b7b049f587a73b55d46ba3b7
msgid "``ModelChoiceField`` (see below)"
msgstr ""

#: ../../topics/forms/modelforms.txt:80
#: ../../topics/forms/modelforms.txt:80
# 6eb24cf1fddd48019c31a5d6020024de
# a75bd255ada54c7c818e646e49ab866e
msgid "``ImageField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:82
#: ../../topics/forms/modelforms.txt:82
#: ../../topics/forms/modelforms.txt:93
#: ../../topics/forms/modelforms.txt:95
#: ../../topics/forms/modelforms.txt:99
# ad22a0833d6241029ee01fb9e810d015
# 5077114fda974b3b996f4b11bcfd4890
# aca34744ce814ec8a9f613d00179edbe
# a2468def79b64c01bf4ed2d1010d4c64
# 14ddfd68bfdb46d7a6f1575060bf9053
msgid "``IntegerField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:84
#: ../../topics/forms/modelforms.txt:84
# 844b77039a1f4f4fbe2bb01ea2500078
# 1381e788c1eb44498895696a7287bc36
msgid "``IPAddressField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:86
#: ../../topics/forms/modelforms.txt:86
# 070835c07f73454788c576ff7647173e
# 9d4813e943484b81842700b9f7c07fd9
msgid "``GenericIPAddressField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:88
# cc4b7516455a4c8a93fd2edf2495a53d
msgid "``ManyToManyField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:88
# 9a4845abed724678ae4f69ca14b6f087
msgid "``ModelMultipleChoiceField`` (see below)"
msgstr ""

#: ../../topics/forms/modelforms.txt:91
# fcba4e1044854a9cac0f9c17ab7ab05a
msgid "``NullBooleanField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:93
# 07d2d145410c42e4ba25aca59d77a6a7
msgid "``PositiveIntegerField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:95
# 1f6502034fac4976b6148f7cf5febb62
msgid "``PositiveSmallIntegerField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:97
#: ../../topics/forms/modelforms.txt:97
# 00d123fee52e4a7cbc9f5185d61a041e
# eedc1e5b564f471c9d0c88274813a401
msgid "``SlugField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:99
# 508900b267b2494a9c536e288c74def7
msgid "``SmallIntegerField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:101
# 899ac2c6c9484f2aab3c28b53087d28c
msgid "``TextField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:101
# 94a8c8a26b124c11b8c5ba724928fb66
msgid "``CharField`` with ``widget=forms.Textarea``"
msgstr ""

#: ../../topics/forms/modelforms.txt:104
#: ../../topics/forms/modelforms.txt:104
# 37d9e632990b4c6685b76b62efe4c1d4
# b014258f9489409fab6f869f6f645680
msgid "``TimeField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:106
#: ../../topics/forms/modelforms.txt:106
# 42192aec64dc46539af60ba6aba82580
# 94c13fcdeff04f5281ec191c2e1c19e5
msgid "``URLField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:110
# f06b54be8c8a48caa890f4349bc8329e
msgid "As you might expect, the ``ForeignKey`` and ``ManyToManyField`` model field types are special cases:"
msgstr ""

#: ../../topics/forms/modelforms.txt:113
# aea1de42e13548eda301a89cae4863c8
msgid "``ForeignKey`` is represented by ``django.forms.ModelChoiceField``, which is a ``ChoiceField`` whose choices are a model ``QuerySet``."
msgstr ""

#: ../../topics/forms/modelforms.txt:116
# 21e220d989bd44308f62286151081ead
msgid "``ManyToManyField`` is represented by ``django.forms.ModelMultipleChoiceField``, which is a ``MultipleChoiceField`` whose choices are a model ``QuerySet``."
msgstr ""

#: ../../topics/forms/modelforms.txt:120
# af8d69987b84411eb20012bd53c01ec3
msgid "In addition, each generated form field has attributes set as follows:"
msgstr ""

#: ../../topics/forms/modelforms.txt:122
# 411a47e486344e418ffe236e8a5ef992
msgid "If the model field has ``blank=True``, then ``required`` is set to ``False`` on the form field. Otherwise, ``required=True``."
msgstr ""

#: ../../topics/forms/modelforms.txt:125
# bfd4ba7248984bab982863b988a820bf
msgid "The form field's ``label`` is set to the ``verbose_name`` of the model field, with the first character capitalized."
msgstr ""

#: ../../topics/forms/modelforms.txt:128
# 3ea0daf432554aafaf4a26355ddb470e
msgid "The form field's ``help_text`` is set to the ``help_text`` of the model field."
msgstr ""

#: ../../topics/forms/modelforms.txt:131
# 878fe36c1c33407bae7ba38bfe133e3d
msgid "If the model field has ``choices`` set, then the form field's ``widget`` will be set to ``Select``, with choices coming from the model field's ``choices``. The choices will normally include the blank choice which is selected by default. If the field is required, this forces the user to make a selection. The blank choice will not be included if the model field has ``blank=False`` and an explicit ``default`` value (the ``default`` value will be initially selected instead)."
msgstr ""

#: ../../topics/forms/modelforms.txt:139
# 888a0e923f774f0aa20f57078026bd51
msgid "Finally, note that you can override the form field used for a given model field. See `Overriding the default field types or widgets`_ below."
msgstr ""

#: ../../topics/forms/modelforms.txt:145
# c21dc21455a1438182623afdd727cb8c
msgid "Consider this set of models::"
msgstr ""

#: ../../topics/forms/modelforms.txt:176
# 40624b7db9d54e129872d63e9d22de32
msgid "With these models, the ``ModelForm`` subclasses above would be roughly equivalent to this (the only difference being the ``save()`` method, which we'll discuss in a moment.)::"
msgstr ""

#: ../../topics/forms/modelforms.txt:195
# 227f867f1fb944c2b84ed13c656c517e
msgid "The ``is_valid()`` method and ``errors``"
msgstr ""

#: ../../topics/forms/modelforms.txt:197
# 5c6acbd115884b43932ef7deb983b047
msgid "The first time you call ``is_valid()`` or access the ``errors`` attribute of a ``ModelForm`` triggers :ref:`form validation <form-and-field-validation>` as well as :ref:`model validation <validating-objects>`. This has the side-effect of cleaning the model you pass to the ``ModelForm`` constructor. For instance, calling ``is_valid()`` on your form will convert any date fields on your model to actual date objects. If form validation fails, only some of the updates may be applied. For this reason, you'll probably want to avoid reusing the model instance passed to the form, especially if validation fails."
msgstr ""

#: ../../topics/forms/modelforms.txt:208
# dfbd3897dced4950ac0a48f5ed2ed284
msgid "The ``save()`` method"
msgstr ""

#: ../../topics/forms/modelforms.txt:210
# c478757a4c2b4c658b9305df57c9ca29
msgid "Every form produced by ``ModelForm`` also has a ``save()`` method. This method creates and saves a database object from the data bound to the form. A subclass of ``ModelForm`` can accept an existing model instance as the keyword argument ``instance``; if this is supplied, ``save()`` will update that instance. If it's not supplied, ``save()`` will create a new instance of the specified model:"
msgstr ""

#: ../../topics/forms/modelforms.txt:231
# 3cfe56b85f154a759e5d1e3d7b110be1
msgid "Note that if the form :ref:`hasn't been validated <modelform-is-valid-and-errors>`, calling ``save()`` will do so by checking ``form.errors``. A ``ValueError`` will be raised if the data in the form doesn't validate -- i.e., if ``form.errors`` evaluates to ``True``."
msgstr ""

#: ../../topics/forms/modelforms.txt:236
# 689e2e06c2544cf9b8ce4726641ad7fa
msgid "This ``save()`` method accepts an optional ``commit`` keyword argument, which accepts either ``True`` or ``False``. If you call ``save()`` with ``commit=False``, then it will return an object that hasn't yet been saved to the database. In this case, it's up to you to call ``save()`` on the resulting model instance. This is useful if you want to do custom processing on the object before saving it, or if you want to use one of the specialized :ref:`model saving options <ref-models-force-insert>`. ``commit`` is ``True`` by default."
msgstr ""

#: ../../topics/forms/modelforms.txt:245
# cd328f869d32482da4f11e7356b582d1
msgid "Another side effect of using ``commit=False`` is seen when your model has a many-to-many relation with another model. If your model has a many-to-many relation and you specify ``commit=False`` when you save a form, Django cannot immediately save the form data for the many-to-many relation. This is because it isn't possible to save many-to-many data for an instance until the instance exists in the database."
msgstr ""

#: ../../topics/forms/modelforms.txt:252
# c67f091d06144301a0392230280821b4
msgid "To work around this problem, every time you save a form using ``commit=False``, Django adds a ``save_m2m()`` method to your ``ModelForm`` subclass. After you've manually saved the instance produced by the form, you can invoke ``save_m2m()`` to save the many-to-many form data. For example::"
msgstr ""

#: ../../topics/forms/modelforms.txt:272
# 095acbfd38c248d7bdef8066c7e616a7
msgid "Calling ``save_m2m()`` is only required if you use ``save(commit=False)``. When you use a simple ``save()`` on a form, all data -- including many-to-many data -- is saved without the need for any additional method calls. For example::"
msgstr ""

#: ../../topics/forms/modelforms.txt:284
# 9f76fa54685e4130b441a84713b40e34
msgid "Other than the ``save()`` and ``save_m2m()`` methods, a ``ModelForm`` works exactly the same way as any other ``forms`` form. For example, the ``is_valid()`` method is used to check for validity, the ``is_multipart()`` method is used to determine whether a form requires multipart file upload (and hence whether ``request.FILES`` must be passed to the form), etc. See :ref:`binding-uploaded-files` for more information."
msgstr ""

#: ../../topics/forms/modelforms.txt:292
# e5f684bb4c3340788becaad5d1a18f50
msgid "Using a subset of fields on the form"
msgstr ""

#: ../../topics/forms/modelforms.txt:294
# 11b66ba50cd7427fa2045b70e8edf9a3
msgid "In some cases, you may not want all the model fields to appear on the generated form. There are three ways of telling ``ModelForm`` to use only a subset of the model fields:"
msgstr ""

#: ../../topics/forms/modelforms.txt:298
# 46a92dddd8674fa0a7663f3f137f1533
msgid "Set ``editable=False`` on the model field. As a result, *any* form created from the model via ``ModelForm`` will not include that field."
msgstr ""

#: ../../topics/forms/modelforms.txt:302
# 3b8d99b1c8c34680955c9a7d72d1d3ee
msgid "Use the ``fields`` attribute of the ``ModelForm``'s inner ``Meta`` class.  This attribute, if given, should be a list of field names to include in the form. The order in which the fields names are specified in that list is respected when the form renders them."
msgstr ""

#: ../../topics/forms/modelforms.txt:307
# 11b2ac3380784355b414eda83f01d37e
msgid "Use the ``exclude`` attribute of the ``ModelForm``'s inner ``Meta`` class.  This attribute, if given, should be a list of field names to exclude from the form."
msgstr ""

#: ../../topics/forms/modelforms.txt:311
# ac7c9ecc0cfd4b6483cfcd03dfb856c0
msgid "For example, if you want a form for the ``Author`` model (defined above) that includes only the ``name`` and ``birth_date`` fields, you would specify ``fields`` or ``exclude`` like this::"
msgstr ""

#: ../../topics/forms/modelforms.txt:325
# 0535843a7e04453eaaba8d661e901d32
msgid "Since the Author model has only 3 fields, 'name', 'title', and 'birth_date', the forms above will contain exactly the same fields."
msgstr ""

#: ../../topics/forms/modelforms.txt:330
# 875a786ee13549828e0e05e0f7f5acf5
msgid "If you specify ``fields`` or ``exclude`` when creating a form with ``ModelForm``, then the fields that are not in the resulting form will not be set by the form's ``save()`` method. Also, if you manually add the excluded fields back to the form, they will not be initialized from the model instance."
msgstr ""

#: ../../topics/forms/modelforms.txt:336
# 30e961ab73de4317875e8893a888397a
msgid "Django will prevent any attempt to save an incomplete model, so if the model does not allow the missing fields to be empty, and does not provide a default value for the missing fields, any attempt to ``save()`` a ``ModelForm`` with missing fields will fail.  To avoid this failure, you must instantiate your model with initial values for the missing, but required fields::"
msgstr ""

#: ../../topics/forms/modelforms.txt:347
# 81bb57aafe5844fc999176001e058ed0
msgid "Alternatively, you can use ``save(commit=False)`` and manually set any extra required fields::"
msgstr ""

#: ../../topics/forms/modelforms.txt:355
# f4701e9737a14db6999dbace5ccda0a7
msgid "See the `section on saving forms`_ for more details on using ``save(commit=False)``."
msgstr ""

#: ../../topics/forms/modelforms.txt:361
# 7fe9793b66fc431198a43673f75e3fa6
msgid "Overriding the default field types or widgets"
msgstr ""

#: ../../topics/forms/modelforms.txt:363
# 73cb004e54ae4948ab8d5da5ca3faece
msgid "The default field types, as described in the `Field types`_ table above, are sensible defaults. If you have a ``DateField`` in your model, chances are you'd want that to be represented as a ``DateField`` in your form. But ``ModelForm`` gives you the flexibility of changing the form field type and widget for a given model field."
msgstr ""

#: ../../topics/forms/modelforms.txt:369
# bc7e73b7683b4b62b0aac6e6219d10d3
msgid "To specify a custom widget for a field, use the ``widgets`` attribute of the inner ``Meta`` class. This should be a dictionary mapping field names to widget classes or instances."
msgstr ""

#: ../../topics/forms/modelforms.txt:373
# 0874b5edfb70483692181279c0f8d00f
msgid "For example, if you want the a ``CharField`` for the ``name`` attribute of ``Author`` to be represented by a ``<textarea>`` instead of its default ``<input type=\"text\">``, you can override the field's widget::"
msgstr ""

#: ../../topics/forms/modelforms.txt:388
# ee106740dcf74dea9749974b1532d13b
msgid "The ``widgets`` dictionary accepts either widget instances (e.g., ``Textarea(...)``) or classes (e.g., ``Textarea``)."
msgstr ""

#: ../../topics/forms/modelforms.txt:391
# 5e8e5df190ed454c86332624121ae9d8
msgid "If you want to further customize a field -- including its type, label, etc. -- you can do this by declaratively specifying fields like you would in a regular ``Form``. Declared fields will override the default ones generated by using the ``model`` attribute."
msgstr ""

#: ../../topics/forms/modelforms.txt:396
# 4de5de9c123d436c9c61efdacf6194bb
msgid "For example, if you wanted to use ``MyDateFormField`` for the ``pub_date`` field, you could do the following::"
msgstr ""

#: ../../topics/forms/modelforms.txt:405
# cf242c1c4230405ca782066199aa9bdc
msgid "If you want to override a field's default label, then specify the ``label`` parameter when declaring the form field::"
msgstr ""

#: ../../topics/forms/modelforms.txt:416
# eb91bd4116fd4a329e43a2c7a5b4aa33
msgid "If you explicitly instantiate a form field like this, Django assumes that you want to completely define its behavior; therefore, default attributes (such as ``max_length`` or ``required``) are not drawn from the corresponding model. If you want to maintain the behavior specified in the model, you must set the relevant arguments explicitly when declaring the form field."
msgstr ""

#: ../../topics/forms/modelforms.txt:422
# f7c1ae8905f5414494744f6ecf3592d1
msgid "For example, if the ``Article`` model looks like this::"
msgstr ""

#: ../../topics/forms/modelforms.txt:429
# 38ba53afa07a4d8aa6f7671e83586820
msgid "and you want to do some custom validation for ``headline``, while keeping the ``blank`` and ``help_text`` values as specified, you might define ``ArticleForm`` like this::"
msgstr ""

#: ../../topics/forms/modelforms.txt:440
# 58c50df36e7c4883ac31e089c2cf7a47
msgid "You must ensure that the type of the form field can be used to set the contents of the corresponding model field. When they are not compatible, you will get a ``ValueError`` as no implicit conversion takes place."
msgstr ""

#: ../../topics/forms/modelforms.txt:444
# d3553927ea264ca58339b6a7eeda66e3
msgid "See the :doc:`form field documentation </ref/forms/fields>` for more information on fields and their arguments."
msgstr ""

#: ../../topics/forms/modelforms.txt:448
# 41e25c39c6b14c6f99db8c6992d9e59a
msgid "Changing the order of fields"
msgstr ""

#: ../../topics/forms/modelforms.txt:450
# b8fd71584f8b4edeb1d4cd44aa7dcef5
msgid "By default, a ``ModelForm`` will render fields in the same order that they are defined on the model, with ``ManyToManyField`` instances appearing last. If you want to change the order in which fields are rendered, you can use the ``fields`` attribute on the ``Meta`` class."
msgstr ""

#: ../../topics/forms/modelforms.txt:455
# a8def7f409a1453786611b7e08b2d1c9
msgid "The ``fields`` attribute defines the subset of model fields that will be rendered, and the order in which they will be rendered. For example given this model::"
msgstr ""

#: ../../topics/forms/modelforms.txt:463
# 30c7e069e71049579d9f8d8baa20afd7
msgid "the ``author`` field would be rendered first. If we wanted the title field to be rendered first, we could specify the following ``ModelForm``::"
msgstr ""

#: ../../topics/forms/modelforms.txt:474
# 03848b4121fc4582848b46ee4d2427ba
msgid "Overriding the clean() method"
msgstr ""

#: ../../topics/forms/modelforms.txt:476
# 481ed361e4d54372979b23acbeed4aea
msgid "You can override the ``clean()`` method on a model form to provide additional validation in the same way you can on a normal form."
msgstr ""

#: ../../topics/forms/modelforms.txt:479
# f158e916ec734acfb2675e647941c931
msgid "In this regard, model forms have two specific characteristics when compared to forms:"
msgstr ""

#: ../../topics/forms/modelforms.txt:482
# d30c9535628f4e898bb653345710f365
msgid "By default the ``clean()`` method validates the uniqueness of fields that are marked as ``unique``, ``unique_together`` or ``unique_for_date|month|year`` on the model.  Therefore, if you would like to override the ``clean()`` method and maintain the default validation, you must call the parent class's ``clean()`` method."
msgstr ""

#: ../../topics/forms/modelforms.txt:488
# 5cddd1de586f4e89a84eb5e3cd95896a
msgid "Also, a model form instance bound to a model object will contain a ``self.instance`` attribute that gives model form methods access to that specific model instance."
msgstr ""

#: ../../topics/forms/modelforms.txt:493
# 8a61e81180034ef38d287f752620d202
msgid "Form inheritance"
msgstr ""

#: ../../topics/forms/modelforms.txt:495
# 1e993c3c4ab047259b53f8715544c8e8
msgid "As with basic forms, you can extend and reuse ``ModelForms`` by inheriting them. This is useful if you need to declare extra fields or extra methods on a parent class for use in a number of forms derived from models. For example, using the previous ``ArticleForm`` class::"
msgstr ""

#: ../../topics/forms/modelforms.txt:504
# 618fa785376745639f5340274dc6999f
msgid "This creates a form that behaves identically to ``ArticleForm``, except there's some extra validation and cleaning for the ``pub_date`` field."
msgstr ""

#: ../../topics/forms/modelforms.txt:507
# 53d76265fbb9469f9026c04041e172f0
msgid "You can also subclass the parent's ``Meta`` inner class if you want to change the ``Meta.fields`` or ``Meta.excludes`` lists::"
msgstr ""

#: ../../topics/forms/modelforms.txt:514
# 4ae2c1b132554471b071ca8c8165851f
msgid "This adds the extra method from the ``EnhancedArticleForm`` and modifies the original ``ArticleForm.Meta`` to remove one field."
msgstr ""

#: ../../topics/forms/modelforms.txt:517
# 33a12b74bc904314920d23c132383116
msgid "There are a couple of things to note, however."
msgstr ""

#: ../../topics/forms/modelforms.txt:519
# 324602d275b14f64bc6d405d4b6b2159
msgid "Normal Python name resolution rules apply. If you have multiple base classes that declare a ``Meta`` inner class, only the first one will be used. This means the child's ``Meta``, if it exists, otherwise the ``Meta`` of the first parent, etc."
msgstr ""

#: ../../topics/forms/modelforms.txt:524
# 0c5f9b2796e0447a9fb949cf291652e0
msgid "For technical reasons, a subclass cannot inherit from both a ``ModelForm`` and a ``Form`` simultaneously."
msgstr ""

#: ../../topics/forms/modelforms.txt:527
# 521e910df931443aaed642068a4af7a9
msgid "Chances are these notes won't affect you unless you're trying to do something tricky with subclassing."
msgstr ""

#: ../../topics/forms/modelforms.txt:531
# c0d2ef59ccde40908aed25534f0869e8
msgid "Interaction with model validation"
msgstr ""

#: ../../topics/forms/modelforms.txt:533
# 6fc703d75ddd44be9127964dc7775da1
msgid "As part of its validation process, ``ModelForm`` will call the ``clean()`` method of each field on your model that has a corresponding field on your form. If you have excluded any model fields, validation will not be run on those fields. See the :doc:`form validation </ref/forms/validation>` documentation for more on how field cleaning and validation work. Also, your model's ``clean()`` method will be called before any uniqueness checks are made. See :ref:`Validating objects <validating-objects>` for more information on the model's ``clean()`` hook."
msgstr ""

#: ../../topics/forms/modelforms.txt:545
# 9c33e9ab713e45b8813c7c44b3741b9e
msgid "ModelForm factory function"
msgstr ""

#: ../../topics/forms/modelforms.txt:547
# 05460329e6214e2b94454bfcbf1b4b24
msgid "You can create forms from a given model using the standalone function :func:`~django.forms.models.modelform_factory`, instead of using a class definition. This may be more convenient if you do not have many customizations to make::"
msgstr ""

#: ../../topics/forms/modelforms.txt:555
# 5319aeac8fa8458496c7bb4f0a582f6b
msgid "This can also be used to make simple modifications to existing forms, for example by specifying which fields should be displayed::"
msgstr ""

#: ../../topics/forms/modelforms.txt:560
# 1f7ff0d3e56a47eaaf4c91cda4448203
msgid "... or which fields should be excluded::"
msgstr ""

#: ../../topics/forms/modelforms.txt:564
# a8c61e1615294513bd2d47047e42b28f
msgid "You can also specify the widgets to be used for a given field::"
msgstr ""

#: ../../topics/forms/modelforms.txt:572
# a3e2d5250a904183aa8bcb44dff5739c
msgid "Model formsets"
msgstr ""

#: ../../topics/forms/modelforms.txt:576
# 9fab6c7efe384dd6bf611161b13db82a
msgid "Like :doc:`regular formsets </topics/forms/formsets>`, Django provides a couple of enhanced formset classes that make it easy to work with Django models. Let's reuse the ``Author`` model from above::"
msgstr ""

#: ../../topics/forms/modelforms.txt:583
# 259f8dd1b8ca4d4a8b4b4c1e533d637c
msgid "This will create a formset that is capable of working with the data associated with the ``Author`` model. It works just like a regular formset::"
msgstr ""

#: ../../topics/forms/modelforms.txt:600
# 5f5c4df21d9645fd8be4e15b90019c5e
msgid ":func:`~django.forms.models.modelformset_factory` uses ``formset_factory`` to generate formsets. This means that a model formset is just an extension of a basic formset that knows how to interact with a particular model."
msgstr ""

#: ../../topics/forms/modelforms.txt:605
# 676edb3372bf4787915e560b01b70016
msgid "Changing the queryset"
msgstr ""

#: ../../topics/forms/modelforms.txt:607
# 41002491b1c245adb3a44f7cd305f82d
msgid "By default, when you create a formset from a model, the formset will use a queryset that includes all objects in the model (e.g., ``Author.objects.all()``). You can override this behavior by using the ``queryset`` argument::"
msgstr ""

#: ../../topics/forms/modelforms.txt:614
# dd78c2d75b204f67a2e1db3a4db0f436
msgid "Alternatively, you can create a subclass that sets ``self.queryset`` in ``__init__``::"
msgstr ""

#: ../../topics/forms/modelforms.txt:624
# f4b5c0fe43e042b28390632f5f2fec32
msgid "Then, pass your ``BaseAuthorFormSet`` class to the factory function::"
msgstr ""

#: ../../topics/forms/modelforms.txt:628
# 6074e2bf1a4a412aa73be3fa320c45bd
msgid "If you want to return a formset that doesn't include *any* pre-existing instances of the model, you can specify an empty QuerySet::"
msgstr ""

#: ../../topics/forms/modelforms.txt:635
# 0d631899c6e047ab83c5709e9043a106
msgid "Controlling which fields are used with ``fields`` and ``exclude``"
msgstr ""

#: ../../topics/forms/modelforms.txt:637
# 83fb8c9fd6d640e6bfc5c3f54a267f42
msgid "By default, a model formset uses all fields in the model that are not marked with ``editable=False``. However, this can be overridden at the formset level::"
msgstr ""

#: ../../topics/forms/modelforms.txt:642
# 769be58874fa4a01858f4289297baff0
msgid "Using ``fields`` restricts the formset to use only the given fields. Alternatively, you can take an \"opt-out\" approach, specifying which fields to exclude::"
msgstr ""

#: ../../topics/forms/modelforms.txt:649
# 28ae10a98043429aacf460704079ea43
msgid "Providing initial values"
msgstr ""

#: ../../topics/forms/modelforms.txt:653
# e5cec8d1715e4649b5b5ed9e9f1e535e
msgid "As with regular formsets, it's possible to :ref:`specify initial data <formsets-initial-data>` for forms in the formset by specifying an ``initial`` parameter when instantiating the model formset class returned by :func:`~django.forms.models.modelformset_factory`. However, with model formsets, the initial values only apply to extra forms, those that aren't bound to an existing object instance."
msgstr ""

#: ../../topics/forms/modelforms.txt:663
# 7f637950fd9d4b129d31fe3f6762d570
msgid "Saving objects in the formset"
msgstr ""

#: ../../topics/forms/modelforms.txt:665
# d5ec0a12ce024b5e84c7df693bbaa999
msgid "As with a ``ModelForm``, you can save the data as a model object. This is done with the formset's ``save()`` method::"
msgstr ""

#: ../../topics/forms/modelforms.txt:674
# 90b3ce9c3be345eab9d42140e187f7b4
msgid "The ``save()`` method returns the instances that have been saved to the database. If a given instance's data didn't change in the bound data, the instance won't be saved to the database and won't be included in the return value (``instances``, in the above example)."
msgstr ""

#: ../../topics/forms/modelforms.txt:679
# 48ce5042e1f2493d96f830c0c4f726ae
msgid "When fields are missing from the form (for example because they have been excluded), these fields will not be set by the ``save()`` method. You can find more information about this restriction, which also holds for regular ``ModelForms``, in `Using a subset of fields on the form`_."
msgstr ""

#: ../../topics/forms/modelforms.txt:685
# a000ebe565b3450ba94b5f927ceb68b3
msgid "Pass ``commit=False`` to return the unsaved model instances::"
msgstr ""

#: ../../topics/forms/modelforms.txt:693
# a6466aded61145c5abb1e47518c1c358
msgid "This gives you the ability to attach data to the instances before saving them to the database. If your formset contains a ``ManyToManyField``, you'll also need to call ``formset.save_m2m()`` to ensure the many-to-many relationships are saved properly."
msgstr ""

#: ../../topics/forms/modelforms.txt:701
# 1ded33284ab841a3a7112dc81f9ffe9b
msgid "Limiting the number of editable objects"
msgstr ""

#: ../../topics/forms/modelforms.txt:703
# 7a038a5a5bf040aea863b7ca01c0e796
msgid "As with regular formsets, you can use the ``max_num`` and ``extra`` parameters to :func:`~django.forms.models.modelformset_factory` to limit the number of extra forms displayed."
msgstr ""

#: ../../topics/forms/modelforms.txt:707
# a95e57eca5b04ca18ea876effa736bd7
msgid "``max_num`` does not prevent existing objects from being displayed::"
msgstr ""

#: ../../topics/forms/modelforms.txt:717
# 4ad7222a7d324b62bad419f7fd9c1c4e
msgid "If the value of ``max_num`` is greater than the number of existing related objects, up to ``extra`` additional blank forms will be added to the formset, so long as the total number of forms does not exceed ``max_num``::"
msgstr ""

#: ../../topics/forms/modelforms.txt:734
# a60ea6fef80240078e2c043e81a47802
msgid "Using a model formset in a view"
msgstr ""

#: ../../topics/forms/modelforms.txt:736
# 8ea6aa3cdbdb4188a9e3ce3a8d260e5b
msgid "Model formsets are very similar to formsets. Let's say we want to present a formset to edit ``Author`` model instances::"
msgstr ""

#: ../../topics/forms/modelforms.txt:752
# 73370a5a50394d2faad69a4e86922242
msgid "As you can see, the view logic of a model formset isn't drastically different than that of a \"normal\" formset. The only difference is that we call ``formset.save()`` to save the data into the database. (This was described above, in :ref:`saving-objects-in-the-formset`.)"
msgstr ""

#: ../../topics/forms/modelforms.txt:758
# 853696336efc458fab611561f3538fb3
msgid "Overiding ``clean()`` on a ``model_formset``"
msgstr ""

#: ../../topics/forms/modelforms.txt:760
# 1465e130cadf4a9c93f8753550e92772
msgid "Just like with ``ModelForms``, by default the ``clean()`` method of a ``model_formset`` will validate that none of the items in the formset violate the unique constraints on your model (either ``unique``, ``unique_together`` or ``unique_for_date|month|year``).  If you want to override the ``clean()`` method on a ``model_formset`` and maintain this validation, you must call the parent class's ``clean`` method::"
msgstr ""

#: ../../topics/forms/modelforms.txt:775
# d90f1a256f7e462fbf13a6c669907bcf
msgid "Using a custom queryset"
msgstr ""

#: ../../topics/forms/modelforms.txt:777
# 62fc7863d47f40a6a3ba45a3b5c9c32d
msgid "As stated earlier, you can override the default queryset used by the model formset::"
msgstr ""

#: ../../topics/forms/modelforms.txt:794
# ec6fa8df92734832904498606fac7b7e
msgid "Note that we pass the ``queryset`` argument in both the ``POST`` and ``GET`` cases in this example."
msgstr ""

#: ../../topics/forms/modelforms.txt:798
# fdcdb6b6dc304e5abad84c09018bd3e4
msgid "Using the formset in the template"
msgstr ""

#: ../../topics/forms/modelforms.txt:802
# b5ef8431dd4943dab0be15525579ad85
msgid "There are three ways to render a formset in a Django template."
msgstr ""

#: ../../topics/forms/modelforms.txt:804
# 8fa870ac1b5046bc8cddccd41e1221ca
msgid "First, you can let the formset do most of the work::"
msgstr ""

#: ../../topics/forms/modelforms.txt:810
# 4ed128a31b4449929062c7a59a02a5ca
msgid "Second, you can manually render the formset, but let the form deal with itself::"
msgstr ""

#: ../../topics/forms/modelforms.txt:820
# 1f40eee6c1bd4de9b5a5daf3835a2645
msgid "When you manually render the forms yourself, be sure to render the management form as shown above. See the :ref:`management form documentation <understanding-the-managementform>`."
msgstr ""

#: ../../topics/forms/modelforms.txt:824
# a37edc9fce354b9ca5dc6fe82bbfd727
msgid "Third, you can manually render each field::"
msgstr ""

#: ../../topics/forms/modelforms.txt:835
# 2a3bfdd3ff9f409f8aea8d2296f3acee
msgid "If you opt to use this third method and you don't iterate over the fields with a ``{% for %}`` loop, you'll need to render the primary key field. For example, if you were rendering the ``name`` and ``age`` fields of a model::"
msgstr ""

#: ../../topics/forms/modelforms.txt:850
# 92b624ff7c8c49668e9abd14183e1cc0
msgid "Notice how we need to explicitly render ``{{ form.id }}``. This ensures that the model formset, in the ``POST`` case, will work correctly. (This example assumes a primary key named ``id``. If you've explicitly defined your own primary key that isn't called ``id``, make sure it gets rendered.)"
msgstr ""

#: ../../topics/forms/modelforms.txt:860
# 892915960a714ca8a9f5b3be8cb69484
msgid "Inline formsets"
msgstr ""

#: ../../topics/forms/modelforms.txt:862
# 30d6b83c638f48ec958bb444ecd145ab
msgid "Inline formsets is a small abstraction layer on top of model formsets. These simplify the case of working with related objects via a foreign key. Suppose you have these two models::"
msgstr ""

#: ../../topics/forms/modelforms.txt:873
# 1ac17837ec6a437ba7ba37bb6f5886ee
msgid "If you want to create a formset that allows you to edit books belonging to a particular author, you could do this::"
msgstr ""

#: ../../topics/forms/modelforms.txt:883
# af5894a64c4d496fbb20cda7fdc78786
msgid ":func:`~django.forms.models.inlineformset_factory` uses :func:`~django.forms.models.modelformset_factory` and marks ``can_delete=True``."
msgstr ""

#: ../../topics/forms/modelforms.txt:889
# de33a9dcc5b64fdfa1e959fbfdf32704
msgid ":ref:`Manually rendered can_delete and can_order <manually-rendered-can-delete-and-can-order>`."
msgstr ""

#: ../../topics/forms/modelforms.txt:892
# aa56509b5b29472eba11d352bdf463f1
msgid "More than one foreign key to the same model"
msgstr ""

#: ../../topics/forms/modelforms.txt:894
# 62839ad69df6402d8a66a315a45fa3cf
msgid "If your model contains more than one foreign key to the same model, you'll need to resolve the ambiguity manually using ``fk_name``. For example, consider the following model::"
msgstr ""

#: ../../topics/forms/modelforms.txt:903
# ad1183fbeb994b948a7fb84dcf0ca4f8
msgid "To resolve this, you can use ``fk_name`` to :func:`~django.forms.models.inlineformset_factory`::"
msgstr ""

#: ../../topics/forms/modelforms.txt:909
# 947e13d5103f4491be14b198071ca49d
msgid "Using an inline formset in a view"
msgstr ""

#: ../../topics/forms/modelforms.txt:911
# 527c42f48e5b442cb67cb1d06eb8db63
msgid "You may want to provide a view that allows a user to edit the related objects of a model. Here's how you can do that::"
msgstr ""

#: ../../topics/forms/modelforms.txt:929
# cb4a88ddd54f46d591878361362381b8
msgid "Notice how we pass ``instance`` in both the ``POST`` and ``GET`` cases."
msgstr ""

#: ../../topics/http/decorators.txt:3
# 37b2dfad605347c6afc1a3ea0fe20bdc
msgid "View decorators"
msgstr ""

#: ../../topics/http/decorators.txt:7
# 4d759ee1c80f4514b1a304c3f6fa3e65
msgid "Django provides several decorators that can be applied to views to support various HTTP features."
msgstr ""

#: ../../topics/http/decorators.txt:11
# 109a886318a24578931c6351bae5fa6e
msgid "Allowed HTTP methods"
msgstr ""

#: ../../topics/http/decorators.txt:13
# 74fec3408808489fa508020632b1f8fd
msgid "The decorators in :mod:`django.views.decorators.http` can be used to restrict access to views based on the request method. These decorators will return a :class:`django.http.HttpResponseNotAllowed` if the conditions are not met."
msgstr ""

#: ../../topics/http/decorators.txt:19
# 643894e283bb49a6bef37ca24ac88643
msgid "Decorator to require that a view only accept particular request methods. Usage::"
msgstr ""

#: ../../topics/http/decorators.txt:30
# c657c2aadb374b13955e7c249460084f
msgid "Note that request methods should be in uppercase."
msgstr ""

#: ../../topics/http/decorators.txt:34
# a9d64b67ebdf4e508f60d8de63ff7752
msgid "Decorator to require that a view only accept the GET method."
msgstr ""

#: ../../topics/http/decorators.txt:38
# 8f7919ba171c4173ac6a450855b9d699
msgid "Decorator to require that a view only accept the POST method."
msgstr ""

#: ../../topics/http/decorators.txt:44
# aa39e77614444d91902efc47e4c12162
msgid "Decorator to require that a view only accept the GET and HEAD methods. These methods are commonly considered \"safe\" because they should not have the significance of taking an action other than retrieving the requested resource."
msgstr ""

#: ../../topics/http/decorators.txt:50
# e3b1dbe2f81b435ca5887e49c561b573
msgid "Django will automatically strip the content of responses to HEAD requests while leaving the headers unchanged, so you may handle HEAD requests exactly like GET requests in your views. Since some software, such as link checkers, rely on HEAD requests, you might prefer using ``require_safe`` instead of ``require_GET``."
msgstr ""

#: ../../topics/http/decorators.txt:57
# 8a7d28de0027414b97d229eb693dff68
msgid "Conditional view processing"
msgstr ""

#: ../../topics/http/decorators.txt:59
# a721db19666f41cd9a6b3d511522139c
msgid "The following decorators in :mod:`django.views.decorators.http` can be used to control caching behavior on particular views."
msgstr ""

#: ../../topics/http/decorators.txt:68
# 2a02a44537c24ceeb35c7de20d88f505
msgid "These decorators can be used to generate ``ETag`` and ``Last-Modified`` headers; see :doc:`conditional view processing </topics/conditional-view-processing>`."
msgstr ""

#: ../../topics/http/decorators.txt:75
# 474817bfc61a4fe39957d86db270e626
msgid "GZip compression"
msgstr ""

#: ../../topics/http/decorators.txt:77
# ddc8850a9dae43bbaa57e52d2cc4defa
msgid "The decorators in :mod:`django.views.decorators.gzip` control content compression on a per-view basis."
msgstr ""

#: ../../topics/http/decorators.txt:82
# 869491366c4c4171970ac1e21fe5a953
msgid "This decorator compresses content if the browser allows gzip compression. It sets the ``Vary`` header accordingly, so that caches will base their storage on the ``Accept-Encoding`` header."
msgstr ""

#: ../../topics/http/decorators.txt:89
# 3c85daeeecfe44e789d681820438d574
msgid "Vary headers"
msgstr ""

#: ../../topics/http/decorators.txt:91
# bd075e480da14fbdb12162fa358ee65b
msgid "The decorators in :mod:`django.views.decorators.vary` can be used to control caching based on specific request headers."
msgstr ""

#: ../../topics/http/decorators.txt:98
# 44903dda5da7407fadf47a61948fc4dd
msgid "The ``Vary`` header defines which request headers a cache mechanism should take into account when building its cache key."
msgstr ""

#: ../../topics/http/decorators.txt:101
# c5813e37f37442b49514ebd3100b9f51
msgid "See :ref:`using vary headers <using-vary-headers>`."
msgstr ""

#: ../../topics/http/file-uploads.txt:3
# a2c9c8fbb95544599a068870eb2b2163
msgid "File Uploads"
msgstr ""

#: ../../topics/http/file-uploads.txt:7
# a810e02cfb3b4ff6a4e49d9b7a614d0e
msgid "When Django handles a file upload, the file data ends up placed in :attr:`request.FILES <django.http.HttpRequest.FILES>` (for more on the ``request`` object see the documentation for :doc:`request and response objects </ref/request-response>`). This document explains how files are stored on disk and in memory, and how to customize the default behavior."
msgstr ""

#: ../../topics/http/file-uploads.txt:14
# f33167749222475581971e3fa984be26
msgid "Basic file uploads"
msgstr ""

#: ../../topics/http/file-uploads.txt:16
# d0fea002d35040c5bb77b5d671be8cda
msgid "Consider a simple form containing a :class:`~django.forms.FileField`::"
msgstr ""

#: ../../topics/http/file-uploads.txt:24
# b3a66262485a4481b1c88f4c11238fec
msgid "A view handling this form will receive the file data in :attr:`request.FILES <django.http.HttpRequest.FILES>`, which is a dictionary containing a key for each :class:`~django.forms.FileField` (or :class:`~django.forms.ImageField`, or other :class:`~django.forms.FileField` subclass) in the form. So the data from the above form would be accessible as ``request.FILES['file']``."
msgstr ""

#: ../../topics/http/file-uploads.txt:31
# c5547d5d23ba4a04aae78952f9968998
msgid "Note that :attr:`request.FILES <django.http.HttpRequest.FILES>` will only contain data if the request method was ``POST`` and the ``<form>`` that posted the request has the attribute ``enctype=\"multipart/form-data\"``. Otherwise, ``request.FILES`` will be empty."
msgstr ""

#: ../../topics/http/file-uploads.txt:36
# 69f5006954c846ca85cbb03986954d34
msgid "Most of the time, you'll simply pass the file data from ``request`` into the form as described in :ref:`binding-uploaded-files`. This would look something like::"
msgstr ""

#: ../../topics/http/file-uploads.txt:56
# 6ae504948d744c13b723977f0b94f279
msgid "Notice that we have to pass :attr:`request.FILES <django.http.HttpRequest.FILES>` into the form's constructor; this is how file data gets bound into a form."
msgstr ""

#: ../../topics/http/file-uploads.txt:60
# d064abb4307d4d4fa4ab3524cd756c46
msgid "Handling uploaded files"
msgstr ""

#: ../../topics/http/file-uploads.txt:64
# b84e56f30499405c9dd15558b62282f3
msgid "The final piece of the puzzle is handling the actual file data from :attr:`request.FILES <django.http.HttpRequest.FILES>`. Each entry in this dictionary is an ``UploadedFile`` object -- a simple wrapper around an uploaded file. You'll usually use one of these methods to access the uploaded content:"
msgstr ""

#: ../../topics/http/file-uploads.txt:71
# c5c2bc2b162f4848903568a0b02949ad
msgid "Read the entire uploaded data from the file. Be careful with this method: if the uploaded file is huge it can overwhelm your system if you try to read it into memory. You'll probably want to use ``chunks()`` instead; see below."
msgstr ""

#: ../../topics/http/file-uploads.txt:78
# 24a6fe9d12bf49c18edf3b9c35a8dfb8
msgid "Returns ``True`` if the uploaded file is big enough to require reading in multiple chunks. By default this will be any file larger than 2.5 megabytes, but that's configurable; see below."
msgstr ""

#: ../../topics/http/file-uploads.txt:84
# 115841f1c2364209b3b16a1349a593ea
msgid "A generator returning chunks of the file. If ``multiple_chunks()`` is ``True``, you should use this method in a loop instead of ``read()``."
msgstr ""

#: ../../topics/http/file-uploads.txt:87
# a252d857bb154960a3a28ed3152ce73d
msgid "In practice, it's often easiest simply to use ``chunks()`` all the time; see the example below."
msgstr ""

#: ../../topics/http/file-uploads.txt:92
# 42a3c7562ab84a2e8f36a9c5751ef638
msgid "The name of the uploaded file (e.g. ``my_file.txt``)."
msgstr ""

#: ../../topics/http/file-uploads.txt:96
# 0217d047eb9a45f698133689b6a24c04
msgid "The size, in bytes, of the uploaded file."
msgstr ""

#: ../../topics/http/file-uploads.txt:98
# a9e3fccbaaff40d0a3c32b59c55bc4c5
msgid "There are a few other methods and attributes available on ``UploadedFile`` objects; see `UploadedFile objects`_ for a complete reference."
msgstr ""

#: ../../topics/http/file-uploads.txt:101
# d7ea34b4a80f47fd8c64986a669d60b2
msgid "Putting it all together, here's a common way you might handle an uploaded file::"
msgstr ""

#: ../../topics/http/file-uploads.txt:108
# 6827d1e0ded040b5bf9525ea07b791c3
msgid "Looping over ``UploadedFile.chunks()`` instead of using ``read()`` ensures that large files don't overwhelm your system's memory."
msgstr ""

#: ../../topics/http/file-uploads.txt:112
# 307331f2292d4dc5a8f898b88bed6085
msgid "Where uploaded data is stored"
msgstr ""

#: ../../topics/http/file-uploads.txt:114
# 26348438058f4bb9a76d96a969357278
msgid "Before you save uploaded files, the data needs to be stored somewhere."
msgstr ""

#: ../../topics/http/file-uploads.txt:116
# 66af1b3185e24f27a1cec57930912ee8
msgid "By default, if an uploaded file is smaller than 2.5 megabytes, Django will hold the entire contents of the upload in memory. This means that saving the file involves only a read from memory and a write to disk and thus is very fast."
msgstr ""

#: ../../topics/http/file-uploads.txt:120
# 712abb8651e64131b288d6d332949a1d
msgid "However, if an uploaded file is too large, Django will write the uploaded file to a temporary file stored in your system's temporary directory. On a Unix-like platform this means you can expect Django to generate a file called something like ``/tmp/tmpzfp6I6.upload``. If an upload is large enough, you can watch this file grow in size as Django streams the data onto disk."
msgstr ""

#: ../../topics/http/file-uploads.txt:126
# 92b34a8c586d4a248a39b0633d3dd1e5
msgid "These specifics -- 2.5 megabytes; ``/tmp``; etc. -- are simply \"reasonable defaults\". Read on for details on how you can customize or completely replace upload behavior."
msgstr ""

#: ../../topics/http/file-uploads.txt:131
# b898be99236b496789a0fdb55f6be5bb
msgid "Changing upload handler behavior"
msgstr ""

#: ../../topics/http/file-uploads.txt:133
# c98b1841029149d58025ac161988f437
msgid "Three settings control Django's file upload behavior:"
msgstr ""

#: ../../topics/http/file-uploads.txt:136
# a6f71840349c4800ad44b911cd45e8e5
msgid "The maximum size, in bytes, for files that will be uploaded into memory. Files larger than :setting:`FILE_UPLOAD_MAX_MEMORY_SIZE` will be streamed to disk."
msgstr ""

#: ../../topics/http/file-uploads.txt:140
# fb56bea76f72464fa9f6b6b08ce07263
msgid "Defaults to 2.5 megabytes."
msgstr ""

#: ../../topics/http/file-uploads.txt:143
# 3e7cfc0d307845d684e24688cc66d7fb
msgid "The directory where uploaded files larger than :setting:`FILE_UPLOAD_MAX_MEMORY_SIZE` will be stored."
msgstr ""

#: ../../topics/http/file-uploads.txt:146
# d2226fdf18e148dfb6c1b8b2658df954
msgid "Defaults to your system's standard temporary directory (i.e. ``/tmp`` on most Unix-like systems)."
msgstr ""

#: ../../topics/http/file-uploads.txt:150
# 9421d3c4b4524e2f8e8481a99f114748
msgid "The numeric mode (i.e. ``0644``) to set newly uploaded files to. For more information about what these modes mean, see the documentation for :func:`os.chmod`."
msgstr ""

#: ../../topics/http/file-uploads.txt:154
# c8a9ecd320534852ac2484c67bf83eae
msgid "If this isn't given or is ``None``, you'll get operating-system dependent behavior. On most platforms, temporary files will have a mode of ``0600``, and files saved from memory will be saved using the system's standard umask."
msgstr ""

#: ../../topics/http/file-uploads.txt:161
# de8fe7cff7ac4f18b23173c10b7f5521
msgid "If you're not familiar with file modes, please note that the leading ``0`` is very important: it indicates an octal number, which is the way that modes must be specified. If you try to use ``644``, you'll get totally incorrect behavior."
msgstr ""

#: ../../topics/http/file-uploads.txt:166
# 05a984c591f641e28ec6491f961b100c
msgid "**Always prefix the mode with a 0.**"
msgstr ""

#: ../../topics/http/file-uploads.txt:169
# 1e60276dc5774155abba1cd5e8530d86
msgid "The actual handlers for uploaded files. Changing this setting allows complete customization -- even replacement -- of Django's upload process. See `upload handlers`_, below, for details."
msgstr ""

#: ../../topics/http/file-uploads.txt:173
# a655dbe21f0c4e83a59fa7b289573dee
msgid "Defaults to::"
msgstr ""

#: ../../topics/http/file-uploads.txt:178
# 5a90bc0c79454c36926841eae1e14512
msgid "Which means \"try to upload to memory first, then fall back to temporary files.\""
msgstr ""

#: ../../topics/http/file-uploads.txt:182
# 13c180286c064957bd2d0fef3b283c35
msgid "Handling uploaded files with a model"
msgstr ""

#: ../../topics/http/file-uploads.txt:184
# b8f3b928c1fd4e2eb5c15f3b5baa65bc
msgid "If you're saving a file on a :class:`~django.db.models.Model` with a :class:`~django.db.models.FileField`, using a :class:`~django.forms.ModelForm` makes this process much easier. The file object will be saved to the location specified by the :attr:`~django.db.models.FileField.upload_to` argument of the corresponding :class:`~django.db.models.FileField` when calling ``form.save()``::"
msgstr ""

#: ../../topics/http/file-uploads.txt:206
# b519d1eb23b943f8827fa23aac68ffb4
msgid "If you are constructing an object manually, you can simply assign the file object from :attr:`request.FILES <django.http.HttpRequest.FILES>` to the file field in the model::"
msgstr ""

#: ../../topics/http/file-uploads.txt:228
# d5e6454947614047a88f5efc14b9e48c
msgid "``UploadedFile`` objects"
msgstr ""

#: ../../topics/http/file-uploads.txt:230
# c04d8adb651c4edda78c227115d3b8fa
msgid "In addition to those inherited from :class:`~django.core.files.File`, all ``UploadedFile`` objects define the following methods/attributes:"
msgstr ""

#: ../../topics/http/file-uploads.txt:235
# e846f7b77ccb40a8a7f03a930a979f27
msgid "The content-type header uploaded with the file (e.g. :mimetype:`text/plain` or :mimetype:`application/pdf`). Like any data supplied by the user, you shouldn't trust that the uploaded file is actually this type. You'll still need to validate that the file contains the content that the content-type header claims -- \"trust but verify.\""
msgstr ""

#: ../../topics/http/file-uploads.txt:243
# be11af8eb9e94fe0a60ca6316ddd5136
msgid "For :mimetype:`text/*` content-types, the character set (i.e. ``utf8``) supplied by the browser. Again, \"trust but verify\" is the best policy here."
msgstr ""

#: ../../topics/http/file-uploads.txt:248
# a3a6953487c541f8a79d9d4bc2c5d39d
msgid "Only files uploaded onto disk will have this method; it returns the full path to the temporary uploaded file."
msgstr ""

#: ../../topics/http/file-uploads.txt:253
# c402849203394d8fb40d4c268563b265
msgid "Like regular Python files, you can read the file line-by-line simply by iterating over the uploaded file:"
msgstr ""

#: ../../topics/http/file-uploads.txt:261
# 0ecaf2f1499e4f1aab8ef8b485fdb65d
msgid "However, *unlike* standard Python files, :class:`UploadedFile` only understands ``\\n`` (also known as \"Unix-style\") line endings. If you know that you need to handle uploaded files with different line endings, you'll need to do so in your view."
msgstr ""

#: ../../topics/http/file-uploads.txt:267
# ba4420ae50534b01a753d30f88a80395
msgid "Upload Handlers"
msgstr ""

#: ../../topics/http/file-uploads.txt:269
# 05cd38dfe16f4057a24ce8fd661d1006
msgid "When a user uploads a file, Django passes off the file data to an *upload handler* -- a small class that handles file data as it gets uploaded. Upload handlers are initially defined in the :setting:`FILE_UPLOAD_HANDLERS` setting, which defaults to::"
msgstr ""

#: ../../topics/http/file-uploads.txt:277
# 9b311810969c431aba0f4ed8f453baf4
msgid "Together the ``MemoryFileUploadHandler`` and ``TemporaryFileUploadHandler`` provide Django's default file upload behavior of reading small files into memory and large ones onto disk."
msgstr ""

#: ../../topics/http/file-uploads.txt:281
# e6c11237f63d42db82526fbe494c9df8
msgid "You can write custom handlers that customize how Django handles files. You could, for example, use custom handlers to enforce user-level quotas, compress data on the fly, render progress bars, and even send data to another storage location directly without storing it locally."
msgstr ""

#: ../../topics/http/file-uploads.txt:289
# 1cdfd5e2b15941e3accdce32f0c783f4
msgid "Modifying upload handlers on the fly"
msgstr ""

#: ../../topics/http/file-uploads.txt:291
# d32240e71cac4c4e83c0ac3809a65ff1
msgid "Sometimes particular views require different upload behavior. In these cases, you can override upload handlers on a per-request basis by modifying ``request.upload_handlers``. By default, this list will contain the upload handlers given by :setting:`FILE_UPLOAD_HANDLERS`, but you can modify the list as you would any other list."
msgstr ""

#: ../../topics/http/file-uploads.txt:297
# 178195cc3de54dc5a59f084cad918888
msgid "For instance, suppose you've written a ``ProgressBarUploadHandler`` that provides feedback on upload progress to some sort of AJAX widget. You'd add this handler to your upload handlers like this::"
msgstr ""

#: ../../topics/http/file-uploads.txt:303
# a06c89e5cba74855a2d37240e5720d72
msgid "You'd probably want to use ``list.insert()`` in this case (instead of ``append()``) because a progress bar handler would need to run *before* any other handlers. Remember, the upload handlers are processed in order."
msgstr ""

#: ../../topics/http/file-uploads.txt:307
# 5af8a39deafc404c8e57aa0aee1d8d33
msgid "If you want to replace the upload handlers completely, you can just assign a new list::"
msgstr ""

#: ../../topics/http/file-uploads.txt:314
# 8a793fcd13084e499022a4857971b937
msgid "You can only modify upload handlers *before* accessing ``request.POST`` or ``request.FILES`` -- it doesn't make sense to change upload handlers after upload handling has already started. If you try to modify ``request.upload_handlers`` after reading from ``request.POST`` or ``request.FILES`` Django will throw an error."
msgstr ""

#: ../../topics/http/file-uploads.txt:321
# 70004c02d34b41f5a67fa383ef9df5d9
msgid "Thus, you should always modify uploading handlers as early in your view as possible."
msgstr ""

#: ../../topics/http/file-uploads.txt:324
# 5971fb238e0749e7b189014a0253e927
msgid "Also, ``request.POST`` is accessed by :class:`~django.middleware.csrf.CsrfViewMiddleware` which is enabled by default. This means you will need to use :func:`~django.views.decorators.csrf.csrf_exempt` on your view to allow you to change the upload handlers.  You will then need to use :func:`~django.views.decorators.csrf.csrf_protect` on the function that actually processes the request.  Note that this means that the handlers may start receiving the file upload before the CSRF checks have been done. Example code:"
msgstr ""

#: ../../topics/http/file-uploads.txt:349
# db5eb403c15b418295223da99a39c8ce
msgid "Writing custom upload handlers"
msgstr ""

#: ../../topics/http/file-uploads.txt:351
# ee6ceacb05774881aaa41bd54d8a9770
msgid "All file upload handlers should be subclasses of ``django.core.files.uploadhandler.FileUploadHandler``. You can define upload handlers wherever you wish."
msgstr ""

#: ../../topics/http/file-uploads.txt:356
# e0dc74403d1044e0a4c5f3bf2e01d37e
msgid "Required methods"
msgstr ""

#: ../../topics/http/file-uploads.txt:358
# 629de17a740440cc9c89eca24eebd319
msgid "Custom file upload handlers **must** define the following methods:"
msgstr ""

#: ../../topics/http/file-uploads.txt:361
# f456cf38bf0e4dbcb605fedfda4634ba
msgid "Receives a \"chunk\" of data from the file upload."
msgstr ""

#: ../../topics/http/file-uploads.txt:363
# 0a8eebc42b6f432788dea12a280bb0c4
msgid "``raw_data`` is a byte string containing the uploaded data."
msgstr ""

#: ../../topics/http/file-uploads.txt:365
# 2f759b9a34c7405e85da7a416c4c3165
msgid "``start`` is the position in the file where this ``raw_data`` chunk begins."
msgstr ""

#: ../../topics/http/file-uploads.txt:368
# e24ac3f53f2c44cbba7655f53d3eaf6b
msgid "The data you return will get fed into the subsequent upload handlers' ``receive_data_chunk`` methods. In this way, one handler can be a \"filter\" for other handlers."
msgstr ""

#: ../../topics/http/file-uploads.txt:372
# 5571ea743125411a9ee1d01d7362e191
msgid "Return ``None`` from ``receive_data_chunk`` to sort-circuit remaining upload handlers from getting this chunk.. This is useful if you're storing the uploaded data yourself and don't want future handlers to store a copy of the data."
msgstr ""

#: ../../topics/http/file-uploads.txt:377
# aea0d1564460443b84284b40f98d7ac3
msgid "If you raise a ``StopUpload`` or a ``SkipFile`` exception, the upload will abort or the file will be completely skipped."
msgstr ""

#: ../../topics/http/file-uploads.txt:381
# cf4cfe887c034c5b96530a60e6cba1cf
msgid "Called when a file has finished uploading."
msgstr ""

#: ../../topics/http/file-uploads.txt:383
# 71fc9ce579d248fc80fcf05a85364424
msgid "The handler should return an ``UploadedFile`` object that will be stored in ``request.FILES``. Handlers may also return ``None`` to indicate that the ``UploadedFile`` object should come from subsequent upload handlers."
msgstr ""

#: ../../topics/http/file-uploads.txt:388
# 9cc9855f8bf14b34a0fab676170debf7
msgid "Optional methods"
msgstr ""

#: ../../topics/http/file-uploads.txt:390
# caf1a314f0e44880b9c11f692570aa80
msgid "Custom upload handlers may also define any of the following optional methods or attributes:"
msgstr ""

#: ../../topics/http/file-uploads.txt:394
# 22809f8894bb4ca089fe453f539c4222
msgid "Size, in bytes, of the \"chunks\" Django should store into memory and feed into the handler. That is, this attribute controls the size of chunks fed into ``FileUploadHandler.receive_data_chunk``."
msgstr ""

#: ../../topics/http/file-uploads.txt:398
# f6b510ba170c414c812f95231109298a
msgid "For maximum performance the chunk sizes should be divisible by ``4`` and should not exceed 2 GB (2\\ :sup:`31` bytes) in size. When there are multiple chunk sizes provided by multiple handlers, Django will use the smallest chunk size defined by any handler."
msgstr ""

#: ../../topics/http/file-uploads.txt:403
# 35e794f64cf640f9a4c94f824909f390
msgid "The default is 64*2\\ :sup:`10` bytes, or 64 KB."
msgstr ""

#: ../../topics/http/file-uploads.txt:406
# f752954d5ecb4ab2b6d276e158c76b49
msgid "Callback signaling that a new file upload is starting. This is called before any data has been fed to any upload handlers."
msgstr ""

#: ../../topics/http/file-uploads.txt:409
# 9c4fb0afccf74211870ed992f0d4b99d
msgid "``field_name`` is a string name of the file ``<input>`` field."
msgstr ""

#: ../../topics/http/file-uploads.txt:411
# 574f9bc91ced423ea5ef8c540b526a16
msgid "``file_name`` is the unicode filename that was provided by the browser."
msgstr ""

#: ../../topics/http/file-uploads.txt:413
# 356f5e28513e4538bd0925163c039ca1
msgid "``content_type`` is the MIME type provided by the browser -- E.g. ``'image/jpeg'``."
msgstr ""

#: ../../topics/http/file-uploads.txt:416
# 438f3e01d7454e4890e494411e74473e
msgid "``content_length`` is the length of the image given by the browser. Sometimes this won't be provided and will be ``None``."
msgstr ""

#: ../../topics/http/file-uploads.txt:419
# 5a424d246d9c4746967a33ea5194b149
msgid "``charset`` is the character set (i.e. ``utf8``) given by the browser. Like ``content_length``, this sometimes won't be provided."
msgstr ""

#: ../../topics/http/file-uploads.txt:422
# 7e1b048326b54049a8cabebc6b770c5f
msgid "This method may raise a ``StopFutureHandlers`` exception to prevent future handlers from handling this file."
msgstr ""

#: ../../topics/http/file-uploads.txt:426
# 9d4f82d2c07c4b90b7e74b89080ad038
msgid "Callback signaling that the entire upload (all files) has completed."
msgstr ""

#: ../../topics/http/file-uploads.txt:429
# d3aa0fb1b70b49c4a98989eda9ed0d11
msgid "Allows the handler to completely override the parsing of the raw HTTP input."
msgstr ""

#: ../../topics/http/file-uploads.txt:432
# b93ed2371bb746f598a2419ef0ec30a1
msgid "``input_data`` is a file-like object that supports ``read()``-ing."
msgstr ""

#: ../../topics/http/file-uploads.txt:434
# ea27a6917ad84f899d1850d79e742a10
msgid "``META`` is the same object as ``request.META``."
msgstr ""

#: ../../topics/http/file-uploads.txt:436
# d5891bb79a8f4b6591cf23233f3dcd53
msgid "``content_length`` is the length of the data in ``input_data``. Don't read more than ``content_length`` bytes from ``input_data``."
msgstr ""

#: ../../topics/http/file-uploads.txt:439
# fa07c238cc194d589d93ffa68b7b0a0f
msgid "``boundary`` is the MIME boundary for this request."
msgstr ""

#: ../../topics/http/file-uploads.txt:441
# 73de45a358bd40a6aca42b2d34ac5ad5
msgid "``encoding`` is the encoding of the request."
msgstr ""

#: ../../topics/http/file-uploads.txt:443
# 32149fbead6e4c608b2431fe3edb25ef
msgid "Return ``None`` if you want upload handling to continue, or a tuple of ``(POST, FILES)`` if you want to return the new data structures suitable for the request directly."
msgstr ""

#: ../../topics/http/generic-views.txt:3
# 36117ff5f4c14d9492642f38d80821de
msgid "Generic views"
msgstr ""

#: ../../topics/http/generic-views.txt:5
# 55953904acff4a7d9faa58d18306cb7a
msgid "See :doc:`/ref/class-based-views/index`."
msgstr ""

#: ../../topics/http/index.txt:2
# b81f3faadd204f03bd8a9fafac693fd0
msgid "Handling HTTP requests"
msgstr ""

#: ../../topics/http/index.txt:4
# 650a1454b5c14e43b05d61cdfac7c690
msgid "Information on handling HTTP requests in Django:"
msgstr ""

#: ../../topics/http/middleware.txt:3
# f9bdf5128905462dbd3f2234127bea0c
msgid "Middleware"
msgstr ""

#: ../../topics/http/middleware.txt:5
# bd75045925ce4b91948cacb440fb27af
msgid "Middleware is a framework of hooks into Django's request/response processing. It's a light, low-level \"plugin\" system for globally altering Django's input and/or output."
msgstr ""

#: ../../topics/http/middleware.txt:9
# 45e937124b6c4139bdd8b32a6bcd6d7e
msgid "Each middleware component is responsible for doing some specific function. For example, Django includes a middleware component, ``XViewMiddleware``, that adds an ``\"X-View\"`` HTTP header to every response to a ``HEAD`` request."
msgstr ""

#: ../../topics/http/middleware.txt:13
# a1dccf2bcfc44587ae9fbc08e2fae600
msgid "This document explains how middleware works, how you activate middleware, and how to write your own middleware. Django ships with some built-in middleware you can use right out of the box; they're documented in the :doc:`built-in middleware reference </ref/middleware>`."
msgstr ""

#: ../../topics/http/middleware.txt:19
# 5ee33b0d38d34c86a9ea277667785476
msgid "Activating middleware"
msgstr ""

#: ../../topics/http/middleware.txt:21
# 840450fbb2014becb857cb94d694991e
msgid "To activate a middleware component, add it to the :setting:`MIDDLEWARE_CLASSES` list in your Django settings. In :setting:`MIDDLEWARE_CLASSES`, each middleware component is represented by a string: the full Python path to the middleware's class name. For example, here's the default :setting:`MIDDLEWARE_CLASSES` created by :djadmin:`django-admin.py startproject <startproject>`::"
msgstr ""

#: ../../topics/http/middleware.txt:35
# 3c74c652d6034ad08e109cce06cb93ac
msgid "During the request phases (:meth:`process_request` and :meth:`process_view` middleware), Django applies middleware in the order it's defined in :setting:`MIDDLEWARE_CLASSES`, top-down. During the response phases (:meth:`process_response` and :meth:`process_exception` middleware), the classes are applied in reverse order, from the bottom up. You can think of it like an onion: each middleware class is a \"layer\" that wraps the view:"
msgstr ""

#: ../../topics/http/middleware.txt:47
# 1ec3f74dee0e492db0455e5391a4f7f5
msgid "A Django installation doesn't require any middleware -- e.g., :setting:`MIDDLEWARE_CLASSES` can be empty, if you'd like -- but it's strongly suggested that you at least use :class:`~django.middleware.common.CommonMiddleware`."
msgstr ""

#: ../../topics/http/middleware.txt:53
# b33e59e7af454f36bec884ba639136f3
msgid "Writing your own middleware"
msgstr ""

#: ../../topics/http/middleware.txt:55
# 30695322d3694d4582ae2082fa225226
msgid "Writing your own middleware is easy. Each middleware component is a single Python class that defines one or more of the following methods:"
msgstr ""

#: ../../topics/http/middleware.txt:61
# a3e6440e081b43169815c70d71a89621
msgid "``process_request``"
msgstr ""

#: ../../topics/http/middleware.txt:65
# 71d4cee484e7489da1f4d593df165e04
msgid "``request`` is an :class:`~django.http.HttpRequest` object. This method is called on each request, before Django decides which view to execute."
msgstr ""

#: ../../topics/http/middleware.txt:68
# f3839ff8f7ef4c21b65c8c485f39cce8
msgid "``process_request()`` should return either ``None`` or an :class:`~django.http.HttpResponse` object. If it returns ``None``, Django will continue processing this request, executing any other middleware and, then, the appropriate view. If it returns an :class:`~django.http.HttpResponse` object, Django won't bother calling ANY other request, view or exception middleware, or the appropriate view; it'll return that :class:`~django.http.HttpResponse`. Response middleware is always called on every response."
msgstr ""

#: ../../topics/http/middleware.txt:79
# 55a064cd3ae94930909138bea4a1a6cf
msgid "``process_view``"
msgstr ""

#: ../../topics/http/middleware.txt:83
# db4482f0e04343ffb2b504202cda5144
msgid "``request`` is an :class:`~django.http.HttpRequest` object. ``view_func`` is the Python function that Django is about to use. (It's the actual function object, not the name of the function as a string.) ``view_args`` is a list of positional arguments that will be passed to the view, and ``view_kwargs`` is a dictionary of keyword arguments that will be passed to the view. Neither ``view_args`` nor ``view_kwargs`` include the first view argument (``request``)."
msgstr ""

#: ../../topics/http/middleware.txt:91
# bf473b45e69f44fba8413169d7645e9d
msgid "``process_view()`` is called just before Django calls the view. It should return either ``None`` or an :class:`~django.http.HttpResponse` object. If it returns ``None``, Django will continue processing this request, executing any other ``process_view()`` middleware and, then, the appropriate view. If it returns an :class:`~django.http.HttpResponse` object, Django won't bother calling ANY other request, view or exception middleware, or the appropriate view; it'll return that :class:`~django.http.HttpResponse`. Response middleware is always called on every response."
msgstr ""

#: ../../topics/http/middleware.txt:102
# 36fc40475ac24bd4a5cc8ece73b877b0
msgid "Accessing :attr:`request.POST <django.http.HttpRequest.POST>` or :attr:`request.REQUEST <django.http.HttpRequest.REQUEST>` inside middleware from ``process_request`` or ``process_view`` will prevent any view running after the middleware from being able to :ref:`modify the upload handlers for the request <modifying_upload_handlers_on_the_fly>`, and should normally be avoided."
msgstr ""

#: ../../topics/http/middleware.txt:109
# f050ba965fa34e15a2be1c425c9f15ae
msgid "The :class:`~django.middleware.csrf.CsrfViewMiddleware` class can be considered an exception, as it provides the :func:`~django.views.decorators.csrf.csrf_exempt` and :func:`~django.views.decorators.csrf.csrf_protect` decorators which allow views to explicitly control at what point the CSRF validation should occur."
msgstr ""

#: ../../topics/http/middleware.txt:118
# 686a1bdfe6454458ad8b6463a7411f8d
msgid "``process_template_response``"
msgstr ""

#: ../../topics/http/middleware.txt:122
# 363f4fd50047490a8bf85b6d8ede3a08
msgid "``request`` is an :class:`~django.http.HttpRequest` object. ``response`` is a subclass of :class:`~django.template.response.SimpleTemplateResponse` (e.g. :class:`~django.template.response.TemplateResponse`) or any response object that implements a ``render`` method."
msgstr ""

#: ../../topics/http/middleware.txt:127
# 0b942b1b4d63485f92cd116d76065212
msgid "``process_template_response()`` must return a response object that implements a ``render`` method. It could alter the given ``response`` by changing ``response.template_name`` and ``response.context_data``, or it could create and return a brand-new :class:`~django.template.response.SimpleTemplateResponse` or equivalent."
msgstr ""

#: ../../topics/http/middleware.txt:133
# f66f4e549049496793d4d69594810049
msgid "``process_template_response()`` will only be called if the response instance has a ``render()`` method, indicating that it is a :class:`~django.template.response.TemplateResponse` or equivalent."
msgstr ""

#: ../../topics/http/middleware.txt:137
# b17765eaa3a0494991dbb1bec0bb3dc7
msgid "You don't need to explicitly render responses -- responses will be automatically rendered once all template response middleware has been called."
msgstr ""

#: ../../topics/http/middleware.txt:141
# 15d0f86804de4a62a70694cce32bc8b8
msgid "Middleware are run in reverse order during the response phase, which includes process_template_response."
msgstr ""

#: ../../topics/http/middleware.txt:147
# dda171ea14fe4ec29df5a0c3a1d111ae
msgid "``process_response``"
msgstr ""

#: ../../topics/http/middleware.txt:151
# c945c425d1a0424692b81987c06eb561
msgid "``request`` is an :class:`~django.http.HttpRequest` object. ``response`` is the :class:`~django.http.HttpResponse` object returned by a Django view."
msgstr ""

#: ../../topics/http/middleware.txt:154
# c07d3bedac6c4b24b8d48a4b2025b653
msgid "``process_response()`` must return an :class:`~django.http.HttpResponse` object. It could alter the given ``response``, or it could create and return a brand-new :class:`~django.http.HttpResponse`."
msgstr ""

#: ../../topics/http/middleware.txt:158
# 8dc045487c7c425a812866ec0bd2b1b9
msgid "Unlike the ``process_request()`` and ``process_view()`` methods, the ``process_response()`` method is always called, even if the ``process_request()`` and ``process_view()`` methods of the same middleware class were skipped because an earlier middleware method returned an :class:`~django.http.HttpResponse` (this means that your ``process_response()`` method cannot rely on setup done in ``process_request()``, for example). In addition, during the response phase the classes are applied in reverse order, from the bottom up. This means classes defined at the end of :setting:`MIDDLEWARE_CLASSES` will be run first."
msgstr ""

#: ../../topics/http/middleware.txt:171
# ce814758dbc6462a9a9f5f4c3d04ae9a
msgid "Unlike :class:`~django.http.HttpResponse`, :class:`~django.http.StreamingHttpResponse` does not have a ``content`` attribute. As a result, middleware can no longer assume that all responses will have a ``content`` attribute. If they need access to the content, they must test for streaming responses and adjust their behavior accordingly::"
msgstr ""

#: ../../topics/http/middleware.txt:182
# 9a635d6ba1c547fc9f6f73afbf329a43
msgid "``streaming_content`` should be assumed to be too large to hold in memory. Middleware may wrap it in a new generator, but must not consume it."
msgstr ""

#: ../../topics/http/middleware.txt:188
# 4253b412b5e843dc8ed19c3cdc4c6149
msgid "``process_exception``"
msgstr ""

#: ../../topics/http/middleware.txt:192
# 582491d44b5948dfbc0baa595245d115
msgid "``request`` is an :class:`~django.http.HttpRequest` object. ``exception`` is an ``Exception`` object raised by the view function."
msgstr ""

#: ../../topics/http/middleware.txt:195
# 7d90ae0fb66c40acb8cf2e81d82057bd
msgid "Django calls ``process_exception()`` when a view raises an exception. ``process_exception()`` should return either ``None`` or an :class:`~django.http.HttpResponse` object. If it returns an :class:`~django.http.HttpResponse` object, the response will be returned to the browser. Otherwise, default exception handling kicks in."
msgstr ""

#: ../../topics/http/middleware.txt:201
# 1438a7ecc542406291d8c7b15626c3a9
msgid "Again, middleware are run in reverse order during the response phase, which includes ``process_exception``. If an exception middleware returns a response, the middleware classes above that middleware will not be called at all."
msgstr ""

#: ../../topics/http/middleware.txt:206
# d45868e2582d463eb9382fb3efd20523
msgid "``__init__``"
msgstr ""

#: ../../topics/http/middleware.txt:208
# 4a99eb8e2aef45ef932744860c08fab3
msgid "Most middleware classes won't need an initializer since middleware classes are essentially placeholders for the ``process_*`` methods. If you do need some global state you may use ``__init__`` to set up. However, keep in mind a couple of caveats:"
msgstr ""

#: ../../topics/http/middleware.txt:213
# 527d0e7e04834129a72b4051281368fd
msgid "Django initializes your middleware without any arguments, so you can't define ``__init__`` as requiring any arguments."
msgstr ""

#: ../../topics/http/middleware.txt:216
# 4e1739fe087c4b659c3d33e5c9f15520
msgid "Unlike the ``process_*`` methods which get called once per request, ``__init__`` gets called only *once*, when the Web server responds to the first request."
msgstr ""

#: ../../topics/http/middleware.txt:221
# 6705a5a9164a429996caaa05b7590c93
msgid "Marking middleware as unused"
msgstr ""

#: ../../topics/http/middleware.txt:223
# 4eec202ba0d04e6e86a75e1bfc5f616b
msgid "It's sometimes useful to determine at run-time whether a piece of middleware should be used. In these cases, your middleware's ``__init__`` method may raise ``django.core.exceptions.MiddlewareNotUsed``. Django will then remove that piece of middleware from the middleware process."
msgstr ""

#: ../../topics/http/middleware.txt:229
# 4529b420d3d14c11a2ed1d81ccb9b1e0
msgid "Guidelines"
msgstr ""

#: ../../topics/http/middleware.txt:231
# 7ebbf7cc2d12463f90e41e807353bda6
msgid "Middleware classes don't have to subclass anything."
msgstr ""

#: ../../topics/http/middleware.txt:233
# c63295e53efd47d39aa37e8cd862c502
msgid "The middleware class can live anywhere on your Python path. All Django cares about is that the :setting:`MIDDLEWARE_CLASSES` setting includes the path to it."
msgstr ""

#: ../../topics/http/middleware.txt:237
# 93775bb8b55441098dfee28fbf13274a
msgid "Feel free to look at :doc:`Django's available middleware </ref/middleware>` for examples."
msgstr ""

#: ../../topics/http/middleware.txt:240
# 6173e64340434314892e4150527d145b
msgid "If you write a middleware component that you think would be useful to other people, contribute to the community! :doc:`Let us know </internals/contributing/index>`, and we'll consider adding it to Django."
msgstr ""

#: ../../topics/http/sessions.txt:3
# c0aba380e0814f42852da4691328a3c8
msgid "How to use sessions"
msgstr ""

#: ../../topics/http/sessions.txt:8
# fd7876bc21f948e9a3299d313de4a42f
msgid "Django provides full support for anonymous sessions. The session framework lets you store and retrieve arbitrary data on a per-site-visitor basis. It stores data on the server side and abstracts the sending and receiving of cookies. Cookies contain a session ID -- not the data itself (unless you're using the :ref:`cookie based backend<cookie-session-backend>`)."
msgstr ""

#: ../../topics/http/sessions.txt:15
# 683e88693c5e42f28ef0073130c5494b
msgid "Enabling sessions"
msgstr ""

#: ../../topics/http/sessions.txt:17
# d149a64318454c6b8d57d4ee51dade65
msgid "Sessions are implemented via a piece of :doc:`middleware </ref/middleware>`."
msgstr ""

#: ../../topics/http/sessions.txt:19
# e1861cbabf364a8ba802933cb3471470
msgid "To enable session functionality, do the following:"
msgstr ""

#: ../../topics/http/sessions.txt:21
# 39a3ee211a864ce1ad7464231922e61b
msgid "Edit the :setting:`MIDDLEWARE_CLASSES` setting and make sure it contains ``'django.contrib.sessions.middleware.SessionMiddleware'``. The default ``settings.py`` created by ``django-admin.py startproject`` has ``SessionMiddleware`` activated."
msgstr ""

#: ../../topics/http/sessions.txt:26
# fdafc7b3237747cbae39eebc5159b021
msgid "If you don't want to use sessions, you might as well remove the ``SessionMiddleware`` line from :setting:`MIDDLEWARE_CLASSES` and ``'django.contrib.sessions'`` from your :setting:`INSTALLED_APPS`. It'll save you a small bit of overhead."
msgstr ""

#: ../../topics/http/sessions.txt:32
# 04e61a9efd99496088a14a91b9be77e0
msgid "Configuring the session engine"
msgstr ""

#: ../../topics/http/sessions.txt:34
# a94a15f149bc44279f3a146887b8c3ec
msgid "By default, Django stores sessions in your database (using the model ``django.contrib.sessions.models.Session``). Though this is convenient, in some setups it's faster to store session data elsewhere, so Django can be configured to store session data on your filesystem or in your cache."
msgstr ""

#: ../../topics/http/sessions.txt:40
# 4f5b41e6d40d480f9e1bb32b47d67052
msgid "Using database-backed sessions"
msgstr ""

#: ../../topics/http/sessions.txt:42
# 421ed64a8a01475aad5a44748a01357d
msgid "If you want to use a database-backed session, you need to add ``'django.contrib.sessions'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../topics/http/sessions.txt:45
# a1c940e170d3428eb3d5e947258df81b
msgid "Once you have configured your installation, run ``manage.py syncdb`` to install the single database table that stores session data."
msgstr ""

#: ../../topics/http/sessions.txt:51
# 3e767f7f08f54da6af816f1e0a81035c
msgid "Using cached sessions"
msgstr ""

#: ../../topics/http/sessions.txt:53
# 762e395ea7684e24acd1d9d05d6c996f
msgid "For better performance, you may want to use a cache-based session backend."
msgstr ""

#: ../../topics/http/sessions.txt:55
# eec04c5dcfa04b53bcbe502d63f2a218
msgid "To store session data using Django's cache system, you'll first need to make sure you've configured your cache; see the :doc:`cache documentation </topics/cache>` for details."
msgstr ""

#: ../../topics/http/sessions.txt:61
# 704fdbb67d8e479787cd3e93d1d40351
msgid "You should only use cache-based sessions if you're using the Memcached cache backend. The local-memory cache backend doesn't retain data long enough to be a good choice, and it'll be faster to use file or database sessions directly instead of sending everything through the file or database cache backends."
msgstr ""

#: ../../topics/http/sessions.txt:67
# 47100cc683424ae8af5abf5a9ef4a1d6
msgid "If you have multiple caches defined in :setting:`CACHES`, Django will use the default cache. To use another cache, set :setting:`SESSION_CACHE_ALIAS` to the name of that cache."
msgstr ""

#: ../../topics/http/sessions.txt:74
# 7075eb1e7d6e4847b24735f1ffa88569
msgid "Once your cache is configured, you've got two choices for how to store data in the cache:"
msgstr ""

#: ../../topics/http/sessions.txt:77
# 5a8440e73f704d24bde228d0bfe7f39c
msgid "Set :setting:`SESSION_ENGINE` to ``\"django.contrib.sessions.backends.cache\"`` for a simple caching session store. Session data will be stored directly your cache. However, session data may not be persistent: cached data can be evicted if the cache fills up or if the cache server is restarted."
msgstr ""

#: ../../topics/http/sessions.txt:83
# 5bd06abb0a9940b0bdcf437e2faf0534
msgid "For persistent, cached data, set :setting:`SESSION_ENGINE` to ``\"django.contrib.sessions.backends.cached_db\"``. This uses a write-through cache -- every write to the cache will also be written to the database. Session reads only use the database if the data is not already in the cache."
msgstr ""

#: ../../topics/http/sessions.txt:89
# bd86cb26437c4a13bee94a61040736ce
msgid "Both session stores are quite fast, but the simple cache is faster because it disregards persistence. In most cases, the ``cached_db`` backend will be fast enough, but if you need that last bit of performance, and are willing to let session data be expunged from time to time, the ``cache`` backend is for you."
msgstr ""

#: ../../topics/http/sessions.txt:94
# a3119340d88d46c79cff5a9358550e70
msgid "If you use the ``cached_db`` session backend, you also need to follow the configuration instructions for the `using database-backed sessions`_."
msgstr ""

#: ../../topics/http/sessions.txt:98
# bc4ca1ddc93d46d6b693c441ba4a7e62
msgid "Using file-based sessions"
msgstr ""

#: ../../topics/http/sessions.txt:100
# 3789552070e34a6da61ef45829364b86
msgid "To use file-based sessions, set the :setting:`SESSION_ENGINE` setting to ``\"django.contrib.sessions.backends.file\"``."
msgstr ""

#: ../../topics/http/sessions.txt:103
# b79cdc461eb3497f848c53601fecfb3f
msgid "You might also want to set the :setting:`SESSION_FILE_PATH` setting (which defaults to output from ``tempfile.gettempdir()``, most likely ``/tmp``) to control where Django stores session files. Be sure to check that your Web server has permissions to read and write to this location."
msgstr ""

#: ../../topics/http/sessions.txt:111
# 889781a16d3e4a6a8c6939b6a6058dd8
msgid "Using cookie-based sessions"
msgstr ""

#: ../../topics/http/sessions.txt:115
# 5d730899ab674dfda9aa91617e16ae26
msgid "To use cookies-based sessions, set the :setting:`SESSION_ENGINE` setting to ``\"django.contrib.sessions.backends.signed_cookies\"``. The session data will be stored using Django's tools for :doc:`cryptographic signing </topics/signing>` and the :setting:`SECRET_KEY` setting."
msgstr ""

#: ../../topics/http/sessions.txt:122
# 14dec4bf18d04f96809028b728649880
msgid "It's recommended to leave the :setting:`SESSION_COOKIE_HTTPONLY` setting ``True`` to prevent tampering of the stored data from JavaScript."
msgstr ""

#: ../../topics/http/sessions.txt:127
# ac5a43c814494923b3e9a114ecde29f4
msgid "**The session data is signed but not encrypted**"
msgstr ""

#: ../../topics/http/sessions.txt:129
# 3e7842e1358647eeb5fa366d710a53e9
msgid "When using the cookies backend the session data can be read by the client."
msgstr ""

#: ../../topics/http/sessions.txt:131
# abf8102c7c524121bdd5cc97ee357140
msgid "A MAC (Message Authentication Code) is used to protect the data against changes by the client, so that the session data will be invalidated when being tampered with. The same invalidation happens if the client storing the cookie (e.g. your user's browser) can't store all of the session cookie and drops data. Even though Django compresses the data, it's still entirely possible to exceed the `common limit of 4096 bytes`_ per cookie."
msgstr ""

#: ../../topics/http/sessions.txt:138
# a2ecfc10f66547ef8f5d9f24b8792950
msgid "**No freshness guarantee**"
msgstr ""

#: ../../topics/http/sessions.txt:140
# 77dbd5d4f95c4afd9e13b609f1094055
msgid "Note also that while the MAC can guarantee the authenticity of the data (that it was generated by your site, and not someone else), and the integrity of the data (that it is all there and correct), it cannot guarantee freshness i.e. that you are being sent back the last thing you sent to the client. This means that for some uses of session data, the cookie backend might open you up to `replay attacks`_. Cookies will only be detected as 'stale' if they are older than your :setting:`SESSION_COOKIE_AGE`."
msgstr ""

#: ../../topics/http/sessions.txt:149
# d7f26fb5e25740918558369b870499c3
msgid "**Performance**"
msgstr ""

#: ../../topics/http/sessions.txt:151
# 4c46b749ab754dac8671a6b176c31b02
msgid "Finally, the size of a cookie can have an impact on the `speed of your site`_."
msgstr ""

#: ../../topics/http/sessions.txt:158
# 3608aa1e3b3a409f93c6e450ee84f708
msgid "Using sessions in views"
msgstr ""

#: ../../topics/http/sessions.txt:160
# 4374090dc2ff433d979abf9c94a4c440
msgid "When ``SessionMiddleware`` is activated, each :class:`~django.http.HttpRequest` object -- the first argument to any Django view function -- will have a ``session`` attribute, which is a dictionary-like object."
msgstr ""

#: ../../topics/http/sessions.txt:164
# 6af6e1afa1d04463883b94f3036b1965
msgid "You can read it and write to ``request.session`` at any point in your view. You can edit it multiple times."
msgstr ""

#: ../../topics/http/sessions.txt:169
# e7fcf2f96b524d4389764aab2963811c
msgid "This is the base class for all session objects. It has the following standard dictionary methods:"
msgstr ""

#: ../../topics/http/sessions.txt:174
# 7c8c619f804f4baa839a9d1b6dac9f64
msgid "Example: ``fav_color = request.session['fav_color']``"
msgstr ""

#: ../../topics/http/sessions.txt:178
# e3e97786524942d888fc29615628bae4
msgid "Example: ``request.session['fav_color'] = 'blue'``"
msgstr ""

#: ../../topics/http/sessions.txt:182
# 239eaf00e5444ccf8a3d2adeb679becc
msgid "Example: ``del request.session['fav_color']``. This raises ``KeyError`` if the given ``key`` isn't already in the session."
msgstr ""

#: ../../topics/http/sessions.txt:187
# 1ae65416f5aa4818a7e4285870a1f445
msgid "Example: ``'fav_color' in request.session``"
msgstr ""

#: ../../topics/http/sessions.txt:191
# 7a50afee71fc4544bbc9089c2ea4dc9f
msgid "Example: ``fav_color = request.session.get('fav_color', 'red')``"
msgstr ""

#: ../../topics/http/sessions.txt:195
# 6ba8851569b2450f924f028afb6d897f
msgid "Example: ``fav_color = request.session.pop('fav_color')``"
msgstr ""

#: ../../topics/http/sessions.txt:205
# f9b609cd707645f098cbb731366f8971
msgid "It also has these methods:"
msgstr ""

#: ../../topics/http/sessions.txt:209
# 25bd934c94414bc09343925a43428d81
msgid "Delete the current session data from the session and regenerate the session key value that is sent back to the user in the cookie. This is used if you want to ensure that the previous session data can't be accessed again from the user's browser (for example, the :func:`django.contrib.auth.logout()` function calls it)."
msgstr ""

#: ../../topics/http/sessions.txt:217
# e32aefef01924ca5b9cd260548e466ec
msgid "Sets a test cookie to determine whether the user's browser supports cookies. Due to the way cookies work, you won't be able to test this until the user's next page request. See `Setting test cookies`_ below for more information."
msgstr ""

#: ../../topics/http/sessions.txt:224
# e9e45217ed164c28b66b828ad78f9bc2
msgid "Returns either ``True`` or ``False``, depending on whether the user's browser accepted the test cookie. Due to the way cookies work, you'll have to call ``set_test_cookie()`` on a previous, separate page request. See `Setting test cookies`_ below for more information."
msgstr ""

#: ../../topics/http/sessions.txt:231
# e6655af0f533481ba20f3a53199a9fda
msgid "Deletes the test cookie. Use this to clean up after yourself."
msgstr ""

#: ../../topics/http/sessions.txt:235
# 22d06b8627a04635a4fc0b0ef2d82826
msgid "Sets the expiration time for the session. You can pass a number of different values:"
msgstr ""

#: ../../topics/http/sessions.txt:238
# 39c982ac38104224ae9997074353f6cf
msgid "If ``value`` is an integer, the session will expire after that many seconds of inactivity. For example, calling ``request.session.set_expiry(300)`` would make the session expire in 5 minutes."
msgstr ""

#: ../../topics/http/sessions.txt:243
# 948bc466ef4d47e0a1a760223d8d376f
msgid "If ``value`` is a ``datetime`` or ``timedelta`` object, the session will expire at that specific date/time."
msgstr ""

#: ../../topics/http/sessions.txt:246
# 9a76e62df7f1437f81b9e99ee66ff1b7
msgid "If ``value`` is ``0``, the user's session cookie will expire when the user's Web browser is closed."
msgstr ""

#: ../../topics/http/sessions.txt:249
# 09b77f5b863342b79fc98b44a5b6d5f2
msgid "If ``value`` is ``None``, the session reverts to using the global session expiry policy."
msgstr ""

#: ../../topics/http/sessions.txt:252
# 6541b62db4ff4365be850ec57bc2f023
msgid "Reading a session is not considered activity for expiration purposes. Session expiration is computed from the last time the session was *modified*."
msgstr ""

#: ../../topics/http/sessions.txt:258
# f33428c384d7471ab3ddd37f93409b29
msgid "Returns the number of seconds until this session expires. For sessions with no custom expiration (or those set to expire at browser close), this will equal :setting:`SESSION_COOKIE_AGE`."
msgstr ""

#: ../../topics/http/sessions.txt:262
# d0dbfb5e158e47a1bd9938eb4bcbe84e
msgid "This function accepts two optional keyword arguments:"
msgstr ""

#: ../../topics/http/sessions.txt:264
# 7d85cd71ab7f48208d22f27e1ccc8a23
msgid "``modification``: last modification of the session, as a :class:`~datetime.datetime` object. Defaults to the current time."
msgstr ""

#: ../../topics/http/sessions.txt:266
# 18e7e699a4524619a13cbabd1ffbfff7
msgid "``expiry``: expiry information for the session, as a :class:`~datetime.datetime` object, an :func:`int` (in seconds), or ``None``. Defaults to the value stored in the session by :meth:`set_expiry`, if there is one, or ``None``."
msgstr ""

#: ../../topics/http/sessions.txt:273
# 04384fd39bcb4e4e8fc4f364c8359986
msgid "Returns the date this session will expire. For sessions with no custom expiration (or those set to expire at browser close), this will equal the date :setting:`SESSION_COOKIE_AGE` seconds from now."
msgstr ""

#: ../../topics/http/sessions.txt:277
# 333f578d0ad14404b161a306f235fd8d
msgid "This function accepts the same keyword argumets as :meth:`get_expiry_age`."
msgstr ""

#: ../../topics/http/sessions.txt:281
# 8bdcc0c4525046fb84a6500e71df6df7
msgid "Returns either ``True`` or ``False``, depending on whether the user's session cookie will expire when the user's Web browser is closed."
msgstr ""

#: ../../topics/http/sessions.txt:288
# 552529344a1d428f8e1487cc114fb4b6
msgid "Removes expired sessions from the session store. This class method is called by :djadmin:`clearsessions`."
msgstr ""

#: ../../topics/http/sessions.txt:292
# 6234ef117d754cbf91f3078864f6d923
msgid "Session object guidelines"
msgstr ""

#: ../../topics/http/sessions.txt:294
# f8fdacce31424a3cb96a957e96c0fb3f
msgid "Use normal Python strings as dictionary keys on ``request.session``. This is more of a convention than a hard-and-fast rule."
msgstr ""

#: ../../topics/http/sessions.txt:297
# 7479b6ed81424df49718618209f8da56
msgid "Session dictionary keys that begin with an underscore are reserved for internal use by Django."
msgstr ""

#: ../../topics/http/sessions.txt:300
# 58cf0949dc1c4d4ca24a4224edebdda6
msgid "Don't override ``request.session`` with a new object, and don't access or set its attributes. Use it like a Python dictionary."
msgstr ""

#: ../../topics/http/sessions.txt:306
# 8d60f05d4086427ea17c1e92adfdc580
msgid "This simplistic view sets a ``has_commented`` variable to ``True`` after a user posts a comment. It doesn't let a user post a comment more than once::"
msgstr ""

#: ../../topics/http/sessions.txt:317
# e044a19dd5774bb3bec6495218b21e69
msgid "This simplistic view logs in a \"member\" of the site::"
msgstr ""

#: ../../topics/http/sessions.txt:327
# 222d6cde783f49ffb155a71432c03c32
msgid "...And this one logs a member out, according to ``login()`` above::"
msgstr ""

#: ../../topics/http/sessions.txt:336
# 6d8796512be14269838af16735f737e1
msgid "The standard :meth:`django.contrib.auth.logout` function actually does a bit more than this to prevent inadvertent data leakage. It calls the :meth:`~backends.base.SessionBase.flush` method of ``request.session``. We are using this example as a demonstration of how to work with session objects, not as a full ``logout()`` implementation."
msgstr ""

#: ../../topics/http/sessions.txt:343
# 7c7597699f894699b5d7d48fbf321387
msgid "Setting test cookies"
msgstr ""

#: ../../topics/http/sessions.txt:345
# 1fea6260f5644a3fbde6b84b4e13483f
msgid "As a convenience, Django provides an easy way to test whether the user's browser accepts cookies. Just call the :meth:`~backends.base.SessionBase.set_test_cookie` method of ``request.session`` in a view, and call :meth:`~backends.base.SessionBase.test_cookie_worked` in a subsequent view -- not in the same view call."
msgstr ""

#: ../../topics/http/sessions.txt:352
# 4f2136893dc24f878924e92088b548f0
msgid "This awkward split between ``set_test_cookie()`` and ``test_cookie_worked()`` is necessary due to the way cookies work. When you set a cookie, you can't actually tell whether a browser accepted it until the browser's next request."
msgstr ""

#: ../../topics/http/sessions.txt:356
# edc1bbd3abef418e9daf859038f52b74
msgid "It's good practice to use :meth:`~backends.base.SessionBase.delete_test_cookie()` to clean up after yourself. Do this after you've verified that the test cookie worked."
msgstr ""

#: ../../topics/http/sessions.txt:360
# c8fc2e8c2a6542b5a6fe786ee7a4f46e
msgid "Here's a typical usage example::"
msgstr ""

#: ../../topics/http/sessions.txt:373
# 1177b17905d14abe8709857868d12f11
msgid "Using sessions out of views"
msgstr ""

#: ../../topics/http/sessions.txt:375
# 541bea7e433a468aaedbfced68c0dc3d
msgid "An API is available to manipulate session data outside of a view::"
msgstr ""

#: ../../topics/http/sessions.txt:389
# af6ecc3a8ca84886b12bf97dd50b5283
msgid "In order to prevent session fixation attacks, sessions keys that don't exist are regenerated::"
msgstr ""

#: ../../topics/http/sessions.txt:398
# a3dc2fd143b14d8c81f58e55d2478db8
msgid "If you're using the ``django.contrib.sessions.backends.db`` backend, each session is just a normal Django model. The ``Session`` model is defined in ``django/contrib/sessions/models.py``. Because it's a normal model, you can access sessions using the normal Django database API::"
msgstr ""

#: ../../topics/http/sessions.txt:408
# 1d1daa7831264cc083aeb576c6690479
msgid "Note that you'll need to call ``get_decoded()`` to get the session dictionary. This is necessary because the dictionary is stored in an encoded format::"
msgstr ""

#: ../../topics/http/sessions.txt:417
# e8409acabce642fa8c6d0b9b58a3f05e
msgid "When sessions are saved"
msgstr ""

#: ../../topics/http/sessions.txt:419
# 416f47e64b2546cba50ce318a812a676
msgid "By default, Django only saves to the session database when the session has been modified -- that is if any of its dictionary values have been assigned or deleted::"
msgstr ""

#: ../../topics/http/sessions.txt:436
# e56d1460ab0441c7be952bad57074bd5
msgid "In the last case of the above example, we can tell the session object explicitly that it has been modified by setting the ``modified`` attribute on the session object::"
msgstr ""

#: ../../topics/http/sessions.txt:442
# c595f51217ce4fc39ef294c414597655
msgid "To change this default behavior, set the :setting:`SESSION_SAVE_EVERY_REQUEST` setting to ``True``. When set to ``True``, Django will save the session to the database on every single request."
msgstr ""

#: ../../topics/http/sessions.txt:446
# 28071c7a40584fc885d011d2a9017dbc
msgid "Note that the session cookie is only sent when a session has been created or modified. If :setting:`SESSION_SAVE_EVERY_REQUEST` is ``True``, the session cookie will be sent on every request."
msgstr ""

#: ../../topics/http/sessions.txt:450
# 72ee6e06876b483aa99c0c3c6085dc63
msgid "Similarly, the ``expires`` part of a session cookie is updated each time the session cookie is sent."
msgstr ""

#: ../../topics/http/sessions.txt:457
# 271d5a771f10466b805f48b42b5b08f2
msgid "Browser-length sessions vs. persistent sessions"
msgstr ""

#: ../../topics/http/sessions.txt:459
# 4f85bc22e4a249c9aefe1248f7c87a73
msgid "You can control whether the session framework uses browser-length sessions vs. persistent sessions with the :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` setting."
msgstr ""

#: ../../topics/http/sessions.txt:463
# 377c99a8a7514f23b05e02dae4746ff2
msgid "By default, :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` is set to ``False``, which means session cookies will be stored in users' browsers for as long as :setting:`SESSION_COOKIE_AGE`. Use this if you don't want people to have to log in every time they open a browser."
msgstr ""

#: ../../topics/http/sessions.txt:468
# 5c6faf1c90ca4989960b7216a5c7b817
msgid "If :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` is set to ``True``, Django will use browser-length cookies -- cookies that expire as soon as the user closes his or her browser. Use this if you want people to have to log in every time they open a browser."
msgstr ""

#: ../../topics/http/sessions.txt:473
# 9bf3460d8d5e4f3b97ff4c4789dedbc5
msgid "This setting is a global default and can be overwritten at a per-session level by explicitly calling the :meth:`~backends.base.SessionBase.set_expiry` method of ``request.session`` as described above in `using sessions in views`_."
msgstr ""

#: ../../topics/http/sessions.txt:479
# 76e865e80f73459795e7dc74b0b2ceb2
msgid "Some browsers (Chrome, for example) provide settings that allow users to continue browsing sessions after closing and re-opening the browser. In some cases, this can interfere with the :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` setting and prevent sessions from expiring on browser close. Please be aware of this while testing Django applications which have the :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` setting enabled."
msgstr ""

#: ../../topics/http/sessions.txt:488
# 907a1880260142c8a06b74beafccc5c0
msgid "Clearing the session store"
msgstr ""

#: ../../topics/http/sessions.txt:490
# ecde014d17e247429f7872286024f6a5
msgid "As users create new sessions on your website, session data can accumulate in your session store. If you're using the database backend, the ``django_session`` database table will grow. If you're using the file backend, your temporary directory will contain an increasing number of files."
msgstr ""

#: ../../topics/http/sessions.txt:495
# bcb683dadeda4610b77431a6a80b9cc9
msgid "To understand this problem, consider what happens with the database backend. When a user logs in, Django adds a row to the ``django_session`` database table. Django updates this row each time the session data changes. If the user logs out manually, Django deletes the row. But if the user does *not* log out, the row never gets deleted. A similar process happens with the file backend."
msgstr ""

#: ../../topics/http/sessions.txt:501
# 5527389fef5c461a9695b2d6a4b917f8
msgid "Django does *not* provide automatic purging of expired sessions. Therefore, it's your job to purge expired sessions on a regular basis. Django provides a clean-up management command for this purpose: :djadmin:`clearsessions`. It's recommended to call this command on a regular basis, for example as a daily cron job."
msgstr ""

#: ../../topics/http/sessions.txt:507
# 5f46e99cb5304ab797ac429f11880469
msgid "Note that the cache backend isn't vulnerable to this problem, because caches automatically delete stale data. Neither is the cookie backend, because the session data is stored by the users' browsers."
msgstr ""

#: ../../topics/http/sessions.txt:512
# facc3eac5c2c4da3ac5c088699bebabb
msgid "Settings"
msgstr ""

#: ../../topics/http/sessions.txt:514
# 2e39d8581d374c39b1262565613ef384
msgid "A few :doc:`Django settings </ref/settings>` give you control over session behavior:"
msgstr ""

#: ../../topics/http/sessions.txt:518
# e8b0273835ff453c89cb40acaa8a1b0a
msgid "SESSION_ENGINE"
msgstr ""

#: ../../topics/http/sessions.txt:520
# 97e9aaaf020c44c7b6814977c77cd4fd
msgid "Default: ``django.contrib.sessions.backends.db``"
msgstr ""

#: ../../topics/http/sessions.txt:522
# a0c5e01cc6584360935ae31752a65c47
msgid "Controls where Django stores session data. Valid values are:"
msgstr ""

#: ../../topics/http/sessions.txt:524
# 8945921618c2470197ba60009fda99aa
msgid "``'django.contrib.sessions.backends.db'``"
msgstr ""

#: ../../topics/http/sessions.txt:525
# b24caf27d129488fba5fdac3c0998a5c
msgid "``'django.contrib.sessions.backends.file'``"
msgstr ""

#: ../../topics/http/sessions.txt:526
# 04bacc8ddfd14268bb26ad1ee8a039de
msgid "``'django.contrib.sessions.backends.cache'``"
msgstr ""

#: ../../topics/http/sessions.txt:527
# 8399aa212fd64c4892f1092d4e11cced
msgid "``'django.contrib.sessions.backends.cached_db'``"
msgstr ""

#: ../../topics/http/sessions.txt:528
# 0fb529fdcd8349b0bb61120c216fb5e7
msgid "``'django.contrib.sessions.backends.signed_cookies'``"
msgstr ""

#: ../../topics/http/sessions.txt:530
# 502edd5cfd9e4c22b20a5b2ea3bf15ab
msgid "See `configuring the session engine`_ for more details."
msgstr ""

#: ../../topics/http/sessions.txt:533
# c7c88d2b233e4bbe9d7004c008c9114c
msgid "SESSION_FILE_PATH"
msgstr ""

#: ../../topics/http/sessions.txt:535
# dec27c9e0aed4d9a929ed290101a3ca5
msgid "Default: ``/tmp/``"
msgstr ""

#: ../../topics/http/sessions.txt:537
# ed11640cb6444235877dec09f02551e0
msgid "If you're using file-based session storage, this sets the directory in which Django will store session data."
msgstr ""

#: ../../topics/http/sessions.txt:541
# e7698274480247bcb1a7a02cfb392691
msgid "SESSION_COOKIE_AGE"
msgstr ""

#: ../../topics/http/sessions.txt:543
# ae18bfb171264138a6457a3a6ff24794
msgid "Default: ``1209600`` (2 weeks, in seconds)"
msgstr ""

#: ../../topics/http/sessions.txt:545
# 19e9b51e9f9b4147ab36ae61c8769eee
msgid "The age of session cookies, in seconds."
msgstr ""

#: ../../topics/http/sessions.txt:548
# da49a871913a443fbb271fad1764944b
msgid "SESSION_COOKIE_DOMAIN"
msgstr ""

#: ../../topics/http/sessions.txt:550
# 812b5f7a251545ea969f0184e55b7e9c
msgid "Default: ``None``"
msgstr ""

#: ../../topics/http/sessions.txt:552
# 3f52a18f5d254a6d8e3454ebd2750299
msgid "The domain to use for session cookies. Set this to a string such as ``\".example.com\"`` (note the leading dot!) for cross-domain cookies, or use ``None`` for a standard domain cookie."
msgstr ""

#: ../../topics/http/sessions.txt:557
# 2386a120421b4bdba17eaf3f462f0cf0
msgid "SESSION_COOKIE_HTTPONLY"
msgstr ""

#: ../../topics/http/sessions.txt:559
# 51ecea6ddccf42839170cceee73cc6ec
msgid "Default: ``True``"
msgstr ""

#: ../../topics/http/sessions.txt:561
# 9b0c0b37fa404ccebf0eb23b0b0af373
msgid "Whether to use HTTPOnly flag on the session cookie. If this is set to ``True``, client-side JavaScript will not to be able to access the session cookie."
msgstr ""

#: ../../topics/http/sessions.txt:565
# 39e05dd758e54c0a9f4c43226b188cc8
msgid "HTTPOnly_ is a flag included in a Set-Cookie HTTP response header. It is not part of the :rfc:`2109` standard for cookies, and it isn't honored consistently by all browsers. However, when it is honored, it can be a useful way to mitigate the risk of client side script accessing the protected cookie data."
msgstr ""

#: ../../topics/http/sessions.txt:577
# 974c608b285648c4a44e17aa17c75d78
msgid "SESSION_COOKIE_NAME"
msgstr ""

#: ../../topics/http/sessions.txt:579
# 63ba9e5b03de499d91ba9f53b02e1261
msgid "Default: ``'sessionid'``"
msgstr ""

#: ../../topics/http/sessions.txt:581
# 77b18580af224d5193d8267c5fda667e
msgid "The name of the cookie to use for sessions. This can be whatever you want."
msgstr ""

#: ../../topics/http/sessions.txt:584
# 7f7348da12d6479bb060c8208939496f
msgid "SESSION_COOKIE_PATH"
msgstr ""

#: ../../topics/http/sessions.txt:586
# 0a6276ae80c0453296ec33dc60259fda
msgid "Default: ``'/'``"
msgstr ""

#: ../../topics/http/sessions.txt:588
# 277b0d12891747b286ff72b1a047e424
msgid "The path set on the session cookie. This should either match the URL path of your Django installation or be parent of that path."
msgstr ""

#: ../../topics/http/sessions.txt:591
# e62b0fe772b04b37bedc955a556d320b
msgid "This is useful if you have multiple Django instances running under the same hostname. They can use different cookie paths, and each instance will only see its own session cookie."
msgstr ""

#: ../../topics/http/sessions.txt:596
# 4027965a2ddb4d4b906344005e09682a
msgid "SESSION_COOKIE_SECURE"
msgstr ""

#: ../../topics/http/sessions.txt:600
# 88f3f1cd302d473d99c890de14e2240f
msgid "Whether to use a secure cookie for the session cookie. If this is set to ``True``, the cookie will be marked as \"secure,\" which means browsers may ensure that the cookie is only sent under an HTTPS connection."
msgstr ""

#: ../../topics/http/sessions.txt:605
# fc0c5bc953e34945858f949ecd751ead
msgid "SESSION_EXPIRE_AT_BROWSER_CLOSE"
msgstr ""

#: ../../topics/http/sessions.txt:609
# 88153741ba4341ccb9fb9255e9e805ce
msgid "Whether to expire the session when the user closes his or her browser. See \"Browser-length sessions vs. persistent sessions\" above."
msgstr ""

#: ../../topics/http/sessions.txt:613
# 5bd2958f68114be78962d4b5ccf2668b
msgid "SESSION_SAVE_EVERY_REQUEST"
msgstr ""

#: ../../topics/http/sessions.txt:617
# e7a8f86522d0402183e83af4c417492f
msgid "Whether to save the session data on every request. If this is ``False`` (default), then the session data will only be saved if it has been modified -- that is, if any of its dictionary values have been assigned or deleted."
msgstr ""

#: ../../topics/http/sessions.txt:624
# a082ff516ebb445abe73151717446d5d
msgid "Technical details"
msgstr ""

#: ../../topics/http/sessions.txt:626
# a951f16d68ef4d869e00c3855950cf58
msgid "The session dictionary should accept any pickleable Python object. See the :mod:`pickle` module for more information."
msgstr ""

#: ../../topics/http/sessions.txt:629
# 2c8a150d92074a029aca4a98fb5f7846
msgid "Session data is stored in a database table named ``django_session`` ."
msgstr ""

#: ../../topics/http/sessions.txt:631
# 95469a72fbd3414a9c0c5d8251cf079d
msgid "Django only sends a cookie if it needs to. If you don't set any session data, it won't send a session cookie."
msgstr ""

#: ../../topics/http/sessions.txt:635
# ae687746c4ed4fe797c29f31e49930fb
msgid "Session IDs in URLs"
msgstr ""

#: ../../topics/http/sessions.txt:637
# 12a7c079ec034fd7998a2a649bdb2a14
msgid "The Django sessions framework is entirely, and solely, cookie-based. It does not fall back to putting session IDs in URLs as a last resort, as PHP does. This is an intentional design decision. Not only does that behavior make URLs ugly, it makes your site vulnerable to session-ID theft via the \"Referer\" header."
msgstr ""

#: ../../topics/http/shortcuts.txt:3
# 23be95560ea4422db5e5aac83821ee4d
msgid "Django shortcut functions"
msgstr ""

#: ../../topics/http/shortcuts.txt:11
# c2bede32d502442998ba3447860833e6
msgid "The package ``django.shortcuts`` collects helper functions and classes that \"span\" multiple levels of MVC. In other words, these functions/classes introduce controlled coupling for convenience's sake."
msgstr ""

#: ../../topics/http/shortcuts.txt:16
# 1940002da1b343528a9739ddd35f3244
msgid "``render``"
msgstr ""

#: ../../topics/http/shortcuts.txt:20
# 068cc819da4e498280d27a45b11171c6
msgid "Combines a given template with a given context dictionary and returns an :class:`~django.http.HttpResponse` object with that rendered text."
msgstr ""

#: ../../topics/http/shortcuts.txt:23
# afcbe545dce341bbb020cef45c7ce572
msgid ":func:`render()` is the same as a call to :func:`render_to_response()` with a `context_instance` argument that forces the use of a :class:`~django.template.RequestContext`."
msgstr ""

#: ../../topics/http/shortcuts.txt:28
#: ../../topics/http/shortcuts.txt:99
#: ../../topics/http/shortcuts.txt:236
#: ../../topics/http/shortcuts.txt:282
#: ../../topics/pagination.txt:143
# ecd9d55a966848909bd7816664cb07f4
# eba877c014334d3e990602ee3684eec2
# c5aaac0e6ed149079b99c46f06bca6e5
# d035e151f18447bcba5b39ae2b20d412
# 06338cef1529460faeac1d1667fe6a88
msgid "Required arguments"
msgstr ""

#: ../../topics/http/shortcuts.txt:31
# b12e40658a7042b89e82f8cc01c1d2f1
msgid "The request object used to generate this response."
msgstr ""

#: ../../topics/http/shortcuts.txt:34
# 7cb410aa65d74283ac2b3d8ca0b730ad
msgid "The full name of a template to use or sequence of template names."
msgstr ""

#: ../../topics/http/shortcuts.txt:37
#: ../../topics/http/shortcuts.txt:108
#: ../../topics/pagination.txt:154
# 05fa22a3dddc4ab19809448b4f24b36e
# 9ae4aa519e9f478d99d5fe9282bce174
# 9c7f491f53304fee842ec662f599f886
msgid "Optional arguments"
msgstr ""

#: ../../topics/http/shortcuts.txt:40
#: ../../topics/http/shortcuts.txt:111
# b457032544bc4c7a83520e3bbb208fd0
# cd4f90f22ed54ed186ab0492f1e07ea1
msgid "A dictionary of values to add to the template context. By default, this is an empty dictionary. If a value in the dictionary is callable, the view will call it just before rendering the template."
msgstr ""

#: ../../topics/http/shortcuts.txt:45
# d76e0fc4cb5f4d99a566d59390700bc9
msgid "The context instance to render the template with. By default, the template will be rendered with a ``RequestContext`` instance (filled with values from ``request`` and ``dictionary``)."
msgstr ""

#: ../../topics/http/shortcuts.txt:50
#: ../../topics/http/shortcuts.txt:128
# ec0740136e85465385faddb9343d4c0e
# 51c92a646f4d40c691f6148a6d1a043a
msgid "The MIME type to use for the resulting document. Defaults to the value of the :setting:`DEFAULT_CONTENT_TYPE` setting."
msgstr ""

#: ../../topics/http/shortcuts.txt:57
# 1c0e5c03ee69455aa5eb95fd33cafc02
msgid "The status code for the response. Defaults to ``200``."
msgstr ""

#: ../../topics/http/shortcuts.txt:60
# 9f336ba5f890483ea4a286a7d9ebe798
msgid "A hint indicating which application contains the current view. See the :ref:`namespaced URL resolution strategy <topics-http-reversing-url-namespaces>` for more information."
msgstr ""

#: ../../topics/http/shortcuts.txt:65
#: ../../topics/http/shortcuts.txt:136
#: ../../topics/http/shortcuts.txt:248
#: ../../topics/http/shortcuts.txt:294
#: ../../topics/http/urls.txt:66
#: ../../topics/http/urls.txt:746
#: ../../topics/pagination.txt:13
#: ../../topics/testing/advanced.txt:36
#: ../../topics/testing/overview.txt:812
# f8271701a6254d53bf93cd07820369f0
# f9e4c407adb54d939c1a28cde129e5ea
# 2bb210c253984816be3e2761fabc756b
# 3d4611a1cd9643ac9aaccdc8e3fc4344
# 1fc80cdf24c34f58996fdf1346e4d58a
# d27713f8a25d4dd4ac5597f7adaaddbe
# bdf413580a8940efaf7a390346a2a051
# 646bd4959eab4e508a87717c37e7b6b3
# cfbed9fff4c9408ea8c3d18f60298402
msgid "Example"
msgstr ""

#: ../../topics/http/shortcuts.txt:67
#: ../../topics/http/shortcuts.txt:138
# 3b24122e9d784ecc84857778bea8fcbb
# 91637b8aba48458bbd434c93fef3d6c9
msgid "The following example renders the template ``myapp/index.html`` with the MIME type :mimetype:`application/xhtml+xml`::"
msgstr ""

#: ../../topics/http/shortcuts.txt:77
#: ../../topics/http/shortcuts.txt:148
#: ../../topics/http/shortcuts.txt:258
#: ../../topics/http/shortcuts.txt:303
# 1f5d588ed7bf4bd8b1892ec678457359
# 3b40be984a89450a95576dbdfcf2488c
# 4b2029173db045ce83fc9531914cb0d9
# eca3b523c38e4a8f95eda26e4493ada3
msgid "This example is equivalent to::"
msgstr ""

#: ../../topics/http/shortcuts.txt:91
# b54feb6fda444bf0b7d898adc6b8f165
msgid "``render_to_response``"
msgstr ""

#: ../../topics/http/shortcuts.txt:95
# 0a69c12cc46c42158943b6cb0cedc757
msgid "Renders a given template with a given context dictionary and returns an :class:`~django.http.HttpResponse` object with that rendered text."
msgstr ""

#: ../../topics/http/shortcuts.txt:102
# 582e996d880b43bf869748b1d52b4c93
msgid "The full name of a template to use or sequence of template names. If a sequence is given, the first template that exists will be used. See the :ref:`template loader documentation <ref-templates-api-the-python-api>` for more information on how templates are found."
msgstr ""

#: ../../topics/http/shortcuts.txt:116
# be44e99e892d4cd8a851fe1afbaa6957
msgid "The context instance to render the template with. By default, the template will be rendered with a :class:`~django.template.Context` instance (filled with values from ``dictionary``). If you need to use :ref:`context processors <subclassing-context-requestcontext>`, render the template with a :class:`~django.template.RequestContext` instance instead. Your code might look something like this::"
msgstr ""

#: ../../topics/http/shortcuts.txt:161
# 32068178d05d49baa5c36309b087d6a3
msgid "``redirect``"
msgstr ""

#: ../../topics/http/shortcuts.txt:165
# 7e41cb17533c4935991dea583e98581a
msgid "Returns an :class:`~django.http.HttpResponseRedirect` to the appropriate URL for the arguments passed."
msgstr ""

#: ../../topics/http/shortcuts.txt:168
# fbb205d555a246f19e4a87a9b34631eb
msgid "The arguments could be:"
msgstr ""

#: ../../topics/http/shortcuts.txt:170
# ab63af552fc74186a8b9603ddc57b722
msgid "A model: the model's `get_absolute_url()` function will be called."
msgstr ""

#: ../../topics/http/shortcuts.txt:172
# e976b4b16afa462e9f700adf94efa720
msgid "A view name, possibly with arguments: :func:`urlresolvers.reverse <django.core.urlresolvers.reverse>` will be used to reverse-resolve the name."
msgstr ""

#: ../../topics/http/shortcuts.txt:176
# 0ca989a9c54543ab96300122618afc61
msgid "A URL, which will be used as-is for the redirect location."
msgstr ""

#: ../../topics/http/shortcuts.txt:178
# 49a1a01ffa8540b4be823cd4fd9fd985
msgid "By default issues a temporary redirect; pass ``permanent=True`` to issue a permanent redirect"
msgstr ""

#: ../../topics/http/shortcuts.txt:184
# accd53fbddad4469a65fe3c0ba956dc8
msgid "You can use the :func:`redirect` function in a number of ways."
msgstr ""

#: ../../topics/http/shortcuts.txt:186
# 6b647418e2a04e26a193107cc6defb9d
msgid "By passing some object; that object's :meth:`~django.db.models.Model.get_absolute_url` method will be called to figure out the redirect URL::"
msgstr ""

#: ../../topics/http/shortcuts.txt:197
# c6c7bb9e45ae4fa1a1a756ec27ec6302
msgid "By passing the name of a view and optionally some positional or keyword arguments; the URL will be reverse resolved using the :func:`~django.core.urlresolvers.reverse` method::"
msgstr ""

#: ../../topics/http/shortcuts.txt:205
# a92b86b0b72d4bdfb04953cc7970daa2
msgid "By passing a hardcoded URL to redirect to::"
msgstr ""

#: ../../topics/http/shortcuts.txt:211
# f137a201cb934a96a6d90a42dcf590d8
msgid "This also works with full URLs::"
msgstr ""

#: ../../topics/http/shortcuts.txt:217
# 752289b46500442a8f7f4fb3d7bae512
msgid "By default, :func:`redirect` returns a temporary redirect. All of the above forms accept a ``permanent`` argument; if set to ``True`` a permanent redirect will be returned::"
msgstr ""

#: ../../topics/http/shortcuts.txt:227
# b4c1be96d5c543bc8cab535314403fb5
msgid "``get_object_or_404``"
msgstr ""

#: ../../topics/http/shortcuts.txt:231
# 33ac000ce6f64066912d5273f4e6fe57
msgid "Calls :meth:`~django.db.models.query.QuerySet.get()` on a given model manager, but it raises :class:`~django.http.Http404` instead of the model's :class:`~django.core.exceptions.DoesNotExist` exception."
msgstr ""

#: ../../topics/http/shortcuts.txt:239
# 4ccb82d7dd304981adb26bc8dd563986
msgid "A :class:`~django.db.models.Model`, :class:`~django.db.models.Manager` or :class:`~django.db.models.query.QuerySet` instance from which to get the object."
msgstr ""

#: ../../topics/http/shortcuts.txt:244
#: ../../topics/http/shortcuts.txt:290
# f1a0c1a0463c4a78821fbecee174fcbb
# 16c79e19de5b42fe8150a56cf34b52b1
msgid "Lookup parameters, which should be in the format accepted by ``get()`` and ``filter()``."
msgstr ""

#: ../../topics/http/shortcuts.txt:250
# 3c4ce25dfe134414bcf8d76c1328c82f
msgid "The following example gets the object with the primary key of 1 from ``MyModel``::"
msgstr ""

#: ../../topics/http/shortcuts.txt:268
# 25507276a4284b738f9cb0d42661247e
msgid "Note: As with ``get()``, a :class:`~django.core.exceptions.MultipleObjectsReturned` exception will be raised if more than one object is found."
msgstr ""

#: ../../topics/http/shortcuts.txt:273
# 24b8f368ba2646959c369e3996832d82
msgid "``get_list_or_404``"
msgstr ""

#: ../../topics/http/shortcuts.txt:277
# 06050cbf2598475dae124f4aa3fa3fde
msgid "Returns the result of :meth:`~django.db.models.query.QuerySet.filter()` on a given model manager, raising :class:`~django.http.Http404` if the resulting list is empty."
msgstr ""

#: ../../topics/http/shortcuts.txt:285
# 86f1310b374942c884bcef892b767704
msgid "A :class:`~django.db.models.Model`, :class:`~django.db.models.Manager` or :class:`~django.db.models.query.QuerySet` instance from which to get the list."
msgstr ""

#: ../../topics/http/shortcuts.txt:296
# 5cb43c26d2eb48f5985b20e6be19ca14
msgid "The following example gets all published objects from ``MyModel``::"
msgstr ""

#: ../../topics/http/urls.txt:3
# 23e68f497fc5440aa98eeff254bb984c
msgid "URL dispatcher"
msgstr ""

#: ../../topics/http/urls.txt:5
# ee52f5610a594fe9b5e7bcd886a5309c
msgid "A clean, elegant URL scheme is an important detail in a high-quality Web application. Django lets you design URLs however you want, with no framework limitations."
msgstr ""

#: ../../topics/http/urls.txt:9
# 4e8433e169394e11aa2899e53abedfe4
msgid "There's no ``.php`` or ``.cgi`` required, and certainly none of that ``0,2097,1-1-1928,00`` nonsense."
msgstr ""

#: ../../topics/http/urls.txt:12
# 875f00cf756a42e58cb4dc7924b2f295
msgid "See `Cool URIs don't change`_, by World Wide Web creator Tim Berners-Lee, for excellent arguments on why URLs should be clean and usable."
msgstr ""

#: ../../topics/http/urls.txt:20
# fa0853084eed459fa48c85fb9e69673a
msgid "To design URLs for an app, you create a Python module informally called a **URLconf** (URL configuration). This module is pure Python code and is a simple mapping between URL patterns (simple regular expressions) to Python functions (your views)."
msgstr ""

#: ../../topics/http/urls.txt:25
# 9afe191ae29242bea7f1d23f8e351f38
msgid "This mapping can be as short or as long as needed. It can reference other mappings. And, because it's pure Python code, it can be constructed dynamically."
msgstr ""

#: ../../topics/http/urls.txt:37
# a20b165bceb4490ca4fc91c791d9f9e1
msgid "How Django processes a request"
msgstr ""

#: ../../topics/http/urls.txt:39
# f18301f0d55448edb94b47ccac53afd5
msgid "When a user requests a page from your Django-powered site, this is the algorithm the system follows to determine which Python code to execute:"
msgstr ""

#: ../../topics/http/urls.txt:42
# 6e941b0377fd4ce5b1ec462ba73d6a21
msgid "Django determines the root URLconf module to use. Ordinarily, this is the value of the :setting:`ROOT_URLCONF` setting, but if the incoming ``HttpRequest`` object has an attribute called ``urlconf`` (set by middleware :ref:`request processing <request-middleware>`), its value will be used in place of the :setting:`ROOT_URLCONF` setting."
msgstr ""

#: ../../topics/http/urls.txt:48
# 6df2d4b13162475f9c5569bca59c6dd0
msgid "Django loads that Python module and looks for the variable ``urlpatterns``. This should be a Python list, in the format returned by the function :func:`django.conf.urls.patterns`."
msgstr ""

#: ../../topics/http/urls.txt:52
# c86330a4a4324b56a3b7df76e482ac21
msgid "Django runs through each URL pattern, in order, and stops at the first one that matches the requested URL."
msgstr ""

#: ../../topics/http/urls.txt:55
# 833c983a212e48a8841095554b4f0225
msgid "Once one of the regexes matches, Django imports and calls the given view, which is a simple Python function (or a :doc:`class based view </topics/class-based-views/index>`). The view gets passed an :class:`~django.http.HttpRequest` as its first argument and any values captured in the regex as remaining arguments."
msgstr ""

#: ../../topics/http/urls.txt:61
# 0c3f1eefbecd44d18eecd7c0bad7fd69
msgid "If no regex matches, or if an exception is raised during any point in this process, Django invokes an appropriate error-handling view. See `Error handling`_ below."
msgstr ""

#: ../../topics/http/urls.txt:68
# 28000c0258df4bcf9fac8f9d1027ff45
msgid "Here's a sample URLconf::"
msgstr ""

#: ../../topics/http/urls.txt:81
# 4c94b7ded2d04bdfada989ee4cf2b759
msgid "To capture a value from the URL, just put parenthesis around it."
msgstr ""

#: ../../topics/http/urls.txt:83
# dd520f674ac1464b9106e24117e9cdf5
msgid "There's no need to add a leading slash, because every URL has that. For example, it's ``^articles``, not ``^/articles``."
msgstr ""

#: ../../topics/http/urls.txt:86
# 3b409e8fe90d49bbbf96559066237f09
msgid "The ``'r'`` in front of each regular expression string is optional but recommended. It tells Python that a string is \"raw\" -- that nothing in the string should be escaped. See `Dive Into Python's explanation`_."
msgstr ""

#: ../../topics/http/urls.txt:90
# f9f151e94f7e44ddafc713b423729a75
msgid "Example requests:"
msgstr ""

#: ../../topics/http/urls.txt:92
# 0ea03654774f4d8ba334dcb1f05ebd5d
msgid "A request to ``/articles/2005/03/`` would match the third entry in the list. Django would call the function ``news.views.month_archive(request, '2005', '03')``."
msgstr ""

#: ../../topics/http/urls.txt:96
# c8466c461d9a4410963bdec369b06844
msgid "``/articles/2005/3/`` would not match any URL patterns, because the third entry in the list requires two digits for the month."
msgstr ""

#: ../../topics/http/urls.txt:99
# 6e99a158d47148c79cfab200aad519a3
msgid "``/articles/2003/`` would match the first pattern in the list, not the second one, because the patterns are tested in order, and the first one is the first test to pass. Feel free to exploit the ordering to insert special cases like this."
msgstr ""

#: ../../topics/http/urls.txt:104
# c2caf37952c94767a6a568425ae44942
msgid "``/articles/2003`` would not match any of these patterns, because each pattern requires that the URL end with a slash."
msgstr ""

#: ../../topics/http/urls.txt:107
# 2137b00322514dd3b07168a269a9d860
msgid "``/articles/2003/03/03/`` would match the final pattern. Django would call the function ``news.views.article_detail(request, '2003', '03', '03')``."
msgstr ""

#: ../../topics/http/urls.txt:113
# 93ba29ac99ef412580e1dc3f7974f807
msgid "Named groups"
msgstr ""

#: ../../topics/http/urls.txt:115
# c837f6d7144f45ee94f8f6131a61ea1e
msgid "The above example used simple, *non-named* regular-expression groups (via parenthesis) to capture bits of the URL and pass them as *positional* arguments to a view. In more advanced usage, it's possible to use *named* regular-expression groups to capture URL bits and pass them as *keyword* arguments to a view."
msgstr ""

#: ../../topics/http/urls.txt:121
# 29639b45434745af98ce1fe947ba9213
msgid "In Python regular expressions, the syntax for named regular-expression groups is ``(?P<name>pattern)``, where ``name`` is the name of the group and ``pattern`` is some pattern to match."
msgstr ""

#: ../../topics/http/urls.txt:125
# 878ef1f830f046d493c05146b5969741
msgid "Here's the above example URLconf, rewritten to use named groups::"
msgstr ""

#: ../../topics/http/urls.txt:134
# 06e717989a0a461e99ed0f23345efbb5
msgid "This accomplishes exactly the same thing as the previous example, with one subtle difference: The captured values are passed to view functions as keyword arguments rather than positional arguments. For example:"
msgstr ""

#: ../../topics/http/urls.txt:138
# 949ee5ad422d4573bcda4ac8cb584677
msgid "A request to ``/articles/2005/03/`` would call the function ``news.views.month_archive(request, year='2005', month='03')``, instead of ``news.views.month_archive(request, '2005', '03')``."
msgstr ""

#: ../../topics/http/urls.txt:142
# f8bfc319b1a54c85b24f7fc1b6e659bf
msgid "A request to ``/articles/2003/03/03/`` would call the function ``news.views.article_detail(request, year='2003', month='03', day='03')``."
msgstr ""

#: ../../topics/http/urls.txt:145
# 35115e04dea142008120e0075d1f57a0
msgid "In practice, this means your URLconfs are slightly more explicit and less prone to argument-order bugs -- and you can reorder the arguments in your views' function definitions. Of course, these benefits come at the cost of brevity; some developers find the named-group syntax ugly and too verbose."
msgstr ""

#: ../../topics/http/urls.txt:151
# 7d6e80968e8e4e18b71fb1653c41cecf
msgid "The matching/grouping algorithm"
msgstr ""

#: ../../topics/http/urls.txt:153
# 0e28961939f24616ab02237ecab7ac32
msgid "Here's the algorithm the URLconf parser follows, with respect to named groups vs. non-named groups in a regular expression:"
msgstr ""

#: ../../topics/http/urls.txt:156
# b0a0aa726cce46d9b561838405664417
msgid "If there are any named arguments, it will use those, ignoring non-named arguments."
msgstr ""

#: ../../topics/http/urls.txt:159
# 0fb81a3fa49d4606a71ba395ccf2409c
msgid "Otherwise, it will pass all non-named arguments as positional arguments."
msgstr ""

#: ../../topics/http/urls.txt:161
# 51fb79bfbd7f4e8c89b72092fd914376
msgid "In both cases, any extra keyword arguments that have been given as per `Passing extra options to view functions`_ (below) will also be passed to the view."
msgstr ""

#: ../../topics/http/urls.txt:165
# f4e3fce49f9c451386cc157fca49eefc
msgid "What the URLconf searches against"
msgstr ""

#: ../../topics/http/urls.txt:167
# 53e92b9d48ca4762991527757c140f55
msgid "The URLconf searches against the requested URL, as a normal Python string. This does not include GET or POST parameters, or the domain name."
msgstr ""

#: ../../topics/http/urls.txt:170
# 8f14c8d259824f369f4c6b48f3ab9a0f
msgid "For example, in a request to ``http://www.example.com/myapp/``, the URLconf will look for ``myapp/``."
msgstr ""

#: ../../topics/http/urls.txt:173
# 7bd3e1fcf9794b6a9ab5d8ef6740542f
msgid "In a request to ``http://www.example.com/myapp/?page=3``, the URLconf will look for ``myapp/``."
msgstr ""

#: ../../topics/http/urls.txt:176
# 4d892c639a704531bca5cd566c1b9573
msgid "The URLconf doesn't look at the request method. In other words, all request methods -- ``POST``, ``GET``, ``HEAD``, etc. -- will be routed to the same function for the same URL."
msgstr ""

#: ../../topics/http/urls.txt:181
# 6caf63a3d9f24978a85ca9b4d2989e83
msgid "Notes on capturing text in URLs"
msgstr ""

#: ../../topics/http/urls.txt:183
# 493f40efa561468aa983eb820969684e
msgid "Each captured argument is sent to the view as a plain Python string, regardless of what sort of match the regular expression makes. For example, in this URLconf line::"
msgstr ""

#: ../../topics/http/urls.txt:189
# 41037c81f6a04481b7f5145183314c30
msgid "...the ``year`` argument to ``news.views.year_archive()`` will be a string, not an integer, even though the ``\\d{4}`` will only match integer strings."
msgstr ""

#: ../../topics/http/urls.txt:192
# d017b5668e8745d2876ce1dcda65e078
msgid "A convenient trick is to specify default parameters for your views' arguments. Here's an example URLconf and view::"
msgstr ""

#: ../../topics/http/urls.txt:205
# 81d0a6adc74b44838cccd08852785e79
msgid "In the above example, both URL patterns point to the same view -- ``blog.views.page`` -- but the first pattern doesn't capture anything from the URL. If the first pattern matches, the ``page()`` function will use its default argument for ``num``, ``\"1\"``. If the second pattern matches, ``page()`` will use whatever ``num`` value was captured by the regex."
msgstr ""

#: ../../topics/http/urls.txt:212
# 8c3714aee3bf4edb8e898f9c195f3f7c
msgid "Performance"
msgstr ""

#: ../../topics/http/urls.txt:214
# 63bf68c7639049febfe1e34150b08f03
msgid "Each regular expression in a ``urlpatterns`` is compiled the first time it's accessed. This makes the system blazingly fast."
msgstr ""

#: ../../topics/http/urls.txt:218
# 664a40b2264b4527b1cd6d0fd56735cd
msgid "Syntax of the urlpatterns variable"
msgstr ""

#: ../../topics/http/urls.txt:220
# 38cd32e78f114942a3f9c0c6317059b4
msgid "``urlpatterns`` should be a Python list, in the format returned by the function :func:`django.conf.urls.patterns`. Always use ``patterns()`` to create the ``urlpatterns`` variable."
msgstr ""

#: ../../topics/http/urls.txt:225
# 6ae070b24be0415eb809ac6a1514deec
msgid "Error handling"
msgstr ""

#: ../../topics/http/urls.txt:227
# a6fe4def5f074354b9105afe107c7734
msgid "When Django can't find a regex matching the requested URL, or when an exception is raised, Django will invoke an error-handling view."
msgstr ""

#: ../../topics/http/urls.txt:230
# 17daab534a294a09b0644abb9bc75bcd
msgid "The views to use for these cases are specified by three variables. Their default values should suffice for most projects, but further customization is possible by assigning values to them."
msgstr ""

#: ../../topics/http/urls.txt:234
# b617e155fe994752a4b2abff87a4f7b1
msgid "See the documentation on :ref:`customizing error views <customizing-error-views>` for the full details."
msgstr ""

#: ../../topics/http/urls.txt:237
# a7410fa881fa4a8f82628ce3e973e1a5
msgid "Such values can be set in your root URLconf. Setting these variables in any other URLconf will have no effect."
msgstr ""

#: ../../topics/http/urls.txt:240
# 44a71d5a3c6049c5a3f846748f67a3d4
msgid "Values must be callables, or strings representing the full Python import path to the view that should be called to handle the error condition at hand."
msgstr ""

#: ../../topics/http/urls.txt:243
# eaa5fe8b963245c1a49251a0083f9da4
msgid "The variables are:"
msgstr ""

#: ../../topics/http/urls.txt:245
# 0665a02cb068445898863499b0e43415
msgid "``handler404`` -- See :data:`django.conf.urls.handler404`."
msgstr ""

#: ../../topics/http/urls.txt:246
# ac230bd5fa094b14ba4ad5c785530fb3
msgid "``handler500`` -- See :data:`django.conf.urls.handler500`."
msgstr ""

#: ../../topics/http/urls.txt:247
# a5b265c386d54789a9b374bf85c8b254
msgid "``handler403`` -- See :data:`django.conf.urls.handler403`."
msgstr ""

#: ../../topics/http/urls.txt:255
# ff47229e0aad4d3d944287c7dfbc8ca4
msgid "The view prefix"
msgstr ""

#: ../../topics/http/urls.txt:257
# 455bd589eb454b10b45604c7f658dd2c
msgid "You can specify a common prefix in your ``patterns()`` call, to cut down on code duplication."
msgstr ""

#: ../../topics/http/urls.txt:260
# 5e976040da144a66b063e322da838184
msgid "Here's the example URLconf from the :doc:`Django overview </intro/overview>`::"
msgstr ""

#: ../../topics/http/urls.txt:270
# ec787c42c1c84b9ca8d191abfb048259
msgid "In this example, each view has a common prefix -- ``'news.views'``. Instead of typing that out for each entry in ``urlpatterns``, you can use the first argument to the ``patterns()`` function to specify a prefix to apply to each view function."
msgstr ""

#: ../../topics/http/urls.txt:275
# 04edee35a6b54a2db4d9324f4c1132bc
msgid "With this in mind, the above example can be written more concisely as::"
msgstr ""

#: ../../topics/http/urls.txt:285
# 0dcaec23de324b61af92a53cfd1a73a3
msgid "Note that you don't put a trailing dot (``\".\"``) in the prefix. Django puts that in automatically."
msgstr ""

#: ../../topics/http/urls.txt:289
# 507121d6df604a1191ffb2cd3d3c302e
msgid "Multiple view prefixes"
msgstr ""

#: ../../topics/http/urls.txt:291
# 250c38eb9251442bb4201946c657f081
msgid "In practice, you'll probably end up mixing and matching views to the point where the views in your ``urlpatterns`` won't have a common prefix. However, you can still take advantage of the view prefix shortcut to remove duplication. Just add multiple ``patterns()`` objects together, like this:"
msgstr ""

#: ../../topics/http/urls.txt:296
# 189a94a8b58546049d93f1f59bf74fa2
msgid "Old::"
msgstr ""

#: ../../topics/http/urls.txt:306
# 19c7c867e7744e7d96276c87f64bb872
msgid "New::"
msgstr ""

#: ../../topics/http/urls.txt:322
# 04d1c92c3ab74126809baeb67bd1764a
msgid "Including other URLconfs"
msgstr ""

#: ../../topics/http/urls.txt:324
# 8dff845ac85a49809240bf994865b6dc
msgid "At any point, your ``urlpatterns`` can \"include\" other URLconf modules. This essentially \"roots\" a set of URLs below other ones."
msgstr ""

#: ../../topics/http/urls.txt:327
# b8fc53303b7d45a09d2bc2e05d6fb0e0
msgid "For example, here's an excerpt of the URLconf for the `Django Web site`_ itself. It includes a number of other URLconfs::"
msgstr ""

#: ../../topics/http/urls.txt:341
# 6ae97916516249df85bab2869810b687
msgid "Note that the regular expressions in this example don't have a ``$`` (end-of-string match character) but do include a trailing slash. Whenever Django encounters ``include()`` (:func:`django.conf.urls.include()`), it chops off whatever part of the URL matched up to that point and sends the remaining string to the included URLconf for further processing."
msgstr ""

#: ../../topics/http/urls.txt:347
# 4bc36dee230a42de98b411dbbbb75d8d
msgid "Another possibility is to include additional URL patterns not by specifying the URLconf Python module defining them as the ``include()`` argument but by using directly the pattern list as returned by :func:`~django.conf.urls.patterns` instead. For example, consider this URLconf::"
msgstr ""

#: ../../topics/http/urls.txt:365
# ab2c74e5fc8c42c3acf0d2cf98679e74
msgid "In this example, the ``/credit/reports/`` URL will be handled by the ``credit.views.report()`` Django view."
msgstr ""

#: ../../topics/http/urls.txt:371
# cb886d1382394c68bedfe53a2625c880
msgid "Captured parameters"
msgstr ""

#: ../../topics/http/urls.txt:373
# e2178c9777c9417087eb9a54ae80c153
msgid "An included URLconf receives any captured parameters from parent URLconfs, so the following example is valid::"
msgstr ""

#: ../../topics/http/urls.txt:387
# ae763658e6fa44e0b07498f626ddbf42
msgid "In the above example, the captured ``\"username\"`` variable is passed to the included URLconf, as expected."
msgstr ""

#: ../../topics/http/urls.txt:393
# 3c57956aebc44b90b95f65804828749e
msgid "Passing extra options to view functions"
msgstr ""

#: ../../topics/http/urls.txt:395
# ce6bb5c7d2fe43418bf5c00e9a58621a
msgid "URLconfs have a hook that lets you pass extra arguments to your view functions, as a Python dictionary."
msgstr ""

#: ../../topics/http/urls.txt:398
# 7abe4a6146cf4fa081d963f1be07edcf
msgid "Any URLconf tuple can have an optional third element, which should be a dictionary of extra keyword arguments to pass to the view function."
msgstr ""

#: ../../topics/http/urls.txt:407
# 38958274aab9413dab7b94f6ee050efa
msgid "In this example, for a request to ``/blog/2005/``, Django will call ``blog.views.year_archive(year='2005', foo='bar')``."
msgstr ""

#: ../../topics/http/urls.txt:410
# 1a47d60a39ff471fa6f8d453d1ae8871
msgid "This technique is used in the :doc:`syndication framework </ref/contrib/syndication>` to pass metadata and options to views."
msgstr ""

#: ../../topics/http/urls.txt:416
# a7402db61a0347f3be746c218f3e8f1d
msgid "It's possible to have a URL pattern which captures named keyword arguments, and also passes arguments with the same names in its dictionary of extra arguments. When this happens, the arguments in the dictionary will be used instead of the arguments captured in the URL."
msgstr ""

#: ../../topics/http/urls.txt:422
# 367464875794432d8f98a4c551263414
msgid "Passing extra options to ``include()``"
msgstr ""

#: ../../topics/http/urls.txt:424
# da82f6875c28451c8756d4822eec29f7
msgid "Similarly, you can pass extra options to :func:`~django.conf.urls.include`. When you pass extra options to ``include()``, *each* line in the included URLconf will be passed the extra options."
msgstr ""

#: ../../topics/http/urls.txt:428
# 6f458f1191554b79b91268baa3284cba
msgid "For example, these two URLconf sets are functionally identical:"
msgstr ""

#: ../../topics/http/urls.txt:430
# 0cd54b256ba54c9c941874f9178b3835
msgid "Set one::"
msgstr ""

#: ../../topics/http/urls.txt:443
# c3bab859ac1d4e5ba5c40dfa7ac4443e
msgid "Set two::"
msgstr ""

#: ../../topics/http/urls.txt:456
# de39f2fe35924d8f81e7d0d8face26d9
msgid "Note that extra options will *always* be passed to *every* line in the included URLconf, regardless of whether the line's view actually accepts those options as valid. For this reason, this technique is only useful if you're certain that every view in the included URLconf accepts the extra options you're passing."
msgstr ""

#: ../../topics/http/urls.txt:462
# 9bc05f9f929b433f8b4d745743a83cdf
msgid "Passing callable objects instead of strings"
msgstr ""

#: ../../topics/http/urls.txt:464
# 3bccc3947309488484f68cf4bca38c0b
msgid "Some developers find it more natural to pass the actual Python function object rather than a string containing the path to its module. This alternative is supported -- you can pass any callable object as the view."
msgstr ""

#: ../../topics/http/urls.txt:468
# 2c3443a8d5404a2ba3bfac0964eecbe7
msgid "For example, given this URLconf in \"string\" notation::"
msgstr ""

#: ../../topics/http/urls.txt:476
# b23177b107454907b659a27a30c421f6
msgid "You can accomplish the same thing by passing objects rather than strings. Just be sure to import the objects::"
msgstr ""

#: ../../topics/http/urls.txt:487
# 6a68fd1bbd224a0b8719bc489988488b
msgid "The following example is functionally identical. It's just a bit more compact because it imports the module that contains the views, rather than importing each view individually::"
msgstr ""

#: ../../topics/http/urls.txt:499
# 782231e0e7104ed391f6d305975b1d97
msgid "The style you use is up to you."
msgstr ""

#: ../../topics/http/urls.txt:501
# e04bdc4d6aa342df8e2945f79f99ee0a
msgid "Note that if you use this technique -- passing objects rather than strings -- the view prefix (as explained in \"The view prefix\" above) will have no effect."
msgstr ""

#: ../../topics/http/urls.txt:504
# cf057e23950e48b8ba14eac41241f325
msgid "Note that :doc:`class based views</topics/class-based-views/index>` must be imported::"
msgstr ""

#: ../../topics/http/urls.txt:514
# 5ddddc4629164373aeae86d23b8b1a15
msgid "Reverse resolution of URLs"
msgstr ""

#: ../../topics/http/urls.txt:516
# 9d3ea4cc2d9f47539f7113e5048406aa
msgid "A common need when working on a Django project is the possibility to obtain URLs in their final forms either for embedding in generated content (views and assets URLs, URLs shown to the user, etc.) or for handling of the navigation flow on the server side (redirections, etc.)"
msgstr ""

#: ../../topics/http/urls.txt:521
# 59ca777a0a614f9289875a876a30889b
msgid "It is strongly desirable not having to hard-code these URLs (a laborious, non-scalable and error-prone strategy) or having to devise ad-hoc mechanisms for generating URLs that are parallel to the design described by the URLconf and as such in danger of producing stale URLs at some point."
msgstr ""

#: ../../topics/http/urls.txt:526
# 383f2059faba4509949df63815745bf4
msgid "In other words, what's needed is a DRY mechanism. Among other advantages it would allow evolution of the URL design without having to go all over the project source code to search and replace outdated URLs."
msgstr ""

#: ../../topics/http/urls.txt:530
# c3525d9561694d1288b414353c051899
msgid "The piece of information we have available as a starting point to get a URL is an identification (e.g. the name) of the view in charge of handling it, other pieces of information that necessarily must participate in the lookup of the right URL are the types (positional, keyword) and values of the view arguments."
msgstr ""

#: ../../topics/http/urls.txt:535
# 73b0723d25374db8808d96ec68406a8b
msgid "Django provides a solution such that the URL mapper is the only repository of the URL design. You feed it with your URLconf and then it can be used in both directions:"
msgstr ""

#: ../../topics/http/urls.txt:539
# 2f38e9cb92b9417c96196a77c1b34b3e
msgid "Starting with a URL requested by the user/browser, it calls the right Django view providing any arguments it might need with their values as extracted from the URL."
msgstr ""

#: ../../topics/http/urls.txt:543
# d26d0ea5b7914fc1bda5059bfae47dc3
msgid "Starting with the identification of the corresponding Django view plus the values of arguments that would be passed to it, obtain the associated URL."
msgstr ""

#: ../../topics/http/urls.txt:546
# 650d282327b34282a41aada1dbdab975
msgid "The first one is the usage we've been discussing in the previous sections. The second one is what is known as *reverse resolution of URLs*, *reverse URL matching*, *reverse URL lookup*, or simply *URL reversing*."
msgstr ""

#: ../../topics/http/urls.txt:550
# 8a1028d99c83415cbbc18ba204ab0916
msgid "Django provides tools for performing URL reversing that match the different layers where URLs are needed:"
msgstr ""

#: ../../topics/http/urls.txt:553
# 691e1890936e41dbbcc3637d8e79a75b
msgid "In templates: Using the :ttag:`url` template tag."
msgstr ""

#: ../../topics/http/urls.txt:555
# 7a3696d1b02c4a7da13e5211f2885ab6
msgid "In Python code: Using the :func:`django.core.urlresolvers.reverse` function."
msgstr ""

#: ../../topics/http/urls.txt:558
# f621dbb88f79480f9f28ae2cb77a32aa
msgid "In higher level code related to handling of URLs of Django model instances: The :meth:`~django.db.models.Model.get_absolute_url` method."
msgstr ""

#: ../../topics/http/urls.txt:564
# e3530874e5414839940bf3887178cb99
msgid "Consider again this URLconf entry::"
msgstr ""

#: ../../topics/http/urls.txt:574
# 8af73269530f4f6bba1332b7193109a9
msgid "According to this design, the URL for the archive corresponding to year *nnnn* is ``/articles/nnnn/``."
msgstr ""

#: ../../topics/http/urls.txt:577
# 6b392fd797e645cca54f22ed5f748073
msgid "You can obtain these in template code by using:"
msgstr ""

#: ../../topics/http/urls.txt:589
# 3adbb33bd60f4d9fa4fafb04ff143090
msgid "Or in Python code::"
msgstr ""

#: ../../topics/http/urls.txt:600
# ba33c263a39e4c7a9e0c0cd165794858
msgid "If, for some reason, it was decided that the URLs where content for yearly article archives are published at should be changed then you would only need to change the entry in the URLconf."
msgstr ""

#: ../../topics/http/urls.txt:604
# 9194dac0f5c24849a13302cd053cc85c
msgid "In some scenarios where views are of a generic nature, a many-to-one relationship might exist between URLs and views. For these cases the view name isn't a good enough identificator for it when it comes the time of reversing URLs. Read the next section to know about the solution Django provides for this."
msgstr ""

#: ../../topics/http/urls.txt:612
# 787d1bf16fa34ea0b25857c2a5d70266
msgid "Naming URL patterns"
msgstr ""

#: ../../topics/http/urls.txt:614
# 14370d3678ec4d14b80282c393a73ad8
msgid "It's fairly common to use the same view function in multiple URL patterns in your URLconf. For example, these two URL patterns both point to the ``archive`` view::"
msgstr ""

#: ../../topics/http/urls.txt:623
# 5cbdf6dc38394e22958773d63fe7e34a
msgid "This is completely valid, but it leads to problems when you try to do reverse URL matching (through the :func:`~django.core.urlresolvers.reverse` function or the :ttag:`url` template tag). Continuing this example, if you wanted to retrieve the URL for the ``archive`` view, Django's reverse URL matcher would get confused, because *two* URL patterns point at that view."
msgstr ""

#: ../../topics/http/urls.txt:629
# 9e4f3c69e46b4fb5a78b6aa994150f22
msgid "To solve this problem, Django supports **named URL patterns**. That is, you can give a name to a URL pattern in order to distinguish it from other patterns using the same view and parameters. Then, you can use this name in reverse URL matching."
msgstr ""

#: ../../topics/http/urls.txt:634
# 96e4be4492f74427972ddd7215fa197f
msgid "Here's the above example, rewritten to use named URL patterns::"
msgstr ""

#: ../../topics/http/urls.txt:641
# 3d1eac7e774649048d478a7544d2f5e8
msgid "With these names in place (``full-archive`` and ``arch-summary``), you can target each pattern individually by using its name:"
msgstr ""

#: ../../topics/http/urls.txt:649
# 30720f789b2149ad91bf5cff08c00ef5
msgid "Even though both URL patterns refer to the ``archive`` view here, using the ``name`` parameter to ``url()`` allows you to tell them apart in templates."
msgstr ""

#: ../../topics/http/urls.txt:652
# b7594cb22851467d85a262aa70b5830b
msgid "The string used for the URL name can contain any characters you like. You are not restricted to valid Python names."
msgstr ""

#: ../../topics/http/urls.txt:657
# eaa20c00de65453c97b38a0c05619893
msgid "When you name your URL patterns, make sure you use names that are unlikely to clash with any other application's choice of names. If you call your URL pattern ``comment``, and another application does the same thing, there's no guarantee which URL will be inserted into your template when you use this name."
msgstr ""

#: ../../topics/http/urls.txt:663
# 4cc59c221f9b4be4bab8d8eb293fd831
msgid "Putting a prefix on your URL names, perhaps derived from the application name, will decrease the chances of collision. We recommend something like ``myapp-comment`` instead of ``comment``."
msgstr ""

#: ../../topics/http/urls.txt:670
# 12ad29abca87416a80a84c0d8ea2fbcd
msgid "URL namespaces"
msgstr ""

#: ../../topics/http/urls.txt:673
# 604b5b89bac542b6bd8429af675bf81e
msgid "Introduction"
msgstr ""

#: ../../topics/http/urls.txt:675
# 6f95bc6afb814f4aae89458bffb7373a
msgid "When you need to deploy multiple instances of a single application, it can be helpful to be able to differentiate between instances. This is especially important when using :ref:`named URL patterns <naming-url-patterns>`, since multiple instances of a single application will share named URLs. Namespaces provide a way to tell these named URLs apart."
msgstr ""

#: ../../topics/http/urls.txt:681
# 94c318c9fdcb455bbfa24b31f3af935a
msgid "A URL namespace comes in two parts, both of which are strings:"
msgstr ""

#: ../../topics/http/urls.txt:686
# f0909e7107f44e399f6afecb07a042eb
msgid "This describes the name of the application that is being deployed. Every instance of a single application will have the same application namespace. For example, Django's admin application has the somewhat predictable application namespace of ``'admin'``."
msgstr ""

#: ../../topics/http/urls.txt:692
# 3903872010194fa19184ee9702b92b76
msgid "This identifies a specific instance of an application. Instance namespaces should be unique across your entire project. However, an instance namespace can be the same as the application namespace. This is used to specify a default instance of an application. For example, the default Django Admin instance has an instance namespace of ``'admin'``."
msgstr ""

#: ../../topics/http/urls.txt:698
# 88074c8e333d4c748f3af8136d502e57
msgid "Namespaced URLs are specified using the ``':'`` operator. For example, the main index page of the admin application is referenced using ``'admin:index'``. This indicates a namespace of ``'admin'``, and a named URL of ``'index'``."
msgstr ""

#: ../../topics/http/urls.txt:702
# cb9e2d453fdf4ad6ae1c71b43a11457e
msgid "Namespaces can also be nested. The named URL ``'foo:bar:whiz'`` would look for a pattern named ``'whiz'`` in the namespace ``'bar'`` that is itself defined within the top-level namespace ``'foo'``."
msgstr ""

#: ../../topics/http/urls.txt:709
# 1076221ab2b3433699d3864878976270
msgid "Reversing namespaced URLs"
msgstr ""

#: ../../topics/http/urls.txt:711
# 312da6d8ba024474bf0bbb98de0c74d4
msgid "When given a namespaced URL (e.g. ``'myapp:index'``) to resolve, Django splits the fully qualified name into parts, and then tries the following lookup:"
msgstr ""

#: ../../topics/http/urls.txt:714
# 947f8566aebc40eea57e5c291dc2fccf
msgid "First, Django looks for a matching :term:`application namespace` (in this example, ``'myapp'``). This will yield a list of instances of that application."
msgstr ""

#: ../../topics/http/urls.txt:718
# 37e8aa71c7294534ab8a2e7dfd14c20e
msgid "If there is a *current* application defined, Django finds and returns the URL resolver for that instance. The *current* application can be specified as an attribute on the template context - applications that expect to have multiple deployments should set the ``current_app`` attribute on any ``Context`` or ``RequestContext`` that is used to render a template."
msgstr ""

#: ../../topics/http/urls.txt:725
# 7e012feca5df462bb8e57a90784962c4
msgid "The current application can also be specified manually as an argument to the :func:`django.core.urlresolvers.reverse` function."
msgstr ""

#: ../../topics/http/urls.txt:728
# d4c2e5a1ffb44be19a2ed572e9aa8379
msgid "If there is no current application. Django looks for a default application instance. The default application instance is the instance that has an :term:`instance namespace` matching the :term:`application namespace` (in this example, an instance of the ``myapp`` called ``'myapp'``)."
msgstr ""

#: ../../topics/http/urls.txt:734
# 0a426da270a94110ba36a8d3179cf294
msgid "If there is no default application instance, Django will pick the last deployed instance of the application, whatever its instance name may be."
msgstr ""

#: ../../topics/http/urls.txt:737
# e523deaa702b49659828486431883454
msgid "If the provided namespace doesn't match an :term:`application namespace` in step 1, Django will attempt a direct lookup of the namespace as an :term:`instance namespace`."
msgstr ""

#: ../../topics/http/urls.txt:741
# 0011986aec5c48ffa49484d1184233f7
msgid "If there are nested namespaces, these steps are repeated for each part of the namespace until only the view name is unresolved. The view name will then be resolved into a URL in the namespace that has been found."
msgstr ""

#: ../../topics/http/urls.txt:748
# 33ac39ccc6554d37bdd08a0f7fbc02d3
msgid "To show this resolution strategy in action, consider an example of two instances of ``myapp``: one called ``'foo'``, and one called ``'bar'``. ``myapp`` has a main index page with a URL named ``'index'``. Using this setup, the following lookups are possible:"
msgstr ""

#: ../../topics/http/urls.txt:753
#: ../../topics/http/urls.txt:770
# befd933da62b42938d068913fa4ea4fd
# 0d9b9914b1f54f7cabf443f7b91d7396
msgid "If one of the instances is current - say, if we were rendering a utility page in the instance ``'bar'`` - ``'myapp:index'`` will resolve to the index page of the instance ``'bar'``."
msgstr ""

#: ../../topics/http/urls.txt:757
# 904c13278b38456b9372288a706ad5d6
msgid "If there is no current instance - say, if we were rendering a page somewhere else on the site - ``'myapp:index'`` will resolve to the last registered instance of ``myapp``. Since there is no default instance, the last instance of ``myapp`` that is registered will be used. This could be ``'foo'`` or ``'bar'``, depending on the order they are introduced into the urlpatterns of the project."
msgstr ""

#: ../../topics/http/urls.txt:764
# d34ea420d0454f8abb84bb76ce8fbfac
msgid "``'foo:index'`` will always resolve to the index page of the instance ``'foo'``."
msgstr ""

#: ../../topics/http/urls.txt:767
# e979ae7fd56941ca8e989c40c44ad94e
msgid "If there was also a default instance - i.e., an instance named ``'myapp'`` - the following would happen:"
msgstr ""

#: ../../topics/http/urls.txt:774
# fd294538c37f41d7b9ff7ca01b7965c2
msgid "If there is no current instance - say, if we were rendering a page somewhere else on the site - ``'myapp:index'`` will resolve to the index page of the default instance."
msgstr ""

#: ../../topics/http/urls.txt:778
# 9d4c06ead0534d4d9aee7e67ce4c8f99
msgid "``'foo:index'`` will again resolve to the index page of the instance ``'foo'``."
msgstr ""

#: ../../topics/http/urls.txt:784
# 92bc95051db54e1eb30045ce058da1f6
msgid "URL namespaces and included URLconfs"
msgstr ""

#: ../../topics/http/urls.txt:786
# b0cf28eb58ea403085b55824705145c7
msgid "URL namespaces of included URLconfs can be specified in two ways."
msgstr ""

#: ../../topics/http/urls.txt:788
# f93a5e5e9fe042528b7b0f01828ef0c9
msgid "Firstly, you can provide the :term:`application <application namespace>` and :term:`instance <instance namespace>` namespaces as arguments to :func:`django.conf.urls.include()` when you construct your URL patterns. For example,::"
msgstr ""

#: ../../topics/http/urls.txt:795
# 1902a3ab65754b13a540b5c0e0b0dcb8
msgid "This will include the URLs defined in ``apps.help.urls`` into the :term:`application namespace` ``'bar'``, with the :term:`instance namespace` ``'foo'``."
msgstr ""

#: ../../topics/http/urls.txt:799
# 95d06ae355ff43a19c3d73202bf2ad00
msgid "Secondly, you can include an object that contains embedded namespace data. If you ``include()`` an object as returned by :func:`~django.conf.urls.patterns`, the URLs contained in that object will be added to the global namespace. However, you can also ``include()`` a 3-tuple containing::"
msgstr ""

#: ../../topics/http/urls.txt:815
# 21e30b6cf147476580bbcad088403632
msgid "This will include the nominated URL patterns into the given application and instance namespace."
msgstr ""

#: ../../topics/http/urls.txt:818
# 9518a05b7daa4de88790d547cf4903a3
msgid "For example, the Django Admin is deployed as instances of :class:`~django.contrib.admin.AdminSite`.  ``AdminSite`` objects have a ``urls`` attribute: A 3-tuple that contains all the patterns in the corresponding admin site, plus the application namespace ``'admin'``, and the name of the admin instance. It is this ``urls`` attribute that you ``include()`` into your projects ``urlpatterns`` when you deploy an Admin instance."
msgstr ""

#: ../../topics/http/views.txt:3
# cda3860c900a440a832eafc61e241b02
msgid "Writing views"
msgstr ""

#: ../../topics/http/views.txt:5
# 21f5983b342149f594f57b16a2420d3f
msgid "A view function, or *view* for short, is simply a Python function that takes a Web request and returns a Web response. This response can be the HTML contents of a Web page, or a redirect, or a 404 error, or an XML document, or an image . . . or anything, really. The view itself contains whatever arbitrary logic is necessary to return that response. This code can live anywhere you want, as long as it's on your Python path. There's no other requirement--no \"magic,\" so to speak. For the sake of putting the code *somewhere*, the convention is to put views in a file called ``views.py``, placed in your project or application directory."
msgstr ""

#: ../../topics/http/views.txt:16
# b275ce54f6264d6393e7ade5ed452a34
msgid "A simple view"
msgstr ""

#: ../../topics/http/views.txt:18
# c3b190d88b4a408796616edf81a039e0
msgid "Here's a view that returns the current date and time, as an HTML document:"
msgstr ""

#: ../../topics/http/views.txt:30
# 3458131c63754ec589b7233fb1bb0a74
msgid "Let's step through this code one line at a time:"
msgstr ""

#: ../../topics/http/views.txt:32
# ebfcbce6984d4bed89a363701e5f1f6c
msgid "First, we import the class :class:`~django.http.HttpResponse` from the :mod:`django.http` module, along with Python's ``datetime`` library."
msgstr ""

#: ../../topics/http/views.txt:35
# 840eb5530c7e42709eb2953088de6c2c
msgid "Next, we define a function called ``current_datetime``. This is the view function. Each view function takes an :class:`~django.http.HttpRequest` object as its first parameter, which is typically named ``request``."
msgstr ""

#: ../../topics/http/views.txt:39
# 0dd457f4ff414931aa81a63a0c2da337
msgid "Note that the name of the view function doesn't matter; it doesn't have to be named in a certain way in order for Django to recognize it. We're calling it ``current_datetime`` here, because that name clearly indicates what it does."
msgstr ""

#: ../../topics/http/views.txt:44
# b1d5e87769ca4d57af6c969e1a0774d8
msgid "The view returns an :class:`~django.http.HttpResponse` object that contains the generated response. Each view function is responsible for returning an :class:`~django.http.HttpResponse` object. (There are exceptions, but we'll get to those later.)"
msgstr ""

#: ../../topics/http/views.txt:51
# 57e9b7cdd5ec4b90add9140ffc1d2d59
msgid "Django includes a :setting:`TIME_ZONE` setting that defaults to ``America/Chicago``. This probably isn't where you live, so you might want to change it in your settings file."
msgstr ""

#: ../../topics/http/views.txt:56
# ee2b2914310a496ab0e8c567ad85f013
msgid "Mapping URLs to views"
msgstr ""

#: ../../topics/http/views.txt:58
# 4ce6b44271cd497ba46ac2686555be3c
msgid "So, to recap, this view function returns an HTML page that includes the current date and time. To display this view at a particular URL, you'll need to create a *URLconf*; see :doc:`/topics/http/urls` for instructions."
msgstr ""

#: ../../topics/http/views.txt:63
# d06a07858183448ab6d19ef86d0a9dab
msgid "Returning errors"
msgstr ""

#: ../../topics/http/views.txt:65
# 505e4dfa77a04c4aae33cb4e41f2291a
msgid "Returning HTTP error codes in Django is easy. There are subclasses of :class:`~django.http.HttpResponse` for a number of common HTTP status codes other than 200 (which means *\"OK\"*). You can find the full list of available subclasses in the :ref:`request/response <ref-httpresponse-subclasses>` documentation.  Just return an instance of one of those subclasses instead of a normal :class:`~django.http.HttpResponse` in order to signify an error. For example::"
msgstr ""

#: ../../topics/http/views.txt:80
# 29bfce9479d34ed49ffcbcdb6244daa8
msgid "There isn't a specialized subclass for every possible HTTP response code, since many of them aren't going to be that common. However, as documented in the :class:`~django.http.HttpResponse` documentation, you can also pass the HTTP status code into the constructor for :class:`~django.http.HttpResponse` to create a return class for any status code you like. For example::"
msgstr ""

#: ../../topics/http/views.txt:92
# b843ebf9a3c245918c961640aec51479
msgid "Because 404 errors are by far the most common HTTP error, there's an easier way to handle those errors."
msgstr ""

#: ../../topics/http/views.txt:96
# bc7b6f27feeb467287fc1b45d8208573
msgid "The Http404 exception"
msgstr ""

#: ../../topics/http/views.txt:100
# 48b379df83a640a1a4b5fda82d448506
msgid "When you return an error such as :class:`~django.http.HttpResponseNotFound`, you're responsible for defining the HTML of the resulting error page::"
msgstr ""

#: ../../topics/http/views.txt:105
# 30f9c7bc5dcd40e8be43da07e6bed0ab
msgid "For convenience, and because it's a good idea to have a consistent 404 error page across your site, Django provides an ``Http404`` exception. If you raise ``Http404`` at any point in a view function, Django will catch it and return the standard error page for your application, along with an HTTP error code 404."
msgstr ""

#: ../../topics/http/views.txt:110
# aca10aa9972f4f86be61d386ecfa4e89
msgid "Example usage::"
msgstr ""

#: ../../topics/http/views.txt:121
# 3451fce3f2ea41258686068bad5b3b3f
msgid "In order to use the ``Http404`` exception to its fullest, you should create a template that is displayed when a 404 error is raised. This template should be called ``404.html`` and located in the top level of your template tree."
msgstr ""

#: ../../topics/http/views.txt:128
# fb11383e30c04420b636eae8a54967ba
msgid "Customizing error views"
msgstr ""

#: ../../topics/http/views.txt:133
# d10370a0904d42a189db45d257667c06
msgid "The 404 (page not found) view"
msgstr ""

#: ../../topics/http/views.txt:137
# 31872619170e4bffb3757e51bc104e9d
msgid "When you raise an ``Http404`` exception, Django loads a special view devoted to handling 404 errors. By default, it's the view ``django.views.defaults.page_not_found``, which either produces a very simple \"Not Found\" message or loads and renders the template ``404.html`` if you created it in your root template directory."
msgstr ""

#: ../../topics/http/views.txt:143
# 0dca2462b3ea4a5da52efa78158ceaf8
msgid "The default 404 view will pass one variable to the template: ``request_path``, which is the URL that resulted in the error."
msgstr ""

#: ../../topics/http/views.txt:146
# b359f5db7dac4077a418d222d13fd90d
msgid "The ``page_not_found`` view should suffice for 99% of Web applications, but if you want to override it, you can specify ``handler404`` in your URLconf, like so::"
msgstr ""

#: ../../topics/http/views.txt:152
# 3801c17a3b314feabefe89665ca97e6c
msgid "Behind the scenes, Django determines the 404 view by looking for ``handler404`` in your root URLconf, and falling back to ``django.views.defaults.page_not_found`` if you did not define one."
msgstr ""

#: ../../topics/http/views.txt:156
# d8aff2d36b8544f7927000993a8500c8
msgid "Three things to note about 404 views:"
msgstr ""

#: ../../topics/http/views.txt:158
# 56f4f1480797431fb1da3f0d0aad6775
msgid "The 404 view is also called if Django doesn't find a match after checking every regular expression in the URLconf."
msgstr ""

#: ../../topics/http/views.txt:161
# 850d59035f48403e9cbba8befdb2d956
msgid "The 404 view is passed a :class:`~django.template.RequestContext` and will have access to variables supplied by your :setting:`TEMPLATE_CONTEXT_PROCESSORS` setting (e.g., ``MEDIA_URL``)."
msgstr ""

#: ../../topics/http/views.txt:165
# 926a4d840bda475fb04beb369fe54ceb
msgid "If :setting:`DEBUG` is set to ``True`` (in your settings module), then your 404 view will never be used, and your URLconf will be displayed instead, with some debug information."
msgstr ""

#: ../../topics/http/views.txt:172
# 5301294cc44c461a8be5899b288c1226
msgid "The 500 (server error) view"
msgstr ""

#: ../../topics/http/views.txt:174
# 043fab7df29d40cf804ddeb5f60d1c3b
msgid "Similarly, Django executes special-case behavior in the case of runtime errors in view code. If a view results in an exception, Django will, by default, call the view ``django.views.defaults.server_error``, which either produces a very simple \"Server Error\" message or loads and renders the template ``500.html`` if you created it in your root template directory."
msgstr ""

#: ../../topics/http/views.txt:180
# 14241138c1f842af87761378908731c1
msgid "The default 500 view passes no variables to the ``500.html`` template and is rendered with an empty ``Context`` to lessen the chance of additional errors."
msgstr ""

#: ../../topics/http/views.txt:183
# 96e43c7d98064064a5d644ed55a14de7
msgid "This ``server_error`` view should suffice for 99% of Web applications, but if you want to override the view, you can specify ``handler500`` in your URLconf, like so::"
msgstr ""

#: ../../topics/http/views.txt:189
# 1737f01861164dfaa50fd785251bc5ca
msgid "Behind the scenes, Django determines the 500 view by looking for ``handler500`` in your root URLconf, and falling back to ``django.views.defaults.server_error`` if you did not define one."
msgstr ""

#: ../../topics/http/views.txt:193
# 0ecaf68455bb4d0a980af8b6a8cb48ae
msgid "One thing to note about 500 views:"
msgstr ""

#: ../../topics/http/views.txt:195
# bd34262b85fb4366bb08aab271fa2b51
msgid "If :setting:`DEBUG` is set to ``True`` (in your settings module), then your 500 view will never be used, and the traceback will be displayed instead, with some debug information."
msgstr ""

#: ../../topics/http/views.txt:202
# c9fe0c5cfd3f4b558e4e1e840823d846
msgid "The 403 (HTTP Forbidden) view"
msgstr ""

#: ../../topics/http/views.txt:206
# c3ec9d3f9d0a4019985f2b6780ce3c14
msgid "In the same vein as the 404 and 500 views, Django has a view to handle 403 Forbidden errors. If a view results in a 403 exception then Django will, by default, call the view ``django.views.defaults.permission_denied``."
msgstr ""

#: ../../topics/http/views.txt:210
# a8cefc3c41d945159839eb47485499c1
msgid "This view loads and renders the template ``403.html`` in your root template directory, or if this file does not exist, instead serves the text \"403 Forbidden\", as per :rfc:`2616` (the HTTP 1.1 Specification)."
msgstr ""

#: ../../topics/http/views.txt:214
# 45858d4f4e0d4656b0e8677f2fd54a4d
msgid "``django.views.defaults.permission_denied`` is triggered by a :exc:`~django.core.exceptions.PermissionDenied` exception. To deny access in a view you can use code like this::"
msgstr ""

#: ../../topics/http/views.txt:225
# 6ab86fd7ace249758abd9d8274658880
msgid "It is possible to override ``django.views.defaults.permission_denied`` in the same way you can for the 404 and 500 views by specifying a ``handler403`` in your URLconf::"
msgstr ""

#: ../../topics/i18n/formatting.txt:5
# cbc106a6d32b49d4b6f50277ecf71c2d
msgid "Format localization"
msgstr ""

#: ../../topics/i18n/formatting.txt:10
# aa873bf5ce2147339ddd5465df878b33
msgid "Django's formatting system is capable to display dates, times and numbers in templates using the format specified for the current :term:`locale <locale name>`. It also handles localized input in forms."
msgstr ""

#: ../../topics/i18n/formatting.txt:13
# 5d75f31f91484cc2bc6c8652dc7a7959
msgid "When it's enabled, two users accessing the same content may see dates, times and numbers formatted in different ways, depending on the formats for their current locale."
msgstr ""

#: ../../topics/i18n/formatting.txt:17
# fe507ee0eb9a4ca384b7090b70ef695a
msgid "The formatting system is disabled by default. To enable it, it's necessary to set :setting:`USE_L10N = True <USE_L10N>` in your settings file."
msgstr ""

#: ../../topics/i18n/formatting.txt:22
# b64e2a9298fc4dd98a83c8de0a44e95b
msgid "The default :file:`settings.py` file created by :djadmin:`django-admin.py startproject <startproject>` includes :setting:`USE_L10N = True <USE_L10N>` for convenience.  Note, however, that to enable number formatting with thousand separators it is necessary to set :setting:`USE_THOUSAND_SEPARATOR = True <USE_THOUSAND_SEPARATOR>` in your settings file. Alternatively, you could use :tfilter:`intcomma` to format numbers in your template."
msgstr ""

#: ../../topics/i18n/formatting.txt:31
# 15d14b7b9ef641809c5879b35b8fdec5
msgid "There is also an independent but related :setting:`USE_I18N` setting that controls if Django should activate translation. See :doc:`/topics/i18n/translation` for more details."
msgstr ""

#: ../../topics/i18n/formatting.txt:36
# 2dce8eb46fe74643acc1559cdfacb211
msgid "Locale aware input in forms"
msgstr ""

#: ../../topics/i18n/formatting.txt:38
# e0b5beec9c2f459ea223b7573c1063a5
msgid "When formatting is enabled, Django can use localized formats when parsing dates, times and numbers in forms. That means it tries different formats for different locales when guessing the format used by the user when inputting data on forms."
msgstr ""

#: ../../topics/i18n/formatting.txt:43
# 76dfc208dd4e41fb88e9581d106b813f
msgid "Django uses different formats for displaying data to those it uses for parsing data. Most notably, the formats for parsing dates can't use the ``%a`` (abbreviated weekday name), ``%A`` (full weekday name), ``%b`` (abbreviated month name), ``%B`` (full month name), or ``%p`` (AM/PM)."
msgstr ""

#: ../../topics/i18n/formatting.txt:49
# b9126b771bd04e7b88e8caa82f5ff55c
msgid "To enable a form field to localize input and output data simply use its ``localize`` argument::"
msgstr ""

#: ../../topics/i18n/formatting.txt:59
# 0596e1b9f16740fcbd03be08e1b74d6b
msgid "Controlling localization in templates"
msgstr ""

#: ../../topics/i18n/formatting.txt:61
# fa40cd5e9fb340b48daa05005fe2f8d8
msgid "When you have enabled formatting with :setting:`USE_L10N`, Django will try to use a locale specific format whenever it outputs a value in a template."
msgstr ""

#: ../../topics/i18n/formatting.txt:65
# c5fd0452f4f54d8d9441d7665d3ebd8c
msgid "However, it may not always be appropriate to use localized values -- for example, if you're outputting Javascript or XML that is designed to be machine-readable, you will always want unlocalized values. You may also want to use localization in selected templates, rather than using localization everywhere."
msgstr ""

#: ../../topics/i18n/formatting.txt:71
# afedaaecf0e84d2dbd9b30d77026f49f
msgid "To allow for fine control over the use of localization, Django provides the ``l10n`` template library that contains the following tags and filters."
msgstr ""

#: ../../topics/i18n/formatting.txt:76
#: ../../topics/i18n/timezones.txt:259
# 104f2f1643ec46cb8480a300b1a6f2a8
# 2495d0dcfc2b4228a7be55802bbf40a0
msgid "Template tags"
msgstr ""

#: ../../topics/i18n/formatting.txt:81
#: ../../topics/i18n/formatting.txt:115
# c9b2d496a1a0426194fc5de2eb07ade0
# 2f76be24b5004e2287048fefa619f56b
msgid "localize"
msgstr ""

#: ../../topics/i18n/formatting.txt:83
# b103937bb5d94ca6874065622fb8916b
msgid "Enables or disables localization of template variables in the contained block."
msgstr ""

#: ../../topics/i18n/formatting.txt:86
# d3265d369b82457daff99651bfe88e0a
msgid "This tag allows a more fine grained control of localization than :setting:`USE_L10N`."
msgstr ""

#: ../../topics/i18n/formatting.txt:89
# 664e09fd57b64c73af2d5ac34646c959
msgid "To activate or deactivate localization for a template block, use::"
msgstr ""

#: ../../topics/i18n/formatting.txt:103
# 99b995fd31f840a3a5da1a640ba9e370
msgid "The value of :setting:`USE_L10N` isn't respected inside of a ``{% localize %}`` block."
msgstr ""

#: ../../topics/i18n/formatting.txt:106
# cdbfc1418500497d815064b7e3de3575
msgid "See :tfilter:`localize` and :tfilter:`unlocalize` for template filters that will do the same job on a per-variable basis."
msgstr ""

#: ../../topics/i18n/formatting.txt:110
#: ../../topics/i18n/timezones.txt:326
# 0f433df3647c4735abfaf59aad9f0f14
# 5dbf514a96c441329b9832728f090de0
msgid "Template filters"
msgstr ""

#: ../../topics/i18n/formatting.txt:117
# 6481d2b337714b1193ac1a40d6e48fe7
msgid "Forces localization of a single value."
msgstr ""

#: ../../topics/i18n/formatting.txt:125
# ba56133fc2784fc4a5426f1bd206d1f0
msgid "To disable localization on a single value, use :tfilter:`unlocalize`. To control localization over a large section of a template, use the :ttag:`localize` template tag."
msgstr ""

#: ../../topics/i18n/formatting.txt:133
# 2dc7ea24d6c840e3b3bc3184cb63fa17
msgid "unlocalize"
msgstr ""

#: ../../topics/i18n/formatting.txt:135
# 1d4011ef7f944482a41a32cfc143f3c3
msgid "Forces a single value to be printed without localization."
msgstr ""

#: ../../topics/i18n/formatting.txt:143
# a9c88964ced24f4ca1fba0e2507f81c6
msgid "To force localization of a single value, use :tfilter:`localize`. To control localization over a large section of a template, use the :ttag:`localize` template tag."
msgstr ""

#: ../../topics/i18n/formatting.txt:150
# 03239a11936e409187295e647ba7bce4
msgid "Creating custom format files"
msgstr ""

#: ../../topics/i18n/formatting.txt:152
# 2504591925294e35a65801a8fa0cfe19
msgid "Django provides format definitions for many locales, but sometimes you might want to create your own, because a format files doesn't exist for your locale, or because you want to overwrite some of the values."
msgstr ""

#: ../../topics/i18n/formatting.txt:156
# 62e2a171e20b443baf1196f913e9ffb9
msgid "To use custom formats, specify the path where you'll place format files first. To do that, just set your :setting:`FORMAT_MODULE_PATH` setting to the package where format files will exist, for instance::"
msgstr ""

#: ../../topics/i18n/formatting.txt:162
# ae3e6e60f7464bd2a2e16f1679df7dfa
msgid "Files are not placed directly in this directory, but in a directory named as the locale, and must be named ``formats.py``."
msgstr ""

#: ../../topics/i18n/formatting.txt:165
# 344576d0574e4707a084ca41c6b3b85d
msgid "To customize the English formats, a structure like this would be needed::"
msgstr ""

#: ../../topics/i18n/formatting.txt:174
# 5783956950464fa4b3db25a2bd439703
msgid "where :file:`formats.py` contains custom format definitions. For example::"
msgstr ""

#: ../../topics/i18n/formatting.txt:178
# 1bfb475a88da4921bfa4380d8540181b
msgid "to use a non-breaking space (Unicode ``00A0``) as a thousand separator, instead of the default for English, a comma."
msgstr ""

#: ../../topics/i18n/formatting.txt:182
# 30745d59517c428c8fe8f1816adf2ec4
msgid "Limitations of the provided locale formats"
msgstr ""

#: ../../topics/i18n/formatting.txt:184
# 495f102980294db7803298dca384199b
msgid "Some locales use context-sensitive formats for numbers, which Django's localization system cannot handle automatically."
msgstr ""

#: ../../topics/i18n/formatting.txt:188
# 93ffeb58dbb24e62a1ba66ebde0b6783
msgid "Switzerland (German)"
msgstr ""

#: ../../topics/i18n/formatting.txt:190
# 8c870020710347e7976ccf5b7ed70372
msgid "The Swiss number formatting depends on the type of number that is being formatted. For monetary values, a comma is used as the thousand separator and a decimal point for the decimal separator. For all other numbers, a comma is used as decimal separator and a space as thousand separator. The locale format provided by Django uses the generic separators, a comma for decimal and a space for thousand separators."
msgstr ""

#: ../../topics/i18n/index.txt:3
# a72a6e3e787d41ee8bb2675e5f3f6c54
msgid "Internationalization and localization"
msgstr ""

#: ../../topics/i18n/index.txt:16
# d97fa357223545c090b14469a7973491
msgid "The goal of internationalization and localization is to allow a single Web application to offer its content in languages and formats tailored to the audience."
msgstr ""

#: ../../topics/i18n/index.txt:20
# f5f4d79c37bc454ea1a03f14cfde061f
msgid "Django has full support for :doc:`translation of text </topics/i18n/translation>`, :doc:`formatting of dates, times and numbers </topics/i18n/formatting>`, and :doc:`time zones </topics/i18n/timezones>`."
msgstr ""

#: ../../topics/i18n/index.txt:24
# 6c55168c4bdc41239969b6693d8ab796
msgid "Essentially, Django does two things:"
msgstr ""

#: ../../topics/i18n/index.txt:26
# f7330e9f0ed14579b56a3122e535c621
msgid "It allows developers and template authors to specify which parts of their apps should be translated or formatted for local languages and cultures."
msgstr ""

#: ../../topics/i18n/index.txt:28
# d9516faf6ebe4953b6b1d36b2cf83735
msgid "It uses these hooks to localize Web apps for particular users according to their preferences."
msgstr ""

#: ../../topics/i18n/index.txt:31
# fd2d71a6369a426bb523bba6e7df33b1
msgid "Obviously, translation depends on the target language, and formatting usually depends on the target country. These informations are provided by browsers in the ``Accept-Language`` header. However, the time zone isn't readily available."
msgstr ""

#: ../../topics/i18n/index.txt:36
# 2b1082f02d6240dabe9252b3161e80e5
msgid "Definitions"
msgstr ""

#: ../../topics/i18n/index.txt:38
# def00f296b9d4a069847e7aadf86fbc9
msgid "The words \"internationalization\" and \"localization\" often cause confusion; here's a simplified definition:"
msgstr ""

#: ../../topics/i18n/index.txt:44
# 08f515b659e146028e9a97182d3b35da
msgid "Preparing the software for localization. Usually done by developers."
msgstr ""

#: ../../topics/i18n/index.txt:47
# 2b074f0cbd234dad92c6a77259e2ec15
msgid "Writing the translations and local formats. Usually done by translators."
msgstr ""

#: ../../topics/i18n/index.txt:49
# e0db784f549f47189122022cc6ee1925
msgid "More details can be found in the `W3C Web Internationalization FAQ`_, the `Wikipedia article`_ or the `GNU gettext documentation`_."
msgstr ""

#: ../../topics/i18n/index.txt:57
# 24da7c5a0f53459fb18f7de0fd6a9c76
msgid "Translation and formatting are controlled by :setting:`USE_I18N` and :setting:`USE_L10N` settings respectively. However, both features involve internationalization and localization. The names of the settings are an unfortunate result of Django's history."
msgstr ""

#: ../../topics/i18n/index.txt:62
# 2d9e863963984045a0ad85aa49bce345
msgid "Here are some other terms that will help us to handle a common language:"
msgstr ""

#: ../../topics/i18n/index.txt:67
# 0b35397fea434f02a1f6836379130b16
msgid "A locale name, either a language specification of the form ``ll`` or a combined language and country specification of the form ``ll_CC``. Examples: ``it``, ``de_AT``, ``es``, ``pt_BR``. The language part is always is lower case and the country part in upper case. The separator is an underscore."
msgstr ""

#: ../../topics/i18n/index.txt:74
# 8248deef3be04e6abfb1e75d4bcb5614
msgid "Represents the name of a language. Browsers send the names of the languages they accept in the ``Accept-Language`` HTTP header using this format. Examples: ``it``, ``de-at``, ``es``, ``pt-br``. Both the language and the country parts are in lower case. The separator is a dash."
msgstr ""

#: ../../topics/i18n/index.txt:80
# e9c21e2e1f094ff19a3c1cc69b0e4401
msgid "A message file is a plain-text file, representing a single language, that contains all available :term:`translation strings <translation string>` and how they should be represented in the given language. Message files have a ``.po`` file extension."
msgstr ""

#: ../../topics/i18n/index.txt:86
# 4238d7caaea64f02a58ebe2f20923048
msgid "A literal that can be translated."
msgstr ""

#: ../../topics/i18n/index.txt:89
# dfb723839e47423d9fa0f83c9e4fca3a
msgid "A format file is a Python module that defines the data formats for a given locale."
msgstr ""

#: ../../topics/i18n/timezones.txt:5
# 6754e11341ae4f749c744b64c3bb523a
msgid "Time zones"
msgstr ""

#: ../../topics/i18n/timezones.txt:14
# 5ad063f2e3b142de853fcce705a0f6f6
msgid "When support for time zones is enabled, Django stores date and time information in UTC in the database, uses time-zone-aware datetime objects internally, and translates them to the end user's time zone in templates and forms."
msgstr ""

#: ../../topics/i18n/timezones.txt:19
# ffc90c79737e4de08468f2f432c87af2
msgid "This is handy if your users live in more than one time zone and you want to display date and time information according to each user's wall clock."
msgstr ""

#: ../../topics/i18n/timezones.txt:22
# 7d03e656a3d64725a6e0cff21df799d1
msgid "Even if your Web site is available in only one time zone, it's still good practice to store data in UTC in your database. One main reason is Daylight Saving Time (DST). Many countries have a system of DST, where clocks are moved forward in spring and backward in autumn. If you're working in local time, you're likely to encounter errors twice a year, when the transitions happen. (The pytz_ documentation discusses `these issues`_ in greater detail.) This probably doesn't matter for your blog, but it's a problem if you over-bill or under-bill your customers by one hour, twice a year, every year. The solution to this problem is to use UTC in the code and use local time only when interacting with end users."
msgstr ""

#: ../../topics/i18n/timezones.txt:33
# cea8a7d1aec849d38870f4208b963aa9
msgid "Time zone support is disabled by default. To enable it, set :setting:`USE_TZ = True <USE_TZ>` in your settings file. Installing pytz_ is highly recommended, but not mandatory. It's as simple as:"
msgstr ""

#: ../../topics/i18n/timezones.txt:43
# 6b3d94e6795d4a0382b4de504ba1ee30
msgid "The default :file:`settings.py` file created by :djadmin:`django-admin.py startproject <startproject>` includes :setting:`USE_TZ = True <USE_TZ>` for convenience."
msgstr ""

#: ../../topics/i18n/timezones.txt:49
# d0ffd1df188d4f77ba1953fd9f577252
msgid "There is also an independent but related :setting:`USE_L10N` setting that controls whether Django should activate format localization. See :doc:`/topics/i18n/formatting` for more details."
msgstr ""

#: ../../topics/i18n/timezones.txt:53
# c5360ea35210433e9ff5aa71926740e5
msgid "If you're wrestling with a particular problem, start with the :ref:`time zone FAQ <time-zones-faq>`."
msgstr ""

#: ../../topics/i18n/timezones.txt:57
# ed0d68808cb04c118fa024535f97a2a0
msgid "Concepts"
msgstr ""

#: ../../topics/i18n/timezones.txt:60
# 6544a238ac1b49688dc196a07676bb61
msgid "Naive and aware datetime objects"
msgstr ""

#: ../../topics/i18n/timezones.txt:62
# a30f7c27223c4b068ee7cbf376fe0798
msgid "Python's :class:`datetime.datetime` objects have a ``tzinfo`` attribute that can be used to store time zone information, represented as an instance of a subclass of :class:`datetime.tzinfo`. When this attribute is set and describes an offset, a datetime object is **aware**. Otherwise, it's **naive**."
msgstr ""

#: ../../topics/i18n/timezones.txt:67
# 2846c9f5dcfb4ff5863f4a718d271dde
msgid "You can use :func:`~django.utils.timezone.is_aware` and :func:`~django.utils.timezone.is_naive` to determine whether datetimes are aware or naive."
msgstr ""

#: ../../topics/i18n/timezones.txt:71
# 5cdad1364ca34ae5b6ca93737d5e9db1
msgid "When time zone support is disabled, Django uses naive datetime objects in local time. This is simple and sufficient for many use cases. In this mode, to obtain the current time, you would write::"
msgstr ""

#: ../../topics/i18n/timezones.txt:79
# 24a93673d7584eeca47bc2096088c616
msgid "When time zone support is enabled, Django uses time-zone-aware datetime objects. If your code creates datetime objects, they should be aware too. In this mode, the example above becomes::"
msgstr ""

#: ../../topics/i18n/timezones.txt:90
# 370f5a456c0f43928b01b0ad2154b1a4
msgid ":mod:`django.utils.timezone` provides a :func:`~django.utils.timezone.now()` function that returns a naive or aware datetime object according to the value of :setting:`USE_TZ`."
msgstr ""

#: ../../topics/i18n/timezones.txt:96
# 2f4a9dc2609f4283a5d63693b05b0470
msgid "Dealing with aware datetime objects isn't always intuitive. For instance, the ``tzinfo`` argument of the standard datetime constructor doesn't work reliably for time zones with DST. Using UTC is generally safe; if you're using other time zones, you should review the `pytz`_ documentation carefully."
msgstr ""

#: ../../topics/i18n/timezones.txt:104
# ac395cb9473f4863bce5e9b7434c7b93
msgid "Python's :class:`datetime.time` objects also feature a ``tzinfo`` attribute, and PostgreSQL has a matching ``time with time zone`` type. However, as PostgreSQL's docs put it, this type \"exhibits properties which lead to questionable usefulness\"."
msgstr ""

#: ../../topics/i18n/timezones.txt:109
# 3954568010ce4212bed5d7d71db6837f
msgid "Django only supports naive time objects and will raise an exception if you attempt to save an aware time object."
msgstr ""

#: ../../topics/i18n/timezones.txt:115
# a2d8230322c640f6b85b0b347c3391c6
msgid "Interpretation of naive datetime objects"
msgstr ""

#: ../../topics/i18n/timezones.txt:117
# b40fe0d637234a1983a9e8046481ecd5
msgid "When :setting:`USE_TZ` is ``True``, Django still accepts naive datetime objects, in order to preserve backwards-compatibility. When the database layer receives one, it attempts to make it aware by interpreting it in the :ref:`default time zone <default-current-time-zone>` and raises a warning."
msgstr ""

#: ../../topics/i18n/timezones.txt:122
# a5116137dd23448cb5aa0760ce608165
msgid "Unfortunately, during DST transitions, some datetimes don't exist or are ambiguous. In such situations, pytz_ raises an exception. Other :class:`~datetime.tzinfo` implementations, such as the local time zone used as a fallback when pytz_ isn't installed, may raise an exception or return inaccurate results. That's why you should always create aware datetime objects when time zone support is enabled."
msgstr ""

#: ../../topics/i18n/timezones.txt:129
# a1310567625040b0942779114c00df45
msgid "In practice, this is rarely an issue. Django gives you aware datetime objects in the models and forms, and most often, new datetime objects are created from existing ones through :class:`~datetime.timedelta` arithmetic. The only datetime that's often created in application code is the current time, and :func:`timezone.now() <django.utils.timezone.now>` automatically does the right thing."
msgstr ""

#: ../../topics/i18n/timezones.txt:139
# 631759506480421fa882338be9e7f99e
msgid "Default time zone and current time zone"
msgstr ""

#: ../../topics/i18n/timezones.txt:141
# 17b75b11b1384b01bd8ceb14fb24b1af
msgid "The **default time zone** is the time zone defined by the :setting:`TIME_ZONE` setting."
msgstr ""

#: ../../topics/i18n/timezones.txt:144
# b456bcd9677c4e378d6019e462ad944e
msgid "The **current time zone** is the time zone that's used for rendering."
msgstr ""

#: ../../topics/i18n/timezones.txt:146
# 48f1392f6ac14ad49c04d470b88069fc
msgid "You should set the current time zone to the end user's actual time zone with :func:`~django.utils.timezone.activate`. Otherwise, the default time zone is used."
msgstr ""

#: ../../topics/i18n/timezones.txt:152
# 0e555eddc41c47dd900e1ca35be3dcda
msgid "As explained in the documentation of :setting:`TIME_ZONE`, Django sets environment variables so that its process runs in the default time zone. This happens regardless of the value of :setting:`USE_TZ` and of the current time zone."
msgstr ""

#: ../../topics/i18n/timezones.txt:157
# 2aff77f287c14ebfb2c2792663f32729
msgid "When :setting:`USE_TZ` is ``True``, this is useful to preserve backwards-compatibility with applications that still rely on local time. However, :ref:`as explained above <naive-datetime-objects>`, this isn't entirely reliable, and you should always work with aware datetimes in UTC in your own code. For instance, use :meth:`~datetime.datetime.utcfromtimestamp` instead of :meth:`~datetime.datetime.fromtimestamp` -- and don't forget to set ``tzinfo`` to :data:`~django.utils.timezone.utc`."
msgstr ""

#: ../../topics/i18n/timezones.txt:167
# 0bc3e9beb7a645e49443b2437bf3e289
msgid "Selecting the current time zone"
msgstr ""

#: ../../topics/i18n/timezones.txt:169
# fbf2ccc7379442658f700605154a9376
msgid "The current time zone is the equivalent of the current :term:`locale <locale name>` for translations. However, there's no equivalent of the ``Accept-Language`` HTTP header that Django could use to determine the user's time zone automatically. Instead, Django provides :ref:`time zone selection functions <time-zone-selection-functions>`. Use them to build the time zone selection logic that makes sense for you."
msgstr ""

#: ../../topics/i18n/timezones.txt:176
# d9ed9620aa3d4fec89e6a6bc8ad2c867
msgid "Most Web sites that care about time zones just ask users in which time zone they live and store this information in the user's profile. For anonymous users, they use the time zone of their primary audience or UTC. pytz_ provides helpers_, like a list of time zones per country, that you can use to pre-select the most likely choices."
msgstr ""

#: ../../topics/i18n/timezones.txt:182
# f09bf59e22a34e6393f1fc4f09b7eb2b
msgid "Here's an example that stores the current timezone in the session. (It skips error handling entirely for the sake of simplicity.)"
msgstr ""

#: ../../topics/i18n/timezones.txt:185
# 2908892c0aa449129d36755da6dff2a1
msgid "Add the following middleware to :setting:`MIDDLEWARE_CLASSES`::"
msgstr ""

#: ../../topics/i18n/timezones.txt:195
# b0f88118fcc54a588f2401c3fe2c5ef1
msgid "Create a view that can set the current timezone::"
msgstr ""

#: ../../topics/i18n/timezones.txt:207
# 1834de23de194018b4587883b75dcb4d
msgid "Include a form in ``template.html`` that will ``POST`` to this view:"
msgstr ""

#: ../../topics/i18n/timezones.txt:226
# 03fae077e9874dbf9dde19d10a366a4d
msgid "Time zone aware input in forms"
msgstr ""

#: ../../topics/i18n/timezones.txt:228
# 1b5615aaef2340a4a9ccbe205ad7e5b2
msgid "When you enable time zone support, Django interprets datetimes entered in forms in the :ref:`current time zone <default-current-time-zone>` and returns aware datetime objects in ``cleaned_data``."
msgstr ""

#: ../../topics/i18n/timezones.txt:232
# adbda4f8399e4734ac83d6276a526648
msgid "If the current time zone raises an exception for datetimes that don't exist or are ambiguous because they fall in a DST transition (the timezones provided by pytz_ do this), such datetimes will be reported as invalid values."
msgstr ""

#: ../../topics/i18n/timezones.txt:239
# c0c90225532f47d8a0900100180c9003
msgid "Time zone aware output in templates"
msgstr ""

#: ../../topics/i18n/timezones.txt:241
# 6d8f35d738134763b57e30b3608e9d84
msgid "When you enable time zone support, Django converts aware datetime objects to the :ref:`current time zone <default-current-time-zone>` when they're rendered in templates. This behaves very much like :doc:`format localization </topics/i18n/formatting>`."
msgstr ""

#: ../../topics/i18n/timezones.txt:248
# cd74475d1c6c4465bcc273b22315d3d2
msgid "Django doesn't convert naive datetime objects, because they could be ambiguous, and because your code should never produce naive datetimes when time zone support is enabled. However, you can force conversion with the template filters described below."
msgstr ""

#: ../../topics/i18n/timezones.txt:253
# e0fab121cac041dbbd7e93f22e5b6f2f
msgid "Conversion to local time isn't always appropriate -- you may be generating output for computers rather than for humans. The following filters and tags, provided by the ``tz`` template tag library, allow you to control the time zone conversions."
msgstr ""

#: ../../topics/i18n/timezones.txt:264
#: ../../topics/i18n/timezones.txt:335
# 12146285bfde4cf6be2e543806c17c60
# e637a2a1236947cf8b0020f53ad82f36
msgid "localtime"
msgstr ""

#: ../../topics/i18n/timezones.txt:266
# d2cb8ea83a144afba0b15f81f839bca6
msgid "Enables or disables conversion of aware datetime objects to the current time zone in the contained block."
msgstr ""

#: ../../topics/i18n/timezones.txt:269
# 87dcdffa3ef44a0dbb369a5054bca3a5
msgid "This tag has exactly the same effects as the :setting:`USE_TZ` setting as far as the template engine is concerned. It allows a more fine grained control of conversion."
msgstr ""

#: ../../topics/i18n/timezones.txt:273
# 4e5a9d5941ab4eed8b0eda743aa5d883
msgid "To activate or deactivate conversion for a template block, use::"
msgstr ""

#: ../../topics/i18n/timezones.txt:287
# e4f01b54bbc7446daf2e22f839f3f130
msgid "The value of :setting:`USE_TZ` isn't respected inside of a ``{% localtime %}`` block."
msgstr ""

#: ../../topics/i18n/timezones.txt:293
#: ../../topics/i18n/timezones.txt:361
# 14bebb62ee3246d4bb4b9202979ae77e
# 0f0c3b26dfa0412f87486d0fc97ea75a
msgid "timezone"
msgstr ""

#: ../../topics/i18n/timezones.txt:295
# ef344adc176d4a54b61d6681db36ce42
msgid "Sets or unsets the current time zone in the contained block. When the current time zone is unset, the default time zone applies."
msgstr ""

#: ../../topics/i18n/timezones.txt:313
# fafe74fd405649f0ba781937af3c339c
msgid "get_current_timezone"
msgstr ""

#: ../../topics/i18n/timezones.txt:315
# afeae88d242d4868908b5a3ffd885404
msgid "When the ``django.core.context_processors.tz`` context processor is enabled -- by default, it is -- each :class:`~django.template.RequestContext` contains a ``TIME_ZONE`` variable that provides the name of the current time zone."
msgstr ""

#: ../../topics/i18n/timezones.txt:320
# 792be168ffd343c0be60bcec26c8f589
msgid "If you don't use a :class:`~django.template.RequestContext`, you can obtain this value with the ``get_current_timezone`` tag::"
msgstr ""

#: ../../topics/i18n/timezones.txt:328
# d58e232204b14275ab922f1311efce83
msgid "These filters accept both aware and naive datetimes. For conversion purposes, they assume that naive datetimes are in the default time zone. They always return aware datetimes."
msgstr ""

#: ../../topics/i18n/timezones.txt:337
# 8591cb1ee3534316ad5d61d84fbe7d1d
msgid "Forces conversion of a single value to the current time zone."
msgstr ""

#: ../../topics/i18n/timezones.txt:348
# 5347fa6d947a4a23b18968d668ba07f5
msgid "utc"
msgstr ""

#: ../../topics/i18n/timezones.txt:350
# 94956593fc034282ad3002a3d9abe10f
msgid "Forces conversion of a single value to UTC."
msgstr ""

#: ../../topics/i18n/timezones.txt:363
# 45c0f46c14304b04889eb033f8b55a63
msgid "Forces conversion of a single value to an arbitrary timezone."
msgstr ""

#: ../../topics/i18n/timezones.txt:365
# d860763d9fa94088adc675b5eae0a9bb
msgid "The argument must be an instance of a :class:`~datetime.tzinfo` subclass or a time zone name. If it is a time zone name, pytz_ is required."
msgstr ""

#: ../../topics/i18n/timezones.txt:377
# f471622fed6549c696683ef8a58ae4a0
msgid "Migration guide"
msgstr ""

#: ../../topics/i18n/timezones.txt:379
# e92a99b1cd184144844d28aee55f6a85
msgid "Here's how to migrate a project that was started before Django supported time zones."
msgstr ""

#: ../../topics/i18n/timezones.txt:383
# 88222229a98a477eb180bb552a0f2a5d
msgid "Database"
msgstr ""

#: ../../topics/i18n/timezones.txt:386
# 388e66a77b4d49ee9d893e283686aac5
msgid "PostgreSQL"
msgstr ""

#: ../../topics/i18n/timezones.txt:388
# 01d0adc362f14bacb0e83d2a73504cbd
msgid "The PostgreSQL backend stores datetimes as ``timestamp with time zone``. In practice, this means it converts datetimes from the connection's time zone to UTC on storage, and from UTC to the connection's time zone on retrieval."
msgstr ""

#: ../../topics/i18n/timezones.txt:392
# a9ead040d2814354a92383b81422c352
msgid "As a consequence, if you're using PostgreSQL, you can switch between ``USE_TZ = False`` and ``USE_TZ = True`` freely. The database connection's time zone will be set to :setting:`TIME_ZONE` or ``UTC`` respectively, so that Django obtains correct datetimes in all cases. You don't need to perform any data conversions."
msgstr ""

#: ../../topics/i18n/timezones.txt:399
# c7e3d6b095e54e8290641fa2c6148b1f
msgid "Other databases"
msgstr ""

#: ../../topics/i18n/timezones.txt:401
# 9a80ef17cf5e4fd5bad4f1751982e291
msgid "Other backends store datetimes without time zone information. If you switch from ``USE_TZ = False`` to ``USE_TZ = True``, you must convert your data from local time to UTC -- which isn't deterministic if your local time has DST."
msgstr ""

#: ../../topics/i18n/timezones.txt:406
# 4d51582307a1402783006502e86f1277
msgid "Code"
msgstr ""

#: ../../topics/i18n/timezones.txt:408
# faf85f436713484fa1e1ace6fa816682
msgid "The first step is to add :setting:`USE_TZ = True <USE_TZ>` to your settings file and install pytz_ (if possible). At this point, things should mostly work. If you create naive datetime objects in your code, Django makes them aware when necessary."
msgstr ""

#: ../../topics/i18n/timezones.txt:413
# ceda26945dd641458487fda88565c538
msgid "However, these conversions may fail around DST transitions, which means you aren't getting the full benefits of time zone support yet. Also, you're likely to run into a few problems because it's impossible to compare a naive datetime with an aware datetime. Since Django now gives you aware datetimes, you'll get exceptions wherever you compare a datetime that comes from a model or a form with a naive datetime that you've created in your code."
msgstr ""

#: ../../topics/i18n/timezones.txt:420
# 155c2bbfc6f141f3a67e865cb2e9708c
msgid "So the second step is to refactor your code wherever you instantiate datetime objects to make them aware. This can be done incrementally. :mod:`django.utils.timezone` defines some handy helpers for compatibility code: :func:`~django.utils.timezone.now`, :func:`~django.utils.timezone.is_aware`, :func:`~django.utils.timezone.is_naive`, :func:`~django.utils.timezone.make_aware`, and :func:`~django.utils.timezone.make_naive`."
msgstr ""

#: ../../topics/i18n/timezones.txt:429
# aec1dd33dffa4d20b4e2b026a99da09e
msgid "Finally, in order to help you locate code that needs upgrading, Django raises a warning when you attempt to save a naive datetime to the database::"
msgstr ""

#: ../../topics/i18n/timezones.txt:434
# 6aa7ee2fcd2147deab27ed0dfd6d9b95
msgid "During development, you can turn such warnings into exceptions and get a traceback by adding the following to your settings file::"
msgstr ""

#: ../../topics/i18n/timezones.txt:443
# 62177d8a229d4bdb908093237fb5e512
msgid "Fixtures"
msgstr ""

#: ../../topics/i18n/timezones.txt:445
# cf43a831445644fd8976ce8b24fc3c61
msgid "When serializing an aware datetime, the UTC offset is included, like this::"
msgstr ""

#: ../../topics/i18n/timezones.txt:449
# 4809ba93e4f3438d906c9c2f26b60c3d
msgid "For a naive datetime, it obviously isn't::"
msgstr ""

#: ../../topics/i18n/timezones.txt:453
# 3261029f1d954e7c9b1d26ead0d2c875
msgid "For models with :class:`~django.db.models.DateTimeField`\\ s, this difference makes it impossible to write a fixture that works both with and without time zone support."
msgstr ""

#: ../../topics/i18n/timezones.txt:457
# e7f911a80f4445eeb0e735080c19ea08
msgid "Fixtures generated with ``USE_TZ = False``, or before Django 1.4, use the \"naive\" format. If your project contains such fixtures, after you enable time zone support, you'll see :exc:`~exceptions.RuntimeWarning`\\ s when you load them. To get rid of the warnings, you must convert your fixtures to the \"aware\" format."
msgstr ""

#: ../../topics/i18n/timezones.txt:463
# 9adb565efc0742b080a20fbbf0534075
msgid "You can regenerate fixtures with :djadmin:`loaddata` then :djadmin:`dumpdata`. Or, if they're small enough, you can simply edit them to add the UTC offset that matches your :setting:`TIME_ZONE` to each serialized datetime."
msgstr ""

#: ../../topics/i18n/timezones.txt:470
# 7fd28e5227034f79a76213bd51cd1a0c
msgid "FAQ"
msgstr ""

#: ../../topics/i18n/timezones.txt:473
# b6430d59b5fe419f87460fc848bd3fe6
msgid "Setup"
msgstr ""

#: ../../topics/i18n/timezones.txt:475
# 229228df58ad4c02aee8b22c17c0e574
msgid "**I don't need multiple time zones. Should I enable time zone support?**"
msgstr ""

#: ../../topics/i18n/timezones.txt:477
# 08556706f0c14a9681ccab349ba2bac8
msgid "Yes. When time zone support is enabled, Django uses a more accurate model of local time. This shields you from subtle and unreproducible bugs around Daylight Saving Time (DST) transitions."
msgstr ""

#: ../../topics/i18n/timezones.txt:481
# f783886d66a04e54a7d47d766e0cf696
msgid "In this regard, time zones are comparable to ``unicode`` in Python. At first it's hard. You get encoding and decoding errors. Then you learn the rules. And some problems disappear -- you never get mangled output again when your application receives non-ASCII input."
msgstr ""

#: ../../topics/i18n/timezones.txt:486
# 225857abfef84d38acdc89585095636e
msgid "When you enable time zone support, you'll encounter some errors because you're using naive datetimes where Django expects aware datetimes. Such errors show up when running tests and they're easy to fix. You'll quickly learn how to avoid invalid operations."
msgstr ""

#: ../../topics/i18n/timezones.txt:491
# bbfc31ff0eac4a20b0092220a5d2d9d0
msgid "On the other hand, bugs caused by the lack of time zone support are much harder to prevent, diagnose and fix. Anything that involves scheduled tasks or datetime arithmetic is a candidate for subtle bugs that will bite you only once or twice a year."
msgstr ""

#: ../../topics/i18n/timezones.txt:496
# e0fc6476b1894acc983b0e0501046201
msgid "For these reasons, time zone support is enabled by default in new projects, and you should keep it unless you have a very good reason not to."
msgstr ""

#: ../../topics/i18n/timezones.txt:499
# 9ae57647e58941e2a55cfbd6e080041c
msgid "**I've enabled time zone support. Am I safe?**"
msgstr ""

#: ../../topics/i18n/timezones.txt:501
# 7f882911524a4a0bb39571f346237ac3
msgid "Maybe. You're better protected from DST-related bugs, but you can still shoot yourself in the foot by carelessly turning naive datetimes into aware datetimes, and vice-versa."
msgstr ""

#: ../../topics/i18n/timezones.txt:505
# e81eb28adeec411bbbde7f43a3cfc592
msgid "If your application connects to other systems -- for instance, if it queries a Web service -- make sure datetimes are properly specified. To transmit datetimes safely, their representation should include the UTC offset, or their values should be in UTC (or both!)."
msgstr ""

#: ../../topics/i18n/timezones.txt:510
# 1eda00ee10fc44879aadee1c3184f571
msgid "Finally, our calendar system contains interesting traps for computers::"
msgstr ""

#: ../../topics/i18n/timezones.txt:522
# dc9dfd450261489fb18013570c05e6bc
msgid "(To implement this function, you must decide whether 2012-02-29 minus one year is 2011-02-28 or 2011-03-01, which depends on your business requirements.)"
msgstr ""

#: ../../topics/i18n/timezones.txt:526
# e72475efa1054b3f8990bae674871644
msgid "**Should I install pytz?**"
msgstr ""

#: ../../topics/i18n/timezones.txt:528
# 594dc83c32d549d395de8baca4758c4e
msgid "Yes. Django has a policy of not requiring external dependencies, and for this reason pytz_ is optional. However, it's much safer to install it."
msgstr ""

#: ../../topics/i18n/timezones.txt:531
# 05bbcf3f882f4c0c9adae2c47fe197be
msgid "As soon as you activate time zone support, Django needs a definition of the default time zone. When pytz is available, Django loads this definition from the `tz database`_. This is the most accurate solution. Otherwise, it relies on the difference between local time and UTC, as reported by the operating system, to compute conversions. This is less reliable, especially around DST transitions."
msgstr ""

#: ../../topics/i18n/timezones.txt:538
# 6b555558476b425dba48d3dddec25e59
msgid "Furthermore, if you want to support users in more than one time zone, pytz is the reference for time zone definitions."
msgstr ""

#: ../../topics/i18n/timezones.txt:542
# c3e235010a1843a091a3488af09b252b
msgid "Troubleshooting"
msgstr ""

#: ../../topics/i18n/timezones.txt:544
# 5f38520c04d6402ea6e961cd5804e224
msgid "**My application crashes with** ``TypeError: can't compare offset-naive`` ``and offset-aware datetimes`` **-- what's wrong?**"
msgstr ""

#: ../../topics/i18n/timezones.txt:547
# d65e8b037e564d98bb7bccccde55eef0
msgid "Let's reproduce this error by comparing a naive and an aware datetime::"
msgstr ""

#: ../../topics/i18n/timezones.txt:558
# 0e4f5f57475847d487858ed195e5fd1d
msgid "If you encounter this error, most likely your code is comparing these two things:"
msgstr ""

#: ../../topics/i18n/timezones.txt:561
# 68a6d7a584334f6fa9aff3daf38d0283
msgid "a datetime provided by Django -- for instance, a value read from a form or a model field. Since you enabled time zone support, it's aware."
msgstr ""

#: ../../topics/i18n/timezones.txt:563
# f2271fdf4f4a439baed165ac8174d658
msgid "a datetime generated by your code, which is naive (or you wouldn't be reading this)."
msgstr ""

#: ../../topics/i18n/timezones.txt:566
# 15f0e3eb2db4449ea1845457d0c515aa
msgid "Generally, the correct solution is to change your code to use an aware datetime instead."
msgstr ""

#: ../../topics/i18n/timezones.txt:569
# 36558d528ad74f54ad4ceb4865ccde6c
msgid "If you're writing a pluggable application that's expected to work independently of the value of :setting:`USE_TZ`, you may find :func:`django.utils.timezone.now` useful. This function returns the current date and time as a naive datetime when ``USE_TZ = False`` and as an aware datetime when ``USE_TZ = True``. You can add or subtract :class:`datetime.timedelta` as needed."
msgstr ""

#: ../../topics/i18n/timezones.txt:576
# 1dd4a503698e497cb8af6f88e6bd6abc
msgid "**I see lots of** ``RuntimeWarning: DateTimeField received a naive datetime`` ``(YYYY-MM-DD HH:MM:SS)`` ``while time zone support is active`` **-- is that bad?**"
msgstr ""

#: ../../topics/i18n/timezones.txt:580
# 79df3abac9464e1188a687213f20e141
msgid "When time zone support is enabled, the database layer expects to receive only aware datetimes from your code. This warning occurs when it receives a naive datetime. This indicates that you haven't finished porting your code for time zone support. Please refer to the :ref:`migration guide <time-zones-migration-guide>` for tips on this process."
msgstr ""

#: ../../topics/i18n/timezones.txt:586
# 498cdb86423f429abd2315a854d14289
msgid "In the meantime, for backwards compatibility, the datetime is considered to be in the default time zone, which is generally what you expect."
msgstr ""

#: ../../topics/i18n/timezones.txt:589
# 83df0e40935b4a328469763254976335
msgid "``now.date()`` **is yesterday! (or tomorrow)**"
msgstr ""

#: ../../topics/i18n/timezones.txt:591
# 7d419107bffc430eb657fcded444eb8e
msgid "If you've always used naive datetimes, you probably believe that you can convert a datetime to a date by calling its :meth:`~datetime.datetime.date` method. You also consider that a :class:`~datetime.date` is a lot like a :class:`~datetime.datetime`, except that it's less accurate."
msgstr ""

#: ../../topics/i18n/timezones.txt:596
# 790fea552ce44f06835af036b6ea528a
msgid "None of this is true in a time zone aware environment::"
msgstr ""

#: ../../topics/i18n/timezones.txt:614
# 0e6b9c681dea4cbf975e36a5eb33d55b
msgid "As this example shows, the same datetime has a different date, depending on the time zone in which it is represented. But the real problem is more fundamental."
msgstr ""

#: ../../topics/i18n/timezones.txt:618
# 0920fbb088a54ff78400a64fca39d534
msgid "A datetime represents a **point in time**. It's absolute: it doesn't depend on anything. On the contrary, a date is a **calendaring concept**. It's a period of time whose bounds depend on the time zone in which the date is considered. As you can see, these two concepts are fundamentally different, and converting a datetime to a date isn't a deterministic operation."
msgstr ""

#: ../../topics/i18n/timezones.txt:624
# b06a8feec2724fd9903dfa85b41ea6d1
msgid "What does this mean in practice?"
msgstr ""

#: ../../topics/i18n/timezones.txt:626
# 143e7b4d21074dc0912928c7cfda084a
msgid "Generally, you should avoid converting a :class:`~datetime.datetime` to :class:`~datetime.date`. For instance, you can use the :tfilter:`date` template filter to only show the date part of a datetime. This filter will convert the datetime into the current time zone before formatting it, ensuring the results appear correctly."
msgstr ""

#: ../../topics/i18n/timezones.txt:632
# 17d9dc492de54e80bf56f51a88b466de
msgid "If you really need to do the conversion yourself, you must ensure the datetime is converted to the appropriate time zone first. Usually, this will be the current timezone::"
msgstr ""

#: ../../topics/i18n/timezones.txt:651
# 6757703c5cc04d368e6d171f965f60b0
msgid "**I have a string** ``\"2012-02-21 10:28:45\"`` **and I know it's in the** ``\"Europe/Helsinki\"`` **time zone. How do I turn that into an aware datetime?**"
msgstr ""

#: ../../topics/i18n/timezones.txt:655
# c36ff5f6efda4794815d5815e1d7fd25
msgid "This is exactly what pytz_ is for."
msgstr ""

#: ../../topics/i18n/timezones.txt:663
# 3247c9b937b14a18b5be279599cc6a1c
msgid "Note that ``localize`` is a pytz extension to the :class:`~datetime.tzinfo` API. Also, you may want to catch ``pytz.InvalidTimeError``. The documentation of pytz contains `more examples`_. You should review it before attempting to manipulate aware datetimes."
msgstr ""

#: ../../topics/i18n/timezones.txt:668
# 67422c59db024043923c5140d1fa5665
msgid "**How can I obtain the local time in the current time zone?**"
msgstr ""

#: ../../topics/i18n/timezones.txt:670
# 4bf0b204009543f8bd2190e1ee7be96b
msgid "Well, the first question is, do you really need to?"
msgstr ""

#: ../../topics/i18n/timezones.txt:672
# 497baa8ca2f249fc8d33dc32e615a306
msgid "You should only use local time when you're interacting with humans, and the template layer provides :ref:`filters and tags <time-zones-in-templates>` to convert datetimes to the time zone of your choice."
msgstr ""

#: ../../topics/i18n/timezones.txt:676
# ff63a76d205e4bcfa1f7cc9bd3c89483
msgid "Furthermore, Python knows how to compare aware datetimes, taking into account UTC offsets when necessary. It's much easier (and possibly faster) to write all your model and view code in UTC. So, in most circumstances, the datetime in UTC returned by :func:`django.utils.timezone.now` will be sufficient."
msgstr ""

#: ../../topics/i18n/timezones.txt:682
# 3f53fe120e804baeba366bf6a9ab2d37
msgid "For the sake of completeness, though, if you really want the local time in the current time zone, here's how you can obtain it::"
msgstr ""

#: ../../topics/i18n/timezones.txt:689
# eee687a1afa041cba105e87a5f66a5a3
msgid "In this example, pytz_ is installed and the current time zone is ``\"Europe/Paris\"``."
msgstr ""

#: ../../topics/i18n/timezones.txt:692
# 84f87983ef664e84af1a35f576e2422d
msgid "**How can I see all available time zones?**"
msgstr ""

#: ../../topics/i18n/timezones.txt:694
# d799b799366c4d219d954480d6e297da
msgid "pytz_ provides helpers_, including a list of current time zones and a list of all available time zones -- some of which are only of historical interest."
msgstr ""

#: ../../topics/i18n/translation.txt:3
# c925cd28cb9f426d811c64340c744dd2
msgid "Translation"
msgstr ""

#: ../../topics/i18n/translation.txt:10
# c1f66fbdaf0146d7938587caae4282a8
msgid "In order to make a Django project translatable, you have to add a minimal amount of hooks to your Python code and templates. These hooks are called :term:`translation strings <translation string>`. They tell Django: \"This text should be translated into the end user's language, if a translation for this text is available in that language.\" It's your responsibility to mark translatable strings; the system can only translate strings it knows about."
msgstr ""

#: ../../topics/i18n/translation.txt:17
# b700f63adaf24991a186ac48a6be36ac
msgid "Django then provides utilities to extract the translation strings into a :term:`message file`. This file is a convenient way for translators to provide the equivalent of the translation strings in the target language. Once the translators have filled in the message file, it must be compiled. This process relies on the GNU gettext toolset."
msgstr ""

#: ../../topics/i18n/translation.txt:23
# 218cc191b58c4fd7b0792f725e4b2a00
msgid "Once this is done, Django takes care of translating Web apps on the fly in each available language, according to users' language preferences."
msgstr ""

#: ../../topics/i18n/translation.txt:26
# 88d68daa40e2400b965bc8e339afb52b
msgid "Django's internationalization hooks are on by default, and that means there's a bit of i18n-related overhead in certain places of the framework. If you don't use internationalization, you should take the two seconds to set :setting:`USE_I18N = False <USE_I18N>` in your settings file. Then Django will make some optimizations so as not to load the internationalization machinery. You'll probably also want to remove ``'django.core.context_processors.i18n'`` from your :setting:`TEMPLATE_CONTEXT_PROCESSORS` setting."
msgstr ""

#: ../../topics/i18n/translation.txt:36
# 47fd007c3a454422913ef3db2152e337
msgid "There is also an independent but related :setting:`USE_L10N` setting that controls if Django should implement format localization. See :doc:`/topics/i18n/formatting` for more details."
msgstr ""

#: ../../topics/i18n/translation.txt:42
# f6a2600ba8b54af7972a9baf715624b5
msgid "Make sure you've activated translation for your project (the fastest way is to check if :setting:`MIDDLEWARE_CLASSES` includes :mod:`django.middleware.locale.LocaleMiddleware`). If you haven't yet, see :ref:`how-django-discovers-language-preference`."
msgstr ""

#: ../../topics/i18n/translation.txt:48
# e36eccab5b0e4e00bd454f3e81da7a3f
msgid "Internationalization: in Python code"
msgstr ""

#: ../../topics/i18n/translation.txt:51
# 21c92866bfbc4692843259fad39038cf
msgid "Standard translation"
msgstr ""

#: ../../topics/i18n/translation.txt:53
# 28b9e51892c347cdb93c1b259fd519c5
msgid "Specify a translation string by using the function :func:`~django.utils.translation.ugettext`. It's convention to import this as a shorter alias, ``_``, to save typing."
msgstr ""

#: ../../topics/i18n/translation.txt:58
# f6ea91269e5f4eeeb9d84457dab8c88b
msgid "Python's standard library ``gettext`` module installs ``_()`` into the global namespace, as an alias for ``gettext()``. In Django, we have chosen not to follow this practice, for a couple of reasons:"
msgstr ""

#: ../../topics/i18n/translation.txt:62
# cea6fe7821ad46f8bd719f5cc7381e12
msgid "For international character set (Unicode) support, :func:`~django.utils.translation.ugettext` is more useful than ``gettext()``. Sometimes, you should be using :func:`~django.utils.translation.ugettext_lazy` as the default translation method for a particular file. Without ``_()`` in the global namespace, the developer has to think about which is the most appropriate translation function."
msgstr ""

#: ../../topics/i18n/translation.txt:70
# 81aee2f916fd4ba99dc09bd1d44a733d
msgid "The underscore character (``_``) is used to represent \"the previous result\" in Python's interactive shell and doctest tests. Installing a global ``_()`` function causes interference. Explicitly importing ``ugettext()`` as ``_()`` avoids this problem."
msgstr ""

#: ../../topics/i18n/translation.txt:77
# bce8f108408a4fa183206cd2278538bd
msgid "In this example, the text ``\"Welcome to my site.\"`` is marked as a translation string::"
msgstr ""

#: ../../topics/i18n/translation.txt:86
# affe8fd995254265890470f54dc9c1f0
msgid "Obviously, you could code this without using the alias. This example is identical to the previous one::"
msgstr ""

#: ../../topics/i18n/translation.txt:95
# d82ac63f834c404b8b362f363438f3ed
msgid "Translation works on computed values. This example is identical to the previous two::"
msgstr ""

#: ../../topics/i18n/translation.txt:103
# c6c6e1d16153440288b0479162bcbe9d
msgid "Translation works on variables. Again, here's an identical example::"
msgstr ""

#: ../../topics/i18n/translation.txt:110
# 5a324efd7b7646d99cbd0e252061d883
msgid "(The caveat with using variables or computed values, as in the previous two examples, is that Django's translation-string-detecting utility, :djadmin:`django-admin.py makemessages <makemessages>`, won't be able to find these strings. More on :djadmin:`makemessages` later.)"
msgstr ""

#: ../../topics/i18n/translation.txt:115
# 98c64095f56d49f39d046f70d2253128
msgid "The strings you pass to ``_()`` or ``ugettext()`` can take placeholders, specified with Python's standard named-string interpolation syntax. Example::"
msgstr ""

#: ../../topics/i18n/translation.txt:122
# d0ec66df363e4ab88a5e7113480c6016
msgid "This technique lets language-specific translations reorder the placeholder text. For example, an English translation may be ``\"Today is November 26.\"``, while a Spanish translation may be ``\"Hoy es 26 de Noviembre.\"`` -- with the the month and the day placeholders swapped."
msgstr ""

#: ../../topics/i18n/translation.txt:127
# 7cb0fb406d414e9690b21f1dcbd24324
msgid "For this reason, you should use named-string interpolation (e.g., ``%(day)s``) instead of positional interpolation (e.g., ``%s`` or ``%d``) whenever you have more than a single parameter. If you used positional interpolation, translations wouldn't be able to reorder placeholder text."
msgstr ""

#: ../../topics/i18n/translation.txt:135
# 906f0bb43449493e8982f3c6e5b85500
msgid "Comments for translators"
msgstr ""

#: ../../topics/i18n/translation.txt:137
# 0d5e9ed293db4d7fbf9c204189a939d4
msgid "If you would like to give translators hints about a translatable string, you can add a comment prefixed with the ``Translators`` keyword on the line preceding the string, e.g.::"
msgstr ""

#: ../../topics/i18n/translation.txt:145
# ded88cec396c434796d578b69e15f907
msgid "The comment will then appear in the resulting ``.po`` file associated with the translatable contruct located below it and should also be displayed by most translation tools."
msgstr ""

#: ../../topics/i18n/translation.txt:149
# 437b3136b1ed46bbbbf68df98b8d6743
msgid "Just for completeness, this is the corresponding fragment of the resulting ``.po`` file:"
msgstr ""

#: ../../topics/i18n/translation.txt:159
# a7d54c6e9f54451fbf76777582d0b91f
msgid "This also works in templates. See :ref:`translator-comments-in-templates` for more details."
msgstr ""

#: ../../topics/i18n/translation.txt:163
# 9de67c3f3d514a39a2d90b3b43473c2e
msgid "Marking strings as no-op"
msgstr ""

#: ../../topics/i18n/translation.txt:165
# 6496a8a0214e4c37becc728eff329a75
msgid "Use the function :func:`django.utils.translation.ugettext_noop()` to mark a string as a translation string without translating it. The string is later translated from a variable."
msgstr ""

#: ../../topics/i18n/translation.txt:169
# 2f0fe02370d64d43b2f960bf1361b179
msgid "Use this if you have constant strings that should be stored in the source language because they are exchanged over systems or users -- such as strings in a database -- but should be translated at the last possible point in time, such as when the string is presented to the user."
msgstr ""

#: ../../topics/i18n/translation.txt:175
# 402d1b4c9a064bb6a5984f14bc9b5198
msgid "Pluralization"
msgstr ""

#: ../../topics/i18n/translation.txt:177
# bbb73cb1313545aaaf2ccb7943afadd7
msgid "Use the function :func:`django.utils.translation.ungettext()` to specify pluralized messages."
msgstr ""

#: ../../topics/i18n/translation.txt:180
# 2f297b9be7a642bfb454622793b57389
msgid "``ungettext`` takes three arguments: the singular translation string, the plural translation string and the number of objects."
msgstr ""

#: ../../topics/i18n/translation.txt:183
# 7501f01ae95044bdab1752ce44e99578
msgid "This function is useful when you need your Django application to be localizable to languages where the number and complexity of `plural forms <http://www.gnu.org/software/gettext/manual/gettext.html#Plural-forms>`_ is greater than the two forms used in English ('object' for the singular and 'objects' for all the cases where ``count`` is different from one, irrespective of its value.)"
msgstr ""

#: ../../topics/i18n/translation.txt:203
# 27f6bf06f61e495ba5715f1926dcc173
msgid "In this example the number of objects is passed to the translation languages as the ``count`` variable."
msgstr ""

#: ../../topics/i18n/translation.txt:206
# a4eb217e761d41ee82e5290bf87233af
msgid "Lets see a slightly more complex usage example::"
msgstr ""

#: ../../topics/i18n/translation.txt:225
# 0071799ee9ec45189aea18321a0faf33
msgid "Here we reuse localizable, hopefully already translated literals (contained in the ``verbose_name`` and ``verbose_name_plural`` model ``Meta`` options) for other parts of the sentence so all of it is consistently based on the cardinality of the elements at play."
msgstr ""

#: ../../topics/i18n/translation.txt:234
# 855ac00b8b414c5fa16b616d67581d2b
msgid "When using this technique, make sure you use a single name for every extrapolated variable included in the literal. In the example above note how we used the ``name`` Python variable in both translation strings. This example would fail::"
msgstr ""

#: ../../topics/i18n/translation.txt:254
# 2c5c0f71459c495ebe61c80850a8c8ea
msgid "You would get an error when running :djadmin:`django-admin.py compilemessages <compilemessages>`::"
msgstr ""

#: ../../topics/i18n/translation.txt:262
# 31651bed92d641fe928d982c0ba9e93b
msgid "Contextual markers"
msgstr ""

#: ../../topics/i18n/translation.txt:264
# a16ed6601eae482d8e3674279ca23199
msgid "Sometimes words have several meanings, such as ``\"May\"`` in English, which refers to a month name and to a verb. To enable translators to translate these words correctly in different contexts, you can use the :func:`django.utils.translation.pgettext()` function, or the :func:`django.utils.translation.npgettext()` function if the string needs pluralization. Both take a context string as the first variable."
msgstr ""

#: ../../topics/i18n/translation.txt:271
# 182c7b92aba842f9b3afa34089b90d2a
msgid "In the resulting ``.po`` file, the string will then appear as often as there are different contextual markers for the same string (the context will appear on the ``msgctxt`` line), allowing the translator to give a different translation for each of them."
msgstr ""

#: ../../topics/i18n/translation.txt:282
# 0ada6f0e2c8b4f9f89ba43ebb5f365d0
msgid "or::"
msgstr ""

#: ../../topics/i18n/translation.txt:290
# 9dceba7fdb4542e493cc68f9d62f49b2
msgid "will appear in the ``.po`` file as:"
msgstr ""

#: ../../topics/i18n/translation.txt:300
# 7ae482026ec34394ac8d9ac39b0a75a2
msgid "Contextual markers are also supported by the :ttag:`trans` and :ttag:`blocktrans` template tags."
msgstr ""

#: ../../topics/i18n/translation.txt:306
# 7416ffe581614e74a2e0ab4db83d4919
msgid "Lazy translation"
msgstr ""

#: ../../topics/i18n/translation.txt:308
# ec3c627d51e44ae1adc91d5c85071525
msgid "Use the lazy versions of translation functions in :mod:`django.utils.translation` (easily recognizable by the ``lazy`` suffix in their names) to translate strings lazily -- when the value is accessed rather than when they're called."
msgstr ""

#: ../../topics/i18n/translation.txt:313
# 4757f836da884b16a3df401c44a15a6c
msgid "These functions store a lazy reference to the string -- not the actual translation. The translation itself will be done when the string is used in a string context, such as in template rendering."
msgstr ""

#: ../../topics/i18n/translation.txt:317
# 8850e3f4d0be4ca7a5635ed8abbfb34a
msgid "This is essential when calls to these functions are located in code paths that are executed at module load time."
msgstr ""

#: ../../topics/i18n/translation.txt:320
# 2c32fab04a6842cbb931a240828c9584
msgid "This is something that can easily happen when defining models, forms and model forms, because Django implements these such that their fields are actually class-level attributes. For that reason, make sure to use lazy translations in the following cases:"
msgstr ""

#: ../../topics/i18n/translation.txt:326
# 63c5403d789e4e92bf8e801440c3295b
msgid "Model fields and relationships ``verbose_name`` and ``help_text`` option values"
msgstr ""

#: ../../topics/i18n/translation.txt:328
# 4fe17231a3414307bc2e8802144a7573
msgid "For example, to translate the help text of the *name* field in the following model, do the following::"
msgstr ""

#: ../../topics/i18n/translation.txt:336
# cbf1ad6abad84dfb9e51d663d48ecb92
msgid "You can mark names of ``ForeignKey``, ``ManyTomanyField`` or ``OneToOneField`` relationship as translatable by using their ``verbose_name`` options::"
msgstr ""

#: ../../topics/i18n/translation.txt:345
# afe00698b041474bb86fe091468495e9
msgid "Just like you would do in :attr:`~django.db.models.Options.verbose_name` you should provide a lowercase verbose name text for the relation as Django will automatically titlecase it when required."
msgstr ""

#: ../../topics/i18n/translation.txt:350
# 2f28a3c407f34fa590bc4001dd50dc2e
msgid "Model verbose names values"
msgstr ""

#: ../../topics/i18n/translation.txt:352
# 2c9d5b4161f542e28fa12be90313a29a
msgid "It is recommended to always provide explicit :attr:`~django.db.models.Options.verbose_name` and :attr:`~django.db.models.Options.verbose_name_plural` options rather than relying on the fallback English-centric and somewhat naïve determination of verbose names Django performs by looking at the model's class name::"
msgstr ""

#: ../../topics/i18n/translation.txt:368
# 124c249f97c74ebe929ead6f996d0d4a
msgid "Model methods ``short_description`` attribute values"
msgstr ""

#: ../../topics/i18n/translation.txt:370
# 87d3f040478d49baba0d1e5affb44b0a
msgid "For model methods, you can provide translations to Django and the admin site with the ``short_description`` attribute::"
msgstr ""

#: ../../topics/i18n/translation.txt:384
# 8c8ac582eb97468f86fb31a726536458
msgid "Working with lazy translation objects"
msgstr ""

#: ../../topics/i18n/translation.txt:386
# b89239a960a544108a5a826bbf59c082
msgid "The result of a ``ugettext_lazy()`` call can be used wherever you would use a unicode string (an object with type ``unicode``) in Python. If you try to use it where a bytestring (a ``str`` object) is expected, things will not work as expected, since a ``ugettext_lazy()`` object doesn't know how to convert itself to a bytestring. You can't use a unicode string inside a bytestring, either, so this is consistent with normal Python behavior. For example::"
msgstr ""

#: ../../topics/i18n/translation.txt:400
# aa57474d2a5e49f8a460ced54425445b
msgid "If you ever see output that looks like ``\"hello <django.utils.functional...>\"``, you have tried to insert the result of ``ugettext_lazy()`` into a bytestring. That's a bug in your code."
msgstr ""

#: ../../topics/i18n/translation.txt:404
# 136bce2fb6a04c0aba924b5f6a5cef1f
msgid "If you don't like the long ``ugettext_lazy`` name, you can just alias it as ``_`` (underscore), like so::"
msgstr ""

#: ../../topics/i18n/translation.txt:412
# bb5b58e3354040ab9957d5aa9200f9a8
msgid "Using ``ugettext_lazy()`` and ``ungettext_lazy()`` to mark strings in models and utility functions is a common operation. When you're working with these objects elsewhere in your code, you should ensure that you don't accidentally convert them to strings, because they should be converted as late as possible (so that the correct locale is in effect). This necessitates the use of the helper function described next."
msgstr ""

#: ../../topics/i18n/translation.txt:420
# 24d7a3935d504295b57f323d6de9d1fd
msgid "Joining strings: string_concat()"
msgstr ""

#: ../../topics/i18n/translation.txt:422
# db371b34733441e6bfc6db8dc19ab5f4
msgid "Standard Python string joins (``''.join([...])``) will not work on lists containing lazy translation objects. Instead, you can use :func:`django.utils.translation.string_concat()`, which creates a lazy object that concatenates its contents *and* converts them to strings only when the result is included in a string. For example::"
msgstr ""

#: ../../topics/i18n/translation.txt:434
# c50a8c43ea3a4862a78c98b18bb846d3
msgid "In this case, the lazy translations in ``result`` will only be converted to strings when ``result`` itself is used in a string (usually at template rendering time)."
msgstr ""

#: ../../topics/i18n/translation.txt:439
# cdbcb84a9187451f98af16fe4d1b64aa
msgid "Other uses of lazy in delayed translations"
msgstr ""

#: ../../topics/i18n/translation.txt:441
# 613029b975034862b6cbca708277afbc
msgid "For any other case where you would like to delay the translation, but have to pass the translatable string as argument to another function, you can wrap this function inside a lazy call yourself. For example::"
msgstr ""

#: ../../topics/i18n/translation.txt:452
# c88bbc068e754d3a9fc7c5b2db9ef874
msgid "And then later::"
msgstr ""

#: ../../topics/i18n/translation.txt:457
# 0eeb9038a628497390ae25aef6169732
msgid "Localized names of languages"
msgstr ""

#: ../../topics/i18n/translation.txt:461
# cd0a4b4b373544c39ef26f85c370d30b
msgid "The ``get_language_info()`` function provides detailed information about languages::"
msgstr ""

#: ../../topics/i18n/translation.txt:469
# 6fe3b3e08fea4bc4a01b09708520e9c8
msgid "The ``name`` and ``name_local`` attributes of the dictionary contain the name of the language in English and in the language itself, respectively.  The ``bidi`` attribute is True only for bi-directional languages."
msgstr ""

#: ../../topics/i18n/translation.txt:473
# c56716c9898241f7b8635a2a171c1708
msgid "The source of the language information is the ``django.conf.locale`` module. Similar access to this information is available for template code. See below."
msgstr ""

#: ../../topics/i18n/translation.txt:479
# 864bbb53ce2c4c7b83276d3053c9aff3
msgid "Internationalization: in template code"
msgstr ""

#: ../../topics/i18n/translation.txt:483
# fe46c0c7870c439f93c9bd4a65d9fa2c
msgid "Translations in :doc:`Django templates </topics/templates>` uses two template tags and a slightly different syntax than in Python code. To give your template access to these tags, put ``{% load i18n %}`` toward the top of your template. As with all template tags, this tag needs to be loaded in all templates which use translations, even those templates that extend from other templates which have already loaded the ``i18n`` tag."
msgstr ""

#: ../../topics/i18n/translation.txt:493
# dcc1c133e70542598148a42dcc6f4883
msgid "``trans`` template tag"
msgstr ""

#: ../../topics/i18n/translation.txt:495
# 9ab75badb903450aa1a45feae5366788
msgid "The ``{% trans %}`` template tag translates either a constant string (enclosed in single or double quotes) or variable content::"
msgstr ""

#: ../../topics/i18n/translation.txt:501
# 876f9b04b552483597f1fb04d256940f
msgid "If the ``noop`` option is present, variable lookup still takes place but the translation is skipped. This is useful when \"stubbing out\" content that will require translation in the future::"
msgstr ""

#: ../../topics/i18n/translation.txt:507
# cb1285f7f2824a30aa5c98a87d9b5867
msgid "Internally, inline translations use an :func:`~django.utils.translation.ugettext` call."
msgstr ""

#: ../../topics/i18n/translation.txt:510
# 3be3ac84c6ef4652b9bcf1b168e171c0
msgid "In case a template var (``myvar`` above) is passed to the tag, the tag will first resolve such variable to a string at run-time and then look up that string in the message catalogs."
msgstr ""

#: ../../topics/i18n/translation.txt:514
# e815d39de3624619931ee25ad5062e44
msgid "It's not possible to mix a template variable inside a string within ``{% trans %}``. If your translations require strings with variables (placeholders), use ``{% blocktrans %}`` instead."
msgstr ""

#: ../../topics/i18n/translation.txt:520
# 9c44dfecef674d57ad05c10be01783cf
msgid "If you'd like to retrieve a translated string without displaying it, you can use the following syntax::"
msgstr ""

#: ../../topics/i18n/translation.txt:528
# b08bcfbdd1ab4d15bba8ae95b5fccf6e
msgid "In practice you'll use this to get strings that are used in multiple places or should be used as arguments for other template tags or filters::"
msgstr ""

#: ../../topics/i18n/translation.txt:546
# 92cb19eb31454b8c8841f261d72bdcca
msgid "``{% trans %}`` also supports :ref:`contextual markers<contextual-markers>` using the ``context`` keyword:"
msgstr ""

#: ../../topics/i18n/translation.txt:556
# 1fd3a0fcf13e4b2089ed459f48b337db
msgid "``blocktrans`` template tag"
msgstr ""

#: ../../topics/i18n/translation.txt:558
# feb071e69f044a2bb9da2077fdcac0a7
msgid "Contrarily to the :ttag:`trans` tag, the ``blocktrans`` tag allows you to mark complex sentences consisting of literals and variable content for translation by making use of placeholders::"
msgstr ""

#: ../../topics/i18n/translation.txt:564
# 2e1cf012559c41eb9615acc4b6472b0c
msgid "To translate a template expression -- say, accessing object attributes or using template filters -- you need to bind the expression to a local variable for use within the translation block. Examples::"
msgstr ""

#: ../../topics/i18n/translation.txt:576
# 96a813092f2c4342aba29b9d4e069c7a
msgid "You can use multiple expressions inside a single ``blocktrans`` tag::"
msgstr ""

#: ../../topics/i18n/translation.txt:582
# 918d43b7259f4da2ad9ffdd0b4619ebb
msgid "The previous more verbose format is still supported: ``{% blocktrans with book|title as book_t and author|title as author_t %}``"
msgstr ""

#: ../../topics/i18n/translation.txt:587
# 5329a687ec0045b68f486c7281d9d00a
msgid "If resolving one of the block arguments fails, blocktrans will fall back to the default language by deactivating the currently active language temporarily with the :func:`~django.utils.translation.deactivate_all` function."
msgstr ""

#: ../../topics/i18n/translation.txt:592
# b639dcb42e59457f88d59cc3c6709233
msgid "This tag also provides for pluralization. To use it:"
msgstr ""

#: ../../topics/i18n/translation.txt:594
# e433159e1c484e1ca5e486ee9e0d5147
msgid "Designate and bind a counter value with the name ``count``. This value will be the one used to select the right plural form."
msgstr ""

#: ../../topics/i18n/translation.txt:597
# b3f7480989674666818ff66463738a9e
msgid "Specify both the singular and plural forms separating them with the ``{% plural %}`` tag within the ``{% blocktrans %}`` and ``{% endblocktrans %}`` tags."
msgstr ""

#: ../../topics/i18n/translation.txt:609
# ebd9632d3a744424a6b01df3987892ca
msgid "A more complex example::"
msgstr ""

#: ../../topics/i18n/translation.txt:617
# c38213d296c9476ca3687d3095142803
msgid "When you use both the pluralization feature and bind values to local variables in addition to the counter value, keep in mind that the ``blocktrans`` construct is internally converted to an ``ungettext`` call. This means the same :ref:`notes regarding ungettext variables <pluralization-var-notes>` apply."
msgstr ""

#: ../../topics/i18n/translation.txt:623
# 2436985b4f8542309af5cd03184081b8
msgid "Reverse URL lookups cannot be carried out within the ``blocktrans`` and should be retrieved (and stored) beforehand::"
msgstr ""

#: ../../topics/i18n/translation.txt:633
# 8477ed137b9e4c568842661c64acfc3c
msgid "``{% blocktrans %}`` also supports :ref:`contextual markers<contextual-markers>` using the ``context`` keyword:"
msgstr ""

#: ../../topics/i18n/translation.txt:643
# 0d3a2eaec7774a8b972761371c90eead
msgid "Comments for translators in templates"
msgstr ""

#: ../../topics/i18n/translation.txt:645
# cdd875dcc64840dc81b75f44124953cb
msgid "Just like with :ref:`Python code <translator-comments>`, these notes for translators can be specified using comments, either with the :ttag:`comment` tag:"
msgstr ""

#: ../../topics/i18n/translation.txt:658
# 4e22792068104bf78fb0becd110508f3
msgid "or with the ``{#`` ... ``#}`` :ref:`one-line comment constructs <template-comments>`:"
msgstr ""

#: ../../topics/i18n/translation.txt:668
# 014dc27fd3154052a2137a17c19608c2
msgid "Just for completeness, these are the corresponding fragments of the resulting ``.po`` file:"
msgstr ""

#: ../../topics/i18n/translation.txt:700
# 1583a281212a420883fc45d5279cfc50
msgid "Other tags"
msgstr ""

#: ../../topics/i18n/translation.txt:702
# bcef68b1bb764e83b72e2e559876c6bf
msgid "Each ``RequestContext`` has access to three translation-specific variables:"
msgstr ""

#: ../../topics/i18n/translation.txt:704
# 0946a338e9784507a03b0c82ae2d4055
msgid "``LANGUAGES`` is a list of tuples in which the first element is the :term:`language code` and the second is the language name (translated into the currently active locale)."
msgstr ""

#: ../../topics/i18n/translation.txt:708
# 495cbe3b85d74219a6ba0ac08e87a18a
msgid "``LANGUAGE_CODE`` is the current user's preferred language, as a string. Example: ``en-us``. (See :ref:`how-django-discovers-language-preference`.)"
msgstr ""

#: ../../topics/i18n/translation.txt:711
# af1effc3d1dd4bc4958cfb0a63810b65
msgid "``LANGUAGE_BIDI`` is the current locale's direction. If True, it's a right-to-left language, e.g.: Hebrew, Arabic. If False it's a left-to-right language, e.g.: English, French, German etc."
msgstr ""

#: ../../topics/i18n/translation.txt:715
# 139d0b96e9604df8b6410721711ec2ab
msgid "If you don't use the ``RequestContext`` extension, you can get those values with three tags::"
msgstr ""

#: ../../topics/i18n/translation.txt:722
# 48ece270ffe94531af2aecbee1b28e3c
msgid "These tags also require a ``{% load i18n %}``."
msgstr ""

#: ../../topics/i18n/translation.txt:724
# d9e36c4af2d34dabb8420f12a6bd0549
msgid "Translation hooks are also available within any template block tag that accepts constant strings. In those cases, just use ``_()`` syntax to specify a translation string::"
msgstr ""

#: ../../topics/i18n/translation.txt:730
# 602cad83573c440097060a78914641c2
msgid "In this case, both the tag and the filter will see the already-translated string, so they don't need to be aware of translations."
msgstr ""

#: ../../topics/i18n/translation.txt:734
# 63daa954586741e3a612c36bd0a34a05
msgid "In this example, the translation infrastructure will be passed the string ``\"yes,no\"``, not the individual strings ``\"yes\"`` and ``\"no\"``. The translated string will need to contain the comma so that the filter parsing code knows how to split up the arguments. For example, a German translator might translate the string ``\"yes,no\"`` as ``\"ja,nein\"`` (keeping the comma intact)."
msgstr ""

#: ../../topics/i18n/translation.txt:741
# ab22ed960cf44bd68fa740772a872755
msgid "You can also retrieve information about any of the available languages using provided template tags and filters. To get information about a single language, use the ``{% get_language_info %}`` tag::"
msgstr ""

#: ../../topics/i18n/translation.txt:748
# 77939c4bd49a40bb8bbdc99a9b04a62f
msgid "You can then access the information::"
msgstr ""

#: ../../topics/i18n/translation.txt:755
# 51b9b6ef9af6406fa06b98b150cc9fd0
msgid "You can also use the ``{% get_language_info_list %}`` template tag to retrieve information for a list of languages (e.g. active languages as specified in :setting:`LANGUAGES`). See :ref:`the section about the set_language redirect view <set_language-redirect-view>` for an example of how to display a language selector using ``{% get_language_info_list %}``."
msgstr ""

#: ../../topics/i18n/translation.txt:761
# cf6e527c2c494507b019104ca73e3e8e
msgid "In addition to :setting:`LANGUAGES` style nested tuples, ``{% get_language_info_list %}`` supports simple lists of language codes. If you do this in your view:"
msgstr ""

#: ../../topics/i18n/translation.txt:771
# 2bdcad9145e24c66bf33d8de3c23d32e
msgid "you can iterate over those languages in the template::"
msgstr ""

#: ../../topics/i18n/translation.txt:776
# 8deb6ccd20c54a2cb754e9bd84f29024
msgid "There are also simple filters available for convenience:"
msgstr ""

#: ../../topics/i18n/translation.txt:778
# 20bcb2fc1b744ffb8752d3a1437948dd
msgid "``{{ LANGUAGE_CODE|language_name }}`` (\"German\")"
msgstr ""

#: ../../topics/i18n/translation.txt:779
# 6613962f23254fdf9373bdc765f371d5
msgid "``{{ LANGUAGE_CODE|language_name_local }}`` (\"Deutsch\")"
msgstr ""

#: ../../topics/i18n/translation.txt:780
# aec39132cf324822a9d652f6db2025de
msgid "``{{ LANGUAGE_CODE|bidi }}`` (False)"
msgstr ""

#: ../../topics/i18n/translation.txt:785
# 1bd75e1bb6aa49fd8d04c0fa821f5274
msgid "Internationalization: in JavaScript code"
msgstr ""

#: ../../topics/i18n/translation.txt:789
# c8b14dac30e74a90babe6394d3b3f232
msgid "Adding translations to JavaScript poses some problems:"
msgstr ""

#: ../../topics/i18n/translation.txt:791
# 59d3bbe9cd184d63bc1725acf7c0bf00
msgid "JavaScript code doesn't have access to a ``gettext`` implementation."
msgstr ""

#: ../../topics/i18n/translation.txt:793
# de94a171bfe2432b854ce0bfe1c00986
msgid "JavaScript code doesn't have access to ``.po`` or ``.mo`` files; they need to be delivered by the server."
msgstr ""

#: ../../topics/i18n/translation.txt:796
# 0ffb61de1c3b47bea0d06c03bc9e495e
msgid "The translation catalogs for JavaScript should be kept as small as possible."
msgstr ""

#: ../../topics/i18n/translation.txt:799
# 3bac9087d8f24336824bf6c3dc4b435b
msgid "Django provides an integrated solution for these problems: It passes the translations into JavaScript, so you can call ``gettext``, etc., from within JavaScript."
msgstr ""

#: ../../topics/i18n/translation.txt:806
# 25008cdcb1574acbb986c8365b1d192f
msgid "The ``javascript_catalog`` view"
msgstr ""

#: ../../topics/i18n/translation.txt:812
# 903bc6814d9a40e98725e2f33e43ba89
msgid "The main solution to these problems is the :meth:`django.views.i18n.javascript_catalog` view, which sends out a JavaScript code library with functions that mimic the ``gettext`` interface, plus an array of translation strings. Those translation strings are taken from applications or Django core, according to what you specify in either the ``info_dict`` or the URL. Paths listed in :setting:`LOCALE_PATHS` are also included."
msgstr ""

#: ../../topics/i18n/translation.txt:819
# 5cfac45ba24c40c1829a2b1fcb57c6fc
msgid "You hook it up like this::"
msgstr ""

#: ../../topics/i18n/translation.txt:829
# 5240fee894944235bcc60d75876cc167
msgid "Each string in ``packages`` should be in Python dotted-package syntax (the same format as the strings in :setting:`INSTALLED_APPS`) and should refer to a package that contains a ``locale`` directory. If you specify multiple packages, all those catalogs are merged into one catalog. This is useful if you have JavaScript that uses strings from different applications."
msgstr ""

#: ../../topics/i18n/translation.txt:835
# 75c5ebb0a99949648c91bc2cc6053cec
msgid "The precedence of translations is such that the packages appearing later in the ``packages`` argument have higher precedence than the ones appearing at the beginning, this is important in the case of clashing translations for the same literal."
msgstr ""

#: ../../topics/i18n/translation.txt:840
# c022cb67de33443e809601457a3a2ec1
msgid "By default, the view uses the ``djangojs`` gettext domain. This can be changed by altering the ``domain`` argument."
msgstr ""

#: ../../topics/i18n/translation.txt:843
# f374c98be34f41fc81998791fbb8e1eb
msgid "You can make the view dynamic by putting the packages into the URL pattern::"
msgstr ""

#: ../../topics/i18n/translation.txt:849
# cdc28cc5bc4245abb14cbf8f8d930966
msgid "With this, you specify the packages as a list of package names delimited by '+' signs in the URL. This is especially useful if your pages use code from different apps and this changes often and you don't want to pull in one big catalog file. As a security measure, these values can only be either ``django.conf`` or any package from the :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../topics/i18n/translation.txt:855
# a40997f120e44e4884b87206f3c6d56a
msgid "The JavaScript translations found in the paths listed in the :setting:`LOCALE_PATHS` setting are also always included. To keep consistency with the translations lookup order algorithm used for Python and templates, the directories listed in :setting:`LOCALE_PATHS` have the highest precedence with the ones appearing first having higher precedence than the ones appearing later."
msgstr ""

#: ../../topics/i18n/translation.txt:863
# 60bb3acfded543718b23a985effb6a42
msgid "Using the JavaScript translation catalog"
msgstr ""

#: ../../topics/i18n/translation.txt:867
# 921cd6fdc65641bf9b6e5fabbedf4341
msgid "To use the catalog, just pull in the dynamically generated script like this:"
msgstr ""

#: ../../topics/i18n/translation.txt:873
# 42b8af6166e94163b5667261dda54103
msgid "This uses reverse URL lookup to find the URL of the JavaScript catalog view. When the catalog is loaded, your JavaScript code can use the standard ``gettext`` interface to access it::"
msgstr ""

#: ../../topics/i18n/translation.txt:879
# b9293e1907f443edbd5f16780e692414
msgid "There is also an ``ngettext`` interface::"
msgstr ""

#: ../../topics/i18n/translation.txt:885
# cb7ec03582ad47008f5e417c9fdec8f4
msgid "and even a string interpolation function::"
msgstr ""

#: ../../topics/i18n/translation.txt:889
# d3a359c6e95c46da82b327eeb5e883c4
msgid "The interpolation syntax is borrowed from Python, so the ``interpolate`` function supports both positional and named interpolation:"
msgstr ""

#: ../../topics/i18n/translation.txt:892
# 09cc8efc857b4ac7b623483fc05cc770
msgid "Positional interpolation: ``obj`` contains a JavaScript Array object whose elements values are then sequentially interpolated in their corresponding ``fmt`` placeholders in the same order they appear. For example::"
msgstr ""

#: ../../topics/i18n/translation.txt:902
# 3b2a0312e0fa4f08afceee4239dffbba
msgid "Named interpolation: This mode is selected by passing the optional boolean ``named`` parameter as true. ``obj`` contains a JavaScript object or associative array. For example::"
msgstr ""

#: ../../topics/i18n/translation.txt:915
# 7349c81cc2124695ac2ae5390c69a987
msgid "You shouldn't go over the top with string interpolation, though: this is still JavaScript, so the code has to make repeated regular-expression substitutions. This isn't as fast as string interpolation in Python, so keep it to those cases where you really need it (for example, in conjunction with ``ngettext`` to produce proper pluralizations)."
msgstr ""

#: ../../topics/i18n/translation.txt:922
# bb8a1778a1884ad7ae4d83c76086de0b
msgid "Note on performance"
msgstr ""

#: ../../topics/i18n/translation.txt:924
# 5aea969dc8b44d60b51d7efaebf53282
msgid "The :func:`~django.views.i18n.javascript_catalog` view generates the catalog from ``.mo`` files on every request. Since its output is constant — at least for a given version of a site — it's a good candidate for caching."
msgstr ""

#: ../../topics/i18n/translation.txt:928
# 0ebf5a250cd9484b83d9479c32b2d61d
msgid "Server-side caching will reduce CPU load. It's easily implemented with the :func:`~django.views.decorators.cache.cache_page` decorator. To trigger cache invalidation when your translations change, provide a version-dependant key prefix, as shown in the example below, or map the view at a version-dependant URL."
msgstr ""

#: ../../topics/i18n/translation.txt:944
# 22df41705d23423d9bb5f780f97a53fd
msgid "Client-side caching will save bandwidth and make your site load faster. If you're using ETags (:setting:`USE_ETAGS = True <USE_ETAGS>`), you're already covered. Otherwise, you can apply :ref:`conditional decorators <conditional-decorators>`. In the following example, the cache is invalidated whenever your restart your application server."
msgstr ""

#: ../../topics/i18n/translation.txt:961
# c36bd1d3d4b2465a97e0e4f2546852f3
msgid "You can even pre-generate the javascript catalog as part of your deployment procedure and serve it as a static file. This radical technique is implemented in django-statici18n_."
msgstr ""

#: ../../topics/i18n/translation.txt:970
# 3ff5441e461b4f449b8fe1e6e6bd479d
msgid "Internationalization: in URL patterns"
msgstr ""

#: ../../topics/i18n/translation.txt:976
# a31fae27a460425c8cfb0596f6b254f3
msgid "Django provides two mechanisms to internationalize URL patterns:"
msgstr ""

#: ../../topics/i18n/translation.txt:978
# d64c9459761c4911a581dc6cca2c35b7
msgid "Adding the language prefix to the root of the URL patterns to make it possible for :class:`~django.middleware.locale.LocaleMiddleware` to detect the language to activate from the requested URL."
msgstr ""

#: ../../topics/i18n/translation.txt:982
# 665d7f2fad7e457c85713205ad82934c
msgid "Making URL patterns themselves translatable via the :func:`django.utils.translation.ugettext_lazy()` function."
msgstr ""

#: ../../topics/i18n/translation.txt:987
# 9574222a115e4f55ae940a28ca352900
msgid "Using either one of these features requires that an active language be set for each request; in other words, you need to have :class:`django.middleware.locale.LocaleMiddleware` in your :setting:`MIDDLEWARE_CLASSES` setting."
msgstr ""

#: ../../topics/i18n/translation.txt:993
# e13a0c95c59043da9b3b5588d94a690d
msgid "Language prefix in URL patterns"
msgstr ""

#: ../../topics/i18n/translation.txt:997
# 599b000c07df4bb0a10e0b14c948b4e5
msgid "This function can be used in your root URLconf as a replacement for the normal :func:`django.conf.urls.patterns` function. Django will automatically prepend the current active language code to all url patterns defined within :func:`~django.conf.urls.i18n.i18n_patterns`. Example URL patterns::"
msgstr ""

#: ../../topics/i18n/translation.txt:1021
# 884a0f90df854b999e1767ec300a4e1b
msgid "After defining these URL patterns, Django will automatically add the language prefix to the URL patterns that were added by the ``i18n_patterns`` function. Example::"
msgstr ""

#: ../../topics/i18n/translation.txt:1040
# 0feef27facda4f0c998fba6399975016
msgid ":func:`~django.conf.urls.i18n.i18n_patterns` is only allowed in your root URLconf. Using it within an included URLconf will throw an :exc:`~django.core.exceptions.ImproperlyConfigured` exception."
msgstr ""

#: ../../topics/i18n/translation.txt:1046
# 61f371293b884fd9b38dadea94199f05
msgid "Ensure that you don't have non-prefixed URL patterns that might collide with an automatically-added language prefix."
msgstr ""

#: ../../topics/i18n/translation.txt:1051
# f2f82948d20e4712a3570a4563e9a5a1
msgid "Translating URL patterns"
msgstr ""

#: ../../topics/i18n/translation.txt:1053
# 7aa6b77342354e688d9d60c6dca258bf
msgid "URL patterns can also be marked translatable using the :func:`~django.utils.translation.ugettext_lazy` function. Example::"
msgstr ""

#: ../../topics/i18n/translation.txt:1076
# 34aa0ed71de14f00875e21ab0abdee57
msgid "After you've created the translations, the :func:`~django.core.urlresolvers.reverse` function will return the URL in the active language. Example::"
msgstr ""

#: ../../topics/i18n/translation.txt:1093
# d9ed662de2964fae93fe9ab7825446ee
msgid "In most cases, it's best to use translated URLs only within a language-code-prefixed block of patterns (using :func:`~django.conf.urls.i18n.i18n_patterns`), to avoid the possibility that a carelessly translated URL causes a collision with a non-translated URL pattern."
msgstr ""

#: ../../topics/i18n/translation.txt:1104
# 58a39c3fa28b4ca2817a973a25b09fac
msgid "Reversing in templates"
msgstr ""

#: ../../topics/i18n/translation.txt:1106
# c3c44576c7e9426c89f36e25efd6caf0
msgid "If localized URLs get reversed in templates they always use the current language. To link to a URL in another language use the ``language`` template tag. It enables the given language in the enclosed template section:"
msgstr ""

#: ../../topics/i18n/translation.txt:1123
# ea3599c91c9d4db1b730ab5e8e2e1e90
msgid "The :ttag:`language` tag expects the language code as the only argument."
msgstr ""

#: ../../topics/i18n/translation.txt:1128
# 15c37dc050204361bd4debb5a13aa7b6
msgid "Localization: how to create language files"
msgstr ""

#: ../../topics/i18n/translation.txt:1130
# 3c9b05e031014b4e9eeeb70269b368fd
msgid "Once the string literals of an application have been tagged for later translation, the translation themselves need to be written (or obtained). Here's how that works."
msgstr ""

#: ../../topics/i18n/translation.txt:1138
# 682433023a304c7fa150c649ee546868
msgid "Django does not support localizing your application into a locale for which Django itself has not been translated. In this case, it will ignore your translation files. If you were to try this and Django supported it, you would inevitably see a mixture of translated strings (from your application) and English strings (from Django itself). If you want to support a locale for your application that is not already part of Django, you'll need to make at least a minimal translation of the Django core."
msgstr ""

#: ../../topics/i18n/translation.txt:1146
# e61b47701a494e22a3b7f0027981c759
msgid "A good starting point is to copy the Django English ``.po`` file and to translate at least some :term:`translation strings <translation string>`."
msgstr ""

#: ../../topics/i18n/translation.txt:1150
# 0fff63c5428d4645aebf16a3a6dcae25
msgid "Message files"
msgstr ""

#: ../../topics/i18n/translation.txt:1152
# d3ab818e7cbb4f5ca614e3aede185e56
msgid "The first step is to create a :term:`message file` for a new language. A message file is a plain-text file, representing a single language, that contains all available translation strings and how they should be represented in the given language. Message files have a ``.po`` file extension."
msgstr ""

#: ../../topics/i18n/translation.txt:1157
# 7763ef5a8b2c44bcb16b1e2e0aa7a2f2
msgid "Django comes with a tool, :djadmin:`django-admin.py makemessages <makemessages>`, that automates the creation and upkeep of these files."
msgstr ""

#: ../../topics/i18n/translation.txt:1162
# d3a22e0be8bd4443b5f0d169f7e76ecf
msgid "The ``makemessages`` command (and ``compilemessages`` discussed later) use commands from the GNU gettext toolset: ``xgettext``, ``msgfmt``, ``msgmerge`` and ``msguniq``."
msgstr ""

#: ../../topics/i18n/translation.txt:1166
# 3fbc1b2171e049a0ba14d0ef4fe4f410
msgid "The minimum version of the ``gettext`` utilities supported is 0.15."
msgstr ""

#: ../../topics/i18n/translation.txt:1168
# c3d9460b81874853bf4126819436a2c8
msgid "To create or update a message file, run this command::"
msgstr ""

#: ../../topics/i18n/translation.txt:1172
# 5f5babe4ee134e249a57c69a782dcb78
msgid "...where ``de`` is the language code for the message file you want to create. The language code, in this case, is in :term:`locale format<locale name>`. For example, it's ``pt_BR`` for Brazilian Portuguese and ``de_AT`` for Austrian German."
msgstr ""

#: ../../topics/i18n/translation.txt:1177
# b5bbd4a83c654927a8688553286ed2a0
msgid "The script should be run from one of two places:"
msgstr ""

#: ../../topics/i18n/translation.txt:1179
# 8b7ecf6989f04915b92c882ed0845a34
msgid "The root directory of your Django project."
msgstr ""

#: ../../topics/i18n/translation.txt:1180
# 2f9821308f0746c18144aca614e4a33a
msgid "The root directory of your Django app."
msgstr ""

#: ../../topics/i18n/translation.txt:1182
# 8486a0274b2f464ba526b0daefe45e61
msgid "The script runs over your project source tree or your application source tree and pulls out all strings marked for translation. It creates (or updates) a message file in the directory ``locale/LANG/LC_MESSAGES``. In the ``de`` example, the file will be ``locale/de/LC_MESSAGES/django.po``."
msgstr ""

#: ../../topics/i18n/translation.txt:1187
# ca11363d0895426cacf86de1fc2a4032
msgid "By default :djadmin:`django-admin.py makemessages <makemessages>` examines every file that has the ``.html`` or ``.txt`` file extension. In case you want to override that default, use the ``--extension`` or ``-e`` option to specify the file extensions to examine::"
msgstr ""

#: ../../topics/i18n/translation.txt:1194
# 1e8bfe488f5146828b8af3a03e5f012a
msgid "Separate multiple extensions with commas and/or use ``-e`` or ``--extension`` multiple times::"
msgstr ""

#: ../../topics/i18n/translation.txt:1201
# d1845ad136134e3283cb50891e3b83e4
msgid "When :ref:`creating message files from JavaScript source code <creating-message-files-from-js-code>` you need to use the special 'djangojs' domain, **not** ``-e js``."
msgstr ""

#: ../../topics/i18n/translation.txt:1207
# 77edc167096f49579efa32c19c3d8603
msgid "If you don't have the ``gettext`` utilities installed, :djadmin:`makemessages` will create empty files. If that's the case, either install the ``gettext`` utilities or just copy the English message file (``locale/en/LC_MESSAGES/django.po``) if available and use it as a starting point; it's just an empty translation file."
msgstr ""

#: ../../topics/i18n/translation.txt:1215
# 316b4d46298846668cc5db6010f535d8
msgid "If you're using Windows and need to install the GNU gettext utilities so :djadmin:`makemessages` works, see :ref:`gettext_on_windows` for more information."
msgstr ""

#: ../../topics/i18n/translation.txt:1219
# 74b72402f36449448b7138273e6662a4
msgid "The format of ``.po`` files is straightforward. Each ``.po`` file contains a small bit of metadata, such as the translation maintainer's contact information, but the bulk of the file is a list of **messages** -- simple mappings between translation strings and the actual translated text for the particular language."
msgstr ""

#: ../../topics/i18n/translation.txt:1225
# a7c580d31d0b4474ba5d88d0f3a7cd8c
msgid "For example, if your Django app contained a translation string for the text ``\"Welcome to my site.\"``, like so::"
msgstr ""

#: ../../topics/i18n/translation.txt:1230
# ec9cc2ef826845cd9094fb31b0cd8335
msgid "...then :djadmin:`django-admin.py makemessages <makemessages>` will have created a ``.po`` file containing the following snippet -- a message::"
msgstr ""

#: ../../topics/i18n/translation.txt:1237
# 80035fedd934482bbf497c754c884a9d
msgid "A quick explanation:"
msgstr ""

#: ../../topics/i18n/translation.txt:1239
# 68ab31069aaf4fcc8132586bdde88a1d
msgid "``msgid`` is the translation string, which appears in the source. Don't change it."
msgstr ""

#: ../../topics/i18n/translation.txt:1241
# 94e8ca4f723946bc8349606147c96cc9
msgid "``msgstr`` is where you put the language-specific translation. It starts out empty, so it's your responsibility to change it. Make sure you keep the quotes around your translation."
msgstr ""

#: ../../topics/i18n/translation.txt:1244
# 831e1cc128544bc8b56dc9149c614832
msgid "As a convenience, each message includes, in the form of a comment line prefixed with ``#`` and located above the ``msgid`` line, the filename and line number from which the translation string was gleaned."
msgstr ""

#: ../../topics/i18n/translation.txt:1248
# 235bc47781814ebfa3548240eb9f1847
msgid "Long messages are a special case. There, the first string directly after the ``msgstr`` (or ``msgid``) is an empty string. Then the content itself will be written over the next few lines as one string per line. Those strings are directly concatenated. Don't forget trailing spaces within the strings; otherwise, they'll be tacked together without whitespace!"
msgstr ""

#: ../../topics/i18n/translation.txt:1256
# 549cdae3ead04cc7a023ab5dcc43ba1a
msgid "When creating a PO file with your favorite text editor, first edit the charset line (search for ``\"CHARSET\"``) and set it to the charset you'll be using to edit the content. Due to the way the ``gettext`` tools work internally and because we want to allow non-ASCII source strings in Django's core and your applications, you **must** use UTF-8 as the encoding for your PO file. This means that everybody will be using the same encoding, which is important when Django processes the PO files."
msgstr ""

#: ../../topics/i18n/translation.txt:1264
# ce43ead87cf94ef5b90599957b2fbb18
msgid "To reexamine all source code and templates for new translation strings and update all message files for **all** languages, run this::"
msgstr ""

#: ../../topics/i18n/translation.txt:1270
# 51eac6fd35bd47428c6dc2b707da0815
msgid "Compiling message files"
msgstr ""

#: ../../topics/i18n/translation.txt:1272
# 7132064c686145dd9a9c19f5660dbff8
msgid "After you create your message file -- and each time you make changes to it -- you'll need to compile it into a more efficient form, for use by ``gettext``. Do this with the :djadmin:`django-admin.py compilemessages <compilemessages>` utility."
msgstr ""

#: ../../topics/i18n/translation.txt:1277
# f349f1d375b94b15a388e4f014261852
msgid "This tool runs over all available ``.po`` files and creates ``.mo`` files, which are binary files optimized for use by ``gettext``. In the same directory from which you ran :djadmin:`django-admin.py makemessages <makemessages>`, run :djadmin:`django-admin.py compilemessages <compilemessages>` like this::"
msgstr ""

#: ../../topics/i18n/translation.txt:1283
# 7cf0d8f2a8814ff1b07be8a2e8f44035
msgid "That's it. Your translations are ready for use."
msgstr ""

#: ../../topics/i18n/translation.txt:1287
# 885e4aaaca734937ac110d79159ee3e0
msgid "If you're using Windows and need to install the GNU gettext utilities so :djadmin:`django-admin.py compilemessages <compilemessages>` works see :ref:`gettext_on_windows` for more information."
msgstr ""

#: ../../topics/i18n/translation.txt:1293
# 2560eec0cef24cb389a5ea6a6b663321
msgid "Django only supports ``.po`` files encoded in UTF-8 and without any BOM (Byte Order Mark) so if your text editor adds such marks to the beginning of files by default then you will need to reconfigure it."
msgstr ""

#: ../../topics/i18n/translation.txt:1300
# db50dabddec44a38a16e00dea8a087a9
msgid "Creating message files from JavaScript source code"
msgstr ""

#: ../../topics/i18n/translation.txt:1302
# 0c09bb0e7c3149749e6e5a2f66483550
msgid "You create and update the message files the same way as the other Django message files -- with the :djadmin:`django-admin.py makemessages <makemessages>` tool. The only difference is you need to explicitly specify what in gettext parlance is known as a domain in this case the ``djangojs`` domain, by providing a ``-d djangojs`` parameter, like this::"
msgstr ""

#: ../../topics/i18n/translation.txt:1310
# 92424787de1249028eeaca7d3c4d5b90
msgid "This would create or update the message file for JavaScript for German. After updating message files, just run :djadmin:`django-admin.py compilemessages <compilemessages>` the same way as you do with normal Django message files."
msgstr ""

#: ../../topics/i18n/translation.txt:1317
# c9edf511f76b41a09a9264d4daa6b71b
msgid "``gettext`` on Windows"
msgstr ""

#: ../../topics/i18n/translation.txt:1319
# 347495c17059465cb4ae06e3c432cc01
msgid "This is only needed for people who either want to extract message IDs or compile message files (``.po``). Translation work itself just involves editing existing files of this type, but if you want to create your own message files, or want to test or compile a changed message file, you will need the ``gettext`` utilities:"
msgstr ""

#: ../../topics/i18n/translation.txt:1324
# eb35187eb9804f00a724bf8e6e42809a
msgid "Download the following zip files from the GNOME servers http://ftp.gnome.org/pub/gnome/binaries/win32/dependencies/ or from one of its mirrors_"
msgstr ""

#: ../../topics/i18n/translation.txt:1328
# 9774912052424164aa539fb657ebed6c
msgid "``gettext-runtime-X.zip``"
msgstr ""

#: ../../topics/i18n/translation.txt:1329
# 8375168e7543488ea25a92c1fcae769c
msgid "``gettext-tools-X.zip``"
msgstr ""

#: ../../topics/i18n/translation.txt:1331
# a1760a56be7e4fe7a42ef5dcb81332ca
msgid "``X`` is the version number, we are requiring ``0.15`` or higher."
msgstr ""

#: ../../topics/i18n/translation.txt:1333
# fcba3a810e834cf08fdd25566a466ded
msgid "Extract the contents of the ``bin\\`` directories in both files to the same folder on your system (i.e. ``C:\\Program Files\\gettext-utils``)"
msgstr ""

#: ../../topics/i18n/translation.txt:1336
# c576a84f72a84499a4b867eb26cc9411
msgid "Update the system PATH:"
msgstr ""

#: ../../topics/i18n/translation.txt:1338
# 6b1da1c5a00d4f27bc684980e551a6ec
msgid "``Control Panel > System > Advanced > Environment Variables``."
msgstr ""

#: ../../topics/i18n/translation.txt:1339
# 43c55de16bb741be83abcf5080ca2b66
msgid "In the ``System variables`` list, click ``Path``, click ``Edit``."
msgstr ""

#: ../../topics/i18n/translation.txt:1340
# 81197f26f61043a7afa89f24384a39a4
msgid "Add ``;C:\\Program Files\\gettext-utils\\bin`` at the end of the ``Variable value`` field."
msgstr ""

#: ../../topics/i18n/translation.txt:1345
# 2472f2429ea14eb3b07bc57bdf13d5de
msgid "You may also use ``gettext`` binaries you have obtained elsewhere, so long as the ``xgettext --version`` command works properly. Do not attempt to use Django translation utilities with a ``gettext`` package if the command ``xgettext --version`` entered at a Windows command prompt causes a popup window saying \"xgettext.exe has generated errors and will be closed by Windows\"."
msgstr ""

#: ../../topics/i18n/translation.txt:1353
# 3b483fbbf7b84824916a56189fc37d38
msgid "Miscellaneous"
msgstr ""

#: ../../topics/i18n/translation.txt:1358
# ccb046a681904996a6c28d276e14eac9
msgid "The ``set_language`` redirect view"
msgstr ""

#: ../../topics/i18n/translation.txt:1366
# b37f378c02af4e97a19c8b84f9f90155
msgid "As a convenience, Django comes with a view, :func:`django.views.i18n.set_language`, that sets a user's language preference and redirects to a given URL or, by default, back to the previous page."
msgstr ""

#: ../../topics/i18n/translation.txt:1370
# ae33784cadf3491dba9cd7cf00643718
msgid "Make sure that the following item is in your :setting:`TEMPLATE_CONTEXT_PROCESSORS` list in your settings file::"
msgstr ""

#: ../../topics/i18n/translation.txt:1375
# fe2ff4465964418faf89e324f38196cf
msgid "Activate this view by adding the following line to your URLconf::"
msgstr ""

#: ../../topics/i18n/translation.txt:1379
# 515552f71dc6410b8d0b727c168b749f
msgid "(Note that this example makes the view available at ``/i18n/setlang/``.)"
msgstr ""

#: ../../topics/i18n/translation.txt:1383
# 8ff95f574be34b338080579b296f4807
msgid "Make sure that you don't include the above URL within :func:`~django.conf.urls.i18n.i18n_patterns` - it needs to be language-independent itself to work correctly."
msgstr ""

#: ../../topics/i18n/translation.txt:1387
# 235b9c49b720414a81cae848506ac82e
msgid "The view expects to be called via the ``POST`` method, with a ``language`` parameter set in request. If session support is enabled, the view saves the language choice in the user's session. Otherwise, it saves the language choice in a cookie that is by default named ``django_language``. (The name can be changed through the :setting:`LANGUAGE_COOKIE_NAME` setting.)"
msgstr ""

#: ../../topics/i18n/translation.txt:1393
# 11c74a2dba1546be891f9b1b0d95d3e3
msgid "After setting the language choice, Django redirects the user, following this algorithm:"
msgstr ""

#: ../../topics/i18n/translation.txt:1396
# 083989f48d884e1dbfd3ac88e96ace64
msgid "Django looks for a ``next`` parameter in the ``POST`` data."
msgstr ""

#: ../../topics/i18n/translation.txt:1397
# e6a1ba19720349d18bdb6cbf73cf7471
msgid "If that doesn't exist, or is empty, Django tries the URL in the ``Referrer`` header."
msgstr ""

#: ../../topics/i18n/translation.txt:1399
# dad365a7ec984555a7f3ebc2042ec591
msgid "If that's empty -- say, if a user's browser suppresses that header -- then the user will be redirected to ``/`` (the site root) as a fallback."
msgstr ""

#: ../../topics/i18n/translation.txt:1402
# c9bdf643f0cb4c39b720b3f4f7dcc5b3
msgid "Here's example HTML template code:"
msgstr ""

#: ../../topics/i18n/translation.txt:1418
# c7949919a5d54d2a97b2b95988163a5e
msgid "In this example, Django looks up the URL of the page to which the user will be redirected in the ``redirect_to`` context variable."
msgstr ""

#: ../../topics/i18n/translation.txt:1422
# 1ed6f5cd9a4a46cca1cdf3c2c5786548
msgid "Using translations outside views and templates"
msgstr ""

#: ../../topics/i18n/translation.txt:1424
# bf3e5b87d73844db8b661ecef4be3343
msgid "While Django provides a rich set of i18n tools for use in views and templates, it does not restrict the usage to Django-specific code. The Django translation mechanisms can be used to translate arbitrary texts to any language that is supported by Django (as long as an appropriate translation catalog exists, of course). You can load a translation catalog, activate it and translate text to language of your choice, but remember to switch back to original language, as activating a translation catalog is done on per-thread basis and such change will affect code running in the same thread."
msgstr ""

#: ../../topics/i18n/translation.txt:1445
# 97a1da28b290481195c5f6a5b8731dce
msgid "Calling this function with the value 'de' will give you ``\"Willkommen\"``, regardless of :setting:`LANGUAGE_CODE` and language set by middleware."
msgstr ""

#: ../../topics/i18n/translation.txt:1448
# 2803700f8d0a443394ab960e2c101b92
msgid "Functions of particular interest are ``django.utils.translation.get_language()`` which returns the language used in the current thread, ``django.utils.translation.activate()`` which activates a translation catalog for the current thread, and ``django.utils.translation.check_for_language()`` which checks if the given language is supported by Django."
msgstr ""

#: ../../topics/i18n/translation.txt:1455
# 4c508f16854944f2a4a25dab550df949
msgid "Implementation notes"
msgstr ""

#: ../../topics/i18n/translation.txt:1460
# d2ba46e91a374adfa43013077c7e5701
msgid "Specialties of Django translation"
msgstr ""

#: ../../topics/i18n/translation.txt:1462
# 1a1c6cbd938944469d69cebb5ab6871b
msgid "Django's translation machinery uses the standard ``gettext`` module that comes with Python. If you know ``gettext``, you might note these specialties in the way Django does translation:"
msgstr ""

#: ../../topics/i18n/translation.txt:1466
# a35fd857ce4747cbb8155c964e056794
msgid "The string domain is ``django`` or ``djangojs``. This string domain is used to differentiate between different programs that store their data in a common message-file library (usually ``/usr/share/locale/``). The ``django`` domain is used for python and template translation strings and is loaded into the global translation catalogs. The ``djangojs`` domain is only used for JavaScript translation catalogs to make sure that those are as small as possible."
msgstr ""

#: ../../topics/i18n/translation.txt:1473
# 4d5460856a1544c59c7f3e12063ceead
msgid "Django doesn't use ``xgettext`` alone. It uses Python wrappers around ``xgettext`` and ``msgfmt``. This is mostly for convenience."
msgstr ""

#: ../../topics/i18n/translation.txt:1479
# 44727aab38364c549719ed7aa60da218
msgid "How Django discovers language preference"
msgstr ""

#: ../../topics/i18n/translation.txt:1481
# de04930cbc824a48a5a4520a743bbdac
msgid "Once you've prepared your translations -- or, if you just want to use the translations that come with Django -- you'll just need to activate translation for your app."
msgstr ""

#: ../../topics/i18n/translation.txt:1485
# e88ce15744a9429d8747d754ea12c7db
msgid "Behind the scenes, Django has a very flexible model of deciding which language should be used -- installation-wide, for a particular user, or both."
msgstr ""

#: ../../topics/i18n/translation.txt:1488
# bef13973d0dd4a75a3b448d2104f6e37
msgid "To set an installation-wide language preference, set :setting:`LANGUAGE_CODE`. Django uses this language as the default translation -- the final attempt if no other translator finds a translation."
msgstr ""

#: ../../topics/i18n/translation.txt:1492
# 248bc77fffb9456e93ddc5d42d5ae9d7
msgid "If all you want to do is run Django with your native language, and a language file is available for it, all you need to do is set :setting:`LANGUAGE_CODE`."
msgstr ""

#: ../../topics/i18n/translation.txt:1495
# 9f36bb0f9efc4f39bc6f632853107459
msgid "If you want to let each individual user specify which language he or she prefers, use ``LocaleMiddleware``. ``LocaleMiddleware`` enables language selection based on data from the request. It customizes content for each user."
msgstr ""

#: ../../topics/i18n/translation.txt:1499
# 16e9d29584154a169f05c267e8693766
msgid "To use ``LocaleMiddleware``, add ``'django.middleware.locale.LocaleMiddleware'`` to your :setting:`MIDDLEWARE_CLASSES` setting. Because middleware order matters, you should follow these guidelines:"
msgstr ""

#: ../../topics/i18n/translation.txt:1503
# 4ae4325430294b2091a1dd08128d0f22
msgid "Make sure it's one of the first middlewares installed."
msgstr ""

#: ../../topics/i18n/translation.txt:1504
# 17dde73b54464433bab0d9ada856cb02
msgid "It should come after ``SessionMiddleware``, because ``LocaleMiddleware`` makes use of session data. And it should come before ``CommonMiddleware`` because ``CommonMiddleware`` needs an activated language in order to resolve the requested URL."
msgstr ""

#: ../../topics/i18n/translation.txt:1508
# 411e5d9cb0e54b7a845ddf9837147d5a
msgid "If you use ``CacheMiddleware``, put ``LocaleMiddleware`` after it."
msgstr ""

#: ../../topics/i18n/translation.txt:1510
# a15a1b96e5a54fdfb9266d8f5e9fd7df
msgid "For example, your :setting:`MIDDLEWARE_CLASSES` might look like this::"
msgstr ""

#: ../../topics/i18n/translation.txt:1518
# a42e7872cee948eb90886210e551cc38
msgid "(For more on middleware, see the :doc:`middleware documentation </topics/http/middleware>`.)"
msgstr ""

#: ../../topics/i18n/translation.txt:1521
# 45f435571aa24fe49e0adc38a767409c
msgid "``LocaleMiddleware`` tries to determine the user's language preference by following this algorithm:"
msgstr ""

#: ../../topics/i18n/translation.txt:1526
# 244aadbe5bc9429f8263e9450533dc00
msgid "First, it looks for the language prefix in the requested URL.  This is only performed when you are using the ``i18n_patterns`` function in your root URLconf. See :ref:`url-internationalization` for more information about the language prefix and how to internationalize URL patterns."
msgstr ""

#: ../../topics/i18n/translation.txt:1531
# f12d010f08db419986e49afff2e4f0a1
msgid "Failing that, it looks for a ``django_language`` key in the current user's session."
msgstr ""

#: ../../topics/i18n/translation.txt:1534
# a629ba42d1fc4dd492efb2754c62c396
msgid "Failing that, it looks for a cookie."
msgstr ""

#: ../../topics/i18n/translation.txt:1536
# d6bae1a7856a4bf3b0fa960cc8b77cec
msgid "The name of the cookie used is set by the :setting:`LANGUAGE_COOKIE_NAME` setting. (The default name is ``django_language``.)"
msgstr ""

#: ../../topics/i18n/translation.txt:1539
# 510085fcab9b4fb9b0d3e25a1bd57574
msgid "Failing that, it looks at the ``Accept-Language`` HTTP header. This header is sent by your browser and tells the server which language(s) you prefer, in order by priority. Django tries each language in the header until it finds one with available translations."
msgstr ""

#: ../../topics/i18n/translation.txt:1544
# 27178a7a5d084a1cb0742ed7641038d7
msgid "Failing that, it uses the global :setting:`LANGUAGE_CODE` setting."
msgstr ""

#: ../../topics/i18n/translation.txt:1550
# e1d908f303454f40a5cc6496744b2391
msgid "In each of these places, the language preference is expected to be in the standard :term:`language format<language code>`, as a string. For example, Brazilian Portuguese is ``pt-br``."
msgstr ""

#: ../../topics/i18n/translation.txt:1554
# 7d66e2c8a2f24517b8834e0299cef153
msgid "If a base language is available but the sublanguage specified is not, Django uses the base language. For example, if a user specifies ``de-at`` (Austrian German) but Django only has ``de`` available, Django uses ``de``."
msgstr ""

#: ../../topics/i18n/translation.txt:1559
# 5156ea488d894d2db531a0f90ccee13e
msgid "Only languages listed in the :setting:`LANGUAGES` setting can be selected. If you want to restrict the language selection to a subset of provided languages (because your application doesn't provide all those languages), set :setting:`LANGUAGES` to a list of languages. For example::"
msgstr ""

#: ../../topics/i18n/translation.txt:1569
# 1895e2e0581e4b1bbe781c2b0dbfac9b
msgid "This example restricts languages that are available for automatic selection to German and English (and any sublanguage, like de-ch or en-us)."
msgstr ""

#: ../../topics/i18n/translation.txt:1573
# 2a70713a05a04d5da974fad188b747f0
msgid "If you define a custom :setting:`LANGUAGES` setting, as explained in the previous bullet, it's OK to mark the languages as translation strings -- but use a \"dummy\" ``ugettext()`` function, not the one in ``django.utils.translation``. You should *never* import ``django.utils.translation`` from within your settings file, because that module in itself depends on the settings, and that would cause a circular import."
msgstr ""

#: ../../topics/i18n/translation.txt:1581
# 6d0d8e902d4e4d39b5c8abf0a36da850
msgid "The solution is to use a \"dummy\" ``ugettext()`` function. Here's a sample settings file::"
msgstr ""

#: ../../topics/i18n/translation.txt:1591
# fa9eebb3dea148a5bef79a58aacda5e4
msgid "With this arrangement, :djadmin:`django-admin.py makemessages <makemessages>` will still find and mark these strings for translation, but the translation won't happen at runtime -- so you'll have to remember to wrap the languages in the *real* ``ugettext()`` in any code that uses :setting:`LANGUAGES` at runtime."
msgstr ""

#: ../../topics/i18n/translation.txt:1597
# ad026d725c0b4ec6834133a23c72a926
msgid "The ``LocaleMiddleware`` can only select languages for which there is a Django-provided base translation. If you want to provide translations for your application that aren't already in the set of translations in Django's source tree, you'll want to provide at least a basic one as described in the :ref:`Locale restrictions<locale-restrictions>` note."
msgstr ""

#: ../../topics/i18n/translation.txt:1604
# de8a50bcffea488bb3fec6bb2aa3822a
msgid "Once ``LocaleMiddleware`` determines the user's preference, it makes this preference available as ``request.LANGUAGE_CODE`` for each :class:`~django.http.HttpRequest`. Feel free to read this value in your view code. Here's a simple example::"
msgstr ""

#: ../../topics/i18n/translation.txt:1615
# 428fccac8a904888be8e517cb8bf22ab
msgid "Note that, with static (middleware-less) translation, the language is in ``settings.LANGUAGE_CODE``, while with dynamic (middleware) translation, it's in ``request.LANGUAGE_CODE``."
msgstr ""

#: ../../topics/i18n/translation.txt:1627
# e8790a0953294cd8b1b2bc9073242c75
msgid "How Django discovers translations"
msgstr ""

#: ../../topics/i18n/translation.txt:1629
# f802277176384569ba602a568f97df37
msgid "At runtime, Django builds an in-memory unified catalog of literals-translations. To achieve this it looks for translations by following this algorithm regarding the order in which it examines the different file paths to load the compiled :term:`message files <message file>` (``.mo``) and the precedence of multiple translations for the same literal:"
msgstr ""

#: ../../topics/i18n/translation.txt:1635
# f52f05d266f04a63b992386f7bc4b3d3
msgid "The directories listed in :setting:`LOCALE_PATHS` have the highest precedence, with the ones appearing first having higher precedence than the ones appearing later."
msgstr ""

#: ../../topics/i18n/translation.txt:1638
# f60703d1670147248885b1fba86f8f3f
msgid "Then, it looks for and uses if it exists a ``locale`` directory in each of the installed apps listed in :setting:`INSTALLED_APPS`.  The ones appearing first have higher precedence than the ones appearing later."
msgstr ""

#: ../../topics/i18n/translation.txt:1641
# d5d211651d8846c09639a06c93470b24
msgid "Finally, the Django-provided base translation in ``django/conf/locale`` is used as a fallback."
msgstr ""

#: ../../topics/i18n/translation.txt:1646
# 0f51960a3e7a4db8aba9b711bee13a11
msgid "The translations for literals included in JavaScript assets are looked up following a similar but not identical algorithm. See the :ref:`javascript_catalog view documentation <javascript_catalog-view>` for more details."
msgstr ""

#: ../../topics/i18n/translation.txt:1651
# 402bde046e7d41eaa31f980bb212ee6f
msgid "In all cases the name of the directory containing the translation is expected to be named using :term:`locale name` notation. E.g. ``de``, ``pt_BR``, ``es_AR``, etc."
msgstr ""

#: ../../topics/i18n/translation.txt:1655
# aee306729c0e4c219e94e32b42bf86ca
msgid "This way, you can write applications that include their own translations, and you can override base translations in your project. Or, you can just build a big project out of several apps and put all translations into one big common message file specific to the project you are composing. The choice is yours."
msgstr ""

#: ../../topics/i18n/translation.txt:1660
# 6968f827ad674e619cd7abaa4a6692cb
msgid "All message file repositories are structured the same way. They are:"
msgstr ""

#: ../../topics/i18n/translation.txt:1662
# c1fed7a3c6b64ec1bfac4f812f58aa08
msgid "All paths listed in :setting:`LOCALE_PATHS` in your settings file are searched for ``<language>/LC_MESSAGES/django.(po|mo)``"
msgstr ""

#: ../../topics/i18n/translation.txt:1664
# d5c0cd628e324e66a3598e6e7c9593c9
msgid "``$APPPATH/locale/<language>/LC_MESSAGES/django.(po|mo)``"
msgstr ""

#: ../../topics/i18n/translation.txt:1665
# 0e36bc7a76824e89aedf06556edf7171
msgid "``$PYTHONPATH/django/conf/locale/<language>/LC_MESSAGES/django.(po|mo)``"
msgstr ""

#: ../../topics/i18n/translation.txt:1667
# cd53838915994c8db6efa63c02ddf13e
msgid "To create message files, you use the :djadmin:`django-admin.py makemessages <makemessages>` tool. You only need to be in the same directory where the ``locale/`` directory is located. And you use :djadmin:`django-admin.py compilemessages <compilemessages>` to produce the binary ``.mo`` files that are used by ``gettext``."
msgstr ""

#: ../../topics/i18n/translation.txt:1672
# b2328e87fa13442d8b4359a755a3df4e
msgid "You can also run :djadmin:`django-admin.py compilemessages --settings=path.to.settings <compilemessages>` to make the compiler process all the directories in your :setting:`LOCALE_PATHS` setting."
msgstr ""

#: ../../topics/i18n/translation.txt:1676
# 04f66a65aa474845980f6065838cb9ea
msgid "Finally, you should give some thought to the structure of your translation files. If your applications need to be delivered to other users and will be used in other projects, you might want to use app-specific translations. But using app-specific translations and project-specific translations could produce weird problems with :djadmin:`makemessages`: it will traverse all directories below the current path and so might put message IDs into a unified, common message file for the current project that are already in application message files."
msgstr ""

#: ../../topics/i18n/translation.txt:1684
# 6810f055de754b90bcff34be725174f9
msgid "The easiest way out is to store applications that are not part of the project (and so carry their own translations) outside the project tree. That way, :djadmin:`django-admin.py makemessages <makemessages>`, when ran on a project level will only extract strings that are connected to your explicit project and not strings that are distributed independently."
msgstr ""

#: ../../topics/index.txt:2
# e467eba45c74444683176dae73066d25
msgid "Using Django"
msgstr ""

#: ../../topics/index.txt:4
# 1e8b151a67b8431c9aedce042796b57a
msgid "Introductions to all the key parts of Django you'll need to know:"
msgstr ""

#: ../../topics/install.txt:3
# fe203dac2aeb41fea79052404a42f8d9
msgid "How to install Django"
msgstr ""

#: ../../topics/install.txt:5
# c343b7258fe743d38f816a95bfa1a649
msgid "This document will get you up and running with Django."
msgstr ""

#: ../../topics/install.txt:8
# 9eaccb40e729468586a47c5a8a995583
msgid "Install Python"
msgstr ""

#: ../../topics/install.txt:10
# 890943cb339445159898b37584aa2a2f
msgid "Being a Python Web framework, Django requires Python."
msgstr ""

#: ../../topics/install.txt:12
# a9bc0cca7d0544e4af17ad392796ba90
msgid "It works with any Python version from 2.6.5 to 2.7. It also features experimental support for versions from 3.2.3 to 3.3."
msgstr ""

#: ../../topics/install.txt:15
# fb1f2390ad4b4543b0981e1a1e7895cf
msgid "Get Python at http://www.python.org. If you're running Linux or Mac OS X, you probably already have it installed."
msgstr ""

#: ../../topics/install.txt:20
# f0c7b45408e04df58e03c3ce3b296b72
msgid "If you use Jython_ (a Python implementation for the Java platform), you'll need to follow a few additional steps. See :doc:`/howto/jython` for details."
msgstr ""

#: ../../topics/install.txt:27
# c857d847b4444a31a685232e2fb9e8fd
msgid "On Windows, you might need to adjust your ``PATH`` environment variable to include paths to Python executable and additional scripts. For example, if your Python is installed in ``C:\\Python27\\``, the following paths need to be added to ``PATH``::"
msgstr ""

#: ../../topics/install.txt:35
# 851bdaa0890a4304a1833812a6e42b9b
msgid "Install Apache and mod_wsgi"
msgstr ""

#: ../../topics/install.txt:37
# fab5f95e38e44ecf86b860815d2bb347
msgid "If you just want to experiment with Django, skip ahead to the next section; Django includes a lightweight web server you can use for testing, so you won't need to set up Apache until you're ready to deploy Django in production."
msgstr ""

#: ../../topics/install.txt:42
# c886fce3603141029af1a2c7ba59546f
msgid "If you want to use Django on a production site, use `Apache`_ with `mod_wsgi`_. mod_wsgi can operate in one of two modes: an embedded mode and a daemon mode. In embedded mode, mod_wsgi is similar to mod_perl -- it embeds Python within Apache and loads Python code into memory when the server starts. Code stays in memory throughout the life of an Apache process, which leads to significant performance gains over other server arrangements. In daemon mode, mod_wsgi spawns an independent daemon process that handles requests. The daemon process can run as a different user than the Web server, possibly leading to improved security, and the daemon process can be restarted without restarting the entire Apache Web server, possibly making refreshing your codebase more seamless. Consult the mod_wsgi documentation to determine which mode is right for your setup. Make sure you have Apache installed, with the mod_wsgi module activated. Django will work with any version of Apache that supports mod_wsgi."
msgstr ""

#: ../../topics/install.txt:58
# d069d0a4baaa4b059a6dd47f0479b032
msgid "See :doc:`How to use Django with mod_wsgi </howto/deployment/wsgi/modwsgi>` for information on how to configure mod_wsgi once you have it installed."
msgstr ""

#: ../../topics/install.txt:62
# 1372471a26414a958fafc7b8fa44e761
msgid "If you can't use mod_wsgi for some reason, fear not: Django supports many other deployment options. One is :doc:`uWSGI </howto/deployment/wsgi/uwsgi>`; it works very well with `nginx`_. Another is :doc:`FastCGI </howto/deployment/fastcgi>`, perfect for using Django with servers other than Apache. Additionally, Django follows the WSGI spec (:pep:`3333`), which allows it to run on a variety of server platforms. See the `server-arrangements wiki page`_ for specific installation instructions for each platform."
msgstr ""

#: ../../topics/install.txt:78
# 1914694a660c44ad8444f1a973591244
msgid "Get your database running"
msgstr ""

#: ../../topics/install.txt:80
# 61d018862e394858a5b0d023d6b2f149
msgid "If you plan to use Django's database API functionality, you'll need to make sure a database server is running. Django supports many different database servers and is officially supported with PostgreSQL_, MySQL_, Oracle_ and SQLite_."
msgstr ""

#: ../../topics/install.txt:85
# 246d7a50249a4327bbe3d81a1a1e6405
msgid "If you are developing a simple project or something you don't plan to deploy in a production environment, SQLite is generally the simplest option as it doesn't require running a separate server. However, SQLite has many differences from other databases, so if you are working on something substantial, it's recommended to develop with the same database as you plan on using in production."
msgstr ""

#: ../../topics/install.txt:92
# 61da4e4bf93c4fb0892867c5bdc70ccf
msgid "In addition to the officially supported databases, there are backends provided by 3rd parties that allow you to use other databases with Django:"
msgstr ""

#: ../../topics/install.txt:95
# 3eb7781d52364fc1a83a20df0b873916
msgid "`Sybase SQL Anywhere`_"
msgstr ""

#: ../../topics/install.txt:96
# 0e4f8e727ad34418b3fbb60c9cc2e36c
msgid "`IBM DB2`_"
msgstr ""

#: ../../topics/install.txt:97
# 3a5e0288583247f982691d34460295cb
msgid "`Microsoft SQL Server 2005`_"
msgstr ""

#: ../../topics/install.txt:98
# 43407d9939614ad5aeb8104ce25a35a9
msgid "Firebird_"
msgstr ""

#: ../../topics/install.txt:99
# 9f331112aa2e40fca009e801fdfe86f2
msgid "ODBC_"
msgstr ""

#: ../../topics/install.txt:101
# 91bf77f713af48a9bbb2c7c06dac2c0d
msgid "The Django versions and ORM features supported by these unofficial backends vary considerably. Queries regarding the specific capabilities of these unofficial backends, along with any support queries, should be directed to the support channels provided by each 3rd party project."
msgstr ""

#: ../../topics/install.txt:106
# 73da083433084918a3594d50a11e3cdf
msgid "In addition to a database backend, you'll need to make sure your Python database bindings are installed."
msgstr ""

#: ../../topics/install.txt:109
# 1c281e0be8154f79952718d5fdd49881
msgid "If you're using PostgreSQL, you'll need the `postgresql_psycopg2`_ package. You might want to refer to our :ref:`PostgreSQL notes <postgresql-notes>` for further technical details specific to this database."
msgstr ""

#: ../../topics/install.txt:113
# faa1d1bc5ede414fbc1bd5247ebc8173
msgid "If you're on Windows, check out the unofficial `compiled Windows version`_."
msgstr ""

#: ../../topics/install.txt:115
# cc739dee24884b8fb72ec9b237e4fb29
msgid "If you're using MySQL, you'll need the ``MySQL-python`` package, version 1.2.1p2 or higher. You will also want to read the database-specific :ref:`notes for the MySQL backend <mysql-notes>`."
msgstr ""

#: ../../topics/install.txt:119
# c0bdfc9a42c540fcbb2c71c090f5fc6e
msgid "If you're using Oracle, you'll need a copy of cx_Oracle_, but please read the database-specific :ref:`notes for the Oracle backend <oracle-notes>` for important information regarding supported versions of both Oracle and ``cx_Oracle``."
msgstr ""

#: ../../topics/install.txt:124
# 9a159679050b44cf942e0ac3916a207e
msgid "If you're using an unofficial 3rd party backend, please consult the documentation provided for any additional requirements."
msgstr ""

#: ../../topics/install.txt:127
# 29eca63b1d1d4c63840ee4dc5f503f12
msgid "If you plan to use Django's ``manage.py syncdb`` command to automatically create database tables for your models (after first installing Django and creating a project), you'll need to ensure that Django has permission to create and alter tables in the database you're using; if you plan to manually create the tables, you can simply grant Django ``SELECT``, ``INSERT``, ``UPDATE`` and ``DELETE`` permissions. On some databases, Django will need ``ALTER TABLE`` privileges during ``syncdb`` but won't issue ``ALTER TABLE`` statements on a table once ``syncdb`` has created it. After creating a database user with these permissions, you'll specify the details in your project's settings file, see :setting:`DATABASES` for details."
msgstr ""

#: ../../topics/install.txt:138
# 3308823e242d4a4c91e62ec608dd2121
msgid "If you're using Django's :doc:`testing framework</topics/testing/index>` to test database queries, Django will need permission to create a test database."
msgstr ""

#: ../../topics/install.txt:157
# fc617f069e564e23bf520c368ac66f60
msgid "Remove any old versions of Django"
msgstr ""

#: ../../topics/install.txt:159
# 4eeeceb8b389495289cb1e3749a72dcd
msgid "If you are upgrading your installation of Django from a previous version, you will need to uninstall the old Django version before installing the new version."
msgstr ""

#: ../../topics/install.txt:163
# 37571f4a28bf4ca3aef7bbae863e9112
msgid "If you installed Django using pip_ or ``easy_install`` previously, installing with pip_ or ``easy_install`` again will automatically take care of the old version, so you don't need to do it yourself."
msgstr ""

#: ../../topics/install.txt:167
# 1faa989a9e6c475abcca095aee250fec
msgid "If you previously installed Django using ``python setup.py install``, uninstalling is as simple as deleting the ``django`` directory from your Python ``site-packages``. To find the directory you need to remove, you can run the following at your shell prompt (not the interactive Python prompt):"
msgstr ""

#: ../../topics/install.txt:180
# e39b4a1a030e4eb9af8aa787bfe9ab24
msgid "Install the Django code"
msgstr ""

#: ../../topics/install.txt:182
# 6519da7c75ab4eb0abd47463d3fa8017
msgid "Installation instructions are slightly different depending on whether you're installing a distribution-specific package, downloading the latest official release, or fetching the latest development version."
msgstr ""

#: ../../topics/install.txt:186
# 0c1906590c064ea5829e833af153fe54
msgid "It's easy, no matter which way you choose."
msgstr ""

#: ../../topics/install.txt:189
# cc9554493e734bd18b93d0dfd2f4e644
msgid "Installing a distribution-specific package"
msgstr ""

#: ../../topics/install.txt:191
# 07d3ae860712404eb5eca747b8721770
msgid "Check the :doc:`distribution specific notes </misc/distributions>` to see if your platform/distribution provides official Django packages/installers. Distribution-provided packages will typically allow for automatic installation of dependencies and easy upgrade paths."
msgstr ""

#: ../../topics/install.txt:199
# 4317d6ba34bd4073bfd82596960b4c55
msgid "Installing an official release with ``pip``"
msgstr ""

#: ../../topics/install.txt:201
# 7afef2a90f3d41178917e7df9e187664
msgid "This is the recommended way to install Django."
msgstr ""

#: ../../topics/install.txt:203
# f1549e9405a2487f8b7fad2dcf12c496
msgid "Install pip_. The easiest is to use the `standalone pip installer`_. If your distribution already has ``pip`` installed, you might need to update it if it's outdated. (If it's outdated, you'll know because installation won't work.)"
msgstr ""

#: ../../topics/install.txt:208
# 0108d623ac4f48079a410711c91452b8
msgid "(optional) Take a look at virtualenv_ and virtualenvwrapper_. These tools provide isolated Python environments, which are more practical than installing packages systemwide. They also allow installing packages without administrator privileges. It's up to you to decide if you want to learn and use them."
msgstr ""

#: ../../topics/install.txt:214
# 548061f941b34b629dd1f5859b31ba68
msgid "If you're using Linux, Mac OS X or some other flavor of Unix, enter the command ``sudo pip install Django`` at the shell prompt. If you're using Windows, start a command shell with administrator privileges and run the command ``pip install Django``. This will install Django in your Python installation's ``site-packages`` directory."
msgstr ""

#: ../../topics/install.txt:220
# bae5998789a145db89d1754c808eee6b
msgid "If you're using a virtualenv, you don't need ``sudo`` or administrator privileges, and this will install Django in the virtualenv's ``site-packages`` directory."
msgstr ""

#: ../../topics/install.txt:230
# f03d3ee166f54f24a0b5c48755132318
msgid "Installing an official release manually"
msgstr ""

#: ../../topics/install.txt:232
# 0ac3f38cb6bc4691a41848933377155a
msgid "Download the latest release from our `download page`_."
msgstr ""

#: ../../topics/install.txt:234
# adf4d164ed7e4719baed367f4fe15d96
msgid "Untar the downloaded file (e.g. ``tar xzvf Django-X.Y.tar.gz``, where ``X.Y`` is the version number of the latest release). If you're using Windows, you can download the command-line tool bsdtar_ to do this, or you can use a GUI-based tool such as 7-zip_."
msgstr ""

#: ../../topics/install.txt:239
# 186f78f6eda3414e8a10f2db64208c12
msgid "Change into the directory created in step 2 (e.g. ``cd Django-X.Y``)."
msgstr ""

#: ../../topics/install.txt:241
# e55ce82bd94a4fa7939bdf73c005dd19
msgid "If you're using Linux, Mac OS X or some other flavor of Unix, enter the command ``sudo python setup.py install`` at the shell prompt. If you're using Windows, start a command shell with administrator privileges and run the command ``python setup.py install``. This will install Django in your Python installation's ``site-packages`` directory."
msgstr ""

#: ../../topics/install.txt:249
# 425a55078abd4d6e90c6e4a7417d3fff
msgid "If you use this installation technique, it is particularly important that you :ref:`remove any existing installations<removing-old-versions-of-django>` of Django first. Otherwise, you can end up with a broken installation that includes files from previous versions that have since been removed from Django."
msgstr ""

#: ../../topics/install.txt:263
# 345e34aaaf5d47fcb024a9669b2b9f18
msgid "Installing the development version"
msgstr ""

#: ../../topics/install.txt:267
# e81feb334d664301afad246804a6d3e4
msgid "If you decide to use the latest development version of Django, you'll want to pay close attention to `the development timeline`_, and you'll want to keep an eye on the :ref:`release notes for the upcoming release <development_release_notes>`. This will help you stay on top of any new features you might want to use, as well as any changes you'll need to make to your code when updating your copy of Django. (For stable releases, any necessary changes are documented in the release notes.)"
msgstr ""

#: ../../topics/install.txt:278
# da15d64d08074f91b4f19d32140f0ab0
msgid "If you'd like to be able to update your Django code occasionally with the latest bug fixes and improvements, follow these instructions:"
msgstr ""

#: ../../topics/install.txt:281
# dced2b8e2baf46908c4483c72abe1f2b
msgid "Make sure that you have Git_ installed and that you can run its commands from a shell. (Enter ``git help`` at a shell prompt to test this.)"
msgstr ""

#: ../../topics/install.txt:284
# a4eeb2fd68c44dbfb2d1f47030f8e190
msgid "Check out Django's main development branch (the 'trunk' or 'master') like so:"
msgstr ""

#: ../../topics/install.txt:291
# 3d552031f45e49478ab652ebfdd3eaf7
msgid "This will create a directory ``django-trunk`` in your current directory."
msgstr ""

#: ../../topics/install.txt:293
# 81c618df13b24e7d8a256a423ebdee1b
msgid "Make sure that the Python interpreter can load Django's code. The most convenient way to do this is via pip_. Run the following command:"
msgstr ""

#: ../../topics/install.txt:300
# 3eb13d8f49444a60a7c151db96d485b6
msgid "(If using a virtualenv_ you can omit ``sudo``.)"
msgstr ""

#: ../../topics/install.txt:302
# 35734f8d7e0b4b198c2e4c8ac11e96ed
msgid "This will make Django's code importable, and will also make the ``django-admin.py`` utility command available. In other words, you're all set!"
msgstr ""

#: ../../topics/install.txt:306
# 7d7cff69d576439fba70ddfecbcc52a9
msgid "If you don't have pip_ available, see the alternative instructions for `installing the development version without pip`_."
msgstr ""

#: ../../topics/install.txt:311
# b72f80514dd740f8ae70dc3caa59bb23
msgid "Don't run ``sudo python setup.py install``, because you've already carried out the equivalent actions in step 3."
msgstr ""

#: ../../topics/install.txt:314
# 8017803fe2434755ab4e5c83c275dad6
msgid "When you want to update your copy of the Django source code, just run the command ``git pull`` from within the ``django-trunk`` directory. When you do this, Git will automatically download any changes."
msgstr ""

#: ../../topics/install.txt:323
# 50e30a5698cd4da49f89390afd306e58
msgid "Installing the development version without pip"
msgstr ""

#: ../../topics/install.txt:325
# 81b0454b0dd944338b2e96412834c1f4
msgid "If you don't have pip_, you can instead manually `modify Python's search path`_."
msgstr ""

#: ../../topics/install.txt:328
# ef6aff49d5ec4d8aad56d232f8be0bc7
msgid "First follow steps 1 and 2 above, so that you have a ``django-trunk`` directory with a checkout of Django's latest code in it. Then add a ``.pth`` file containing the full path to the ``django-trunk`` directory to your system's ``site-packages`` directory. For example, on a Unix-like system:"
msgstr ""

#: ../../topics/install.txt:337
# 4e832f1bd9d644c4b2014b0f7221eeb9
msgid "In the above line, change ``WORKING-DIR/django-trunk`` to match the full path to your new ``django-trunk`` directory, and change ``SITE-PACKAGES-DIR`` to match the location of your system's ``site-packages`` directory."
msgstr ""

#: ../../topics/install.txt:341
# 49ceea2435ee4839898825b26c2ed31a
msgid "The location of the ``site-packages`` directory depends on the operating system, and the location in which Python was installed. To find your system's ``site-packages`` location, execute the following:"
msgstr ""

#: ../../topics/install.txt:349
# 17c62314cd6d4862b66ec780ea85d705
msgid "(Note that this should be run from a shell prompt, not a Python interactive prompt.)"
msgstr ""

#: ../../topics/install.txt:352
# 333ee88aa1f344918d60d3239d2e23cf
msgid "Some Debian-based Linux distributions have separate ``site-packages`` directories for user-installed packages, such as when installing Django from a downloaded tarball. The command listed above will give you the system's ``site-packages``, the user's directory can be found in ``/usr/local/lib/`` instead of ``/usr/lib/``."
msgstr ""

#: ../../topics/install.txt:358
# cdc1d00ef7b74d09bb4b8e7c7d15b61c
msgid "Next you need to make the ``django-admin.py`` utility available in your shell PATH."
msgstr ""

#: ../../topics/install.txt:361
# 4cbdcd6d9f854acdbb2cd6b52af2ad72
msgid "On Unix-like systems, create a symbolic link to the file ``django-trunk/django/bin/django-admin.py`` in a directory on your system path, such as ``/usr/local/bin``. For example:"
msgstr ""

#: ../../topics/install.txt:369
# ae7e1f48cfa0491ca0360bf9d1055bca
msgid "(In the above line, change WORKING-DIR to match the full path to your new ``django-trunk`` directory.)"
msgstr ""

#: ../../topics/install.txt:372
# dabdfe22bcdd4152a31611d78c55396c
msgid "This simply lets you type ``django-admin.py`` from within any directory, rather than having to qualify the command with the full path to the file."
msgstr ""

#: ../../topics/install.txt:375
# a613ff3dd48a4991a4f88781bcc6c1b5
msgid "On Windows systems, the same result can be achieved by copying the file ``django-trunk/django/bin/django-admin.py`` to somewhere on your system path, for example ``C:\\Python27\\Scripts``."
msgstr ""

#: ../../topics/logging.txt:3
# b370799b90cd4288b006b3de1073720d
msgid "Logging"
msgstr ""

#: ../../topics/logging.txt:9
# 7c5b3e0e71e54700b1432b518d09279f
msgid "A quick logging primer"
msgstr ""

#: ../../topics/logging.txt:11
# e85471b63d0e4eabae211479ed9fb18f
msgid "Django uses Python's builtin :mod:`logging` module to perform system logging. The usage of this module is discussed in detail in Python's own documentation. However, if you've never used Python's logging framework (or even if you have), here's a quick primer."
msgstr ""

#: ../../topics/logging.txt:17
# 784f8b0eae0e48c3aabc3d2b7047c77f
msgid "The cast of players"
msgstr ""

#: ../../topics/logging.txt:19
# 05d85374eac24cbca9d9a52e6f2719d7
msgid "A Python logging configuration consists of four parts:"
msgstr ""

#: ../../topics/logging.txt:21
# 6d720cb65a3f487aaba2091e445dc0e3
msgid ":ref:`topic-logging-parts-loggers`"
msgstr ""

#: ../../topics/logging.txt:22
# b0a88a75875d41d2bd4bf4063edb19a7
msgid ":ref:`topic-logging-parts-handlers`"
msgstr ""

#: ../../topics/logging.txt:23
# fad0e916e1164f55b44bd7713e2cc233
msgid ":ref:`topic-logging-parts-filters`"
msgstr ""

#: ../../topics/logging.txt:24
# 47c6f110c135494ab34c0f8db8a0ffc6
msgid ":ref:`topic-logging-parts-formatters`"
msgstr ""

#: ../../topics/logging.txt:29
#: ../../topics/logging.txt:395
# c040b577d51345529b0b60ed67d6e2fa
# da881c2c0d974a9398d5e64beb48796b
msgid "Loggers"
msgstr ""

#: ../../topics/logging.txt:31
# 7da7cb772a674ff8a675d6bbc6d63c6b
msgid "A logger is the entry point into the logging system. Each logger is a named bucket to which messages can be written for processing."
msgstr ""

#: ../../topics/logging.txt:34
# ac84e5510ae34308a84794de0a9f0623
msgid "A logger is configured to have a *log level*. This log level describes the severity of the messages that the logger will handle. Python defines the following log levels:"
msgstr ""

#: ../../topics/logging.txt:38
# 123eec3129da484fb7ed73350b89e901
msgid "``DEBUG``: Low level system information for debugging purposes"
msgstr ""

#: ../../topics/logging.txt:40
# f4d300fd192c4dd0bd45181c82571b14
msgid "``INFO``: General system information"
msgstr ""

#: ../../topics/logging.txt:42
# 0d1caa17f0a848d69c47a351fbb57e0e
msgid "``WARNING``: Information describing a minor problem that has occurred."
msgstr ""

#: ../../topics/logging.txt:45
# 63d8fac9844b4be69da664f0d7dc8a49
msgid "``ERROR``: Information describing a major problem that has occurred."
msgstr ""

#: ../../topics/logging.txt:48
# 00dc6e22d0774e31b22adfe91cc7bf03
msgid "``CRITICAL``: Information describing a critical problem that has occurred."
msgstr ""

#: ../../topics/logging.txt:51
# a7adcfd3fcd3406fa821aa1f9f7d26a4
msgid "Each message that is written to the logger is a *Log Record*. Each log record also has a *log level* indicating the severity of that specific message. A log record can also contain useful metadata that describes the event that is being logged. This can include details such as a stack trace or an error code."
msgstr ""

#: ../../topics/logging.txt:57
# da01e14cc3ac4339a86b65fd2a28b115
msgid "When a message is given to the logger, the log level of the message is compared to the log level of the logger. If the log level of the message meets or exceeds the log level of the logger itself, the message will undergo further processing. If it doesn't, the message will be ignored."
msgstr ""

#: ../../topics/logging.txt:63
# 60c1c4a8ca0c4f879ea8a9ac0c77a1bc
msgid "Once a logger has determined that a message needs to be processed, it is passed to a *Handler*."
msgstr ""

#: ../../topics/logging.txt:69
#: ../../topics/logging.txt:438
# a2ec5132561e4465a4e49be565eb63be
# 5ad88bbabb6e49178d2fd90cdcfddcfd
msgid "Handlers"
msgstr ""

#: ../../topics/logging.txt:71
# 38e9f7dadf08495ea522ed5ac52345dc
msgid "The handler is the engine that determines what happens to each message in a logger. It describes a particular logging behavior, such as writing a message to the screen, to a file, or to a network socket."
msgstr ""

#: ../../topics/logging.txt:75
# b1980cfb0fa34fe49131e4c445dc39e8
msgid "Like loggers, handlers also have a log level. If the log level of a log record doesn't meet or exceed the level of the handler, the handler will ignore the message."
msgstr ""

#: ../../topics/logging.txt:79
# fedff6b2fb6447d39d44466e8c1b5c5e
msgid "A logger can have multiple handlers, and each handler can have a different log level. In this way, it is possible to provide different forms of notification depending on the importance of a message. For example, you could install one handler that forwards ``ERROR`` and ``CRITICAL`` messages to a paging service, while a second handler logs all messages (including ``ERROR`` and ``CRITICAL`` messages) to a file for later analysis."
msgstr ""

#: ../../topics/logging.txt:90
#: ../../topics/logging.txt:483
#: ../../topics/templates.txt:124
# 79c24f219b32471fa38611e26fda509f
# 6c2aeca9a0e94cd5bbddfe0751a4c6c5
# 459526b11a284549815f0f9f1c97420e
msgid "Filters"
msgstr ""

#: ../../topics/logging.txt:92
# 9f697e1c17e94f9eac8be9c90e9f1265
msgid "A filter is used to provide additional control over which log records are passed from logger to handler."
msgstr ""

#: ../../topics/logging.txt:95
# 1cb9f464599a4721827d17198755747c
msgid "By default, any log message that meets log level requirements will be handled. However, by installing a filter, you can place additional criteria on the logging process. For example, you could install a filter that only allows ``ERROR`` messages from a particular source to be emitted."
msgstr ""

#: ../../topics/logging.txt:101
# 9a9bf831c1534757a60c11b41518ff07
msgid "Filters can also be used to modify the logging record prior to being emitted. For example, you could write a filter that downgrades ``ERROR`` log records to ``WARNING`` records if a particular set of criteria are met."
msgstr ""

#: ../../topics/logging.txt:106
# 59ce350dcac345d5bcd80909797deb9b
msgid "Filters can be installed on loggers or on handlers; multiple filters can be used in a chain to perform multiple filtering actions."
msgstr ""

#: ../../topics/logging.txt:112
# a516cae6d6fd4a67b9d3ffd6362352cc
msgid "Formatters"
msgstr ""

#: ../../topics/logging.txt:114
# 333126f685b54e9b8e3632dfc3be26e4
msgid "Ultimately, a log record needs to be rendered as text. Formatters describe the exact format of that text. A formatter usually consists of a Python formatting string; however, you can also write custom formatters to implement specific formatting behavior."
msgstr ""

#: ../../topics/logging.txt:120
# f7e866572f854b9d8035d5629e8c9775
msgid "Using logging"
msgstr ""

#: ../../topics/logging.txt:122
# cb4ac4ca8d1a4fd68c3026a0b91b4ba9
msgid "Once you have configured your loggers, handlers, filters and formatters, you need to place logging calls into your code. Using the logging framework is very simple. Here's an example::"
msgstr ""

#: ../../topics/logging.txt:138
# fa22c17ed819459bb2307039ebb238f0
msgid "And that's it! Every time the ``bad_mojo`` condition is activated, an error log record will be written."
msgstr ""

#: ../../topics/logging.txt:142
# 4f888d450afd4067ae6bb7375af3737f
msgid "Naming loggers"
msgstr ""

#: ../../topics/logging.txt:144
# b220322892854beda7e02b883ad72a8e
msgid "The call to :func:`logging.getLogger()` obtains (creating, if necessary) an instance of a logger. The logger instance is identified by a name. This name is used to identify the logger for configuration purposes."
msgstr ""

#: ../../topics/logging.txt:149
# 055d47e0c2d645aa92fd21957085243e
msgid "By convention, the logger name is usually ``__name__``, the name of the python module that contains the logger. This allows you to filter and handle logging calls on a per-module basis. However, if you have some other way of organizing your logging messages, you can provide any dot-separated name to identify your logger::"
msgstr ""

#: ../../topics/logging.txt:158
# 7989da69539846da89ed1113380fe373
msgid "The dotted paths of logger names define a hierarchy. The ``project.interesting`` logger is considered to be a parent of the ``project.interesting.stuff`` logger; the ``project`` logger is a parent of the ``project.interesting`` logger."
msgstr ""

#: ../../topics/logging.txt:163
# d2680998fac14a05a2cafb8f08388d05
msgid "Why is the hierarchy important? Well, because loggers can be set to *propagate* their logging calls to their parents. In this way, you can define a single set of handlers at the root of a logger tree, and capture all logging calls in the subtree of loggers. A logging handler defined in the ``project`` namespace will catch all logging messages issued on the ``project.interesting`` and ``project.interesting.stuff`` loggers."
msgstr ""

#: ../../topics/logging.txt:171
# b0c3bd0e721340829a1940dd9f5814a9
msgid "This propagation can be controlled on a per-logger basis. If you don't want a particular logger to propagate to it's parents, you can turn off this behavior."
msgstr ""

#: ../../topics/logging.txt:176
# 4a31402d442c4f23888cbaf87f801471
msgid "Making logging calls"
msgstr ""

#: ../../topics/logging.txt:178
# 5f66c45482bd45729d759c576de93e72
msgid "The logger instance contains an entry method for each of the default log levels:"
msgstr ""

#: ../../topics/logging.txt:181
# 09b5b758ddf4429c812bb7759af68bb3
msgid "``logger.critical()``"
msgstr ""

#: ../../topics/logging.txt:182
# d86275159d574af9931ab9f5f7f9857f
msgid "``logger.error()``"
msgstr ""

#: ../../topics/logging.txt:183
# 863ec2ee040e4bdfaa9208efa87ef69b
msgid "``logger.warning()``"
msgstr ""

#: ../../topics/logging.txt:184
# e22a3fbaeb7b4fb1b0ba82e7671271bc
msgid "``logger.info()``"
msgstr ""

#: ../../topics/logging.txt:185
# 8d9fee3d02184aedb08e96b293be8b89
msgid "``logger.debug()``"
msgstr ""

#: ../../topics/logging.txt:187
# 27ea881f309d4674b2ed1997003dd147
msgid "There are two other logging calls available:"
msgstr ""

#: ../../topics/logging.txt:189
# a78d3095b05e455f959dfc8af114e549
msgid "``logger.log()``: Manually emits a logging message with a specific log level."
msgstr ""

#: ../../topics/logging.txt:192
# ec48baa642984761bb596dc65eb14050
msgid "``logger.exception()``: Creates an ``ERROR`` level logging message wrapping the current exception stack frame."
msgstr ""

#: ../../topics/logging.txt:198
# 8f5ea3b97c684b238375a5740d13dcbd
msgid "Configuring logging"
msgstr ""

#: ../../topics/logging.txt:200
# 9f34487365834b6f86b6208623e04ec1
msgid "Of course, it isn't enough to just put logging calls into your code. You also need to configure the loggers, handlers, filters and formatters to ensure that logging output is output in a useful way."
msgstr ""

#: ../../topics/logging.txt:204
# 321b77c0b5884bb5913bcb921da64572
msgid "Python's logging library provides several techniques to configure logging, ranging from a programmatic interface to configuration files. By default, Django uses the `dictConfig format`_."
msgstr ""

#: ../../topics/logging.txt:209
# 4177c0b6f9ce4849b185521c04a7e3c3
msgid "``logging.dictConfig`` is a builtin library in Python 2.7. In order to make this library available for users of earlier Python versions, Django includes a copy as part of ``django.utils.log``. If you have Python 2.7 or later, the system native library will be used; if you have Python 2.6, Django's copy will be used."
msgstr ""

#: ../../topics/logging.txt:215
# 8a0457d86bce412a8a20e487ac73743e
msgid "In order to configure logging, you use :setting:`LOGGING` to define a dictionary of logging settings. These settings describes the loggers, handlers, filters and formatters that you want in your logging setup, and the log levels and other properties that you want those components to have."
msgstr ""

#: ../../topics/logging.txt:221
# c6b376c3f0a64b47a8dda4dd922ff4dc
msgid "Prior to Django 1.5, the :setting:`LOGGING` setting overwrote the :ref:`default Django logging configuration <default-logging-configuration>`. From Django 1.5 forward, the project's logging configuration is merged with Django's defaults, hence you can decide if you want to add to, or replace the existing configuration. To completely override the default configuration, set the ``disable_existing_loggers`` key to True in the :setting:`LOGGING` dictConfig. Alternatively you can redefine some or all of the loggers."
msgstr ""

#: ../../topics/logging.txt:229
# 5db0793711a448a695b3da9c0defe23c
msgid "Logging is configured as soon as settings have been loaded (either manually using :func:`~django.conf.settings.configure` or when at least one setting is accessed). Since the loading of settings is one of the first things that Django does, you can be certain that loggers are always ready for use in your project code."
msgstr ""

#: ../../topics/logging.txt:242
# 984ee8652e124dc18f088face6d67271
msgid "The full documentation for `dictConfig format`_ is the best source of information about logging configuration dictionaries. However, to give you a taste of what is possible, here is an example of a fairly complex logging setup, configured using :func:`logging.config.dictConfig`::"
msgstr ""

#: ../../topics/logging.txt:299
# a79e5327b0c04a35a2b3d357e548036b
msgid "This logging configuration does the following things:"
msgstr ""

#: ../../topics/logging.txt:301
# ff264a5cfc5345a2accf3d8cc2048d81
msgid "Identifies the configuration as being in 'dictConfig version 1' format. At present, this is the only dictConfig format version."
msgstr ""

#: ../../topics/logging.txt:304
# 430a5ea71d64435387852879e371f775
msgid "Disables all existing logging configurations."
msgstr ""

#: ../../topics/logging.txt:306
# fc8f20e8ae5a4054adba7d82f998e2a6
msgid "Defines two formatters:"
msgstr ""

#: ../../topics/logging.txt:308
# a543a6a8aec146e5bb33e48b786648e8
msgid "``simple``, that just outputs the log level name (e.g., ``DEBUG``) and the log message."
msgstr ""

#: ../../topics/logging.txt:311
# 579443f931914d5586f3c757c32c630a
msgid "The ``format`` string is a normal Python formatting string describing the details that are to be output on each logging line. The full list of detail that can be output can be found in the `formatter documentation`_."
msgstr ""

#: ../../topics/logging.txt:316
# d7387d41deb24491b155c2dc88e243cc
msgid "``verbose``, that outputs the log level name, the log message, plus the time, process, thread and module that generate the log message."
msgstr ""

#: ../../topics/logging.txt:320
# 579fd127c4684a9b9f763d43eb950a45
msgid "Defines one filter -- ``project.logging.SpecialFilter``, using the alias ``special``. If this filter required additional arguments at time of construction, they can be provided as additional keys in the filter configuration dictionary. In this case, the argument ``foo`` will be given a value of ``bar`` when instantiating the ``SpecialFilter``."
msgstr ""

#: ../../topics/logging.txt:327
# e4f88d9b6dae4080af729f145bf163d7
msgid "Defines three handlers:"
msgstr ""

#: ../../topics/logging.txt:329
# ced48701c567499290e796c875014259
msgid "``null``, a NullHandler, which will pass any ``DEBUG`` (or higher) message to ``/dev/null``."
msgstr ""

#: ../../topics/logging.txt:332
# 997e57a6a39f47859492c4be41cad32d
msgid "``console``, a StreamHandler, which will print any ``DEBUG`` (or higher) message to stderr. This handler uses the ``simple`` output format."
msgstr ""

#: ../../topics/logging.txt:336
# d5bce3a464384bb09f24aa0d1c106fcf
msgid "``mail_admins``, an AdminEmailHandler, which will email any ``ERROR`` (or higher) message to the site admins. This handler uses the ``special`` filter."
msgstr ""

#: ../../topics/logging.txt:340
# 18e37e5e42804e0f8414f127485f1472
msgid "Configures three loggers:"
msgstr ""

#: ../../topics/logging.txt:342
# bfcfa22e04944c2cb9c925f95edf012e
msgid "``django``, which passes all messages at ``INFO`` or higher to the ``null`` handler."
msgstr ""

#: ../../topics/logging.txt:345
# 163ad44245f541b38db29d510f11634f
msgid "``django.request``, which passes all ``ERROR`` messages to the ``mail_admins`` handler. In addition, this logger is marked to *not* propagate messages. This means that log messages written to ``django.request`` will not be handled by the ``django`` logger."
msgstr ""

#: ../../topics/logging.txt:351
# fd4f8d25d0ed4419b760d328ddb3a346
msgid "``myproject.custom``, which passes all messages at ``INFO`` or higher that also pass the ``special`` filter to two handlers -- the ``console``, and ``mail_admins``. This means that all ``INFO`` level messages (or higher) will be printed to the console; ``ERROR`` and ``CRITICAL`` messages will also be output via email."
msgstr ""

#: ../../topics/logging.txt:361
# 5a1e4d9103fc4e82a92cbdc7b09eb5b3
msgid "Custom logging configuration"
msgstr ""

#: ../../topics/logging.txt:363
# f9b3c644bd83431ba6cfcd0245769109
msgid "If you don't want to use Python's dictConfig format to configure your logger, you can specify your own configuration scheme."
msgstr ""

#: ../../topics/logging.txt:366
# 57b24476b94d4b129e72c886d99bf387
msgid "The :setting:`LOGGING_CONFIG` setting defines the callable that will be used to configure Django's loggers. By default, it points at Python's :func:`logging.config.dictConfig()` function. However, if you want to use a different configuration process, you can use any other callable that takes a single argument. The contents of :setting:`LOGGING` will be provided as the value of that argument when logging is configured."
msgstr ""

#: ../../topics/logging.txt:374
# c6fc33c15a8448259c697cf3f8cc8865
msgid "Disabling logging configuration"
msgstr ""

#: ../../topics/logging.txt:376
# e353060720f04fceba589f9ff9469ba3
msgid "If you don't want to configure logging at all (or you want to manually configure logging using your own approach), you can set :setting:`LOGGING_CONFIG` to ``None``. This will disable the configuration process."
msgstr ""

#: ../../topics/logging.txt:382
# 20816975faeb4f3eb96b15150a2a3fa7
msgid "Setting :setting:`LOGGING_CONFIG` to ``None`` only means that the configuration process is disabled, not logging itself. If you disable the configuration process, Django will still make logging calls, falling back to whatever default logging behavior is defined."
msgstr ""

#: ../../topics/logging.txt:389
# 23cad595d81346b3b0a75d4d3dc11a20
msgid "Django's logging extensions"
msgstr ""

#: ../../topics/logging.txt:391
# 6098f0de342a4a4b9cd1a456ab85fe92
msgid "Django provides a number of utilities to handle the unique requirements of logging in Web server environment."
msgstr ""

#: ../../topics/logging.txt:397
# 5ae561b50cdc449c8234181998bd4432
msgid "Django provides three built-in loggers."
msgstr ""

#: ../../topics/logging.txt:400
# 1dbb0999b8844bcbba51f5ca6d519d31
msgid "``django``"
msgstr ""

#: ../../topics/logging.txt:402
# bffb154c96cd4333b33d1e36599c40b1
msgid "``django`` is the catch-all logger. No messages are posted directly to this logger."
msgstr ""

#: ../../topics/logging.txt:406
# bb5bbcdb92aa4b5590c5e7e4f0b4d369
msgid "``django.request``"
msgstr ""

#: ../../topics/logging.txt:408
# 8efd1217b86044aea4e0e6090fa69c1d
msgid "Log messages related to the handling of requests. 5XX responses are raised as ``ERROR`` messages; 4XX responses are raised as ``WARNING`` messages."
msgstr ""

#: ../../topics/logging.txt:412
#: ../../topics/logging.txt:427
# 6c3dd6b7a19f41d4b516cc6c1c8858b5
# 16724fca82ca49a2817ef8d987985c37
msgid "Messages to this logger have the following extra context:"
msgstr ""

#: ../../topics/logging.txt:414
# 1e199b2cf71b425891edf2a902b59477
msgid "``status_code``: The HTTP response code associated with the request."
msgstr ""

#: ../../topics/logging.txt:417
# 2bfbb3d477b5433fb6dff41e5837818d
msgid "``request``: The request object that generated the logging message."
msgstr ""

#: ../../topics/logging.txt:421
# d0530877e9e44d57b66b4beacb8d337c
msgid "``django.db.backends``"
msgstr ""

#: ../../topics/logging.txt:423
# 90ee51d20181484d9a872fde195004df
msgid "Messages relating to the interaction of code with the database. For example, every SQL statement executed by a request is logged at the ``DEBUG`` level to this logger."
msgstr ""

#: ../../topics/logging.txt:429
# c56418c4f04b4fd28a731f8805316fca
msgid "``duration``: The time taken to execute the SQL statement."
msgstr ""

#: ../../topics/logging.txt:430
# 6ee35de7422b4222b31bd2222f857541
msgid "``sql``: The SQL statement that was executed."
msgstr ""

#: ../../topics/logging.txt:431
# 6ee5ce356db3493a86a55a7a06064a92
msgid "``params``: The parameters that were used in the SQL call."
msgstr ""

#: ../../topics/logging.txt:433
# b02024cc64df4317bff0eb2dbd59063d
msgid "For performance reasons, SQL logging is only enabled when ``settings.DEBUG`` is set to ``True``, regardless of the logging level or handlers that are installed."
msgstr ""

#: ../../topics/logging.txt:440
# eb07b979f6e44b1a86d2f9a7a8360d04
msgid "Django provides one log handler in addition to those provided by the Python logging module."
msgstr ""

#: ../../topics/logging.txt:445
# 435c279922644d488fc5721b4b7628de
msgid "This handler sends an email to the site admins for each log message it receives."
msgstr ""

#: ../../topics/logging.txt:448
# 8faddd25f5cf4b628b7c40272c93f684
msgid "If the log record contains a ``request`` attribute, the full details of the request will be included in the email."
msgstr ""

#: ../../topics/logging.txt:451
# 7451a947f9e745149944571686a1a8a8
msgid "If the log record contains stack trace information, that stack trace will be included in the email."
msgstr ""

#: ../../topics/logging.txt:454
# e78752ea31f44397b1fbb539b9bea6a5
msgid "The ``include_html`` argument of ``AdminEmailHandler`` is used to control whether the traceback email includes an HTML attachment containing the full content of the debug Web page that would have been produced if :setting:`DEBUG` were ``True``. To set this value in your configuration, include it in the handler definition for ``django.utils.log.AdminEmailHandler``, like this::"
msgstr ""

#: ../../topics/logging.txt:469
# d9c7dc1d5ac64760914eec76e9e6e841
msgid "Note that this HTML version of the email contains a full traceback, with names and values of local variables at each level of the stack, plus the values of your Django settings. This information is potentially very sensitive, and you may not want to send it over email. Consider using something such as `Sentry`_ to get the best of both worlds -- the rich information of full tracebacks plus the security of *not* sending the information over email. You may also explicitly designate certain sensitive information to be filtered out of error reports -- learn more on :ref:`Filtering error reports<filtering-error-reports>`."
msgstr ""

#: ../../topics/logging.txt:485
# 97cbd654da154cd393dee950b3a4c458
msgid "Django provides two log filters in addition to those provided by the Python logging module."
msgstr ""

#: ../../topics/logging.txt:492
# c2466dd3bb5744b98ae64e2ded0ed067
msgid "This filter accepts a callback function (which should accept a single argument, the record to be logged), and calls it for each record that passes through the filter. Handling of that record will not proceed if the callback returns False."
msgstr ""

#: ../../topics/logging.txt:497
# 6b41db1acc3549029e51a0d5e77f2f60
msgid "For instance, to filter out :exc:`~django.http.UnreadablePostError` (raised when a user cancels an upload) from the admin emails, you would create a filter function::"
msgstr ""

#: ../../topics/logging.txt:510
# 4906b45afd5c4833af6d9bc462d74c3d
msgid "and then add it to your logging config::"
msgstr ""

#: ../../topics/logging.txt:530
# e5f344e43c69450c8f995c64be6f7ff1
msgid "This filter will only pass on records when settings.DEBUG is False."
msgstr ""

#: ../../topics/logging.txt:532
# 83f3c1c0d14443ae81c5ffd9eee2ff1a
msgid "This filter is used as follows in the default :setting:`LOGGING` configuration to ensure that the :class:`AdminEmailHandler` only sends error emails to admins when :setting:`DEBUG` is ``False``::"
msgstr ""

#: ../../topics/logging.txt:553
# a3cadec3c58f44cb9a88ee7e6c483845
msgid "This filter is similar to :class:`RequireDebugFalse`, except that records are passed only when :setting:`DEBUG` is ``True``."
msgstr ""

#: ../../topics/logging.txt:559
# 5d1e880f0d9b44f7a94a857a927d9fdb
msgid "Django's default logging configuration"
msgstr ""

#: ../../topics/logging.txt:561
# 2b668deab3b943ffb39d4df457554ebe
msgid "By default, Django configures the ``django.request`` logger so that all messages with ``ERROR`` or ``CRITICAL`` level are sent to :class:`AdminEmailHandler`, as long as the :setting:`DEBUG` setting is set to ``False``."
msgstr ""

#: ../../topics/logging.txt:565
# b0689adc39514df49257e78b3e51c497
msgid "All messages reaching the ``django`` catch-all logger when :setting:`DEBUG` is ``True`` are sent to the console. They are simply discarded (sent to ``NullHandler``) when :setting:`DEBUG` is ``False``."
msgstr ""

#: ../../topics/logging.txt:574
# e3e8a25bb6334f528f721df04b0c393b
msgid "See also :ref:`Configuring logging <configuring-logging>` to learn how you can complement or replace this default logging configuration."
msgstr ""

#: ../../topics/pagination.txt:3
# ae7dec9f96e649d3bfed401074733e48
msgid "Pagination"
msgstr ""

#: ../../topics/pagination.txt:8
# 11ad45d84b12407087685ed0215c031e
msgid "Django provides a few classes that help you manage paginated data -- that is, data that's split across several pages, with \"Previous/Next\" links. These classes live in :file:`django/core/paginator.py`."
msgstr ""

#: ../../topics/pagination.txt:15
# f638772d422f4970a2113a814383fde9
msgid "Give :class:`Paginator` a list of objects, plus the number of items you'd like to have on each page, and it gives you methods for accessing the items for each page::"
msgstr ""

#: ../../topics/pagination.txt:67
# 0019af24c3b949f79848ddb0376bb24a
msgid "Note that you can give ``Paginator`` a list/tuple, a Django ``QuerySet``, or any other object with a ``count()`` or ``__len__()`` method. When determining the number of objects contained in the passed object, ``Paginator`` will first try calling ``count()``, then fallback to using ``len()`` if the passed object has no ``count()`` method. This allows objects such as Django's ``QuerySet`` to use a more efficient ``count()`` method when available."
msgstr ""

#: ../../topics/pagination.txt:77
# 8a5f202b12f9424eb3340236df64967a
msgid "Using ``Paginator`` in a view"
msgstr ""

#: ../../topics/pagination.txt:79
# aa5e347cf94d48e487fa015ce2dba26d
msgid "Here's a slightly more complex example using :class:`Paginator` in a view to paginate a queryset. We give both the view and the accompanying template to show how you can display the results. This example assumes you have a ``Contacts`` model that has already been imported."
msgstr ""

#: ../../topics/pagination.txt:84
# 96c5815452f74c1fb94e907b5521356d
msgid "The view function looks like this::"
msgstr ""

#: ../../topics/pagination.txt:104
# 81484cfaa1c442aeac409d6d8ec5dd4e
msgid "In the template :file:`list.html`, you'll want to include navigation between pages along with any interesting information from the objects themselves::"
msgstr ""

#: ../../topics/pagination.txt:136
# 70c56d6fea074b9195a2316cfb518782
msgid "``Paginator`` objects"
msgstr ""

#: ../../topics/pagination.txt:138
# 96e3edead2354f1997bab4f322811097
msgid "The :class:`Paginator` class has this constructor:"
msgstr ""

#: ../../topics/pagination.txt:146
# 9ea3f0b0fab44ddda68069f1ff5b3644
msgid "A list, tuple, Django ``QuerySet``, or other sliceable object with a ``count()`` or ``__len__()`` method."
msgstr ""

#: ../../topics/pagination.txt:150
# d84b8f1f0b4e4d76bc4174b568ad4381
msgid "The maximum number of items to include on a page, not including orphans (see the ``orphans`` optional argument below)."
msgstr ""

#: ../../topics/pagination.txt:157
# e27ff455ad64412fbbdef93bc3967259
msgid "The minimum number of items allowed on the last page, defaults to zero. Use this when you don't want to have a last page with very few items. If the last page would normally have a number of items less than or equal to ``orphans``, then those items will be added to the previous page (which becomes the last page) instead of leaving the items on a page by themselves. For example, with 23 items, ``per_page=10``, and ``orphans=3``, there will be two pages; the first page with 10 items and the  second (and last) page with 13 items."
msgstr ""

#: ../../topics/pagination.txt:167
# 59816924158a44b580854977ce3b5e2d
msgid "Whether or not the first page is allowed to be empty.  If ``False`` and ``object_list`` is  empty, then an ``EmptyPage`` error will be raised."
msgstr ""

#: ../../topics/pagination.txt:171
#: ../../topics/pagination.txt:242
#: ../../topics/testing/advanced.txt:264
# a489b20b09024917ad8fe934ee391c2e
# d2e999a18fc548f38032a1cbb471c45b
# 074820cb41384b96869d6919bad99047
msgid "Methods"
msgstr ""

#: ../../topics/pagination.txt:175
# 1395cfd900f74ed88ad7bd26916379d3
msgid "Returns a :class:`Page` object with the given 1-based index. Raises :exc:`InvalidPage` if the given page number doesn't exist."
msgstr ""

#: ../../topics/pagination.txt:179
#: ../../topics/pagination.txt:287
#: ../../topics/testing/advanced.txt:253
# a72c2ee5a665444ea64c9dadbe5de31b
# 489702bef60748dda875cb3cbc253b4c
# 4f602931d122422ea45de203224bfb75
msgid "Attributes"
msgstr ""

#: ../../topics/pagination.txt:183
# 250dd45679c34c37b56e4da7190e5125
msgid "The total number of objects, across all pages."
msgstr ""

#: ../../topics/pagination.txt:187
# 58cef60e87754dadb2a90219d35856c9
msgid "When determining the number of objects contained in ``object_list``, ``Paginator`` will first try calling ``object_list.count()``. If ``object_list`` has no ``count()`` method, then ``Paginator`` will fallback to using ``len(object_list)``. This allows objects, such as Django's ``QuerySet``, to use a more efficient ``count()`` method when available."
msgstr ""

#: ../../topics/pagination.txt:196
# a031faba65514fc89eb886ae64993d9c
msgid "The total number of pages."
msgstr ""

#: ../../topics/pagination.txt:200
# 34647a4f8cb54f9d88600dae78e93d63
msgid "A 1-based range of page numbers, e.g., ``[1, 2, 3, 4]``."
msgstr ""

#: ../../topics/pagination.txt:204
# 90f5c675a5d24591b1cbf428fbb6de68
msgid "``InvalidPage`` exceptions"
msgstr ""

#: ../../topics/pagination.txt:208
# 30876c51d1634b5db150901b4bf18bc3
msgid "A base class for exceptions raised when a paginator is passed an invalid page number."
msgstr ""

#: ../../topics/pagination.txt:211
# 461320255e414582ae3e3aea15f44d75
msgid "The :meth:`Paginator.page` method raises an exception if the requested page is invalid (i.e., not an integer) or contains no objects. Generally, it's enough to trap the ``InvalidPage`` exception, but if you'd like more granularity, you can trap either of the following exceptions:"
msgstr ""

#: ../../topics/pagination.txt:218
# 2d81a45b0ebf458a96ec6c3d48b4ed3a
msgid "Raised when ``page()`` is given a value that isn't an integer."
msgstr ""

#: ../../topics/pagination.txt:222
# 98e3b5fe53a9482198bf12c3029283dd
msgid "Raised when ``page()`` is given a valid value but no objects exist on that page."
msgstr ""

#: ../../topics/pagination.txt:225
# be010777132443c9868157c0d18a5318
msgid "Both of the exceptions are subclasses of :exc:`InvalidPage`, so you can handle them both with a simple ``except InvalidPage``."
msgstr ""

#: ../../topics/pagination.txt:230
# acc2a30ffbe64919b532c54a354c3f9b
msgid "``Page`` objects"
msgstr ""

#: ../../topics/pagination.txt:232
# fe699ed7638f422eb2b1d95d104d0a05
msgid "You usually won't construct ``Page`` objects by hand -- you'll get them using :meth:`Paginator.page`."
msgstr ""

#: ../../topics/pagination.txt:246
# 802c4f8a5f8d45f9986bb7e62c620b8c
msgid "Returns ``True`` if there's a next page."
msgstr ""

#: ../../topics/pagination.txt:250
# 987a941cbbbc4d86a49ff1ab0a9aeb12
msgid "Returns ``True`` if there's a previous page."
msgstr ""

#: ../../topics/pagination.txt:254
# 5b273a3aa8fa4f01a47ace0082b62ba0
msgid "Returns ``True`` if there's a next *or* previous page."
msgstr ""

#: ../../topics/pagination.txt:258
# 8b7ac51a70284639b13eecf83ce31c25
msgid "Returns the next page number."
msgstr ""

#: ../../topics/pagination.txt:262
# f15a3cda51514cbaae135e9e04b26ea9
msgid "Raises :exc:`InvalidPage` if next page doesn't exist."
msgstr ""

#: ../../topics/pagination.txt:266
# 5f8bd02c21254ea99f8250746bec4c26
msgid "Returns the previous page number."
msgstr ""

#: ../../topics/pagination.txt:270
# 3a3c5d105a8a49cdb618024b615bcf58
msgid "Raises :exc:`InvalidPage` if previous page doesn't exist."
msgstr ""

#: ../../topics/pagination.txt:274
# 9e32de393e91430d9d7319276e1c791a
msgid "Returns the 1-based index of the first object on the page, relative to all of the objects in the paginator's list. For example, when paginating a list of 5 objects with 2 objects per page, the second page's :meth:`~Page.start_index` would return ``3``."
msgstr ""

#: ../../topics/pagination.txt:281
# 32ff08086a914de0bf4f27c5e03d372c
msgid "Returns the 1-based index of the last object on the page, relative to all of the objects in the paginator's list. For example, when paginating a list of 5 objects with 2 objects per page, the second page's :meth:`~Page.end_index` would return ``4``."
msgstr ""

#: ../../topics/pagination.txt:291
# e92a537f08104613880e696cde5bb4c8
msgid "The list of objects on this page."
msgstr ""

#: ../../topics/pagination.txt:295
# 4b0a9336d4bc4c37b0c9bbe8b6e9a693
msgid "The 1-based page number for this page."
msgstr ""

#: ../../topics/pagination.txt:299
# c86b5101272f4efdbdb67c8c4a14aa0c
msgid "The associated :class:`Paginator` object."
msgstr ""

#: ../../topics/python3.txt:3
# 4fce28fe4b5e4b2692ccde3c34ca1f8a
msgid "Porting to Python 3"
msgstr ""

#: ../../topics/python3.txt:5
# e08b83918dd6469c943e659b7cc045db
msgid "Django 1.5 is the first version of Django to support Python 3. The same code runs both on Python 2 (≥ 2.6.5) and Python 3 (≥ 3.2), thanks to the six_ compatibility layer."
msgstr ""

#: ../../topics/python3.txt:11
# 20d8a3b2a88b4d74af0e67bfbb5215ef
msgid "This document is primarily targeted at authors of pluggable application who want to support both Python 2 and 3. It also describes guidelines that apply to Django's code."
msgstr ""

#: ../../topics/python3.txt:16
# 313d91f9321148909227bb470a905b46
msgid "Philosophy"
msgstr ""

#: ../../topics/python3.txt:18
# 8d6a62b6c95e4b46be496d5141a0b19d
msgid "This document assumes that you are familiar with the changes between Python 2 and Python 3. If you aren't, read `Python's official porting guide`_ first. Refreshing your knowledge of unicode handling on Python 2 and 3 will help; the `Pragmatic Unicode`_ presentation is a good resource."
msgstr ""

#: ../../topics/python3.txt:23
# 3bb6f86bd7c941fbb2d5f51778527c0d
msgid "Django uses the *Python 2/3 Compatible Source* strategy. Of course, you're free to chose another strategy for your own code, especially if you don't need to stay compatible with Python 2. But authors of pluggable applications are encouraged to use the same porting strategy as Django itself."
msgstr ""

#: ../../topics/python3.txt:28
# b08ce58abd0e423589f51aa726bffb87
msgid "Writing compatible code is much easier if you target Python ≥ 2.6. Django 1.5 introduces compatibility tools such as :mod:`django.utils.six`. For convenience, forwards-compatible aliases were introduced in Django 1.4.2. If your application takes advantage of these tools, it will require Django ≥ 1.4.2."
msgstr ""

#: ../../topics/python3.txt:34
# 3908ce7325194415897316ae922e2dde
msgid "Obviously, writing compatible source code adds some overhead, and that can cause frustration. Django's developers have found that attempting to write Python 3 code that's compatible with Python 2 is much more rewarding than the opposite. Not only does that make your code more future-proof, but Python 3's advantages (like the saner string handling) start shining quickly. Dealing with Python 2 becomes a backwards compatibility requirement, and we as developers are used to dealing with such constraints."
msgstr ""

#: ../../topics/python3.txt:42
# 88620e1fa5e54d9885775b5b7bc9096f
msgid "Porting tools provided by Django are inspired by this philosophy, and it's reflected throughout this guide."
msgstr ""

#: ../../topics/python3.txt:49
# 4fba69c87c394e449d8848c3049c4f36
msgid "Porting tips"
msgstr ""

#: ../../topics/python3.txt:52
# a96ecf39532e40fc9893e372e7ed852c
msgid "Unicode literals"
msgstr ""

#: ../../topics/python3.txt:54
# c3be521880d14426801b2662e6dabaf7
msgid "This step consists in:"
msgstr ""

#: ../../topics/python3.txt:56
# a062e9925be145719a5f44b3193434c0
msgid "Adding ``from __future__ import unicode_literals`` at the top of your Python modules -- it's best to put it in each and every module, otherwise you'll keep checking the top of your files to see which mode is in effect;"
msgstr ""

#: ../../topics/python3.txt:59
# 21df12b26c2541e49e3446994a8d670e
msgid "Removing the ``u`` prefix before unicode strings;"
msgstr ""

#: ../../topics/python3.txt:60
# 30734f121d2b4f3ba45d5a8b5334cd47
msgid "Adding a ``b`` prefix before bytestrings."
msgstr ""

#: ../../topics/python3.txt:62
# e7084ffa268b4c749c032fde57a1f76c
msgid "Performing these changes systematically guarantees backwards compatibility."
msgstr ""

#: ../../topics/python3.txt:64
# 2c59d4a2477248a9bdd150107d3594a5
msgid "However, Django applications generally don't need bytestrings, since Django only exposes unicode interfaces to the programmer. Python 3 discourages using bytestrings, except for binary data or byte-oriented interfaces. Python 2 makes bytestrings and unicode strings effectively interchangeable, as long as they only contain ASCII data. Take advantage of this to use unicode strings wherever possible and avoid the ``b`` prefixes."
msgstr ""

#: ../../topics/python3.txt:73
# 0a751ad553804e578063c7503fbd45b1
msgid "Python 2's ``u`` prefix is a syntax error in Python 3.2 but it will be allowed again in Python 3.3 thanks to :pep:`414`. Thus, this transformation is optional if you target Python ≥ 3.3. It's still recommended, per the \"write Python 3 code\" philosophy."
msgstr ""

#: ../../topics/python3.txt:79
#: ../../topics/python3.txt:336
# e6ab18f6dd404823a4c3670300460cab
# c65d232a2fc846758e6a03f4d9557f09
msgid "String handling"
msgstr ""

#: ../../topics/python3.txt:81
# 7cc2b53bf7ad4bff849da6d42c17c707
msgid "Python 2's :func:`unicode` type was renamed :func:`str` in Python 3, :func:`str` was renamed ``bytes()``, and :func:`basestring` disappeared. six_ provides :ref:`tools <string-handling-with-six>` to deal with these changes."
msgstr ""

#: ../../topics/python3.txt:86
# 9e7732eb02e54430b841cec7c8a99dc8
msgid "Django also contains several string related classes and functions in the :mod:`django.utils.encoding` and :mod:`django.utils.safestring` modules. Their names used the words ``str``, which doesn't mean the same thing in Python 2 and Python 3, and ``unicode``, which doesn't exist in Python 3. In order to avoid ambiguity and confusion these concepts were renamed ``bytes`` and ``text``."
msgstr ""

#: ../../topics/python3.txt:93
# 201dbe7e770147c4b123b8425319efe2
msgid "Here are the name changes in :mod:`django.utils.encoding`:"
msgstr ""

#: ../../topics/python3.txt:96
#: ../../topics/python3.txt:120
# 2ad5687baf154f05869879bb0ac6b65b
# c7090574e32f4e6eb8fbe5e4ad58523a
msgid "Old name"
msgstr ""

#: ../../topics/python3.txt:96
#: ../../topics/python3.txt:120
# 18a858025d134859865a5503d145b321
# 05bccbc9f8974b74b01175d43bd4a6e7
msgid "New name"
msgstr ""

#: ../../topics/python3.txt:98
# 526711ad1aa64d9da9b8f0763b6fbd70
msgid "``smart_str``"
msgstr ""

#: ../../topics/python3.txt:98
# 61b75f52c6fd45a78ff63ff04582abcb
msgid "``smart_bytes``"
msgstr ""

#: ../../topics/python3.txt:99
# 320ac3854d1847348b0396cda3ae803c
msgid "``smart_unicode``"
msgstr ""

#: ../../topics/python3.txt:99
# 54084ae0abf9417b82ba7c4b82a34cc4
msgid "``smart_text``"
msgstr ""

#: ../../topics/python3.txt:100
# 9a6fc65871734d24b4a2650e094c1f6f
msgid "``force_unicode``"
msgstr ""

#: ../../topics/python3.txt:100
# d9886e3f250f4430a820ace06cda1f9b
msgid "``force_text``"
msgstr ""

#: ../../topics/python3.txt:103
# 14df68818ea440e98826e24ca1d4f575
msgid "For backwards compatibility, the old names still work on Python 2. Under Python 3, ``smart_str`` is an alias for ``smart_text``."
msgstr ""

#: ../../topics/python3.txt:106
#: ../../topics/python3.txt:132
# 96ee54a57cf648b9816e9cebfa235019
# 3f361f4ce86948879729589236dbc74a
msgid "For forwards compatibility, the new names work as of Django 1.4.2."
msgstr ""

#: ../../topics/python3.txt:110
# afe61f18cdf34cdca8b03e8295e0ee53
msgid ":mod:`django.utils.encoding` was deeply refactored in Django 1.5 to provide a more consistent API. Check its documentation for more information."
msgstr ""

#: ../../topics/python3.txt:114
# 04044519379648aab7503da6ccfcda15
msgid ":mod:`django.utils.safestring` is mostly used via the :func:`~django.utils.safestring.mark_safe` and :func:`~django.utils.safestring.mark_for_escaping` functions, which didn't change. In case you're using the internals, here are the name changes:"
msgstr ""

#: ../../topics/python3.txt:122
# 7ba69ba60ef4409d869087a8d6c5b32e
msgid "``EscapeString``"
msgstr ""

#: ../../topics/python3.txt:122
# a41dae96226347b98d21063b481ac841
msgid "``EscapeBytes``"
msgstr ""

#: ../../topics/python3.txt:123
# fa602a70093e4002bf1672bf45804b78
msgid "``EscapeUnicode``"
msgstr ""

#: ../../topics/python3.txt:123
# 61aecb6a498546498d5b6fb8b642d19e
msgid "``EscapeText``"
msgstr ""

#: ../../topics/python3.txt:124
# 4ee93363565e451eb18e90ce499f6764
msgid "``SafeString``"
msgstr ""

#: ../../topics/python3.txt:124
# 14743bce03804ad9bee7b75cde8bee99
msgid "``SafeBytes``"
msgstr ""

#: ../../topics/python3.txt:125
# 5866e86f99fe48a4b8c8bfa831ca98bf
msgid "``SafeUnicode``"
msgstr ""

#: ../../topics/python3.txt:125
# 84b17ea2de0248beb8a5ce25afaeb9a7
msgid "``SafeText``"
msgstr ""

#: ../../topics/python3.txt:128
# 9e6b8ef23b4c4682a5982473c130eb82
msgid "For backwards compatibility, the old names still work on Python 2. Under Python 3, ``EscapeString`` and ``SafeString`` are aliases for ``EscapeText`` and ``SafeText`` respectively."
msgstr ""

#: ../../topics/python3.txt:135
# 4f50c4fc117d48b2b6fe688966521aae
msgid ":meth:`~object.__str__` and :meth:`~object.__unicode__` methods"
msgstr ""

#: ../../topics/python3.txt:137
# 079e43aec2bd45eebad1c5a06c7b7daa
msgid "In Python 2, the object model specifies :meth:`~object.__str__` and :meth:`~object.__unicode__` methods. If these methods exist, they must return ``str`` (bytes) and ``unicode`` (text) respectively."
msgstr ""

#: ../../topics/python3.txt:141
# 0ffea3d23ce54bf992bfa7f89fbb00d6
msgid "The ``print`` statement and the :func:`str` built-in call :meth:`~object.__str__` to determine the human-readable representation of an object. The :func:`unicode` built-in calls :meth:`~object.__unicode__` if it exists, and otherwise falls back to :meth:`~object.__str__` and decodes the result with the system encoding. Conversely, the :class:`~django.db.models.Model` base class automatically derives :meth:`~object.__str__` from :meth:`~object.__unicode__` by encoding to UTF-8."
msgstr ""

#: ../../topics/python3.txt:149
# 30b71471de954ec4a91d1ad942b01983
msgid "In Python 3, there's simply :meth:`~object.__str__`, which must return ``str`` (text)."
msgstr ""

#: ../../topics/python3.txt:152
# 8d3b43d67bda46679ab2eef8880d524b
msgid "(It is also possible to define ``__bytes__()``, but Django application have little use for that method, because they hardly ever deal with ``bytes``.)"
msgstr ""

#: ../../topics/python3.txt:156
# b0d477eff48c4999b0fda7fabf57fa0e
msgid "Django provides a simple way to define :meth:`~object.__str__` and :meth:`~object.__unicode__` methods that work on Python 2 and 3: you must define a :meth:`~object.__str__` method returning text and to apply the :func:`~django.utils.encoding.python_2_unicode_compatible` decorator."
msgstr ""

#: ../../topics/python3.txt:161
# 7033903df885438194260a2671afe6e9
msgid "On Python 3, the decorator is a no-op. On Python 2, it defines appropriate :meth:`~object.__unicode__` and :meth:`~object.__str__` methods (replacing the original :meth:`~object.__str__` method in the process). Here's an example::"
msgstr ""

#: ../../topics/python3.txt:173
# 200ad606e64b418a8c69ac6d316a5c5f
msgid "This technique is the best match for Django's porting philosophy."
msgstr ""

#: ../../topics/python3.txt:175
# 43ff77d0921c4e52b711c10d093341e6
msgid "For forwards compatibility, this decorator is available as of Django 1.4.2."
msgstr ""

#: ../../topics/python3.txt:177
# 783e6b2ff4bd4a1da1cba7b5e6937208
msgid "Finally, note that :meth:`~object.__repr__` must return a ``str`` on all versions of Python."
msgstr ""

#: ../../topics/python3.txt:181
# 817cc1215eae413f8adf03c7b3fe5ab5
msgid ":class:`dict` and :class:`dict`-like classes"
msgstr ""

#: ../../topics/python3.txt:183
# dfad4176bf254d339a47c542d67b386e
msgid ":meth:`dict.keys`, :meth:`dict.items` and :meth:`dict.values` return lists in Python 2 and iterators in Python 3. :class:`~django.http.QueryDict` and the :class:`dict`-like classes defined in :mod:`django.utils.datastructures` behave likewise in Python 3."
msgstr ""

#: ../../topics/python3.txt:188
# b3fe18ed93ec4f8f95bf34df77a138ee
msgid "six_ provides compatibility functions to work around this change: :func:`~six.iterkeys`, :func:`~six.iteritems`, and :func:`~six.itervalues`. It also contains an undocumented ``iterlists`` function that works well for ``django.utils.datastructures.MultiValueDict`` and its subclasses."
msgstr ""

#: ../../topics/python3.txt:194
# daadb5088b824dafa67e24ae2d94cd43
msgid ":class:`~django.http.HttpRequest` and :class:`~django.http.HttpResponse` objects"
msgstr ""

#: ../../topics/python3.txt:196
# 279dd173614f4f40b24d7ace3995e0da
msgid "According to :pep:`3333`:"
msgstr ""

#: ../../topics/python3.txt:198
# 62f5b6a116a7446f8258c76d52d93df7
msgid "headers are always ``str`` objects,"
msgstr ""

#: ../../topics/python3.txt:199
# 5b94af3035e24076b13a7f7c315f2886
msgid "input and output streams are always ``bytes`` objects."
msgstr ""

#: ../../topics/python3.txt:201
# 3e70d53df9eb45ffa3febbf6f8a31442
msgid "Specifically, :attr:`HttpResponse.content <django.http.HttpResponse.content>` contains ``bytes``, which may become an issue if you compare it with a ``str`` in your tests. The preferred solution is to rely on :meth:`~django.test.TestCase.assertContains` and :meth:`~django.test.TestCase.assertNotContains`. These methods accept a response and a unicode string as arguments."
msgstr ""

#: ../../topics/python3.txt:209
# f2842464749547499dd0903c51a95a72
msgid "Coding guidelines"
msgstr ""

#: ../../topics/python3.txt:211
# e12754f34a404fc6b3714b3f310a57c6
msgid "The following guidelines are enforced in Django's source code. They're also recommended for third-party application who follow the same porting strategy."
msgstr ""

#: ../../topics/python3.txt:215
# 486207495f4b499f84e497d41b20a804
msgid "Syntax requirements"
msgstr ""

#: ../../topics/python3.txt:218
# 8a34cdea2b1f42668cfc626cf84f0313
msgid "Unicode"
msgstr ""

#: ../../topics/python3.txt:220
# 0e7d96bb562345b185ba6a3bbc67857d
msgid "In Python 3, all strings are considered Unicode by default. The ``unicode`` type from Python 2 is called ``str`` in Python 3, and ``str`` becomes ``bytes``."
msgstr ""

#: ../../topics/python3.txt:224
# f7f7defb23254909b3c8cf06a226aad9
msgid "You mustn't use the ``u`` prefix before a unicode string literal because it's a syntax error in Python 3.2. You must prefix byte strings with ``b``."
msgstr ""

#: ../../topics/python3.txt:227
# d9cf547dae15422cac2766a1f3dbfc7b
msgid "In order to enable the same behavior in Python 2, every module must import ``unicode_literals`` from ``__future__``::"
msgstr ""

#: ../../topics/python3.txt:235
# 23131ff0922747038e48fb16a31fa102
msgid "If you need a byte string literal under Python 2 and a unicode string literal under Python 3, use the :func:`str` builtin::"
msgstr ""

#: ../../topics/python3.txt:240
# d89feb2149a74e7388b45ef75ff3ea13
msgid "In Python 3, there aren't any automatic conversions between ``str`` and ``bytes``, and the :mod:`codecs` module became more strict. :meth:`str.encode` always returns ``bytes``, and ``bytes.decode`` always returns ``str``. As a consequence, the following pattern is sometimes necessary::"
msgstr ""

#: ../../topics/python3.txt:247
# 37ece8e916e747ee9155c324832e1865
msgid "Be cautious if you have to `index bytestrings`_."
msgstr ""

#: ../../topics/python3.txt:252
#: ../../topics/testing/overview.txt:766
# 90f8d8a6aa9147da9ab3217b876eecd4
# b78079d7d777492fb0711a993383db20
msgid "Exceptions"
msgstr ""

#: ../../topics/python3.txt:254
# d23f6f7507cf4c24858728343a40330d
msgid "When you capture exceptions, use the ``as`` keyword::"
msgstr ""

#: ../../topics/python3.txt:261
# 8c39f13644904ac7a55a4af4af339e93
msgid "This older syntax was removed in Python 3::"
msgstr ""

#: ../../topics/python3.txt:268
# 06ba306467544ce886da90d744d0405d
msgid "The syntax to reraise an exception with a different traceback also changed. Use :func:`six.reraise`."
msgstr ""

#: ../../topics/python3.txt:272
# 3496383b5121423d8fdae19df1981686
msgid "Magic methods"
msgstr ""

#: ../../topics/python3.txt:274
# e4233f3bec1d4251adb635a8c5ac2672
msgid "Use the patterns below to handle magic methods renamed in Python 3."
msgstr ""

#: ../../topics/python3.txt:277
# 588cc426174b4eb8a34701b2763c1876
msgid "Iterators"
msgstr ""

#: ../../topics/python3.txt:289
# e9e2cf804b67452487823152923d8dfd
msgid "Boolean evaluation"
msgstr ""

#: ../../topics/python3.txt:302
# 0b31870e4e6446d6b4bdbc688472328b
msgid "Division"
msgstr ""

#: ../../topics/python3.txt:323
# 0c0e7f56b1e44328816a2a474395206f
msgid "Writing compatible code with six"
msgstr ""

#: ../../topics/python3.txt:325
# 69dcc35d2b8640139856bd2720bcb018
msgid "six_ is the canonical compatibility library for supporting Python 2 and 3 in a single codebase. Read its documentation!"
msgstr ""

#: ../../topics/python3.txt:328
# 28e02f4f665246b7a8697546cb7e9c49
msgid ":mod:`six` is bundled with Django as of version 1.4.2. You can import it as :mod:`django.utils.six`."
msgstr ""

#: ../../topics/python3.txt:331
# c205ee99aba945c8a0b69568fcab4cac
msgid "Here are the most common changes required to write compatible code."
msgstr ""

#: ../../topics/python3.txt:338
# 99d581717b0d47849cf3f7177f949392
msgid "The ``basestring`` and ``unicode`` types were removed in Python 3, and the meaning of ``str`` changed. To test these types, use the following idioms::"
msgstr ""

#: ../../topics/python3.txt:345
# 730ce1cbfea7457ab7038792885bae9b
msgid "Python ≥ 2.6 provides ``bytes`` as an alias for ``str``, so you don't need :data:`six.binary_type`."
msgstr ""

#: ../../topics/python3.txt:349
# 270d2c41b1f740c6a8721ed31f9671fc
msgid "``long``"
msgstr ""

#: ../../topics/python3.txt:351
# 92e4d402b1d54a209a32b7ced8cd9524
msgid "The ``long`` type no longer exists in Python 3. ``1L`` is a syntax error. Use :data:`six.integer_types` check if a value is an integer or a long::"
msgstr ""

#: ../../topics/python3.txt:357
# beac0dec4eb54d58a2981dfa46410993
msgid "``xrange``"
msgstr ""

#: ../../topics/python3.txt:359
# 6f503368829646159ee325e5cb0443c4
msgid "Import ``six.moves.xrange`` wherever you use ``xrange``."
msgstr ""

#: ../../topics/python3.txt:362
# 1676be1693d5456ca7cc9c20d9bc3e57
msgid "Moved modules"
msgstr ""

#: ../../topics/python3.txt:364
# 27faa3e8be6f4c27be7fa2f6bf3ed7cb
msgid "Some modules were renamed in Python 3. The :mod:`django.utils.six.moves <six.moves>` module provides a compatible location to import them."
msgstr ""

#: ../../topics/python3.txt:367
# f55b880db9544b97bd7c713885c3b715
msgid "The ``urllib``, ``urllib2`` and ``urlparse`` modules were reworked in depth and :mod:`django.utils.six.moves <six.moves>` doesn't handle them. Django explicitly tries both locations, as follows::"
msgstr ""

#: ../../topics/python3.txt:377
# 9782275e04184833b68824bc25ca6c6a
msgid "PY3"
msgstr ""

#: ../../topics/python3.txt:379
# 050b827e7d7549b297f4f4acf5306e7e
msgid "If you need different code in Python 2 and Python 3, check :data:`six.PY3`::"
msgstr ""

#: ../../topics/python3.txt:386
# faecb3d5997e43d4a6ca04b6a6379652
msgid "This is a last resort solution when :mod:`six` doesn't provide an appropriate function."
msgstr ""

#: ../../topics/python3.txt:392
# 72003d2dc9684463a8f6bbcf2eac719a
msgid "Customizations of six"
msgstr ""

#: ../../topics/python3.txt:394
# fe568b63d8f14f60a9656f059c1a4068
msgid "The version of six bundled with Django includes a few extras."
msgstr ""

#: ../../topics/python3.txt:398
# 63591dc8e27741898f6ef0e1fa30c982
msgid "This replaces ``testcase.assertRaisesRegexp`` on Python 2, and ``testcase.assertRaisesRegex`` on Python 3. ``assertRaisesRegexp`` still exists in current Python3 versions, but issues a warning."
msgstr ""

#: ../../topics/python3.txt:403
# 4a7884c2db2b46109b6662f0284c654c
msgid "In addition to six' defaults moves, Django's version provides ``thread`` as ``_thread`` and ``dummy_thread`` as ``_dummy_thread``."
msgstr ""

#: ../../topics/security.txt:3
# 8ce98eea9423410d9d2655bf6867b976
msgid "Security in Django"
msgstr ""

#: ../../topics/security.txt:5
# 52673de27de944fb953b2bf6734064b1
msgid "This document is an overview of Django's security features. It includes advice on securing a Django-powered site."
msgstr ""

#: ../../topics/security.txt:11
# abfdd8316e2942ffadbc0706e41ea62d
msgid "Cross site scripting (XSS) protection"
msgstr ""

#: ../../topics/security.txt:15
# a4d22d2dd68641569137861ce6de04ae
msgid "XSS attacks allow a user to inject client side scripts into the browsers of other users. This is usually achieved by storing the malicious scripts in the database where it will be retrieved and displayed to other users, or by getting users to click a link which will cause the attacker's JavaScript to be executed by the user's browser. However, XSS attacks can originate from any untrusted source of data, such as cookies or Web services, whenever the data is not sufficiently sanitized before including in a page."
msgstr ""

#: ../../topics/security.txt:23
# f34f4bcdab5a4bcc90b9b666edae7e5b
msgid "Using Django templates protects you against the majority of XSS attacks. However, it is important to understand what protections it provides and its limitations."
msgstr ""

#: ../../topics/security.txt:27
# c4298621de0d4271aee61fbe4ef3a076
msgid "Django templates :ref:`escape specific characters <automatic-html-escaping>` which are particularly dangerous to HTML. While this protects users from most malicious input, it is not entirely foolproof. For example, it will not protect the following:"
msgstr ""

#: ../../topics/security.txt:36
# 645e5529eee84a429ae029e038f7a61a
msgid "If ``var`` is set to ``'class1 onmouseover=javascript:func()'``, this can result in unauthorized JavaScript execution, depending on how the browser renders imperfect HTML."
msgstr ""

#: ../../topics/security.txt:40
# a713703f11354b539b9921075bdcdc3e
msgid "It is also important to be particularly careful when using ``is_safe`` with custom template tags, the :tfilter:`safe` template tag, :mod:`mark_safe <django.utils.safestring>`, and when autoescape is turned off."
msgstr ""

#: ../../topics/security.txt:44
# ea4aa8653a254501aa187fbad1fd5719
msgid "In addition, if you are using the template system to output something other than HTML, there may be entirely separate characters and words which require escaping."
msgstr ""

#: ../../topics/security.txt:48
# 964210703f824539bce42c9e4ab61d1a
msgid "You should also be very careful when storing HTML in the database, especially when that HTML is retrieved and displayed."
msgstr ""

#: ../../topics/security.txt:52
# 1ddd1e8169f841169bbc654125980321
msgid "Markup library"
msgstr ""

#: ../../topics/security.txt:54
# 778af1ee4f784140ab01cb0a710bde2d
msgid "If you use :mod:`django.contrib.markup`, you need to ensure that the filters are only used on trusted input, or that you have correctly configured them to ensure they do not allow raw HTML output. See the documentation of that module for more information."
msgstr ""

#: ../../topics/security.txt:60
# a88787c266764208be9968ad73247ae0
msgid "Cross site request forgery (CSRF) protection"
msgstr ""

#: ../../topics/security.txt:62
# 1e5e0ae962f347dc9b2ea24f71007152
msgid "CSRF attacks allow a malicious user to execute actions using the credentials of another user without that user's knowledge or consent."
msgstr ""

#: ../../topics/security.txt:65
# 8e8b9d941778448eb26244e5caeb7497
msgid "Django has built-in protection against most types of CSRF attacks, providing you have :ref:`enabled and used it <using-csrf>` where appropriate. However, as with any mitigation technique, there are limitations. For example, it is possible to disable the CSRF module globally or for particular views. You should only do this if you know what you are doing. There are other :ref:`limitations <csrf-limitations>` if your site has subdomains that are outside of your control."
msgstr ""

#: ../../topics/security.txt:73
# e0daf4226c8c44de9cb40942d35fe03e
msgid ":ref:`CSRF protection works <how-csrf-works>` by checking for a nonce in each POST request. This ensures that a malicious user cannot simply \"replay\" a form POST to your Web site and have another logged in user unwittingly submit that form. The malicious user would have to know the nonce, which is user specific (using a cookie)."
msgstr ""

#: ../../topics/security.txt:79
# df2218ec65b24905916cfe39ee95f753
msgid "When deployed with :ref:`HTTPS <security-recommendation-ssl>`, ``CsrfViewMiddleware`` will check that the HTTP referer header is set to a URL on the same origin (including subdomain and port). Because HTTPS provides additional security, it is imperative to ensure connections use HTTPS where it is available by forwarding insecure connection requests and using HSTS for supported browsers."
msgstr ""

#: ../../topics/security.txt:86
# 7743a4add8e246fe825b74bf25205e71
msgid "Be very careful with marking views with the ``csrf_exempt`` decorator unless it is absolutely necessary."
msgstr ""

#: ../../topics/security.txt:91
# f4a530e3d2be41908a03ae2d8db11f56
msgid "SQL injection protection"
msgstr ""

#: ../../topics/security.txt:93
# 0d7664e1984041dd81957b0860efe611
msgid "SQL injection is a type of attack where a malicious user is able to execute arbitrary SQL code on a database. This can result in records being deleted or data leakage."
msgstr ""

#: ../../topics/security.txt:97
# ca87e11479b44c01b0c460213783c3b1
msgid "By using Django's querysets, the resulting SQL will be properly escaped by the underlying database driver. However, Django also gives developers power to write :ref:`raw queries <executing-raw-queries>` or execute :ref:`custom sql <executing-custom-sql>`. These capabilities should be used sparingly and you should always be careful to properly escape any parameters that the user can control. In addition, you should exercise caution when using :meth:`extra() <django.db.models.query.QuerySet.extra>`."
msgstr ""

#: ../../topics/security.txt:106
# d673c2f1d1314970a4f0c6845ee3653b
msgid "Clickjacking protection"
msgstr ""

#: ../../topics/security.txt:108
# 5d5d5967171545538edc89955d5e50a1
msgid "Clickjacking is a type of attack where a malicious site wraps another site in a frame. This attack can result in an unsuspecting user being tricked into performing unintended actions on the target site."
msgstr ""

#: ../../topics/security.txt:112
# 3c776a96752140d69e9b5a1eb84e810a
msgid "Django contains :ref:`clickjacking protection <clickjacking-prevention>` in the form of the :mod:`X-Frame-Options middleware <django.middleware.clickjacking.XFrameOptionsMiddleware>` which in a supporting browser can prevent a site from being rendered inside a frame. It is possible to disable the protection on a per view basis or to configure the exact header value sent."
msgstr ""

#: ../../topics/security.txt:119
# c595fdd87e5440f3957e064b79601aef
msgid "The middleware is strongly recommended for any site that does not need to have its pages wrapped in a frame by third party sites, or only needs to allow that for a small section of the site."
msgstr ""

#: ../../topics/security.txt:126
# 37baa64e2ca84035a0641082960a3bb2
msgid "SSL/HTTPS"
msgstr ""

#: ../../topics/security.txt:128
# ea602c1f08354b28a9d21b064802fc4c
msgid "It is always better for security, though not always practical in all cases, to deploy your site behind HTTPS. Without this, it is possible for malicious network users to sniff authentication credentials or any other information transferred between client and server, and in some cases -- **active** network attackers -- to alter data that is sent in either direction."
msgstr ""

#: ../../topics/security.txt:134
# 9214e22614624690aefbe99cd5ee615e
msgid "If you want the protection that HTTPS provides, and have enabled it on your server, there are some additional steps you may need:"
msgstr ""

#: ../../topics/security.txt:137
# 21204700676a4c80a4e3a91ab0cd4ed5
msgid "If necessary, set :setting:`SECURE_PROXY_SSL_HEADER`, ensuring that you have understood the warnings there thoroughly. Failure to do this can result in CSRF vulnerabilities, and failure to do it correctly can also be dangerous!"
msgstr ""

#: ../../topics/security.txt:142
# be4fb060f2a34bbd883b3644a5f0db03
msgid "Set up redirection so that requests over HTTP are redirected to HTTPS."
msgstr ""

#: ../../topics/security.txt:144
# a2e91e52dd7f445f823d1ac6144effbd
msgid "This could be done using a custom middleware. Please note the caveats under :setting:`SECURE_PROXY_SSL_HEADER`. For the case of a reverse proxy, it may be easier or more secure to configure the main Web server to do the redirect to HTTPS."
msgstr ""

#: ../../topics/security.txt:149
# 34aa4a29c32e41bbb94d275d623d6b83
msgid "Use 'secure' cookies."
msgstr ""

#: ../../topics/security.txt:151
# d596fab446e54986ad451045879cb981
msgid "If a browser connects initially via HTTP, which is the default for most browsers, it is possible for existing cookies to be leaked. For this reason, you should set your :setting:`SESSION_COOKIE_SECURE` and :setting:`CSRF_COOKIE_SECURE` settings to ``True``. This instructs the browser to only send these cookies over HTTPS connections. Note that this will mean that sessions will not work over HTTP, and the CSRF protection will prevent any POST data being accepted over HTTP (which will be fine if you are redirecting all HTTP traffic to HTTPS)."
msgstr ""

#: ../../topics/security.txt:160
# 48623aa921fd47759916c00fe74f176c
msgid "Use HTTP Strict Transport Security (HSTS)"
msgstr ""

#: ../../topics/security.txt:162
# 842816257e6b4ce98bf5ba127d389438
msgid "HSTS is an HTTP header that informs a browser that all future connections to a particular site should always use HTTPS. Combined with redirecting requests over HTTP to HTTPS, this will ensure that connections always enjoy the added security of SSL provided one successful connection has occurred. HSTS is usually configured on the web server."
msgstr ""

#: ../../topics/security.txt:171
# b21648fe22e248d69513b217dc30be9a
msgid "Host header validation"
msgstr ""

#: ../../topics/security.txt:173
# 6f082affaf9f4ac7a42d75956d373a2f
msgid "Django uses the ``Host`` header provided by the client to construct URLs in certain cases. While these values are sanitized to prevent Cross Site Scripting attacks, a fake ``Host`` value can be used for Cross-Site Request Forgery, cache poisoning attacks, and poisoning links in emails."
msgstr ""

#: ../../topics/security.txt:178
# b722fe54995f4b288e7c38d274bd5920
msgid "Because even seemingly-secure webserver configurations are susceptible to fake ``Host`` headers, Django validates ``Host`` headers against the :setting:`ALLOWED_HOSTS` setting in the :meth:`django.http.HttpRequest.get_host()` method."
msgstr ""

#: ../../topics/security.txt:183
# bb8accf974ab456a9a2ae96c1ee233ae
msgid "This validation only applies via :meth:`~django.http.HttpRequest.get_host()`; if your code accesses the ``Host`` header directly from ``request.META`` you are bypassing this security protection."
msgstr ""

#: ../../topics/security.txt:187
# 443371bc3ee340758d2cb19bc7110ea6
msgid "For more details see the full :setting:`ALLOWED_HOSTS` documentation."
msgstr ""

#: ../../topics/security.txt:191
# 57a397b8ddb84d0f952d621a45580a1e
msgid "Previous versions of this document recommended configuring your webserver to ensure it validates incoming HTTP ``Host`` headers. While this is still recommended, in many common webservers a configuration that seems to validate the ``Host`` header may not in fact do so. For instance, even if Apache is configured such that your Django site is served from a non-default virtual host with the ``ServerName`` set, it is still possible for an HTTP request to match this virtual host and supply a fake ``Host`` header. Thus, Django now requires that you set :setting:`ALLOWED_HOSTS` explicitly rather than relying on webserver configuration."
msgstr ""

#: ../../topics/security.txt:201
# 2725c6d258c24348a2b71234152d69a5
msgid "Additionally, as of 1.3.1, Django requires you to explicitly enable support for the ``X-Forwarded-Host`` header (via the :setting:`USE_X_FORWARDED_HOST` setting) if your configuration requires it."
msgstr ""

#: ../../topics/security.txt:209
# fd7ed7c8ee6c444db4603ae78c3d38da
msgid "Additional security topics"
msgstr ""

#: ../../topics/security.txt:211
# 13709bbcf835494897e5c2576d94aa6b
msgid "While Django provides good security protection out of the box, it is still important to properly deploy your application and take advantage of the security protection of the Web server, operating system and other components."
msgstr ""

#: ../../topics/security.txt:215
# 7ba3dc6c8f9c4ae681d44f743f7a2eff
msgid "Make sure that your Python code is outside of the Web server's root. This will ensure that your Python code is not accidentally served as plain text (or accidentally executed)."
msgstr ""

#: ../../topics/security.txt:218
# 4ec6d8c27aeb40358b70b78ad15f328b
msgid "Take care with any :ref:`user uploaded files <file-upload-security>`."
msgstr ""

#: ../../topics/security.txt:219
# 9db5e8e4d15e4a418e3a80d52f6fac4b
msgid "Django does not throttle requests to authenticate users. To protect against brute-force attacks against the authentication system, you may consider deploying a Django plugin or Web server module to throttle these requests."
msgstr ""

#: ../../topics/security.txt:222
# a3d32c953cf14801a13ed96b44376da1
msgid "If your site accepts file uploads, it is strongly advised that you limit these uploads in your Web server configuration to a reasonable size in order to prevent denial of service (DOS) attacks. In Apache, this can be easily set using the LimitRequestBody_ directive."
msgstr ""

#: ../../topics/security.txt:226
# 9c18b48a22204505a428961aae184bad
msgid "Keep your :setting:`SECRET_KEY` a secret."
msgstr ""

#: ../../topics/security.txt:227
# c4d9ef5b4ca04515b5491974708d169c
msgid "It is a good idea to limit the accessibility of your caching system and database using a firewall."
msgstr ""

#: ../../topics/serialization.txt:3
# 3f1bfe7367dc4bc5b52bb2eea4ab8f0f
msgid "Serializing Django objects"
msgstr ""

#: ../../topics/serialization.txt:5
# a0d3d1f8c0e24d298c4dec09d619594c
msgid "Django's serialization framework provides a mechanism for \"translating\" Django models into other formats. Usually these other formats will be text-based and used for sending Django data over a wire, but it's possible for a serializer to handle any format (text-based or not)."
msgstr ""

#: ../../topics/serialization.txt:12
# b682bc990f344d15bac4a72bdbe75d7c
msgid "If you just want to get some data from your tables into a serialized form, you could use the :djadmin:`dumpdata` management command."
msgstr ""

#: ../../topics/serialization.txt:16
# 4d63282b131d4a5aaac48a25201fdfe0
msgid "Serializing data"
msgstr ""

#: ../../topics/serialization.txt:18
# 483b629ea74540cc81069e7a6f425e29
msgid "At the highest level, serializing data is a very simple operation::"
msgstr ""

#: ../../topics/serialization.txt:23
# 7eedb3a71b1b454b9b93be42f567f077
msgid "The arguments to the ``serialize`` function are the format to serialize the data to (see `Serialization formats`_) and a :class:`~django.db.models.query.QuerySet` to serialize. (Actually, the second argument can be any iterator that yields Django model instances, but it'll almost always be a QuerySet)."
msgstr ""

#: ../../topics/serialization.txt:31
# 293dc40eb397470d9eb351745c67da3c
msgid "You can also use a serializer object directly::"
msgstr ""

#: ../../topics/serialization.txt:38
# bf8ca922c41443678860f1948bb4c490
msgid "This is useful if you want to serialize data directly to a file-like object (which includes an :class:`~django.http.HttpResponse`)::"
msgstr ""

#: ../../topics/serialization.txt:46
# fdffbf06ebc148ecb3e6f4d5fe019d46
msgid "Calling :func:`~django.core.serializers.get_serializer` with an unknown :ref:`format <serialization-formats>` will raise a ``django.core.serializers.SerializerDoesNotExist`` exception."
msgstr ""

#: ../../topics/serialization.txt:51
# 77f5351c4b8d4a9ca61debd2b4a05952
msgid "Subset of fields"
msgstr ""

#: ../../topics/serialization.txt:53
# bb9d3cdfe0bb4fb9a941f21749f28d5f
msgid "If you only want a subset of fields to be serialized, you can specify a ``fields`` argument to the serializer::"
msgstr ""

#: ../../topics/serialization.txt:59
# dcb8739ac0324e29af6d1f2f9954582c
msgid "In this example, only the ``name`` and ``size`` attributes of each model will be serialized."
msgstr ""

#: ../../topics/serialization.txt:64
# d7d7f874e573401d9eb8d6a4a7041c96
msgid "Depending on your model, you may find that it is not possible to deserialize a model that only serializes a subset of its fields. If a serialized object doesn't specify all the fields that are required by a model, the deserializer will not be able to save deserialized instances."
msgstr ""

#: ../../topics/serialization.txt:70
# f25b710a668b458eaa20438b789df89b
msgid "Inherited Models"
msgstr ""

#: ../../topics/serialization.txt:72
# 7780ef28e7054a318af2f1b254914dce
msgid "If you have a model that is defined using an :ref:`abstract base class <abstract-base-classes>`, you don't have to do anything special to serialize that model. Just call the serializer on the object (or objects) that you want to serialize, and the output will be a complete representation of the serialized object."
msgstr ""

#: ../../topics/serialization.txt:78
# 81811c76d24643c1a1eb2680fef7b1d1
msgid "However, if you have a model that uses :ref:`multi-table inheritance <multi-table-inheritance>`, you also need to serialize all of the base classes for the model. This is because only the fields that are locally defined on the model will be serialized. For example, consider the following models::"
msgstr ""

#: ../../topics/serialization.txt:89
# db18843948764ccdb466017a6942cebe
msgid "If you only serialize the Restaurant model::"
msgstr ""

#: ../../topics/serialization.txt:93
# 0de18f09f7634b20bf2a7c3d8de498b4
msgid "the fields on the serialized output will only contain the ``serves_hot_dogs`` attribute. The ``name`` attribute of the base class will be ignored."
msgstr ""

#: ../../topics/serialization.txt:96
# 92e041b4b1e74b07985a857599c368ac
msgid "In order to fully serialize your ``Restaurant`` instances, you will need to serialize the ``Place`` models as well::"
msgstr ""

#: ../../topics/serialization.txt:103
# a330e3d66de94a92be78f9aaf80a7b42
msgid "Deserializing data"
msgstr ""

#: ../../topics/serialization.txt:105
# 11ca5a161dbe4a6589d9f3932509896e
msgid "Deserializing data is also a fairly simple operation::"
msgstr ""

#: ../../topics/serialization.txt:110
# ebe521610ffa40999ef7a3f4ed1c1db5
msgid "As you can see, the ``deserialize`` function takes the same format argument as ``serialize``, a string or stream of data, and returns an iterator."
msgstr ""

#: ../../topics/serialization.txt:113
# cfb57606a837445986378fd47fd20b5e
msgid "However, here it gets slightly complicated. The objects returned by the ``deserialize`` iterator *aren't* simple Django objects. Instead, they are special ``DeserializedObject`` instances that wrap a created -- but unsaved -- object and any associated relationship data."
msgstr ""

#: ../../topics/serialization.txt:118
# b158a81dce20474b858cab4fb1a7b9a3
msgid "Calling ``DeserializedObject.save()`` saves the object to the database."
msgstr ""

#: ../../topics/serialization.txt:120
# 20d118b8dfc34202ac46c53f71c4965a
msgid "This ensures that deserializing is a non-destructive operation even if the data in your serialized representation doesn't match what's currently in the database. Usually, working with these ``DeserializedObject`` instances looks something like::"
msgstr ""

#: ../../topics/serialization.txt:129
# 14269bc7acb642c1b783af0673f1dfd7
msgid "In other words, the usual use is to examine the deserialized objects to make sure that they are \"appropriate\" for saving before doing so.  Of course, if you trust your data source you could just save the object and move on."
msgstr ""

#: ../../topics/serialization.txt:133
# 39ae86239d924d3cb9859cd1cedc4801
msgid "The Django object itself can be inspected as ``deserialized_object.object``."
msgstr ""

#: ../../topics/serialization.txt:137
# e3ac343f814545be89074491c9da3076
msgid "If fields in the serialized data do not exist on a model, a ``DeserializationError`` will be raised unless the ``ignorenonexistent`` argument is passed in as True::"
msgstr ""

#: ../../topics/serialization.txt:146
# def36e332af449d288fe7351dedc30d1
msgid "Serialization formats"
msgstr ""

#: ../../topics/serialization.txt:148
# 273545542ece4ede85b72ebe70a79e02
msgid "Django supports a number of serialization formats, some of which require you to install third-party Python modules:"
msgstr ""

#: ../../topics/serialization.txt:152
# 47fe8e032b734183bf1800e7990aff74
msgid "Identifier"
msgstr ""

#: ../../topics/serialization.txt:152
# d051ac8fa5b74882975b71d6fd574d0d
msgid "Information"
msgstr ""

#: ../../topics/serialization.txt:154
# 945cdc5c229c4cb18d1de82c29c8ec05
msgid "``xml``"
msgstr ""

#: ../../topics/serialization.txt:154
# de970300f8444ddb9815de111ed53f4b
msgid "Serializes to and from a simple XML dialect."
msgstr ""

#: ../../topics/serialization.txt:156
# a173d3f2fe9d46e78f3bb1340e47354a
msgid "``json``"
msgstr ""

#: ../../topics/serialization.txt:156
# 17759d36545b4066b735ef6f2c6b7381
msgid "Serializes to and from JSON_."
msgstr ""

#: ../../topics/serialization.txt:158
# 5b7f741a5d194762aee3b6f0d0374eec
msgid "``yaml``"
msgstr ""

#: ../../topics/serialization.txt:158
# 4ca1486a4ac2438eb18c1e1f524b81c9
msgid "Serializes to YAML (YAML Ain't a Markup Language). This serializer is only available if PyYAML_ is installed."
msgstr ""

#: ../../topics/serialization.txt:166
# 71b5c5c6fd114399833e69df62204ad4
msgid "Notes for specific serialization formats"
msgstr ""

#: ../../topics/serialization.txt:169
# ea9b16aad4b148009fe79fc5fb9df0da
msgid "json"
msgstr ""

#: ../../topics/serialization.txt:171
# 00e6d63258f6451db3e64ecf5b7c0304
msgid "Be aware that not all Django output can be passed unmodified to :mod:`json`. In particular, :ref:`lazy translation objects <lazy-translations>` need a `special encoder`_ written for them. Something like this will work::"
msgstr ""

#: ../../topics/serialization.txt:190
# d8689e6f5f3b4b56a667ab3ac3b4039f
msgid "Natural keys"
msgstr ""

#: ../../topics/serialization.txt:192
# 3b0fca6f7793431d83d5e7edacbe546a
msgid "The default serialization strategy for foreign keys and many-to-many relations is to serialize the value of the primary key(s) of the objects in the relation. This strategy works well for most objects, but it can cause difficulty in some circumstances."
msgstr ""

#: ../../topics/serialization.txt:197
# c462939f32434f6790dbd5f62728eec8
msgid "Consider the case of a list of objects that have a foreign key referencing :class:`~django.contrib.contenttypes.models.ContentType`. If you're going to serialize an object that refers to a content type, then you need to have a way to refer to that content type to begin with. Since ``ContentType`` objects are automatically created by Django during the database synchronization process, the primary key of a given content type isn't easy to predict; it will depend on how and when :djadmin:`syncdb` was executed. This is true for all models which automatically generate objects, notably including :class:`~django.contrib.auth.models.Permission`, :class:`~django.contrib.auth.models.Group`, and :class:`~django.contrib.auth.models.User`."
msgstr ""

#: ../../topics/serialization.txt:211
# a1e202667dd04bdcb92346288765827e
msgid "You should never include automatically generated objects in a fixture or other serialized data. By chance, the primary keys in the fixture may match those in the database and loading the fixture will have no effect. In the more likely case that they don't match, the fixture loading will fail with an :class:`~django.db.IntegrityError`."
msgstr ""

#: ../../topics/serialization.txt:217
# f8b1ba8ec5004f27baa8baeb210ef79e
msgid "There is also the matter of convenience. An integer id isn't always the most convenient way to refer to an object; sometimes, a more natural reference would be helpful."
msgstr ""

#: ../../topics/serialization.txt:221
# 9219cfa4269746639db1c59711be5e77
msgid "It is for these reasons that Django provides *natural keys*. A natural key is a tuple of values that can be used to uniquely identify an object instance without using the primary key value."
msgstr ""

#: ../../topics/serialization.txt:226
# 06d927a7664f4959966f9f0b2293af7f
msgid "Deserialization of natural keys"
msgstr ""

#: ../../topics/serialization.txt:228
# 8a98d69be3e84f508efce068f7d41cf2
msgid "Consider the following two models::"
msgstr ""

#: ../../topics/serialization.txt:245
# 973c1646ce494f6e9e77da596bc7d7a4
msgid "Ordinarily, serialized data for ``Book`` would use an integer to refer to the author. For example, in JSON, a Book might be serialized as::"
msgstr ""

#: ../../topics/serialization.txt:259
# fc8cb91986014d70a72948ea87666dd6
msgid "This isn't a particularly natural way to refer to an author. It requires that you know the primary key value for the author; it also requires that this primary key value is stable and predictable."
msgstr ""

#: ../../topics/serialization.txt:263
# c658206a71c44d6e9ee1cd6a035638a5
msgid "However, if we add natural key handling to Person, the fixture becomes much more humane. To add natural key handling, you define a default Manager for Person with a ``get_by_natural_key()`` method. In the case of a Person, a good natural key might be the pair of first and last name::"
msgstr ""

#: ../../topics/serialization.txt:286
# f98d5b8311784ee9be867707c40a875c
msgid "Now books can use that natural key to refer to ``Person`` objects::"
msgstr ""

#: ../../topics/serialization.txt:299
# 083f37fba2fa4a3c89c440fef6109d30
msgid "When you try to load this serialized data, Django will use the ``get_by_natural_key()`` method to resolve ``[\"Douglas\", \"Adams\"]`` into the primary key of an actual ``Person`` object."
msgstr ""

#: ../../topics/serialization.txt:305
# ecc0375af13444bba4d266b3a14f8c87
msgid "Whatever fields you use for a natural key must be able to uniquely identify an object. This will usually mean that your model will have a uniqueness clause (either unique=True on a single field, or ``unique_together`` over multiple fields) for the field or fields in your natural key. However, uniqueness doesn't need to be enforced at the database level. If you are certain that a set of fields will be effectively unique, you can still use those fields as a natural key."
msgstr ""

#: ../../topics/serialization.txt:315
# 70f53db39ecf44f3b76238c58faa6672
msgid "Serialization of natural keys"
msgstr ""

#: ../../topics/serialization.txt:317
# 7199c965ae1c40108aae7319f2112944
msgid "So how do you get Django to emit a natural key when serializing an object? Firstly, you need to add another method -- this time to the model itself::"
msgstr ""

#: ../../topics/serialization.txt:334
# 61847be28e604151aba887c50e15690b
msgid "That method should always return a natural key tuple -- in this example, ``(first name, last name)``. Then, when you call ``serializers.serialize()``, you provide a ``use_natural_keys=True`` argument::"
msgstr ""

#: ../../topics/serialization.txt:341
# d48ee39e1e134bfe9726163548910305
msgid "When ``use_natural_keys=True`` is specified, Django will use the ``natural_key()`` method to serialize any reference to objects of the type that defines the method."
msgstr ""

#: ../../topics/serialization.txt:345
# d2e8bb1814ee41969b395eb4f93166c5
msgid "If you are using :djadmin:`dumpdata` to generate serialized data, you use the :djadminopt:`--natural` command line flag to generate natural keys."
msgstr ""

#: ../../topics/serialization.txt:350
# dc985b99647746878f897899c155e3d0
msgid "You don't need to define both ``natural_key()`` and ``get_by_natural_key()``. If you don't want Django to output natural keys during serialization, but you want to retain the ability to load natural keys, then you can opt to not implement the ``natural_key()`` method."
msgstr ""

#: ../../topics/serialization.txt:356
# 9b6e173d3b2e49b3a3c88172ac4c3e1f
msgid "Conversely, if (for some strange reason) you want Django to output natural keys during serialization, but *not* be able to load those key values, just don't define the ``get_by_natural_key()`` method."
msgstr ""

#: ../../topics/serialization.txt:361
# cb297894150e4cf0b0c96d6acfdf6c50
msgid "Dependencies during serialization"
msgstr ""

#: ../../topics/serialization.txt:363
# b147bedcc9974e1bac4509dd0d8e6ad2
msgid "Since natural keys rely on database lookups to resolve references, it is important that the data exists before it is referenced. You can't make a \"forward reference\" with natural keys -- the data you're referencing must exist before you include a natural key reference to that data."
msgstr ""

#: ../../topics/serialization.txt:368
# 49a0ff0fdfcf4a75b959d6203ae01ea2
msgid "To accommodate this limitation, calls to :djadmin:`dumpdata` that use the :djadminopt:`--natural` option will serialize any model with a ``natural_key()`` method before serializing standard primary key objects."
msgstr ""

#: ../../topics/serialization.txt:372
# 95d72f23d2554d0293bd40777fe4fbfd
msgid "However, this may not always be enough. If your natural key refers to another object (by using a foreign key or natural key to another object as part of a natural key), then you need to be able to ensure that the objects on which a natural key depends occur in the serialized data before the natural key requires them."
msgstr ""

#: ../../topics/serialization.txt:378
# f7b9cccb73ba451daf24e0f3bed85db5
msgid "To control this ordering, you can define dependencies on your ``natural_key()`` methods. You do this by setting a ``dependencies`` attribute on the ``natural_key()`` method itself."
msgstr ""

#: ../../topics/serialization.txt:382
# b8f60dc7e1ec40a799c8cdf5a7fb6c1a
msgid "For example, let's add a natural key to the ``Book`` model from the example above::"
msgstr ""

#: ../../topics/serialization.txt:392
# f60fee97c25d454b9b1b2bd948ed0e1f
msgid "The natural key for a ``Book`` is a combination of its name and its author. This means that ``Person`` must be serialized before ``Book``. To define this dependency, we add one extra line::"
msgstr ""

#: ../../topics/serialization.txt:400
# 380f0f2831354414aaaed81c34022e91
msgid "This definition ensures that all ``Person`` objects are serialized before any ``Book`` objects. In turn, any object referencing ``Book`` will be serialized after both ``Person`` and ``Book`` have been serialized."
msgstr ""

#: ../../topics/settings.txt:3
# 9a0d158c61b3488d829f0ef9eeb3fc57
msgid "Django settings"
msgstr ""

#: ../../topics/settings.txt:5
# 82bd03afe03c40f38caac3dc46037f54
msgid "A Django settings file contains all the configuration of your Django installation. This document explains how settings work and which settings are available."
msgstr ""

#: ../../topics/settings.txt:10
# 09ef174220e241a8b47291945f842f1d
msgid "The basics"
msgstr ""

#: ../../topics/settings.txt:12
# d04af4135df04454bbe118510569e61c
msgid "A settings file is just a Python module with module-level variables."
msgstr ""

#: ../../topics/settings.txt:14
# ef7e75af61e14bc3b7a1ce552841a8ff
msgid "Here are a couple of example settings::"
msgstr ""

#: ../../topics/settings.txt:20
# 205372aff1bb4af39957e943f6b6c575
msgid "Because a settings file is a Python module, the following apply:"
msgstr ""

#: ../../topics/settings.txt:22
# 6b4a664b834545b1a78e7d22eb7f933d
msgid "It doesn't allow for Python syntax errors."
msgstr ""

#: ../../topics/settings.txt:23
# 458d2fd72ff44babb4f7f86354588513
msgid "It can assign settings dynamically using normal Python syntax. For example::"
msgstr ""

#: ../../topics/settings.txt:28
# 21cb57483607489e913fec9b1e29c1bd
msgid "It can import values from other settings files."
msgstr ""

#: ../../topics/settings.txt:33
# 7bf1978bb8094750aba32174c1042a56
msgid "Designating the settings"
msgstr ""

#: ../../topics/settings.txt:37
# 7e701099835a4a4daad4f0caa9487548
msgid "When you use Django, you have to tell it which settings you're using. Do this by using an environment variable, ``DJANGO_SETTINGS_MODULE``."
msgstr ""

#: ../../topics/settings.txt:40
# ecda65d9342544879b1b1d3b66ccda6c
msgid "The value of ``DJANGO_SETTINGS_MODULE`` should be in Python path syntax, e.g. ``mysite.settings``. Note that the settings module should be on the Python `import search path`_."
msgstr ""

#: ../../topics/settings.txt:47
# 658d1ca655554d188b3ef0acb5ae635b
msgid "The django-admin.py utility"
msgstr ""

#: ../../topics/settings.txt:49
# bdb03ef335814505a6f4eba89eb04a68
msgid "When using :doc:`django-admin.py </ref/django-admin>`, you can either set the environment variable once, or explicitly pass in the settings module each time you run the utility."
msgstr ""

#: ../../topics/settings.txt:53
# 1614286529d349aaaf3571e7ff223e29
msgid "Example (Unix Bash shell)::"
msgstr ""

#: ../../topics/settings.txt:58
# 53ef8388274c431e9a1b8588d3fbe16d
msgid "Example (Windows shell)::"
msgstr ""

#: ../../topics/settings.txt:63
# a16ace337031453bb898d0e40ddbab27
msgid "Use the ``--settings`` command-line argument to specify the settings manually::"
msgstr ""

#: ../../topics/settings.txt:70
# c68b7b7fd5f84f58916fbae48b45b05b
msgid "On the server (mod_wsgi)"
msgstr ""

#: ../../topics/settings.txt:72
# 3fd7a295a34a430e8655256842abfa45
msgid "In your live server environment, you'll need to tell your WSGI application what settings file to use. Do that with ``os.environ``::"
msgstr ""

#: ../../topics/settings.txt:79
# 8c17fc85e6e447dfb567d3b2f0e802bb
msgid "Read the :doc:`Django mod_wsgi documentation </howto/deployment/wsgi/modwsgi>` for more information and other common elements to a Django WSGI application."
msgstr ""

#: ../../topics/settings.txt:84
# 0a8bc06a3ada476faf8cc4a6c6eb4c58
msgid "Default settings"
msgstr ""

#: ../../topics/settings.txt:86
# acdf505609ad47999a513d77849a158e
msgid "A Django settings file doesn't have to define any settings if it doesn't need to. Each setting has a sensible default value. These defaults live in the module :file:`django/conf/global_settings.py`."
msgstr ""

#: ../../topics/settings.txt:90
# a06ec24726864f11bb82d0f78f3536d8
msgid "Here's the algorithm Django uses in compiling settings:"
msgstr ""

#: ../../topics/settings.txt:92
# a5d49d06e12b4d199f47a618fcdd6b4d
msgid "Load settings from ``global_settings.py``."
msgstr ""

#: ../../topics/settings.txt:93
# 5d03eae9946047a88d3bd14e35e1710e
msgid "Load settings from the specified settings file, overriding the global settings as necessary."
msgstr ""

#: ../../topics/settings.txt:96
# 0001764d4f79425e975f7632a8aa5c8e
msgid "Note that a settings file should *not* import from ``global_settings``, because that's redundant."
msgstr ""

#: ../../topics/settings.txt:100
# 86e4d3375e0b4af7b15b2e46b1af7360
msgid "Seeing which settings you've changed"
msgstr ""

#: ../../topics/settings.txt:102
# a97c41085067491c99cb5f55067d784d
msgid "There's an easy way to view which of your settings deviate from the default settings. The command ``python manage.py diffsettings`` displays differences between the current settings file and Django's default settings."
msgstr ""

#: ../../topics/settings.txt:106
# 100c177ead814c3b897c8906ae003d11
msgid "For more, see the :djadmin:`diffsettings` documentation."
msgstr ""

#: ../../topics/settings.txt:109
# 2480979ac57c46a9b81850bd9408a83d
msgid "Using settings in Python code"
msgstr ""

#: ../../topics/settings.txt:111
# b9921d5f8218415b959861f52c1cdc75
msgid "In your Django apps, use settings by importing the object ``django.conf.settings``. Example::"
msgstr ""

#: ../../topics/settings.txt:119
# fe57fa8df0ad43b0847b51b6b2605598
msgid "Note that ``django.conf.settings`` isn't a module -- it's an object. So importing individual settings is not possible::"
msgstr ""

#: ../../topics/settings.txt:124
# cb3899f0b3d54bdead694d158297d6c1
msgid "Also note that your code should *not* import from either ``global_settings`` or your own settings file. ``django.conf.settings`` abstracts the concepts of default settings and site-specific settings; it presents a single interface. It also decouples the code that uses settings from the location of your settings."
msgstr ""

#: ../../topics/settings.txt:131
# e4b7a8b587db451397f8842afb6a66c6
msgid "Altering settings at runtime"
msgstr ""

#: ../../topics/settings.txt:133
# 59b0d4b6ef704fcf850fccd00222040b
msgid "You shouldn't alter settings in your applications at runtime. For example, don't do this in a view::"
msgstr ""

#: ../../topics/settings.txt:140
# 9317ec6e98ef434abbbca5daf08fd333
msgid "The only place you should assign to settings is in a settings file."
msgstr ""

#: ../../topics/settings.txt:143
# 4e796c944cff4ef699ae30fc8b1ecc36
msgid "Security"
msgstr ""

#: ../../topics/settings.txt:145
# 5c1f55404a554457aa5a7a517cac363c
msgid "Because a settings file contains sensitive information, such as the database password, you should make every attempt to limit access to it. For example, change its file permissions so that only you and your Web server's user can read it. This is especially important in a shared-hosting environment."
msgstr ""

#: ../../topics/settings.txt:151
# fe66a02b095c4d739a3b53405c9f2052
msgid "Available settings"
msgstr ""

#: ../../topics/settings.txt:153
# 226d0956255c4ce98cffce6993c33f1c
msgid "For a full list of available settings, see the :doc:`settings reference </ref/settings>`."
msgstr ""

#: ../../topics/settings.txt:156
# 4b3efede2f2f44168d22b81512670d1b
msgid "Creating your own settings"
msgstr ""

#: ../../topics/settings.txt:158
# c56234f6ec5943e4af157c219cc06886
msgid "There's nothing stopping you from creating your own settings, for your own Django apps. Just follow these conventions:"
msgstr ""

#: ../../topics/settings.txt:161
# 1c92c72a84814c95a95b058a41e51ffa
msgid "Setting names are in all uppercase."
msgstr ""

#: ../../topics/settings.txt:162
# 521152372f16448b95f108ff16717055
msgid "Don't reinvent an already-existing setting."
msgstr ""

#: ../../topics/settings.txt:164
# f67341a419ef488f8ee52c61c2d535dd
msgid "For settings that are sequences, Django itself uses tuples, rather than lists, but this is only a convention."
msgstr ""

#: ../../topics/settings.txt:170
# 54182896ba784c51a3f548aca49f9fe0
msgid "Using settings without setting DJANGO_SETTINGS_MODULE"
msgstr ""

#: ../../topics/settings.txt:172
# 8fee4ad1b5ac4a9ba6d4ceb735b00f1f
msgid "In some cases, you might want to bypass the ``DJANGO_SETTINGS_MODULE`` environment variable. For example, if you're using the template system by itself, you likely don't want to have to set up an environment variable pointing to a settings module."
msgstr ""

#: ../../topics/settings.txt:177
# 520c7211f5f34413bd7083f4575e21db
msgid "In these cases, you can configure Django's settings manually. Do this by calling:"
msgstr ""

#: ../../topics/settings.txt:189
# 8d859b7b2d52493c96461d30d1992793
msgid "Pass ``configure()`` as many keyword arguments as you'd like, with each keyword argument representing a setting and its value. Each argument name should be all uppercase, with the same name as the settings described above. If a particular setting is not passed to ``configure()`` and is needed at some later point, Django will use the default setting value."
msgstr ""

#: ../../topics/settings.txt:195
# 984af20778764231aedb2c0949075b4e
msgid "Configuring Django in this fashion is mostly necessary -- and, indeed, recommended -- when you're using a piece of the framework inside a larger application."
msgstr ""

#: ../../topics/settings.txt:199
# 153672922df3497198a63068a26e07be
msgid "Consequently, when configured via ``settings.configure()``, Django will not make any modifications to the process environment variables (see the documentation of :setting:`TIME_ZONE` for why this would normally occur). It's assumed that you're already in full control of your environment in these cases."
msgstr ""

#: ../../topics/settings.txt:206
# 85bea53235ba4b69aed1ef4f95bbfcdf
msgid "Custom default settings"
msgstr ""

#: ../../topics/settings.txt:208
# 05e33d636dbc498bb3bd7945179708c5
msgid "If you'd like default values to come from somewhere other than ``django.conf.global_settings``, you can pass in a module or class that provides the default settings as the ``default_settings`` argument (or as the first positional argument) in the call to ``configure()``."
msgstr ""

#: ../../topics/settings.txt:213
# 1e657d6b60144d6abd8550961d5d34ad
msgid "In this example, default settings are taken from ``myapp_defaults``, and the :setting:`DEBUG` setting is set to ``True``, regardless of its value in ``myapp_defaults``::"
msgstr ""

#: ../../topics/settings.txt:222
# 285d666766414e01a8b6c0b7bd500810
msgid "The following example, which uses ``myapp_defaults`` as a positional argument, is equivalent::"
msgstr ""

#: ../../topics/settings.txt:227
# 1af5803e747d4b37a1a7b60b4bf49c93
msgid "Normally, you will not need to override the defaults in this fashion. The Django defaults are sufficiently tame that you can safely use them. Be aware that if you do pass in a new default module, it entirely *replaces* the Django defaults, so you must specify a value for every possible setting that might be used in that code you are importing. Check in ``django.conf.settings.global_settings`` for the full list."
msgstr ""

#: ../../topics/settings.txt:235
# 6d49a4a3ef3e45188da203961525a7b0
msgid "Either configure() or DJANGO_SETTINGS_MODULE is required"
msgstr ""

#: ../../topics/settings.txt:237
# bc063c28772a41c68f852adbcde3455a
msgid "If you're not setting the ``DJANGO_SETTINGS_MODULE`` environment variable, you *must* call ``configure()`` at some point before using any code that reads settings."
msgstr ""

#: ../../topics/settings.txt:241
# 6a35bbbf87ab4c95adc5e3290184c776
msgid "If you don't set ``DJANGO_SETTINGS_MODULE`` and don't call ``configure()``, Django will raise an ``ImportError`` exception the first time a setting is accessed."
msgstr ""

#: ../../topics/settings.txt:245
# 0cb307c73be44c1aa81c7972593e47e0
msgid "If you set ``DJANGO_SETTINGS_MODULE``, access settings values somehow, *then* call ``configure()``, Django will raise a ``RuntimeError`` indicating that settings have already been configured. There is a property just for this purpose:"
msgstr ""

#: ../../topics/settings.txt:258
# 2affe41abd05460485aad70875de0059
msgid "Also, it's an error to call ``configure()`` more than once, or to call ``configure()`` after any setting has been accessed."
msgstr ""

#: ../../topics/settings.txt:261
# 655aa13d361e477e9b87cc9bc4c67e7b
msgid "It boils down to this: Use exactly one of either ``configure()`` or ``DJANGO_SETTINGS_MODULE``. Not both, and not neither."
msgstr ""

#: ../../topics/signals.txt:3
# 6e4a804def044a158340a6a66ed92383
msgid "Signals"
msgstr ""

#: ../../topics/signals.txt:8
# c5f2e579cdc74b92936a0a838f8e307c
msgid "Django includes a \"signal dispatcher\" which helps allow decoupled applications get notified when actions occur elsewhere in the framework. In a nutshell, signals allow certain *senders* to notify a set of *receivers* that some action has taken place. They're especially useful when many pieces of code may be interested in the same events."
msgstr ""

#: ../../topics/signals.txt:14
# 0e17c85f4c0040bd9932ac05262ba8da
msgid "Django provides a :doc:`set of built-in signals </ref/signals>` that let user code get notified by Django itself of certain actions. These include some useful notifications:"
msgstr ""

#: ../../topics/signals.txt:18
# 82863b192c894b2bb7c6c7cd007ee109
msgid ":data:`django.db.models.signals.pre_save` & :data:`django.db.models.signals.post_save`"
msgstr ""

#: ../../topics/signals.txt:21
# e566cff256ee474199fc978834b62b54
msgid "Sent before or after a model's :meth:`~django.db.models.Model.save` method is called."
msgstr ""

#: ../../topics/signals.txt:24
# d2e7b404aa5448ea815565dfb57728c6
msgid ":data:`django.db.models.signals.pre_delete` & :data:`django.db.models.signals.post_delete`"
msgstr ""

#: ../../topics/signals.txt:27
# a86f588185b74ae2bd922770c2bfbdf1
msgid "Sent before or after a model's :meth:`~django.db.models.Model.delete` method or queryset's :meth:`~django.db.models.query.QuerySet.delete` method is called."
msgstr ""

#: ../../topics/signals.txt:31
# 9fd8182698b84a148f78bd7200f7a0d8
msgid ":data:`django.db.models.signals.m2m_changed`"
msgstr ""

#: ../../topics/signals.txt:33
# cc79f6ae57804b0fbe0c8dfd71d46346
msgid "Sent when a :class:`~django.db.models.ManyToManyField` on a model is changed."
msgstr ""

#: ../../topics/signals.txt:35
# 0cada908c9ba4636b6ccff4fdd05014c
msgid ":data:`django.core.signals.request_started` & :data:`django.core.signals.request_finished`"
msgstr ""

#: ../../topics/signals.txt:38
# 0f00fe66c83c47bc87ff9cf84275867a
msgid "Sent when Django starts or finishes an HTTP request."
msgstr ""

#: ../../topics/signals.txt:40
# b35741d2612e40fdada1b99bed637782
msgid "See the :doc:`built-in signal documentation </ref/signals>` for a complete list, and a complete explanation of each signal."
msgstr ""

#: ../../topics/signals.txt:43
# ef66273d8fcb441096a6aba0e6ff1a78
msgid "You can also `define and send your own custom signals`_; see below."
msgstr ""

#: ../../topics/signals.txt:48
# 59a12d66272448919f43df2d2dcf9aed
msgid "Listening to signals"
msgstr ""

#: ../../topics/signals.txt:50
# 5b5bc449ad1c4a39ab50a0f2aa9b4cda
msgid "To receive a signal, you need to register a *receiver* function that gets called when the signal is sent by using the :meth:`.Signal.connect` method:"
msgstr ""

#: ../../topics/signals.txt:71
# 199e3baecaea487e9a5442e8b4fa14c5
msgid "Let's see how this works by registering a signal that gets called after each HTTP request is finished. We'll be connecting to the :data:`~django.core.signals.request_finished` signal."
msgstr ""

#: ../../topics/signals.txt:78
# 8603da80356b4202bf31ceff9f58e574
msgid "Receiver functions"
msgstr ""

#: ../../topics/signals.txt:80
# 05efe0c0b3934405ac7d28d2b5a51abe
msgid "First, we need to define a receiver function. A receiver can be any Python function or method:"
msgstr ""

#: ../../topics/signals.txt:88
# 00e35cac94004cbc9413c8c52ee30c7c
msgid "Notice that the function takes a ``sender`` argument, along with wildcard keyword arguments (``**kwargs``); all signal handlers must take these arguments."
msgstr ""

#: ../../topics/signals.txt:91
# b8d255c94e3549618f70fa0c2e676e32
msgid "We'll look at senders `a bit later`_, but right now look at the ``**kwargs`` argument. All signals send keyword arguments, and may change those keyword arguments at any time. In the case of :data:`~django.core.signals.request_finished`, it's documented as sending no arguments, which means we might be tempted to write our signal handling as ``my_callback(sender)``."
msgstr ""

#: ../../topics/signals.txt:100
# 57d9744d142d424e8b987f88d720dff5
msgid "This would be wrong -- in fact, Django will throw an error if you do so. That's because at any point arguments could get added to the signal and your receiver must be able to handle those new arguments."
msgstr ""

#: ../../topics/signals.txt:107
# cc14ee5045f44b19b2b00acf9a85f8d7
msgid "Connecting receiver functions"
msgstr ""

#: ../../topics/signals.txt:109
# 137b4cbdf56948e480617a208b35b795
msgid "There are two ways you can connect a receiver to a signal. You can take the manual connect route:"
msgstr ""

#: ../../topics/signals.txt:118
# 073dc6cf931c41da98b007b0dcd8c1f6
msgid "Alternatively, you can use a ``receiver`` decorator when you define your receiver:"
msgstr ""

#: ../../topics/signals.txt:130
# ac8bba232a874015a3448a27bbf66195
msgid "Now, our ``my_callback`` function will be called each time a request finishes."
msgstr ""

#: ../../topics/signals.txt:132
# e94174be87c1465b8007b9d25c0a99e2
msgid "Note that ``receiver`` can also take a list of signals to connect a function to."
msgstr ""

#: ../../topics/signals.txt:137
# 98ee655190d24c72bb6af3613cfb9e5b
msgid "The ability to pass a list of signals was added."
msgstr ""

#: ../../topics/signals.txt:141
# 768aac475bce418182a4b1960d55402b
msgid "You can put signal handling and registration code anywhere you like. However, you'll need to make sure that the module it's in gets imported early on so that the signal handling gets registered before any signals need to be sent. This makes your app's ``models.py`` a good place to put registration of signal handlers."
msgstr ""

#: ../../topics/signals.txt:150
# fc3b8705314a4acb89bdae08348802cb
msgid "Connecting to signals sent by specific senders"
msgstr ""

#: ../../topics/signals.txt:152
# 89e2c17dae3349039a1c94a911c686bc
msgid "Some signals get sent many times, but you'll only be interested in receiving a certain subset of those signals. For example, consider the :data:`django.db.models.signals.pre_save` signal sent before a model gets saved. Most of the time, you don't need to know when *any* model gets saved -- just when one *specific* model is saved."
msgstr ""

#: ../../topics/signals.txt:158
# 3bd209e9d25340a3987c254f8a6dd865
msgid "In these cases, you can register to receive signals sent only by particular senders. In the case of :data:`django.db.models.signals.pre_save`, the sender will be the model class being saved, so you can indicate that you only want signals sent by some model:"
msgstr ""

#: ../../topics/signals.txt:173
# 331d0b4df24b4d3c8650db209e94d01d
msgid "The ``my_handler`` function will only be called when an instance of ``MyModel`` is saved."
msgstr ""

#: ../../topics/signals.txt:176
# a17de68b7b944e679d01b360a49fa829
msgid "Different signals use different objects as their senders; you'll need to consult the :doc:`built-in signal documentation </ref/signals>` for details of each particular signal."
msgstr ""

#: ../../topics/signals.txt:183
# 34fc77a9b6804e00a598f36e86a5ab66
msgid "Preventing duplicate signals"
msgstr ""

#: ../../topics/signals.txt:185
# ec849982f7b54362961df2a236c71a0c
msgid "In some circumstances, the module in which you are connecting signals may be imported multiple times. This can cause your receiver function to be registered more than once, and thus called multiples times for a single signal event."
msgstr ""

#: ../../topics/signals.txt:190
# d7618f962b7b4733a030251c14bc40c8
msgid "If this behavior is problematic (such as when using signals to send an email whenever a model is saved), pass a unique identifier as the ``dispatch_uid`` argument to identify your receiver function. This identifier will usually be a string, although any hashable object will suffice. The end result is that your receiver function will only be bound to the signal once for each unique ``dispatch_uid`` value."
msgstr ""

#: ../../topics/signals.txt:204
# bc5d5e0cbb134ce59d82a6249b0f77fd
msgid "Defining and sending signals"
msgstr ""

#: ../../topics/signals.txt:206
# 4e8de7864bfa4bbdbee2b8e252580c98
msgid "Your applications can take advantage of the signal infrastructure and provide its own signals."
msgstr ""

#: ../../topics/signals.txt:210
# b6a87ba9393e40eba6d929fbffd05e2c
msgid "Defining signals"
msgstr ""

#: ../../topics/signals.txt:214
# 6d02c294e4e8411eb321478cd07d20a1
msgid "All signals are :class:`django.dispatch.Signal` instances. The ``providing_args`` is a list of the names of arguments the signal will provide to listeners. This is purely documentational, however, as there is nothing that checks that the signal actually provides these arguments to its listeners."
msgstr ""

#: ../../topics/signals.txt:219
# 6b91ef9068c745e2913ffae540ecc650
msgid "For example:"
msgstr ""

#: ../../topics/signals.txt:227
# 4d1e177531124bd78d53d5f6e6eed74a
msgid "This declares a ``pizza_done`` signal that will provide receivers with ``toppings`` and ``size`` arguments."
msgstr ""

#: ../../topics/signals.txt:230
# 11c16163a94d4888a45311e3c8727842
msgid "Remember that you're allowed to change this list of arguments at any time, so getting the API right on the first try isn't necessary."
msgstr ""

#: ../../topics/signals.txt:233
# f3b6d131bff049c3a932556b60847b35
msgid "Sending signals"
msgstr ""

#: ../../topics/signals.txt:235
# f8dd2b5301fe4e1a8416275731978328
msgid "There are two ways to send signals in Django."
msgstr ""

#: ../../topics/signals.txt:240
# 82ba5f398e5e4f55982a353a14c51700
msgid "To send a signal, call either :meth:`Signal.send` or :meth:`Signal.send_robust`. You must provide the ``sender`` argument, and may provide as many other keyword arguments as you like."
msgstr ""

#: ../../topics/signals.txt:244
# ff4e2824eb4448cab63885059559f973
msgid "For example, here's how sending our ``pizza_done`` signal might look:"
msgstr ""

#: ../../topics/signals.txt:255
# 7aeaa26180ac4d039f9b56cd340eda0f
msgid "Both ``send()`` and ``send_robust()`` return a list of tuple pairs ``[(receiver, response), ... ]``, representing the list of called receiver functions and their response values."
msgstr ""

#: ../../topics/signals.txt:259
# d601a0f9a26a4c068eb9a6d5e081be52
msgid "``send()`` differs from ``send_robust()`` in how exceptions raised by receiver functions are handled. ``send()`` does *not* catch any exceptions raised by receivers; it simply allows errors to propagate. Thus not all receivers may be notified of a signal in the face of an error."
msgstr ""

#: ../../topics/signals.txt:264
# ad0a2266c4ad41049b55f178f539d835
msgid "``send_robust()`` catches all errors derived from Python's ``Exception`` class, and ensures all receivers are notified of the signal. If an error occurs, the error instance is returned in the tuple pair for the receiver that raised the error."
msgstr ""

#: ../../topics/signals.txt:269
# 136e936cb3c6496cbb249b9d536ea678
msgid "Disconnecting signals"
msgstr ""

#: ../../topics/signals.txt:273
# bc268962e1ff449787494a842d396725
msgid "To disconnect a receiver from a signal, call :meth:`Signal.disconnect`. The arguments are as described in :meth:`.Signal.connect`."
msgstr ""

#: ../../topics/signals.txt:276
# 580a3462e9c24137bdf081693547f016
msgid "The *receiver* argument indicates the registered receiver to disconnect. It may be ``None`` if ``dispatch_uid`` is used to identify the receiver."
msgstr ""

#: ../../topics/signing.txt:3
# 71ba966fb2b54248a6ca7c56e5afda6b
msgid "Cryptographic signing"
msgstr ""

#: ../../topics/signing.txt:10
# 582cc66a751f4160be0de4f0d0d64a7d
msgid "The golden rule of Web application security is to never trust data from untrusted sources. Sometimes it can be useful to pass data through an untrusted medium. Cryptographically signed values can be passed through an untrusted channel safe in the knowledge that any tampering will be detected."
msgstr ""

#: ../../topics/signing.txt:15
# cf75dab2eb474d7bb4abcf7584f67363
msgid "Django provides both a low-level API for signing values and a high-level API for setting and reading signed cookies, one of the most common uses of signing in Web applications."
msgstr ""

#: ../../topics/signing.txt:19
# 1a57c08a3e284ea0833c7a8f4f4d1a11
msgid "You may also find signing useful for the following:"
msgstr ""

#: ../../topics/signing.txt:21
# 3040d6556681454dbc73fbc629e9797f
msgid "Generating \"recover my account\" URLs for sending to users who have lost their password."
msgstr ""

#: ../../topics/signing.txt:24
# b7d1e94c064b469397e1e3fb30087baf
msgid "Ensuring data stored in hidden form fields has not been tampered with."
msgstr ""

#: ../../topics/signing.txt:26
# 3ef18e8ffd804b91a3f0f076b167ac3d
msgid "Generating one-time secret URLs for allowing temporary access to a protected resource, for example a downloadable file that a user has paid for."
msgstr ""

#: ../../topics/signing.txt:31
# 2c037b44d5cc4ab78c89c91a1436c83f
msgid "Protecting the SECRET_KEY"
msgstr ""

#: ../../topics/signing.txt:33
# 56d808239d9d484fac6404ec5f478148
msgid "When you create a new Django project using :djadmin:`startproject`, the ``settings.py`` file is generated automatically and gets a random :setting:`SECRET_KEY` value. This value is the key to securing signed data -- it is vital you keep this secure, or attackers could use it to generate their own signed values."
msgstr ""

#: ../../topics/signing.txt:40
# 0a9d2710bfde4d9a99edbc8aeef269b4
msgid "Using the low-level API"
msgstr ""

#: ../../topics/signing.txt:44
# 702a44a1c9e04da1ac78cd6a651e5717
msgid "Django's signing methods live in the ``django.core.signing`` module. To sign a value, first instantiate a ``Signer`` instance::"
msgstr ""

#: ../../topics/signing.txt:53
# 7604e4d5c0b641e69bd2801c987663e4
msgid "The signature is appended to the end of the string, following the colon. You can retrieve the original value using the ``unsign`` method::"
msgstr ""

#: ../../topics/signing.txt:60
# 2cce274e7fd64740bb4fa081ec48cec6
msgid "If the signature or value have been altered in any way, a ``django.core.signing.BadSignature`` exception will be raised::"
msgstr ""

#: ../../topics/signing.txt:70
# 772d81c8763c43f49f43091c05b37937
msgid "By default, the ``Signer`` class uses the :setting:`SECRET_KEY` setting to generate signatures. You can use a different secret by passing it to the ``Signer`` constructor::"
msgstr ""

#: ../../topics/signing.txt:80
# b3d45925aa114ba9ab414b10f4d1eabd
msgid "Using the salt argument"
msgstr ""

#: ../../topics/signing.txt:82
# ac48f68e627e43ffb400501e479c579b
msgid "If you do not wish for every occurrence of a particular string to have the same signature hash, you can use the optional ``salt`` argument to the ``Signer`` class. Using a salt will seed the signing hash function with both the salt and your :setting:`SECRET_KEY`::"
msgstr ""

#: ../../topics/signing.txt:96
# 4405fc3e5ac544859ceb3c34f34743cc
msgid "Using salt in this way puts the different signatures into different namespaces.  A signature that comes from one namespace (a particular salt value) cannot be used to validate the same plaintext string in a different namespace that is using a different salt setting. The result is to prevent an attacker from using a signed string generated in one place in the code as input to another piece of code that is generating (and verifying) signatures using a different salt."
msgstr ""

#: ../../topics/signing.txt:104
# 0ee63f4142be46d6a21b734da30dd4fd
msgid "Unlike your :setting:`SECRET_KEY`, your salt argument does not need to stay secret."
msgstr ""

#: ../../topics/signing.txt:108
# 83d21e9ed4d04970b70c65bdac3fb023
msgid "Verifying timestamped values"
msgstr ""

#: ../../topics/signing.txt:112
# a6b0aee8e1b7471aaed1b5f1631c2358
msgid "``TimestampSigner`` is a subclass of :class:`~Signer` that appends a signed timestamp to the value. This allows you to confirm that a signed value was created within a specified period of time::"
msgstr ""

#: ../../topics/signing.txt:130
# 9622f60e506247bcb856cbfb9eaef65b
msgid "Protecting complex data structures"
msgstr ""

#: ../../topics/signing.txt:132
# 1c406218bdac47dfb6a13f19517499a1
msgid "If you wish to protect a list, tuple or dictionary you can do so using the signing module's ``dumps`` and ``loads`` functions. These imitate Python's pickle module, but use JSON serialization under the hood. JSON ensures that even if your :setting:`SECRET_KEY` is stolen an attacker will not be able to execute arbitrary commands by exploiting the pickle format.::"
msgstr ""

#: ../../topics/signing.txt:147
# b18d6264077946ee9a7457ce15137fac
msgid "Returns URL-safe, sha1 signed base64 compressed JSON string."
msgstr ""

#: ../../topics/signing.txt:151
# 0b3f992b7f7c4120b109647325a4a21c
msgid "Reverse of dumps(), raises ``BadSignature`` if signature fails."
msgstr ""

#: ../../topics/templates.txt:3
# 6c9b151684d841f1a092751a36f95f8c
msgid "The Django template language"
msgstr ""

#: ../../topics/templates.txt:7
# c72f1804ae194a798a1236d7cbf64084
msgid "This document explains the language syntax of the Django template system. If you're looking for a more technical perspective on how it works and how to extend it, see :doc:`/ref/templates/api`."
msgstr ""

#: ../../topics/templates.txt:11
# a0f893fdc4b04f16bfa7380f935b20c9
msgid "Django's template language is designed to strike a balance between power and ease. It's designed to feel comfortable to those used to working with HTML. If you have any exposure to other text-based template languages, such as Smarty_ or CheetahTemplate_, you should feel right at home with Django's templates."
msgstr ""

#: ../../topics/templates.txt:18
# bd7e4c0f70c34effa351db557db7d53c
msgid "If you have a background in programming, or if you're used to languages which mix programming code directly into HTML, you'll want to bear in mind that the Django template system is not simply Python embedded into HTML. This is by design: the template system is meant to express presentation, not program logic."
msgstr ""

#: ../../topics/templates.txt:24
# 265a695a07894f6b953bdfd83ec00b71
msgid "The Django template system provides tags which function similarly to some programming constructs -- an :ttag:`if` tag for boolean tests, a :ttag:`for` tag for looping, etc. -- but these are not simply executed as the corresponding Python code, and the template system will not execute arbitrary Python expressions. Only the tags, filters and syntax listed below are supported by default (although you can add :doc:`your own extensions </howto/custom-template-tags>` to the template language as needed)."
msgstr ""

#: ../../topics/templates.txt:37
# 5bed116e90174f0d9d6ce244ce42e95c
msgid "Templates"
msgstr ""

#: ../../topics/templates.txt:41
# d25aea1646b146eda5dfcf9f9b979800
msgid "A template is simply a text file. It can generate any text-based format (HTML, XML, CSV, etc.)."
msgstr ""

#: ../../topics/templates.txt:44
# 598440c925914011ab3d67776d64c63c
msgid "A template contains **variables**, which get replaced with values when the template is evaluated, and **tags**, which control the logic of the template."
msgstr ""

#: ../../topics/templates.txt:47
# 6e1a1fc48159450a994de5e4fde31e40
msgid "Below is a minimal template that illustrates a few basics. Each element will be explained later in this document.::"
msgstr ""

#: ../../topics/templates.txt:69
# 7625aed2c2c74555bed3ca78de3109b1
msgid "Why use a text-based template instead of an XML-based one (like Zope's TAL)? We wanted Django's template language to be usable for more than just XML/HTML templates. At World Online, we use it for emails, JavaScript and CSV. You can use the template language for any text-based format."
msgstr ""

#: ../../topics/templates.txt:75
# d1c95fbb02734f28b95f5e5ef413da81
msgid "Oh, and one more thing: Making humans edit XML is sadistic!"
msgstr ""

#: ../../topics/templates.txt:78
# 4388d9d6ff9d49649a969ee9612809dd
msgid "Variables"
msgstr ""

#: ../../topics/templates.txt:80
# 7e78cf4d49054cde87f89a9faeb17b5c
msgid "Variables look like this: ``{{ variable }}``. When the template engine encounters a variable, it evaluates that variable and replaces it with the result. Variable names consist of any combination of alphanumeric characters and the underscore (``\"_\"``). The dot (``\".\"``) also appears in variable sections, although that has a special meaning, as indicated below. Importantly, *you cannot have spaces or punctuation characters in variable names.*"
msgstr ""

#: ../../topics/templates.txt:88
# dfdb8f8206ee43e280c83def7764aef8
msgid "Use a dot (``.``) to access attributes of a variable."
msgstr ""

#: ../../topics/templates.txt:92
# 8f0d8d17d76e4b7da289fbceca854792
msgid "Technically, when the template system encounters a dot, it tries the following lookups, in this order:"
msgstr ""

#: ../../topics/templates.txt:95
# 7da125a6a4b64e269a444925c7e2d77a
msgid "Dictionary lookup"
msgstr ""

#: ../../topics/templates.txt:96
# 78854dae7b364401beb5ec53ed71baf0
msgid "Attribute lookup"
msgstr ""

#: ../../topics/templates.txt:97
# 24d4b9c306ad48a6badb3e9e9e793a8c
msgid "Method call"
msgstr ""

#: ../../topics/templates.txt:98
# f24f1661c8b04d0cb5299f86e7a211a7
msgid "List-index lookup"
msgstr ""

#: ../../topics/templates.txt:100
# 1f4fc8cce7994cedb6155a3e8a08b14d
msgid "This can cause some unexpected behavior with objects that override dictionary lookup. For example, consider the following code snippet that attempts to loop over a ``collections.defaultdict``::"
msgstr ""

#: ../../topics/templates.txt:108
# b4e035b3df894c2fb33bdeebf5fe5c85
msgid "Because dictionary lookup happens first, that behavior kicks in and provides a default value instead of using the intended ``.iteritems()`` method. In this case, consider converting to a dictionary first."
msgstr ""

#: ../../topics/templates.txt:112
# 19e735336b164a8897d4a1cf0da8f7d3
msgid "In the above example, ``{{ section.title }}`` will be replaced with the ``title`` attribute of the ``section`` object."
msgstr ""

#: ../../topics/templates.txt:115
# c8949f1872064de987d145b07c74fdaa
msgid "If you use a variable that doesn't exist, the template system will insert the value of the :setting:`TEMPLATE_STRING_IF_INVALID` setting, which is set to ``''`` (the empty string) by default."
msgstr ""

#: ../../topics/templates.txt:119
# 211d6c340fc54798ab2245aa0ba61a04
msgid "Note that \"bar\" in a template expression like ``{{ foo.bar }}`` will be interpreted as a literal string and not using the value of the variable \"bar\", if one exists in the template context."
msgstr ""

#: ../../topics/templates.txt:126
# a208fad5b07a4831ae8e627a50cd0c0a
msgid "You can modify variables for display by using **filters**."
msgstr ""

#: ../../topics/templates.txt:128
# 5b737edb72e2426c9776ed720742d665
msgid "Filters look like this: ``{{ name|lower }}``. This displays the value of the ``{{ name }}`` variable after being filtered through the :tfilter:`lower` filter, which converts text to lowercase. Use a pipe (``|``) to apply a filter."
msgstr ""

#: ../../topics/templates.txt:132
# eb0db3d744c34f26ba300cfeabe461df
msgid "Filters can be \"chained.\" The output of one filter is applied to the next. ``{{ text|escape|linebreaks }}`` is a common idiom for escaping text contents, then converting line breaks to ``<p>`` tags."
msgstr ""

#: ../../topics/templates.txt:136
# cb691a46259c4c7e95d134387a35688f
msgid "Some filters take arguments. A filter argument looks like this: ``{{ bio|truncatewords:30 }}``. This will display the first 30 words of the ``bio`` variable."
msgstr ""

#: ../../topics/templates.txt:140
# b505a863b6454f499af4f1ef555db725
msgid "Filter arguments that contain spaces must be quoted; for example, to join a list with commas and spaced you'd use ``{{ list|join:\", \" }}``."
msgstr ""

#: ../../topics/templates.txt:143
# 6859023c39f5470e8f0a2e0e4772ac16
msgid "Django provides about thirty built-in template filters. You can read all about them in the :ref:`built-in filter reference <ref-templates-builtins-filters>`. To give you a taste of what's available, here are some of the more commonly used template filters:"
msgstr ""

#: ../../topics/templates.txt:149
# af825e0c0cd84392ac2a097666f74b07
msgid "If a variable is false or empty, use given default. Otherwise, use the value of the variable"
msgstr ""

#: ../../topics/templates.txt:156
# 114e2b35015441d89a49d6119cac597c
msgid "If ``value`` isn't provided or is empty, the above will display \"``nothing``\"."
msgstr ""

#: ../../topics/templates.txt:160
# 5031bb643d8446cd8c0dca45fb41aa14
msgid "Returns the length of the value. This works for both strings and lists; for example::"
msgstr ""

#: ../../topics/templates.txt:165
# f86b1f2755a644d2919e6266987c9665
msgid "If ``value`` is ``['a', 'b', 'c', 'd']``, the output will be ``4``."
msgstr ""

#: ../../topics/templates.txt:168
# 7eb383664b5745e199a14f896d498d77
msgid "Strips all [X]HTML tags. For example::"
msgstr ""

#: ../../topics/templates.txt:172
# c965ed4cb1a642939e2f83f7edacbd8e
msgid "If ``value`` is ``\"<b>Joel</b> <button>is</button> a <span>slug</span>\"``, the output will be ``\"Joel is a slug\"``."
msgstr ""

#: ../../topics/templates.txt:175
# 66bba64bfd6b4c60abac02aacc3327c7
msgid "Again, these are just a few examples; see the :ref:`built-in filter reference <ref-templates-builtins-filters>` for the complete list."
msgstr ""

#: ../../topics/templates.txt:178
# a29bf23c3ab24c2bb25b4b77c86aec59
msgid "You can also create your own custom template filters; see :doc:`/howto/custom-template-tags`."
msgstr ""

#: ../../topics/templates.txt:183
#: ../../topics/templates.txt:249
# 73220bf5b00946509be5e7719ee19ef9
# 6e1e5b7960814fe8a4eb9126eac9e0cc
msgid "Django's admin interface can include a complete reference of all template tags and filters available for a given site. See :doc:`/ref/contrib/admin/admindocs`."
msgstr ""

#: ../../topics/templates.txt:188
# 31e3011ba4de46409369c86c6afb5ae8
msgid "Tags"
msgstr ""

#: ../../topics/templates.txt:190
# 9a03199092e94cf28ada6111f4a8a6a4
msgid "Tags look like this: ``{% tag %}``. Tags are more complex than variables: Some create text in the output, some control flow by performing loops or logic, and some load external information into the template to be used by later variables."
msgstr ""

#: ../../topics/templates.txt:194
# 641deebfe0b7444990cb76e1df1aa39a
msgid "Some tags require beginning and ending tags (i.e. ``{% tag %} ... tag contents ... {% endtag %}``)."
msgstr ""

#: ../../topics/templates.txt:197
# 0e83c7ffdded4f8abda6c226a3c78f6d
msgid "Django ships with about two dozen built-in template tags. You can read all about them in the :ref:`built-in tag reference <ref-templates-builtins-tags>`. To give you a taste of what's available, here are some of the more commonly used tags:"
msgstr ""

#: ../../topics/templates.txt:203
# 92f47829569b44b59ee15fee6c62394d
msgid "Loop over each item in an array.  For example, to display a list of athletes provided in ``athlete_list``::"
msgstr ""

#: ../../topics/templates.txt:213
# cc77136c36ae4b3e9eab25d3ca7deb7f
msgid "Evaluates a variable, and if that variable is \"true\" the contents of the block are displayed::"
msgstr ""

#: ../../topics/templates.txt:222
# 5774800a9f9c485f9da903d9f4521b84
msgid "In the above, if ``athlete_list`` is not empty, the number of athletes will be displayed by the ``{{ athlete_list|length }}`` variable."
msgstr ""

#: ../../topics/templates.txt:225
# 81316af1de2f47c39eede85ab35352d9
msgid "You can also use filters and various operators in the :ttag:`if` tag::"
msgstr ""

#: ../../topics/templates.txt:233
# cdd2ad0d14ab4e5abf8d5fa57117f65d
msgid "While the above example works, be aware that most template filters return strings, so mathematical comparisons using filters will generally not work as you expect. :tfilter:`length` is an exception."
msgstr ""

#: ../../topics/templates.txt:238
# 0c3f56626ed649cd88148c619d461d25
msgid "Set up `template inheritance`_ (see below), a powerful way of cutting down on \"boilerplate\" in templates."
msgstr ""

#: ../../topics/templates.txt:241
# 2dd575732a1245fd8ec906d39df5543c
msgid "Again, the above is only a selection of the whole list; see the :ref:`built-in tag reference <ref-templates-builtins-tags>` for the complete list."
msgstr ""

#: ../../topics/templates.txt:244
# 647310f6cddf4dec9a421d98219422d5
msgid "You can also create your own custom template tags; see :doc:`/howto/custom-template-tags`."
msgstr ""

#: ../../topics/templates.txt:256
# 28a3901b65314996b3b8aabde7bec842
msgid "Comments"
msgstr ""

#: ../../topics/templates.txt:258
# b16d03bc5c0f46e5b81b6e173b2515dc
msgid "To comment-out part of a line in a template, use the comment syntax: ``{# #}``."
msgstr ""

#: ../../topics/templates.txt:260
# c3e0ce6aec6e499aa893e14c9ea25ac8
msgid "For example, this template would render as ``'hello'``::"
msgstr ""

#: ../../topics/templates.txt:264
# 7a59bd2aa1894ea7ae65a0a62e54f9a8
msgid "A comment can contain any template code, invalid or not. For example::"
msgstr ""

#: ../../topics/templates.txt:268
# 3bfc2e47ef9447acb20f9a6093da9728
msgid "This syntax can only be used for single-line comments (no newlines are permitted between the ``{#`` and ``#}`` delimiters). If you need to comment out a multiline portion of the template, see the :ttag:`comment` tag."
msgstr ""

#: ../../topics/templates.txt:275
# 23ea1d5aa9874884a3308fdaff3f2bbe
msgid "Template inheritance"
msgstr ""

#: ../../topics/templates.txt:277
# f49c90a6977b4d6fba7dac2d274ae732
msgid "The most powerful -- and thus the most complex -- part of Django's template engine is template inheritance. Template inheritance allows you to build a base \"skeleton\" template that contains all the common elements of your site and defines **blocks** that child templates can override."
msgstr ""

#: ../../topics/templates.txt:282
# 4bf9efa1b2cf4f729fcccda4debba1c1
msgid "It's easiest to understand template inheritance by starting with an example::"
msgstr ""

#: ../../topics/templates.txt:307
# 10ffe177ebdc4e03b8bc2ad76ce44488
msgid "This template, which we'll call ``base.html``, defines a simple HTML skeleton document that you might use for a simple two-column page. It's the job of \"child\" templates to fill the empty blocks with content."
msgstr ""

#: ../../topics/templates.txt:311
# 2a8a39fc83f64f71b29cfa2a26b26422
msgid "In this example, the :ttag:`block` tag defines three blocks that child templates can fill in. All the :ttag:`block` tag does is to tell the template engine that a child template may override those portions of the template."
msgstr ""

#: ../../topics/templates.txt:315
# cbc7df7ab2d74a1a80849505cdbcfe00
msgid "A child template might look like this::"
msgstr ""

#: ../../topics/templates.txt:328
# 5b46eaf58c074771b3c0932025960aae
msgid "The :ttag:`extends` tag is the key here. It tells the template engine that this template \"extends\" another template. When the template system evaluates this template, first it locates the parent -- in this case, \"base.html\"."
msgstr ""

#: ../../topics/templates.txt:332
# eed6b9942a5c498e83b2f1a0037acc2a
msgid "At that point, the template engine will notice the three :ttag:`block` tags in ``base.html`` and replace those blocks with the contents of the child template. Depending on the value of ``blog_entries``, the output might look like::"
msgstr ""

#: ../../topics/templates.txt:362
# 96a7b82d509a490f97ac4c2dbc4129f1
msgid "Note that since the child template didn't define the ``sidebar`` block, the value from the parent template is used instead. Content within a ``{% block %}`` tag in a parent template is always used as a fallback."
msgstr ""

#: ../../topics/templates.txt:366
# 8bdb1af2881d42c5aebbc03280557d59
msgid "You can use as many levels of inheritance as needed. One common way of using inheritance is the following three-level approach:"
msgstr ""

#: ../../topics/templates.txt:369
# db538a9828a34dc8b24df245c05532f1
msgid "Create a ``base.html`` template that holds the main look-and-feel of your site."
msgstr ""

#: ../../topics/templates.txt:371
# c7825789da9b48159a46774c955abb9a
msgid "Create a ``base_SECTIONNAME.html`` template for each \"section\" of your site. For example, ``base_news.html``, ``base_sports.html``. These templates all extend ``base.html`` and include section-specific styles/design."
msgstr ""

#: ../../topics/templates.txt:375
# a014ebf5a19945b78022759be2964455
msgid "Create individual templates for each type of page, such as a news article or blog entry. These templates extend the appropriate section template."
msgstr ""

#: ../../topics/templates.txt:379
# c50b946c05e9457486639343848fc25b
msgid "This approach maximizes code reuse and makes it easy to add items to shared content areas, such as section-wide navigation."
msgstr ""

#: ../../topics/templates.txt:382
# a270ad85126b422d85b4fdcb806374b4
msgid "Here are some tips for working with inheritance:"
msgstr ""

#: ../../topics/templates.txt:384
# cf36d9360d3640f4828591c1358d78b2
msgid "If you use :ttag:`{% extends %}<extends>` in a template, it must be the first template tag in that template. Template inheritance won't work, otherwise."
msgstr ""

#: ../../topics/templates.txt:387
# 140c24936b41420c949882a7f3affbeb
msgid "More :ttag:`{% block %}<block>` tags in your base templates are better. Remember, child templates don't have to define all parent blocks, so you can fill in reasonable defaults in a number of blocks, then only define the ones you need later. It's better to have more hooks than fewer hooks."
msgstr ""

#: ../../topics/templates.txt:392
# 441e15c0bb4b4e1eb99091b3c2a14c2b
msgid "If you find yourself duplicating content in a number of templates, it probably means you should move that content to a ``{% block %}`` in a parent template."
msgstr ""

#: ../../topics/templates.txt:396
# 98c5c83883d64c98b6084ad1b8d8971b
msgid "If you need to get the content of the block from the parent template, the ``{{ block.super }}`` variable will do the trick. This is useful if you want to add to the contents of a parent block instead of completely overriding it. Data inserted using ``{{ block.super }}`` will not be automatically escaped (see the `next section`_), since it was already escaped, if necessary, in the parent template."
msgstr ""

#: ../../topics/templates.txt:403
# 215117d32bb148258ddf08f2674d62c2
msgid "For extra readability, you can optionally give a *name* to your ``{% endblock %}`` tag. For example::"
msgstr ""

#: ../../topics/templates.txt:410
# d30723a1768544fdabed399133163f4e
msgid "In larger templates, this technique helps you see which ``{% block %}`` tags are being closed."
msgstr ""

#: ../../topics/templates.txt:413
# ced06ead392f403eaeed19ed461c2ddd
msgid "Finally, note that you can't define multiple :ttag:`block` tags with the same name in the same template. This limitation exists because a block tag works in \"both\" directions. That is, a block tag doesn't just provide a hole to fill -- it also defines the content that fills the hole in the *parent*. If there were two similarly-named :ttag:`block` tags in a template, that template's parent wouldn't know which one of the blocks' content to use."
msgstr ""

#: ../../topics/templates.txt:424
# 21f7d535f6544b8a9a8c73b0033223ab
msgid "Automatic HTML escaping"
msgstr ""

#: ../../topics/templates.txt:426
# d38e3c3f22a24cb28d9a54d0677d3f78
msgid "When generating HTML from templates, there's always a risk that a variable will include characters that affect the resulting HTML. For example, consider this template fragment::"
msgstr ""

#: ../../topics/templates.txt:432
# 213b1462232844d1b52d19e8614213d6
msgid "At first, this seems like a harmless way to display a user's name, but consider what would happen if the user entered his name as this::"
msgstr ""

#: ../../topics/templates.txt:437
# d4312f83680f40d3a9239adf3eb8fd48
msgid "With this name value, the template would be rendered as::"
msgstr ""

#: ../../topics/templates.txt:441
# e5df642198df481cb52539fc549d85c2
msgid "...which means the browser would pop-up a JavaScript alert box!"
msgstr ""

#: ../../topics/templates.txt:443
# de9dc78c142b43558eb316c1e5479702
msgid "Similarly, what if the name contained a ``'<'`` symbol, like this?"
msgstr ""

#: ../../topics/templates.txt:449
# 2b07bedaf12b42a68dd7402563cc2fd3
msgid "That would result in a rendered template like this::"
msgstr ""

#: ../../topics/templates.txt:453
# 62d1c3847aef4f4cb84e47c4127aa405
msgid "...which, in turn, would result in the remainder of the Web page being bolded!"
msgstr ""

#: ../../topics/templates.txt:455
# 0a8afae239b7441c951202a4864d48e1
msgid "Clearly, user-submitted data shouldn't be trusted blindly and inserted directly into your Web pages, because a malicious user could use this kind of hole to do potentially bad things. This type of security exploit is called a `Cross Site Scripting`_ (XSS) attack."
msgstr ""

#: ../../topics/templates.txt:460
# 1c2e040d71034f1194fdca8f4a91a3e9
msgid "To avoid this problem, you have two options:"
msgstr ""

#: ../../topics/templates.txt:462
# 16e4bcb5c6184228a66b426bdf18f1d7
msgid "One, you can make sure to run each untrusted variable through the :tfilter:`escape` filter (documented below), which converts potentially harmful HTML characters to unharmful ones. This was the default solution in Django for its first few years, but the problem is that it puts the onus on *you*, the developer / template author, to ensure you're escaping everything. It's easy to forget to escape data."
msgstr ""

#: ../../topics/templates.txt:469
# 263398c301f54bbc83258f613a564821
msgid "Two, you can take advantage of Django's automatic HTML escaping. The remainder of this section describes how auto-escaping works."
msgstr ""

#: ../../topics/templates.txt:472
# 7f319d4422b34e8b940886a3ec976564
msgid "By default in Django, every template automatically escapes the output of every variable tag. Specifically, these five characters are escaped:"
msgstr ""

#: ../../topics/templates.txt:476
# 98c6a89223d6454f99671325c3e9765b
msgid "``<`` is converted to ``&lt;``"
msgstr ""

#: ../../topics/templates.txt:477
# a422900553914b6fbd33157d64c01816
msgid "``>`` is converted to ``&gt;``"
msgstr ""

#: ../../topics/templates.txt:478
# aa787e2875d043d499a1692bad9ee14b
msgid "``'`` (single quote) is converted to ``&#39;``"
msgstr ""

#: ../../topics/templates.txt:479
# fd2ba372fc6b4867ba2a42cee461782f
msgid "``\"`` (double quote) is converted to ``&quot;``"
msgstr ""

#: ../../topics/templates.txt:480
# d3da8636adff4da191f6c820d72c6ddb
msgid "``&`` is converted to ``&amp;``"
msgstr ""

#: ../../topics/templates.txt:482
# 537524bb8dea46e29adc112d8c5922d0
msgid "Again, we stress that this behavior is on by default. If you're using Django's template system, you're protected."
msgstr ""

#: ../../topics/templates.txt:488
# 44df33ad2b374e44b22ccbce19c2063e
msgid "How to turn it off"
msgstr ""

#: ../../topics/templates.txt:490
# aeefbde9826b4781985750ecb8ec4cc6
msgid "If you don't want data to be auto-escaped, on a per-site, per-template level or per-variable level, you can turn it off in several ways."
msgstr ""

#: ../../topics/templates.txt:493
# 5b794bbddf4c4c5691ed6446484d75c9
msgid "Why would you want to turn it off? Because sometimes, template variables contain data that you *intend* to be rendered as raw HTML, in which case you don't want their contents to be escaped. For example, you might store a blob of HTML in your database and want to embed that directly into your template. Or, you might be using Django's template system to produce text that is *not* HTML -- like an email message, for instance."
msgstr ""

#: ../../topics/templates.txt:501
# eab4189ac7d14671a47b8933481b8137
msgid "For individual variables"
msgstr ""

#: ../../topics/templates.txt:503
# 1ec1b02e37734102b0b62c9385864e85
msgid "To disable auto-escaping for an individual variable, use the :tfilter:`safe` filter::"
msgstr ""

#: ../../topics/templates.txt:509
# 7a854431e62245a88ed6bc7c3063b186
msgid "Think of *safe* as shorthand for *safe from further escaping* or *can be safely interpreted as HTML*. In this example, if ``data`` contains ``'<b>'``, the output will be::"
msgstr ""

#: ../../topics/templates.txt:517
# f6fd4dc5b9d747c7a32f18cb1bf4f8fc
msgid "For template blocks"
msgstr ""

#: ../../topics/templates.txt:519
# 5e793230e7e44fc5b65eb9976808dcdc
msgid "To control auto-escaping for a template, wrap the template (or just a particular section of the template) in the :ttag:`autoescape` tag, like so::"
msgstr ""

#: ../../topics/templates.txt:526
# ed32c208c93249218888eabb3a031e87
msgid "The :ttag:`autoescape` tag takes either ``on`` or ``off`` as its argument. At times, you might want to force auto-escaping when it would otherwise be disabled. Here is an example template::"
msgstr ""

#: ../../topics/templates.txt:541
# 19678bc1fdc04f4792ddcb7a5865e610
msgid "The auto-escaping tag passes its effect onto templates that extend the current one as well as templates included via the :ttag:`include` tag, just like all block tags. For example::"
msgstr ""

#: ../../topics/templates.txt:560
# bf1f2254934a4281a643b0b5c2eff88c
msgid "Because auto-escaping is turned off in the base template, it will also be turned off in the child template, resulting in the following rendered HTML when the ``greeting`` variable contains the string ``<b>Hello!</b>``::"
msgstr ""

#: ../../topics/templates.txt:568
# a9d1e26c60a94b32942f977a788aa1d9
msgid "Notes"
msgstr ""

#: ../../topics/templates.txt:570
# e1af2d54a2b8443c8cf7fb406bc6c8d8
msgid "Generally, template authors don't need to worry about auto-escaping very much. Developers on the Python side (people writing views and custom filters) need to think about the cases in which data shouldn't be escaped, and mark data appropriately, so things Just Work in the template."
msgstr ""

#: ../../topics/templates.txt:575
# d54f376464c04cbc9fb5c8526f62f111
msgid "If you're creating a template that might be used in situations where you're not sure whether auto-escaping is enabled, then add an :tfilter:`escape` filter to any variable that needs escaping. When auto-escaping is on, there's no danger of the :tfilter:`escape` filter *double-escaping* data -- the :tfilter:`escape` filter does not affect auto-escaped variables."
msgstr ""

#: ../../topics/templates.txt:584
# b3fb85bc7946423ea3ed209205197b7d
msgid "String literals and automatic escaping"
msgstr ""

#: ../../topics/templates.txt:586
# ef0477b9a0af406b9e6aa97286e5d139
msgid "As we mentioned earlier, filter arguments can be strings::"
msgstr ""

#: ../../topics/templates.txt:590
# 45c7e169a73046f895b688ef8d7b4cbe
msgid "All string literals are inserted **without** any automatic escaping into the template -- they act as if they were all passed through the :tfilter:`safe` filter. The reasoning behind this is that the template author is in control of what goes into the string literal, so they can make sure the text is correctly escaped when the template is written."
msgstr ""

#: ../../topics/templates.txt:596
# 34c9511e49c14a8db1b91eb39618f77e
msgid "This means you would write ::"
msgstr ""

#: ../../topics/templates.txt:600
# d52fc716ac1e4e1ea1fda5ca9d9944c4
msgid "...rather than ::"
msgstr ""

#: ../../topics/templates.txt:604
# 5ea9f0d4ce98479fac272f19c17610dc
msgid "This doesn't affect what happens to data coming from the variable itself. The variable's contents are still automatically escaped, if necessary, because they're beyond the control of the template author."
msgstr ""

#: ../../topics/templates.txt:611
# 49f8a2b7fb164b518b4a9bafc6ba4677
msgid "Accessing method calls"
msgstr ""

#: ../../topics/templates.txt:613
# 1d26fe127bf84ab1ada825f1f80af09e
msgid "Most method calls attached to objects are also available from within templates. This means that templates have access to much more than just class attributes (like field names) and variables passed in from views. For example, the Django ORM provides the :ref:`\"entry_set\"<topics-db-queries-related>` syntax for finding a collection of objects related on a foreign key. Therefore, given a model called \"comment\" with a foreign key relationship to a model called \"task\" you can loop through all comments attached to a given task like this::"
msgstr ""

#: ../../topics/templates.txt:625
# d267fa7ab87b42a2ad82603f8367208a
msgid "Similarly, :doc:`QuerySets</ref/models/querysets>` provide a ``count()`` method to count the number of objects they contain. Therefore, you can obtain a count of all comments related to the current task with::"
msgstr ""

#: ../../topics/templates.txt:631
# 3765b7f5ef4045d182d64140a207ced5
msgid "And of course you can easily access methods you've explicitly defined on your own models::"
msgstr ""

#: ../../topics/templates.txt:642
# c0fc7bd734474d128df0c2e55a5b8cd4
msgid "Because Django intentionally limits the amount of logic processing available in the template language, it is not possible to pass arguments to method calls accessed from within templates. Data should be calculated in views, then passed to templates for display."
msgstr ""

#: ../../topics/templates.txt:650
# 395793041e79427b893ac8e8a372c676
msgid "Custom tag and filter libraries"
msgstr ""

#: ../../topics/templates.txt:652
# 644fd1ea666d44218093d090df79c223
msgid "Certain applications provide custom tag and filter libraries. To access them in a template, use the :ttag:`load` tag::"
msgstr ""

#: ../../topics/templates.txt:659
# 4b31a1067a774657b900ccd66f7226d9
msgid "In the above, the :ttag:`load` tag loads the ``comments`` tag library, which then makes the ``comment_form`` tag available for use. Consult the documentation area in your admin to find the list of custom libraries in your installation."
msgstr ""

#: ../../topics/templates.txt:663
# 4748b76b1dd54123a03149a9ee6bc622
msgid "The :ttag:`load` tag can take multiple library names, separated by spaces. Example::"
msgstr ""

#: ../../topics/templates.txt:668
# eda73ba1304841919398aa0b2f50789e
msgid "See :doc:`/howto/custom-template-tags` for information on writing your own custom template libraries."
msgstr ""

#: ../../topics/templates.txt:672
# 0ee3d16266524522b83736fd506c5aca
msgid "Custom libraries and template inheritance"
msgstr ""

#: ../../topics/templates.txt:674
# e39bdfb172754fd9b807e3773ef4f39a
msgid "When you load a custom tag or filter library, the tags/filters are only made available to the current template -- not any parent or child templates along the template-inheritance path."
msgstr ""

#: ../../topics/templates.txt:678
# 26201565a2bc43da8e29ef0f3a70c592
msgid "For example, if a template ``foo.html`` has ``{% load comments %}``, a child template (e.g., one that has ``{% extends \"foo.html\" %}``) will *not* have access to the comments template tags and filters. The child template is responsible for its own ``{% load comments %}``."
msgstr ""

#: ../../topics/templates.txt:683
# 08057328bf8540438a60fd6dc8f8dc43
msgid "This is a feature for the sake of maintainability and sanity."
msgstr ""

#: ../../topics/testing/advanced.txt:3
# a546b0d79e644ebcb298c133ee7a0fb1
msgid "Advanced testing topics"
msgstr ""

#: ../../topics/testing/advanced.txt:6
# ef0fedab06864667a50230a9ec3296f4
msgid "The request factory"
msgstr ""

#: ../../topics/testing/advanced.txt:12
# e483d077f179449986062a7e1a2a7ac8
msgid "The :class:`~django.test.client.RequestFactory` shares the same API as the test client. However, instead of behaving like a browser, the RequestFactory provides a way to generate a request instance that can be used as the first argument to any view. This means you can test a view function the same way as you would test any other function -- as a black box, with exactly known inputs, testing for specific outputs."
msgstr ""

#: ../../topics/testing/advanced.txt:19
# f9a7ddf6d64e4ae090dc2bc9aae43827
msgid "The API for the :class:`~django.test.client.RequestFactory` is a slightly restricted subset of the test client API:"
msgstr ""

#: ../../topics/testing/advanced.txt:22
# 5dc8739be4874d12aa1fda22aa1e6b52
msgid "It only has access to the HTTP methods :meth:`~Client.get()`, :meth:`~Client.post()`, :meth:`~Client.put()`, :meth:`~Client.delete()`, :meth:`~Client.head()` and :meth:`~Client.options()`."
msgstr ""

#: ../../topics/testing/advanced.txt:27
# 4d507579093249a8ac0b50896cba1bdb
msgid "These methods accept all the same arguments *except* for ``follows``. Since this is just a factory for producing requests, it's up to you to handle the response."
msgstr ""

#: ../../topics/testing/advanced.txt:31
# febf5183c92144bc9fdfdfd50b1ac06e
msgid "It does not support middleware. Session and authentication attributes must be supplied by the test itself if required for the view to function properly."
msgstr ""

#: ../../topics/testing/advanced.txt:38
# e5b520037fef426c93217b1f6058da80
msgid "The following is a simple unit test using the request factory::"
msgstr ""

#: ../../topics/testing/advanced.txt:59
# 526d1eb70d694575a06681eccfea16d3
msgid "Tests and multiple databases"
msgstr ""

#: ../../topics/testing/advanced.txt:64
# e287e59d8dbf4ec88ab8bbc37eeb50c0
msgid "Testing master/slave configurations"
msgstr ""

#: ../../topics/testing/advanced.txt:66
# 8131ddaf286042088a735c978ba29b1c
msgid "If you're testing a multiple database configuration with master/slave replication, this strategy of creating test databases poses a problem. When the test databases are created, there won't be any replication, and as a result, data created on the master won't be seen on the slave."
msgstr ""

#: ../../topics/testing/advanced.txt:72
# 40a4148ab088467499740aaaf6b3b946
msgid "To compensate for this, Django allows you to define that a database is a *test mirror*. Consider the following (simplified) example database configuration::"
msgstr ""

#: ../../topics/testing/advanced.txt:92
# f3730e41473548d3bf3bb9f2bcb04309
msgid "In this setup, we have two database servers: ``dbmaster``, described by the database alias ``default``, and ``dbslave`` described by the alias ``slave``. As you might expect, ``dbslave`` has been configured by the database administrator as a read slave of ``dbmaster``, so in normal activity, any write to ``default`` will appear on ``slave``."
msgstr ""

#: ../../topics/testing/advanced.txt:98
# 3316cd128c474d9f89ef1b00d9e40647
msgid "If Django created two independent test databases, this would break any tests that expected replication to occur. However, the ``slave`` database has been configured as a test mirror (using the :setting:`TEST_MIRROR` setting), indicating that under testing, ``slave`` should be treated as a mirror of ``default``."
msgstr ""

#: ../../topics/testing/advanced.txt:104
# 8a27603309444642ad271f946667305c
msgid "When the test environment is configured, a test version of ``slave`` will *not* be created. Instead the connection to ``slave`` will be redirected to point at ``default``. As a result, writes to ``default`` will appear on ``slave`` -- but because they are actually the same database, not because there is data replication between the two databases."
msgstr ""

#: ../../topics/testing/advanced.txt:114
# 4e310f8c3d024cd180987069ddf5f60b
msgid "Controlling creation order for test databases"
msgstr ""

#: ../../topics/testing/advanced.txt:116
# 8c9e1876637444c796f5e45fd2efae85
msgid "By default, Django will always create the ``default`` database first. However, no guarantees are made on the creation order of any other databases in your test setup."
msgstr ""

#: ../../topics/testing/advanced.txt:120
# da44b6d795af4fec963ce5e970c9592b
msgid "If your database configuration requires a specific creation order, you can specify the dependencies that exist using the :setting:`TEST_DEPENDENCIES` setting. Consider the following (simplified) example database configuration::"
msgstr ""

#: ../../topics/testing/advanced.txt:147
# 6ac9e83736084ab2bd5b20695b11edf7
msgid "Under this configuration, the ``diamonds`` database will be created first, as it is the only database alias without dependencies. The ``default`` and ``clubs`` alias will be created next (although the order of creation of this pair is not guaranteed); then ``hearts``; and finally ``spades``."
msgstr ""

#: ../../topics/testing/advanced.txt:152
# 762a2f77a5594363ad34ae6b3ca0f723
msgid "If there are any circular dependencies in the :setting:`TEST_DEPENDENCIES` definition, an ``ImproperlyConfigured`` exception will be raised."
msgstr ""

#: ../../topics/testing/advanced.txt:157
# 926fb0a0340c42e0b3892f589341240c
msgid "Running tests outside the test runner"
msgstr ""

#: ../../topics/testing/advanced.txt:159
# 15e3a59bcf924a60908505a8dd7a2d5c
msgid "If you want to run tests outside of ``./manage.py test`` -- for example, from a shell prompt -- you will need to set up the test environment first. Django provides a convenience method to do this::"
msgstr ""

#: ../../topics/testing/advanced.txt:166
# ad70bd0bb26d489aa3503c91b951bbe2
msgid "This convenience method sets up the test database, and puts other Django features into modes that allow for repeatable testing."
msgstr ""

#: ../../topics/testing/advanced.txt:169
# 7c13145d299b4712bade19ce04b135fe
msgid "The call to :meth:`~django.test.utils.setup_test_environment` is made automatically as part of the setup of ``./manage.py test``. You only need to manually invoke this method if you're not using running your tests via Django's test runner."
msgstr ""

#: ../../topics/testing/advanced.txt:177
# e1f0c2287ac54c35ac67a550f741f456
msgid "Using different testing frameworks"
msgstr ""

#: ../../topics/testing/advanced.txt:179
# c6661626b83946e5bfbc80fdee9e1cc9
msgid "Clearly, :mod:`doctest` and :mod:`unittest` are not the only Python testing frameworks. While Django doesn't provide explicit support for alternative frameworks, it does provide a way to invoke tests constructed for an alternative framework as if they were normal Django tests."
msgstr ""

#: ../../topics/testing/advanced.txt:184
# 693fbdfb462c4532ad45bf6951fd2d60
msgid "When you run ``./manage.py test``, Django looks at the :setting:`TEST_RUNNER` setting to determine what to do. By default, :setting:`TEST_RUNNER` points to ``'django.test.simple.DjangoTestSuiteRunner'``. This class defines the default Django testing behavior. This behavior involves:"
msgstr ""

#: ../../topics/testing/advanced.txt:189
# 15ef36e3d4494ee7a9e1d97da876830c
msgid "Performing global pre-test setup."
msgstr ""

#: ../../topics/testing/advanced.txt:191
# 9bde6df1f9974d36a422f4b3eb58eade
msgid "Looking for unit tests and doctests in the ``models.py`` and ``tests.py`` files in each installed application."
msgstr ""

#: ../../topics/testing/advanced.txt:194
# 1e48fbbc66544e728e942a872f4b477c
msgid "Creating the test databases."
msgstr ""

#: ../../topics/testing/advanced.txt:196
# f7ef5ab3fe384819903dc5c0571b2c33
msgid "Running ``syncdb`` to install models and initial data into the test databases."
msgstr ""

#: ../../topics/testing/advanced.txt:199
# 1d32b2af14c9414b8bcb3f43ca410be3
msgid "Running the unit tests and doctests that are found."
msgstr ""

#: ../../topics/testing/advanced.txt:201
# d25eba17d9814a9da8b9ff888efe14a1
msgid "Destroying the test databases."
msgstr ""

#: ../../topics/testing/advanced.txt:203
# 18703bd79fe848f68ea92b55102f1c5f
msgid "Performing global post-test teardown."
msgstr ""

#: ../../topics/testing/advanced.txt:205
# 8916fcf4dc324e8d81d6c9f0a564743f
msgid "If you define your own test runner class and point :setting:`TEST_RUNNER` at that class, Django will execute your test runner whenever you run ``./manage.py test``. In this way, it is possible to use any test framework that can be executed from Python code, or to modify the Django test execution process to satisfy whatever testing requirements you may have."
msgstr ""

#: ../../topics/testing/advanced.txt:214
# 258f6c8eb9344e959e50e671702261e4
msgid "Defining a test runner"
msgstr ""

#: ../../topics/testing/advanced.txt:218
# a627cde362be49cdaf462f269ad1ba74
msgid "A test runner is a class defining a ``run_tests()`` method. Django ships with a ``DjangoTestSuiteRunner`` class that defines the default Django testing behavior. This class defines the ``run_tests()`` entry point, plus a selection of other methods that are used to by ``run_tests()`` to set up, execute and tear down the test suite."
msgstr ""

#: ../../topics/testing/advanced.txt:226
# c358d23770c540b288212f0cf385795c
msgid "``verbosity`` determines the amount of notification and debug information that will be printed to the console; ``0`` is no output, ``1`` is normal output, and ``2`` is verbose output."
msgstr ""

#: ../../topics/testing/advanced.txt:230
# 94799304ad0b4082b9faa39e94513473
msgid "If ``interactive`` is ``True``, the test suite has permission to ask the user for instructions when the test suite is executed. An example of this behavior would be asking for permission to delete an existing test database. If ``interactive`` is ``False``, the test suite must be able to run without any manual intervention."
msgstr ""

#: ../../topics/testing/advanced.txt:236
# 72d439395eb84d8ea1875680c64fed08
msgid "If ``failfast`` is ``True``, the test suite will stop running after the first test failure is detected."
msgstr ""

#: ../../topics/testing/advanced.txt:239
# 3642d040ce784487b7286df7c6768222
msgid "Django will, from time to time, extend the capabilities of the test runner by adding new arguments. The ``**kwargs`` declaration allows for this expansion. If you subclass ``DjangoTestSuiteRunner`` or write your own test runner, ensure accept and handle the ``**kwargs`` parameter."
msgstr ""

#: ../../topics/testing/advanced.txt:247
# 1c555e08016b4c649083078b20266357
msgid "Your test runner may also define additional command-line options. If you add an ``option_list`` attribute to a subclassed test runner, those options will be added to the list of command-line options that the :djadmin:`test` command can use."
msgstr ""

#: ../../topics/testing/advanced.txt:259
# 8c1cc18a790145bda4c3cac24372e8ad
msgid "This is the tuple of ``optparse`` options which will be fed into the management command's ``OptionParser`` for parsing arguments. See the documentation for Python's ``optparse`` module for more details."
msgstr ""

#: ../../topics/testing/advanced.txt:268
# cfb829d181014b89b5cf4fde15735917
msgid "Run the test suite."
msgstr ""

#: ../../topics/testing/advanced.txt:270
#: ../../topics/testing/advanced.txt:295
# 3268fcc126ee438b94fd578068726e11
# 04bec24ee8ee4fbc89a6cc774bb3b239
msgid "``test_labels`` is a list of strings describing the tests to be run. A test label can take one of three forms:"
msgstr ""

#: ../../topics/testing/advanced.txt:273
#: ../../topics/testing/advanced.txt:298
# a1565b1ad438481cb040fac61b30e6fa
# 179f68bf685648a8998039ee4a110f85
msgid "``app.TestCase.test_method`` -- Run a single test method in a test case."
msgstr ""

#: ../../topics/testing/advanced.txt:275
#: ../../topics/testing/advanced.txt:300
# 6134b7a21ce14ada8b78462b531cff62
# 9e323386380d4b3c93fbf98fef8649fb
msgid "``app.TestCase`` -- Run all the test methods in a test case."
msgstr ""

#: ../../topics/testing/advanced.txt:276
#: ../../topics/testing/advanced.txt:301
# 9aaaf836802342f4a246386674645cda
# daa55dddab714363bfd60c33032c180e
msgid "``app`` -- Search for and run all tests in the named application."
msgstr ""

#: ../../topics/testing/advanced.txt:278
#: ../../topics/testing/advanced.txt:303
# 5ae23ea036034db0a9ccde54760b75bf
# 936089cec23f49d6baa333582cd87326
msgid "If ``test_labels`` has a value of ``None``, the test runner should run search for tests in all the applications in :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../topics/testing/advanced.txt:281
#: ../../topics/testing/advanced.txt:306
# 6524d58275374906b5b1368cfe14937f
# d1e6d63d41de48adbfb801d01e63275e
msgid "``extra_tests`` is a list of extra ``TestCase`` instances to add to the suite that is executed by the test runner. These extra tests are run in addition to those discovered in the modules listed in ``test_labels``."
msgstr ""

#: ../../topics/testing/advanced.txt:285
# 5ea8dae2ed0f465babb8eb19da968731
msgid "This method should return the number of tests that failed."
msgstr ""

#: ../../topics/testing/advanced.txt:289
# ab6b8cc6c1fd4103a1b1f5d7b4c7d196
msgid "Sets up the test environment ready for testing."
msgstr ""

#: ../../topics/testing/advanced.txt:293
# fcbb84c17f294e9d928cde24a41d4657
msgid "Constructs a test suite that matches the test labels provided."
msgstr ""

#: ../../topics/testing/advanced.txt:310
# 82c3721a54af44a89a691dfffac0907e
msgid "Returns a ``TestSuite`` instance ready to be run."
msgstr ""

#: ../../topics/testing/advanced.txt:314
# 8a3b0a7539394f55bad60e5813b02130
msgid "Creates the test databases."
msgstr ""

#: ../../topics/testing/advanced.txt:316
# bcec68c3426942b5a117f3d44de5e23a
msgid "Returns a data structure that provides enough detail to undo the changes that have been made. This data will be provided to the ``teardown_databases()`` function at the conclusion of testing."
msgstr ""

#: ../../topics/testing/advanced.txt:322
# b758dc57f397435fb45f9473763dd73d
msgid "Runs the test suite."
msgstr ""

#: ../../topics/testing/advanced.txt:324
# 93828a05157245c2a8bde3093f551cc1
msgid "Returns the result produced by the running the test suite."
msgstr ""

#: ../../topics/testing/advanced.txt:328
# 46a30da3090d42df95248a11f9ba1376
msgid "Destroys the test databases, restoring pre-test conditions."
msgstr ""

#: ../../topics/testing/advanced.txt:330
# 66ab92c23d564174a78c9cdb5bab2aa0
msgid "``old_config`` is a data structure defining the changes in the database configuration that need to be reversed. It is the return value of the ``setup_databases()`` method."
msgstr ""

#: ../../topics/testing/advanced.txt:336
# 6219435c82824031bbf011203969810e
msgid "Restores the pre-test environment."
msgstr ""

#: ../../topics/testing/advanced.txt:340
# 52fe6f84bc9140a08a2fbc87db7d35af
msgid "Computes and returns a return code based on a test suite, and the result from that test suite."
msgstr ""

#: ../../topics/testing/advanced.txt:345
# 1aa0bce09b0c4135b96c38c9a1e5c878
msgid "Testing utilities"
msgstr ""

#: ../../topics/testing/advanced.txt:350
# 84d73cb141bd4fadaa88666020b37bca
msgid "To assist in the creation of your own test runner, Django provides a number of utility methods in the ``django.test.utils`` module."
msgstr ""

#: ../../topics/testing/advanced.txt:355
# 5659059a593d42439fb9b7efef97f067
msgid "Performs any global pre-test setup, such as the installing the instrumentation of the template rendering system and setting up the dummy email outbox."
msgstr ""

#: ../../topics/testing/advanced.txt:361
# 0f0d8023832c4973b638ff8bb35cbc11
msgid "Performs any global post-test teardown, such as removing the black magic hooks into the template system and restoring normal email services."
msgstr ""

#: ../../topics/testing/advanced.txt:367
# db42eebb3eef4221ad30e9a8f2b10714
msgid "The creation module of the database backend (``connection.creation``) also provides some utilities that can be useful during testing."
msgstr ""

#: ../../topics/testing/advanced.txt:372
# bde57af2ecdd4a5189672bb022dcb0bc
msgid "Creates a new test database and runs ``syncdb`` against it."
msgstr ""

#: ../../topics/testing/advanced.txt:374
# 374538ebaada42a8b213bff92bdc1bb2
msgid "``verbosity`` has the same behavior as in ``run_tests()``."
msgstr ""

#: ../../topics/testing/advanced.txt:376
# a5fa01469353414c81e26b81a6255078
msgid "``autoclobber`` describes the behavior that will occur if a database with the same name as the test database is discovered:"
msgstr ""

#: ../../topics/testing/advanced.txt:379
# 114dfe8aa9014b219afa9c909304b438
msgid "If ``autoclobber`` is ``False``, the user will be asked to approve destroying the existing database. ``sys.exit`` is called if the user does not approve."
msgstr ""

#: ../../topics/testing/advanced.txt:383
# 0eedd9cb0d50438ca79b3b5a1df9a5a4
msgid "If autoclobber is ``True``, the database will be destroyed without consulting the user."
msgstr ""

#: ../../topics/testing/advanced.txt:386
# b7baacd3dbec42e28da94150391442bd
msgid "Returns the name of the test database that it created."
msgstr ""

#: ../../topics/testing/advanced.txt:388
# 4dab96739b1c4f74acb5c7f132a11de4
msgid "``create_test_db()`` has the side effect of modifying the value of :setting:`NAME` in :setting:`DATABASES` to match the name of the test database."
msgstr ""

#: ../../topics/testing/advanced.txt:394
# debacab696b04ac9b63c20b87e08c969
msgid "Destroys the database whose name is the value of :setting:`NAME` in :setting:`DATABASES`, and sets :setting:`NAME` to the value of ``old_database_name``."
msgstr ""

#: ../../topics/testing/advanced.txt:398
# 9c0d5e7259fb4bfbae71639669d0d09d
msgid "The ``verbosity`` argument has the same behavior as for :class:`~django.test.simple.DjangoTestSuiteRunner`."
msgstr ""

#: ../../topics/testing/advanced.txt:404
# 1ad2d5630a3a4cb094611d47587dd078
msgid "Integration with coverage.py"
msgstr ""

#: ../../topics/testing/advanced.txt:406
# 965f7fc4b08f4781af287e2162a1713d
msgid "Code coverage describes how much source code has been tested. It shows which parts of your code are being exercised by tests and which are not. It's an important part of testing applications, so it's strongly recommended to check the coverage of your tests."
msgstr ""

#: ../../topics/testing/advanced.txt:411
# e17db47e8b1943388e29fe819eed0e07
msgid "Django can be easily integrated with `coverage.py`_, a tool for measuring code coverage of Python programs. First, `install coverage.py`_. Next, run the following from your project folder containing ``manage.py``::"
msgstr ""

#: ../../topics/testing/advanced.txt:417
# 73e46d4d0fc7439689d1497b1cc25d05
msgid "This runs your tests and collects coverage data of the executed files in your project. You can see a report of this data by typing following command::"
msgstr ""

#: ../../topics/testing/advanced.txt:422
# c27abe660a1d4c569801cdd3661835ee
msgid "Note that some Django code was executed while running tests, but it is not listed here because of the ``source`` flag passed to the previous command."
msgstr ""

#: ../../topics/testing/advanced.txt:425
# eda14cceca4546c0bb38282562ebca41
msgid "For more options like annotated HTML listings detailing missed lines, see the `coverage.py`_ docs."
msgstr ""

#: ../../topics/testing/doctests.txt:3
# 449e204718314b7b95cc38c996e81143
msgid "Django and doctests"
msgstr ""

#: ../../topics/testing/doctests.txt:5
# ec9e3a0e699840039111d90158bef771
msgid "Doctests use Python's standard :mod:`doctest` module, which searches your docstrings for statements that resemble a session of the Python interactive interpreter. A full explanation of how :mod:`doctest` works is out of the scope of this document; read Python's official documentation for the details."
msgstr ""

#: ../../topics/testing/doctests.txt:12
# 1a9006c43ceb4eab9c3f65aeef6390a3
msgid "A good explanation of docstrings (and some guidelines for using them effectively) can be found in :pep:`257`:"
msgstr ""

#: ../../topics/testing/doctests.txt:15
# 45af55ee4fb5407caff20d7370574d71
msgid "A docstring is a string literal that occurs as the first statement in a module, function, class, or method definition.  Such a docstring becomes the ``__doc__`` special attribute of that object."
msgstr ""

#: ../../topics/testing/doctests.txt:19
# 1f111696b2ae4c109323eb6dec4e6a4d
msgid "For example, this function has a docstring that describes what it does::"
msgstr ""

#: ../../topics/testing/doctests.txt:25
# 44e794974f5c4d82bb0a50841f9ecdcc
msgid "Because tests often make great documentation, putting tests directly in your docstrings is an effective way to document *and* test your code."
msgstr ""

#: ../../topics/testing/doctests.txt:28
# eb584031ea9c473591a41d06eee5459c
msgid "As with unit tests, for a given Django application, the test runner looks for doctests in two places:"
msgstr ""

#: ../../topics/testing/doctests.txt:31
# d68038a0db404f508a90611acb9695ee
msgid "The ``models.py`` file. You can define module-level doctests and/or a doctest for individual models. It's common practice to put application-level doctests in the module docstring and model-level doctests in the model docstrings."
msgstr ""

#: ../../topics/testing/doctests.txt:36
# a51f07721edb400d9b026ebfa8ef0e7a
msgid "A file called ``tests.py`` in the application directory -- i.e., the directory that holds ``models.py``. This file is a hook for any and all doctests you want to write that aren't necessarily related to models."
msgstr ""

#: ../../topics/testing/doctests.txt:40
# 6790a736ba374c96b3a9acd3c44b1847
msgid "This example doctest is equivalent to the example given in the unittest section above::"
msgstr ""

#: ../../topics/testing/doctests.txt:67
# 090a0187a9e144e5a06cc636d208e078
msgid "When you :ref:`run your tests <running-tests>`, the test runner will find this docstring, notice that portions of it look like an interactive Python session, and execute those lines while checking that the results match."
msgstr ""

#: ../../topics/testing/doctests.txt:71
# 70f9ccaec64d443bb3c0f30a7284be98
msgid "In the case of model tests, note that the test runner takes care of creating its own test database. That is, any test that accesses a database -- by creating and saving model instances, for example -- will not affect your production database. However, the database is not refreshed between doctests, so if your doctest requires a certain state you should consider flushing the database or loading a fixture. (See the section on :ref:`fixtures <topics-testing-fixtures>` for more on this.) Note that to use this feature, the database user Django is connecting as must have ``CREATE DATABASE`` rights."
msgstr ""

#: ../../topics/testing/doctests.txt:81
# 2cf8e07cda7c40eea269ee53ea5471cc
msgid "For more details about :mod:`doctest`, see the Python documentation."
msgstr ""

#: ../../topics/testing/index.txt:3
# f53ca91a707445daa2a8b6ec7af184a9
msgid "Testing in Django"
msgstr ""

#: ../../topics/testing/index.txt:12
# 0dd702ab2f984f06a07a1004d3ac184b
msgid "Automated testing is an extremely useful bug-killing tool for the modern Web developer. You can use a collection of tests -- a **test suite** -- to solve, or avoid, a number of problems:"
msgstr ""

#: ../../topics/testing/index.txt:16
# e87dcc4ca004423fb92f34ce5bf15a23
msgid "When you're writing new code, you can use tests to validate your code works as expected."
msgstr ""

#: ../../topics/testing/index.txt:19
# 31b19f0a051c450794ef4b3bac6b349d
msgid "When you're refactoring or modifying old code, you can use tests to ensure your changes haven't affected your application's behavior unexpectedly."
msgstr ""

#: ../../topics/testing/index.txt:23
# 481cd12e16bc42f09a1c17c7f68269d5
msgid "Testing a Web application is a complex task, because a Web application is made of several layers of logic -- from HTTP-level request handling, to form validation and processing, to template rendering. With Django's test-execution framework and assorted utilities, you can simulate requests, insert test data, inspect your application's output and generally verify your code is doing what it should be doing."
msgstr ""

#: ../../topics/testing/index.txt:30
# 1d927dd0dc704e3f81bd63726ed235e2
msgid "The best part is, it's really easy."
msgstr ""

#: ../../topics/testing/index.txt:33
# e59fb76b241942ebb46299d9f6491fd7
msgid "Unit tests v. doctests"
msgstr ""

#: ../../topics/testing/index.txt:35
# 988418a2abf342439536f4e727b8fe75
msgid "There are two primary ways to write tests with Django, corresponding to the two test frameworks that ship in the Python standard library. The two frameworks are:"
msgstr ""

#: ../../topics/testing/index.txt:39
# bd8063d4532040b4b62ed84376cb29bf
msgid "**Unit tests** -- tests that are expressed as methods on a Python class that subclasses :class:`unittest.TestCase` or Django's customized :class:`~django.test.TestCase`. For example::"
msgstr ""

#: ../../topics/testing/index.txt:51
# 5dc2bb3c558f4d76a4c872b91e02e1d7
msgid "**Doctests** -- tests that are embedded in your functions' docstrings and are written in a way that emulates a session of the Python interactive interpreter. For example::"
msgstr ""

#: ../../topics/testing/index.txt:66
# b53ee591e9c548e69542b047a5a508eb
msgid "Which should I use?"
msgstr ""

#: ../../topics/testing/index.txt:68
# f3a3df7368ff4bd4b161c20025d2bccc
msgid "Because Django supports both of the standard Python test frameworks, it's up to you and your tastes to decide which one to use. You can even decide to use *both*."
msgstr ""

#: ../../topics/testing/index.txt:72
# b55d2804c06f4f6ca9550f4769ab8c29
msgid "For developers new to testing, however, this choice can seem confusing. Here, then, are a few key differences to help you decide which approach is right for you:"
msgstr ""

#: ../../topics/testing/index.txt:76
# 4faadc09ea6d4dc9835eeb98a44c92b8
msgid "If you've been using Python for a while, :mod:`doctest` will probably feel more \"pythonic\". It's designed to make writing tests as easy as possible, so it requires no overhead of writing classes or methods. You simply put tests in docstrings. This has the added advantage of serving as documentation (and correct documentation, at that!). However, while doctests are good for some simple example code, they are not very good if you want to produce either high quality, comprehensive tests or high quality documentation. Test failures are often difficult to debug as it can be unclear exactly why the test failed. Thus, doctests should generally be avoided and used primarily for documentation examples only."
msgstr ""

#: ../../topics/testing/index.txt:87
# bcf6d0badfa74a918c73321225509578
msgid "The :mod:`unittest` framework will probably feel very familiar to developers coming from Java. :mod:`unittest` is inspired by Java's JUnit, so you'll feel at home with this method if you've used JUnit or any test framework inspired by JUnit."
msgstr ""

#: ../../topics/testing/index.txt:92
# 56988532cd3f44cfbd37b48667e38e9b
msgid "If you need to write a bunch of tests that share similar code, then you'll appreciate the :mod:`unittest` framework's organization around classes and methods. This makes it easy to abstract common tasks into common methods. The framework also supports explicit setup and/or cleanup routines, which give you a high level of control over the environment in which your test cases are run."
msgstr ""

#: ../../topics/testing/index.txt:99
# 2e4806b544954c38a8489abc52785019
msgid "If you're writing tests for Django itself, you should use :mod:`unittest`."
msgstr ""

#: ../../topics/testing/index.txt:102
# 537192d927cc455784f13cfd62c5831d
msgid "Where to go from here"
msgstr ""

#: ../../topics/testing/index.txt:104
# 164be85c111543ddb79a5c0f7e374f9d
msgid "As unit tests are preferred in Django, we treat them in detail in the :doc:`overview` document."
msgstr ""

#: ../../topics/testing/index.txt:107
# a7a8f43cd7a4423ca70307f9bb3acb6c
msgid ":doc:`doctests` describes Django-specific features when using doctests."
msgstr ""

#: ../../topics/testing/index.txt:109
# b58caaf992b843b9b809277422aa0953
msgid "You can also use any *other* Python test framework, Django provides an API and tools for that kind of integration. They are described in the :ref:`other-testing-frameworks` section of :doc:`advanced`."
msgstr ""

#: ../../topics/testing/overview.txt:3
# 446ce65d638146ca8c1f791e86f7bf8e
msgid "Testing Django applications"
msgstr ""

#: ../../topics/testing/overview.txt:10
# 4c07e6c8009c4ac6a79472d27b917e99
msgid "The :doc:`testing tutorial </intro/tutorial05>` and the :doc:`advanced testing topics </topics/testing/advanced>`."
msgstr ""

#: ../../topics/testing/overview.txt:13
# 12dc810875c542df85e6c997af747c4e
msgid "This document is split into two primary sections. First, we explain how to write tests with Django. Then, we explain how to run them."
msgstr ""

#: ../../topics/testing/overview.txt:17
# 644de83d52664c3f97d5e1d2602ae24f
msgid "Writing tests"
msgstr ""

#: ../../topics/testing/overview.txt:19
# ec2f42c9dd954bae84b1346b285d87c4
msgid "Django's unit tests use a Python standard library module: :mod:`unittest`. This module defines tests in class-based approach."
msgstr ""

#: ../../topics/testing/overview.txt:24
# fbe585103a8443a69a95a2297034fa1a
msgid "Python 2.7 introduced some major changes to the unittest library, adding some extremely useful features. To ensure that every Django project can benefit from these new features, Django ships with a copy of unittest2_, a copy of the Python 2.7 unittest library, backported for Python 2.5 compatibility."
msgstr ""

#: ../../topics/testing/overview.txt:30
# 022a8c0053264185935548e10414b0af
msgid "To access this library, Django provides the ``django.utils.unittest`` module alias. If you are using Python 2.7, or you have installed unittest2 locally, Django will map the alias to the installed version of the unittest library. Otherwise, Django will use its own bundled version of unittest2."
msgstr ""

#: ../../topics/testing/overview.txt:36
# 905e0c25ce3446999ac361721f5910be
msgid "To use this alias, simply use::"
msgstr ""

#: ../../topics/testing/overview.txt:40
# dc00d035510648a4abe5b35a06878dfd
msgid "wherever you would have historically used::"
msgstr ""

#: ../../topics/testing/overview.txt:44
# 6dfa932999dd485b83d9a5fec6a85602
msgid "If you want to continue to use the base unittest library, you can -- you just won't get any of the nice new unittest2 features."
msgstr ""

#: ../../topics/testing/overview.txt:49
# 79f45d1e0cda40fca99b5977ecd08ecd
msgid "For a given Django application, the test runner looks for unit tests in two places:"
msgstr ""

#: ../../topics/testing/overview.txt:52
# 55542158485b4981ae59b900b324dc8b
msgid "The ``models.py`` file. The test runner looks for any subclass of :class:`unittest.TestCase` in this module."
msgstr ""

#: ../../topics/testing/overview.txt:55
# 68be9c2617424c29a45484abcba35ab9
msgid "A file called ``tests.py`` in the application directory -- i.e., the directory that holds ``models.py``. Again, the test runner looks for any subclass of :class:`unittest.TestCase` in this module."
msgstr ""

#: ../../topics/testing/overview.txt:59
# d31d63d036194d0684586384b2e2419d
msgid "Here is an example :class:`unittest.TestCase` subclass::"
msgstr ""

#: ../../topics/testing/overview.txt:74
# 1dfb63bc3f2d4bff8a2a714adc247b2d
msgid "When you :ref:`run your tests <running-tests>`, the default behavior of the test utility is to find all the test cases (that is, subclasses of :class:`unittest.TestCase`) in ``models.py`` and ``tests.py``, automatically build a test suite out of those test cases, and run that suite."
msgstr ""

#: ../../topics/testing/overview.txt:79
# e7d9a6f2b58c41b882b2b302f3eb1fb2
msgid "There is a second way to define the test suite for a module: if you define a function called ``suite()`` in either ``models.py`` or ``tests.py``, the Django test runner will use that function to construct the test suite for that module. This follows the `suggested organization`_ for unit tests. See the Python documentation for more details on how to construct a complex test suite."
msgstr ""

#: ../../topics/testing/overview.txt:86
# e1c2f9ef35884275b9a28143da3b98ab
msgid "For more details about :mod:`unittest`, see the Python documentation."
msgstr ""

#: ../../topics/testing/overview.txt:92
# c9e25017217a45ae968aea4b389bf2b8
msgid "If your tests rely on database access such as creating or querying models, be sure to create your test classes as subclasses of :class:`django.test.TestCase` rather than :class:`unittest.TestCase`."
msgstr ""

#: ../../topics/testing/overview.txt:96
# df643673657348908822e05ae432bf1b
msgid "In the example above, we instantiate some models but do not save them to the database. Using :class:`unittest.TestCase` avoids the cost of running each test in a transaction and flushing the database, but for most applications the scope of tests you will be able to write this way will be fairly limited, so it's easiest to use :class:`django.test.TestCase`."
msgstr ""

#: ../../topics/testing/overview.txt:105
# 5c393fd65def43599dfd1b0266e02438
msgid "Running tests"
msgstr ""

#: ../../topics/testing/overview.txt:107
# 7195a59add61494ba8325b392e2e1473
msgid "Once you've written tests, run them using the :djadmin:`test` command of your project's ``manage.py`` utility::"
msgstr ""

#: ../../topics/testing/overview.txt:112
# f105ed7a7182412d8400130f5d76f0cb
msgid "By default, this will run every test in every application in :setting:`INSTALLED_APPS`. If you only want to run tests for a particular application, add the application name to the command line. For example, if your :setting:`INSTALLED_APPS` contains ``'myproject.polls'`` and ``'myproject.animals'``, you can run the ``myproject.animals`` unit tests alone with this command::"
msgstr ""

#: ../../topics/testing/overview.txt:121
# 5d5b6824230f4e2c92990e7e364b3111
msgid "Note that we used ``animals``, not ``myproject.animals``."
msgstr ""

#: ../../topics/testing/overview.txt:123
# 61ace62125654314964803fbedccc8b7
msgid "You can be even *more* specific by naming an individual test case. To run a single test case in an application (for example, the ``AnimalTestCase`` described in the \"Writing unit tests\" section), add the name of the test case to the label on the command line::"
msgstr ""

#: ../../topics/testing/overview.txt:130
# 24a7fab6f9854c2f83fafe6d0a3c4d6c
msgid "And it gets even more granular than that! To run a *single* test method inside a test case, add the name of the test method to the label::"
msgstr ""

#: ../../topics/testing/overview.txt:136
# 0ba852e15f76485db6a9a182e8c5dcc8
msgid "You can use the same rules if you're using doctests. Django will use the test label as a path to the test method or class that you want to run. If your ``models.py`` or ``tests.py`` has a function with a doctest, or class with a class-level doctest, you can invoke that test by appending the name of the test method or class to the label::"
msgstr ""

#: ../../topics/testing/overview.txt:144
# a6548579f038482fbf3cb6eea063089a
msgid "If you want to run the doctest for a specific method in a class, add the name of the method to the label::"
msgstr ""

#: ../../topics/testing/overview.txt:149
# 21b3b876299e41fdbbc2fd497bcd6f09
msgid "If you're using a ``__test__`` dictionary to specify doctests for a module, Django will use the label as a key in the ``__test__`` dictionary for defined in ``models.py`` and ``tests.py``."
msgstr ""

#: ../../topics/testing/overview.txt:153
# 2adfa43652b74ec7928d7ab103270029
msgid "If you press ``Ctrl-C`` while the tests are running, the test runner will wait for the currently running test to complete and then exit gracefully. During a graceful exit the test runner will output details of any test failures, report on how many tests were run and how many errors and failures were encountered, and destroy any test databases as usual. Thus pressing ``Ctrl-C`` can be very useful if you forget to pass the :djadminopt:`--failfast` option, notice that some tests are unexpectedly failing, and want to get details on the failures without waiting for the full test run to complete."
msgstr ""

#: ../../topics/testing/overview.txt:162
# d11d721db0ad4844b0e5cada6aa34704
msgid "If you do not want to wait for the currently running test to finish, you can press ``Ctrl-C`` a second time and the test run will halt immediately, but not gracefully. No details of the tests run before the interruption will be reported, and any test databases created by the run will not be destroyed."
msgstr ""

#: ../../topics/testing/overview.txt:169
# 42494a2610c449d790ff0a8634e4f00f
msgid "It's a good idea to run your tests with Python warnings enabled: ``python -Wall manage.py test``. The ``-Wall`` flag tells Python to display deprecation warnings. Django, like many other Python libraries, uses these warnings to flag when features are going away. It also might flag areas in your code that aren't strictly wrong but could benefit from a better implementation."
msgstr ""

#: ../../topics/testing/overview.txt:179
# ca943dd1d6de4d3c90e5ae3d4460dd60
msgid "The test database"
msgstr ""

#: ../../topics/testing/overview.txt:181
# d2df9da7af0c49af8d50f8d9f55131e0
msgid "Tests that require a database (namely, model tests) will not use your \"real\" (production) database. Separate, blank databases are created for the tests."
msgstr ""

#: ../../topics/testing/overview.txt:184
# 4e355b65a2b141b1a8b6eef6d087ab54
msgid "Regardless of whether the tests pass or fail, the test databases are destroyed when all the tests have been executed."
msgstr ""

#: ../../topics/testing/overview.txt:187
# 41e624223b604f9e91eaeb789771d8db
msgid "By default the test databases get their names by prepending ``test_`` to the value of the :setting:`NAME` settings for the databases defined in :setting:`DATABASES`. When using the SQLite database engine the tests will by default use an in-memory database (i.e., the database will be created in memory, bypassing the filesystem entirely!). If you want to use a different database name, specify :setting:`TEST_NAME` in the dictionary for any given database in :setting:`DATABASES`."
msgstr ""

#: ../../topics/testing/overview.txt:196
# 4730dc58b2334a7a9dcc1898f5179f62
msgid "Aside from using a separate database, the test runner will otherwise use all of the same database settings you have in your settings file: :setting:`ENGINE <DATABASE-ENGINE>`, :setting:`USER`, :setting:`HOST`, etc. The test database is created by the user specified by :setting:`USER`, so you'll need to make sure that the given user account has sufficient privileges to create a new database on the system."
msgstr ""

#: ../../topics/testing/overview.txt:203
# 1088f7db50ca4926a3bbd05c3146b058
msgid "For fine-grained control over the character encoding of your test database, use the :setting:`TEST_CHARSET` option. If you're using MySQL, you can also use the :setting:`TEST_COLLATION` option to control the particular collation used by the test database. See the :doc:`settings documentation </ref/settings>` for details of these advanced settings."
msgstr ""

#: ../../topics/testing/overview.txt:212
# bbb76d739ca448388ff0ed6502d5c0e9
msgid "If your code attempts to access the database when its modules are compiled, this will occur *before* the test database is set up, with potentially unexpected results. For example, if you have a database query in module-level code and a real database exists, production data could pollute your tests. *It is a bad idea to have such import-time database queries in your code* anyway - rewrite your code so that it doesn't do this."
msgstr ""

#: ../../topics/testing/overview.txt:221
# 9c1e2583522a40459042e62b06b051b5
msgid "The :ref:`advanced multi-db testing topics <topics-testing-advanced-multidb>`."
msgstr ""

#: ../../topics/testing/overview.txt:224
# 393e81fd70d344be9560733fbd1ffce5
msgid "Order in which tests are executed"
msgstr ""

#: ../../topics/testing/overview.txt:226
# d55bc56ba71c49fb85ac3289efb18800
msgid "In order to guarantee that all ``TestCase`` code starts with a clean database, the Django test runner reorders tests in the following way:"
msgstr ""

#: ../../topics/testing/overview.txt:229
# a3947992407a4f8cb6d5576d8e6326aa
msgid "First, all unittests (including :class:`unittest.TestCase`, :class:`~django.test.SimpleTestCase`, :class:`~django.test.TestCase` and :class:`~django.test.TransactionTestCase`) are run with no particular ordering guaranteed nor enforced among them."
msgstr ""

#: ../../topics/testing/overview.txt:234
# e98ffd47e85a41aba3fdfdfed311f5b3
msgid "Then any other tests (e.g. doctests) that may alter the database without restoring it to its original state are run."
msgstr ""

#: ../../topics/testing/overview.txt:244
# e202d1afdf0743d1856c1167bc2b70f7
msgid "The new ordering of tests may reveal unexpected dependencies on test case ordering. This is the case with doctests that relied on state left in the database by a given :class:`~django.test.TransactionTestCase` test, they must be updated to be able to run independently."
msgstr ""

#: ../../topics/testing/overview.txt:250
# 7dc844ef13ab4670a30153bdc9f3e8ae
msgid "Other test conditions"
msgstr ""

#: ../../topics/testing/overview.txt:252
# 6172bae50d1745c09c480e53cd8dbd15
msgid "Regardless of the value of the :setting:`DEBUG` setting in your configuration file, all Django tests run with :setting:`DEBUG`\\=False. This is to ensure that the observed output of your code matches what will be seen in a production setting."
msgstr ""

#: ../../topics/testing/overview.txt:257
# 4bd220968965406486a8181b04bc6387
msgid "Caches are not cleared after each test, and running \"manage.py test fooapp\" can insert data from the tests into the cache of a live system if you run your tests in production because, unlike databases, a separate \"test cache\" is not used. This behavior `may change`_ in the future."
msgstr ""

#: ../../topics/testing/overview.txt:265
# 33476ffb20ed4ac896962fb80d55a296
msgid "Understanding the test output"
msgstr ""

#: ../../topics/testing/overview.txt:267
# fcf3a1ba047143a78575e9aab5c4ddb5
msgid "When you run your tests, you'll see a number of messages as the test runner prepares itself. You can control the level of detail of these messages with the ``verbosity`` option on the command line::"
msgstr ""

#: ../../topics/testing/overview.txt:277
# bb836c01a0e94f2ebf2e0ac069966d31
msgid "This tells you that the test runner is creating a test database, as described in the previous section."
msgstr ""

#: ../../topics/testing/overview.txt:280
# 8839d3139db34851965a02b82f5a3f41
msgid "Once the test database has been created, Django will run your tests. If everything goes well, you'll see something like this::"
msgstr ""

#: ../../topics/testing/overview.txt:288
# 70847326aefc4be9a96a746e1e3d09e1
msgid "If there are test failures, however, you'll see full details about which tests failed::"
msgstr ""

#: ../../topics/testing/overview.txt:314
# cd833323d2b04bbb865d894f0e4dac98
msgid "A full explanation of this error output is beyond the scope of this document, but it's pretty intuitive. You can consult the documentation of Python's :mod:`unittest` library for details."
msgstr ""

#: ../../topics/testing/overview.txt:318
# 0b2152a350014ef7b44c622e60f32184
msgid "Note that the return code for the test-runner script is 1 for any number of failed and erroneous tests. If all the tests pass, the return code is 0. This feature is useful if you're using the test-runner script in a shell script and need to test for success or failure at that level."
msgstr ""

#: ../../topics/testing/overview.txt:324
# febfbdc5f526436788176d72d9affc3d
msgid "Speeding up the tests"
msgstr ""

#: ../../topics/testing/overview.txt:326
# aa659f5ceb1f48d98262000d18c548e9
msgid "In recent versions of Django, the default password hasher is rather slow by design. If during your tests you are authenticating many users, you may want to use a custom settings file and set the :setting:`PASSWORD_HASHERS` setting to a faster hashing algorithm::"
msgstr ""

#: ../../topics/testing/overview.txt:335
# f6b29019c9e94ca88f2670a57487681b
msgid "Don't forget to also include in :setting:`PASSWORD_HASHERS` any hashing algorithm used in fixtures, if any."
msgstr ""

#: ../../topics/testing/overview.txt:339
# 5ae0db061c0a45eeab81ec3e774d40cd
msgid "Testing tools"
msgstr ""

#: ../../topics/testing/overview.txt:341
# 0201aacd67c44e54862941a38d5e76bc
msgid "Django provides a small set of tools that come in handy when writing tests."
msgstr ""

#: ../../topics/testing/overview.txt:346
# b924860719c14b4b942a1eca50aade71
msgid "The test client"
msgstr ""

#: ../../topics/testing/overview.txt:351
# 7276c46a59964232b41e5b884b26134e
msgid "The test client is a Python class that acts as a dummy Web browser, allowing you to test your views and interact with your Django-powered application programmatically."
msgstr ""

#: ../../topics/testing/overview.txt:355
# 8c1b4aafe3214887aae616eb671d3a91
msgid "Some of the things you can do with the test client are:"
msgstr ""

#: ../../topics/testing/overview.txt:357
# 264ca98f121640a4900823faac40bc20
msgid "Simulate GET and POST requests on a URL and observe the response -- everything from low-level HTTP (result headers and status codes) to page content."
msgstr ""

#: ../../topics/testing/overview.txt:361
# f8715b27e03b481cacdd538b242a45ba
msgid "Test that the correct view is executed for a given URL."
msgstr ""

#: ../../topics/testing/overview.txt:363
# ed64fdbfdd384673b3ee4471ae6e96ae
msgid "Test that a given request is rendered by a given Django template, with a template context that contains certain values."
msgstr ""

#: ../../topics/testing/overview.txt:366
# e95955353098488cac352f25961c95f2
msgid "Note that the test client is not intended to be a replacement for Selenium_ or other \"in-browser\" frameworks. Django's test client has a different focus. In short:"
msgstr ""

#: ../../topics/testing/overview.txt:370
# d6180e0ca43c4f4d91cd1cb9d5b0ef28
msgid "Use Django's test client to establish that the correct view is being called and that the view is collecting the correct context data."
msgstr ""

#: ../../topics/testing/overview.txt:373
# 3d2055890dcd4a33be270aeee5890167
msgid "Use in-browser frameworks like Selenium_ to test *rendered* HTML and the *behavior* of Web pages, namely JavaScript functionality. Django also provides special support for those frameworks; see the section on :class:`~django.test.LiveServerTestCase` for more details."
msgstr ""

#: ../../topics/testing/overview.txt:378
# f8ccbc8203c5491183ba81e2d639fd67
msgid "A comprehensive test suite should use a combination of both test types."
msgstr ""

#: ../../topics/testing/overview.txt:381
# acd094fb12654a5ca0054c2ad58da985
msgid "Overview and a quick example"
msgstr ""

#: ../../topics/testing/overview.txt:383
# 83b8c3a87a444dd195c7d5122e490415
msgid "To use the test client, instantiate ``django.test.client.Client`` and retrieve Web pages::"
msgstr ""

#: ../../topics/testing/overview.txt:395
# c702c8dacb89473caf4868f59d4b1f3f
msgid "As this example suggests, you can instantiate ``Client`` from within a session of the Python interactive interpreter."
msgstr ""

#: ../../topics/testing/overview.txt:398
# 02993c0510544a0e951bd8463603d370
msgid "Note a few important things about how the test client works:"
msgstr ""

#: ../../topics/testing/overview.txt:400
# b3bea98072324badbde341fe7349934b
msgid "The test client does *not* require the Web server to be running. In fact, it will run just fine with no Web server running at all! That's because it avoids the overhead of HTTP and deals directly with the Django framework. This helps make the unit tests run quickly."
msgstr ""

#: ../../topics/testing/overview.txt:405
# 8b3fa7db0e654884848a045613c7377a
msgid "When retrieving pages, remember to specify the *path* of the URL, not the whole domain. For example, this is correct::"
msgstr ""

#: ../../topics/testing/overview.txt:410
# d982ab2c24ea4d719898dd57cf7f8f94
msgid "This is incorrect::"
msgstr ""

#: ../../topics/testing/overview.txt:414
# eb1765eb21ac4502a33352aa1b07127d
msgid "The test client is not capable of retrieving Web pages that are not powered by your Django project. If you need to retrieve other Web pages, use a Python standard library module such as :mod:`urllib` or :mod:`urllib2`."
msgstr ""

#: ../../topics/testing/overview.txt:419
# d2c053b8720448988e2a1e115001c2dd
msgid "To resolve URLs, the test client uses whatever URLconf is pointed-to by your :setting:`ROOT_URLCONF` setting."
msgstr ""

#: ../../topics/testing/overview.txt:422
# 37529cc6af664c4f8a738a093493e2e2
msgid "Although the above example would work in the Python interactive interpreter, some of the test client's functionality, notably the template-related functionality, is only available *while tests are running*."
msgstr ""

#: ../../topics/testing/overview.txt:427
# 518183ea4fec4460afb42ec0a942ebdb
msgid "The reason for this is that Django's test runner performs a bit of black magic in order to determine which template was loaded by a given view. This black magic (essentially a patching of Django's template system in memory) only happens during test running."
msgstr ""

#: ../../topics/testing/overview.txt:432
# 8c35284182ff46d083e6ba49306d3e8b
msgid "By default, the test client will disable any CSRF checks performed by your site."
msgstr ""

#: ../../topics/testing/overview.txt:435
# 770f49825d4a4476aa2af2ca773c7da6
msgid "If, for some reason, you *want* the test client to perform CSRF checks, you can create an instance of the test client that enforces CSRF checks. To do this, pass in the ``enforce_csrf_checks`` argument when you construct your client::"
msgstr ""

#: ../../topics/testing/overview.txt:445
# 5eb32f88e79a4bf1b74ef9f1d035057e
msgid "Making requests"
msgstr ""

#: ../../topics/testing/overview.txt:447
# be936c9e344a401283d106462690ab17
msgid "Use the ``django.test.client.Client`` class to make requests."
msgstr ""

#: ../../topics/testing/overview.txt:451
# ae3d57aa5dd14cd3b2a2b7e85c291190
msgid "It requires no arguments at time of construction. However, you can use keywords arguments to specify some default headers. For example, this will send a ``User-Agent`` HTTP header in each request::"
msgstr ""

#: ../../topics/testing/overview.txt:457
# d80534aa8c374d839d135bbc2109d44b
msgid "The values from the ``extra`` keywords arguments passed to :meth:`~django.test.client.Client.get()`, :meth:`~django.test.client.Client.post()`, etc. have precedence over the defaults passed to the class constructor."
msgstr ""

#: ../../topics/testing/overview.txt:462
# 5d6c87cc0b9b4fa98029e3ccc934c0f6
msgid "The ``enforce_csrf_checks`` argument can be used to test CSRF protection (see above)."
msgstr ""

#: ../../topics/testing/overview.txt:465
# 289786e95f2a47d29f76ed570d215965
msgid "Once you have a ``Client`` instance, you can call any of the following methods:"
msgstr ""

#: ../../topics/testing/overview.txt:471
# 67672f47b2df43e1bd4152144407fecc
msgid "Makes a GET request on the provided ``path`` and returns a ``Response`` object, which is documented below."
msgstr ""

#: ../../topics/testing/overview.txt:474
# 48fe45e76a2041a182c231669afd69e5
msgid "The key-value pairs in the ``data`` dictionary are used to create a GET data payload. For example::"
msgstr ""

#: ../../topics/testing/overview.txt:480
# aa638f82c0df4bfa8ee4925a6bf72210
msgid "...will result in the evaluation of a GET request equivalent to::"
msgstr ""

#: ../../topics/testing/overview.txt:484
# 4fd7a2d53ac3435496c24aa7c0be00dd
msgid "The ``extra`` keyword arguments parameter can be used to specify headers to be sent in the request. For example::"
msgstr ""

#: ../../topics/testing/overview.txt:491
# 72e81c4d9d4a47e68ed50da0716513e5
msgid "...will send the HTTP header ``HTTP_X_REQUESTED_WITH`` to the details view, which is a good way to test code paths that use the :meth:`django.http.HttpRequest.is_ajax()` method."
msgstr ""

#: ../../topics/testing/overview.txt:497
# 1586e3bc861c4b1781164ae6cad71a9a
msgid "The headers sent via ``**extra`` should follow CGI_ specification. For example, emulating a different \"Host\" header as sent in the HTTP request from the browser to the server should be passed as ``HTTP_HOST``."
msgstr ""

#: ../../topics/testing/overview.txt:504
# a4279748c8c34ab0a1c38848aa956965
msgid "If you already have the GET arguments in URL-encoded form, you can use that encoding instead of using the data argument. For example, the previous GET request could also be posed as::"
msgstr ""

#: ../../topics/testing/overview.txt:511
# 1fa2cf21534d4815ab94848ebc3d813f
msgid "If you provide a URL with both an encoded GET data and a data argument, the data argument will take precedence."
msgstr ""

#: ../../topics/testing/overview.txt:514
#: ../../topics/testing/overview.txt:595
# 150ef3cc13024f04ab1eca27e3d7412e
# 2d07d3ea254c49239545558636a4e5bc
msgid "If you set ``follow`` to ``True`` the client will follow any redirects and a ``redirect_chain`` attribute will be set in the response object containing tuples of the intermediate urls and status codes."
msgstr ""

#: ../../topics/testing/overview.txt:518
# 0d089666b4314361be9dc77c5ead8878
msgid "If you had a URL ``/redirect_me/`` that redirected to ``/next/``, that redirected to ``/final/``, this is what you'd see::"
msgstr ""

#: ../../topics/testing/overview.txt:527
# e50edd6349ba494c8fe6fced7e0a9100
msgid "Makes a POST request on the provided ``path`` and returns a ``Response`` object, which is documented below."
msgstr ""

#: ../../topics/testing/overview.txt:530
# dbf9aa8c4288492db1b259dd334e8c8f
msgid "The key-value pairs in the ``data`` dictionary are used to submit POST data. For example::"
msgstr ""

#: ../../topics/testing/overview.txt:536
# 9ccac28aba6a40e4afeee4aa44faa971
msgid "...will result in the evaluation of a POST request to this URL::"
msgstr ""

#: ../../topics/testing/overview.txt:540
# 1fd6f62cf3724290806bf3be41c549bb
msgid "...with this POST data::"
msgstr ""

#: ../../topics/testing/overview.txt:544
# 68982ee8050f455c8d6e517c829a8e06
msgid "If you provide ``content_type`` (e.g. :mimetype:`text/xml` for an XML payload), the contents of ``data`` will be sent as-is in the POST request, using ``content_type`` in the HTTP ``Content-Type`` header."
msgstr ""

#: ../../topics/testing/overview.txt:548
# 5026992ecd5641ff941d30e80f06e844
msgid "If you don't provide a value for ``content_type``, the values in ``data`` will be transmitted with a content type of :mimetype:`multipart/form-data`. In this case, the key-value pairs in ``data`` will be encoded as a multipart message and used to create the POST data payload."
msgstr ""

#: ../../topics/testing/overview.txt:554
# bbb63fd27b6346e5b5cad7d379bbb266
msgid "To submit multiple values for a given key -- for example, to specify the selections for a ``<select multiple>`` -- provide the values as a list or tuple for the required key. For example, this value of ``data`` would submit three selected values for the field named ``choices``::"
msgstr ""

#: ../../topics/testing/overview.txt:561
# 581ecfdb943b47a890705c8d5bc86af7
msgid "Submitting files is a special case. To POST a file, you need only provide the file field name as a key, and a file handle to the file you wish to upload as a value. For example::"
msgstr ""

#: ../../topics/testing/overview.txt:569
# 3ed46b293f024ae4ac8eee00b9b4e632
msgid "(The name ``attachment`` here is not relevant; use whatever name your file-processing code expects.)"
msgstr ""

#: ../../topics/testing/overview.txt:572
# 603963e3bdf540bda5651e656656132c
msgid "Note that if you wish to use the same file handle for multiple ``post()`` calls then you will need to manually reset the file pointer between posts. The easiest way to do this is to manually close the file after it has been provided to ``post()``, as demonstrated above."
msgstr ""

#: ../../topics/testing/overview.txt:578
# 35599566ddf1494fb4acfe5cd384652f
msgid "You should also ensure that the file is opened in a way that allows the data to be read. If your file contains binary data such as an image, this means you will need to open the file in ``rb`` (read binary) mode."
msgstr ""

#: ../../topics/testing/overview.txt:583
# d6bfa72227d54e50a334a16bca8b69d2
msgid "The ``extra`` argument acts the same as for :meth:`Client.get`."
msgstr ""

#: ../../topics/testing/overview.txt:585
# f5d3f1a3dc824234af0a749ac4afc47f
msgid "If the URL you request with a POST contains encoded parameters, these parameters will be made available in the request.GET data. For example, if you were to make the request::"
msgstr ""

#: ../../topics/testing/overview.txt:591
# 43792deca2444dcab6968b03c343c8c0
msgid "... the view handling this request could interrogate request.POST to retrieve the username and password, and could interrogate request.GET to determine if the user was a visitor."
msgstr ""

#: ../../topics/testing/overview.txt:601
# 9dbe97db81bc448d96b979269147de68
msgid "Makes a HEAD request on the provided ``path`` and returns a ``Response`` object. This method works just like :meth:`Client.get`, including the ``follow`` and ``extra`` arguments, except it does not return a message body."
msgstr ""

#: ../../topics/testing/overview.txt:608
# 611980b44abd41e3b5796b7e5c5bf90b
msgid "Makes an OPTIONS request on the provided ``path`` and returns a ``Response`` object. Useful for testing RESTful interfaces."
msgstr ""

#: ../../topics/testing/overview.txt:611
#: ../../topics/testing/overview.txt:626
#: ../../topics/testing/overview.txt:641
# e8f2105e066b453a8dfcb6d03264cd14
# b0b0f103b6c34bf2b3fc83e1818be91f
# a4731945a9464c23b908a26c6f23c7da
msgid "When ``data`` is provided, it is used as the request body, and a ``Content-Type`` header is set to ``content_type``."
msgstr ""

#: ../../topics/testing/overview.txt:618
#: ../../topics/testing/overview.txt:633
#: ../../topics/testing/overview.txt:648
# e7347fe13ea942498f8f7391fb61c4ef
# 0b24d5caa4384656a183d857d701fb4b
# d653d2bbb7314759adf663167f905e9e
msgid "The ``follow`` and ``extra`` arguments act the same as for :meth:`Client.get`."
msgstr ""

#: ../../topics/testing/overview.txt:623
# a1f4aa324c54490bb94a328ff0e6cbc2
msgid "Makes a PUT request on the provided ``path`` and returns a ``Response`` object. Useful for testing RESTful interfaces."
msgstr ""

#: ../../topics/testing/overview.txt:638
# 0bc66cc7192f4c1d96275620a459a6e0
msgid "Makes an DELETE request on the provided ``path`` and returns a ``Response`` object. Useful for testing RESTful interfaces."
msgstr ""

#: ../../topics/testing/overview.txt:654
# 83b072bac77c42f4bd05b3ea1cc0462b
msgid "If your site uses Django's :doc:`authentication system</topics/auth/index>` and you deal with logging in users, you can use the test client's ``login()`` method to simulate the effect of a user logging into the site."
msgstr ""

#: ../../topics/testing/overview.txt:659
# 5483fbbf57dc4bc59f1390e507184a8e
msgid "After you call this method, the test client will have all the cookies and session data required to pass any login-based tests that may form part of a view."
msgstr ""

#: ../../topics/testing/overview.txt:663
# 6e51139f58074a1da2ea8d74558bb978
msgid "The format of the ``credentials`` argument depends on which :ref:`authentication backend <authentication-backends>` you're using (which is configured by your :setting:`AUTHENTICATION_BACKENDS` setting). If you're using the standard authentication backend provided by Django (``ModelBackend``), ``credentials`` should be the user's username and password, provided as keyword arguments::"
msgstr ""

#: ../../topics/testing/overview.txt:675
# f6f0ae7f88724636be5b142309cab850
msgid "If you're using a different authentication backend, this method may require different credentials. It requires whichever credentials are required by your backend's ``authenticate()`` method."
msgstr ""

#: ../../topics/testing/overview.txt:679
# 9da6fc4252e7416e9ab6905968230fbc
msgid "``login()`` returns ``True`` if it the credentials were accepted and login was successful."
msgstr ""

#: ../../topics/testing/overview.txt:682
# 2e63a7fd1335432b88fe899a3479e5c6
msgid "Finally, you'll need to remember to create user accounts before you can use this method. As we explained above, the test runner is executed using a test database, which contains no users by default. As a result, user accounts that are valid on your production site will not work under test conditions. You'll need to create users as part of the test suite -- either manually (using the Django model API) or with a test fixture. Remember that if you want your test user to have a password, you can't set the user's password by setting the password attribute directly -- you must use the :meth:`~django.contrib.auth.models.User.set_password()` function to store a correctly hashed password. Alternatively, you can use the :meth:`~django.contrib.auth.models.UserManager.create_user` helper method to create a new user with a correctly hashed password."
msgstr ""

#: ../../topics/testing/overview.txt:698
# 8796d13264bb4069a1d2f53daae6ee89
msgid "If your site uses Django's :doc:`authentication system</topics/auth/index>`, the ``logout()`` method can be used to simulate the effect of a user logging out of your site."
msgstr ""

#: ../../topics/testing/overview.txt:702
# b6c7bc591f16437fb52d711b9ee9bbdf
msgid "After you call this method, the test client will have all the cookies and session data cleared to defaults. Subsequent requests will appear to come from an AnonymousUser."
msgstr ""

#: ../../topics/testing/overview.txt:707
# e038f9dac9474233ac900b7ccbd55209
msgid "Testing responses"
msgstr ""

#: ../../topics/testing/overview.txt:709
# 54f858aaab8c4345a18c83861bac3f81
msgid "The ``get()`` and ``post()`` methods both return a ``Response`` object. This ``Response`` object is *not* the same as the ``HttpResponse`` object returned Django views; the test response object has some additional data useful for test code to verify."
msgstr ""

#: ../../topics/testing/overview.txt:714
# 21879a332ae84f7dbf3a5cd644c91f5e
msgid "Specifically, a ``Response`` object has the following attributes:"
msgstr ""

#: ../../topics/testing/overview.txt:720
# 2fb04dc2c275419b849c9713edb06f0b
msgid "The test client that was used to make the request that resulted in the response."
msgstr ""

#: ../../topics/testing/overview.txt:725
# 04123d9d2c154d9a9a896f649278000e
msgid "The body of the response, as a string. This is the final page content as rendered by the view, or any error message."
msgstr ""

#: ../../topics/testing/overview.txt:730
# 5a6c87b2270540a9b863e8786b31f6f6
msgid "The template ``Context`` instance that was used to render the template that produced the response content."
msgstr ""

#: ../../topics/testing/overview.txt:733
# e6e3751539e04625b790df383c03b030
msgid "If the rendered page used multiple templates, then ``context`` will be a list of ``Context`` objects, in the order in which they were rendered."
msgstr ""

#: ../../topics/testing/overview.txt:736
# 043c6496854e4688977d08f2baa03285
msgid "Regardless of the number of templates used during rendering, you can retrieve context values using the ``[]`` operator. For example, the context variable ``name`` could be retrieved using::"
msgstr ""

#: ../../topics/testing/overview.txt:746
# 6d7f1f7cb6ae4ef995ac82cc9697b57f
msgid "The request data that stimulated the response."
msgstr ""

#: ../../topics/testing/overview.txt:750
# ef0db1e8d1ae4a0da8af971021f32a5f
msgid "The HTTP status of the response, as an integer. See :rfc:`2616#section-10` for a full list of HTTP status codes."
msgstr ""

#: ../../topics/testing/overview.txt:755
# 65758157936f4067a5eb976b449cc472
msgid "A list of ``Template`` instances used to render the final content, in the order they were rendered. For each template in the list, use ``template.name`` to get the template's file name, if the template was loaded from a file. (The name is a string such as ``'admin/index.html'``.)"
msgstr ""

#: ../../topics/testing/overview.txt:761
# b7145730a12e4e2ca8dc5e3d0181547f
msgid "You can also use dictionary syntax on the response object to query the value of any settings in the HTTP headers. For example, you could determine the content type of a response using ``response['Content-Type']``."
msgstr ""

#: ../../topics/testing/overview.txt:768
# 25a85cb7206a4565b508a819c34d6c53
msgid "If you point the test client at a view that raises an exception, that exception will be visible in the test case. You can then use a standard ``try ... except`` block or :meth:`~unittest.TestCase.assertRaises` to test for exceptions."
msgstr ""

#: ../../topics/testing/overview.txt:772
# 1d16fc2da8374b6b9b1d4db3b6c58257
msgid "The only exceptions that are not visible to the test client are ``Http404``, ``PermissionDenied`` and ``SystemExit``. Django catches these exceptions internally and converts them into the appropriate HTTP response codes. In these cases, you can check ``response.status_code`` in your test."
msgstr ""

#: ../../topics/testing/overview.txt:778
# 66fc38fade1f44a19194017ee986b3a9
msgid "Persistent state"
msgstr ""

#: ../../topics/testing/overview.txt:780
# 41e0637d043e4cbfa704f66ccfeaa370
msgid "The test client is stateful. If a response returns a cookie, then that cookie will be stored in the test client and sent with all subsequent ``get()`` and ``post()`` requests."
msgstr ""

#: ../../topics/testing/overview.txt:784
# 449f1f22d7a84435ad2d9d6227d9c814
msgid "Expiration policies for these cookies are not followed. If you want a cookie to expire, either delete it manually or create a new ``Client`` instance (which will effectively delete all cookies)."
msgstr ""

#: ../../topics/testing/overview.txt:788
# 5ab7fa9e14e4486a8c71164784d00360
msgid "A test client has two attributes that store persistent state information. You can access these properties as part of a test condition."
msgstr ""

#: ../../topics/testing/overview.txt:793
# d609e61b2e234c2299a9f97b9a4326ce
msgid "A Python :class:`~Cookie.SimpleCookie` object, containing the current values of all the client cookies. See the documentation of the :mod:`Cookie` module for more."
msgstr ""

#: ../../topics/testing/overview.txt:799
# 9818c8d0314046068f8dc6793e7622c2
msgid "A dictionary-like object containing session information. See the :doc:`session documentation</topics/http/sessions>` for full details."
msgstr ""

#: ../../topics/testing/overview.txt:802
# 1a740ef23c34423e80a0f3fae1f099d6
msgid "To modify the session and then save it, it must be stored in a variable first (because a new ``SessionStore`` is created every time this property is accessed)::"
msgstr ""

#: ../../topics/testing/overview.txt:814
# e7825fb0ba484ed4a2358a59d5746143
msgid "The following is a simple unit test using the test client::"
msgstr ""

#: ../../topics/testing/overview.txt:836
# 595fcc637af44e6d9e490d9c623dec1f
msgid ":class:`django.test.client.RequestFactory`"
msgstr ""

#: ../../topics/testing/overview.txt:839
# 8f61daf4ceba40c489e82c7c06e6ea4a
msgid "Provided test case classes"
msgstr ""

#: ../../topics/testing/overview.txt:843
# c7e1362a913540e1acd9c3f3ab506462
msgid "Normal Python unit test classes extend a base class of :class:`unittest.TestCase`. Django provides a few extensions of this base class:"
msgstr ""

#: ../../topics/testing/overview.txt:853
# 3883bc3fcb7341c29adce2f9f60e85f3
msgid "Regardless of the version of Python you're using, if you've installed ``unittest2``, ``django.utils.unittest`` will point to that library."
msgstr ""

#: ../../topics/testing/overview.txt:857
# 0b0af225c51042bf87a5fa417beb5355
msgid "SimpleTestCase"
msgstr ""

#: ../../topics/testing/overview.txt:863
# 77b744c25d864d54afb57ee1a07a1b71
msgid "A very thin subclass of :class:`unittest.TestCase`, it extends it with some basic functionality like:"
msgstr ""

#: ../../topics/testing/overview.txt:866
# cd3edb79212947268d59666cb84057e9
msgid "Saving and restoring the Python warning machinery state."
msgstr ""

#: ../../topics/testing/overview.txt:867
# c0daad1eb3d94dc78afcaf7f929ebcb4
msgid "Checking that a callable :meth:`raises a certain exception <SimpleTestCase.assertRaisesMessage>`."
msgstr ""

#: ../../topics/testing/overview.txt:868
# 621e0104b28f4064994a718ebbc26eeb
msgid ":meth:`Testing form field rendering <SimpleTestCase.assertFieldOutput>`."
msgstr ""

#: ../../topics/testing/overview.txt:869
# f6ef9902956f47a9b75ca6c053cd249e
msgid "Testing server :ref:`HTML responses for the presence/lack of a given fragment <assertions>`."
msgstr ""

#: ../../topics/testing/overview.txt:870
# bfedc46c2fe141828ce363409054d33a
msgid "The ability to run tests with :ref:`modified settings <overriding-settings>`"
msgstr ""

#: ../../topics/testing/overview.txt:872
# 08890e15736c436db21c513b2fa531cf
msgid "If you need any of the other more complex and heavyweight Django-specific features like:"
msgstr ""

#: ../../topics/testing/overview.txt:875
# 732abc3ca8094e2aa104315a8f5144d7
msgid "Using the :attr:`~TestCase.client` :class:`~django.test.client.Client`."
msgstr ""

#: ../../topics/testing/overview.txt:876
# 29da98b741a64ad08c95a7622c39adba
msgid "Testing or using the ORM."
msgstr ""

#: ../../topics/testing/overview.txt:877
# 6d9d789d51aa45d5b523b9422a61494d
msgid "Database :attr:`~TestCase.fixtures`."
msgstr ""

#: ../../topics/testing/overview.txt:878
# 02f853ccee2a43eaa4b059351bf3b0dc
msgid "Custom test-time :attr:`URL maps <TestCase.urls>`."
msgstr ""

#: ../../topics/testing/overview.txt:879
# c471b094dd9245e0924895cfdbbc6d99
msgid "Test :ref:`skipping based on database backend features <skipping-tests>`."
msgstr ""

#: ../../topics/testing/overview.txt:880
# 7a58f1eb7eea43c680977a962480bd34
msgid "The remaining specialized :ref:`assert* <assertions>` methods."
msgstr ""

#: ../../topics/testing/overview.txt:882
# eecaa3e669c94938827a8a4c35bc43be
msgid "then you should use :class:`~django.test.TransactionTestCase` or :class:`~django.test.TestCase` instead."
msgstr ""

#: ../../topics/testing/overview.txt:885
# c9bc0af9c4714ca58618dfc67340a79a
msgid "``SimpleTestCase`` inherits from ``django.utils.unittest.TestCase``."
msgstr ""

#: ../../topics/testing/overview.txt:888
# e7c04fe6f0ac4acfac47e921d1b56dac
msgid "TransactionTestCase"
msgstr ""

#: ../../topics/testing/overview.txt:892
# 3b8f067f3d9a453bab2657ba817fcda6
msgid "Django ``TestCase`` classes make use of database transaction facilities, if available, to speed up the process of resetting the database to a known state at the beginning of each test. A consequence of this, however, is that the effects of transaction commit and rollback cannot be tested by a Django ``TestCase`` class. If your test requires testing of such transactional behavior, you should use a Django ``TransactionTestCase``."
msgstr ""

#: ../../topics/testing/overview.txt:899
# 5ccfd3decebc4cf599c3322f5b7a2078
msgid "``TransactionTestCase`` and ``TestCase`` are identical except for the manner in which the database is reset to a known state and the ability for test code to test the effects of commit and rollback:"
msgstr ""

#: ../../topics/testing/overview.txt:903
# 80a13a92c2724101a1eb07f83ea4263a
msgid "A ``TransactionTestCase`` resets the database after the test runs by truncating all tables. A ``TransactionTestCase`` may call commit and rollback and observe the effects of these calls on the database."
msgstr ""

#: ../../topics/testing/overview.txt:907
# 36f2fb7efc264ee1a36483918e239a0f
msgid "A ``TestCase``, on the other hand, does not truncate tables after a test. Instead, it encloses the test code in a database transaction that is rolled back at the end of the test.  It also prevents the code under test from issuing any commit or rollback operations on the database, to ensure that the rollback at the end of the test restores the database to its initial state."
msgstr ""

#: ../../topics/testing/overview.txt:913
# 5830cc157056468fba898868edee80da
msgid "When running on a database that does not support rollback (e.g. MySQL with the MyISAM storage engine), ``TestCase`` falls back to initializing the database by truncating tables and reloading initial data."
msgstr ""

#: ../../topics/testing/overview.txt:921
# f4f6c3820660465e9973ac4a553b3816
msgid "Prior to 1.5, ``TransactionTestCase`` flushed the database tables *before* each test. In Django 1.5, this is instead done *after* the test has been run."
msgstr ""

#: ../../topics/testing/overview.txt:924
# 56a13a6e5fd44cf88a8a7521ac7b2405
msgid "When the flush took place before the test, it was guaranteed that primary key values started at one in :class:`~django.test.TransactionTestCase` tests."
msgstr ""

#: ../../topics/testing/overview.txt:928
# 7ca3602aa0fd4f84b838cefe7bc82405
msgid "Tests should not depend on this behaviour, but for legacy tests that do, the :attr:`~TransactionTestCase.reset_sequences` attribute can be used until the test has been properly updated."
msgstr ""

#: ../../topics/testing/overview.txt:936
# daa5d474354f4390b500571cf6d41cc1
msgid "``TransactionTestCase`` inherits from :class:`~django.test.SimpleTestCase`."
msgstr ""

#: ../../topics/testing/overview.txt:942
# 9a20b4b1ce15419b98b9614fe6fafc6e
msgid "Setting ``reset_sequences = True`` on a ``TransactionTestCase`` will make sure sequences are always reset before the test run::"
msgstr ""

#: ../../topics/testing/overview.txt:953
# 324353ff003d45b09dad1f11e8782068
msgid "Unless you are explicitly testing primary keys sequence numbers, it is recommended that you do not hard code primary key values in tests."
msgstr ""

#: ../../topics/testing/overview.txt:956
# 3ec57757857c4db087a8e165767cc9e5
msgid "Using ``reset_sequences = True`` will slow down the test, since the primary key reset is an relatively expensive database operation."
msgstr ""

#: ../../topics/testing/overview.txt:960
# fa8d6d149355417b8f9dcb8e63289ce9
msgid "TestCase"
msgstr ""

#: ../../topics/testing/overview.txt:964
# ae4f0d7ec4d94304aadc185ce531f7d5
msgid "This class provides some additional capabilities that can be useful for testing Web sites."
msgstr ""

#: ../../topics/testing/overview.txt:967
# cdc2d46bde8740ca94100a7243b7977b
msgid "Converting a normal :class:`unittest.TestCase` to a Django :class:`TestCase` is easy: Just change the base class of your test from ``'unittest.TestCase'`` to ``'django.test.TestCase'``. All of the standard Python unit test functionality will continue to be available, but it will be augmented with some useful additions, including:"
msgstr ""

#: ../../topics/testing/overview.txt:973
# 441a42c87c494d3da81f01319436044d
msgid "Automatic loading of fixtures."
msgstr ""

#: ../../topics/testing/overview.txt:975
# 0126dd1c7e73421e84836ff10ebe0286
msgid "Wraps each test in a transaction."
msgstr ""

#: ../../topics/testing/overview.txt:977
# 33d4b9362fa84be2bb1523ee57305b30
msgid "Creates a TestClient instance."
msgstr ""

#: ../../topics/testing/overview.txt:979
# 308080808e144d23a1e73a5f625ef974
msgid "Django-specific assertions for testing for things like redirection and form errors."
msgstr ""

#: ../../topics/testing/overview.txt:986
# 97ff0e25a2034e7fa7820fe1a1269231
msgid "``TestCase`` inherits from :class:`~django.test.TransactionTestCase`."
msgstr ""

#: ../../topics/testing/overview.txt:991
# f15a86e2fd9f4b21adb6304170b3a860
msgid "LiveServerTestCase"
msgstr ""

#: ../../topics/testing/overview.txt:997
# fcaad65ad3de4fb99d411bef2fcffb31
msgid "``LiveServerTestCase`` does basically the same as :class:`~django.test.TransactionTestCase` with one extra feature: it launches a live Django server in the background on setup, and shuts it down on teardown. This allows the use of automated test clients other than the :ref:`Django dummy client <test-client>` such as, for example, the Selenium_ client, to execute a series of functional tests inside a browser and simulate a real user's actions."
msgstr ""

#: ../../topics/testing/overview.txt:1005
# 744a19c167564914a8f1456cd2767453
msgid "By default the live server's address is ``'localhost:8081'`` and the full URL can be accessed during the tests with ``self.live_server_url``. If you'd like to change the default address (in the case, for example, where the 8081 port is already taken) then you may pass a different one to the :djadmin:`test` command via the :djadminopt:`--liveserver` option, for example:"
msgstr ""

#: ../../topics/testing/overview.txt:1015
# 6cac348ecfd742eeae0a380f4d16a63c
msgid "Another way of changing the default server address is by setting the `DJANGO_LIVE_TEST_SERVER_ADDRESS` environment variable somewhere in your code (for example, in a :ref:`custom test runner<topics-testing-test_runner>`):"
msgstr ""

#: ../../topics/testing/overview.txt:1024
# c21fc6fd5a87424eaf9e61b9189dd31f
msgid "In the case where the tests are run by multiple processes in parallel (for example, in the context of several simultaneous `continuous integration`_ builds), the processes will compete for the same address, and therefore your tests might randomly fail with an \"Address already in use\" error. To avoid this problem, you can pass a comma-separated list of ports or ranges of ports (at least as many as the number of potential parallel processes). For example:"
msgstr ""

#: ../../topics/testing/overview.txt:1035
# 4dd78672958141cfbee0037273a27af7
msgid "Then, during test execution, each new live test server will try every specified port until it finds one that is free and takes it."
msgstr ""

#: ../../topics/testing/overview.txt:1040
# f44cd4d85686489abc3f29ea6c38612b
msgid "To demonstrate how to use ``LiveServerTestCase``, let's write a simple Selenium test. First of all, you need to install the `selenium package`_ into your Python path:"
msgstr ""

#: ../../topics/testing/overview.txt:1048
# d22456994fdd46cabf2832972d2252e5
msgid "Then, add a ``LiveServerTestCase``-based test to your app's tests module (for example: ``myapp/tests.py``). The code for this test may look as follows:"
msgstr ""

#: ../../topics/testing/overview.txt:1077
# b5046e87218b4d68b056bee104347fb6
msgid "Finally, you may run the test as follows:"
msgstr ""

#: ../../topics/testing/overview.txt:1083
# 349de15bd996452b9bd1d958fda81191
msgid "This example will automatically open Firefox then go to the login page, enter the credentials and press the \"Log in\" button. Selenium offers other drivers in case you do not have Firefox installed or wish to use another browser. The example above is just a tiny fraction of what the Selenium client can do; check out the `full reference`_ for more details."
msgstr ""

#: ../../topics/testing/overview.txt:1096
# a2226cd12d10408292302b5a23057d06
msgid "``LiveServerTestCase`` makes use of the :doc:`staticfiles contrib app </howto/static-files/index>` so you'll need to have your project configured accordingly (in particular by setting :setting:`STATIC_URL`)."
msgstr ""

#: ../../topics/testing/overview.txt:1102
# 9dd6511bc8c14df5a96077fd87e86f7d
msgid "When using an in-memory SQLite database to run the tests, the same database connection will be shared by two threads in parallel: the thread in which the live server is run and the thread in which the test case is run. It's important to prevent simultaneous database queries via this shared connection by the two threads, as that may sometimes randomly cause the tests to fail. So you need to ensure that the two threads don't access the database at the same time. In particular, this means that in some cases (for example, just after clicking a link or submitting a form), you might need to check that a response is received by Selenium and that the next page is loaded before proceeding with further test execution. Do this, for example, by making Selenium wait until the ``<body>`` HTML tag is found in the response (requires Selenium > 2.13):"
msgstr ""

#: ../../topics/testing/overview.txt:1126
# 9e7fed76484b40e7934a29f2e2fd0965
msgid "The tricky thing here is that there's really no such thing as a \"page load,\" especially in modern Web apps that generate HTML dynamically after the server generates the initial document. So, simply checking for the presence of ``<body>`` in the response might not necessarily be appropriate for all use cases. Please refer to the `Selenium FAQ`_ and `Selenium documentation`_ for more information."
msgstr ""

#: ../../topics/testing/overview.txt:1137
# 2e02e4cd25454bc09480fad069b32bc4
msgid "Test cases features"
msgstr ""

#: ../../topics/testing/overview.txt:1140
# 416c011581c44ea5b65dd88a9bc40755
msgid "Default test client"
msgstr ""

#: ../../topics/testing/overview.txt:1144
# b9c9e537ce4c482aad2fd0b9a64b5021
msgid "Every test case in a ``django.test.TestCase`` instance has access to an instance of a Django test client. This client can be accessed as ``self.client``. This client is recreated for each test, so you don't have to worry about state (such as cookies) carrying over from one test to another."
msgstr ""

#: ../../topics/testing/overview.txt:1149
# 575b575e04424273ba4ab3e732ac3c38
msgid "This means, instead of instantiating a ``Client`` in each test::"
msgstr ""

#: ../../topics/testing/overview.txt:1165
# 6a1b5a377e3f45839b3c90c9f74a174e
msgid "...you can just refer to ``self.client``, like so::"
msgstr ""

#: ../../topics/testing/overview.txt:1179
# 7f567289b6c846be8d4538b8888c36f1
msgid "Customizing the test client"
msgstr ""

#: ../../topics/testing/overview.txt:1183
# 395cde9e56434572a467c3a284fec5f0
msgid "If you want to use a different ``Client`` class (for example, a subclass with customized behavior), use the :attr:`~TestCase.client_class` class attribute::"
msgstr ""

#: ../../topics/testing/overview.txt:1203
# 6d1348089ab844c7a6428f88f8f915ed
msgid "Fixture loading"
msgstr ""

#: ../../topics/testing/overview.txt:1207
# 337f606465364b7dbe582f9e486c1f62
msgid "A test case for a database-backed Web site isn't much use if there isn't any data in the database. To make it easy to put test data into the database, Django's custom ``TestCase`` class provides a way of loading **fixtures**."
msgstr ""

#: ../../topics/testing/overview.txt:1211
# 94ed7f9aa72f48d98b4ee8a389610e97
msgid "A fixture is a collection of data that Django knows how to import into a database. For example, if your site has user accounts, you might set up a fixture of fake user accounts in order to populate your database during tests."
msgstr ""

#: ../../topics/testing/overview.txt:1215
# 6830e6d1c48e4cba87556cf561ef753d
msgid "The most straightforward way of creating a fixture is to use the :djadmin:`manage.py dumpdata <dumpdata>` command. This assumes you already have some data in your database. See the :djadmin:`dumpdata documentation<dumpdata>` for more details."
msgstr ""

#: ../../topics/testing/overview.txt:1222
# 65fccc0295a54ffbb3534df6cd5580f8
msgid "If you've ever run :djadmin:`manage.py syncdb<syncdb>`, you've already used a fixture without even knowing it! When you call :djadmin:`syncdb` in the database for the first time, Django installs a fixture called ``initial_data``. This gives you a way of populating a new database with any initial data, such as a default set of categories."
msgstr ""

#: ../../topics/testing/overview.txt:1229
# 65bf3727c3164d4bab878bde48cbf773
msgid "Fixtures with other names can always be installed manually using the :djadmin:`manage.py loaddata<loaddata>` command."
msgstr ""

#: ../../topics/testing/overview.txt:1234
# 98a4d45a334b44b5b9b0aec9f14282cb
msgid "Django provides a second way to insert initial data into models -- the :ref:`custom SQL hook <initial-sql>`. However, this technique *cannot* be used to provide initial data for testing purposes. Django's test framework flushes the contents of the test database after each test; as a result, any data added using the custom SQL hook will be lost."
msgstr ""

#: ../../topics/testing/overview.txt:1241
# fc8a90d460ce4ec6b4017c72e9f80101
msgid "Once you've created a fixture and placed it in a ``fixtures`` directory in one of your :setting:`INSTALLED_APPS`, you can use it in your unit tests by specifying a ``fixtures`` class attribute on your :class:`django.test.TestCase` subclass::"
msgstr ""

#: ../../topics/testing/overview.txt:1260
# ea82ca78baf2481a8bc458d3d489346a
msgid "Here's specifically what will happen:"
msgstr ""

#: ../../topics/testing/overview.txt:1262
# f60add84d0b04fc2bb92b838121f450c
msgid "At the start of each test case, before ``setUp()`` is run, Django will flush the database, returning the database to the state it was in directly after :djadmin:`syncdb` was called."
msgstr ""

#: ../../topics/testing/overview.txt:1266
# 7e6847fb752f4b7183aad4d0ee21392a
msgid "Then, all the named fixtures are installed. In this example, Django will install any JSON fixture named ``mammals``, followed by any fixture named ``birds``. See the :djadmin:`loaddata` documentation for more details on defining and installing fixtures."
msgstr ""

#: ../../topics/testing/overview.txt:1271
# 1e4d73d0e83d49ba8eb5c1152418bfb0
msgid "This flush/load procedure is repeated for each test in the test case, so you can be certain that the outcome of a test will not be affected by another test, or by the order of test execution."
msgstr ""

#: ../../topics/testing/overview.txt:1276
# 43f464e4745a4c41b5fbf92faf886aeb
msgid "URLconf configuration"
msgstr ""

#: ../../topics/testing/overview.txt:1280
# 33b895434dd648d6a0e7de3e24813052
msgid "If your application provides views, you may want to include tests that use the test client to exercise those views. However, an end user is free to deploy the views in your application at any URL of their choosing. This means that your tests can't rely upon the fact that your views will be available at a particular URL."
msgstr ""

#: ../../topics/testing/overview.txt:1286
# 00a62066284340d480895f8f29869e7a
msgid "In order to provide a reliable URL space for your test, ``django.test.TestCase`` provides the ability to customize the URLconf configuration for the duration of the execution of a test suite. If your ``TestCase`` instance defines an ``urls`` attribute, the ``TestCase`` will use the value of that attribute as the :setting:`ROOT_URLCONF` for the duration of that test."
msgstr ""

#: ../../topics/testing/overview.txt:1304
# 4ad5fe8d356e4997a6915c78a96d092f
msgid "This test case will use the contents of ``myapp.test_urls`` as the URLconf for the duration of the test case."
msgstr ""

#: ../../topics/testing/overview.txt:1310
# 37b8dfdb39724aa48ef4d02368664c49
msgid "Multi-database support"
msgstr ""

#: ../../topics/testing/overview.txt:1314
# d933a198a0664393b6c5711e5a736059
msgid "Django sets up a test database corresponding to every database that is defined in the :setting:`DATABASES` definition in your settings file. However, a big part of the time taken to run a Django TestCase is consumed by the call to ``flush`` that ensures that you have a clean database at the start of each test run. If you have multiple databases, multiple flushes are required (one for each database), which can be a time consuming activity -- especially if your tests don't need to test multi-database activity."
msgstr ""

#: ../../topics/testing/overview.txt:1323
# 708893707df34621a3a76f897ba7f11d
msgid "As an optimization, Django only flushes the ``default`` database at the start of each test run. If your setup contains multiple databases, and you have a test that requires every database to be clean, you can use the ``multi_db`` attribute on the test suite to request a full flush."
msgstr ""

#: ../../topics/testing/overview.txt:1337
# f94bb43a9e06464c94e7379d5f5c5a82
msgid "This test case will flush *all* the test databases before running ``testIndexPageView``."
msgstr ""

#: ../../topics/testing/overview.txt:1343
# b2a5bd06d1b947f095528c3770b103ac
msgid "Overriding settings"
msgstr ""

#: ../../topics/testing/overview.txt:1349
# badc4b795df64ee3918273e1794bbbcb
msgid "For testing purposes it's often useful to change a setting temporarily and revert to the original value after running the testing code. For this use case Django provides a standard Python context manager (see :pep:`343`) :meth:`~django.test.TestCase.settings`, which can be used like this::"
msgstr ""

#: ../../topics/testing/overview.txt:1369
# 253c0d534b5c4cc38ae94819fdfd3835
msgid "This example will override the :setting:`LOGIN_URL` setting for the code in the ``with`` block and reset its value to the previous state afterwards."
msgstr ""

#: ../../topics/testing/overview.txt:1376
# 0334e467fd0c4169b2c6c536c6f62139
msgid "In case you want to override a setting for just one test method or even the whole :class:`~django.test.TestCase` class, Django provides the :func:`~django.test.utils.override_settings` decorator (see :pep:`318`). It's used like this::"
msgstr ""

#: ../../topics/testing/overview.txt:1391
# 065a2659f0df49a9acf4d85753ce8c3a
msgid "The decorator can also be applied to test case classes::"
msgstr ""

#: ../../topics/testing/overview.txt:1405
# 6bccf3e46c574560a7eb8d9bd15273bb
msgid "When given a class, the decorator modifies the class directly and returns it; it doesn't create and return a modified copy of it.  So if you try to tweak the above example to assign the return value to a different name than ``LoginTestCase``, you may be surprised to find that the original ``LoginTestCase`` is still equally affected by the decorator."
msgstr ""

#: ../../topics/testing/overview.txt:1412
# 8098fa6f81274759987360fd253053c1
msgid "When overriding settings, make sure to handle the cases in which your app's code uses a cache or similar feature that retains state even if the setting is changed. Django provides the :data:`django.test.signals.setting_changed` signal that lets you register callbacks to clean up and otherwise reset state when settings are changed."
msgstr ""

#: ../../topics/testing/overview.txt:1418
# 0d177b1e533c497cb22cee835f457e8a
msgid "Django itself uses this signal to reset various data:"
msgstr ""

#: ../../topics/testing/overview.txt:1421
# a3f5f4ad86e94811b67aa40390f1f41e
msgid "Overriden settings"
msgstr ""

#: ../../topics/testing/overview.txt:1421
# 14a2c9e995464f1bb4691287d5685582
msgid "Data reset"
msgstr ""

#: ../../topics/testing/overview.txt:1423
# c1d30a9b880a4224a45b086f87ef2804
msgid "USE_TZ, TIME_ZONE"
msgstr ""

#: ../../topics/testing/overview.txt:1423
# f9e34bd761aa4cdf9af7eacb55bb587b
msgid "Databases timezone"
msgstr ""

#: ../../topics/testing/overview.txt:1424
# 8f3a1066ddfc4b1d94ce4b6b8e5f7d14
msgid "TEMPLATE_CONTEXT_PROCESSORS"
msgstr ""

#: ../../topics/testing/overview.txt:1424
# 9a6f70dd7ccd4c0682a1f884f2e7e58b
msgid "Context processors cache"
msgstr ""

#: ../../topics/testing/overview.txt:1425
# fd6b5f70bc7541519e273fa327f0636f
msgid "TEMPLATE_LOADERS"
msgstr ""

#: ../../topics/testing/overview.txt:1425
# f699f6bae0c94323bd2affeffc3bc720
msgid "Template loaders cache"
msgstr ""

#: ../../topics/testing/overview.txt:1426
# 13cbd1cec2144230ad004ba2a4a91c7e
msgid "SERIALIZATION_MODULES"
msgstr ""

#: ../../topics/testing/overview.txt:1426
# 51af0b4b8704431e9a58bd1767a3cfca
msgid "Serializers cache"
msgstr ""

#: ../../topics/testing/overview.txt:1427
# 4ddaf7cc89ba4dcba7b5d22b9c622b51
msgid "LOCALE_PATHS, LANGUAGE_CODE"
msgstr ""

#: ../../topics/testing/overview.txt:1427
# 15b1075a34174d53829df3376067a105
msgid "Default translation and loaded translations"
msgstr ""

#: ../../topics/testing/overview.txt:1428
# bbe52922fabb4661b0e7e022d8a0fb5d
msgid "MEDIA_ROOT, DEFAULT_FILE_STORAGE"
msgstr ""

#: ../../topics/testing/overview.txt:1428
# 3eb55ddd8d974f6883dac4df42c3b199
msgid "Default file storage"
msgstr ""

#: ../../topics/testing/overview.txt:1432
# 1f6a7a06357440adba9742c59ce9b223
msgid "Emptying the test outbox"
msgstr ""

#: ../../topics/testing/overview.txt:1434
# 47377c6ced2f487a8abd6ddc18ee6ded
msgid "If you use Django's custom ``TestCase`` class, the test runner will clear the contents of the test email outbox at the start of each test case."
msgstr ""

#: ../../topics/testing/overview.txt:1437
# 0f6dc29b114b486caf0f3200ff3f01a6
msgid "For more detail on email services during tests, see `Email services`_ below."
msgstr ""

#: ../../topics/testing/overview.txt:1442
# 0d60ae7f67eb46e0885738ba59cfdc06
msgid "Assertions"
msgstr ""

#: ../../topics/testing/overview.txt:1446
# ac696eef8f9c445eada407748a749e3f
msgid "As Python's normal :class:`unittest.TestCase` class implements assertion methods such as :meth:`~unittest.TestCase.assertTrue` and :meth:`~unittest.TestCase.assertEqual`, Django's custom :class:`TestCase` class provides a number of custom assertion methods that are useful for testing Web applications:"
msgstr ""

#: ../../topics/testing/overview.txt:1452
# d35f569f724e4843a2c9e712d0272be5
msgid "The failure messages given by most of these assertion methods can be customized with the ``msg_prefix`` argument. This string will be prefixed to any failure message generated by the assertion. This allows you to provide additional details that may help you to identify the location and cause of an failure in your test suite."
msgstr ""

#: ../../topics/testing/overview.txt:1462
# 70011de6c1fb43bbbde52a88a97ea5a8
msgid "Asserts that execution of callable ``callable_obj`` raised the ``expected_exception`` exception and that such exception has an ``expected_message`` representation. Any other outcome is reported as a failure. Similar to unittest's :meth:`~unittest.TestCase.assertRaisesRegexp` with the difference that ``expected_message`` isn't a regular expression."
msgstr ""

#: ../../topics/testing/overview.txt:1472
# 0e9041d6ea7d4b7dbfd25c6d5a4c6a6d
msgid "Asserts that a form field behaves correctly with various inputs."
msgstr ""

#: ../../topics/testing/overview.txt:1483
# d3e92705d5754566b4682a669303eb78
msgid "For example, the following code tests that an ``EmailField`` accepts \"a@a.com\" as a valid email address, but rejects \"aaa\" with a reasonable error message::"
msgstr ""

#: ../../topics/testing/overview.txt:1492
# 0ba6f09ab2b84f429a58bb178ad479c9
msgid "Asserts that a ``Response`` instance produced the given ``status_code`` and that ``text`` appears in the content of the response. If ``count`` is provided, ``text`` must occur exactly ``count`` times in the response."
msgstr ""

#: ../../topics/testing/overview.txt:1498
#: ../../topics/testing/overview.txt:1511
# 77a67e9a65ec47b4a3f3c8b5b9c57971
# 3a02c08a3fb940948446218c8f70488d
msgid "Set ``html`` to ``True`` to handle ``text`` as HTML. The comparison with the response content will be based on HTML semantics instead of character-by-character equality. Whitespace is ignored in most cases, attribute ordering is not significant. See :meth:`~SimpleTestCase.assertHTMLEqual` for more details."
msgstr ""

#: ../../topics/testing/overview.txt:1506
# dedb4e7fbaca4dc3845dd713fed30119
msgid "Asserts that a ``Response`` instance produced the given ``status_code`` and that ``text`` does not appears in the content of the response."
msgstr ""

#: ../../topics/testing/overview.txt:1519
# c7617199693244f78d35edcf35d799e8
msgid "Asserts that a field on a form raises the provided list of errors when rendered on the form."
msgstr ""

#: ../../topics/testing/overview.txt:1522
# 2e0d45b4c5334c9ebaa82e389b531876
msgid "``form`` is the name the ``Form`` instance was given in the template context."
msgstr ""

#: ../../topics/testing/overview.txt:1525
# 6e5d0a07cd8f46b89b5f1975406fda91
msgid "``field`` is the name of the field on the form to check. If ``field`` has a value of ``None``, non-field errors (errors you can access via ``form.non_field_errors()``) will be checked."
msgstr ""

#: ../../topics/testing/overview.txt:1529
# b27bcef209a44f10a0bdddbf2c96d33c
msgid "``errors`` is an error string, or a list of error strings, that are expected as a result of form validation."
msgstr ""

#: ../../topics/testing/overview.txt:1534
# 2b88916db475406fbd2589b0a127b866
msgid "Asserts that the template with the given name was used in rendering the response."
msgstr ""

#: ../../topics/testing/overview.txt:1537
# 401e8c6213f34bd5b5b4d7a3361f9983
msgid "The name is a string such as ``'admin/index.html'``."
msgstr ""

#: ../../topics/testing/overview.txt:1541
# 5346b35f5136405aa267457036520c00
msgid "You can use this as a context manager, like this::"
msgstr ""

#: ../../topics/testing/overview.txt:1550
# 59cfc049b1f94c0689d3f9b8807222d0
msgid "Asserts that the template with the given name was *not* used in rendering the response."
msgstr ""

#: ../../topics/testing/overview.txt:1555
# 268c594b81bc4620a5a7609ea69acaf2
msgid "You can use this as a context manager in the same way as :meth:`~TestCase.assertTemplateUsed`."
msgstr ""

#: ../../topics/testing/overview.txt:1560
# b1b3cf4af2094ea89f9e05e50097fb95
msgid "Asserts that the response return a ``status_code`` redirect status, it redirected to ``expected_url`` (including any GET data), and the final page was received with ``target_status_code``."
msgstr ""

#: ../../topics/testing/overview.txt:1564
# 633ea71aae104acc8636c83bab953773
msgid "If your request used the ``follow`` argument, the ``expected_url`` and ``target_status_code`` will be the url and status code for the final point of the redirect chain."
msgstr ""

#: ../../topics/testing/overview.txt:1570
# 9e195b40e7154b04ab6ae123ecbdcc27
msgid "Asserts that a queryset ``qs`` returns a particular list of values ``values``."
msgstr ""

#: ../../topics/testing/overview.txt:1572
# d4cb3d8d138f48af925084a787b8cf36
msgid "The comparison of the contents of ``qs`` and ``values`` is performed using the function ``transform``; by default, this means that the ``repr()`` of each value is compared. Any other callable can be used if ``repr()`` doesn't provide a unique or helpful comparison."
msgstr ""

#: ../../topics/testing/overview.txt:1577
# 1c35fbd55e7b4c02a34ac66188c1217d
msgid "By default, the comparison is also ordering dependent. If ``qs`` doesn't provide an implicit ordering, you can set the ``ordered`` parameter to ``False``, which turns the comparison into a Python set comparison."
msgstr ""

#: ../../topics/testing/overview.txt:1590
# 9cdc3239ab8043f385ade43b5fc53bd0
msgid "Asserts that when ``func`` is called with ``*args`` and ``**kwargs`` that ``num`` database queries are executed."
msgstr ""

#: ../../topics/testing/overview.txt:1593
# 1b04b8fa902c4320b5a4de88af5aee8b
msgid "If a ``\"using\"`` key is present in ``kwargs`` it is used as the database alias for which to check the number of queries.  If you wish to call a function with a ``using`` parameter you can do it by wrapping the call with a ``lambda`` to add an extra parameter::"
msgstr ""

#: ../../topics/testing/overview.txt:1600
# 148aa871096849ceba2ce86f37184d5d
msgid "You can also use this as a context manager::"
msgstr ""

#: ../../topics/testing/overview.txt:1610
# ad077c6a81504fadb1e4eef7382f3791
msgid "Asserts that the strings ``html1`` and ``html2`` are equal. The comparison is based on HTML semantics. The comparison takes following things into account:"
msgstr ""

#: ../../topics/testing/overview.txt:1614
# 0bda97f4cce64803b1161a4807d2820b
msgid "Whitespace before and after HTML tags is ignored."
msgstr ""

#: ../../topics/testing/overview.txt:1615
# 47e3ecc2be5840e3859550b6a363b8be
msgid "All types of whitespace are considered equivalent."
msgstr ""

#: ../../topics/testing/overview.txt:1616
# 94a0c12281fb40da894399285df66571
msgid "All open tags are closed implicitly, e.g. when a surrounding tag is closed or the HTML document ends."
msgstr ""

#: ../../topics/testing/overview.txt:1618
# 799c09a61e80449081195c4697c91cb7
msgid "Empty tags are equivalent to their self-closing version."
msgstr ""

#: ../../topics/testing/overview.txt:1619
# 877b2a8e69ce4e44a7b8abcc510025be
msgid "The ordering of attributes of an HTML element is not significant."
msgstr ""

#: ../../topics/testing/overview.txt:1620
# 13ed2ec0bbe04b2cbb8f6fc54bcc16e2
msgid "Attributes without an argument are equal to attributes that equal in name and value (see the examples)."
msgstr ""

#: ../../topics/testing/overview.txt:1623
# 66af13cca32d4b6d8cca79b2264f2260
msgid "The following examples are valid tests and don't raise any ``AssertionError``::"
msgstr ""

#: ../../topics/testing/overview.txt:1634
#: ../../topics/testing/overview.txt:1645
# fa4415cfda724fdebea370d9a91ac2b4
# 3d06f81d1b554ae6b5071475b5046892
msgid "``html1`` and ``html2`` must be valid HTML. An ``AssertionError`` will be raised if one of them cannot be parsed."
msgstr ""

#: ../../topics/testing/overview.txt:1641
# 83930562e74f49608c1bba3c80fd2470
msgid "Asserts that the strings ``html1`` and ``html2`` are *not* equal. The comparison is based on HTML semantics. See :meth:`~SimpleTestCase.assertHTMLEqual` for details."
msgstr ""

#: ../../topics/testing/overview.txt:1652
# 42766eac5a884125ac5ff387b25e9fc8
msgid "Asserts that the strings ``xml1`` and ``xml2`` are equal. The comparison is based on XML semantics. Similarily to :meth:`~SimpleTestCase.assertHTMLEqual`, the comparison is made on parsed content, hence only semantic differences are considered, not syntax differences. When unvalid XML is passed in any parameter, an ``AssertionError`` is always raised, even if both string are identical."
msgstr ""

#: ../../topics/testing/overview.txt:1663
# b1befe1f6fa4421cad6de506431b0361
msgid "Asserts that the strings ``xml1`` and ``xml2`` are *not* equal. The comparison is based on XML semantics. See :meth:`~SimpleTestCase.assertXMLEqual` for details."
msgstr ""

#: ../../topics/testing/overview.txt:1670
# d3405bb82c9246e0aaf3ba2cb4bc12bb
msgid "Email services"
msgstr ""

#: ../../topics/testing/overview.txt:1672
# 73ff29e59b43479f83452163e369496b
msgid "If any of your Django views send email using :doc:`Django's email functionality </topics/email>`, you probably don't want to send email each time you run a test using that view. For this reason, Django's test runner automatically redirects all Django-sent email to a dummy outbox. This lets you test every aspect of sending email -- from the number of messages sent to the contents of each message -- without actually sending the messages."
msgstr ""

#: ../../topics/testing/overview.txt:1679
# c2dcb7277311448abacaef97deecffa6
msgid "The test runner accomplishes this by transparently replacing the normal email backend with a testing backend. (Don't worry -- this has no effect on any other email senders outside of Django, such as your machine's mail server, if you're running one.)"
msgstr ""

#: ../../topics/testing/overview.txt:1688
# 08121051fff948eba7fc90df4079a22f
msgid "During test running, each outgoing email is saved in ``django.core.mail.outbox``. This is a simple list of all :class:`~django.core.mail.EmailMessage` instances that have been sent. The ``outbox`` attribute is a special attribute that is created *only* when the ``locmem`` email backend is used. It doesn't normally exist as part of the :mod:`django.core.mail` module and you can't import it directly. The code below shows how to access this attribute correctly."
msgstr ""

#: ../../topics/testing/overview.txt:1696
# f6be29661be3410fa2e46867d05d139e
msgid "Here's an example test that examines ``django.core.mail.outbox`` for length and contents::"
msgstr ""

#: ../../topics/testing/overview.txt:1715
# 2911ac5095cb4de093bc3c51931012f9
msgid "As noted :ref:`previously <emptying-test-outbox>`, the test outbox is emptied at the start of every test in a Django ``TestCase``. To empty the outbox manually, assign the empty list to ``mail.outbox``::"
msgstr ""

#: ../../topics/testing/overview.txt:1727
# 44b2277944174e2da27a1d9567df3751
msgid "Skipping tests"
msgstr ""

#: ../../topics/testing/overview.txt:1731
# 19f0ae4b06f94162a8ee511fe4483f7d
msgid "The unittest library provides the :func:`@skipIf <unittest.skipIf>` and :func:`@skipUnless <unittest.skipUnless>` decorators to allow you to skip tests if you know ahead of time that those tests are going to fail under certain conditions."
msgstr ""

#: ../../topics/testing/overview.txt:1736
# 1ec57423da714e6d9034d0342d79100b
msgid "For example, if your test requires a particular optional library in order to succeed, you could decorate the test case with :func:`@skipIf <unittest.skipIf>`. Then, the test runner will report that the test wasn't executed and why, instead of failing the test or omitting the test altogether."
msgstr ""

#: ../../topics/testing/overview.txt:1741
# 9e259513279e4c23bfb69d36828c1a53
msgid "To supplement these test skipping behaviors, Django provides two additional skip decorators. Instead of testing a generic boolean, these decorators check the capabilities of the database, and skip the test if the database doesn't support a specific named feature."
msgstr ""

#: ../../topics/testing/overview.txt:1746
# ca7856a222244e68bab71ed868e92868
msgid "The decorators use a string identifier to describe database features. This string corresponds to attributes of the database connection features class. See ``django.db.backends.BaseDatabaseFeatures`` class for a full list of database features that can be used as a basis for skipping tests."
msgstr ""

#: ../../topics/testing/overview.txt:1754
# 1102f0a318ba46889a2cf20fb0454a86
msgid "Skip the decorated test if the named database feature is supported."
msgstr ""

#: ../../topics/testing/overview.txt:1756
# cb067ff23693486fa53505ee3cdadbe7
msgid "For example, the following test will not be executed if the database supports transactions (e.g., it would *not* run under PostgreSQL, but it would under MySQL with MyISAM tables)::"
msgstr ""

#: ../../topics/testing/overview.txt:1767
# 3dc3db6ce98e4538884eaea469ad4434
msgid "Skip the decorated test if the named database feature is *not* supported."
msgstr ""

#: ../../topics/testing/overview.txt:1770
# ab481334803b407eb6e4c09d0b866485
msgid "For example, the following test will only be executed if the database supports transactions (e.g., it would run under PostgreSQL, but *not* under MySQL with MyISAM tables)::"
msgstr ""

