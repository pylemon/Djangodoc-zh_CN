# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Django 1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-04-02 21:26\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../releases/0.95.txt:3
# cd0b48e16dcb4aa093e9af6d25ae0124
msgid "Django version 0.95 release notes"
msgstr ""

#: ../../releases/0.95.txt:5
# 333d276420244d19afc8538617991ea1
msgid "Welcome to the Django 0.95 release."
msgstr ""

#: ../../releases/0.95.txt:7
# a4e96ae68df1453b93618cca3c450a64
msgid "This represents a significant advance in Django development since the 0.91 release in January 2006. The details of every change in this release would be too extensive to list in full, but a summary is presented below."
msgstr ""

#: ../../releases/0.95.txt:12
# 4270b3cb0269429188292a922e99992d
msgid "Suitability and API stability"
msgstr ""

#: ../../releases/0.95.txt:14
# 8caaa78dfe5d42448750b34eb77411a6
msgid "This release is intended to provide a stable reference point for developers wanting to work on production-level applications that use Django."
msgstr ""

#: ../../releases/0.95.txt:17
# a0952a1c98aa4b329f634512aa3fb541
msgid "However, it's not the 1.0 release, and we'll be introducing further changes before 1.0. For a clear look at which areas of the framework will change (and which ones will *not* change) before 1.0, see the api-stability.txt file, which lives in the docs/ directory of the distribution."
msgstr ""

#: ../../releases/0.95.txt:22
# c935e7b181e3415eae5047fb5329a7b1
msgid "You may have a need to use some of the features that are marked as \"subject to API change\" in that document, but that's OK with us as long as it's OK with you, and as long as you understand APIs may change in the future."
msgstr ""

#: ../../releases/0.95.txt:26
# 64c7461a508044a4b0baf0d7a21d0ff1
msgid "Fortunately, most of Django's core APIs won't be changing before version 1.0. There likely won't be as big of a change between 0.95 and 1.0 versions as there was between 0.91 and 0.95."
msgstr ""

#: ../../releases/0.95.txt:31
# 4cd1f35eb1f94c409abe10a3dc3fbd05
msgid "Changes and new features"
msgstr ""

#: ../../releases/0.95.txt:33
# 2d47a695d3eb43aea028fdfcfd5ade18
msgid "The major changes in this release (for developers currently using the 0.91 release) are a result of merging the 'magic-removal' branch of development. This branch removed a number of constraints in the way Django code had to be written that were a consequence of decisions made in the early days of Django, prior to its open-source release. It's now possible to write more natural, Pythonic code that works as expected, and there's less \"black magic\" happening behind the scenes."
msgstr ""

#: ../../releases/0.95.txt:41
# ff012e2d804149009e0e8152f1cc069c
msgid "Aside from that, another main theme of this release is a dramatic increase in usability. We've made countless improvements in error messages, documentation, etc., to improve developers' quality of life."
msgstr ""

#: ../../releases/0.95.txt:45
# 2d09ced854b34ddd95d2d3b69086e8bf
msgid "The new features and changes introduced in 0.95 include:"
msgstr ""

#: ../../releases/0.95.txt:47
# 5897061c3f4943c3849f18b67d5574c6
msgid "Django now uses a more consistent and natural filtering interface for retrieving objects from the database."
msgstr ""

#: ../../releases/0.95.txt:50
# ef9306dcbdb04ea7bfd3153423d068e8
msgid "User-defined models, functions and constants now appear in the module namespace they were defined in. (Previously everything was magically transferred to the django.models.* namespace.)"
msgstr ""

#: ../../releases/0.95.txt:54
# 4f9aa27a21324fafbc92dce97070faf4
msgid "Some optional applications, such as the FlatPage, Sites and Redirects apps, have been decoupled and moved into django.contrib. If you don't want to use these applications, you no longer have to install their database tables."
msgstr ""

#: ../../releases/0.95.txt:59
# 8800d4283c3f483b8f1472f0c758424f
msgid "Django now has support for managing database transactions."
msgstr ""

#: ../../releases/0.95.txt:61
# 23bf821c064e4824a0f27c6d28fcd5d1
msgid "We've added the ability to write custom authentication and authorization backends for authenticating users against alternate systems, such as LDAP."
msgstr ""

#: ../../releases/0.95.txt:65
# b63e347942c5496a96debcc1adb600a1
msgid "We've made it easier to add custom table-level functions to models, through a new \"Manager\" API."
msgstr ""

#: ../../releases/0.95.txt:68
# 986bd685a82348de98c733786e8537a8
msgid "It's now possible to use Django without a database. This simply means that the framework no longer requires you to have a working database set up just to serve dynamic pages. In other words, you can just use URLconfs/views on their own. Previously, the framework required that a database be configured, regardless of whether you actually used it."
msgstr ""

#: ../../releases/0.95.txt:74
# 9472cb92ca4147a9beba88e8e6bab889
msgid "It's now more explicit and natural to override save() and delete() methods on models, rather than needing to hook into the pre_save() and post_save() method hooks."
msgstr ""

#: ../../releases/0.95.txt:78
# 2eef369dc5c64022b756deffd2eb4580
msgid "Individual pieces of the framework now can be configured without requiring the setting of an environment variable. This permits use of, for example, the Django templating system inside other applications."
msgstr ""

#: ../../releases/0.95.txt:82
# dfcd27bc3a034e06982d75aa63b3388d
msgid "More and more parts of the framework have been internationalized, as we've expanded internationalization (i18n) support. The Django codebase, including code and templates, has now been translated, at least in part, into 31 languages. From Arabic to Chinese to Hungarian to Welsh, it is now possible to use Django's admin site in your native language."
msgstr ""

#: ../../releases/0.95.txt:88
# c8d815427e894fb697bd8d114660dbbd
msgid "The number of changes required to port from 0.91-compatible code to the 0.95 code base are significant in some cases. However, they are, for the most part, reasonably routine and only need to be done once. A list of the necessary changes is described in the `Removing The Magic`_ wiki page. There is also an easy checklist_ for reference when undertaking the porting operation."
msgstr ""

#: ../../releases/0.95.txt:98
# f5ee12702daa4a0db360dbe1bfe6e33b
msgid "Problem reports and getting help"
msgstr ""

#: ../../releases/0.95.txt:100
# 148465cc94f34bb385e2f886636960db
msgid "Need help resolving a problem with Django? The documentation in the distribution is also available :doc:`online </index>` at the `Django Web site`_. The :doc:`FAQ </faq/index>` document is especially recommended, as it contains a number of issues that come up time and again."
msgstr ""

#: ../../releases/0.95.txt:105
# 2ae071e8f27d4beba1a4b1876ce04b9e
msgid "For more personalized help, the `django-users`_ mailing list is a very active list, with more than 2,000 subscribers who can help you solve any sort of Django problem. We recommend you search the archives first, though, because many common questions appear with some regularity, and any particular problem may already have been answered."
msgstr ""

#: ../../releases/0.95.txt:111
# 462a1a652efd42ca9702e177e4ec4f6e
msgid "Finally, for those who prefer the more immediate feedback offered by IRC, there's a #django channel on irc.freenode.net that is regularly populated by Django users and developers from around the world. Friendly people are usually available at any hour of the day -- to help, or just to chat."
msgstr ""

#: ../../releases/0.95.txt:119
# 8aefae5bb6704c6e84323735b39093e3
msgid "Thanks for using Django!"
msgstr ""

#: ../../releases/0.95.txt:121
# ad02493853804919bf479c3f197774df
msgid "The Django Team July 2006"
msgstr ""

#: ../../releases/0.96.txt:3
# e3b067a8feb64c3a843ab15f56358749
msgid "Django version 0.96 release notes"
msgstr ""

#: ../../releases/0.96.txt:5
# 55fc4520cb9e4218aa838bf5e2c7e946
msgid "Welcome to Django 0.96!"
msgstr ""

#: ../../releases/0.96.txt:7
# 2da8a4b010a04307a22f4ca9af6e1940
msgid "The primary goal for 0.96 is a cleanup and stabilization of the features introduced in 0.95. There have been a few small `backwards-incompatible changes`_ since 0.95, but the upgrade process should be fairly simple and should not require major changes to existing applications."
msgstr ""

#: ../../releases/0.96.txt:12
# b0fe26437d8541fa8b9600d4144796b7
msgid "However, we're also releasing 0.96 now because we have a set of backwards-incompatible changes scheduled for the near future. Once completed, they will involve some code changes for application developers, so we recommend that you stick with Django 0.96 until the next official release; then you'll be able to upgrade in one step instead of needing to make incremental changes to keep up with the development version of Django."
msgstr ""

#: ../../releases/0.96.txt:21
#: ../../releases/1.0.txt:33
# d6a5d7186c264debbd81f35812260e84
# 3ff00ac5be904565a90a7c8f3d4ca2b7
msgid "Backwards-incompatible changes"
msgstr ""

#: ../../releases/0.96.txt:23
# c05ea70cd4e04064ada411b7d9292de1
msgid "The following changes may require you to update your code when you switch from 0.95 to 0.96:"
msgstr ""

#: ../../releases/0.96.txt:27
# 56db96e64ca7454a93d9f6a7ec481863
msgid "``MySQLdb`` version requirement"
msgstr ""

#: ../../releases/0.96.txt:29
# b286bb7413324909bf41dbec17924694
msgid "Due to a bug in older versions of the ``MySQLdb`` Python module (which Django uses to connect to MySQL databases), Django's MySQL backend now requires version 1.2.1p2 or higher of ``MySQLdb``, and will raise exceptions if you attempt to use an older version."
msgstr ""

#: ../../releases/0.96.txt:34
# cdb07fb928464074a120caa2dd113228
msgid "If you're currently unable to upgrade your copy of ``MySQLdb`` to meet this requirement, a separate, backwards-compatible backend, called \"mysql_old\", has been added to Django. To use this backend, change the ``DATABASE_ENGINE`` setting in your Django settings file from this::"
msgstr ""

#: ../../releases/0.96.txt:41
#: ../../releases/1.2.txt:596
# af86f5d82a6947e5a9bc31de4087b7cf
# 6e7b0f6f9520455d8087edd99eaa3700
msgid "to this::"
msgstr ""

#: ../../releases/0.96.txt:45
# 7573bc97e16742a289be82493864019f
msgid "However, we strongly encourage MySQL users to upgrade to a more recent version of ``MySQLdb`` as soon as possible, The \"mysql_old\" backend is provided only to ease this transition, and is considered deprecated; aside from any necessary security fixes, it will not be actively maintained, and it will be removed in a future release of Django."
msgstr ""

#: ../../releases/0.96.txt:51
# 3ae098707f5548c0bc6cb9ac1a10c83e
msgid "Also, note that some features, like the new ``DATABASE_OPTIONS`` setting (see the :doc:`databases documentation </ref/databases>` for details), are only available on the \"mysql\" backend, and will not be made available for \"mysql_old\"."
msgstr ""

#: ../../releases/0.96.txt:57
# 7adf7da58b1642118723cc26ae6aab82
msgid "Database constraint names changed"
msgstr ""

#: ../../releases/0.96.txt:59
# bd9bc9dcced1433ea9a067e865247d59
msgid "The format of the constraint names Django generates for foreign key references have changed slightly. These names are generally only used when it is not possible to put the reference directly on the affected column, so they are not always visible."
msgstr ""

#: ../../releases/0.96.txt:64
# fe61dd422e5d418695f608f162be496b
msgid "The effect of this change is that running ``manage.py reset`` and similar commands against an existing database may generate SQL with the new form of constraint name, while the database itself contains constraints named in the old form; this will cause the database server to raise an error message about modifying non-existent constraints."
msgstr ""

#: ../../releases/0.96.txt:70
# c5689be8c3864063a09f4fec159883c4
msgid "If you need to work around this, there are two methods available:"
msgstr ""

#: ../../releases/0.96.txt:72
# b9d2633bab7b463d8556eba9a6a6546b
msgid "Redirect the output of ``manage.py`` to a file, and edit the generated SQL to use the correct constraint names before executing it."
msgstr ""

#: ../../releases/0.96.txt:76
# a69540b89e1e44e2b20c57ec2a84109c
msgid "Examine the output of ``manage.py sqlall`` to see the new-style constraint names, and use that as a guide to rename existing constraints in your database."
msgstr ""

#: ../../releases/0.96.txt:81
# f1329a26bef749308fb658c5fea6eb8c
msgid "Name changes in ``manage.py``"
msgstr ""

#: ../../releases/0.96.txt:83
# eb2eb5da64bd4d51bc9bacc5a19f8240
msgid "A few of the options to ``manage.py`` have changed with the addition of fixture support:"
msgstr ""

#: ../../releases/0.96.txt:86
# decfd7fae9514120923b4f7fa2435e82
msgid "There are new ``dumpdata`` and ``loaddata`` commands which, as you might expect, will dump and load data to/from the database. These commands can operate against any of Django's supported serialization formats."
msgstr ""

#: ../../releases/0.96.txt:91
# 0fae9330fbc3439faba2dd3773b3e391
msgid "The ``sqlinitialdata`` command has been renamed to ``sqlcustom`` to emphasize that ``loaddata`` should be used for data (and ``sqlcustom`` for other custom SQL -- views, stored procedures, etc.)."
msgstr ""

#: ../../releases/0.96.txt:95
# db5f8988575d40bbb446ff9d47548963
msgid "The vestigial ``install`` command has been removed. Use ``syncdb``."
msgstr ""

#: ../../releases/0.96.txt:98
# e48764fca138411a863ceda46fb08c38
msgid "Backslash escaping changed"
msgstr ""

#: ../../releases/0.96.txt:100
# 422db60ce253479682b7d5c8c24f49c8
msgid "The Django database API now escapes backslashes given as query parameters. If you have any database API code that matches backslashes, and it was working before (despite the lack of escaping), you'll have to change your code to \"unescape\" the slashes one level."
msgstr ""

#: ../../releases/0.96.txt:105
# f91907ca465847b9b4cb93021df07e08
msgid "For example, this used to work::"
msgstr ""

#: ../../releases/0.96.txt:110
# 320e49e48ab4458b8993b22bf1014133
msgid "The above is now incorrect, and should be rewritten as::"
msgstr ""

#: ../../releases/0.96.txt:116
# 21b35b72dac34c39bca2f7177c2f7f7b
msgid "Removed ENABLE_PSYCO setting"
msgstr ""

#: ../../releases/0.96.txt:118
# 3de4775872ff418bab38beccdabdaf16
msgid "The ``ENABLE_PSYCO`` setting no longer exists. If your settings file includes ``ENABLE_PSYCO`` it will have no effect; to use Psyco_, we recommend writing a middleware class to activate it."
msgstr ""

#: ../../releases/0.96.txt:125
# a070c201b53c463aadec8f66a20a6e3f
msgid "What's new in 0.96?"
msgstr ""

#: ../../releases/0.96.txt:127
# 1693a4e3c38a4f90aa06f6883febd34c
msgid "This revision represents over a thousand source commits and over four hundred bug fixes, so we can't possibly catalog all the changes. Here, we describe the most notable changes in this release."
msgstr ""

#: ../../releases/0.96.txt:132
# 17c6eb6b732e4fedb35c5211d2944544
msgid "New forms library"
msgstr ""

#: ../../releases/0.96.txt:134
# 84a5d3fa68344a0f91cd67b774cc027e
msgid "``django.newforms`` is Django's new form-handling library. It's a replacement for ``django.forms``, the old form/manipulator/validation framework.  Both APIs are available in 0.96, but over the next two releases we plan to switch completely to the new forms system, and deprecate and remove the old system."
msgstr ""

#: ../../releases/0.96.txt:140
# 5e80d8eb60954a669401aaf69515f34f
msgid "There are three elements to this transition:"
msgstr ""

#: ../../releases/0.96.txt:142
# d6a38258482041bc86473f92c79a525f
msgid "We've copied the current ``django.forms`` to ``django.oldforms``. This allows you to upgrade your code *now* rather than waiting for the backwards-incompatible change and rushing to fix your code after the fact.  Just change your import statements like this::"
msgstr ""

#: ../../releases/0.96.txt:151
# daf53a18e94a4a2bbbe7af0e7399f9b9
msgid "The next official release of Django will move the current ``django.newforms`` to ``django.forms``. This will be a backwards-incompatible change, and anyone still using the old version of ``django.forms`` at that time will need to change their import statements as described above."
msgstr ""

#: ../../releases/0.96.txt:157
# e66e8088d93c40b5883742c0aee7382f
msgid "The next release after that will completely remove ``django.oldforms``."
msgstr ""

#: ../../releases/0.96.txt:160
# dd231411bd994ab6883674d6b7430250
msgid "Although the ``newforms`` library will continue to evolve, it's ready for use for most common cases. We recommend that anyone new to form handling skip the old forms system and start with the new."
msgstr ""

#: ../../releases/0.96.txt:164
# 32ff25f4444e44d28b5b7d19b2733e58
msgid "For more information about ``django.newforms``, read the :doc:`newforms documentation </topics/forms/index>`."
msgstr ""

#: ../../releases/0.96.txt:168
# 5efab707f23b49e7b8ba595d5d1a5e8d
msgid "URLconf improvements"
msgstr ""

#: ../../releases/0.96.txt:170
# 26dff4b2ba224da8bc4b8a0f9d0e02e7
msgid "You can now use any callable as the callback in URLconfs (previously, only strings that referred to callables were allowed). This allows a much more natural use of URLconfs. For example, this URLconf::"
msgstr ""

#: ../../releases/0.96.txt:180
# 6b8da6997e71440ab63346125a4778b0
msgid "can now be rewritten as::"
msgstr ""

#: ../../releases/0.96.txt:189
# 7608bff824de41ef82a9864beb26835c
msgid "One useful application of this can be seen when using decorators; this change allows you to apply decorators to views *in your URLconf*. Thus, you can make a generic view require login very easily::"
msgstr ""

#: ../../releases/0.96.txt:207
# 2c15ba70a5ae4ee5a656f3158904dae5
msgid "Note that both syntaxes (strings and callables) are valid, and will continue to be valid for the foreseeable future."
msgstr ""

#: ../../releases/0.96.txt:211
# 0794b305643f4ccdb4fe9bccfa9eaf8c
msgid "The test framework"
msgstr ""

#: ../../releases/0.96.txt:213
# 4d2eeca2cf504a429c9bf426c8b5f7b1
msgid "Django now includes a test framework so you can start transmuting fear into boredom (with apologies to Kent Beck). You can write tests based on :mod:`doctest` or :mod:`unittest` and test your views with a simple test client."
msgstr ""

#: ../../releases/0.96.txt:217
# 049bb6b49df64f2fb3eb595151681b17
msgid "There is also new support for \"fixtures\" -- initial data, stored in any of the supported :doc:`serialization formats </topics/serialization>`, that will be loaded into your database at the start of your tests. This makes testing with real data much easier."
msgstr ""

#: ../../releases/0.96.txt:222
# f8b8431cf8fc43308446f7fd9e9cea79
msgid "See :doc:`the testing documentation </topics/testing/index>` for the full details."
msgstr ""

#: ../../releases/0.96.txt:225
# b558feb29a3241b1a0b433cd0c1b2543
msgid "Improvements to the admin interface"
msgstr ""

#: ../../releases/0.96.txt:227
# 68ff2e737cf149ca8de9b383a4f8ec79
msgid "A small change, but a very nice one: dedicated views for adding and updating users have been added to the admin interface, so you no longer need to worry about working with hashed passwords in the admin."
msgstr ""

#: ../../releases/0.96.txt:232
# 7b28665b7ed243b6bc137986403f1598
msgid "Thanks"
msgstr ""

#: ../../releases/0.96.txt:234
# af5eb6ab19cd44f5bd328ce6becc78b7
msgid "Since 0.95, a number of people have stepped forward and taken a major new role in Django's development. We'd like to thank these people for all their hard work:"
msgstr ""

#: ../../releases/0.96.txt:238
# a1957c54ac28438782ed1ff77fbc18a6
msgid "Russell Keith-Magee and Malcolm Tredinnick for their major code contributions. This release wouldn't have been possible without them."
msgstr ""

#: ../../releases/0.96.txt:241
# 93c9e75ae9754fbe91d9424dac77bd7d
msgid "Our new release manager, James Bennett, for his work in getting out 0.95.1, 0.96, and (hopefully) future release."
msgstr ""

#: ../../releases/0.96.txt:244
# 4fb245a1e7884123bd1ce062f801a5b3
msgid "Our ticket managers Chris Beaven (aka SmileyChris), Simon Greenhill, Michael Radziej, and Gary Wilson. They agreed to take on the monumental task of wrangling our tickets into nicely cataloged submission. Figuring out what to work on is now about a million times easier; thanks again, guys."
msgstr ""

#: ../../releases/0.96.txt:250
# 28bbe4b53cb749a7b456fd0dd88fa363
msgid "Everyone who submitted a bug report, patch or ticket comment. We can't possibly thank everyone by name -- over 200 developers submitted patches that went into 0.96 -- but everyone who's contributed to Django is listed in AUTHORS_."
msgstr ""

#: ../../releases/1.0.txt:3
# ed5f06eebc74444594cd79d1c88a5f44
msgid "Django 1.0 release notes"
msgstr ""

#: ../../releases/1.0.txt:5
# c2cbf82092a24c53a4a98c79d71c572c
msgid "Welcome to Django 1.0!"
msgstr ""

#: ../../releases/1.0.txt:7
# ae85bc98fe294cdb8b7ea3d52d4f19b4
msgid "We've been looking forward to this moment for over three years, and it's finally here. Django 1.0 represents a the largest milestone in Django's development to date: a Web framework that a group of perfectionists can truly be proud of."
msgstr ""

#: ../../releases/1.0.txt:11
# 7b94b81255964dcaa4c96786c75631dc
msgid "Django 1.0 represents over three years of community development as an Open Source project. Django's received contributions from hundreds of developers, been translated into fifty languages, and today is used by developers on every continent and in every kind of job."
msgstr ""

#: ../../releases/1.0.txt:16
# 9c9244a29bca4936b51d5483b08b6470
msgid "An interesting historical note: when Django was first released in July 2005, the initial released version of Django came from an internal repository at revision number 8825. Django 1.0 represents revision 8961 of our public repository. It seems fitting that our 1.0 release comes at the moment where community contributions overtake those made privately."
msgstr ""

#: ../../releases/1.0.txt:23
# 472225bbc72849919faa3558e4bad2ec
msgid "Stability and forwards-compatibility"
msgstr ""

#: ../../releases/1.0.txt:25
# b29ffb8ab56b4bff95146f07e41f0f47
msgid ":doc:`The release of Django 1.0 </releases/1.0>` comes with a promise of API stability and forwards-compatibility. In a nutshell, this means that code you develop against Django 1.0 will continue to work against 1.1 unchanged, and you should need to make only minor changes for any 1.X release."
msgstr ""

#: ../../releases/1.0.txt:30
# 431d835f248b4c459fd22fd30025fde3
msgid "See the :doc:`API stability guide </misc/api-stability>` for full details."
msgstr ""

#: ../../releases/1.0.txt:35
# 9f69db3a84ae4cda867cc3c1146aa0b4
msgid "Django 1.0 has a number of backwards-incompatible changes from Django 0.96. If you have apps written against Django 0.96 that you need to port, see our detailed porting guide:"
msgstr ""

#: ../../releases/1.0.txt:44
# 1072eb09edb748249d77cb3f0f3d0b1a
msgid "A complete list of backwards-incompatible changes can be found at https://code.djangoproject.com/wiki/BackwardsIncompatibleChanges."
msgstr ""

#: ../../releases/1.0.txt:48
# 9c80a5a6bf3141dfb225df72dc5529bf
msgid "What's new in Django 1.0"
msgstr ""

#: ../../releases/1.0.txt:50
# e7baae2208bc4ca3acf7be41b486c57e
msgid "A *lot*!"
msgstr ""

#: ../../releases/1.0.txt:52
# 35c7f8cd356e45b69f3af09a80919b9b
msgid "Since Django 0.96, we've made over 4,000 code commits, fixed more than 2,000 bugs, and edited, added, or removed around 350,000 lines of code. We've also added 40,000 lines of new documentation, and greatly improved what was already there."
msgstr ""

#: ../../releases/1.0.txt:57
# a15a4b877b2247d79dedaea5feb5473d
msgid "In fact, new documentation is one of our favorite features of Django 1.0, so we might as well start there. First, there's a new documentation site:"
msgstr ""

#: ../../releases/1.0.txt:60
# 8984cd3e5b4b4ed6aff986e514264fc3
msgid "https://docs.djangoproject.com/"
msgstr ""

#: ../../releases/1.0.txt:62
# c7809a62ef854ed6ae0aa4aaa0088cb5
msgid "The documentation has been greatly improved, cleaned up, and generally made awesome. There's now dedicated search, indexes, and more."
msgstr ""

#: ../../releases/1.0.txt:65
# 5b45f7ca64b8410b9a4ba4d3e573f411
msgid "We can't possibly document everything that's new in 1.0, but the documentation will be your definitive guide. Anywhere you see something like:"
msgstr ""

#: ../../releases/1.0.txt:71
# 7e4e495dc5e24c5a9c5e599d88aa84c2
msgid "You'll know that you're looking at something new or changed."
msgstr ""

#: ../../releases/1.0.txt:73
# 12c0e75c067e4cd8b2db503e3d3fa3f2
msgid "The other major highlights of Django 1.0 are:"
msgstr ""

#: ../../releases/1.0.txt:76
# 2d04f6586b2d4952a37104249d2e53b9
msgid "Re-factored admin application"
msgstr ""

#: ../../releases/1.0.txt:78
#: ../../releases/1.0-alpha-1.txt:25
# 6e25c0bbf0a9433faec9931955558a10
# 11e17e21a16247cfbaabfdc3d55a2887
msgid "The Django administrative interface (``django.contrib.admin``) has been completely refactored; admin definitions are now completely decoupled from model definitions (no more ``class Admin`` declaration in models!), rewritten to use Django's new form-handling library (introduced in the 0.96 release as ``django.newforms``, and now available as simply ``django.forms``) and redesigned with extensibility and customization in mind. Full documentation for the admin application is available online in the official Django documentation:"
msgstr ""

#: ../../releases/1.0.txt:86
# edee93451d36443ab426f7cc02f3ae87
msgid "See the :doc:`admin reference </ref/contrib/admin/index>` for details"
msgstr ""

#: ../../releases/1.0.txt:89
# d4c1c463b35f493d976649ba5b51dba4
msgid "Improved Unicode handling"
msgstr ""

#: ../../releases/1.0.txt:91
# 17e61fd36d164474997659d926b1feab
msgid "Django's internals have been refactored to use Unicode throughout; this drastically simplifies the task of dealing with non-Western-European content and data in Django. Additionally, utility functions have been provided to ease interoperability with third-party libraries and systems which may or may not handle Unicode gracefully. Details are available in Django's Unicode-handling documentation."
msgstr ""

#: ../../releases/1.0.txt:98
# 809de32deb5e43ab882887b5298d644c
msgid "See :doc:`/ref/unicode`."
msgstr ""

#: ../../releases/1.0.txt:101
# 2c3b9762095345af899b7e344078f34b
msgid "An improved ORM"
msgstr ""

#: ../../releases/1.0.txt:103
# 61ecef8d5032453c84893302f202cd5a
msgid "Django's object-relational mapper -- the component which provides the mapping between Django model classes and your database, and which mediates your database queries -- has been dramatically improved by a massive refactoring. For most users of Django this is backwards-compatible; the public-facing API for database querying underwent a few minor changes, but most of the updates took place in the ORM's internals. A guide to the changes, including backwards-incompatible modifications and mentions of new features opened up by this refactoring, is `available on the Django wiki`__."
msgstr ""

#: ../../releases/1.0.txt:115
# 5dad7ed8b2c54335b88799db2fc5368a
msgid "Automatic escaping of template variables"
msgstr ""

#: ../../releases/1.0.txt:117
#: ../../releases/1.0-alpha-1.txt:63
# 64a2d8e02a2a4df4a1a1e864b4f66bb8
# b8dc5dc00c0d434abde447be1a28390e
msgid "To provide improved security against cross-site scripting (XSS) vulnerabilities, Django's template system now automatically escapes the output of variables. This behavior is configurable, and allows both variables and larger template constructs to be marked as safe (requiring no escaping) or unsafe (requiring escaping). A full guide to this feature is in the documentation for the :ttag:`autoescape` tag."
msgstr ""

#: ../../releases/1.0.txt:125
# 3fcdd885d4954fa087813cd90dba127a
msgid "``django.contrib.gis`` (GeoDjango)"
msgstr ""

#: ../../releases/1.0.txt:127
# 43ff97adf6654507a73048528f975236
msgid "A project over a year in the making, this adds world-class GIS (`Geographic Information Systems`_) support to Django, in the form of a ``contrib`` application. Its documentation is currently being maintained externally, and will be merged into the main Django documentation shortly. Huge thanks go to Justin Bronn, Jeremy Dunck, Brett Hoerner and Travis Pinney for their efforts in creating and completing this feature."
msgstr ""

#: ../../releases/1.0.txt:134
# b5016cdaa6f84e7eace7f37e21d9027d
msgid "See http://geodjango.org/ for details."
msgstr ""

#: ../../releases/1.0.txt:139
# 231fb27eac634f898ffb4c2896ab16f4
msgid "Pluggable file storage"
msgstr ""

#: ../../releases/1.0.txt:141
#: ../../releases/1.0-alpha-2.txt:36
# 817f24e82da9485e9263d0005eea8a3c
# 18bfa44a9b57442c92d67d67c9c4bf12
msgid "Django's built-in ``FileField`` and ``ImageField`` now can take advantage of pluggable file-storage backends, allowing extensive customization of where and how uploaded files get stored by Django. For details, see :doc:`the files documentation </topics/files>`; big thanks go to Marty Alchin for putting in the hard work to get this completed."
msgstr ""

#: ../../releases/1.0.txt:148
# 92443b374f624454966653c4b6c281a1
msgid "Jython compatibility"
msgstr ""

#: ../../releases/1.0.txt:150
#: ../../releases/1.0-alpha-2.txt:43
# eccbfff88fff4e43a107071b6f9ba6b9
# 17070450e0b5430a9d90aa5bb27458a7
msgid "Thanks to a lot of work from Leo Soto during a Google Summer of Code project, Django's codebase has been refactored to remove incompatibilities with `Jython`_, an implementation of Python written in Java, which runs Python code on the Java Virtual Machine. Django is now compatible with the forthcoming Jython 2.5 release."
msgstr ""

#: ../../releases/1.0.txt:156
# bbdf5bcf409d42b58276b26e587ffa58
msgid "See :doc:`/howto/jython`."
msgstr ""

#: ../../releases/1.0.txt:161
# f2dbbbe9008d4844b9346650eb245e0e
msgid "Generic relations in forms and admin"
msgstr ""

#: ../../releases/1.0.txt:163
#: ../../releases/1.0-beta.txt:29
# e2ea420d8fed436e981bc474583c6cba
# 54d1c15cb13e49de8fbeae9fc026e37a
msgid "Classes are now included in ``django.contrib.contenttypes`` which can be used to support generic relations in both the admin interface and in end-user forms. See :ref:`the documentation for generic relations <generic-relations>` for details."
msgstr ""

#: ../../releases/1.0.txt:168
# 8b70d132a9534f7695e8d088adf96616
msgid "``INSERT``/``UPDATE`` distinction"
msgstr ""

#: ../../releases/1.0.txt:170
# 463379146a1f4247900fe4f9da9ed726
msgid "Although Django's default behavior of having a model's ``save()`` method automatically determine whether to perform an ``INSERT`` or an ``UPDATE`` at the SQL level is suitable for the majority of cases, there are occasional situations where forcing one or the other is useful. As a result, models can now support an additional parameter to ``save()`` which can force a specific operation."
msgstr ""

#: ../../releases/1.0.txt:176
# 394be23a4cf44544a2e1bc277f980eb0
msgid "See :ref:`ref-models-force-insert` for details."
msgstr ""

#: ../../releases/1.0.txt:179
# 3159cfc0e76a4bffa93032e926c69fca
msgid "Split ``CacheMiddleware``"
msgstr ""

#: ../../releases/1.0.txt:181
# cb174f1c8262458aac1780d4ec25ee1d
msgid "Django's ``CacheMiddleware`` has been split into three classes: ``CacheMiddleware`` itself still exists and retains all of its previous functionality, but it is now built from two separate middleware classes which handle the two parts of caching (inserting into and reading from the cache) separately, offering additional flexibility for situations where combining these functions into a single middleware posed problems."
msgstr ""

#: ../../releases/1.0.txt:188
# 98e3468becb041e0b65653824e3d59a8
msgid "Full details, including updated notes on appropriate use, are in :doc:`the caching documentation </topics/cache>`."
msgstr ""

#: ../../releases/1.0.txt:192
# 66fb1011ba8f42b5b19c31600ff65ccf
msgid "Refactored ``django.contrib.comments``"
msgstr ""

#: ../../releases/1.0.txt:194
# 6ee01adf364e42e49d1533e5b9d0c72e
msgid "As part of a Google Summer of Code project, Thejaswi Puthraya carried out a major rewrite and refactoring of Django's bundled comment system, greatly increasing its flexibility and customizability. :doc:`Full documentation </ref/contrib/comments/index>` is available, as well as an upgrade guide if you were using the previous incarnation of the comments application."
msgstr ""

#: ../../releases/1.0.txt:202
# d853bc8466a24391aab5b1458b23ecfb
msgid "Removal of deprecated features"
msgstr ""

#: ../../releases/1.0.txt:204
# ce522312f05847228cc016541ad6d86f
msgid "A number of features and methods which had previously been marked as deprecated, and which were scheduled for removal prior to the 1.0 release, are no longer present in Django. These include imports of the form library from ``django.newforms`` (now located simply at ``django.forms``), the ``form_for_model`` and ``form_for_instance`` helper functions (which have been replaced by ``ModelForm``) and a number of deprecated features which were replaced by the dispatcher, file-uploading and file-storage refactorings introduced in the Django 1.0 alpha releases."
msgstr ""

#: ../../releases/1.0.txt:214
# 0d40f5d6f4e0419ab86feb6d7557ae2c
msgid "Known issues"
msgstr ""

#: ../../releases/1.0.txt:216
# b75f6906b0a54b18bba4a1a0e95624d5
msgid "We've done our best to make Django 1.0 as solid as possible, but unfortunately there are a couple of issues that we know about in the release."
msgstr ""

#: ../../releases/1.0.txt:220
# 5274fce533a84292ac3f1bbc5961b89e
msgid "Multi-table model inheritance with ``to_field``"
msgstr ""

#: ../../releases/1.0.txt:222
# fa647d183adc473596aff83bd6395a04
msgid "If you're using :ref:`multiple table model inheritance <multi-table-inheritance>`, be aware of this caveat: child models using a custom ``parent_link`` and ``to_field`` will cause database integrity errors. A set of models like the following are **not valid**::"
msgstr ""

#: ../../releases/1.0.txt:235
# bd4578d4fd69460f9a7408ee502a0204
msgid "This bug will be fixed in the next release of Django."
msgstr ""

#: ../../releases/1.0.txt:238
# 1268d9d431d14333af243d8731976a82
msgid "Caveats with support of certain databases"
msgstr ""

#: ../../releases/1.0.txt:240
# ee2e9d9ad6674c1faf074b61a0f28562
msgid "Django attempts to support as many features as possible on all database backends. However, not all database backends are alike, and in particular many of the supported database differ greatly from version to version. It's a good idea to checkout our :doc:`notes on supported database </ref/databases>`:"
msgstr ""

#: ../../releases/1.0.txt:243
# 4f00b989a77d4463bcec5d19498cba5d
msgid ":ref:`mysql-notes`"
msgstr ""

#: ../../releases/1.0.txt:244
# 4e3bf0d969d541f0808e935dc6c284db
msgid ":ref:`sqlite-notes`"
msgstr ""

#: ../../releases/1.0.txt:245
# 65e8b2637bfd474a998c3617681e9b05
msgid ":ref:`oracle-notes`"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:3
# 4747f20beb4b4a0799820e0502e26b2c
msgid "Django 1.0 alpha release notes"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:5
# 3ecdcb87521645c4afbb287eb9585d69
msgid "Welcome to Django 1.0 alpha!"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:7
# bb60d12a3054495090748fd223a9d54c
msgid "This is the first in a series of preview/development releases leading up to the eventual release of Django 1.0, currently scheduled to take place in early September 2008. This release is primarily targeted at developers who are interested in testing the Django codebase and helping to identify and resolve bugs prior to the final 1.0 release."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:13
#: ../../releases/1.0-alpha-2.txt:13
# dfeb50831a3645689be3ee03be0c1ed2
# 4ee13c950b0148e9b45f74e56d6c90be
msgid "As such, this release is *not* intended for production use, and any such use is strongly discouraged."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:18
# 91dd22620b7347f8917cac6a6e36d01a
msgid "What's new in Django 1.0 alpha"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:20
# c2bc7767fb4f40968000736c1d9200c3
msgid "Django's development trunk has been the site of nearly constant activity over the past year, with several major new features landing since the 0.96 release. Some of the highlights include:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:35
# 0e466fc377cf466495299c2943ceaebb
msgid ":doc:`admin reference </ref/contrib/admin/index>`"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:38
# e3e7e9239b78409481fee4f48b34b0c0
msgid "Django's internals have been refactored to use Unicode throughout; this drastically simplifies the task of dealing with non-Western-European content and data in Django. Additionally, utility functions have been provided to ease interoperability with third-party libraries and systems which may or may not handle Unicode gracefully. Details are available in Django's Unicode-handling documentation:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:46
# bc3ea762b22e4044b026ebbcaae914f6
msgid ":doc:`unicode reference </ref/unicode>`"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:49
# c7f7b8d329284d5bae6256da5e0f4735
msgid "Django's object-relational mapper -- the component which provides the mapping between Django model classes and your database, and which mediates your database queries -- has been dramatically improved by a massive refactoring. For most users of Django this is backwards-compatible; the public-facing API for database querying underwent a few minor changes, but most of the updates took place in the ORM's internals. A guide to the changes, including backwards-incompatible modifications and mentions of new features opened up by this refactoring, is available on the Django wiki:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:60
# 2b0e9b8834a84a51ae81c5fc8bcae764
msgid "https://code.djangoproject.com/wiki/QuerysetRefactorBranch"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:71
# e40e05e59d1d491d9bf49e291630d138
msgid "There are many more new features, many bugfixes and many enhancements to existing features from previous releases. The ``newforms`` library, for example, has undergone massive improvements including several useful add-ons in ``django.contrib`` which complement and build on Django's form-handling capabilities, and Django's file-uploading handlers have been refactored to allow finer-grained control over the uploading process as well as streaming uploads of large files."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:79
# 1d87a2fc49ee44ebb45da7738c858500
msgid "Along with these improvements and additions, we've made a number of of backwards-incompatible changes to the framework, as features have been fleshed out and APIs have been finalized for the 1.0 release. A complete guide to these changes will be available as part of the final Django 1.0 release, and a comprehensive list of backwards-incompatible changes is also available on the Django wiki for those who want to begin developing and testing their upgrade process:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:87
# 1672f2ea078443d6bb69824007f11c90
msgid "https://code.djangoproject.com/wiki/BackwardsIncompatibleChanges"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:91
#: ../../releases/1.0-alpha-2.txt:64
#: ../../releases/1.0-beta.txt:86
#: ../../releases/1.0-beta-2.txt:65
# 61c521bd69324013ba8d2943eb44a281
# 00e2337caceb486e9deb29a9a8faf958
# 1571d2c95b1e4e918fe269dc436dbc4c
# 5038d1be342b4fd18b77e5ce6b0e0672
msgid "The Django 1.0 roadmap"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:93
# bcf7a164aa254d0382083b75e50d54fc
msgid "One of the primary goals of this alpha release is to focus attention on the remaining features to be implemented for Django 1.0, and on the bugs that need to be resolved before the final release. Following this release, we'll be conducting a series of sprints building up to a series of beta releases and a release-candidate stage, followed soon after by Django 1.0. The timeline is projected to be:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:100
# f89b29427a5b42a4986a66d4a048d3ea
msgid "August 1, 2008: Sprint (based in Washington, DC, and online)."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:102
# 0744e93634ba4987b510138c041d2b07
msgid "August 5, 2008: Django 1.0 beta 1 release. This will also constitute the feature freeze for 1.0. Any feature to be included in 1.0 must be completed and in trunk by this time."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:106
# 250fe0bfac364009b75b7104687b3909
msgid "August 8, 2008: Sprint (based in Lawrence, KS, and online)."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:108
# a11c68fef9554e44924c497d7ff2d6da
msgid "August 12, 2008: Django 1.0 beta 2 release."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:110
# d11d6aad79304e05b965a58a1b1a5c19
msgid "August 15, 2008: Sprint (based in Austin, TX, and online)."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:112
# 7ca30fe4195a448e85d8b46ac0335417
msgid "August 19, 2008: Django 1.0 release candidate 1."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:114
# 19dff5c1e89e40cf8683e68bcef601c6
msgid "August 22, 2008: Sprint (based in Portland, OR, and online)."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:116
# a3d018d88b32467d89ff9db2392a335b
msgid "August 26, 2008: Django 1.0 release candidate 2."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:118
# 893c2970cc5c459eae7da20d3dc11659
msgid "September 2, 2008: Django 1.0 final release. The official Django 1.0 release party will take place during the first-ever DjangoCon, to be held in Mountain View, CA, September 6-7."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:122
#: ../../releases/1.0-alpha-2.txt:97
#: ../../releases/1.0-beta.txt:114
# bf46a5827f724cc2a4844ce8cb0d63f6
# f7c07e5aaf99431aae61b07e3308aebf
# 1697be3b3bbc455e8d8f8d723914eb48
msgid "Of course, like any estimated timeline, this is subject to change as requirements dictate. The latest information will always be available on the Django project wiki:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:126
#: ../../releases/1.0-alpha-2.txt:101
#: ../../releases/1.0-beta.txt:118
# a22f5abb89ca4ada86b42154204a8f6f
# 13cf8f8f6a6c404d9a641da64fe8c039
# b12f7b6750694e90b938c2f82189a055
msgid "https://code.djangoproject.com/wiki/VersionOneRoadmap"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:130
#: ../../releases/1.0-alpha-2.txt:105
#: ../../releases/1.0-beta.txt:122
#: ../../releases/1.0-beta-2.txt:88
#: ../../releases/1.1-alpha-1.txt:131
#: ../../releases/1.1-beta-1.txt:174
#: ../../releases/1.1-rc-1.txt:78
#: ../../releases/1.2-alpha-1.txt:554
#: ../../releases/1.2-beta-1.txt:137
#: ../../releases/1.2-rc-1.txt:70
#: ../../releases/1.3-alpha-1.txt:365
#: ../../releases/1.3-beta-1.txt:203
#: ../../releases/1.4-alpha-1.txt:1090
#: ../../releases/1.4-beta-1.txt:1162
# 635a6c55bf694c0eb8dc5e1220db2405
# 2732845da9d94625af5df23fd49a3475
# 92be2009a76c41c896ef13ec235ac1fd
# 9bce7095624848c1989f994883c5a2ac
# bbe49f8d164040fd9a2d9fcdc5c73449
# 8ad98e4e415c474284219dfcea9a199e
# ba66083b929344a7906b977ecba74af7
# 25f2ef9ad719410eb6f22cb35e49ece9
# 18c44f58b0f1413282515f3f1f8b9b50
# 3433b18c46a84744b46d3762740d34a3
# 083439b455754f8480c9fd0fa51b11aa
# 01bd47c663d948928059631cf9399091
# e0eab7819c974bdc9a702071a34ed23f
# 24d009040d1741debeef91bc15923b8e
msgid "What you can do to help"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:132
#: ../../releases/1.0-alpha-2.txt:107
# 1b1e63fd0edd489c953e144e294cb2bf
# c8102edab8414bbea5d7c6efe9ada013
msgid "In order to provide a high-quality 1.0 release, we need your help. Although this alpha release is, again, *not* intended for production use, you can help the Django team by trying out the alpha codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:139
#: ../../releases/1.0-alpha-2.txt:114
#: ../../releases/1.0-beta.txt:131
#: ../../releases/1.0-beta-2.txt:97
#: ../../releases/1.1-alpha-1.txt:139
#: ../../releases/1.1-beta-1.txt:182
#: ../../releases/1.1-rc-1.txt:87
#: ../../releases/1.2-alpha-1.txt:562
#: ../../releases/1.2-beta-1.txt:146
#: ../../releases/1.2-rc-1.txt:79
#: ../../releases/1.3-alpha-1.txt:373
#: ../../releases/1.3-beta-1.txt:211
#: ../../releases/1.4-alpha-1.txt:1098
#: ../../releases/1.4-beta-1.txt:1170
# 2efc8d33f0d44c62bf1b54a083c10c06
# 6ce0ed4368b14c0b858e0e4842348333
# 3673954296194787a7d91a5f387a0e3d
# 491466b72f304d5592365710c32b6671
# b47972f41818486b9fa462e9041685f6
# 59d8c9988c304017bd94a07e25fb686e
# 0728f3f183fe4074baadefaa0059ff42
# 79edcf6feea6440cadbe4cb8e76ebfa3
# f5511784602f4ea4ae7c23ca310fbcbf
# 7b0634dab51140d7af2d2c38e44831a1
# 8df999d2474340f58fdd5f91f7192852
# 3762213abafa4683b0d21c6033a49946
# 5fd1f7b534d542feb3962bdde2db2f7e
# 8297b25deda3498092b214bf583067a1
msgid "https://code.djangoproject.com/timeline"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:141
#: ../../releases/1.0-alpha-2.txt:116
#: ../../releases/1.0-beta.txt:133
#: ../../releases/1.0-beta-2.txt:99
#: ../../releases/1.1-alpha-1.txt:141
#: ../../releases/1.1-beta-1.txt:184
#: ../../releases/1.2-alpha-1.txt:564
#: ../../releases/1.2-beta-1.txt:148
#: ../../releases/1.3-alpha-1.txt:375
#: ../../releases/1.3-beta-1.txt:213
#: ../../releases/1.4-alpha-1.txt:1100
#: ../../releases/1.4-beta-1.txt:1172
# ad1d10762a784be792d5ed9696f93e73
# c1f0aa85315641b08e9fe8c1bf1fddbf
# b6cc24268e3749cbbb1e40f3766b4312
# 99f95a4b2f924513b945712dd5355a77
# 308f0f3061864fe1b0b3e936a5a56fe0
# 0bc9845432ed4579b4a8aedd2824c6f2
# 219be283ce8f48d297b55c4813d44f74
# 5aa5b8d15f024d44871eac64aa656bbe
# 41fcebd14fb64c43bb2c5511e6db0609
# 8c0517f22c334c7e945e82ec1baf2252
# ce2a7ec89684459180f019415beb6aca
# dee724fde3b44d12b1ce2f1bd7a88e2d
msgid "Please open new tickets if no existing ticket corresponds to a problem you're running into."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:144
#: ../../releases/1.0-alpha-2.txt:119
#: ../../releases/1.0-beta.txt:136
#: ../../releases/1.0-beta-2.txt:102
# 0878c18452aa42dcad0fef5c64cc470f
# fbb65b477b314b05b9fe7d584aa41e01
# 82b0fb114c91434fbb40d97e3345f076
# 93794cc3b49b47e58621e72db08235be
msgid "Additionally, discussion of Django development, including progress toward the 1.0 release, takes place daily on the django-developers mailing list:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:148
#: ../../releases/1.0-alpha-2.txt:123
#: ../../releases/1.0-beta.txt:140
#: ../../releases/1.0-beta-2.txt:106
#: ../../releases/1.1.txt:450
#: ../../releases/1.1-alpha-1.txt:147
#: ../../releases/1.1-beta-1.txt:190
#: ../../releases/1.1-rc-1.txt:96
#: ../../releases/1.2-alpha-1.txt:570
#: ../../releases/1.2-beta-1.txt:155
#: ../../releases/1.2-rc-1.txt:88
#: ../../releases/1.3-alpha-1.txt:381
#: ../../releases/1.3-beta-1.txt:219
#: ../../releases/1.4-alpha-1.txt:1106
#: ../../releases/1.4-beta-1.txt:1178
# 6dc8e0897412495c85c7e58fc04f2275
# 28d68bb191ea4aadb545abedaa798558
# ee11cd6582a84495873c2b42fecedb19
# 7d661f1fcfe14204b848ee44080e8289
# 4465c0349ebf4c0d8a00b555b6dedeb5
# 987a817aef1a4362b85cef2a035e95a3
# 47537b441d984486aa24ce52dcb312d9
# ac1d6b6417c74f418f4a7ffc70e55415
# 843857e6da5241d080853d5016d918f5
# 1b9ba09f0ed34b9ba3a7e200bfe5dca4
# 638b03ca82d64b079b891358dc380501
# d3e6aea480b043ac9cd554fac14de6d4
# c5242ccb09eb44308ee6c511d005a108
# 41b4dcb2fb4840a293978789a5a6d56a
# 530b0b361ecd40e49cc0f6813108d440
msgid "http://groups.google.com/group/django-developers"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:150
#: ../../releases/1.0-alpha-2.txt:125
#: ../../releases/1.0-beta.txt:142
#: ../../releases/1.0-beta-2.txt:108
# 67fd7eefc80e433ab5282b2b4b135117
# b30c0da22ae040d48349b3b74f1abead
# e39bf7fc27374ae9831423559264bd93
# aa3a2a17c6664bd0a7550d17a5e5aaa4
msgid "...and in the ``#django-dev`` IRC channel on ``irc.freenode.net``. If you're interested in helping out with Django's development, feel free to join the discussions there."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:154
#: ../../releases/1.0-alpha-2.txt:129
#: ../../releases/1.0-beta.txt:146
#: ../../releases/1.0-beta-2.txt:112
#: ../../releases/1.1.txt:455
#: ../../releases/1.1-alpha-1.txt:153
#: ../../releases/1.1-beta-1.txt:196
#: ../../releases/1.1-rc-1.txt:102
#: ../../releases/1.2-alpha-1.txt:576
#: ../../releases/1.2-beta-1.txt:161
#: ../../releases/1.2-rc-1.txt:94
#: ../../releases/1.3-alpha-1.txt:387
#: ../../releases/1.3-beta-1.txt:225
#: ../../releases/1.4-alpha-1.txt:1112
#: ../../releases/1.4-beta-1.txt:1184
# 4c6f7f7f669e4c98a8e7f79802138718
# 642f2a8c071348da87268e66ed0c2873
# 08ae6e3dd9c7408c9ebc26bfb850e884
# 3bf096d59baf4eec91ea9772729caab6
# d850a0bfd0d846cebbc17ea016a8b0bf
# fe5a0942bc1c4cefb428fe0630f7518f
# 5f719018e0c24cb096146a88fff98c40
# c0a58cb7c1234bf5a3f4e40d3e64a725
# 50e1ba3cfa34419a97934669787c85ac
# 6663e5b20aa4421daf51e2b815dc9837
# 951f213ba04f43f0854e092d19d8532d
# 48a77f504e5b4846bcf325900797eb84
# 806b3b6ff60f4ea181c7609bc597ecce
# 5343c3c8614348f2bf60e40a27989bd0
# a6363cba6fe44093a388c5d2f7e5087d
msgid "Django's online documentation also includes pointers on how to contribute to Django:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:157
#: ../../releases/1.0-alpha-2.txt:132
#: ../../releases/1.0-beta.txt:149
#: ../../releases/1.0-beta-2.txt:115
# 4c45c39c346b4a5bae3137d7072424d1
# 85585d8d112f4c27bef9f4942b2a72b6
# fc1c6018786a48a79314d49acfec7d90
# 02718b2a617f4ab2bfb291714c18779c
msgid ":doc:`contributing to Django </internals/contributing/index>`"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:159
#: ../../releases/1.0-alpha-2.txt:134
#: ../../releases/1.0-beta.txt:151
#: ../../releases/1.0-beta-2.txt:117
#: ../../releases/1.1.txt:460
#: ../../releases/1.1-alpha-1.txt:158
#: ../../releases/1.1-beta-1.txt:201
#: ../../releases/1.1-rc-1.txt:107
#: ../../releases/1.2-alpha-1.txt:581
#: ../../releases/1.2-beta-1.txt:166
#: ../../releases/1.2-rc-1.txt:99
#: ../../releases/1.3-alpha-1.txt:392
#: ../../releases/1.3-beta-1.txt:230
#: ../../releases/1.4-alpha-1.txt:1117
#: ../../releases/1.4-beta-1.txt:1189
# 1230386fe92148918fda7790d04fbd60
# 17de7dc4c032449685d7fd083f036389
# 23a7280fa4e243f5bbaa63d3c4118711
# fb545c3ae9554aecbc9e84c6574aca14
# 758554cec355458eab2c2cc067fd3f84
# 200b3b673b664891ac35c8732047ce44
# 035f6ffe542047acbb174c59f4e6b6c2
# b64d013814264634acad2f2481176acf
# b3b5301d1af941118c53560e387e1464
# b1cc68847fa044a19b27f66f17c5a7be
# 068788b0516844c7861eabaeacefbe62
# 3fb26af9d5cf4898be4ff0ddfe45970c
# 87631c18164c4d0b907103ab4b003f80
# fe7c094701454cd99b629852a5f3e51e
# cd928ab596334b72b3377c679e0cf6b5
msgid "Contributions on any level -- developing code, writing documentation or simply triaging tickets and helping to test proposed bugfixes -- are always welcome and appreciated."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:3
# 82675347275e4e759eb6921be06039fa
msgid "Django 1.0 alpha 2 release notes"
msgstr ""

#: ../../releases/1.0-alpha-2.txt:5
# 931bb79e182443aeb27a521782be93c4
msgid "Welcome to Django 1.0 alpha 2!"
msgstr ""

#: ../../releases/1.0-alpha-2.txt:7
# a231310951324f129e05471fb9eee709
msgid "This is the second in a series of preview/development releases leading up to the eventual release of Django 1.0, currently scheduled to take place in early September 2008. This releases is primarily targeted at developers who are interested in testing the Django codebase and helping to identify and resolve bugs prior to the final 1.0 release."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:18
# c52de8da740a4cb1a7b0d648cca6cdea
msgid "What's new in Django 1.0 alpha 2"
msgstr ""

#: ../../releases/1.0-alpha-2.txt:20
# 899ecd9c8fa54f5997bdf1e7a898b7b2
msgid "Django's development trunk has been the site of nearly constant activity over the past year, with several major new features landing since the 0.96 release. For features which were new as of Django 1.0 alpha 1, see :doc:`the 1.0 alpha 1 release notes </releases/1.0-alpha-1>`. Since the 1.0 alpha 1 release several new features have landed, including:"
msgstr ""

#: ../../releases/1.0-alpha-2.txt:27
# 9289e0bbe27344a6925b8c6db9bce9ce
msgid "A project over a year in the making, this adds world-class GIS (`Geographic Information Systems`_) support to Django, in the form of a ``contrib`` application.  `Its documentation`_ is currently being maintained externally, and will be merged into the main Django documentation prior to the final 1.0 release. Huge thanks go to Justin Bronn, Jeremy Dunck, Brett Hoerner and Travis Pinney for their efforts in creating and completing this feature."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:50
# f9d47aa0f96b4a37a320fe6dd63a9825
msgid "There are many other new features and improvements in this release, including two major performance boosts: strings marked for translation using :doc:`Django's internationalization system </topics/i18n/index>` now consume far less memory, and Django's internal dispatcher -- which is invoked frequently during request/response processing and when working with Django's object-relational mapper -- is now significantly faster."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:66
# dbd7f971786441e9a03305975e7b7c92
msgid "One of the primary goals of this alpha release is to focus attention on the remaining features to be implemented for Django 1.0, and on the bugs that need to be resolved before the final release. Following this release, we'll be conducting a series of development sprints building up to the beta and release-candidate stages, followed soon after by Django 1.0. The timeline is projected to be:"
msgstr ""

#: ../../releases/1.0-alpha-2.txt:73
# 5a6ae01b73ac4b07b1de2154a81c6791
msgid "**August 14, 2008: Django 1.0 beta release.** Past this point Django will be in a \"feature freeze\" for the 1.0 release; after Django 1.0 beta, the development focus will be solely on bug fixes and stabilization."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:78
#: ../../releases/1.0-beta.txt:95
# 548ea50ef7c84ef49cf80bb7ff21adaf
# db57bbc22e184ff382053ea5895d4890
msgid "August 15, 2008: Sprint (based in Austin, Texas, USA, and online)."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:80
#: ../../releases/1.0-beta.txt:97
# cc32bf05b3ad4f5da91c72dfc6341029
# 5c1d9623cb6e41b6bf3601be59f85f17
msgid "August 17, 2008: Sprint (based in Tel Aviv, Israel, and online)."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:82
#: ../../releases/1.0-beta.txt:99
# c07d6b5d4a2b4feeb69c8e9884d04bec
# 866c40e14ba849b9844f4e77914ced28
msgid "**August 21, 2008: Django 1.0 release candidate 1.** At this point, all strings marked for translation within Django's codebase will be frozen, to provide contributors time to check and finalize all of Django's bundled translation files prior to the final 1.0 release."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:87
#: ../../releases/1.0-beta.txt:104
# 8bf8dfc088fd483aa95de16f99b276a8
# 368a008f1ffe435ab306d1a4696d9454
msgid "August 22, 2008: Sprint (based in Portland, Oregon, USA, and online)."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:89
#: ../../releases/1.0-beta.txt:106
# 005e47cdaede47c28ff688c6b25338ae
# b42e768969ef4730b07d1707ed461ece
msgid "**August 26, 2008: Django 1.0 release candidate 2.**"
msgstr ""

#: ../../releases/1.0-alpha-2.txt:91
#: ../../releases/1.0-beta.txt:108
# 21fad6a8957d470fbbf701e2630f1767
# 3078d2592d9f49a9983a99df1c18f4c3
msgid "August 30, 2008: Sprint (based in London, England, UK, and online)."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:93
#: ../../releases/1.0-beta.txt:110
# fcf13761140d4047b6364fd53da44d0a
# 18b0ebb58dd34420a0966dc171b796fe
msgid "**September 2, 2008: Django 1.0 final release.** The official Django 1.0 release party will take place during the first-ever DjangoCon, to be held in Mountain View, California, USA, September 6-7."
msgstr ""

#: ../../releases/1.0-beta.txt:3
# 3ca6fc5f483f44fc8aa28b373d74d2bf
msgid "Django 1.0 beta 1 release notes"
msgstr ""

#: ../../releases/1.0-beta.txt:5
# 643365e686d84474a0f25fa3c44bc1be
msgid "Welcome to Django 1.0 beta 1!"
msgstr ""

#: ../../releases/1.0-beta.txt:7
# d3f6c2c970284160bc692d7d0374b88f
msgid "This is the third in a series of preview/development releases leading up to the eventual release of Django 1.0, currently scheduled to take place in early September 2008. This releases is primarily targeted at developers who are interested in testing the Django codebase and helping to identify and resolve bugs prior to the final 1.0 release."
msgstr ""

#: ../../releases/1.0-beta.txt:13
#: ../../releases/1.0-beta-2.txt:13
#: ../../releases/1.1-alpha-1.txt:15
#: ../../releases/1.1-beta-1.txt:15
#: ../../releases/1.2-alpha-1.txt:15
#: ../../releases/1.2-beta-1.txt:16
#: ../../releases/1.3-alpha-1.txt:15
#: ../../releases/1.3-beta-1.txt:13
#: ../../releases/1.4-alpha-1.txt:15
#: ../../releases/1.4-beta-1.txt:15
#: ../../releases/1.5-alpha-1.txt:15
#: ../../releases/1.5-beta-1.txt:15
# 415a85f11b0547a296750245c886a53c
# ae7744fc50b643db8b4e035380683af8
# 81881f20f0944c2794493fd4864b8fd3
# 5a2463384e2746868cc59f39a6eeae31
# 463d8d5c8ef643e8bcf875c1e6dc0ced
# 4b2aacd9426f4df492afe91363e53f27
# 37c11079878644b09a43539de3eecb47
# 955c4b18e1a6422ebced80f49c2142ab
# b17019af99df40718257b15243dd73be
# cf1d4702294a49dda32963dc691e4861
# 04007334a10e4d6ea396775e9b976ee9
# 6971511745694295ad9a96bd8ae0d423
msgid "As such, this release is *not* intended for production use, and any such use is discouraged."
msgstr ""

#: ../../releases/1.0-beta.txt:17
# c2290fdd1a394256b802f3b15e885aea
msgid "What's new in Django 1.0 beta 1"
msgstr ""

#: ../../releases/1.0-beta.txt:19
# 696649f1e3b1421ea7c2124764db19c3
msgid "Django's development trunk has been the site of nearly constant activity over the past year, with several major new features landing since the 0.96 release. For features which were new as of Django 1.0 alpha 1, see :doc:`the 1.0 alpha 1 release notes </releases/1.0-alpha-1>`. For features which were new as of Django 1.0 alpha 2, see :doc:`the 1.0 alpha 2 release notes </releases/1.0-alpha-2>`."
msgstr ""

#: ../../releases/1.0-beta.txt:25
# 6b9df975d49f4d60bfd382836b5ed607
msgid "This beta release does not contain any major new features, but does include several smaller updates and improvements to Django:"
msgstr ""

#: ../../releases/1.0-beta.txt:35
# 1a8652b00f154d659ea410072999d74e
msgid "Following up on the refactoring of Django's administrative interface (``django.contrib.admin``), introduced in Django 1.0 alpha 1, two new hooks have been added to allow customized pre- and post-save handling of model instances in the admin. Full details are in :doc:`the admin documentation </ref/contrib/admin/index>`."
msgstr ""

#: ../../releases/1.0-beta.txt:42
# 81055023914f4f24976062e77bae21ae
msgid "Although Django's default behavior of having a model's ``save()`` method automatically determine whether to perform an ``INSERT`` or an ``UPDATE`` at the SQL level is suitable for the majority of cases, there are occasional situations where forcing one or the other is useful. As a result, models can now support an additional parameter to ``save()`` which can force a specific operation. Consult the database API documentation for details and important notes about appropriate use of this parameter."
msgstr ""

#: ../../releases/1.0-beta.txt:52
# 0d35f7430057456ea6d0ec0bbe3e0b04
msgid "Django's ``CacheMiddleware`` has been split into three classes: ``CacheMiddleware`` itself still exists and retains all of its previous functionality, but it is now built from two separate middleware classes which handle the two parts of caching (inserting into and reading from the cache) separately, offering additional flexibility for situations where combining these functions into a single middleware posed problems. Full details, including updated notes on appropriate use, are in :doc:`the caching documentation </topics/cache>`."
msgstr ""

#: ../../releases/1.0-beta.txt:63
# 0601520d8f8b4623baa53e18a6a29c97
msgid "A number of features and methods which had previously been marked as deprecated, and which were scheduled for removal prior to the 1.0 release, are no longer present in Django. These include imports of the form library from ``django.newforms`` (now located simply at ``django.forms``), the ``form_for_model`` and ``form_for_instance`` helper functions (which have been replaced by ``ModelForm``) and a number of deprecated features which were replaced by the dispatcher, file-uploading and file-storage refactorings introduced in the Django 1.0 alpha releases. A full list of these and all other backwards-incompatible changes is available on `the Django wiki`_."
msgstr ""

#: ../../releases/1.0-beta.txt:75
# 23d74bd0acfa47c8aabd13545f0537dd
msgid "A number of other improvements and bugfixes have also been included: some tricky cases involving case-sensitivity in differing MySQL collations have been resolved, Windows packaging and installation has been improved and the method by which Django generates unique session identifiers has been made much more robust."
msgstr ""

#: ../../releases/1.0-beta.txt:88
# 9fd3b7c309ce4b73ae5b3bd7401863fe
msgid "One of the primary goals of this beta release is to focus attention on the remaining features to be implemented for Django 1.0, and on the bugs that need to be resolved before the final release. Following this release, we'll be conducting a series of development sprints building up to the release-candidate stage, followed soon after by Django 1.0. The timeline is projected to be:"
msgstr ""

#: ../../releases/1.0-beta.txt:124
#: ../../releases/1.0-beta-2.txt:90
# 89e168cdf99048c38d7fdbedbec1b05c
# 0068ae948335458bb425bc394be532e4
msgid "In order to provide a high-quality 1.0 release, we need your help. Although this beta release is, again, *not* intended for production use, you can help the Django team by trying out the beta codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.0-beta-2.txt:3
# a6b6d19526d04b548ed143ce33a1c80e
msgid "Django 1.0 beta 2 release notes"
msgstr ""

#: ../../releases/1.0-beta-2.txt:5
# 6ae1c1ccb68641ee91979f4416d3771d
msgid "Welcome to Django 1.0 beta 2!"
msgstr ""

#: ../../releases/1.0-beta-2.txt:7
# ede9111ca20441b9a1eaf1c602bd61c4
msgid "This is the fourth in a series of preview/development releases leading up to the eventual release of Django 1.0, currently scheduled to take place in early September 2008. This releases is primarily targeted at developers who are interested in testing the Django codebase and helping to identify and resolve bugs prior to the final 1.0 release."
msgstr ""

#: ../../releases/1.0-beta-2.txt:17
# 61977072610445708f339c92340200e2
msgid "What's new in Django 1.0 beta 2"
msgstr ""

#: ../../releases/1.0-beta-2.txt:19
# 8b22f3cb7b27478aaae43a1a3c980bcc
msgid "Django's development trunk has been the site of nearly constant activity over the past year, with several major new features landing since the 0.96 release.  For features which were new as of Django 1.0 alpha 1, see :doc:`the 1.0 alpha 1 release notes </releases/1.0-alpha-1>`. For features which were new as of Django 1.0 alpha 2, see :doc:`the 1.0 alpha 2 release notes </releases/1.0-alpha-2>`. For features which were new as of Django 1.0 beta 1, see :doc:`the 1.0 beta 1 release notes </releases/1.0-beta>`."
msgstr ""

#: ../../releases/1.0-beta-2.txt:28
# 1feb4e41dabe4c168a434190ca3b66d9
msgid "This beta release includes two major features:"
msgstr ""

#: ../../releases/1.0-beta-2.txt:31
# 2dd6888a962843f38ca06c0e9fab0061
msgid "As part of a Google Summer of Code project, Thejaswi Puthraya carried out a major rewrite and refactoring of Django's bundled comment system, greatly increasing its flexibility and customizability. :doc:`Full documentation </ref/contrib/comments/index>` is available, as well as an upgrade guide if you were using the previous incarnation of the comments application.."
msgstr ""

#: ../../releases/1.0-beta-2.txt:40
# d76ad38ee853459cae58b79438949d05
msgid "Django's bundled and online documentation has also been significantly refactored; the new documentation system uses `Sphinx`_ to build the docs and handle such niceties as topical indexes, reference documentation and cross-references within the docs. You can check out the new documentation `online`_ or, if you have Sphinx installed, build the HTML yourself from the documentation files bundled with Django."
msgstr ""

#: ../../releases/1.0-beta-2.txt:51
# 6602122a9a6d429784e9e2be22e26450
msgid "Along with these new features, the Django team has also been hard at work polishing Django's codebase for the final 1.0 release; this beta release contains a large number of smaller improvements and bugfixes from the ongoing push to 1.0."
msgstr ""

#: ../../releases/1.0-beta-2.txt:56
# 45fa476ad4fe4c8da743b9646dba677b
msgid "Also, as part of its ongoing deprecation process, Django's old form-handling system has been removed; this means ``django.oldforms`` no longer exists, and its various API hooks (such as automatic manipulators) are no longer present in Django. This system has been completely replaced by :doc:`the new form-handling system </topics/forms/index>` in ``django.forms``."
msgstr ""

#: ../../releases/1.0-beta-2.txt:67
# 72f5ed15d48d4bef803086ab2dac006d
msgid "One of the primary goals of this beta release is to focus attention on the remaining features to be implemented for Django 1.0, and on the bugs that need to be resolved before the final release. As of this beta release, Django is in its final \"feature freeze\" for 1.0; feature requests will be deferred to later releases, and the development effort will be focused solely on bugfixing and stability. Django is also now in a \"string freeze\"; translatable strings (labels, error messages, etc.) in Django's codebase will not be changed prior to the release, in order to allow our translators to produce the final 1.0 version of Django's translation files."
msgstr ""

#: ../../releases/1.0-beta-2.txt:78
# c16392d27f2a4a999e135de16e1b07d7
msgid "Following this release, we'll be conducting a final development sprint on August 30, 2008, based in London and coordinated online; the goal of this sprint will be to squash as many bugs as possible in anticipation of the final 1.0 release, which is currently targeted for **September 2, 2008**. The official Django 1.0 release party will take place during the first-ever DjangoCon, to be held in Mountain View, California, USA, September 6-7."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:3
# c6f64f14c0a84cbd930a25f4da2f5e65
msgid "Porting your apps from Django 0.96 to 1.0"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:7
# 36d022477a4a424da8bbce36656c14c5
msgid "Django 1.0 breaks compatibility with 0.96 in some areas."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:9
# b3bd397844ce47178afa28939cbd04f2
msgid "This guide will help you port 0.96 projects and apps to 1.0. The first part of this document includes the common changes needed to run with 1.0. If after going through the first part your code still breaks, check the section `Less-common Changes`_ for a list of a bunch of less-common compatibility issues."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:16
# 3593a92ec498459baf500d91abcab608
msgid "The :doc:`1.0 release notes </releases/1.0>`. That document explains the new features in 1.0 more deeply; the porting guide is more concerned with helping you quickly update your code."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:21
# b9497a88a2b748439ab1622fb884606a
msgid "Common changes"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:23
# 18d491f73d7043cb8406ff9db135100b
msgid "This section describes the changes between 0.96 and 1.0 that most users will need to make."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:27
# 946ee9349fd44c01ac82b7e39b62d0dd
msgid "Use Unicode"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:29
# ad293b3dec2941be9fca524a88ca4554
msgid "Change string literals (``'foo'``) into Unicode literals (``u'foo'``). Django now uses Unicode strings throughout. In most places, raw strings will continue to work, but updating to use Unicode literals will prevent some obscure problems."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:34
# e277ea6cf36d4b959c8cab5fed6475ff
msgid "See :doc:`/ref/unicode` for full details."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:37
# 0608489fe7eb42599362f7aa4cfebf97
msgid "Models"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:39
# 79ba269ca9d542f187e09c08639d132a
msgid "Common changes to your models file:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:42
# a3f2aa41679545e48181092843a6e952
msgid "Rename ``maxlength`` to ``max_length``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:44
# b2cc66c7d4c14129a0cbcaa4f710ebea
msgid "Rename your ``maxlength`` argument to ``max_length`` (this was changed to be consistent with form fields):"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:48
# 48e72abeeb3b4fd6af0575a5e43fb90d
msgid "Replace ``__str__`` with ``__unicode__``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:50
# 924142ed59854a28bc68b2494e335a69
msgid "Replace your model's ``__str__`` function with a ``__unicode__`` method, and make sure you `use Unicode`_ (``u'foo'``) in that method."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:54
# 894b85c7ab254cdabec0020da91e15c0
msgid "Remove ``prepopulated_from``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:56
# 02f230b4486f42c0aa37be0598babd75
msgid "Remove the ``prepopulated_from`` argument on model fields. It's no longer valid and has been moved to the ``ModelAdmin`` class in ``admin.py``. See `the admin`_, below, for more details about changes to the admin."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:61
# b41b9f0169e247e8b8edffc81c08cc94
msgid "Remove ``core``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:63
# 90e92d68b72047128af9241a4ec74e6f
msgid "Remove the ``core`` argument from your model fields. It is no longer necessary, since the equivalent functionality (part of :ref:`inline editing <admin-inlines>`) is handled differently by the admin interface now. You don't have to worry about inline editing until you get to `the admin`_ section, below. For now, remove all references to ``core``."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:70
# 787a30c5ca1c4b15ad6cfe29b580fef2
msgid "Replace ``class Admin:`` with ``admin.py``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:72
# 83458f39f03944a697e4a03519898be4
msgid "Remove all your inner ``class Admin`` declarations from your models. They won't break anything if you leave them, but they also won't do anything. To register apps with the admin you'll move those declarations to an ``admin.py`` file; see `the admin`_ below for more details."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:79
# 1e40920831714dc4a57ba275d6b515a1
msgid "A contributor to djangosnippets__ has written a script that'll `scan your models.py and generate a corresponding admin.py`__."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:86
# 9071bb025f924b48be7f62112d19ed2c
msgid "Example"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:88
# c394a655b1414e31b12e7b304b2c5168
msgid "Below is an example ``models.py`` file with all the changes you'll need to make:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:90
# 57f6acac39da4c2799ed7be58ea4f614
msgid "Old (0.96) ``models.py``::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:103
# 4f6e9426998348adbfe9636049f5cb05
msgid "New (1.0) ``models.py``::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:113
# d1d9a294cdb14a7c8a0a5d754f33efdd
msgid "New (1.0) ``admin.py``::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:127
# 1845d58bac3e4a4fb9f3437e0b0470cd
msgid "The Admin"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:129
# 4ef0cb090d48461baddd471776b3b00f
msgid "One of the biggest changes in 1.0 is the new admin. The Django administrative interface (``django.contrib.admin``) has been completely refactored; admin definitions are now completely decoupled from model definitions, the framework has been rewritten to use Django's new form-handling library and redesigned with extensibility and customization in mind."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:135
# 2841c3c97266460ab08c20f5d097b25b
msgid "Practically, this means you'll need to rewrite all of your ``class Admin`` declarations. You've already seen in `models`_ above how to replace your ``class Admin`` with a ``admin.site.register()`` call in an ``admin.py`` file. Below are some more details on how to rewrite that ``Admin`` declaration into the new syntax."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:142
# 7c1ecd61d0e04d49b561a92066c6dfc5
msgid "Use new inline syntax"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:144
# 3cb8b4bd154f4b42b5fe41e99dd68ba2
msgid "The new ``edit_inline`` options have all been moved to ``admin.py``. Here's an example:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:147
#: ../../releases/1.0-porting-guide.txt:176
#: ../../releases/1.0-porting-guide.txt:484
#: ../../releases/1.0-porting-guide.txt:506
#: ../../releases/1.0-porting-guide.txt:523
#: ../../releases/1.0-porting-guide.txt:649
# 8a2a48a3d4394bcaa26fb03327bb314b
# 8202b26a1fc649afad67ef79cfc1ef52
# 7bb85d5f92684b52ac76f783ee8a783d
# 0a982df1d7954f9c8ec056c8af1ce8d1
# 16fac22fffad4514825b610eb6ffd13e
# 292ec9bd047147488f077c6f0e547fec
msgid "Old (0.96)::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:156
#: ../../releases/1.0-porting-guide.txt:196
#: ../../releases/1.0-porting-guide.txt:491
#: ../../releases/1.0-porting-guide.txt:512
#: ../../releases/1.0-porting-guide.txt:529
#: ../../releases/1.0-porting-guide.txt:655
# dc877ccbf5344c61b70f45e4faa63c99
# e5c766245cf34fdd925a0bc30932f76e
# e92c2cbc78044155bc469822d15952ac
# 17408421816b4c59a4f2f24adfdfacc7
# b2bf70b02a424ac0b9b4928b39b53d38
# e3c6d792293b4a8a9f79ee71ed981367
msgid "New (1.0)::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:168
# e117602fa9c84a54937ff0a3ca57782e
msgid "See :ref:`admin-inlines` for more details."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:171
# 7f72d1ea46454515b932d3e99f54950f
msgid "Simplify ``fields``, or use ``fieldsets``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:173
# 7fedc265dff94d228122473ec40a9604
msgid "The old ``fields`` syntax was quite confusing, and has been simplified. The old syntax still works, but you'll need to use ``fieldsets`` instead."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:210
# 7234c571b5c544a8811b0c42064b0a90
msgid "More detailed information about the changes and the reasons behind them can be found on the `NewformsAdminBranch wiki page`__"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:213
# efb9a008c52446dbb1ce46a95253bd9c
msgid "The new admin comes with a ton of new features; you can read about them in the :doc:`admin documentation </ref/contrib/admin/index>`."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:219
# 568cf3ecf3dd492992cb135b0ab43525
msgid "URLs"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:222
# f5b08361e5934ae6bdb206d580b99b26
msgid "Update your root ``urls.py``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:224
# ae728ce717fb4796a5a7888fcd87a09c
msgid "If you're using the admin site, you need to update your root ``urls.py``."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:226
# 03b1b93b955f4a9db6c3ca76103310f9
msgid "Old (0.96) ``urls.py``::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:236
# 9f11b9bd7d4d4f23a26b6dae7c6c09fd
msgid "New (1.0) ``urls.py``::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:251
# ce18c175c0a14e80a5df8b5bcfb35d9a
msgid "Views"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:254
# 4ef979f0c9704ab4b2eec6f6886bfb80
msgid "Use ``django.forms`` instead of ``newforms``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:256
# 22591fb252c14da98cdf2639bc225300
msgid "Replace ``django.newforms`` with ``django.forms`` -- Django 1.0 renamed the ``newforms`` module (introduced in 0.96) to plain old ``forms``. The ``oldforms`` module was also removed."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:260
# 64f9ef8c752d4db08bc4342dd4ae880e
msgid "If you're already using the ``newforms`` library, and you used our recommended ``import`` statement syntax, all you have to do is change your import statements."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:264
# 84c7770a9c3241eb8f48bd00426120a9
msgid "Old::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:268
# b2d3d259f3314812b2e59abf4ea917e0
msgid "New::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:272
# bace840bafc04a98b589e2498b2a2097
msgid "If you're using the old forms system (formerly known as ``django.forms`` and ``django.oldforms``), you'll have to rewrite your forms. A good place to start is the :doc:`forms documentation </topics/forms/index>`"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:277
# 8a6215de17b64678acee31e643e6358f
msgid "Handle uploaded files using the new API"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:279
# 30d319f2513c46cb876871f1a3894dca
msgid "Replace use of uploaded files -- that is, entries in ``request.FILES`` -- as simple dictionaries with the new :class:`~django.core.files.uploadedfile.UploadedFile`. The old dictionary syntax no longer works."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:284
# c8b6c3f68ce740bdbf06a38aa8fc28f3
msgid "Thus, in a view like::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:290
# e92f9053960d41499b941685e9602b47
msgid "...you'd need to make the following changes:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:293
#: ../../releases/1.0-porting-guide.txt:310
#: ../../releases/1.0-porting-guide.txt:382
#: ../../releases/1.0-porting-guide.txt:741
# be52636e5ab04f55bba502124d326aef
# 26b5ed8e4f054e4ca185b1dfa597adb8
# df9c23a8a7a54bef8fd59c5196608e4c
# 70b4776eeac4429d8f45336011b2810e
msgid "Old (0.96)"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:293
#: ../../releases/1.0-porting-guide.txt:310
#: ../../releases/1.0-porting-guide.txt:382
#: ../../releases/1.0-porting-guide.txt:741
# 8911c8e3fea047d89f27491f444f7bb4
# 882716316c6b4ae7b550ff163b238c41
# df82cc52e67f43a491f830c0f0a3e10d
# 2ddbfc819df84897ac0227a548d0a647
msgid "New (1.0)"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:295
# a4cd8d6c455348f9b6452e344a639484
msgid "``f['content']``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:295
# 75ebfdf402464408bb510e817f4ffa46
msgid "``f.read()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:296
# b1357852bf134206882b5e09714a6846
msgid "``f['filename']``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:296
# 27affe98d0fb4f7eba52878f16415ab4
msgid "``f.name``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:297
# b4f4337e1798486e9602b2a1f7c1d090
msgid "``f['content-type']``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:297
# c1b5349b730c46dca52575183c49b39e
msgid "``f.content_type``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:301
# e2532206862f48e497d640b8aecb8003
msgid "Work with file fields using the new API"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:303
# 410f001f4b534d7db33c5184eace6230
msgid "The internal implementation of :class:`django.db.models.FileField` have changed. A visible result of this is that the way you access special attributes (URL, filename, image size, etc) of these model fields has changed. You will need to make the following changes, assuming your model's :class:`~django.db.models.FileField` is called ``myfile``:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:312
# 1dc4a3650e9a46b79dbf82da29354755
msgid "``myfile.get_content_filename()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:312
# e75b01d778444057bcb377ff779a10bb
msgid "``myfile.content.path``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:313
# 5dbf6b6101c746df9f15f7bdca2ec420
msgid "``myfile.get_content_url()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:313
# 774a4633b9b5435ba97e70ca642ab750
msgid "``myfile.content.url``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:314
# 717ea018bd5141e7a8da5db89196251d
msgid "``myfile.get_content_size()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:314
# d48d9ba305b94da194bbf27f73deb7e3
msgid "``myfile.content.size``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:315
# ba242e61f6334a2db7b362e055deed50
msgid "``myfile.save_content_file()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:315
# 0f22044af8b24c91b8de44fdef3fe73b
msgid "``myfile.content.save()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:316
# 133068d77c2140e8813fdf29768f4887
msgid "``myfile.get_content_width()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:316
# ccb2af2b1b8d4e0fa1ce87aed353289d
msgid "``myfile.content.width``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:317
# 2f1e439813d147d4aeb742d4fff327cf
msgid "``myfile.get_content_height()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:317
# c19c04b05b514210adce1112ae1a80e4
msgid "``myfile.content.height``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:320
# 6daeebc6dd30459da213d01edd5a65cd
msgid "Note that the ``width`` and ``height`` attributes only make sense for :class:`~django.db.models.ImageField` fields. More details can be found in the :doc:`model API </ref/models/fields>` documentation."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:325
# 6264463c3f944a44aaa717d86c6403f0
msgid "Use ``Paginator`` instead of ``ObjectPaginator``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:327
# 9cf664b60e1f44ac8da7dbccf4a767b9
msgid "The ``ObjectPaginator`` in 0.96 has been removed and replaced with an improved version, :class:`django.core.paginator.Paginator`."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:331
# dd795b49dab840ab8bf3f8f2ca4d31f7
msgid "Templates"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:334
# 7db3e18454ae40fba5fc9d4d244c6406
msgid "Learn to love autoescaping"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:336
# bf6ccd3cc2cc46a48c48d06bb5786c76
msgid "By default, the template system now automatically HTML-escapes the output of every variable. To learn more, see :ref:`automatic-html-escaping`."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:339
# e4776f783db34fc5b2aafced46013f82
msgid "To disable auto-escaping for an individual variable, use the :tfilter:`safe` filter:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:347
# bb0a94056d864c7cb70b7b6672b0ec42
msgid "To disable auto-escaping for an entire template, wrap the template (or just a particular section of the template) in the :ttag:`autoescape` tag:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:357
# 38def933b85d4d309043e976fcd2f87c
msgid "Less-common changes"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:359
# e63810f2ee0b4a4ca77e731b613f38a0
msgid "The following changes are smaller, more localized changes. They should only affect more advanced users, but it's probably worth reading through the list and checking your code for these things."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:364
# 6c6a43fb6ce34fc6a687d6bffca853dd
msgid "Signals"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:366
# dbb4dd167d404b0b8072db35744fdd51
msgid "Add ``**kwargs`` to any registered signal handlers."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:368
# 28d91cfeab534613b00bc06c3b5cc467
msgid "Connect, disconnect, and send signals via methods on the :class:`~django.dispatch.Signal` object instead of through module methods in ``django.dispatch.dispatcher``."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:372
# 04dadbcaa3d044558624427ec780424c
msgid "Remove any use of the ``Anonymous`` and ``Any`` sender options; they no longer exist. You can still receive signals sent by any sender by using ``sender=None``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:376
# e62f736e3c804632ba13482082c2a9b9
msgid "Make any custom signals you've declared into instances of :class:`django.dispatch.Signal` instead of anonymous objects."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:379
# 4a7ee6599b544bebb495b3ed94fde291
msgid "Here's quick summary of the code changes you'll need to make:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:384
# 83740becb0824fe1b1ee0e532035ce76
msgid "``def callback(sender)``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:384
# 60ec8203c36f41cb8eefb4e8615d56e0
msgid "``def callback(sender, **kwargs)``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:385
# 050332b969df46bd9834cb1f83522d65
msgid "``sig = object()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:385
# 7500506d2d6646168de630ea293a59c6
msgid "``sig = django.dispatch.Signal()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:386
# 12cf629e98ef42a794ea4b8e2108e53f
msgid "``dispatcher.connect(callback, sig)``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:386
# 2098dec029bc4d6f91da89ef7610a6f2
msgid "``sig.connect(callback)``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:387
# 730eb96aefe34925bf8bbb8e99a84337
msgid "``dispatcher.send(sig, sender)``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:387
# 7e4cc66b7dff4ba19de18798508a1808
msgid "``sig.send(sender)``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:388
# 305cede791654536b23f7078cc7049a8
msgid "``dispatcher.connect(callback, sig, sender=Any)``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:388
# 0516af2b4621407c8dac96b92c29ff67
msgid "``sig.connect(callback, sender=None)``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:392
# e5e6b84ec5e74356bdd6ef03e15eeecd
msgid "Comments"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:394
# 83d57967736947849abb0398058115ba
msgid "If you were using Django 0.96's ``django.contrib.comments`` app, you'll need to upgrade to the new comments app introduced in 1.0. See the upgrade guide for details."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:399
# 35cda97d5ce24cc1a5b5ed367c463c44
msgid "Template tags"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:402
# 0543101d6454498a8e313a0863625e4b
msgid ":ttag:`spaceless` tag"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:404
# 0b23fa55601548d883a53d7056c20ec6
msgid "The spaceless template tag now removes *all* spaces between HTML tags, instead of preserving a single space."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:408
# 73034f7a9bd44405a8258617b00490a5
msgid "Local flavors"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:411
# c6f846a3511e4a7d821292371748f601
msgid "U.S. local flavor"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:413
# dd4038ee9a044b9ab27e185286e469f4
msgid "``django.contrib.localflavor.usa`` has been renamed to ``django.contrib.localflavor.us``. This change was made to match the naming scheme of other local flavors. To migrate your code, all you need to do is change the imports."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:419
# 1461281aae224667b85cded482b25362
msgid "Sessions"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:422
# 5dcd34956c444ea4805ab4b7a3666cd5
msgid "Getting a new session key"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:424
# fa9f558583424202a943b69a3c05540c
msgid "``SessionBase.get_new_session_key()`` has been renamed to ``_get_new_session_key()``. ``get_new_session_object()`` no longer exists."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:428
# 829bedd8b82b4e27b473427c7c9451d8
msgid "Fixtures"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:431
# 99a478e7025e4e9baa3f467008af51a3
msgid "Loading a row no longer calls ``save()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:433
# 37c4dfc6c2754e059e584978eec2372a
msgid "Previously, loading a row automatically ran the model's ``save()`` method. This is no longer the case, so any fields (for example: timestamps) that were auto-populated by a ``save()`` now need explicit values in any fixture."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:438
# 78af02db947c441091e81dc1a0f832a3
msgid "Settings"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:441
# c7f2e14b0ba742eebd621a9ade7c6087
msgid "Better exceptions"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:443
# 5481bb08cf744c278514f2db2168acaf
msgid "The old :exc:`~exceptions.EnvironmentError` has split into an :exc:`~exceptions.ImportError` when Django fails to find the settings module and a :exc:`~exceptions.RuntimeError` when you try to reconfigure settings after having already used them."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:449
# cefb2588d40f4bb197c65919b1898fa3
msgid ":setting:`LOGIN_URL` has moved"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:451
# 6ef64c69267a4a2cb755addb95962b27
msgid "The :setting:`LOGIN_URL` constant moved from ``django.contrib.auth`` into the ``settings`` module. Instead of using ``from django.contrib.auth import LOGIN_URL`` refer to :setting:`settings.LOGIN_URL <LOGIN_URL>`."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:456
# fb0f2b06bf124636b1af43bef2f1f0f3
msgid ":setting:`APPEND_SLASH` behavior has been updated"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:458
# 0ab8c5dddba74d5ca36708cd90a5f762
msgid "In 0.96, if a URL didn't end in a slash or have a period in the final component of its path, and :setting:`APPEND_SLASH` was True, Django would redirect to the same URL, but with a slash appended to the end. Now, Django checks to see whether the pattern without the trailing slash would be matched by something in your URL patterns. If so, no redirection takes place, because it is assumed you deliberately wanted to catch that pattern."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:465
# 119c0109610f42c7a87d8b28656874d4
msgid "For most people, this won't require any changes. Some people, though, have URL patterns that look like this::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:470
# dbaca267382e4d69b469da8d27495cca
msgid "Previously, those patterns would have been redirected to have a trailing slash. If you always want a slash on such URLs, rewrite the pattern as::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:476
# a77210cd95994f9ba0b258a95c5ebbc7
msgid "Smaller model changes"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:479
# b3f985be17fe4e268d234f78351065bc
msgid "Different exception from ``get()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:481
# c8f65afd01fb49f098bf1a4c2a0d9e90
msgid "Managers now return a :exc:`~django.core.exceptions.MultipleObjectsReturned` exception instead of :exc:`~exceptions.AssertionError`:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:499
# bcd0279fb9184ab2a31b6e868835fa57
msgid "``LazyDate`` has been fired"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:501
# d05012d40832461d95301d4b740f5f65
msgid "The ``LazyDate`` helper class no longer exists."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:503
# 0361445f77224081a5bfa0425e41a114
msgid "Default field values and query arguments can both be callable objects, so instances of ``LazyDate`` can be replaced with a reference to ``datetime.datetime.now``:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:521
# 70cdf28d145c4115968a9fdfba797e34
msgid "``DecimalField`` is new, and ``FloatField`` is now a proper float"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:535
# e7f7c0fb85c442f4b872f10ff1e3d7c9
msgid "If you forget to make this change, you will see errors about ``FloatField`` not taking a ``max_digits`` attribute in ``__init__``, because the new ``FloatField`` takes no precision-related arguments."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:539
# 7e29df52d4e14a978d11fa154292e5a2
msgid "If you're using MySQL or PostgreSQL, no further changes are needed. The database column types for ``DecimalField`` are the same as for the old ``FloatField``."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:543
# c9521e2786994755934ad07918f64f47
msgid "If you're using SQLite, you need to force the database to view the appropriate columns as decimal types, rather than floats. To do this, you'll need to reload your data. Do this after you have made the change to using ``DecimalField`` in your code and updated the Django code."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:550
# 9f7c9a44d9ca48af9faa5423656f36c9
msgid "**Back up your database first!**"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:552
# 3a41659233d34d6b97e0258dfe04dcc7
msgid "For SQLite, this means making a copy of the single file that stores the database (the name of that file is the ``DATABASE_NAME`` in your settings.py file)."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:556
# 9a88b3d6daeb40b7940db061b6bc3289
msgid "To upgrade each application to use a ``DecimalField``, you can do the following, replacing ``<app>`` in the code below with each app's name:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:565
# 380d46e9cc494e9b8deff3e004abcaa2
msgid "Notes:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:567
# 55e7eb58f59e45379bd08ff59dc39434
msgid "It's important that you remember to use XML format in the first step of this process. We are exploiting a feature of the XML data dumps that makes porting floats to decimals with SQLite possible."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:571
# 0d9993ea9da14e4b86187fcf53fff8ca
msgid "In the second step you will be asked to confirm that you are prepared to lose the data for the application(s) in question. Say yes; we'll restore this data in the third step, of course."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:575
# a1186a3e1caf4b45acc3b8cd748bc152
msgid "``DecimalField`` is not used in any of the apps shipped with Django prior to this change being made, so you do not need to worry about performing this procedure for any of the standard Django models."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:579
# 6ccd1cb7c0e34eedb720ef6be83b0072
msgid "If something goes wrong in the above process, just copy your backed up database file over the original file and start again."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:583
# 3e6e20711ae0430aaf299680454e3085
msgid "Internationalization"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:586
# a267cbbf76154cee9286e4f20689c984
msgid ":func:`django.views.i18n.set_language` now requires a POST request"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:588
# b47c1b871f10443aa0c4ae23500a66f2
msgid "Previously, a GET request was used. The old behavior meant that state (the locale used to display the site) could be changed by a GET request, which is against the HTTP specification's recommendations. Code calling this view must ensure that a POST request is now made, instead of a GET. This means you can no longer use a link to access the view, but must use a form submission of some kind (e.g. a button)."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:596
# 4a83d733b2fc4c2ca4e89107bf28d254
msgid "``_()`` is no longer in builtins"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:598
# ee3b25c5bbc3427cbc8059135cfd34b4
msgid "``_()`` (the callable object whose name is a single underscore) is no longer monkeypatched into builtins -- that is, it's no longer available magically in every module."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:602
# 4a34262bcbd1422d87114e88def6b060
msgid "If you were previously relying on ``_()`` always being present, you should now explicitly import ``ugettext`` or ``ugettext_lazy``, if appropriate, and alias it to ``_`` yourself::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:609
# ce5dc36d834a42cba2dcbffd2b903612
msgid "HTTP request/response objects"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:612
# 58c5fbcc011348168a2336ce1bf5c38b
msgid "Dictionary access to ``HttpRequest``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:614
# 7761a7f6b2b542abafa797cc5516cb4d
msgid "``HttpRequest`` objects no longer directly support dictionary-style access; previously, both ``GET`` and ``POST`` data were directly available on the ``HttpRequest`` object (e.g., you could check for a piece of form data by using ``if 'some_form_key' in request`` or by reading ``request['some_form_key']``. This is no longer supported; if you need access to the combined ``GET`` and ``POST`` data, use ``request.REQUEST`` instead."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:622
# 373703244d7b40b2846842d67a62d60c
msgid "It is strongly suggested, however, that you always explicitly look in the appropriate dictionary for the type of request you expect to receive (``request.GET`` or ``request.POST``); relying on the combined ``request.REQUEST`` dictionary can mask the origin of incoming data."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:628
# 8f8c13b384e540de9b3a9639c49e6d0c
msgid "Accessing ``HTTPResponse`` headers"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:630
# 3b48d20edcf14fbe8ede63ded6102671
msgid "``django.http.HttpResponse.headers`` has been renamed to ``_headers`` and :class:`~django.http.HttpResponse` now supports containment checking directly. So use ``if header in response:`` instead of ``if header in response.headers:``."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:635
# 13b0166015344c59b89b8b98ae9d533a
msgid "Generic relations"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:638
# fcb4997824924e5aaa5ab36fd2e1c36c
msgid "Generic relations have been moved out of core"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:640
# a290a1ecfbda473d96a01367fdad8aa5
msgid "The generic relation classes -- ``GenericForeignKey`` and ``GenericRelation`` -- have moved into the :mod:`django.contrib.contenttypes` module."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:644
# 5cdc8412f48941af9ec4f564416e75c4
msgid "Testing"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:647
# b462b0d3d3df44dfb25f163d94f6e80a
msgid ":meth:`django.test.client.Client.login` has changed"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:661
# 7822276822f849e18d3377b3e2838cc4
msgid "Management commands"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:664
# 92cb275d4a284fa8aad6877144b2aa1a
msgid "Running management commands from your code"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:666
# 3b9d07d3286249b1add68bd23c9e97f7
msgid ":mod:`django.core.management` has been greatly refactored."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:668
# d4483cdcec384505b3808fc3d26bdd12
msgid "Calls to management services in your code now need to use ``call_command``. For example, if you have some test code that calls flush and load_data::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:676
# 417543fd5a3044f7b45158b5530b28c9
msgid "...you'll need to change this code to read::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:683
# 075e1587dc0744c598d7875bafd1bce4
msgid "Subcommands must now precede options"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:685
# 2fa6557aeab642ee892f2b2f4a9c796b
msgid "``django-admin.py`` and ``manage.py`` now require subcommands to precede options. So:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:692
# 13ebd02aec414b9180fd4bed272d3521
msgid "...no longer works and should be changed to:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:699
# b8f7aeceb58b4bb1ad82585e9bbcd643
msgid "Syndication"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:702
# d25ac4a18fac472f822d5e135bf8f229
msgid "``Feed.__init__`` has changed"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:704
# 2c6e7efdd29a47f59fc02934f28c075f
msgid "The ``__init__()`` method of the syndication framework's ``Feed`` class now takes an ``HttpRequest`` object as its second parameter, instead of the feed's URL. This allows the syndication framework to work without requiring the sites framework. This only affects code that subclasses ``Feed`` and overrides the ``__init__()`` method, and code that calls ``Feed.__init__()`` directly."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:711
# a8d291c48a3047d08511f5a1adbbc931
msgid "Data structures"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:714
# 2b1916fa13284e0bbb30f8317f9cc7ea
msgid "``SortedDictFromList`` is gone"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:716
# 753bc15dafb84131b0f01d6194bd62d3
msgid "``django.newforms.forms.SortedDictFromList`` was removed. :class:`django.utils.datastructures.SortedDict` can now be instantiated with a sequence of tuples."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:720
# 7a1ec41865e94c7c8a534ccfd1f08f1e
msgid "To update your code:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:722
# d3d76714f0004fb5adeb7a5155a07497
msgid "Use :class:`django.utils.datastructures.SortedDict` wherever you were using ``django.newforms.forms.SortedDictFromList``."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:725
# fa951be33ec044988233a80b12e8aa51
msgid "Because ``django.utils.datastructures.SortedDict.copy`` doesn't return a deepcopy as ``SortedDictFromList.copy()`` did, you will need to update your code if you were relying on a deepcopy. Do this by using ``copy.deepcopy`` directly."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:731
# b59eb7f65f5746f1b0d68f1ebd83e514
msgid "Database backend functions"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:734
# 990eef97cceb4c1481afd1f3ca1d37a7
msgid "Database backend functions have been renamed"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:736
# 2a594b27f46146ee9af715fc3cb9fc30
msgid "Almost *all* of the database backend-level functions have been renamed and/or relocated. None of these were documented, but you'll need to change your code if you're using any of these functions, all of which are in :mod:`django.db`:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:743
# 1bf2e2fb53c240cb904bdb162fe03557
msgid "``backend.get_autoinc_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:743
# c763b42fd0ed43de974047838c985749
msgid "``connection.ops.autoinc_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:744
# 361f9a40957842c9bbed0c190de9f57f
msgid "``backend.get_date_extract_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:744
# 5c30c75b64ec48ecb59cc9e2643b753f
msgid "``connection.ops.date_extract_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:745
# 13bf570aa1b947f1ace5bee78084b7ab
msgid "``backend.get_date_trunc_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:745
# aee5fb03c13944e2a8b7ce3e15b0a441
msgid "``connection.ops.date_trunc_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:746
# 05cb13f091084a0d8846a557569bfdf8
msgid "``backend.get_datetime_cast_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:746
# 39ec8831f3df4560b4657d28698fa506
msgid "``connection.ops.datetime_cast_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:747
# e982b6a887034843af1add0b29e49be2
msgid "``backend.get_deferrable_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:747
# 830d93245a15434287df1fa60dba47e0
msgid "``connection.ops.deferrable_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:748
# 6aeafe4f0567418f95cbd019a41e04c2
msgid "``backend.get_drop_foreignkey_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:748
# 8f2d5b24b5f84deda00da2ff706759aa
msgid "``connection.ops.drop_foreignkey_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:749
# 11009ebd988147e997c3e0a6e7931de5
msgid "``backend.get_fulltext_search_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:749
# 3ad8a47d91834319a21314e140f602f8
msgid "``connection.ops.fulltext_search_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:750
# 834c926cb3e54fda962de8949cb8a0f1
msgid "``backend.get_last_insert_id``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:750
# fb42999dd3074f4abecefc76528a396d
msgid "``connection.ops.last_insert_id``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:751
# d8e619cfbc674293a6e18f999b3958f7
msgid "``backend.get_limit_offset_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:751
# 8f1876da289446a2b1bfc345e8b62105
msgid "``connection.ops.limit_offset_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:752
# 40663b88ff8844a1b663b89183c1c377
msgid "``backend.get_max_name_length``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:752
# 90b2e8c48de847d28759db34aade531c
msgid "``connection.ops.max_name_length``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:753
# 4e7a49144739430b96adcefc0ee3c5ce
msgid "``backend.get_pk_default_value``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:753
# f7b08852493d46c9b133bf6128d19d76
msgid "``connection.ops.pk_default_value``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:754
# 66ce1e2f48974a87a5aeae20b344edba
msgid "``backend.get_random_function_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:754
# 3768f098e2e84955a70492ef36540be3
msgid "``connection.ops.random_function_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:755
# 2e044e048acc48379921d65f77eb89c9
msgid "``backend.get_sql_flush``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:755
# c4944f71755844ba91d8bc041dc1ae3d
msgid "``connection.ops.sql_flush``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:756
# c4dccc75bc3442458d2486a327f7eaab
msgid "``backend.get_sql_sequence_reset``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:756
# 335a63d2688440e78e64661e104fd185
msgid "``connection.ops.sequence_reset_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:757
# 3339ac9af2a84e288307c37b750c520e
msgid "``backend.get_start_transaction_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:757
# babba8d4443c43f28d109670ca76fe69
msgid "``connection.ops.start_transaction_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:758
# f6a640a66f6e4fe4b3628f44eab7952f
msgid "``backend.get_tablespace_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:758
# ac626c43884a4131924d43621ea019d5
msgid "``connection.ops.tablespace_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:759
# ccd0de8d22b0460eacf967bec159ce71
msgid "``backend.quote_name``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:759
# a7f9a5ce879d40a0a13d101a7cdd9aa7
msgid "``connection.ops.quote_name``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:760
# 08fcc40644b24c72bc322fde8efa1ae8
msgid "``backend.get_query_set_class``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:760
# 23686554d2e54ada89dfb00adab6f43d
msgid "``connection.ops.query_set_class``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:761
# 7372ca0a717f41809882e2ed069a5f60
msgid "``backend.get_field_cast_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:761
# 786ad528b3264faebf367a61c70b7234
msgid "``connection.ops.field_cast_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:762
# 1d843a8d9c924449adf9b4ea5fe23c0c
msgid "``backend.get_drop_sequence``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:762
# ecf20466818b4ac7b4efa58cd8eb871a
msgid "``connection.ops.drop_sequence_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:763
# 9f2d433568ac4d54bbb9ae0be3e3daf0
msgid "``backend.OPERATOR_MAPPING``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:763
# 116d02833b064122a109418ede981aa2
msgid "``connection.operators``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:764
# 565a46be02434860953dff0b0e179418
msgid "``backend.allows_group_by_ordinal``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:764
# 368d8c02585b461da9e2b05b9d6db844
msgid "``connection.features.allows_group_by_ordinal``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:765
# 689b276fa7cb41acb063058b8b5d1ffe
msgid "``backend.allows_unique_and_pk``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:765
# eb364643f62147939965e26cf102e15a
msgid "``connection.features.allows_unique_and_pk``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:766
# 83fbe00d8c384158bf938fcf76108a60
msgid "``backend.autoindexes_primary_keys``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:766
# c421fe8670b3493eb427103a31f25d6a
msgid "``connection.features.autoindexes_primary_keys``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:767
# 982608d0a6324610b234e3628586e35b
msgid "``backend.needs_datetime_string_cast``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:767
# 890eed0697db4732b57cde7c49cb09b6
msgid "``connection.features.needs_datetime_string_cast``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:768
# 9c909649a3884335bcf3f3a8d038a850
msgid "``backend.needs_upper_for_iops``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:768
# 189ee4f4819248efa3bb66289147c612
msgid "``connection.features.needs_upper_for_iops``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:769
# 84d074eb5e3944f7a0bbe4c151f67ceb
msgid "``backend.supports_constraints``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:769
# e2a332265c844602a7782b8eca13bd57
msgid "``connection.features.supports_constraints``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:770
# 75888a1e7caa4aaea39e1ebcaca34d73
msgid "``backend.supports_tablespaces``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:770
# 772861832e9c406790295537416325df
msgid "``connection.features.supports_tablespaces``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:771
# f383c1f949f44a37b3c593ce8b504a01
msgid "``backend.uses_case_insensitive_names``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:771
# 9f99569a2d47415fa7e3b50e05f92979
msgid "``connection.features.uses_case_insensitive_names``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:772
# 4d340db3ee1d44388e50a2f288a9418e
msgid "``backend.uses_custom_queryset``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:772
# 06691c998a764f738b8678c5a5b36518
msgid "``connection.features.uses_custom_queryset``"
msgstr ""

#: ../../releases/1.0.1.txt:3
# 850ad69dc2a743bfa41b5ed678822e01
msgid "Django 1.0.1 release notes"
msgstr ""

#: ../../releases/1.0.1.txt:5
# 78bd910f1ea849d0aed23c9c92f3f465
msgid "Welcome to Django 1.0.1!"
msgstr ""

#: ../../releases/1.0.1.txt:7
# b2cdeadcda31437c9e7b94f3bfe5d311
msgid "This is the first \"bugfix\" release in the Django 1.0 series, improving the stability and performance of the Django 1.0 codebase. As such, Django 1.0.1 contains no new features (and, pursuant to :doc:`our compatibility policy </misc/api-stability/>`, maintains backwards compatibility with Django 1.0), but does contain a number of fixes and other improvements. Django 1.0.1 is a recommended upgrade for any development or deployment currently using or targeting Django 1.0."
msgstr ""

#: ../../releases/1.0.1.txt:17
# 060ca6edb510434d933285c41ee17dbf
msgid "Fixes and improvements in Django 1.0.1"
msgstr ""

#: ../../releases/1.0.1.txt:19
# fcafa3d080a04da89bb6dcad969fcefe
msgid "Django 1.0.1 contains over two hundred fixes to the original Django 1.0 codebase; full details of every fix are available in `the history of the 1.0.X branch`_, but here are some of the highlights:"
msgstr ""

#: ../../releases/1.0.1.txt:24
# eb82ffe6190446d2b61c266a39a3db58
msgid "Several fixes in ``django.contrib.comments``, pertaining to RSS feeds of comments, default ordering of comments and the XHTML and internationalization of the default templates for comments."
msgstr ""

#: ../../releases/1.0.1.txt:28
# 4760655205a44b118d94e405dad7ad09
msgid "Multiple fixes for Django's support of Oracle databases, including pagination support for GIS QuerySets, more efficient slicing of results and improved introspection of existing databases."
msgstr ""

#: ../../releases/1.0.1.txt:32
# b7e104a698bd49a588af3fb7aade5b25
msgid "Several fixes for query support in the Django object-relational mapper, including repeated setting and resetting of ordering and fixes for working with ``INSERT``-only queries."
msgstr ""

#: ../../releases/1.0.1.txt:36
# c511c908947a459bb2135b5d2227fe59
msgid "Multiple fixes for inline forms in formsets."
msgstr ""

#: ../../releases/1.0.1.txt:38
# 7e1782450853447e9dca4244e147ffe6
msgid "Multiple fixes for ``unique`` and ``unique_together`` model constraints in automatically-generated forms."
msgstr ""

#: ../../releases/1.0.1.txt:41
# c5def62829c145b18939e8e6f071dfd5
msgid "Fixed support for custom callable ``upload_to`` declarations when handling file uploads through automatically-generated forms."
msgstr ""

#: ../../releases/1.0.1.txt:44
# 2d60215afb3f4792a9355daea9196f2c
msgid "Fixed support for sorting an admin change list based on a callable attributes in ``list_display``."
msgstr ""

#: ../../releases/1.0.1.txt:47
# 5f9013d6eeb0446a9b81c4294fefb3a7
msgid "A fix to the application of autoescaping for literal strings passed to the ``join`` template filter. Previously, literal strings passed to ``join`` were automatically escaped, contrary to :ref:`the documented behavior for autoescaping and literal strings <string-literals-and-automatic-escaping>`. Literal strings passed to ``join`` are no longer automatically escaped, meaning you must now manually escape them; this is an incompatibility if you were relying on this bug, but not if you were relying on escaping behaving as documented."
msgstr ""

#: ../../releases/1.0.1.txt:57
# 3d6c11880290412db934060ae975765d
msgid "Improved and expanded translation files for many of the languages Django supports by default."
msgstr ""

#: ../../releases/1.0.1.txt:60
# 37098f64971c4e17a3b53a7da581e8ab
msgid "And as always, a large number of improvements to Django's documentation, including both corrections to existing documents and expanded and new documentation."
msgstr ""

#: ../../releases/1.0.2.txt:3
# e34ef9d9b29a4f26ade676ebdd14f999
msgid "Django 1.0.2 release notes"
msgstr ""

#: ../../releases/1.0.2.txt:5
# f29a2741192148f58809ecde263d6a1e
msgid "Welcome to Django 1.0.2!"
msgstr ""

#: ../../releases/1.0.2.txt:7
# 7991b59ea1d5472d80f89d944b8be720
msgid "This is the second \"bugfix\" release in the Django 1.0 series, improving the stability and performance of the Django 1.0 codebase. As such, Django 1.0.2 contains no new features (and, pursuant to :doc:`our compatibility policy </misc/api-stability>`, maintains backwards compatibility with Django 1.0.0), but does contain a number of fixes and other improvements. Django 1.0.2 is a recommended upgrade for any development or deployment currently using or targeting Django 1.0."
msgstr ""

#: ../../releases/1.0.2.txt:17
# ebc74324d2c6477383d527770d4e2b32
msgid "Fixes and improvements in Django 1.0.2"
msgstr ""

#: ../../releases/1.0.2.txt:19
# 65047275d2a34162a4b7ce7f0b47380e
msgid "The primary reason behind this release is to remedy an issue in the recently-released Django 1.0.1; the packaging scripts used for Django 1.0.1 omitted some directories from the final release package, including one directory required by ``django.contrib.gis`` and part of Django's unit-test suite."
msgstr ""

#: ../../releases/1.0.2.txt:25
# e6057190e728421b880d809a405ab591
msgid "Django 1.0.2 contains updated packaging scripts, and the release package contains the directories omitted from Django 1.0.1. As such, this release contains all of the fixes and improvements from Django 1.0.1; see :doc:`the Django 1.0.1 release notes </releases/1.0.1>` for details."
msgstr ""

#: ../../releases/1.0.2.txt:31
# 77df4bb664ac4a19a542ad23c0d737f4
msgid "Additionally, in the period since Django 1.0.1 was released:"
msgstr ""

#: ../../releases/1.0.2.txt:33
# 72850b8a6b3b45f8a76ff95a19b7e947
msgid "Updated Hebrew and Danish translations have been added."
msgstr ""

#: ../../releases/1.0.2.txt:35
# 19f9992eb7dc429ab11102f88649758f
msgid "The default ``__repr__`` method of Django models has been made more robust in the face of bad Unicode data coming from the ``__unicode__`` method; rather than raise an exception in such cases, ``repr()`` will now contain the string \"[Bad Unicode data]\" in place of the invalid Unicode."
msgstr ""

#: ../../releases/1.0.2.txt:41
# 7ed869ba58f9456080fcba8db47743d2
msgid "A bug involving the interaction of Django's ``SafeUnicode`` class and the MySQL adapter has been resolved; ``SafeUnicode`` instances (generated, for example, by template rendering) can now be assigned to model attributes and saved to MySQL without requiring an explicit intermediate cast to ``unicode``."
msgstr ""

#: ../../releases/1.0.2.txt:47
# f15ce1e813a641bfb9d702f478c509e2
msgid "A bug affecting filtering on a nullable ``DateField`` in SQLite has been resolved."
msgstr ""

#: ../../releases/1.0.2.txt:50
# 0d98bff2c5234a5baa29856ba443b862
msgid "Several updates and improvements have been made to Django's documentation."
msgstr ""

#: ../../releases/1.1.txt:3
# 4cce738e226e48a4844133f84560c577
msgid "Django 1.1 release notes"
msgstr ""

#: ../../releases/1.1.txt:6
# baaa69de6b0d4d6188d6e79953dedf7a
msgid "July 29, 2009"
msgstr ""

#: ../../releases/1.1.txt:8
# 5e7b84c2795b4c69b6ca17ddd753b276
msgid "Welcome to Django 1.1!"
msgstr ""

#: ../../releases/1.1.txt:10
# 7d8aac30e3624db987cdb1be852e59e0
msgid "Django 1.1 includes a number of nifty `new features`_, lots of bug fixes, and an easy upgrade path from Django 1.0."
msgstr ""

#: ../../releases/1.1.txt:18
# 95becf5d9eed482192a8a4843dd4cdbc
msgid "Backwards-incompatible changes in 1.1"
msgstr ""

#: ../../releases/1.1.txt:20
# 09cc88c4ef314f4ca2665482bc4efe52
msgid "Django has a policy of :doc:`API stability </misc/api-stability>`. This means that, in general, code you develop against Django 1.0 should continue to work against 1.1 unchanged. However, we do sometimes make backwards-incompatible changes if they're necessary to resolve bugs, and there are a handful of such (minor) changes between Django 1.0 and Django 1.1."
msgstr ""

#: ../../releases/1.1.txt:26
# d6188a08400c46c589911d602876250f
msgid "Before upgrading to Django 1.1 you should double-check that the following changes don't impact you, and upgrade your code if they do."
msgstr ""

#: ../../releases/1.1.txt:30
# 70bdb31083ed47b28ac147c698438694
msgid "Changes to constraint names"
msgstr ""

#: ../../releases/1.1.txt:32
# d74d1394313f41eea1851691e7579619
msgid "Django 1.1 modifies the method used to generate database constraint names so that names are consistent regardless of machine word size. This change is backwards incompatible for some users."
msgstr ""

#: ../../releases/1.1.txt:36
# 69d3653d9b30475180338578643d16fb
msgid "If you are using a 32-bit platform, you're off the hook; you'll observe no differences as a result of this change."
msgstr ""

#: ../../releases/1.1.txt:39
# 2df20a8c529f401b85c47a9e7ce43f45
msgid "However, **users on 64-bit platforms may experience some problems** using the ``reset`` management command. Prior to this change, 64-bit platforms would generate a 64-bit, 16 character digest in the constraint name; for example::"
msgstr ""

#: ../../releases/1.1.txt:46
# b3aeca0a1d1f4ae79f15bc5c1144bf11
msgid "Following this change, all platforms, regardless of word size, will generate a 32-bit, 8 character digest in the constraint name; for example::"
msgstr ""

#: ../../releases/1.1.txt:51
# c52284251ab34aa6bbfe7d29d2d5dfe0
msgid "As a result of this change, you will not be able to use the ``reset`` management command on any table made by a 64-bit machine. This is because the the new generated name will not match the historically generated name; as a result, the SQL constructed by the reset command will be invalid."
msgstr ""

#: ../../releases/1.1.txt:56
# 39737682243046b5a8ce7c22fd840c9d
msgid "If you need to reset an application that was created with 64-bit constraints, you will need to manually drop the old constraint prior to invoking ``reset``."
msgstr ""

#: ../../releases/1.1.txt:61
# 0d99edcae52145bb8934170adcc7e9c0
msgid "Test cases are now run in a transaction"
msgstr ""

#: ../../releases/1.1.txt:63
# a1ab5c3472124ed3bfbc0bede6604de4
msgid "Django 1.1 runs tests inside a transaction, allowing better test performance (see `test performance improvements`_ for details)."
msgstr ""

#: ../../releases/1.1.txt:66
# 1bf0930857f84eba82ceda8cd713b95b
msgid "This change is slightly backwards incompatible if existing tests need to test transactional behavior, if they rely on invalid assumptions about the test environment, or if they require a specific test case ordering."
msgstr ""

#: ../../releases/1.1.txt:70
# 4a26b7a1f0284df097c4ec3255c087db
msgid "For these cases, :class:`~django.test.TransactionTestCase` can be used instead. This is a just a quick fix to get around test case errors revealed by the new rollback approach; in the long-term tests should be rewritten to correct the test case."
msgstr ""

#: ../../releases/1.1.txt:78
# 8c15905cfd2e48168c2eff1b6326d570
msgid "Removed ``SetRemoteAddrFromForwardedFor`` middleware"
msgstr ""

#: ../../releases/1.1.txt:80
# 67608dbbebb3481a9b68500638ebc102
msgid "For convenience, Django 1.0 included an optional middleware class -- ``django.middleware.http.SetRemoteAddrFromForwardedFor`` -- which updated the value of ``REMOTE_ADDR`` based on the HTTP ``X-Forwarded-For`` header commonly set by some proxy configurations."
msgstr ""

#: ../../releases/1.1.txt:85
# c899cc2d61e74701ac9c81436640447f
msgid "It has been demonstrated that this mechanism cannot be made reliable enough for general-purpose use, and that (despite documentation to the contrary) its inclusion in Django may lead application developers to assume that the value of ``REMOTE_ADDR`` is \"safe\" or in some way reliable as a source of authentication."
msgstr ""

#: ../../releases/1.1.txt:90
# cab95c3af40c4108ac542d4ed586f352
msgid "While not directly a security issue, we've decided to remove this middleware with the Django 1.1 release. It has been replaced with a class that does nothing other than raise a ``DeprecationWarning``."
msgstr ""

#: ../../releases/1.1.txt:94
# 18752ff590e74282a4436371d653b415
msgid "If you've been relying on this middleware, the easiest upgrade path is:"
msgstr ""

#: ../../releases/1.1.txt:96
# 58c2783ccec440c0a6ff840db86a3123
msgid "Examine `the code as it existed before it was removed`__."
msgstr ""

#: ../../releases/1.1.txt:98
# 765fcc8aa1724933b29a4d905f08216a
msgid "Verify that it works correctly with your upstream proxy, modifying it to support your particular proxy (if necessary)."
msgstr ""

#: ../../releases/1.1.txt:101
# a04330e4a8f94ec7bc95911ce6a46b5d
msgid "Introduce your modified version of ``SetRemoteAddrFromForwardedFor`` as a piece of middleware in your own project."
msgstr ""

#: ../../releases/1.1.txt:107
# c507d0011f474cd597fd9476136b280e
msgid "Names of uploaded files are available later"
msgstr ""

#: ../../releases/1.1.txt:111
# c29468b990c746d0b1f5700dfe2176d2
msgid "In Django 1.0, files uploaded and stored in a model's :class:`FileField` were saved to disk before the model was saved to the database. This meant that the actual file name assigned to the file was available before saving. For example, it was available in a model's pre-save signal handler."
msgstr ""

#: ../../releases/1.1.txt:116
# d7bf614c345b4a839c4e467b18567c88
msgid "In Django 1.1 the file is saved as part of saving the model in the database, so the actual file name used on disk cannot be relied on until *after* the model has been saved."
msgstr ""

#: ../../releases/1.1.txt:121
# 6683826ccbc7470ab0ce374e65b5133c
msgid "Changes to how model formsets are saved"
msgstr ""

#: ../../releases/1.1.txt:123
# 625bf0c1febe4aeaaf36c7e7291359d3
msgid "In Django 1.1, :class:`~django.forms.models.BaseModelFormSet` now calls ``ModelForm.save()``."
msgstr ""

#: ../../releases/1.1.txt:126
# 1296c711b1e2404ba3e4014b5345da14
msgid "This is backwards-incompatible if you were modifying ``self.initial`` in a model formset's ``__init__``, or if you relied on the internal ``_total_form_count`` or ``_initial_form_count`` attributes of BaseFormSet. Those attributes are now public methods."
msgstr ""

#: ../../releases/1.1.txt:132
# f28acd14c6294ffa94d22ff2ddb41619
msgid "Fixed the ``join`` filter's escaping behavior"
msgstr ""

#: ../../releases/1.1.txt:134
# ad278bdbb8f047d997f5c10251b6a02e
msgid "The :tfilter:`join` filter no longer escapes the literal value that is passed in for the connector."
msgstr ""

#: ../../releases/1.1.txt:137
# dedaffa132be4f95a0fe2593d3443ea6
msgid "This is backwards incompatible for the special situation of the literal string containing one of the five special HTML characters. Thus, if you were writing ``{{ foo|join:\"&\" }}``, you now have to write ``{{ foo|join:\"&amp;\" }}``."
msgstr ""

#: ../../releases/1.1.txt:141
# e6e718d2c27847a592a9daee963b16e7
msgid "The previous behavior was a bug and contrary to what was documented and expected."
msgstr ""

#: ../../releases/1.1.txt:145
# 1680b52172b74e7e8c76f0ef6ade2e46
msgid "Permanent redirects and the ``redirect_to()`` generic view"
msgstr ""

#: ../../releases/1.1.txt:147
# e4a3e12ad4194d8b84b1226a1239c369
msgid "Django 1.1 adds a ``permanent`` argument to the ``django.views.generic.simple.redirect_to()`` view. This is technically backwards-incompatible if you were using the ``redirect_to`` view with a format-string key called 'permanent', which is highly unlikely."
msgstr ""

#: ../../releases/1.1.txt:155
# c005f50a74ce4437aa88f0ebeb6ef73c
msgid "Features deprecated in 1.1"
msgstr ""

#: ../../releases/1.1.txt:157
# abf1f4efa38a4aa0a3a884f6ddc01cb2
msgid "One feature has been marked as deprecated in Django 1.1:"
msgstr ""

#: ../../releases/1.1.txt:159
# a46bdbef71f14478ab36c092bc9e5c39
msgid "You should no longer use ``AdminSite.root()`` to register that admin views. That is, if your URLconf contains the line::"
msgstr ""

#: ../../releases/1.1.txt:164
# abbfcad391834b8f89b60cc3a1c6a91b
msgid "You should change it to read::"
msgstr ""

#: ../../releases/1.1.txt:168
# 66c40f6edf9e4a5a985a0812db4fe6eb
msgid "You should begin to remove use of this feature from your code immediately."
msgstr ""

#: ../../releases/1.1.txt:170
# 48ae1645999a49b6804801794ccd230b
msgid "``AdminSite.root`` will raise a ``PendingDeprecationWarning`` if used in Django 1.1. This warning is hidden by default. In Django 1.2, this warning will be upgraded to a ``DeprecationWarning``, which will be displayed loudly. Django 1.3 will remove ``AdminSite.root()`` entirely."
msgstr ""

#: ../../releases/1.1.txt:175
# 6327ffdc93ab46ea9421511f4c2b7f74
msgid "For more details on our deprecation policies and strategy, see :doc:`/internals/release-process`."
msgstr ""

#: ../../releases/1.1.txt:179
# 50d4e8126cd8482cb052b7a132573ca9
msgid "What's new in Django 1.1"
msgstr ""

#: ../../releases/1.1.txt:181
# 65a3cb080ab742e9b032ec0e818785db
msgid "Quite a bit: since Django 1.0, we've made 1,290 code commits, fixed 1,206 bugs, and added roughly 10,000 lines of documentation."
msgstr ""

#: ../../releases/1.1.txt:184
# 577257cc85544a2e9dbf32eb29ba5424
msgid "The major new features in Django 1.1 are:"
msgstr ""

#: ../../releases/1.1.txt:187
#: ../../releases/1.1-alpha-1.txt:22
# 3e74f027a90e4b7b8be7b7019f41cf8c
# 59d7604cc18b413b900a4f434c9c1085
msgid "ORM improvements"
msgstr ""

#: ../../releases/1.1.txt:191
# 0ae301f0c1ce499285f40e413a540569
msgid "Two major enhancements have been added to Django's object-relational mapper (ORM): aggregate support, and query expressions."
msgstr ""

#: ../../releases/1.1.txt:195
#: ../../releases/1.1-alpha-1.txt:28
# 132fd250bacd4fe1a946202afaeac041
# b8c2adf2f3ef498e96097e4e4b53a882
msgid "Aggregate support"
msgstr ""

#: ../../releases/1.1.txt:197
#: ../../releases/1.1-alpha-1.txt:32
# d78114bc338a4f768c77cb8fbaf9ec3d
# 4301afd487944adcbf44a278616b67f2
msgid "It's now possible to run SQL aggregate queries (i.e. ``COUNT()``, ``MAX()``, ``MIN()``, etc.) from within Django's ORM. You can choose to either return the results of the aggregate directly, or else annotate the objects in a :class:`~django.db.models.query.QuerySet` with the results of the aggregate query."
msgstr ""

#: ../../releases/1.1.txt:203
#: ../../releases/1.1-alpha-1.txt:38
# 3c9a06e29c36439e8ad059c28d3a1e30
# a4655135c3f34f57bfc6fe190bdd353c
msgid "This feature is available as new :meth:`~django.db.models.query.QuerySet.aggregate` and :meth:`~django.db.models.query.QuerySet.annotate` methods, and is covered in detail in :doc:`the ORM aggregation documentation </topics/db/aggregation>`."
msgstr ""

#: ../../releases/1.1.txt:209
#: ../../releases/1.1-alpha-1.txt:44
# 58cbd13c484241128bf5f4f546dbd626
# eb60eb7ad8d247d9ac193bb15ac4689b
msgid "Query expressions"
msgstr ""

#: ../../releases/1.1.txt:211
# 404ca40e973d47b39c94b88a2928e9df
msgid "Queries can now refer to a another field on the query and can traverse relationships to refer to fields on related models. This is implemented in the new :class:`~django.db.models.F` object; for full details, including examples, consult the :ref:`documentation for F expressions <query-expressions>`."
msgstr ""

#: ../../releases/1.1.txt:217
#: ../../releases/1.1-beta-1.txt:27
# 5e7874573f4343878709df11b1cc4206
# 2629f9abdc244ed789b959b627432074
msgid "Model improvements"
msgstr ""

#: ../../releases/1.1.txt:219
#: ../../releases/1.1-beta-1.txt:31
# 72e0af9e974d4aebb28aa155643421a2
# c389cb3178fb4098bc52c64cf7b7473c
msgid "A number of features have been added to Django's model layer:"
msgstr ""

#: ../../releases/1.1.txt:222
#: ../../releases/1.1-beta-1.txt:34
# d7aaf3a74d4a43cbbae17bd36e08bdb1
# 16b919d48f544bb2972af8e5bfb9228c
msgid "\"Unmanaged\" models"
msgstr ""

#: ../../releases/1.1.txt:224
# 23369555cc8a4e64a6e39437dae83eeb
msgid "You can now control whether or not Django manages the life-cycle of the database tables for a model using the :attr:`~Options.managed` model option. This defaults to ``True``, meaning that Django will create the appropriate database tables in :djadmin:`syncdb` and remove them as part of the ``reset`` command. That is, Django *manages* the database table's lifecycle."
msgstr ""

#: ../../releases/1.1.txt:230
#: ../../releases/1.1-beta-1.txt:42
# 24715299133f42ec9f411d6bd006357d
# fcb8f78bbe544226b190784d7e77862b
msgid "If you set this to ``False``, however, no database table creating or deletion will be automatically performed for this model. This is useful if the model represents an existing table or a database view that has been created by some other means."
msgstr ""

#: ../../releases/1.1.txt:235
#: ../../releases/1.1-beta-1.txt:47
# 416fddc3b2a74525995677577b855ec1
# 5d6fae320b8f41ae82e476fb1059a212
msgid "For more details, see the documentation for the :attr:`~Options.managed` option."
msgstr ""

#: ../../releases/1.1.txt:239
#: ../../releases/1.1-beta-1.txt:51
# 12e3d703ca7744ccbf52ed7caf4a6f5c
# ea47204588f24ab69899831f70e10dd6
msgid "Proxy models"
msgstr ""

#: ../../releases/1.1.txt:241
# 4ac9f119b5644c9b98c5d5276774f30e
msgid "You can now create :ref:`proxy models <proxy-models>`: subclasses of existing models that only add Python-level (rather than database-level) behavior and aren't represented by a new table. That is, the new model is a *proxy* for some underlying model, which stores all the real data."
msgstr ""

#: ../../releases/1.1.txt:246
#: ../../releases/1.1-beta-1.txt:58
# 689033aea86e4099a7b6a5e17cf11fc0
# af9f50265c314b6c9386850a4a3e4ec0
msgid "All the details can be found in the :ref:`proxy models documentation <proxy-models>`. This feature is similar on the surface to unmanaged models, so the documentation has an explanation of :ref:`how proxy models differ from unmanaged models <proxy-vs-unmanaged-models>`."
msgstr ""

#: ../../releases/1.1.txt:252
#: ../../releases/1.1-beta-1.txt:64
# 41fe4c3d22d141d7bafa2c23ed4196b6
# b20daf5ef37e4225aceb5de8ef9e7156
msgid "Deferred fields"
msgstr ""

#: ../../releases/1.1.txt:254
#: ../../releases/1.1-beta-1.txt:66
# 4ed026e870be4875bebdb28f295d291a
# 0d791177becd43ecbeeca7d6af4af42a
msgid "In some complex situations, your models might contain fields which could contain a lot of data (for example, large text fields), or require expensive processing to convert them to Python objects. If you know you don't need those particular fields, you can now tell Django not to retrieve them from the database."
msgstr ""

#: ../../releases/1.1.txt:260
#: ../../releases/1.1-beta-1.txt:72
# 3251cf677f264c3590d656b0e808dd5f
# 3c537af721234a4db84122b42af799ca
msgid "You'll do this with the new queryset methods :meth:`~django.db.models.query.QuerySet.defer` and :meth:`~django.db.models.query.QuerySet.only`."
msgstr ""

#: ../../releases/1.1.txt:265
#: ../../releases/1.1-beta-1.txt:100
# 37ca53a28cbc42adb76e64d7ad21eb7e
# 71831b375b764386936064f8bc9f2bb6
msgid "Testing improvements"
msgstr ""

#: ../../releases/1.1.txt:267
# 509ee046154a4ad49e781c86096020ee
msgid "A few notable improvements have been made to the :doc:`testing framework </topics/testing/index>`."
msgstr ""

#: ../../releases/1.1.txt:271
# 134f30d9a59047328b77364ef2d48f73
msgid "Test performance improvements"
msgstr ""

#: ../../releases/1.1.txt:275
#: ../../releases/1.1-alpha-1.txt:56
# b1d710fb2b5b40d8a3866b4e8d877f80
# 48e9e3b547024d8f8ba0b81c244e416f
msgid "Tests written using Django's :doc:`testing framework </topics/testing/index>` now run dramatically faster (as much as 10 times faster in many cases)."
msgstr ""

#: ../../releases/1.1.txt:278
#: ../../releases/1.1-alpha-1.txt:59
# 5d7813bd525f427a9634f6c74814b5a9
# 33597bf568af406b97f89ee1a9db88cf
msgid "This was accomplished through the introduction of transaction-based tests: when using :class:`django.test.TestCase`, your tests will now be run in a transaction which is rolled back when finished, instead of by flushing and re-populating the database. This results in an immense speedup for most types of unit tests. See the documentation for :class:`TestCase` and :class:`TransactionTestCase` for a full description, and some important notes on database support."
msgstr ""

#: ../../releases/1.1.txt:286
# 10efa47115ad47a5a96473f4fd5077bd
msgid "Test client improvements"
msgstr ""

#: ../../releases/1.1.txt:290
# b57558276b4b433991ce37442ff77f2c
msgid "A couple of small -- but highly useful -- improvements have been made to the test client:"
msgstr ""

#: ../../releases/1.1.txt:293
#: ../../releases/1.1-beta-1.txt:107
# 0df7f41faefe4edc9a4146ddd19102a8
# 3786837d2b9a4f51bf577c91fec9a142
msgid "The test :class:`Client` now can automatically follow redirects with the ``follow`` argument to :meth:`Client.get` and :meth:`Client.post`. This makes testing views that issue redirects simpler."
msgstr ""

#: ../../releases/1.1.txt:297
# 4a0873701c7f4a59a27b8185341f84f3
msgid "It's now easier to get at the template context in the response returned the test client: you'll simply access the context as ``request.context[key]``. The old way, which treats ``request.context`` as a list of contexts, one for each rendered template in the inheritance chain, is still available if you need it."
msgstr ""

#: ../../releases/1.1.txt:304
#: ../../releases/1.1-beta-1.txt:77
# 71b1c806aae9416cac5f95523a373d80
# 8e959fc1b6394186a0cb58ad93243cfc
msgid "New admin features"
msgstr ""

#: ../../releases/1.1.txt:306
# ceb66fa049e44e93b5437a74750df5cb
msgid "Django 1.1 adds a couple of nifty new features to Django's admin interface:"
msgstr ""

#: ../../releases/1.1.txt:309
#: ../../releases/1.1-beta-1.txt:83
# 3292a75a7fe14c67beac046cbd3acb9c
# 7c2736da98ce4f5cb6a386845123e4f0
msgid "Editable fields on the change list"
msgstr ""

#: ../../releases/1.1.txt:311
#: ../../releases/1.1-beta-1.txt:85
# e4f983ca5b8f407d8e04269c61b501bd
# 1f532d1c511a42d2a5f875eb0899459d
msgid "You can now make fields editable on the admin list views via the new :ref:`list_editable <admin-list-editable>` admin option. These fields will show up as form widgets on the list pages, and can be edited and saved in bulk."
msgstr ""

#: ../../releases/1.1.txt:316
#: ../../releases/1.1-beta-1.txt:90
# b63fd5e9181c42c48fac978cfd7965cd
# 04ab61e8a1524b749899a8ed632fcdf8
msgid "Admin \"actions\""
msgstr ""

#: ../../releases/1.1.txt:318
#: ../../releases/1.1-beta-1.txt:92
# 0dba3b976f07434a8d119cd5e94bd3bd
# f574cf0cc3d6470ea207c5d98b1c5ef1
msgid "You can now define :doc:`admin actions </ref/contrib/admin/actions>` that can perform some action to a group of models in bulk. Users will be able to select objects on the change list page and then apply these bulk actions to all selected objects."
msgstr ""

#: ../../releases/1.1.txt:323
#: ../../releases/1.1-beta-1.txt:96
# 90ebfda3189c40679f3250144357a88c
# 163b24480a62488b833b8cb5f9b1bb58
msgid "Django ships with one pre-defined admin action to delete a group of objects in one fell swoop."
msgstr ""

#: ../../releases/1.1.txt:327
#: ../../releases/1.1-beta-1.txt:118
# f462911427ca4a2b8eb9069abf7c50c7
# 4882fb700a1241dd8648363552ee5ac8
msgid "Conditional view processing"
msgstr ""

#: ../../releases/1.1.txt:329
#: ../../releases/1.1-beta-1.txt:120
# 22767183d38842b29bbad08dee72b838
# 41a299fa595143a492df5811060a94fc
msgid "Django now has much better support for :doc:`conditional view processing </topics/conditional-view-processing>` using the standard ``ETag`` and ``Last-Modified`` HTTP headers. This means you can now easily short-circuit view processing by testing less-expensive conditions. For many views this can lead to a serious improvement in speed and reduction in bandwidth."
msgstr ""

#: ../../releases/1.1.txt:336
#: ../../releases/1.1-rc-1.txt:36
# 2277956af159430e91ec7f0bbe86ec6d
# 8c6fbdb1a2e6420694e8235da98156b9
msgid "URL namespaces"
msgstr ""

#: ../../releases/1.1.txt:338
# c42a6dacc0ad45508caa139f5c6262c6
msgid "Django 1.1 improves :ref:`named URL patterns <naming-url-patterns>` with the introduction of URL \"namespaces.\""
msgstr ""

#: ../../releases/1.1.txt:341
# 9221b5acca2745eb9983f62eb005b6a6
msgid "In short, this feature allows the same group of URLs, from the same application, to be included in a Django URLConf multiple times, with varying (and potentially nested) named prefixes which will be used when performing reverse resolution. In other words, reusable applications like Django's admin interface may be registered multiple times without URL conflicts."
msgstr ""

#: ../../releases/1.1.txt:347
# bd85ec6671724fb3b9b6ad777750613a
msgid "For full details, see :ref:`the documentation on defining URL namespaces <topics-http-defining-url-namespaces>`."
msgstr ""

#: ../../releases/1.1.txt:351
#: ../../releases/1.2.txt:341
#: ../../releases/1.2.txt:1084
#: ../../releases/1.2.4.txt:76
#: ../../releases/1.3.txt:261
#: ../../releases/1.3.txt:799
#: ../../releases/1.5.txt:219
#: ../../releases/1.5-alpha-1.txt:222
#: ../../releases/1.5-beta-1.txt:220
# ae2326e6f594414d8623dc8ec30d3410
# 9e1efb267f3241bf8353a2e206862da9
# 5e149e2a76314a6180cf569e51f7d127
# 92a81407fa4142e885b2127486970b6e
# 0360365ce0474c28a2f6b59bb65c4572
# 9e027ed29990464698138591a64cd31a
# b406d1543d144f4a8dadaa9fd7886a1e
# 3aabcdcbf617401992c66aa24716bd46
# c167eadb77444e8da6dd5cfcac481c2f
msgid "GeoDjango"
msgstr ""

#: ../../releases/1.1.txt:353
# f7cd47f27d8840439166e59c04ea15f9
msgid "In Django 1.1, GeoDjango_ (i.e. ``django.contrib.gis``) has several new features:"
msgstr ""

#: ../../releases/1.1.txt:356
# cb4fc448e4514a4aaa8182eba364c1bb
msgid "Support for SpatiaLite_ -- a spatial database for SQLite -- as a spatial backend."
msgstr ""

#: ../../releases/1.1.txt:359
# 7db6928719ca4618baba232666d6abc8
msgid "Geographic aggregates (``Collect``, ``Extent``, ``MakeLine``, ``Union``) and ``F`` expressions."
msgstr ""

#: ../../releases/1.1.txt:362
# 650f8771e6f94d3cb5cdffde2e0602b7
msgid "New ``GeoQuerySet`` methods: ``collect``, ``geojson``, and ``snap_to_grid``."
msgstr ""

#: ../../releases/1.1.txt:365
# dc31c7465fb84d52b83180382ff90925
msgid "A new list interface methods for ``GEOSGeometry`` objects."
msgstr ""

#: ../../releases/1.1.txt:367
# fba2131317ab44ae86ef06fcca61798a
msgid "For more details, see the `GeoDjango documentation`_."
msgstr ""

#: ../../releases/1.1.txt:374
#: ../../releases/1.1-alpha-1.txt:67
#: ../../releases/1.1-beta-1.txt:127
# 2b3dd8a2808a4f82b5352141cdcceb05
# fa73aa3c731e4bebbb73c006f9c370f3
# c4ef550cafce4f63a3ca5dc4f61fd0e5
msgid "Other improvements"
msgstr ""

#: ../../releases/1.1.txt:376
#: ../../releases/1.1-alpha-1.txt:69
# f4140b0cff24451d9a818e595bd81d08
# 35a9e7f683a34069825f06e31efcb9d6
msgid "Other new features and changes introduced since Django 1.0 include:"
msgstr ""

#: ../../releases/1.1.txt:378
#: ../../releases/1.1-alpha-1.txt:71
# d318f9b30d2b452d8df726bcf561bae5
# fca90d1a05a943a1871a96903b4f85c5
msgid "The :doc:`CSRF protection middleware </ref/contrib/csrf>` has been split into two classes -- ``CsrfViewMiddleware`` checks incoming requests, and ``CsrfResponseMiddleware`` processes outgoing responses. The combined ``CsrfMiddleware`` class (which does both) remains for backwards-compatibility, but using the split classes is now recommended in order to allow fine-grained control of when and where the CSRF processing takes place."
msgstr ""

#: ../../releases/1.1.txt:386
#: ../../releases/1.1-alpha-1.txt:79
# 94592cf8b9fc4837897873b8ce8978a5
# 0f36f4f4b01e42d49b6b18ef7972e2fd
msgid ":func:`~django.core.urlresolvers.reverse` and code which uses it (e.g., the ``{% url %}`` template tag) now works with URLs in Django's administrative site, provided that the admin URLs are set up via ``include(admin.site.urls)`` (sending admin requests to the ``admin.site.root`` view still works, but URLs in the admin will not be \"reversible\" when configured this way)."
msgstr ""

#: ../../releases/1.1.txt:392
#: ../../releases/1.1-alpha-1.txt:85
# bd6757c6176d42bebc066ca676ae1bb5
# edf3fb4d06784c8da469f210614823d2
msgid "The ``include()`` function in Django URLconf modules can now accept sequences of URL patterns (generated by ``patterns()``) in addition to module names."
msgstr ""

#: ../../releases/1.1.txt:395
#: ../../releases/1.1-alpha-1.txt:88
# 6b8e9b3cc3ef48078fef6e42f9dc2663
# 997555f850f746a3a14918495c4a57e6
msgid "Instances of Django forms (see :doc:`the forms overview </topics/forms/index>`) now have two additional methods, ``hidden_fields()`` and ``visible_fields()``, which return the list of hidden -- i.e., ``<input type=\"hidden\">`` -- and visible fields on the form, respectively."
msgstr ""

#: ../../releases/1.1.txt:400
#: ../../releases/1.1-alpha-1.txt:93
# 0ce741aeffc549d59f84d900bcb98a23
# 5167be14bcce458ca02a50dda603d940
msgid "The ``redirect_to`` generic view now accepts an additional keyword argument ``permanent``. If ``permanent`` is ``True``, the view will emit an HTTP permanent redirect (status code 301). If ``False``, the view will emit an HTTP temporary redirect (status code 302)."
msgstr ""

#: ../../releases/1.1.txt:406
#: ../../releases/1.1-alpha-1.txt:99
# f46dcc48e7c94cc186ebadfe74424e64
# 10ed0212f80a40c08ceeac105f3fa4d4
msgid "A new database lookup type -- ``week_day`` -- has been added for ``DateField`` and ``DateTimeField``. This type of lookup accepts a number between 1 (Sunday) and 7 (Saturday), and returns objects where the field value matches that day of the week. See :ref:`the full list of lookup types <field-lookups>` for details."
msgstr ""

#: ../../releases/1.1.txt:412
#: ../../releases/1.1-alpha-1.txt:105
# 2cae93270e3b493b8b2011c18263e145
# eca3dac2a16e491d9b40da47c8f5cc67
msgid "The ``{% for %}`` tag in Django's template language now accepts an optional ``{% empty %}`` clause, to be displayed when ``{% for %}`` is asked to loop over an empty sequence. See :doc:`the list of built-in template tags </ref/templates/builtins>` for examples of this."
msgstr ""

#: ../../releases/1.1.txt:417
#: ../../releases/1.1-beta-1.txt:132
# 526257394c904d0e8ef6fa1b719d3f6f
# 9c03a01c544e47e1b1228572015a8e80
msgid "The :djadmin:`dumpdata` management command now accepts individual model names as arguments, allowing you to export the data just from particular models."
msgstr ""

#: ../../releases/1.1.txt:421
#: ../../releases/1.1-beta-1.txt:136
# 3e54f853228d4e658bd5a223eb35fa7e
# edb4c22ec8ed4b6da3230efaeeca1b48
msgid "There's a new :tfilter:`safeseq` template filter which works just like :tfilter:`safe` for lists, marking each item in the list as safe."
msgstr ""

#: ../../releases/1.1.txt:424
#: ../../releases/1.1-beta-1.txt:139
# 2a8dba57c4014b4585a8c79b91d15291
# 8fd0e4d74b58424280641138fbe05d7c
msgid ":doc:`Cache backends </topics/cache>` now support ``incr()`` and ``decr()`` commands to increment and decrement the value of a cache key. On cache backends that support atomic increment/decrement -- most notably, the memcached backend -- these operations will be atomic, and quite fast."
msgstr ""

#: ../../releases/1.1.txt:430
#: ../../releases/1.1-beta-1.txt:145
# 261fcd5b589a41eb8c6f38ad2f45e543
# 6ff5dd6409c54914aecf3775c223b470
msgid "Django now can :doc:`easily delegate authentication to the Web server </howto/auth-remote-user>` via a new authentication backend that supports the standard ``REMOTE_USER`` environment variable used for this purpose."
msgstr ""

#: ../../releases/1.1.txt:434
#: ../../releases/1.1-beta-1.txt:149
# 9a5ecd214c5948dab5fa23e901b2f8ef
# b9bfd92f507e4ee88c49a08f89895823
msgid "There's a new :func:`django.shortcuts.redirect` function that makes it easier to issue redirects given an object, a view name, or a URL."
msgstr ""

#: ../../releases/1.1.txt:437
#: ../../releases/1.1-beta-1.txt:152
# 9be85e958aba4884b6cb80e310838e27
# 4e9724384dd444299dc2e658518d9fb1
msgid "The ``postgresql_psycopg2`` backend now supports :ref:`native PostgreSQL autocommit <postgresql-notes>`. This is an advanced, PostgreSQL-specific feature, that can make certain read-heavy applications a good deal faster."
msgstr ""

#: ../../releases/1.1.txt:443
# 77a2609fcea1428d9e4dc366e2739ea6
msgid "What's next?"
msgstr ""

#: ../../releases/1.1.txt:445
# 165ae2505a0047bf92d45ac23516dcbf
msgid "We'll take a short break, and then work on Django 1.2 will begin -- no rest for the weary! If you'd like to help, discussion of Django development, including progress toward the 1.2 release, takes place daily on the django-developers mailing list:"
msgstr ""

#: ../../releases/1.1.txt:452
# 7ae928f4c1f84b84ad3a47e0b2a6659f
msgid "... and in the ``#django-dev`` IRC channel on ``irc.freenode.net``. Feel free to join the discussions!"
msgstr ""

#: ../../releases/1.1.txt:458
#: ../../releases/1.1-alpha-1.txt:156
#: ../../releases/1.1-beta-1.txt:199
#: ../../releases/1.1-rc-1.txt:105
#: ../../releases/1.2-alpha-1.txt:579
#: ../../releases/1.2-beta-1.txt:164
#: ../../releases/1.2-rc-1.txt:97
#: ../../releases/1.3-alpha-1.txt:390
#: ../../releases/1.3-beta-1.txt:228
#: ../../releases/1.4-alpha-1.txt:1115
#: ../../releases/1.4-beta-1.txt:1187
# d8ee146da4d147b6888e4ed197859996
# 39d40f6ce567470ab5e6e1415ae8cd10
# 7f3d265c84cb42fcbf3171ae36d0e56e
# ca377319c5c748bbbc9545e23b91ae15
# 45fab76c4d694ee1a956dd11666487a3
# 31d26ebe0d994d5ab5532e746801d8eb
# 874da9c3d5b1467296ea3e48fec29ea8
# 20cbe230a22449159df364eee96d19c2
# 762b31555b824fc0b33987de3a06929e
# 0552546e80ec471085259d03e3141431
# f4121f2803ce4e4ea0cbd4720f606593
msgid ":doc:`How to contribute to Django </internals/contributing/index>`"
msgstr ""

#: ../../releases/1.1.txt:464
# 130cb4aea28348ce911de6798a527fb3
msgid "And that's the way it is."
msgstr ""

#: ../../releases/1.1-alpha-1.txt:3
# 75f04fdf8cfd4de98ba9668cd70386e2
msgid "Django 1.1 alpha 1 release notes"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:5
# d5de527913434f059b40fec59dec3eaa
msgid "February 23, 2009"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:7
# a2edd8c6f15641d89173b539765d0ba7
msgid "Welcome to Django 1.1 alpha 1!"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:9
# 26bc421f544d4cdca668be1c6523e945
msgid "This is the first in a series of preview/development releases leading up to the eventual release of Django 1.1, currently scheduled to take place in April 2009. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.1 release."
msgstr ""

#: ../../releases/1.1-alpha-1.txt:19
# 80f0a35d894a42fc831afee4c4353659
msgid "What's new in Django 1.1 alpha 1"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:24
# 3a439b8b95f044df87377609868489ec
msgid "Two major enhancements have been added to Django's object-relational mapper (ORM):"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:46
# 348929d5840d4eafbe7716cfec1f39b6
msgid "Queries can now refer to a another field on the query and can traverse relationships to refer to fields on related models. This is implemented in the new :class:`F` object; for full details, including examples, consult the :ref:`documentation for F expressions <query-expressions>`."
msgstr ""

#: ../../releases/1.1-alpha-1.txt:52
# 4aa5a3d8c0cf4622b610ede3d6edeead
msgid "Performance improvements"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:111
#: ../../releases/1.1-beta-1.txt:158
#: ../../releases/1.1-rc-1.txt:64
# b37e183a123240bcafeab2c3dfd59080
# 91956c362a2a4da189a681258da04be1
# 17c375e936124853a5d69da0269fb9ec
msgid "The Django 1.1 roadmap"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:113
# 16bb361147f645a384710fcd8e13a79b
msgid "Before Django 1.1 goes final, several other preview/development releases will be made available. The current schedule consists of at least the following:"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:116
# c82617e2803f483db9d0c16f44567f67
msgid "Week of *March 20, 2009:* Django 1.1 beta 1, at which point Django 1.1 will be in \"feature freeze\": no new features will be implemented for 1.1 past that point, and all new feature work will be deferred to Django 1.2."
msgstr ""

#: ../../releases/1.1-alpha-1.txt:121
#: ../../releases/1.1-beta-1.txt:164
# 33fa99ba044c400ea68233c5b4f23418
# 7465ce99143e4534bb7f4763971cf93c
msgid "Week of *April 2, 2009:* Django 1.1 release candidate. At this point all strings marked for translation must freeze to allow translations to be submitted in advance of the final release."
msgstr ""

#: ../../releases/1.1-alpha-1.txt:125
#: ../../releases/1.1-beta-1.txt:168
# 4f518dcf2cd541f49a35afdfb2ceb148
# b18ff29b9c7744a29ad02a9c4d0fa9c3
msgid "Week of *April 13, 2009:* Django 1.1 final."
msgstr ""

#: ../../releases/1.1-alpha-1.txt:127
# 0dceeac1d1284d36a5915e8383be2649
msgid "If deemed necessary, additional alpha, beta or release candidate packages will be issued prior to the final 1.1 release."
msgstr ""

#: ../../releases/1.1-alpha-1.txt:133
# 8413a67ca33845be8e105d97d3eea5e2
msgid "In order to provide a high-quality 1.1 release, we need your help. Although this alpha release is, again, *not* intended for production use, you can help the Django team by trying out the alpha codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:144
#: ../../releases/1.1-beta-1.txt:187
#: ../../releases/1.1-rc-1.txt:92
# 652d818e8b9c478589348d35a550bf5a
# 297e28ae2b1e488d9db0b73c15157697
# 982276d353d8413bad446e7cdb05d736
msgid "Additionally, discussion of Django development, including progress toward the 1.1 release, takes place daily on the django-developers mailing list:"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:149
#: ../../releases/1.1-beta-1.txt:192
#: ../../releases/1.1-rc-1.txt:98
#: ../../releases/1.2-alpha-1.txt:572
#: ../../releases/1.2-beta-1.txt:157
#: ../../releases/1.2-rc-1.txt:90
#: ../../releases/1.3-alpha-1.txt:383
#: ../../releases/1.3-beta-1.txt:221
#: ../../releases/1.4-alpha-1.txt:1108
#: ../../releases/1.4-beta-1.txt:1180
# 751a66c1b39742688ec77bfe30d2deb0
# 5493570cf4dc43d0bfb118c0908a7223
# 4497f03c53004775b795047ac34fea44
# 08782fefda4641b6a44f73844fae961c
# ced7fe4ff42c48cdacf4a09203741e1d
# 34cb092ed4ba424c9e0e0f973d3c8593
# 08e4bf09afc04433a9b05cfc4dc8da43
# 1b44cded2d37402a9ce72ecf682ad560
# 5b41f172825946339c2de133c643c6e7
# 3f184640b3f84bd1acc10ec89a8b683f
msgid "... and in the ``#django-dev`` IRC channel on ``irc.freenode.net``. If you're interested in helping out with Django's development, feel free to join the discussions there."
msgstr ""

#: ../../releases/1.1-alpha-1.txt:162
#: ../../releases/1.1-beta-1.txt:205
# 54e8bfef85c646ada788d88e3e4ebe42
# 8ff7bead9935409db83dbdd2db9051fb
msgid "Development sprints for Django 1.1 will also be taking place at PyCon US 2009, on the dedicated sprint days (March 30 through April 2), and anyone who wants to help out is welcome to join in, either in person at PyCon or virtually in the IRC channel or on the mailing list."
msgstr ""

#: ../../releases/1.1-beta-1.txt:3
# 6281c58826684bafbd16b4355ad3a2e0
msgid "Django 1.1 beta 1 release notes"
msgstr ""

#: ../../releases/1.1-beta-1.txt:5
# 011ac00edf484c9cab2f54af9496533e
msgid "March 23, 2009"
msgstr ""

#: ../../releases/1.1-beta-1.txt:7
# 91a91f3eb3dd4bc1b189dcbdf3b23b2e
msgid "Welcome to Django 1.1 beta 1!"
msgstr ""

#: ../../releases/1.1-beta-1.txt:9
# de1a19411a6840adac72606bd5692994
msgid "This is the second in a series of preview/development releases leading up to the eventual release of Django 1.1, currently scheduled to take place in April 2009. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.1 release."
msgstr ""

#: ../../releases/1.1-beta-1.txt:19
# 499ce37cadfa456a95770bf2ff775ce0
msgid "What's new in Django 1.1 beta 1"
msgstr ""

#: ../../releases/1.1-beta-1.txt:23
# 9b146607e5b44d438beebc92d467bdcd
msgid "The :doc:`1.1 alpha release notes </releases/1.1-alpha-1>`, which has a list of everything new between Django 1.0 and Django 1.1 alpha."
msgstr ""

#: ../../releases/1.1-beta-1.txt:36
# e845f2926383484ba718e00a43fa23e1
msgid "You can now control whether or not Django creates database tables for a model using the :attr:`~Options.managed` model option. This defaults to ``True``, meaning that Django will create the appropriate database tables in :djadmin:`syncdb` and remove them as part of ``reset`` command. That is, Django *manages* the database table's lifecycle."
msgstr ""

#: ../../releases/1.1-beta-1.txt:53
# 8b111063b0ee4b86aa39e5517953a358
msgid "You can now create :ref:`proxy models <proxy-models>`: subclasses of existing models that only add Python behavior and aren't represented by a new table. That is, the new model is a *proxy* for some underlying model, which stores all the real data."
msgstr ""

#: ../../releases/1.1-beta-1.txt:79
# d2c833bcda084d6cb16955d1bd484bec
msgid "Since 1.1 alpha, a couple of new features have been added to Django's admin application:"
msgstr ""

#: ../../releases/1.1-beta-1.txt:104
# 1547b2e5620b4e23b101527144003e2d
msgid "A couple of small but very useful improvements have been made to the :doc:`testing framework </topics/testing/index>`:"
msgstr ""

#: ../../releases/1.1-beta-1.txt:111
# 191c5125737e400cbcee0ba1823a052e
msgid "It's now easier to get at the template context in the response returned the test client: you'll simply access the context as ``request.context[key]``. The old way, which treats ``request.context`` as a list of contexts, one for each rendered template, is still available if you need it."
msgstr ""

#: ../../releases/1.1-beta-1.txt:129
# 21510042d310480da7900317dcfe7c5f
msgid "Finally, a grab-bag of other neat features made their way into this beta release, including:"
msgstr ""

#: ../../releases/1.1-beta-1.txt:160
# 11d815d93ccb466b813e31807a300c68
msgid "Before Django 1.1 goes final, at least one other preview/development release will be made available. The current schedule consists of at least the following:"
msgstr ""

#: ../../releases/1.1-beta-1.txt:170
# 58b4a07417ee4b91bbbd373b3bd3eed3
msgid "If deemed necessary, additional beta or release candidate packages will be issued prior to the final 1.1 release."
msgstr ""

#: ../../releases/1.1-beta-1.txt:176
# 6aa2ae991e61467586fe667b61672209
msgid "In order to provide a high-quality 1.1 release, we need your help. Although this beta release is, again, *not* intended for production use, you can help the Django team by trying out the beta codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.1-rc-1.txt:3
# 088555515e8b4ed4a3468007ec0e2ed4
msgid "Django 1.1 RC 1 release notes"
msgstr ""

#: ../../releases/1.1-rc-1.txt:6
# d0205c3c9aa248bc8221830229544813
msgid "July 21, 2009"
msgstr ""

#: ../../releases/1.1-rc-1.txt:8
# fa3c1b1f507b40869d70ef359ff57853
msgid "Welcome to the first Django 1.1 release candidate!"
msgstr ""

#: ../../releases/1.1-rc-1.txt:10
# 11749b7566644b5f9ddb12b3d6a4924a
msgid "This is the third -- and likely last -- in a series of preview/development releases leading up to the eventual release of Django 1.1, currently scheduled to take place approximately one week after this release candidate. This release is targeted primarily at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve any critical bugs prior to the final 1.1 release."
msgstr ""

#: ../../releases/1.1-rc-1.txt:18
#: ../../releases/1.2-rc-1.txt:17
# 4385503862934ca49cdacd1899f9031d
# 01125688f9ef493cb2040d6459f5fc1d
msgid "As such, this release is not yet intended for production use, and any such use is discouraged."
msgstr ""

#: ../../releases/1.1-rc-1.txt:23
# 90e24fe3328949e0af85bf2299b10b32
msgid "What's new in Django 1.1 RC 1"
msgstr ""

#: ../../releases/1.1-rc-1.txt:25
# c45b20c4498a42c2865a58302e077287
msgid "The Django codebase has -- with one exception -- been in feature freeze since the first 1.1 beta release, and so this release candidate contains only one new feature (see below); work leading up to this release candidate has instead been focused on bugfixing, particularly on the new features introduced prior to the 1.1 beta."
msgstr ""

#: ../../releases/1.1-rc-1.txt:31
# 6a5f706709e545b583c655f27a3fc2e7
msgid "For an overview of those features, consult :doc:`the Django 1.1 beta release notes </releases/1.1-beta-1>`."
msgstr ""

#: ../../releases/1.1-rc-1.txt:38
# 6c1600ce23e84057994b3b30e63d8a84
msgid "The 1.1 beta release introduced the ability to use reverse URL resolution with Django's admin application, which exposed a set of :ref:`named URLs <naming-url-patterns>`. Unfortunately, achieving consistent and correct reverse resolution for admin URLs proved extremely difficult, and so one additional feature was added to Django to resolve this issue: URL namespaces."
msgstr ""

#: ../../releases/1.1-rc-1.txt:45
# 64c70f3b89f94db2984ac694ea83dc96
msgid "In short, this feature allows the same group of URLs, from the same application, to be included in a Django URLConf multiple times, with varying (and potentially nested) named prefixes which will be used when performing reverse resolution. For full details, see :ref:`the documentation on defining URL namespaces <topics-http-defining-url-namespaces>`."
msgstr ""

#: ../../releases/1.1-rc-1.txt:52
# 0c33e7983a5b47ccad186cfde06d2185
msgid "Due to the changes needed to support this feature, the URL pattern names used when reversing admin URLs have changed since the 1.1 beta release; if you were developing applications which took advantage of this new feature, you will need to update your code to reflect the new names (for most purposes, changing ``admin_`` to ``admin:`` in names to be reversed will suffice). For a full list of URL pattern names used by the admin and information on how namespaces are applied to them, consult the documentation on :ref:`reversing admin URLs <admin-reverse-urls>`."
msgstr ""

#: ../../releases/1.1-rc-1.txt:66
# 3dfac73e82494aebbe08ba1d3ddb55c5
msgid "As of this release candidate, Django 1.1 is in both feature freeze and \"string freeze\" -- all strings marked for translation in the Django codebase will retain their current form in the final Django 1.1 release. Only critical release-blocking bugs will receive attention between now and the final 1.1 release."
msgstr ""

#: ../../releases/1.1-rc-1.txt:72
# 32d0666b2a8f48f0906ea819405c2f2a
msgid "If no such bugs are discovered, Django 1.1 will be released approximately one week after this release candidate, on or about July 28, 2009."
msgstr ""

#: ../../releases/1.1-rc-1.txt:80
# 3328c83c6ba4460e9b59a6afd9f3e264
msgid "In order to provide a high-quality 1.1 release, we need your help. Although this release candidate is, again, *not* intended for production use, you can help the Django team by trying out this release candidate in a safe testing environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.1-rc-1.txt:89
#: ../../releases/1.2-rc-1.txt:81
# 558659bdfa1045608fd0d00f8c78cc8a
# a3ee77545cff4d5b9f54ef4833969802
msgid "Please open a new ticket only if no existing ticket corresponds to a problem you're running into."
msgstr ""

#: ../../releases/1.1.2.txt:3
# 5aef9d7f6fba4ca2a7c76c328620f9e5
msgid "Django 1.1.2 release notes"
msgstr ""

#: ../../releases/1.1.2.txt:5
# 848de2166b8c4d5aa76aa655497b33fe
msgid "Welcome to Django 1.1.2!"
msgstr ""

#: ../../releases/1.1.2.txt:7
# 525318612f6a41a7b39449e439e8e100
msgid "This is the second \"bugfix\" release in the Django 1.1 series, improving the stability and performance of the Django 1.1 codebase."
msgstr ""

#: ../../releases/1.1.2.txt:10
# 2fef0f63379b401687cce64ba693beb5
msgid "Django 1.1.2 maintains backwards compatibility with Django 1.1.0, but contain a number of fixes and other improvements. Django 1.1.2 is a recommended upgrade for any development or deployment currently using or targeting Django 1.1."
msgstr ""

#: ../../releases/1.1.2.txt:15
#: ../../releases/1.1.3.txt:15
#: ../../releases/1.1.4.txt:15
# 8ec87e723d494f22b8efbf67c70bd1e2
# ecac28c7cd054b8eb677ae5e21e119f3
# b43ec235acb648f2bac647fcad2a1289
msgid "For full details on the new features, backwards incompatibilities, and deprecated features in the 1.1 branch, see the :doc:`/releases/1.1`."
msgstr ""

#: ../../releases/1.1.2.txt:19
# cb2bad228f5f48ac8b53ec0e9a38590d
msgid "Backwards-incompatible changes in 1.1.2"
msgstr ""

#: ../../releases/1.1.2.txt:22
#: ../../releases/1.2.txt:675
#: ../../releases/1.2-alpha-1.txt:181
# 1d66a103c78a4d6aa4b525c7fe873c41
# c66e2abc7b514acea38eba7a62769235
# 825246e4aeea4c2fa5e3c7766f9405b8
msgid "Test runner exit status code"
msgstr ""

#: ../../releases/1.1.2.txt:24
#: ../../releases/1.2-alpha-1.txt:183
# ffb9e901ae4d4c319876457db6d3dbc2
# 96f0d4bf02414afd892e2b2865a50a03
msgid "The exit status code of the test runners (``tests/runtests.py`` and ``python manage.py test``) no longer represents the number of failed tests, since a failure of 256 or more tests resulted in a wrong exit status code.  The exit status code for the test runner is now 0 for success (no failing tests) and 1 for any number of test failures.  If needed, the number of test failures can be found at the end of the test runner's output."
msgstr ""

#: ../../releases/1.1.2.txt:32
#: ../../releases/1.2.txt:685
#: ../../releases/1.2-beta-1.txt:66
# 301a96ff011d44cd9a86af8075f7b662
# 35addaf7eb65403b87e8e5f1d7654356
# 8036b4e139f3441f8d13475d3a2347b2
msgid "Cookie encoding"
msgstr ""

#: ../../releases/1.1.2.txt:34
# 4b773a8597ec4418b0e13d178bd396aa
msgid "To fix bugs with cookies in Internet Explorer, Safari, and possibly other browsers, our encoding of cookie values was changed so that the characters comma and semi-colon are treated as non-safe characters, and are therefore encoded as ``\\054`` and ``\\073`` respectively.  This could produce backwards incompatibilities, especially if you are storing comma or semi-colon in cookies and have javascript code that parses and manipulates cookie values client-side."
msgstr ""

#: ../../releases/1.1.2.txt:43
#: ../../releases/1.2.2.txt:19
#: ../../releases/1.2.4.txt:53
# 3b6c1ac976004f768c6b2951848e34be
# ab673ac2e1f2489fad686295a161ca2e
# bc05c2df6f7840468fc33023b5764418
msgid "One new feature"
msgstr ""

#: ../../releases/1.1.2.txt:45
# 610f8f13323d486d86a4654a1c45f263
msgid "Ordinarily, a point release would not include new features, but in the case of Django 1.1.2, we have made an exception to this rule. Django 1.2 (the next major release of Django) will contain a feature that will improve protection against Cross-Site Request Forgery (CSRF) attacks. This feature requires the use of a new :ttag:`csrf_token` template tag in all forms that Django renders."
msgstr ""

#: ../../releases/1.1.2.txt:52
# 6308d3f3c4c743c3b618ef37636124a9
msgid "To make it easier to support both 1.1.X and 1.2.X versions of Django with the same templates, we have decided to introduce the :ttag:`csrf_token` template tag to the 1.1.X branch. In the 1.1.X branch, :ttag:`csrf_token` does nothing - it has no effect on templates or form processing. However, it means that the same template will work with Django 1.2."
msgstr ""

#: ../../releases/1.1.3.txt:3
# 265ef34afd0049c4a5f6e4a2160e66ed
msgid "Django 1.1.3 release notes"
msgstr ""

#: ../../releases/1.1.3.txt:5
# b437b72864b14bed9c5af0777757ef5f
msgid "Welcome to Django 1.1.3!"
msgstr ""

#: ../../releases/1.1.3.txt:7
# ccac6e6bfe464098910e07719ca9aa5b
msgid "This is the third \"bugfix\" release in the Django 1.1 series, improving the stability and performance of the Django 1.1 codebase."
msgstr ""

#: ../../releases/1.1.3.txt:10
# a1fbfc1ecea64dac8f1009a1d17d38e3
msgid "With one exception, Django 1.1.3 maintains backwards compatibility with Django 1.1.2. It also contains a number of fixes and other improvements. Django 1.1.2 is a recommended upgrade for any development or deployment currently using or targeting Django 1.1."
msgstr ""

#: ../../releases/1.1.3.txt:19
#: ../../releases/1.1.4.txt:19
#: ../../releases/1.2.4.txt:19
#: ../../releases/1.2.5.txt:19
#: ../../releases/1.4.2.txt:39
# 4cb26f4af7cc40e59bb1f06c542c0c41
# 30c001a9c5ee49b49d32b91cbea13534
# 47f63690c1ce4cb2b13fd6d13f815ecc
# 9510d7684e884012aefce6e82964ce82
# 18359ab30a6f4b659ae44c162ed9b7fc
msgid "Backwards incompatible changes"
msgstr ""

#: ../../releases/1.1.3.txt:22
#: ../../releases/1.2.4.txt:22
#: ../../releases/1.3.txt:352
# dfe11cb2e2ca4d40a75d18bc2ed240bf
# 961e7e151f6b45f7befdf052cb32d0b3
# efd2d665299c45ab85aa90b778aec813
msgid "Restricted filters in admin interface"
msgstr ""

#: ../../releases/1.1.3.txt:24
#: ../../releases/1.2.4.txt:24
# 014203e2a79b4ad8b32db76f356cd9c6
# 86748e650e054f8a8bbee96daa68ad0d
msgid "The Django administrative interface, django.contrib.admin, supports filtering of displayed lists of objects by fields on the corresponding models, including across database-level relationships. This is implemented by passing lookup arguments in the querystring portion of the URL, and options on the ModelAdmin class allow developers to specify particular fields or relationships which will generate automatic links for filtering."
msgstr ""

#: ../../releases/1.1.3.txt:32
#: ../../releases/1.2.4.txt:32
# 95b2436eb21c48628fff01a128e989b1
# 32e4ab30f28546af99741e87f5458421
msgid "One historically-undocumented and -unofficially-supported feature has been the ability for a user with sufficient knowledge of a model's structure and the format of these lookup arguments to invent useful new filters on the fly by manipulating the querystring."
msgstr ""

#: ../../releases/1.1.3.txt:37
#: ../../releases/1.2.4.txt:37
# 5fd5422c0eee48f7bb4fdaaa625f8ed5
# 9256cb625b8440a0a612b0d2754109ed
msgid "However, it has been demonstrated that this can be abused to gain access to information outside of an admin user's permissions; for example, an attacker with access to the admin and sufficient knowledge of model structure and relations could construct query strings which -- with repeated use of regular-expression lookups supported by the Django database API -- expose sensitive information such as users' password hashes."
msgstr ""

#: ../../releases/1.1.3.txt:45
#: ../../releases/1.2.4.txt:45
# 8d2383f745d04f1aa551be9566b2f1e1
# 585eb6f30e05440e9d89346d55ced2e2
msgid "To remedy this, django.contrib.admin will now validate that querystring lookup arguments either specify only fields on the model being viewed, or cross relations which have been explicitly whitelisted by the application developer using the pre-existing mechanism mentioned above. This is backwards-incompatible for any users relying on the prior ability to insert arbitrary lookups."
msgstr ""

#: ../../releases/1.1.4.txt:3
# b9fcdbddb172484d93358d4373f0561e
msgid "Django 1.1.4 release notes"
msgstr ""

#: ../../releases/1.1.4.txt:5
# 377572a55c6f4eb8b61de91bb99c008e
msgid "Welcome to Django 1.1.4!"
msgstr ""

#: ../../releases/1.1.4.txt:7
# 64245930029843758ef42325d19bab2c
msgid "This is the fourth \"bugfix\" release in the Django 1.1 series, improving the stability and performance of the Django 1.1 codebase."
msgstr ""

#: ../../releases/1.1.4.txt:10
# a13a8f7b847d42dab50b52aa94431129
msgid "With one exception, Django 1.1.4 maintains backwards compatibility with Django 1.1.3. It also contains a number of fixes and other improvements. Django 1.1.4 is a recommended upgrade for any development or deployment currently using or targeting Django 1.1."
msgstr ""

#: ../../releases/1.1.4.txt:22
#: ../../releases/1.2.5.txt:22
# 639f174091ff452daf7ba90757671072
# 03fe9d4cc4334957a1cebc60797a89d4
msgid "CSRF exception for AJAX requests"
msgstr ""

#: ../../releases/1.1.4.txt:24
#: ../../releases/1.2.5.txt:24
# 1ccfbeefa28d420f938a6ff98a97f458
# cdfc30d12c734319b9b72bb318ed4431
msgid "Django includes a CSRF-protection mechanism, which makes use of a token inserted into outgoing forms. Middleware then checks for the token's presence on form submission, and validates it."
msgstr ""

#: ../../releases/1.1.4.txt:28
#: ../../releases/1.2.5.txt:28
# 1cc8fc4342d04e24a4874ccfe220c191
# fb8ca3606e10448eb6aa34985f2d9daa
msgid "Prior to Django 1.2.5, our CSRF protection made an exception for AJAX requests, on the following basis:"
msgstr ""

#: ../../releases/1.1.4.txt:31
#: ../../releases/1.2.5.txt:31
# 9620182473fd473e95f590ba903a10a6
# 83bd36e04e0d4c9b8d7106e29e00eece
msgid "Many AJAX toolkits add an X-Requested-With header when using XMLHttpRequest."
msgstr ""

#: ../../releases/1.1.4.txt:34
#: ../../releases/1.2.5.txt:34
# 2e2551f5a9fd4d10a94ef31eda3f7664
# bf6409c3f65d4439b6e08d6b86969e36
msgid "Browsers have strict same-origin policies regarding XMLHttpRequest."
msgstr ""

#: ../../releases/1.1.4.txt:37
#: ../../releases/1.2.5.txt:37
# 7299e0b44ea0437fada9b7a706114c08
# cb263259ac81405b8e40c9f29fe43b78
msgid "In the context of a browser, the only way that a custom header of this nature can be added is with XMLHttpRequest."
msgstr ""

#: ../../releases/1.1.4.txt:40
#: ../../releases/1.2.5.txt:40
# 79830def06934ed2bb0108c0b6197993
# 66506621a8b24570876f1b954ac8d3c4
msgid "Therefore, for ease of use, we did not apply CSRF checks to requests that appeared to be AJAX on the basis of the X-Requested-With header. The Ruby on Rails web framework had a similar exemption."
msgstr ""

#: ../../releases/1.1.4.txt:44
#: ../../releases/1.2.5.txt:44
# e28f842a66424d88a83c7ed5aed7fef3
# 6775ff7422994d198ef700abc20ebbf4
msgid "Recently, engineers at Google made members of the Ruby on Rails development team aware of a combination of browser plugins and redirects which can allow an attacker to provide custom HTTP headers on a request to any website. This can allow a forged request to appear to be an AJAX request, thereby defeating CSRF protection which trusts the same-origin nature of AJAX requests."
msgstr ""

#: ../../releases/1.1.4.txt:51
#: ../../releases/1.2.5.txt:51
# fb8cc31249444431bda63079e185c959
# eb5d07d6f6bc4d9198f6b3ec815ac44d
msgid "Michael Koziarski of the Rails team brought this to our attention, and we were able to produce a proof-of-concept demonstrating the same vulnerability in Django's CSRF handling."
msgstr ""

#: ../../releases/1.1.4.txt:55
#: ../../releases/1.2.5.txt:55
# 804c0daf2e60499f85d8fba098e8fe7d
# 1b1ec8ecce9849598f3e4cbefce7ff43
msgid "To remedy this, Django will now apply full CSRF validation to all requests, regardless of apparent AJAX origin. This is technically backwards-incompatible, but the security risks have been judged to outweigh the compatibility concerns in this case."
msgstr ""

#: ../../releases/1.1.4.txt:60
#: ../../releases/1.2.5.txt:60
# dcc1a52c2c6d4961829fcdbde33c66a8
# e8c08649562e4c43a8b4974dd5cabd75
msgid "Additionally, Django will now accept the CSRF token in the custom HTTP header X-CSRFTOKEN, as well as in the form submission itself, for ease of use with popular JavaScript toolkits which allow insertion of custom headers into all AJAX requests."
msgstr ""

#: ../../releases/1.1.4.txt:65
#: ../../releases/1.2.5.txt:65
# 817386c9122b48cfa46b350c9b280376
# d928dcde8c774c05b45b5e60289bd7e2
msgid "Please see the :ref:`CSRF docs for example jQuery code <csrf-ajax>` that demonstrates this technique, ensuring that you are looking at the documentation for your version of Django, as the exact code necessary is different for some older versions of Django."
msgstr ""

#: ../../releases/1.2.txt:3
# 79e9dccf63cc4cc0aeaf2b9b56f9245c
msgid "Django 1.2 release notes"
msgstr ""

#: ../../releases/1.2.txt:5
# 378206ea70b44b5f811472e88b8a5f1c
msgid "*May 17, 2010.*"
msgstr ""

#: ../../releases/1.2.txt:7
# 81cc2b0bbbd744658f8e595853f2ce84
msgid "Welcome to Django 1.2!"
msgstr ""

#: ../../releases/1.2.txt:9
# b792ee2f6c3d4d05802fc51c627c6cdb
msgid "Nearly a year in the making, Django 1.2 packs an impressive list of `new features`_ and lots of bug fixes. These release notes cover the new features, as well as important changes you'll want to be aware of when upgrading from Django 1.1 or older versions."
msgstr ""

#: ../../releases/1.2.txt:17
#: ../../releases/1.3.txt:16
#: ../../releases/1.4.txt:21
#: ../../releases/1.5.txt:21
#: ../../releases/1.5-alpha-1.txt:34
#: ../../releases/1.5-beta-1.txt:30
# 0a9baf94d0894361ba5fd2e052d24e29
# 6a9d36c972354b75b74e704246b4c50b
# 953624db54e04706b7ea5eb3aef7fab2
# 1b35bfc061ca44d0843788cbb469e497
# 12f3fdd6a882442587dbb57c1ac6895b
# baeca39267bc4c83a5306d655354efcd
msgid "Overview"
msgstr ""

#: ../../releases/1.2.txt:19
# f2a6e9886d70413da2d6482e17b76e0f
msgid "Django 1.2 introduces several large, important new features, including:"
msgstr ""

#: ../../releases/1.2.txt:21
# 031051c734574cc09a8cd623d8fec8da
msgid "Support for `multiple database connections`_ in a single Django instance."
msgstr ""

#: ../../releases/1.2.txt:23
# e6ec1e79dca04da593242a416bc69b28
msgid "`Model validation`_ inspired by Django's form validation."
msgstr ""

#: ../../releases/1.2.txt:25
# 590fa6090a334011ae4c095743fd6a39
msgid "Vastly `improved protection against Cross-Site Request Forgery`_ (CSRF)."
msgstr ""

#: ../../releases/1.2.txt:27
# 3cab3c03573d449b8ca6274f7de92e1c
msgid "A new `user \"messages\" framework`_ with support for cookie- and session-based message for both anonymous and authenticated users."
msgstr ""

#: ../../releases/1.2.txt:30
# 071bb51eb3634377b19937f3c8f46912
msgid "Hooks for `object-level permissions`_, `permissions for anonymous users`_, and `more flexible username requirements`_."
msgstr ""

#: ../../releases/1.2.txt:33
# 91566f71aaf14968ac9527d6d41eec84
msgid "Customization of email sending via `email backends`_."
msgstr ""

#: ../../releases/1.2.txt:35
# 295521e30a514831813d14b4b9f64252
msgid "New :ref:`\"smart\" if template tag <new-in-1.2-smart-if>` which supports comparison operators."
msgstr ""

#: ../../releases/1.2.txt:43
# 586e58316273404f807356e5517c5b44
msgid "These are just the highlights; full details and a complete list of features `may be found below`_."
msgstr ""

#: ../../releases/1.2.txt:50
# 8f1fa69bb9cb4ec590882104d63dd7a3
msgid "`Django Advent`_ covered the release of Django 1.2 with a series of articles and tutorials that cover some of the new features in depth."
msgstr ""

#: ../../releases/1.2.txt:55
# 9d5573bd58ef4d5c8c352857eb51f79f
msgid "Wherever possible these features have been introduced in a backwards-compatible manner per :doc:`our API stability policy </misc/api-stability>` policy."
msgstr ""

#: ../../releases/1.2.txt:58
# 249efcfc39c74eeea7f0a35ebe261d79
msgid "However, a handful of features *have* changed in ways that, for some users, will be backwards-incompatible. The big changes are:"
msgstr ""

#: ../../releases/1.2.txt:61
# fbcfa7e10a344f759f0554f3ed904587
msgid "Support for Python 2.3 has been dropped. See the full notes below."
msgstr ""

#: ../../releases/1.2.txt:64
# aa17164954cd4bdb9c68bcb528999707
msgid "The new CSRF protection framework is not backwards-compatible with the old system. Users of the old system will not be affected until the old system is removed in Django 1.4."
msgstr ""

#: ../../releases/1.2.txt:68
# f999777bbd56475a91baff2c9143a63d
msgid "However, upgrading to the new CSRF protection framework requires a few important backwards-incompatible changes, detailed in `CSRF Protection`_, below."
msgstr ""

#: ../../releases/1.2.txt:72
# a46d502831f8409bbf10840e3afd3f69
msgid "Authors of custom :class:`~django.db.models.Field` subclasses should be aware that a number of methods have had a change in prototype, detailed under `get_db_prep_*() methods on Field`_, below."
msgstr ""

#: ../../releases/1.2.txt:76
# 4e111d80c35b4d44b68fc8be73dd97ed
msgid "The internals of template tags have changed somewhat; authors of custom template tags that need to store state (e.g. custom control flow tags) should ensure that their code follows the new rules for `stateful template tags`_"
msgstr ""

#: ../../releases/1.2.txt:81
# 1a6832ee0c9d404cb7ef911eed90d66c
msgid "The :func:`~django.contrib.auth.decorators.user_passes_test`, :func:`~django.contrib.auth.decorators.login_required`, and :func:`~django.contrib.auth.decorators.permission_required`, decorators from :mod:`django.contrib.auth` only apply to functions and no longer work on methods. There's a simple one-line fix `detailed below`_."
msgstr ""

#: ../../releases/1.2.txt:89
# d3be922aa9b549f297e03739d28b37f2
msgid "Again, these are just the big features that will affect the most users. Users upgrading from previous versions of Django are heavily encouraged to consult the complete list of :ref:`backwards-incompatible changes <backwards-incompatible-changes-1.2>` and the list of :ref:`deprecated features <deprecated-features-1.2>`."
msgstr ""

#: ../../releases/1.2.txt:96
#: ../../releases/1.2-rc-1.txt:28
#: ../../releases/1.3.txt:54
#: ../../releases/1.4.txt:63
#: ../../releases/1.4-alpha-1.txt:28
#: ../../releases/1.4-beta-1.txt:44
#: ../../releases/1.5.txt:70
#: ../../releases/1.5-alpha-1.txt:83
#: ../../releases/1.5-beta-1.txt:79
# 5f255e19bcd54bd0aac3c26b2d90484b
# 4c9e52496e934c7eb2f2d231b333e813
# bc03e35f0c1b470d97b635d3d25ea80a
# 43f985f550f14780b5a2874823613578
# ff4935094ebe40a587e27ab840761df6
# 8aeaa7821e6548478bfa5b803433a588
# 0a8df057c1d94062bd5c361ecabf5827
# e5d410433ed8494caa5b7f4690f0e939
# 0e0afe2211384e4fb689c8d3fe9c03b7
msgid "Python compatibility"
msgstr ""

#: ../../releases/1.2.txt:98
#: ../../releases/1.2-rc-1.txt:30
# 134ba149f3334d48ac94c59c8619fbb7
# fc358ee646e54ae0a75efc53d84bc23e
msgid "While not a new feature, it's important to note that Django 1.2 introduces the first shift in our Python compatibility policy since Django's initial public debut. Previous Django releases were tested and supported on 2.x Python versions from 2.3 up; Django 1.2, however, drops official support for Python 2.3. As such, the minimum Python version required for Django is now 2.4, and Django is tested and supported on Python 2.4, 2.5 and 2.6, and will be supported on the as-yet-unreleased Python 2.7."
msgstr ""

#: ../../releases/1.2.txt:107
#: ../../releases/1.2-rc-1.txt:39
# 4b42b9ac390149ad98040edf57192e48
# 50d08ddb703443c1a206d61d4c440207
msgid "This change should affect only a small number of Django users, as most operating-system vendors today are shipping Python 2.4 or newer as their default version. If you're still using Python 2.3, however, you'll need to stick to Django 1.1 until you can upgrade; per :doc:`our support policy </internals/release-process>`, Django 1.1 will continue to receive security support until the release of Django 1.3."
msgstr ""

#: ../../releases/1.2.txt:114
#: ../../releases/1.2-rc-1.txt:46
# 53f8d2d003e44bfdb8e89ce13ec980ba
# 546cbbe131384fedba165e9082db32c6
msgid "A roadmap for Django's overall 2.x Python support, and eventual transition to Python 3.x, is currently being developed, and will be announced prior to the release of Django 1.3."
msgstr ""

#: ../../releases/1.2.txt:119
# 0beef72e2f7b4b5a982356b88b2fc515
msgid "What's new in Django 1.2"
msgstr ""

#: ../../releases/1.2.txt:122
#: ../../releases/1.2-alpha-1.txt:427
# 9fbd6696aa2a446983ed34e1c3a451bd
# 8853a0381d0b4f76b8a1b342e9870fcc
msgid "Support for multiple databases"
msgstr ""

#: ../../releases/1.2.txt:124
# 34e037d8214c4b02b4f0c3dbbd794764
msgid "Django 1.2 adds the ability to use :doc:`more than one database </topics/db/multi-db>` in your Django project. Queries can be issued at a specific database with the ``using()`` method on ``QuerySet`` objects. Individual objects can be saved to a specific database by providing a ``using`` argument when you call ``save()``."
msgstr ""

#: ../../releases/1.2.txt:131
# 09308c5fa6084b6ab1653e9c1d3ec307
msgid "Model validation"
msgstr ""

#: ../../releases/1.2.txt:133
# ac51d9aa84ad4e6e95e7fbebf3c7e3a5
msgid "Model instances now have support for :ref:`validating their own data <validating-objects>`, and both model and form fields now accept configurable lists of :doc:`validators </ref/validators>` specifying reusable, encapsulated validation behavior. Note, however, that validation must still be performed explicitly. Simply invoking a model instance's ``save()`` method will not perform any validation of the instance's data."
msgstr ""

#: ../../releases/1.2.txt:141
# fafae4b0fb254cb79c6bc9d2be953813
msgid "Improved CSRF protection"
msgstr ""

#: ../../releases/1.2.txt:143
# db30a5d169f94978a68a673e94ba15e7
msgid "Django now has much improved protection against :doc:`Cross-Site Request Forgery (CSRF) attacks</ref/contrib/csrf>`. This type of attack occurs when a malicious Web site contains a link, a form button or some JavaScript that is intended to perform some action on your Web site, using the credentials of a logged-in user who visits the malicious site in their browser. A related type of attack, \"login CSRF,\" where an attacking site tricks a user's browser into logging into a site with someone else's credentials, is also covered."
msgstr ""

#: ../../releases/1.2.txt:152
# e7fe840a70dd456aa059fc35fb7145c6
msgid "Messages framework"
msgstr ""

#: ../../releases/1.2.txt:154
#: ../../releases/1.2-alpha-1.txt:419
# 88d8e89c04b8439d996e2118b5bfefbb
# f1770b1fa36a406cbaf7d74f345996f2
msgid "Django now includes a robust and configurable :doc:`messages framework </ref/contrib/messages>` with built-in support for cookie- and session-based messaging, for both anonymous and authenticated clients. The messages framework replaces the deprecated user message API and allows you to temporarily store messages in one request and retrieve them for display in a subsequent request (usually the next one)."
msgstr ""

#: ../../releases/1.2.txt:162
#: ../../releases/1.2-beta-1.txt:87
# 7e176db5db8c42a4a2b4d7ed05166932
# f5628821f91c490480dd7960f6cc48ca
msgid "Object-level permissions"
msgstr ""

#: ../../releases/1.2.txt:164
# 4d145787ae4d4a77a31781afa5a51eae
msgid "A foundation for specifying permissions at the per-object level has been added. Although there is no implementation of this in core, a custom authentication backend can provide this implementation and it will be used by :class:`django.contrib.auth.models.User`. See the :doc:`authentication docs </topics/auth/index>` for more information."
msgstr ""

#: ../../releases/1.2.txt:171
#: ../../releases/1.2-beta-1.txt:99
# c8ef84316fd34cbda283bc5e87dae495
# e269efd288c849639d4cff3fbac13f61
msgid "Permissions for anonymous users"
msgstr ""

#: ../../releases/1.2.txt:173
# 3c7788019ce84c7387ad849de6ebb440
msgid "If you provide a custom auth backend with ``supports_anonymous_user`` set to ``True``, AnonymousUser will check the backend for permissions, just like User already did.  This is useful for centralizing permission handling - apps can always delegate the question of whether something is allowed or not to the authorization/authentication backend. See the :doc:`authentication docs </topics/auth/index>` for more details."
msgstr ""

#: ../../releases/1.2.txt:181
# a8ade94dbaaa438a84cbbb59be760429
msgid "Relaxed requirements for usernames"
msgstr ""

#: ../../releases/1.2.txt:183
# 45a87f837fa04c5da590b382d21a3389
msgid "The built-in :class:`~django.contrib.auth.models.User` model's :attr:`~django.contrib.auth.models.User.username` field now allows a wider range of characters, including ``@``, ``+``, ``.`` and ``-`` characters."
msgstr ""

#: ../../releases/1.2.txt:188
# 0bb2bc5f223e447bb1716325c7d9baa3
msgid "Email backends"
msgstr ""

#: ../../releases/1.2.txt:190
#: ../../releases/1.2-alpha-1.txt:401
# 654968351d73405eb108e6629c882981
# 8125c6e70690403e81632fc1903ba1e6
msgid "You can now :ref:`configure the way that Django sends email <topic-email-backends>`. Instead of using SMTP to send all email, you can now choose a configurable email backend to send messages. If your hosting provider uses a sandbox or some other non-SMTP technique for sending mail, you can now construct an email backend that will allow Django's standard :doc:`mail sending methods</topics/email>` to use those facilities."
msgstr ""

#: ../../releases/1.2.txt:198
# f14c8c7f7cf24cd0b219f057b53b632d
msgid "This also makes it easier to debug mail sending. Django ships with backend implementations that allow you to send email to a :ref:`file<topic-email-file-backend>`, to the :ref:`console<topic-email-console-backend>`, or to :ref:`memory<topic-email-memory-backend>`. You can even configure all email to be :ref:`thrown away<topic-email-dummy-backend>`."
msgstr ""

#: ../../releases/1.2.txt:208
# 3e1068ba86bb4f919d84949d9ba22e4d
msgid "\"Smart\" :ttag:`if` tag"
msgstr ""

#: ../../releases/1.2.txt:210
# bf124a4f033d4b9092415554de909696
msgid "The :ttag:`if` tag has been upgraded to be much more powerful. First, we've added support for comparison operators. No longer will you have to type:"
msgstr ""

#: ../../releases/1.2.txt:219
# 98f35e935eb745a2b5575a4a1d09a9ab
msgid "You can now do this:"
msgstr ""

#: ../../releases/1.2.txt:227
# 9a073f682375445b9147442dea8ff0d3
msgid "There's really no reason to use ``{% ifequal %}`` or ``{% ifnotequal %}`` anymore, unless you're the nostalgic type."
msgstr ""

#: ../../releases/1.2.txt:230
# 6a3fae05bf8443eea88e969c61aa1164
msgid "The operators supported are ``==``, ``!=``, ``<``, ``>``, ``<=``, ``>=``, ``in`` and ``not in``, all of which work like the Python operators, in addition to ``and``, ``or`` and ``not``, which were already supported."
msgstr ""

#: ../../releases/1.2.txt:234
#: ../../releases/1.2-alpha-1.txt:459
# 899b19a8965c43b2a851dccb5c9aed38
# 551ad6ac228740d1bca61f5a98e0a203
msgid "Also, filters may now be used in the ``if`` expression. For example:"
msgstr ""

#: ../../releases/1.2.txt:245
#: ../../releases/1.2-alpha-1.txt:470
# 41c314b3611642579538dbef7d3c4d9b
# 6d4742f350124aaca8fd27584507fda4
msgid "Template caching"
msgstr ""

#: ../../releases/1.2.txt:247
# 81734db9a945495d922816e0f92fb841
msgid "In previous versions of Django, every time you rendered a template, it would be reloaded from disk. In Django 1.2, you can use a :ref:`cached template loader <template-loaders>` to load templates once, then cache the result for every subsequent render. This can lead to a significant performance improvement if your templates are broken into lots of smaller subtemplates (using the ``{% extends %}`` or ``{% include %}`` tags)."
msgstr ""

#: ../../releases/1.2.txt:255
#: ../../releases/1.2-alpha-1.txt:480
# 184c8d08897b403b8a8409ad6cbdcea0
# 84b538ef5c5a46cb82171635e10f690e
msgid "As a side effect, it is now much easier to support non-Django template languages. For more details, see the :ref:`notes on supporting non-Django template languages<topic-template-alternate-language>`."
msgstr ""

#: ../../releases/1.2.txt:260
# b903cad4386342d9b81b3d3c532b2a48
msgid "Class-based template loaders"
msgstr ""

#: ../../releases/1.2.txt:262
# 34a7f096627d4d33bf9beb4f745e8dcf
msgid "As part of the changes made to introduce `Template caching`_  and following a general trend in Django, the template loaders API has been modified to use template loading mechanisms that are encapsulated in Python classes as opposed to functions, the only method available until Django 1.1."
msgstr ""

#: ../../releases/1.2.txt:267
# ca9d8c81ec1848b79201390b30800f33
msgid "All the template loaders :ref:`shipped with Django <template-loaders>` have been ported to the new API but they still implement the function-based API and the template core machinery still accepts function-based loaders (builtin or third party) so there is no immediate need to modify your :setting:`TEMPLATE_LOADERS` setting in existing projects, things will keep working if you leave it untouched up to and including the Django 1.3 release."
msgstr ""

#: ../../releases/1.2.txt:274
# 2325bc8640f9425ea23fc7daf41a7777
msgid "If you have developed your own custom template loaders we suggest to consider porting them to a class-based implementation because the code for backwards compatibility with function-based loaders starts its deprecation process in Django 1.2 and will be removed in Django 1.4.  There is a description of the API these loader classes must implement :ref:`here <topic-template-alternate-language>` and you can also examine the source code of the loaders shipped with Django."
msgstr ""

#: ../../releases/1.2.txt:283
#: ../../releases/1.2-alpha-1.txt:485
# 8e99a4a4651b40b18d5e6af7df168ac8
# 3cb55fff93bc4f488f4325d769f0c516
msgid "Natural keys in fixtures"
msgstr ""

#: ../../releases/1.2.txt:285
# 69c4746535814c11b44664637bcfc4c5
msgid "Fixtures can now refer to remote objects using :ref:`topics-serialization-natural-keys`. This lookup scheme is an alternative to the normal primary-key based object references in a fixture, improving readability and resolving problems referring to objects whose primary key value may not be predictable or known."
msgstr ""

#: ../../releases/1.2.txt:292
# 7736f1645ca545f983f2dcda76368408
msgid "Fast failure for tests"
msgstr ""

#: ../../releases/1.2.txt:294
# 5c5a21b48292459e805c8f6b0efb1f30
msgid "Both the :djadmin:`test` subcommand of ``django-admin.py`` and the ``runtests.py`` script used to run Django's own test suite now support a ``--failfast`` option. When specified, this option causes the test runner to exit after encountering a failure instead of continuing with the test run. In addition, the handling of ``Ctrl-C`` during a test run has been improved to trigger a graceful exit from the test run that reports details of the tests that were run before the interruption."
msgstr ""

#: ../../releases/1.2.txt:303
#: ../../releases/1.2-alpha-1.txt:494
# 3c8af12fcd434d448d01f122d20a17af
# b6bfc579843242b6b042d6b917db03b1
msgid "``BigIntegerField``"
msgstr ""

#: ../../releases/1.2.txt:305
# 1a54576904714b2e8b5d887adc3e3a97
msgid "Models can now use a 64-bit :class:`~django.db.models.BigIntegerField` type."
msgstr ""

#: ../../releases/1.2.txt:308
#: ../../releases/1.2-alpha-1.txt:509
# 61c45ff7d24a46c89e1a776ca69a8ce5
# 18f7b2edbfbb46d081f8c83bdf56468b
msgid "Improved localization"
msgstr ""

#: ../../releases/1.2.txt:310
# 00715c2f9b8d4f20b26f7ae9c949c09c
msgid "Django's :doc:`internationalization framework </topics/i18n/index>` has been expanded with locale-aware formatting and form processing. That means, if enabled, dates and numbers on templates will be displayed using the format specified for the current locale. Django will also use localized formats when parsing data in forms. See :ref:`Format localization <format-localization>` for more details."
msgstr ""

#: ../../releases/1.2.txt:317
# 844178817cca4fe4b104c3bfe912c82d
msgid "``readonly_fields`` in ``ModelAdmin``"
msgstr ""

#: ../../releases/1.2.txt:319
# 7ddfb8eff9c140c0bb65acbcce642ad1
msgid ":attr:`django.contrib.admin.ModelAdmin.readonly_fields` has been added to enable non-editable fields in add/change pages for models and inlines. Field and calculated values can be displayed alongside editable fields."
msgstr ""

#: ../../releases/1.2.txt:324
#: ../../releases/1.2-alpha-1.txt:526
# bbf6ba2c10aa4a40b4e04d356cfd7ad4
# 84308dbe79414b9795379b157d21c4bb
msgid "Customizable syntax highlighting"
msgstr ""

#: ../../releases/1.2.txt:326
# 50ece414005f4af5b124819d7a97bde1
msgid "You can now use a ``DJANGO_COLORS`` environment variable to modify or disable the colors used by ``django-admin.py`` to provide :ref:`syntax highlighting <syntax-coloring>`."
msgstr ""

#: ../../releases/1.2.txt:331
# bf799fe745284de5b6bbfc62bf1c0faf
msgid "Syndication feeds as views"
msgstr ""

#: ../../releases/1.2.txt:333
# 06b3cc2bbb3144a69a66dbe85f38fb76
msgid ":doc:`Syndication feeds </ref/contrib/syndication>` can now be used directly as views in your :doc:`URLconf </topics/http/urls>`. This means that you can maintain complete control over the URL structure of your feeds. Like any other view, feeds views are passed a ``request`` object, so you can do anything you would normally do with a view, like user based access control, or making a feed a named URL."
msgstr ""

#: ../../releases/1.2.txt:343
# acdae84d288a42e08eb10d079f448ce3
msgid "The most significant new feature for :doc:`GeoDjango </ref/contrib/gis/index>` in 1.2 is support for multiple spatial databases.  As a result, the following :ref:`spatial database backends <spatial-backends>` are now included:"
msgstr ""

#: ../../releases/1.2.txt:348
# 091fa8ac3e034d1fbb723c51b1acbc5e
msgid "``django.contrib.gis.db.backends.postgis``"
msgstr ""

#: ../../releases/1.2.txt:349
# bf3e7436e8954e24bde1a2a0020aaf96
msgid "``django.contrib.gis.db.backends.mysql``"
msgstr ""

#: ../../releases/1.2.txt:350
# 3a88634fb0364bd39fb7a4118d7fe899
msgid "``django.contrib.gis.db.backends.oracle``"
msgstr ""

#: ../../releases/1.2.txt:351
# b6cffbe7e2bf47dcb4f92c9796d61f56
msgid "``django.contrib.gis.db.backends.spatialite``"
msgstr ""

#: ../../releases/1.2.txt:353
# ff63de6271db4b029427cd4bfa4f54f1
msgid "GeoDjango now supports the rich capabilities added in the `PostGIS 1.5 release <http://postgis.refractions.net/documentation/manual-1.5/>`_. New features include suppport for the :ref:`geography type <geography-type>` and enabling of :ref:`distance queries <distance-queries>` with non-point geometries on geographic coordinate systems."
msgstr ""

#: ../../releases/1.2.txt:359
# ca12ce36551b478893516b1fb4fb7a01
msgid "Support for 3D geometry fields was added, and may be enabled by setting the :attr:`~django.contrib.gis.db.models.GeometryField.dim` keyword to 3 in your :class:`~django.contrib.gis.db.models.GeometryField`. The :class:`~django.contrib.gis.db.models.Extent3D` aggregate and :meth:`~django.contrib.gis.db.models.GeoQuerySet.extent3d` ``GeoQuerySet`` method were added as a part of this feature."
msgstr ""

#: ../../releases/1.2.txt:366
# 5896e4d821de45e5b9f5c5b2f3004b3e
msgid "The following :class:`~django.contrib.gis.db.models.GeoQuerySet` methods are new in 1.2:"
msgstr ""

#: ../../releases/1.2.txt:369
# dce5b5e49dde4231987297aff5e63164
msgid ":meth:`~django.contrib.gis.db.models.GeoQuerySet.force_rhr`"
msgstr ""

#: ../../releases/1.2.txt:370
# 2ca023a5b5d848d4a0a62511e678d7e8
msgid ":meth:`~django.contrib.gis.db.models.GeoQuerySet.reverse_geom`"
msgstr ""

#: ../../releases/1.2.txt:371
# 3c74b9b6a70c45d88bb5a0389753b0f2
msgid ":meth:`~django.contrib.gis.db.models.GeoQuerySet.geohash`"
msgstr ""

#: ../../releases/1.2.txt:373
# f4f20be5fed8435fb8a09231b39cfb80
msgid "The :ref:`GEOS interface <ref-geos>` was updated to use thread-safe C library functions when available on the platform."
msgstr ""

#: ../../releases/1.2.txt:376
# 59615184bcd2434d8d4edd6111efb643
msgid "The :ref:`GDAL interface <ref-gdal>` now allows the user to set a :attr:`~django.contrib.gis.gdal.Layer.spatial_filter` on the features returned when iterating over a :class:`~django.contrib.gis.gdal.Layer`."
msgstr ""

#: ../../releases/1.2.txt:381
# 649afc99ed4c4ef9ad17d7ce52d2444f
msgid "Finally, :doc:`GeoDjango's documentation </ref/contrib/gis/index>` is now included with Django's and is no longer hosted separately at `geodjango.org <http://geodjango.org/>`_."
msgstr ""

#: ../../releases/1.2.txt:388
# 3c325ac2e07943c39d2b93933df66634
msgid "JavaScript-assisted handling of inline related objects in the admin"
msgstr ""

#: ../../releases/1.2.txt:390
# 0b4d431f60ce4f1bafdeaa8e98315651
msgid "If a user has JavaScript enabled in their browser, the interface for inline objects in the admin now allows inline objects to be dynamically added and removed. Users without JavaScript-enabled browsers will see no change in the behavior of inline objects."
msgstr ""

#: ../../releases/1.2.txt:396
# a83eef95e8134ff38829f536178e0de1
msgid "New ``now`` template tag format specifier characters: ``c`` and ``u``"
msgstr ""

#: ../../releases/1.2.txt:398
# dd73fa54b8014e06afec880de1159a59
msgid "The argument to the :ttag:`now` has gained two new format characters: ``c`` to specify that a datetime value should be formatted in ISO 8601 format, and ``u`` that allows output of the microseconds part of a datetime or time value."
msgstr ""

#: ../../releases/1.2.txt:403
# b8822416a9954627bb24cb3729c160b7
msgid "These are also available in others parts like the :tfilter:`date` and :tfilter:`time` template filters, the ``humanize`` template tag library and the new `format localization`_ framework."
msgstr ""

#: ../../releases/1.2.txt:412
#: ../../releases/1.2-alpha-1.txt:20
# 526f1a5f04924bfaa1226f5380b67bf2
# 29a180f5d116404dbba72d77af83b7c0
msgid "Backwards-incompatible changes in 1.2"
msgstr ""

#: ../../releases/1.2.txt:414
# 1cb6882b47994f948e4888589f0c81de
msgid "Wherever possible the new features above have been introduced in a backwards-compatible manner per :doc:`our API stability policy </misc/api-stability>` policy. This means that practically all existing code which worked with Django 1.1 will continue to work with Django 1.2; such code will, however, begin issuing warnings (see below for details)."
msgstr ""

#: ../../releases/1.2.txt:421
# ca96315cc87d453cb46edb7882367307
msgid "However, a handful of features *have* changed in ways that, for some users, will be immediately backwards-incompatible. Those changes are detailed below."
msgstr ""

#: ../../releases/1.2.txt:426
#: ../../releases/1.2-alpha-1.txt:23
# c54597832ca844088221d5c2a176eb26
# 2d379f51562a4da18427614d8b5e058d
msgid "CSRF Protection"
msgstr ""

#: ../../releases/1.2.txt:428
# 3b3c2c61253e4d01bcc59240307faf26
msgid "We've made large changes to the way CSRF protection works, detailed in :doc:`the CSRF documentation </ref/contrib/csrf>`. Here are the major changes you should be aware of:"
msgstr ""

#: ../../releases/1.2.txt:432
# 391f188e8d0e436691b5d8affd0a37bf
msgid "``CsrfResponseMiddleware`` and ``CsrfMiddleware`` have been deprecated and will be removed completely in Django 1.4, in favor of a template tag that should be inserted into forms."
msgstr ""

#: ../../releases/1.2.txt:436
# 44b4e70c4e104411ac8ebf2dc9f929e9
msgid "All contrib apps use a ``csrf_protect`` decorator to protect the view. This requires the use of the ``csrf_token`` template tag in the template. If you have used custom templates for contrib views, you MUST READ THE UPGRADE INSTRUCTIONS to fix those templates."
msgstr ""

#: ../../releases/1.2.txt:443
#: ../../releases/1.2.txt:871
#: ../../releases/1.2-alpha-1.txt:40
#: ../../releases/1.2-alpha-1.txt:208
# 1242391635f34b30822b9340bfa53070
# 2fb942100e6648ec924ee51019128d37
# 3b0dcca488164693b292753c071a3064
# 9524e02b549d46978332e02e0151735c
msgid "The upgrade notes have been removed in current Django docs. Please refer to the docs for Django 1.3 or older to find these instructions."
msgstr ""

#: ../../releases/1.2.txt:446
# b318c58b020841c58463547434596b7f
msgid "``CsrfViewMiddleware`` is included in :setting:`MIDDLEWARE_CLASSES` by default. This turns on CSRF protection by default, so views that accept POST requests need to be written to work with the middleware. Instructions on how to do this are found in the CSRF docs."
msgstr ""

#: ../../releases/1.2.txt:451
# b8149798687542d2982a0286e24961e0
msgid "All of the CSRF has moved from contrib to core (with backwards compatible imports in the old locations, which are deprecated and will cease to be supported in Django 1.4)."
msgstr ""

#: ../../releases/1.2.txt:456
# 52668708facd46b299b5be66c31f4713
msgid "``get_db_prep_*()`` methods on ``Field``"
msgstr ""

#: ../../releases/1.2.txt:458
# bce5d17f5f704fe480568370651904b6
msgid "Prior to Django 1.2, a custom ``Field`` had the option of defining several functions to support conversion of Python values into database-compatible values. A custom field might look something like::"
msgstr ""

#: ../../releases/1.2.txt:476
#: ../../releases/1.2-alpha-1.txt:117
# e83e54baed004cc1ace06b7d54109eeb
# 2cf9d7f27dd546aeaabba9b385cf8d81
msgid "In 1.2, these three methods have undergone a change in prototype, and two extra methods have been introduced::"
msgstr ""

#: ../../releases/1.2.txt:500
# b06f08fa2a6740bb868453ca6460c407
msgid "These changes are required to support multiple databases -- ``db_type`` and ``get_db_prep_*`` can no longer make any assumptions regarding the database for which it is preparing. The ``connection`` argument now provides the preparation methods with the specific connection for which the value is being prepared."
msgstr ""

#: ../../releases/1.2.txt:506
# 78e9ecfb21e04b20966d6517d00ab43a
msgid "The two new methods exist to differentiate general data-preparation requirements from requirements that are database-specific. The ``prepared`` argument is used to indicate to the database-preparation methods whether generic value preparation has been performed. If an unprepared (i.e., ``prepared=False``) value is provided to the ``get_db_prep_*()`` calls, they should invoke the corresponding ``get_prep_*()`` calls to perform generic data preparation."
msgstr ""

#: ../../releases/1.2.txt:514
# 1771ee0381ac4e7d9da822d204092f9d
msgid "We've provided conversion functions that will transparently convert functions adhering to the old prototype into functions compatible with the new prototype. However, these conversion functions will be removed in Django 1.4, so you should upgrade your ``Field`` definitions to use the new prototype as soon as possible."
msgstr ""

#: ../../releases/1.2.txt:520
# ca3f4232f7014e0b99a7a23a7bb0b407
msgid "If your ``get_db_prep_*()`` methods made no use of the database connection, you should be able to upgrade by renaming ``get_db_prep_value()`` to ``get_prep_value()`` and ``get_db_prep_lookup()`` to ``get_prep_lookup()``. If you require database specific conversions, then you will need to provide an implementation ``get_db_prep_*`` that uses the ``connection`` argument to resolve database-specific values."
msgstr ""

#: ../../releases/1.2.txt:529
#: ../../releases/1.2-alpha-1.txt:167
# b16a352eb16248c89813417aa1be48f0
# 1493fea515f94f5fa11ee38d3a890a61
msgid "Stateful template tags"
msgstr ""

#: ../../releases/1.2.txt:531
# a22eae41df054070965219a58077486b
msgid "Template tags that store rendering state on their ``Node`` subclass have always been vulnerable to thread-safety and other issues; as of Django 1.2, however, they may also cause problems when used with the new :ref:`cached template loader<template-loaders>`."
msgstr ""

#: ../../releases/1.2.txt:536
# d1b631d48e1346e48ee67aab9cffba3d
msgid "All of the built-in Django template tags are safe to use with the cached loader, but if you're using custom template tags that come from third party packages, or from your own code, you should ensure that the ``Node`` implementation for each tag is thread-safe. For more information, see :ref:`template tag thread safety considerations<template_tag_thread_safety>`."
msgstr ""

#: ../../releases/1.2.txt:543
# 43e21d135f5c4c849f547e4da6fc6ecb
msgid "You may also need to update your templates if you were relying on the implementation of Django's template tags *not* being thread safe. The :ttag:`cycle` tag is the most likely to be affected in this way, especially when used in conjunction with the :ttag:`include` tag. Consider the following template fragment::"
msgstr ""

#: ../../releases/1.2.txt:553
# bb66c160a2d0477ba4abccc15ca23f8a
msgid "with a ``subtemplate.html`` that reads::"
msgstr ""

#: ../../releases/1.2.txt:557
# df9c9937859a44d694ccb85fd466cc5a
msgid "Using the non-thread-safe, pre-Django 1.2 renderer, this would output::"
msgstr ""

#: ../../releases/1.2.txt:561
# e5038fa4e3e24208afe80faf542ad86f
msgid "Using the thread-safe Django 1.2 renderer, you will instead get::"
msgstr ""

#: ../../releases/1.2.txt:565
# c6c1dc18ab6140c0b98eedf91ac622aa
msgid "This is because each rendering of the :ttag:`include` tag is an independent rendering. When the :ttag:`cycle` tag was not thread safe, the state of the :ttag:`cycle` tag would leak between multiple renderings of the same :ttag:`include`. Now that the :ttag:`cycle` tag is thread safe, this leakage no longer occurs."
msgstr ""

#: ../../releases/1.2.txt:572
# 83a84b245cc446699458c5c92ff6c871
msgid "``user_passes_test``, ``login_required`` and ``permission_required``"
msgstr ""

#: ../../releases/1.2.txt:574
# 3c31b29bdca34a588eca2951186ed645
msgid "``django.contrib.auth.decorators`` provides the decorators ``login_required``, ``permission_required`` and ``user_passes_test``. Previously it was possible to use these decorators both on functions (where the first argument is 'request') and on methods (where the first argument is 'self', and the second argument is 'request'). Unfortunately, flaws were discovered in the code supporting this: it only works in limited circumstances, and produces errors that are very difficult to debug when it does not work."
msgstr ""

#: ../../releases/1.2.txt:584
# acf10b11d2b6429bacfff07992e6f27e
msgid "For this reason, the 'auto adapt' behavior has been removed, and if you are using these decorators on methods, you will need to manually apply :func:`django.utils.decorators.method_decorator` to convert the decorator to one that works with methods. For example, you would change code from this::"
msgstr ""

#: ../../releases/1.2.txt:606
# 23244e83291e42f0a1269116023863c9
msgid "or::"
msgstr ""

#: ../../releases/1.2.txt:618
# 886c0b71921a4029b44f9e1a536c9f71
msgid "For those of you who've been following the development trunk, this change also applies to other decorators introduced since 1.1, including ``csrf_protect``, ``cache_control`` and anything created using ``decorator_from_middleware``."
msgstr ""

#: ../../releases/1.2.txt:624
#: ../../releases/1.2-alpha-1.txt:53
# e106cd8ca5114e65bd0754d38774f2d9
# d835b99b3d544f02800a5dbb01562496
msgid ":ttag:`if` tag changes"
msgstr ""

#: ../../releases/1.2.txt:626
# 695b80fdc23c448a8e9c90b136a17c1b
msgid "Due to new features in the :ttag:`if` template tag, it no longer accepts 'and', 'or' and 'not' as valid **variable** names. Previously, these strings could be used as variable names. Now, the keyword status is always enforced, and template code such as ``{% if not %}`` or ``{% if and %}`` will throw a ``TemplateSyntaxError``. Also, ``in`` is a new keyword and so is not a valid variable name in this tag."
msgstr ""

#: ../../releases/1.2.txt:634
#: ../../releases/1.2-alpha-1.txt:62
# ab03d51730df450f8378dedd72a25307
# d2ce29653e404aeea15a174b19c12259
msgid "``LazyObject``"
msgstr ""

#: ../../releases/1.2.txt:636
# b641b481ab6b4ffabc6a3550b051ab98
msgid "``LazyObject`` is an undocumented-but-often-used utility class used for lazily wrapping other objects of unknown type."
msgstr ""

#: ../../releases/1.2.txt:639
# 6a5fca341f704a99abe610e6731023fe
msgid "In Django 1.1 and earlier, it handled introspection in a non-standard way, depending on wrapped objects implementing a public method named ``get_all_members()``. Since this could easily lead to name clashes, it has been changed to use the standard Python introspection method, involving ``__members__`` and ``__dir__()``."
msgstr ""

#: ../../releases/1.2.txt:645
# a3da8c29cdde46c4a4976cf3793a99b5
msgid "If you used ``LazyObject`` in your own code and implemented the ``get_all_members()`` method for wrapped objects, you'll need to make a couple of changes:"
msgstr ""

#: ../../releases/1.2.txt:649
# f4f04c413e5541e38eb090e1b441f0bf
msgid "First, if your class does not have special requirements for introspection (i.e., you have not implemented ``__getattr__()`` or other methods that allow for attributes not discoverable by normal mechanisms), you can simply remove the ``get_all_members()`` method. The default implementation on ``LazyObject`` will do the right thing."
msgstr ""

#: ../../releases/1.2.txt:655
# 08c5bd33366f4e35899fc96c49c09863
msgid "If you have more complex requirements for introspection, first rename the ``get_all_members()`` method to ``__dir__()``. This is the standard introspection method for Python 2.6 and above. If you require support for Python versions earlier than 2.6, add the following code to the class::"
msgstr ""

#: ../../releases/1.2.txt:663
# d794dd6ab3844da498ee3a75f3fd22a7
msgid "``__dict__`` on model instances"
msgstr ""

#: ../../releases/1.2.txt:665
#: ../../releases/1.2-alpha-1.txt:89
# db3c1601890d4e69b2b92fa8ded34d55
# 499dca059e58416ea757cb53b58811df
msgid "Historically, the ``__dict__`` attribute of a model instance has only contained attributes corresponding to the fields on a model."
msgstr ""

#: ../../releases/1.2.txt:668
# fce9ff4191af4b618d0f960ce0468a1d
msgid "In order to support multiple database configurations, Django 1.2 has added a ``_state`` attribute to object instances. This attribute will appear in ``__dict__`` for a model instance. If your code relies on iterating over ``__dict__`` to obtain a list of fields, you must now be prepared to handle or filter out the ``_state`` attribute."
msgstr ""

#: ../../releases/1.2.txt:677
# 7cf1a6992a7e42a4949e546333c2d100
msgid "The exit status code of the test runners (``tests/runtests.py`` and ``python manage.py test``) no longer represents the number of failed tests, because a failure of 256 or more tests resulted in a wrong exit status code. The exit status code for the test runner is now 0 for success (no failing tests) and 1 for any number of test failures. If needed, the number of test failures can be found at the end of the test runner's output."
msgstr ""

#: ../../releases/1.2.txt:687
# 610c913c3d1040448d36eb3dc7ce7883
msgid "To fix bugs with cookies in Internet Explorer, Safari, and possibly other browsers, our encoding of cookie values was changed so that the comma and semicolon are treated as non-safe characters, and are therefore encoded as ``\\054`` and ``\\073`` respectively.  This could produce backwards incompatibilities, especially if you are storing comma or semi-colon in cookies and have javascript code that parses and manipulates cookie values client-side."
msgstr ""

#: ../../releases/1.2.txt:696
# 9c3fde8b01d244c38e86fd6684eaa77c
msgid "``ModelForm.is_valid()`` and ``ModelForm.errors``"
msgstr ""

#: ../../releases/1.2.txt:698
# 368bb48b979d41b7b56430b5214427e9
msgid "Much of the validation work for ModelForms has been moved down to the model level. As a result, the first time you call ``ModelForm.is_valid()``, access ``ModelForm.errors`` or otherwise trigger form validation, your model will be cleaned in-place. This conversion used to happen when the model was saved. If you need an unmodified instance of your model, you should pass a copy to the ``ModelForm`` constructor."
msgstr ""

#: ../../releases/1.2.txt:706
# 3d063f85be88457faba496aaef4d2402
msgid "``BooleanField`` on MySQL"
msgstr ""

#: ../../releases/1.2.txt:708
# d4b1791f7fbc4cea9e8005d64e0e5b25
msgid "In previous versions of Django, a model's ``BooleanField`` under MySQL would return its value as either ``1`` or ``0``, instead of ``True`` or ``False``; for most people this wasn't a problem because ``bool`` is a subclass of ``int`` in Python. In Django 1.2, however, ``BooleanField`` on MySQL correctly returns a real ``bool``.  The only time this should ever be an issue is if you were expecting the ``repr`` of a ``BooleanField`` to print ``1`` or ``0``."
msgstr ""

#: ../../releases/1.2.txt:717
# 20ecca8d05c845e7b3a776b1a5684f50
msgid "Changes to the interpretation of ``max_num`` in FormSets"
msgstr ""

#: ../../releases/1.2.txt:719
# 3cd1d91f558c4b36846c7dd0bd8f0b2d
msgid "As part of enhancements made to the handling of FormSets, the default value and interpretation of the ``max_num`` parameter to the :ref:`django.forms.formsets.formset_factory() <formsets-max-num>` and :ref:`django.forms.models.modelformset_factory() <model-formsets-max-num>` functions has changed slightly. This change also affects the way the ``max_num`` argument is :ref:`used for inline admin objects <ref-contrib-admin-inline-max-num>`"
msgstr ""

#: ../../releases/1.2.txt:727
# 04710ac8ff5744af8a8435977c6777cf
msgid "Previously, the default value for ``max_num`` was ``0`` (zero). FormSets then used the boolean value of ``max_num`` to determine if a limit was to be imposed on the number of generated forms. The default value of ``0`` meant that there was no default limit on the number of forms in a FormSet."
msgstr ""

#: ../../releases/1.2.txt:733
# aa03142ae05740c88066366b87a88549
msgid "Starting with 1.2, the default value for ``max_num`` has been changed to ``None``, and FormSets will differentiate between a value of ``None`` and a value of ``0``. A value of ``None`` indicates that no limit on the number of forms is to be imposed; a value of ``0`` indicates that a maximum of 0 forms should be imposed. This doesn't necessarily mean that no forms will be displayed -- see the :ref:`ModelFormSet documentation <model-formsets-max-num>` for more details."
msgstr ""

#: ../../releases/1.2.txt:742
# b8ec960895f8481ab2445f59360cf1f1
msgid "If you were manually specifying a value of ``0`` for ``max_num``, you will need to update your FormSet and/or admin definitions."
msgstr ""

#: ../../releases/1.2.txt:747
# 72ca0f9400864adea6089abef11c99a9
msgid ":ref:`1.2-js-assisted-inlines`"
msgstr ""

#: ../../releases/1.2.txt:750
# 875155325aef420699eed27260675e18
msgid "``email_re``"
msgstr ""

#: ../../releases/1.2.txt:752
# d9bc3ff4cf184c12a116178ef2e55481
msgid "An undocumented regular expression for validating email addresses has been moved from ``django.form.fields`` to ``django.core.validators``. You will need to update your imports if you are using it."
msgstr ""

#: ../../releases/1.2.txt:759
#: ../../releases/1.2-alpha-1.txt:191
# d48eef605a2d4290818eccef976789b4
# 2c9e8a96ae40434ea5bc8d96488c89f0
msgid "Features deprecated in 1.2"
msgstr ""

#: ../../releases/1.2.txt:761
# 587c12cf19414217991c4b8ada1891f2
msgid "Finally, Django 1.2 deprecates some features from earlier releases. These features are still supported, but will be gradually phased out over the next few release cycles."
msgstr ""

#: ../../releases/1.2.txt:765
# afaab8ed025944cd9c7c563b50d34868
msgid "Code taking advantage of any of the features below will raise a ``PendingDeprecationWarning`` in Django 1.2. This warning will be silent by default, but may be turned on using Python's :mod:`warnings` module, or by running Python with a ``-Wd`` or ``-Wall`` flag."
msgstr ""

#: ../../releases/1.2.txt:770
# 6a0b09d5e0ff40a3b0ce2c5712bcd4e2
msgid "In Django 1.3, these warnings will become a ``DeprecationWarning``, which is *not* silent. In Django 1.4 support for these features will be removed entirely."
msgstr ""

#: ../../releases/1.2.txt:776
# 21188a24883a4647ae43a1cd305c407d
msgid "For more details, see the documentation :doc:`Django's release process </internals/release-process>` and our :doc:`deprecation timeline </internals/deprecation>`.`"
msgstr ""

#: ../../releases/1.2.txt:783
#: ../../releases/1.2-alpha-1.txt:248
# 51d17e13d62f4b61ae0b3e202fd60fa3
# eb4c2e7676f2404ea432777d4eadef39
msgid "Specifying databases"
msgstr ""

#: ../../releases/1.2.txt:785
# a9990bf949fd4761bbd09695fc564c10
msgid "Prior to Django 1.2, Django used a number of settings to control access to a single database. Django 1.2 introduces support for multiple databases, and as a result the way you define database settings has changed."
msgstr ""

#: ../../releases/1.2.txt:790
# 8ee3a7c54bea42339274be2174f8fd63
msgid "Any existing Django settings file will continue to work as expected until Django 1.4. Until then, old-style database settings will be automatically translated to the new-style format."
msgstr ""

#: ../../releases/1.2.txt:794
# e02d368de876473a9d43a403376af54e
msgid "In the old-style (pre 1.2) format, you had a number of ``DATABASE_`` settings in your settings file. For example::"
msgstr ""

#: ../../releases/1.2.txt:802
# 75b07fb7e1a34a15bf7e61634f6728c5
msgid "These settings are now in a dictionary named :setting:`DATABASES`. Each item in the dictionary corresponds to a single database connection, with the name ``'default'`` describing the default database connection. The setting names have also been shortened. The previous sample settings would now look like this::"
msgstr ""

#: ../../releases/1.2.txt:817
#: ../../releases/1.2-alpha-1.txt:283
# c92a48b5216849adbe05e93f77e9a141
# e09d211f22cc4a4aba1ac876a834d92b
msgid "This affects the following settings:"
msgstr ""

#: ../../releases/1.2.txt:820
#: ../../releases/1.2-alpha-1.txt:286
# f00a5c3484224b0ba9445b990fd8b6e4
# 33f76702999a45c1a277aabf910acd42
msgid "Old setting"
msgstr ""

#: ../../releases/1.2.txt:820
#: ../../releases/1.2-alpha-1.txt:286
# 539e99b903f6443098cb53785795864e
# bf646c98f8714828b092c8fce8135d87
msgid "New Setting"
msgstr ""

#: ../../releases/1.2.txt:822
#: ../../releases/1.2-alpha-1.txt:288
# 60bc8d99f6b7495697181109a6581018
# 183078589d5946b2a62903af4f8fb05a
msgid "`DATABASE_ENGINE`"
msgstr ""

#: ../../releases/1.2.txt:822
#: ../../releases/1.2-alpha-1.txt:288
# 81b282ede2ec41719d0b907eb808f5fc
# 1eb483d27c2e4a3a9bc5463558bf2845
msgid ":setting:`ENGINE <DATABASE-ENGINE>`"
msgstr ""

#: ../../releases/1.2.txt:823
#: ../../releases/1.2-alpha-1.txt:289
# 4bff964975e249038a86350356fc4e59
# 675b32dab0c24abdbfeca1daf5993e31
msgid "`DATABASE_HOST`"
msgstr ""

#: ../../releases/1.2.txt:823
#: ../../releases/1.2-alpha-1.txt:289
# a55defa171be447bba013b4b79e98289
# cc2e9378469f4894ae3c4cbc35946d51
msgid ":setting:`HOST`"
msgstr ""

#: ../../releases/1.2.txt:824
#: ../../releases/1.2-alpha-1.txt:290
# 071aad5abde6470da1be3ae37d170cb4
# 500e1903cec145128c3e67b7a13b2a80
msgid "`DATABASE_NAME`"
msgstr ""

#: ../../releases/1.2.txt:824
#: ../../releases/1.2-alpha-1.txt:290
# 5fe1821d68b14a10887a2df76dbf2a02
# f561cbf0240d4c11929355488f636199
msgid ":setting:`NAME`"
msgstr ""

#: ../../releases/1.2.txt:825
#: ../../releases/1.2-alpha-1.txt:291
# 92438809253f493b955173d37b6b3663
# 4df33499590946ecb7049686589fb39b
msgid "`DATABASE_OPTIONS`"
msgstr ""

#: ../../releases/1.2.txt:825
#: ../../releases/1.2-alpha-1.txt:291
# ef5e5158f05c491397f27c548e82445f
# 904c002df6714eb4bb2d51aa97b6a2f4
msgid ":setting:`OPTIONS`"
msgstr ""

#: ../../releases/1.2.txt:826
#: ../../releases/1.2-alpha-1.txt:292
# dd3470043bd843649d5f88345b96da0f
# d980a058219841da945260a5fa893f38
msgid "`DATABASE_PASSWORD`"
msgstr ""

#: ../../releases/1.2.txt:826
#: ../../releases/1.2-alpha-1.txt:292
# 557bcbc6613a4cf1abc1f1f0df71e5f1
# fc65fe38dccd47f29479c5b703528e16
msgid ":setting:`PASSWORD`"
msgstr ""

#: ../../releases/1.2.txt:827
#: ../../releases/1.2-alpha-1.txt:293
# 25f0147ab59541898fe1e23c3c2b2910
# bd19eb78ecf94fc5b591493c84c39ee0
msgid "`DATABASE_PORT`"
msgstr ""

#: ../../releases/1.2.txt:827
#: ../../releases/1.2-alpha-1.txt:293
# ac47ec943e0346ecb8aa4527877950b6
# f855dd4ae9434520ae95f264eb9484b7
msgid ":setting:`PORT`"
msgstr ""

#: ../../releases/1.2.txt:828
#: ../../releases/1.2-alpha-1.txt:294
# 5bdc8f38d2bd4805bead627bc3ddb657
# 5a5cb5f3bcd64e65924e1ec9b33690ce
msgid "`DATABASE_USER`"
msgstr ""

#: ../../releases/1.2.txt:828
#: ../../releases/1.2-alpha-1.txt:294
# aec037e286f64dbba49358a4db4188b1
# 11cd85e9f8c0417c9e370dc8f1d4330f
msgid ":setting:`USER`"
msgstr ""

#: ../../releases/1.2.txt:829
#: ../../releases/1.2-alpha-1.txt:295
# 59472e7139724390a72a579500d51675
# cfc722bf11c44103baad680306ffa883
msgid "`TEST_DATABASE_CHARSET`"
msgstr ""

#: ../../releases/1.2.txt:829
#: ../../releases/1.2-alpha-1.txt:295
# 87249dea70d74799869e736d9070661f
# 9f603294088a469a90ef069508d3a081
msgid ":setting:`TEST_CHARSET`"
msgstr ""

#: ../../releases/1.2.txt:830
#: ../../releases/1.2-alpha-1.txt:296
# 83d5af1f6ca34270b80735311a2bacfc
# 40971c317c7a4dff88c40da93ec0325a
msgid "`TEST_DATABASE_COLLATION`"
msgstr ""

#: ../../releases/1.2.txt:830
#: ../../releases/1.2-alpha-1.txt:296
# 4b6d66697b8a4e00a6aa4bab630ac15b
# 3fd618aa5ddb477899943dd4adbd76eb
msgid ":setting:`TEST_COLLATION`"
msgstr ""

#: ../../releases/1.2.txt:831
#: ../../releases/1.2-alpha-1.txt:297
# 852d3b8bb63f419d87315e6673c2250e
# 2d20be0975824a158fca1f02d6cdc0a5
msgid "`TEST_DATABASE_NAME`"
msgstr ""

#: ../../releases/1.2.txt:831
#: ../../releases/1.2-alpha-1.txt:297
# 529b6f0c66f447fc9f8884b4ea6a8f50
# 46cce220123c4c048eae29a0c8143cb1
msgid ":setting:`TEST_NAME`"
msgstr ""

#: ../../releases/1.2.txt:834
#: ../../releases/1.2-alpha-1.txt:300
# a03cbf24f960467e986377ed4620f9c9
# 9c5fa3ecfcfa4769a75a9a2132d9d40e
msgid "These changes are also required if you have manually created a database connection using ``DatabaseWrapper()`` from your database backend of choice."
msgstr ""

#: ../../releases/1.2.txt:837
#: ../../releases/1.2-alpha-1.txt:303
# cedeb9edc4314924a4540974a47a49c3
# 529ba163a6d2438baaf9a88de934d862
msgid "In addition to the change in structure, Django 1.2 removes the special handling for the built-in database backends. All database backends must now be specified by a fully qualified module name (i.e., ``django.db.backends.postgresql_psycopg2``, rather than just ``postgresql_psycopg2``)."
msgstr ""

#: ../../releases/1.2.txt:844
# f2267b01cf3a42efb0838743f4629f1f
msgid "``postgresql`` database backend"
msgstr ""

#: ../../releases/1.2.txt:846
# 72ed987be131457bb42606c0687052b6
msgid "The ``psycopg1`` library has not been updated since October 2005. As a result, the ``postgresql`` database backend, which uses this library, has been deprecated."
msgstr ""

#: ../../releases/1.2.txt:850
# ff4a5b9712364506baddb60a827a8030
msgid "If you are currently using the ``postgresql`` backend, you should migrate to using the ``postgresql_psycopg2`` backend. To update your code, install the ``psycopg2`` library and change the :setting:`ENGINE <DATABASE-ENGINE>` setting to use ``django.db.backends.postgresql_psycopg2``."
msgstr ""

#: ../../releases/1.2.txt:857
# 62214ef45cba448d8aed8b2809095c96
msgid "CSRF response-rewriting middleware"
msgstr ""

#: ../../releases/1.2.txt:859
# 6a5926e2dc8444dca5955e9ada4eb524
msgid "``CsrfResponseMiddleware``, the middleware that automatically inserted CSRF tokens into ``POST`` forms in outgoing pages, has been deprecated in favor of a template tag method (see above), and will be removed completely in Django 1.4. ``CsrfMiddleware``, which includes the functionality of ``CsrfResponseMiddleware`` and ``CsrfViewMiddleware``, has likewise been deprecated."
msgstr ""

#: ../../releases/1.2.txt:866
#: ../../releases/1.2-alpha-1.txt:203
# 4d87bf7a048a4501acb841579f9f6f97
# 411b57d3d45f4b87933dfe61bcdc4b87
msgid "Also, the CSRF module has moved from contrib to core, and the old imports are deprecated, as described in the upgrading notes."
msgstr ""

#: ../../releases/1.2.txt:875
#: ../../releases/1.2-alpha-1.txt:212
# d7d01b7c140349de94905509bcba4d7c
# 277c0e1ef43141fc93f299ccc95ec570
msgid "``SMTPConnection``"
msgstr ""

#: ../../releases/1.2.txt:877
# 319e23839b804041a43915761188de14
msgid "The ``SMTPConnection`` class has been deprecated in favor of a generic email backend API. Old code that explicitly instantiated an instance of an SMTPConnection::"
msgstr ""

#: ../../releases/1.2.txt:886
# b651d64ae4da404a9e5106de999a5fe8
msgid "...should now call :meth:`~django.core.mail.get_connection()` to instantiate a generic email connection::"
msgstr ""

#: ../../releases/1.2.txt:894
#: ../../releases/1.2-alpha-1.txt:231
# 0abfbd58c4324f41ba21e7ca229b0674
# 55b53f7733774a5aba1cf15f9822b402
msgid "Depending on the value of the :setting:`EMAIL_BACKEND` setting, this may not return an SMTP connection. If you explicitly require an SMTP connection with which to send email, you can explicitly request an SMTP connection::"
msgstr ""

#: ../../releases/1.2.txt:904
#: ../../releases/1.2-alpha-1.txt:241
# bb6cf27afa524a43848356b8c312c12e
# fe44800f539a4c998dfbc053bf7c67c7
msgid "If your call to construct an instance of ``SMTPConnection`` required additional arguments, those arguments can be passed to the :meth:`~django.core.mail.get_connection()` call::"
msgstr ""

#: ../../releases/1.2.txt:911
#: ../../releases/1.2-alpha-1.txt:310
# be41dd99d82d43e4bf6026583b1e2ce8
# 4e90248a2ad944a4942416467d3b282c
msgid "User Messages API"
msgstr ""

#: ../../releases/1.2.txt:913
#: ../../releases/1.2-alpha-1.txt:312
# 597dd5bdf2e0426db92d2cc0b6136b0f
# 15be075313fd48f9ac0380cb668fb076
msgid "The API for storing messages in the user ``Message`` model (via ``user.message_set.create``) is now deprecated and will be removed in Django 1.4 according to the standard :doc:`release process </internals/release-process>`."
msgstr ""

#: ../../releases/1.2.txt:917
# af4296210feb414180a137a17425a70d
msgid "To upgrade your code, you need to replace any instances of this::"
msgstr ""

#: ../../releases/1.2.txt:921
# f3462a79477842b6806397889cc0d5e1
msgid "...with the following::"
msgstr ""

#: ../../releases/1.2.txt:926
#: ../../releases/1.2-alpha-1.txt:325
# b69aa1aa67c54787a09575f22844f06b
# 5d08f26d9fff4783b664aa2325e96363
msgid "Additionally, if you make use of the method, you need to replace the following::"
msgstr ""

#: ../../releases/1.2.txt:932
# edbc4310ba6944528d8d551db9ecad9f
msgid "...with::"
msgstr ""

#: ../../releases/1.2.txt:938
#: ../../releases/1.2-alpha-1.txt:337
# 8596db6c06d3492f9d9ebfa00c28a23c
# bb75ebafcd4742b999fd98802cd7b202
msgid "For more information, see the full :doc:`messages documentation </ref/contrib/messages>`. You should begin to update your code to use the new API immediately."
msgstr ""

#: ../../releases/1.2.txt:943
#: ../../releases/1.2-alpha-1.txt:342
# 36b8343a7a98424d97d957b58bddcc96
# 5c4a4fc47ca3475aa68f31b4af4ed6fb
msgid "Date format helper functions"
msgstr ""

#: ../../releases/1.2.txt:945
# 869b9cffae48426c94bd6ec505353c7c
msgid "``django.utils.translation.get_date_formats()`` and ``django.utils.translation.get_partial_date_formats()`` have been deprecated in favor of the appropriate calls to ``django.utils.formats.get_format()``, which is locale-aware when :setting:`USE_L10N` is set to ``True``, and falls back to default settings if set to ``False``."
msgstr ""

#: ../../releases/1.2.txt:951
# 0a943710c06a4fddbf1c8e12b38221b3
msgid "To get the different date formats, instead of writing this::"
msgstr ""

#: ../../releases/1.2.txt:956
# 5e3323d600864ce793314e7c4f20c53e
msgid "...use::"
msgstr ""

#: ../../releases/1.2.txt:963
# 0ffcaf2e3e2248d392e4b3eb9993a684
msgid "Or, when directly formatting a date value::"
msgstr ""

#: ../../releases/1.2.txt:968
#: ../../releases/1.2-alpha-1.txt:368
# f98485650df54a9c83c03255ac5637fe
# 28b34a0d3e0f485e868d9b24d31cbcab
msgid "The same applies to the globals found in ``django.forms.fields``:"
msgstr ""

#: ../../releases/1.2.txt:970
#: ../../releases/1.2-alpha-1.txt:370
# 197532b5a5314ec9b901fd4ccafd747e
# e8927a09b2f54d9a838db5d1761e90f6
msgid "``DEFAULT_DATE_INPUT_FORMATS``"
msgstr ""

#: ../../releases/1.2.txt:971
#: ../../releases/1.2-alpha-1.txt:371
# 1a4c2e9f4bab4868831c101f35eee683
# 656ffe77584245dcb6012a6880fee4d7
msgid "``DEFAULT_TIME_INPUT_FORMATS``"
msgstr ""

#: ../../releases/1.2.txt:972
#: ../../releases/1.2-alpha-1.txt:372
# 3fb2ad7673204b5c88e61e64702f4cce
# 85b24835299646ea95133b04b2c35a20
msgid "``DEFAULT_DATETIME_INPUT_FORMATS``"
msgstr ""

#: ../../releases/1.2.txt:974
#: ../../releases/1.2-alpha-1.txt:374
# 4d18b16d3b42431abec15edc5e4942ff
# e148cb7ab3a84901b9cd34caa0c03592
msgid "Use ``django.utils.formats.get_format()`` to get the appropriate formats."
msgstr ""

#: ../../releases/1.2.txt:977
# b6a58509b4df4fdebd7c65462ae5b181
msgid "Function-based test runners"
msgstr ""

#: ../../releases/1.2.txt:979
#: ../../releases/1.2-beta-1.txt:41
# b3dc15a6a1784f8b809a90f38f9820c2
# f46cd373c2c2464e98d0162993332b2b
msgid "Django 1.2 changes the test runner tools to use a class-based approach. Old style function-based test runners will still work, but should be updated to use the new :ref:`class-based runners <topics-testing-test_runner>`."
msgstr ""

#: ../../releases/1.2.txt:987
# 4b2c4a0ddd0f49e0a2f4dd0ae27194ee
msgid "``Feed`` in ``django.contrib.syndication.feeds``"
msgstr ""

#: ../../releases/1.2.txt:989
# 61558416d42d4cfbb1732a113189ce21
msgid "The ``django.contrib.syndication.feeds.Feed`` class has been replaced by the :class:`django.contrib.syndication.views.Feed` class. The old ``feeds.Feed`` class is deprecated, and will be removed in Django 1.4."
msgstr ""

#: ../../releases/1.2.txt:994
# 90bf4892919242938c459733fbe64957
msgid "The new class has an almost identical API, but allows instances to be used as views. For example, consider the use of the old framework in the following :doc:`URLconf </topics/http/urls>`::"
msgstr ""

#: ../../releases/1.2.txt:1013
# 05a4df2e4e814214be4cff7a6b35935e
msgid "Using the new Feed class, these feeds can be deployed directly as views::"
msgstr ""

#: ../../releases/1.2.txt:1025
# 4e6874f147824f04960e6e8317a98d87
msgid "If you currently use the ``feed()`` view, the ``LatestEntries`` class would often not need to be modified apart from subclassing the new :class:`~django.contrib.syndication.views.Feed` class. The exception is if Django was automatically working out the name of the template to use to render the feed's description and title elements (if you were not specifying the ``title_template`` and ``description_template`` attributes). You should ensure that you always specify ``title_template`` and ``description_template`` attributes, or provide ``item_title()`` and ``item_description()`` methods."
msgstr ""

#: ../../releases/1.2.txt:1034
# 292fc0545f834001864012dfe5e39530
msgid "However, ``LatestEntriesByCategory`` uses the ``get_object()`` method with the ``bits`` argument to specify a specific category to show. In the new :class:`~django.contrib.syndication.views.Feed` class, ``get_object()`` method takes a ``request`` and arguments from the URL, so it would look like this::"
msgstr ""

#: ../../releases/1.2.txt:1050
# 39244db0e93243c88c427fdec7ca5dc7
msgid "Additionally, the ``get_feed()`` method on ``Feed`` classes now take different arguments, which may impact you if you use the ``Feed`` classes directly. Instead of just taking an optional ``url`` argument, it now takes two arguments: the object returned by its own ``get_object()`` method, and the current ``request`` object."
msgstr ""

#: ../../releases/1.2.txt:1056
# d61d95c27d67444f82bf39118ef3d182
msgid "To take into account ``Feed`` classes not being initialized for each request, the ``__init__()`` method now takes no arguments by default. Previously it would have taken the ``slug`` from the URL and the ``request`` object."
msgstr ""

#: ../../releases/1.2.txt:1061
# 9cdea474a67a4786823e9112d513e05e
msgid "In accordance with `RSS best practices`_, RSS feeds will now include an ``atom:link`` element. You may need to update your tests to take this into account."
msgstr ""

#: ../../releases/1.2.txt:1065
#: ../../releases/1.2-beta-1.txt:59
# 08e17d44bf25474f926b14d4a209ebaf
# a4d5ae14e9834017ae6f804b74ee9eff
msgid "For more information, see the full :doc:`syndication framework documentation </ref/contrib/syndication>`."
msgstr ""

#: ../../releases/1.2.txt:1071
# 6f79252e78d548b68d959b287b4eb3f0
msgid "Technical message IDs"
msgstr ""

#: ../../releases/1.2.txt:1073
# dcce549fe4954f7bb67103a398254c2b
msgid "Up to version 1.1 Django used technical message IDs to provide localizers the possibility to translate date and time formats. They were translatable :term:`translation strings <translation string>` that could be recognized because they were all upper case (for example :setting:`DATETIME_FORMAT`, :setting:`DATE_FORMAT`, :setting:`TIME_FORMAT`). They have been deprecated in favor of the new :ref:`Format localization <format-localization>` infrastructure that allows localizers to specify that information in a ``formats.py`` file in the corresponding ``django/conf/locale/<locale name>/`` directory."
msgstr ""

#: ../../releases/1.2.txt:1086
# f87f2ae8dd764a9b8c3087501dd754f3
msgid "To allow support for multiple databases, the GeoDjango database internals were changed substantially.  The largest backwards-incompatible change is that the module ``django.contrib.gis.db.backend`` was renamed to :mod:`django.contrib.gis.db.backends`, where the full-fledged :ref:`spatial database backends <spatial-backends>` now exist.  The following sections provide information on the most-popular APIs that were affected by these changes."
msgstr ""

#: ../../releases/1.2.txt:1095
# 22718490555b4a6884aa4d50482861ef
msgid "``SpatialBackend``"
msgstr ""

#: ../../releases/1.2.txt:1097
# c6be434dcf0749968e4f2a9c1fc294fe
msgid "Prior to the creation of the separate spatial backends, the ``django.contrib.gis.db.backend.SpatialBackend`` object was provided as an abstraction to introspect on the capabilities of the spatial database.  All of the attributes and routines provided by ``SpatialBackend`` are now a part of the ``ops`` attribute of the database backend."
msgstr ""

#: ../../releases/1.2.txt:1104
# b79a6ed6b835402897a158ec97c2efb9
msgid "The old module ``django.contrib.gis.db.backend`` is still provided for backwards-compatibility access to a ``SpatialBackend`` object, which is just an alias to the ``ops`` module of the *default* spatial database connection."
msgstr ""

#: ../../releases/1.2.txt:1109
# 24d143f0dce44cdf9ef6d3df98f345cf
msgid "Users that were relying on undocumented modules and objects within ``django.contrib.gis.db.backend``, rather the abstractions provided by ``SpatialBackend``, are required to modify their code. For example, the following import which would work in 1.1 and below::"
msgstr ""

#: ../../releases/1.2.txt:1117
# 6bbe515d32e64af78cf6dc431a223c9d
msgid "Would need to be changed::"
msgstr ""

#: ../../releases/1.2.txt:1123
# 399c61338e204660b5a617a4ab52cba0
msgid "``SpatialRefSys`` and ``GeometryColumns`` models"
msgstr ""

#: ../../releases/1.2.txt:1125
# 91de0cd5ff8a4b9697d2e38e7ec650f2
msgid "In previous versions of GeoDjango, :mod:`django.contrib.gis.db.models` had ``SpatialRefSys`` and ``GeometryColumns`` models for querying the OGC spatial metadata tables ``spatial_ref_sys`` and ``geometry_columns``, respectively."
msgstr ""

#: ../../releases/1.2.txt:1130
# 83fa1d8495dd46688eac942d604006ee
msgid "While these aliases are still provided, they are only for the *default* database connection and exist only if the default connection is using a supported spatial database backend."
msgstr ""

#: ../../releases/1.2.txt:1136
# 34f3cc7b6c9f43c7b89b5f95d6688525
msgid "Because the table structure of the OGC spatial metadata tables differs across spatial databases, the ``SpatialRefSys`` and ``GeometryColumns`` models can no longer be associated with the ``gis`` application name.  Thus, no models will be returned when using the ``get_models`` method in the following example::"
msgstr ""

#: ../../releases/1.2.txt:1146
# 4e3fd41191534b0999cf8f9e6d5efd7e
msgid "To get the correct ``SpatialRefSys`` and ``GeometryColumns`` for your spatial database use the methods provided by the spatial backend::"
msgstr ""

#: ../../releases/1.2.txt:1155
# e2e0c47aee3244ca9e8a5878089aa9f4
msgid "When using the models returned from the ``spatial_ref_sys()`` and ``geometry_columns()`` method, you'll still need to use the correct database alias when querying on the non-default connection. In other words, to ensure that the models in the example above use the correct database::"
msgstr ""

#: ../../releases/1.2.txt:1165
# f5636ea8d90b4510940c23341a773825
msgid "Language code ``no``"
msgstr ""

#: ../../releases/1.2.txt:1167
# 2e846d2e513e435e845126b269bd4965
msgid "The currently used language code for Norwegian Bokmål ``no`` is being replaced by the more common language code ``nb``."
msgstr ""

#: ../../releases/1.2.txt:1171
# 1b9b7e1fb6264915a95f2f2b184f3e64
msgid "Function-based template loaders"
msgstr ""

#: ../../releases/1.2.txt:1173
# 6a9e27f7094c406fbd84bae8d5aab898
msgid "Django 1.2 changes the template loading mechanism to use a class-based approach. Old style function-based template loaders will still work, but should be updated to use the new :ref:`class-based template loaders <topic-template-alternate-language>`."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:3
# f4a3f73241b346378688b4fe1979b62d
msgid "Django 1.2 alpha 1 release notes"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:5
# 567dd4c93d7a477ea8293a92e22db702
msgid "January 5, 2010"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:7
# b3b5bd7a530f4822a4365d1365e288db
msgid "Welcome to Django 1.2 alpha 1!"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:9
# 430f779349e64494bb98d09953246fb4
msgid "This is the first in a series of preview/development releases leading up to the eventual release of Django 1.2, currently scheduled to take place in March 2010. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.2 release."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:25
# 4fa58c1dda584e54a2dcbad81245a7e5
msgid "There have been large changes to the way that CSRF protection works, detailed in :doc:`the CSRF documentation </ref/contrib/csrf>`.  The following are the major changes that developers must be aware of:"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:29
# 8c5fe3ff9ee14c79a1ade16c30c612cd
msgid "``CsrfResponseMiddleware`` and ``CsrfMiddleware`` have been deprecated, and **will be removed completely in Django 1.4**, in favor of a template tag that should be inserted into forms."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:33
# b98e2306d7aa485ba14cecadaddb3815
msgid "All contrib apps use a ``csrf_protect`` decorator to protect the view. This requires the use of the ``csrf_token`` template tag in the template, so if you have used custom templates for contrib views, you MUST READ THE UPGRADE INSTRUCTIONS to fix those templates."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:43
# b52127816241417484a1f4294071f801
msgid "``CsrfViewMiddleware`` is included in :setting:`MIDDLEWARE_CLASSES` by default. This turns on CSRF protection by default, so that views that accept POST requests need to be written to work with the middleware. Instructions on how to do this are found in the CSRF docs."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:48
# 96a5ec80e1f841ed8e8a59e317201a51
msgid "CSRF-related code has moved from ``contrib`` to ``core`` (with backwards compatible imports in the old locations, which are deprecated)."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:55
# fe4c4e6a5d724935b79d254513734605
msgid "Due to new features in the :ttag:`if` template tag, it no longer accepts 'and', 'or' and 'not' as valid **variable** names.  Previously that worked in some cases even though these strings were normally treated as keywords.  Now, the keyword status is always enforced, and template code like ``{% if not %}`` or ``{% if and %}`` will throw a TemplateSyntaxError."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:64
# 0c8114f1902245fe8189cd337d3afde8
msgid "``LazyObject`` is an undocumented utility class used for lazily wrapping other objects of unknown type.  In Django 1.1 and earlier, it handled introspection in a non-standard way, depending on wrapped objects implementing a public method ``get_all_members()``. Since this could easily lead to name clashes, it has been changed to use the standard method, involving ``__members__`` and ``__dir__()``. If you used ``LazyObject`` in your own code, and implemented the ``get_all_members()`` method for wrapped objects, you need to make the following changes:"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:73
# c553674ea23b4ef58887aa8e3264ed45
msgid "If your class does not have special requirements for introspection (i.e. you have not implemented ``__getattr__()`` or other methods that allow for attributes not discoverable by normal mechanisms), you can simply remove the ``get_all_members()`` method.  The default implementation on ``LazyObject`` will do the right thing."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:79
# baa8e5a9d3c34291a31f6577b579f48a
msgid "If you have more complex requirements for introspection, first rename the ``get_all_members()`` method to ``__dir__()``.  This is the standard method, from Python 2.6 onwards, for supporting introspection.  If you are require support for Python < 2.6, add the following code to the class::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:87
# 08faab11fc9c4234a17bf9f15a52f567
msgid "``__dict__`` on Model instances"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:92
# 931ef60c02a44edb9fc0bb2e58bf653b
msgid "In order to support multiple database configurations, Django 1.2 has added a ``_state`` attribute to object instances. This attribute will appear in ``__dict__`` for a model instance. If your code relies on iterating over __dict__ to obtain a list of fields, you must now filter the ``_state`` attribute of out ``__dict__``."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:99
# dc30a82faded430f81c8458b8500b527
msgid "``get_db_prep_*()`` methods on Field"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:101
# 81aa3e0f04d34fdf9eab88069edf19b9
msgid "Prior to v1.2, a custom field had the option of defining several functions to support conversion of Python values into database-compatible values. A custom field might look something like::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:138
# 49c1f880d4594f9e8b709a1d85985297
msgid "These changes are required to support multiple databases: ``get_db_prep_*`` can no longer make any assumptions regarding the database for which it is preparing. The ``connection`` argument now provides the preparation methods with the specific connection for which the value is being prepared."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:144
# 5f74842bf3034e5c848ec921c4b9f88d
msgid "The two new methods exist to differentiate general data preparation requirements, and requirements that are database-specific. The ``prepared`` argument is used to indicate to the database preparation methods whether generic value preparation has been performed. If an unprepared (i.e., ``prepared=False``) value is provided to the ``get_db_prep_*()`` calls, they should invoke the corresponding ``get_prep_*()`` calls to perform generic data preparation."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:152
# f834a3108b40494cb5e982f9e27621c7
msgid "Conversion functions has been provided which will transparently convert functions adhering to the old prototype into functions compatible with the new prototype. However, this conversion function will be removed in Django 1.4, so you should upgrade your Field definitions to use the new prototype."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:158
# 947324d6becb42f5ada9d298617eddfb
msgid "If your ``get_db_prep_*()`` methods made no use of the database connection, you should be able to upgrade by renaming ``get_db_prep_value()`` to ``get_prep_value()`` and ``get_db_prep_lookup()`` to ``get_prep_lookup()`. If you require database specific conversions, then you will need to provide an implementation ``get_db_prep_*`` that uses the ``connection`` argument to resolve database-specific values."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:169
# a20f7a59aae74b3d9a4ee0801dfe8111
msgid "Template tags that store rendering state on the node itself may experience problems if they are used with the new :ref:`cached template loader<template-loaders>`."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:173
# b3ded97d2ae74c44b7cb81c6b37b7d54
msgid "All of the built-in Django template tags are safe to use with the cached loader, but if you're using custom template tags that come from third party packages, or that you wrote yourself, you should ensure that the ``Node`` implementation for each tag is thread-safe. For more information, see :ref:`template tag thread safety considerations<template_tag_thread_safety>`."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:194
# cc90fd031e5c40e688a9790b15202dc1
msgid "CSRF response rewriting middleware"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:196
# f623e58e697e476a83543d7ed29f96ef
msgid "``CsrfResponseMiddleware``, the middleware that automatically inserted CSRF tokens into POST forms in outgoing pages, has been deprecated in favor of a template tag method (see above), and will be removed completely in Django 1.4. ``CsrfMiddleware``, which includes the functionality of ``CsrfResponseMiddleware`` and ``CsrfViewMiddleware`` has likewise been deprecated."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:214
# 06a35f4da7294f77b5d83608e5723e20
msgid "The ``SMTPConnection`` class has been deprecated in favor of a generic Email backend API. Old code that explicitly instantiated an instance of an SMTPConnection::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:223
# 809d3cf17eae4a3890c7f1aa3ce257d9
msgid "should now call :meth:`~django.core.mail.get_connection()` to instantiate a generic email connection::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:250
# e1087742c98a4aa7a568234ee281ca68
msgid "Prior to Django 1.1, Django used a number of settings to control access to a single database. Django 1.2 introduces support for multiple databases, and as a result, the way you define database settings has changed."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:254
# 59785ab0cd674a91b8a6e6e1a26c2ae4
msgid "**Any existing Django settings file will continue to work as expected until Django 1.4.** Old-style database settings will be automatically translated to the new-style format."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:258
# 3d2dde70da7046e3a9d6be5ffb58a595
msgid "In the old-style (pre 1.2) format, there were a number of ``DATABASE_`` settings at the top level of your settings file. For example::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:267
# 09501b31c3164c50b3ae82dc58a4868b
msgid "These settings are now contained inside a dictionary named :setting:`DATABASES`. Each item in the dictionary corresponds to a single database connection, with the name ``'default'`` describing the default database connection. The setting names have also been shortened to reflect the fact that they are stored in a dictionary. The sample settings given previously would now be stored using::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:316
# 84c18480eb4b42b187765e214c32451f
msgid "To upgrade your code, you need to replace any instances of::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:320
# b720bdf56ab24a93ac5e5d3a75d5c883
msgid "with the following::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:331
# 3c00029ba94a435d8112abe227473370
msgid "with::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:344
# 5e4aed2736c54c7ea391ade615bfcb44
msgid "``django.utils.translation.get_date_formats()`` and ``django.utils.translation.get_partial_date_formats()`` have been deprecated in favor of the appropriate calls to ``django.utils.formats.get_format()`` which is locale aware when :setting:`USE_L10N` is set to ``True``, and falls back to default settings if set to ``False``."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:350
# a110c7786fcb446c813d03d05442161a
msgid "To get the different date formats, instead of writing::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:355
# 0a6057daa1fd47a498f03dde228b671d
msgid "use::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:363
# 8a60ca16d76f41058de61cc5b3bfa87b
msgid "or, when directly formatting a date value::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:378
# 535da5419ea444399044c71fa97bf278
msgid "What's new in Django 1.2 alpha 1"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:380
# 13707bc40a5649b0881d7b41ef10af28
msgid "The following new features are present as of this alpha release; this release also marks the end of major feature development for the 1.2 release cycle. Some minor features will continue development until the 1.2 beta release, however."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:387
# db22d863ea164c8cbb13be6383c91100
msgid "CSRF support"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:389
# 27a9124043664926bf2ed0ac24d3ec75
msgid "Django now has much improved protection against :doc:`Cross-Site Request Forgery (CSRF) attacks</ref/contrib/csrf>`. This type of attack occurs when a malicious Web site contains a link, a form button or some javascript that is intended to perform some action on your Web site, using the credentials of a logged-in user who visits the malicious site in their browser. A related type of attack, 'login CSRF', where an attacking site tricks a user's browser into logging into a site with someone else's credentials, is also covered."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:399
# 09d7a78b15a742d981cedf25d73db880
msgid "Email Backends"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:409
# 2b7c83dd55ab4c2194dac252675772ea
msgid "This also makes it easier to debug mail sending - Django ships with backend implementations that allow you to send email to a :ref:`file<topic-email-file-backend>`, to the :ref:`console<topic-email-console-backend>`, or to :ref:`memory<topic-email-memory-backend>` - you can even configure all email to be :ref:`thrown away<topic-email-dummy-backend>`."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:417
# a467a673b72843cea9c3347bbbd36124
msgid "Messages Framework"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:429
# d09469f56ad04d69bd8f2dbe7facc221
msgid "Django 1.2 adds the ability to use :doc:`more than one database </topics/db/multi-db>` in your Django project. Queries can be issued at a specific database with the ``using()`` method on querysets; individual objects can be saved to a specific database by providing a ``using`` argument when you save the instance."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:436
# 0dc494f937554d7896015119097d11ea
msgid "'Smart' if tag"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:438
# 4e4913eb249e490ba5bd9adbb85304a5
msgid "The :ttag:`if` tag has been upgraded to be much more powerful.  First, support for comparison operators has been added. No longer will you have to type:"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:447
# 9e9e5edfc48042c886c0b870bee19643
msgid "...as you can now do:"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:455
# 7f426d8bdee0477d974b261cfeeafc61
msgid "The operators supported are ``==``, ``!=``, ``<``, ``>``, ``<=``, ``>=`` and ``in``, all of which work like the Python operators, in addition to ``and``, ``or`` and ``not`` which were already supported."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:472
# 377b2e641dab40f89b2392308f3f769c
msgid "In previous versions of Django, every time you rendered a template it would be reloaded from disk. In Django 1.2, you can use a :ref:`cached template loader <template-loaders>` to load templates once, then use the cached result for every subsequent render. This can lead to a significant performance improvement if your templates are broken into lots of smaller subtemplates (using the ``{% extends %}`` or ``{% include %}`` tags)."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:487
# 9644dc8c19a14d21baa2bc9dbe3bfbce
msgid "Fixtures can refer to remote objects using :ref:`topics-serialization-natural-keys`. This lookup scheme is an alternative to the normal primary-key based object references in a fixture, improving readability, and resolving problems referring to objects whose primary key value may not be predictable or known."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:496
# 2f339a93bd864a85a4e0a40e10b1e83f
msgid "Models can now use a 64 bit :class:`~django.db.models.BigIntegerField` type."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:499
# 07e306378fd9456297b758f1d058aae3
msgid "Fast Failure for Tests"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:501
# b033e15e34c946a0916b6b971fc0575c
msgid "The :djadmin:`test` subcommand of ``django-admin.py``, and the ``runtests.py`` script used to run Django's own test suite, support a new ``--failfast`` option. When specified, this option causes the test runner to exit after encountering a failure instead of continuing with the test run.  In addition, the handling of ``Ctrl-C`` during a test run has been improved to trigger a graceful exit from the test run that reports details of the tests run before the interruption."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:511
# e3fa14d2adfc495aa2a176500f54d1cc
msgid "Django's :doc:`internationalization framework </topics/i18n/index>` has been expanded by locale aware formatting and form processing. That means, if enabled, dates and numbers on templates will be displayed using the format specified for the current locale. Django will also use localized formats when parsing data in forms. See :ref:`Format localization <format-localization>` for more details."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:519
# ad4fe779b0da475ca019a66cbae90b93
msgid "Added ``readonly_fields`` to ``ModelAdmin``"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:521
# 4166ec142d894b7083cc345aae851fde
msgid ":attr:`django.contrib.admin.ModelAdmin.readonly_fields` has been added to enable non-editable fields in add/change pages for models and inlines. Field and calculated values can be displayed along side editable fields."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:528
# 0e6e9c598f114bb18b0c38f5f8166439
msgid "You can now use the ``DJANGO_COLORS`` environment variable to modify or disable the colors used by ``django-admin.py`` to provide :ref:`syntax highlighting <syntax-coloring>`."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:534
#: ../../releases/1.2-beta-1.txt:120
#: ../../releases/1.2-rc-1.txt:52
# 439374d1a68a417f9c04473947af59ce
# 01232d45c4fc400d9c0f1fff4d8b0695
# 94649447d7bf455ea3319c282b2f589e
msgid "The Django 1.2 roadmap"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:536
# 906a8b19049c42faac893e5b2846491b
msgid "Before the final Django 1.2 release, several other preview/development releases will be made available. The current schedule consists of at least the following:"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:540
# 93405b0c35f046bcb8207408d4f09412
msgid "Week of **January 26, 2010**: First Django 1.2 beta release. Final feature freeze for Django 1.2."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:543
#: ../../releases/1.2-beta-1.txt:126
# a155b9ea39114d97b644f6643f78bda2
# 8f9ee8c53c27474b844324078e6bb16d
msgid "Week of **March 2, 2010**: First Django 1.2 release candidate. String freeze for translations."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:546
#: ../../releases/1.2-beta-1.txt:129
# 177f5306c17d4c9c88b0e1a157560a47
# d7c043f626574168869ebce5c04cb5b9
msgid "Week of **March 9, 2010**: Django 1.2 final release."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:548
# ee3e3e02e5264549870d7490c77c62cb
msgid "If necessary, additional alpha, beta or release-candidate packages will be issued prior to the final 1.2 release. Django 1.2 will be released approximately one week after the final release candidate."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:556
# 2e43e61b169b49aa938c04d854d96b31
msgid "In order to provide a high-quality 1.2 release, we need your help. Although this alpha release is, again, *not* intended for production use, you can help the Django team by trying out the alpha codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:567
#: ../../releases/1.2-beta-1.txt:151
#: ../../releases/1.2-rc-1.txt:84
# 176fbca6a2fc4103bb199e8c5d00250b
# 94f14b0c8688485b9e2228b62db5d1c3
# 6a38ff55343d4921b4dc4b62464248aa
msgid "Additionally, discussion of Django development, including progress toward the 1.2 release, takes place daily on the django-developers mailing list:"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:585
#: ../../releases/1.2-beta-1.txt:170
# 9202d4862e1a4dc9ba33f2e3f1a54841
# b40774a9a7944eb4833cd29bce4b70c4
msgid "Development sprints for Django 1.2 will also be taking place at PyCon US 2010, on the dedicated sprint days (February 22 through 25), and anyone who wants to help out is welcome to join in, either in person at PyCon or virtually in the IRC channel or on the mailing list."
msgstr ""

#: ../../releases/1.2-beta-1.txt:3
# b980d98b84bf40eb98c0a099f0d22aa0
msgid "Django 1.2 beta 1 release notes"
msgstr ""

#: ../../releases/1.2-beta-1.txt:5
# fe867af6690e48d48a0ba375c602577e
msgid "February 5, 2010"
msgstr ""

#: ../../releases/1.2-beta-1.txt:7
# 7ad26c6c295e48cb97556b6d5b19028b
msgid "Welcome to Django 1.2 beta 1!"
msgstr ""

#: ../../releases/1.2-beta-1.txt:9
# e49f9db1b07f4c26950fb40f1f581c11
msgid "This is the second in a series of preview/development releases leading up to the eventual release of Django 1.2, currently scheduled to take place in March 2010. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.2 release."
msgstr ""

#: ../../releases/1.2-beta-1.txt:19
# e895d9cadd2d42078e758d70eb754ed2
msgid "This document covers changes since the Django 1.2 alpha release; the :doc:`1.2 alpha release notes </releases/1.2-alpha-1>` cover new and updated features in Django between 1.1 and 1.2 alpha."
msgstr ""

#: ../../releases/1.2-beta-1.txt:25
# b0cd006e387945db827c6cf0b409ae84
msgid "Deprecations and other changes in 1.2 beta"
msgstr ""

#: ../../releases/1.2-beta-1.txt:27
# 14bfa212dc9c4fe197a4cd44fb6e176b
msgid "This beta release deprecates two portions of public API, and introduces a potentially backwards-incompatible change to another. Under :doc:`our API stability policy </misc/api-stability>`, deprecation proceeds over multiple release cycles: initially, the deprecated API will raise ``PendingDeprecationWarning``, followed by raising ``DeprecationWarning`` in the next release, and finally removal of the deprecated API in the release after that. APIs beginning the deprecation process in Django 1.2 will be removed in the Django 1.4 release."
msgstr ""

#: ../../releases/1.2-beta-1.txt:39
# 5f7e7d200bfa4c3980ed0eea5395cd40
msgid "Unit test runners"
msgstr ""

#: ../../releases/1.2-beta-1.txt:48
# bacdb730694849cab1dc78de4f7a6e11
msgid "Syndication feeds"
msgstr ""

#: ../../releases/1.2-beta-1.txt:50
# 45a6aa7780694935b52b4b36b25793fb
msgid "The ``django.contrib.syndication.feeds.Feed`` class is being replaced by the :class:`django.contrib.syndication.views.Feed` class. The old ``feeds.Feed`` class is deprecated. The new class has an almost identical API, but allows instances to be used as views."
msgstr ""

#: ../../releases/1.2-beta-1.txt:55
# 2574122927da4d57912d054ba89b74ee
msgid "Also, in accordance with `RSS best practices`_, RSS feeds will now include an ``atom:link`` element. You may need to update your tests to take this into account."
msgstr ""

#: ../../releases/1.2-beta-1.txt:68
# 409b48410ff54caba77f319f7503f1f6
msgid "Due to cookie-handling bugs in Internet Explorer, Safari, and possibly other browsers, Django's encoding of cookie values was changed so that the characters comma (',') and semi-colon (';') are treated as non-safe characters, and are therefore encoded as ``\\054`` and ``\\073`` respectively. This could produce backwards incompatibilities if you are relying on the ability to set these characters directly in cookie values."
msgstr ""

#: ../../releases/1.2-beta-1.txt:78
# 0c77dda2d26c4bb09f43e84a9d0b6625
msgid "What's new in 1.2 beta"
msgstr ""

#: ../../releases/1.2-beta-1.txt:80
# c3dc81c221c24f44878120223dffbf52
msgid "This 1.2 beta release marks the final feature freeze for Django 1.2; while most feature development was completed for 1.2 alpha (which constituted a freeze on major features), a few other new features were added afterward and so are new as of 1.2 beta."
msgstr ""

#: ../../releases/1.2-beta-1.txt:89
# 622a6bcf081d41519da1dc7db7b7d7f8
msgid "A foundation for specifying permissions at the per-object level was added in Django 1.2 alpha but not documented with the alpha release."
msgstr ""

#: ../../releases/1.2-beta-1.txt:92
# 8f26f62b902d44688d6f45fa98820bf0
msgid "The default authentication backends shipped with Django do not currently make use of this, but third-party authentication backends are free to do so. See the :doc:`authentication docs </topics/auth/index>` for more information."
msgstr ""

#: ../../releases/1.2-beta-1.txt:101
# 0e5984013aea4847b2a48d4863a9f1ac
msgid "If you provide a custom authentication backend with the attribute ``supports_anonymous_user`` set to ``True``, the ``AnonymousUser`` class will check the backend for permissions, just as the normal ``User`` does. This is intended to help centralize permission handling; apps can always delegate the question of whether something is allowed or not to the authorization/authentication system. See the :doc:`authentication docs </topics/auth/index>` for more details."
msgstr ""

#: ../../releases/1.2-beta-1.txt:111
# b3e9860a65f24b429b88a319ad633f00
msgid "``select_related()`` improvements"
msgstr ""

#: ../../releases/1.2-beta-1.txt:113
# 34c7afca8ff3446f800e1df59c7b94cf
msgid "The ``select_related()`` method of ``QuerySet`` now accepts the ``related_name`` of a reverse one-to-one relation in the list of fields to select. One-to-one relations will not, however, be traversed by a depth-based ``select_related()`` call."
msgstr ""

#: ../../releases/1.2-beta-1.txt:122
# 3dd629cb3d774067ab7c47f21797c7ad
msgid "Before the final Django 1.2 release, at least one additional preview/development releases will be made available. The current schedule consists of at least the following:"
msgstr ""

#: ../../releases/1.2-beta-1.txt:131
# a80d6a5f54c14d588f106bdc4ddad5cf
msgid "If necessary, additional beta or release-candidate packages will be issued prior to the final 1.2 release. Django 1.2 will be released approximately one week after the final release candidate."
msgstr ""

#: ../../releases/1.2-beta-1.txt:139
# 24bb01a499484edc9dee2e8e998967df
msgid "In order to provide a high-quality 1.2 release, we need your help. Although this beta release is, again, *not* intended for production use, you can help the Django team by trying out the beta codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.2-rc-1.txt:3
# 2f027ec37aed4d9b8b2eaefff1361ec8
msgid "Django 1.2 RC 1 release notes"
msgstr ""

#: ../../releases/1.2-rc-1.txt:6
# ff153311b35a4be8baf6bb6eec070dc8
msgid "May 5, 2010"
msgstr ""

#: ../../releases/1.2-rc-1.txt:8
# 7e437b21eddc43ae93304c0a681a8d1e
msgid "Welcome to the first Django 1.2 release candidate!"
msgstr ""

#: ../../releases/1.2-rc-1.txt:10
# 9e3b02fff0b447729faf229121b53f57
msgid "This is the third -- and likely last -- in a series of preview/development releases leading up to the eventual release of Django 1.2. This release is targeted primarily at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve any critical bugs prior to the final 1.2 release."
msgstr ""

#: ../../releases/1.2-rc-1.txt:20
# 0b205f942c7842419b2b1ee8c3f71029
msgid "Django has been feature frozen since the 1.2 beta release, so this release candidate contains no new features, only bugfixes; for a summary of features new to Django 1.2, consult the :doc:`1.2 alpha </releases/1.2-alpha-1>` and :doc:`1.2 beta </releases/1.2-beta-1>` release notes."
msgstr ""

#: ../../releases/1.2-rc-1.txt:54
# 5590669f14ed4523974f9a3ae62727f5
msgid "As of this release candidate, Django 1.2 is in both feature freeze and \"string freeze\" -- all strings marked for translation in the Django codebase will retain their current form in the final Django 1.2 release. Only critical release-blocking bugs, documentation and updated translation files will receive attention between now and the final 1.2 release. Note that Django's localization infrastructure has been expanded for 1.2, and translation packages should now include a ``formats.py`` file containing data for localized formatting of numbers and dates."
msgstr ""

#: ../../releases/1.2-rc-1.txt:64
# 925bee2cd6dd4fe4adadcff857d48583
msgid "If no critical bugs are discovered, Django 1.2 will be released approximately one week after this release candidate, on or about May 12, 2010."
msgstr ""

#: ../../releases/1.2-rc-1.txt:72
# 7448a12c322d433896743496292f7e7f
msgid "In order to provide a high-quality 1.2 release, we need your help. Although this release candidate is, again, *not* intended for production use, you can help the Django team by trying out this release candidate in a safe testing environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.2.1.txt:3
# 7fec6bb2e6ac437eadd856e4cab017f0
msgid "Django 1.2.1 release notes"
msgstr ""

#: ../../releases/1.2.1.txt:5
# 8cbd9e20204341928ea025b7bbcb36c3
msgid "Django 1.2.1 was released almost immediately after 1.2.0 to correct two small bugs: one was in the documentation packaging script, the other was a bug_ that affected datetime form field widgets when localisation was enabled."
msgstr ""

#: ../../releases/1.2.2.txt:3
# 7bcb0a07089c4e91b7126769a8c07e43
msgid "Django 1.2.2 release notes"
msgstr ""

#: ../../releases/1.2.2.txt:5
# c569b0ff401f4f0f89c0a7d319e46fbf
msgid "Welcome to Django 1.2.2!"
msgstr ""

#: ../../releases/1.2.2.txt:7
# 2a880efa5c624e2c844f4a3bc90ceef2
msgid "This is the second \"bugfix\" release in the Django 1.2 series, improving the stability and performance of the Django 1.2 codebase."
msgstr ""

#: ../../releases/1.2.2.txt:10
# d64ba71fd0404bd0b57499c6c70a6472
msgid "Django 1.2.2 maintains backwards compatibility with Django 1.2.1, but contain a number of fixes and other improvements. Django 1.2.2 is a recommended upgrade for any development or deployment currently using or targeting Django 1.2."
msgstr ""

#: ../../releases/1.2.2.txt:15
#: ../../releases/1.2.4.txt:15
#: ../../releases/1.2.5.txt:15
# 6c5b2c3f71594b46bb24ff0272e3b9fb
# e6bb541be2dc43b38c4fe22e69ae0f8a
# 282c5e321448497d9ff34af4a268753a
msgid "For full details on the new features, backwards incompatibilities, and deprecated features in the 1.2 branch, see the :doc:`/releases/1.2`."
msgstr ""

#: ../../releases/1.2.2.txt:21
# 1a9c6b51cd0348db9b6f357d50059d0f
msgid "Ordinarily, a point release would not include new features, but in the case of Django 1.2.2, we have made an exception to this rule."
msgstr ""

#: ../../releases/1.2.2.txt:24
# c401cafc1fd6473f91808a2d6f513e11
msgid "In order to test a bug fix that forms part of the 1.2.2 release, it was necessary to add a feature -- the ``enforce_csrf_checks`` flag -- to the :mod:`test client <django.test.client>`. This flag forces the test client to perform full CSRF checks on forms. The default behavior of the test client hasn't changed, but if you want to do CSRF checks with the test client, it is now possible to do so."
msgstr ""

#: ../../releases/1.2.3.txt:3
# 98c8d79fb3bf49e5854658d7f2ffc806
msgid "Django 1.2.3 release notes"
msgstr ""

#: ../../releases/1.2.3.txt:5
# 847e055d52e6476ebadba57c0852b162
msgid "Django 1.2.3 fixed a couple of release problems in the 1.2.2 release and was released two days after 1.2.2."
msgstr ""

#: ../../releases/1.2.3.txt:8
# 08b977ffe66648bea6cd63cc19b8e3bd
msgid "This release corrects the following problems:"
msgstr ""

#: ../../releases/1.2.3.txt:10
# 45ea1fa559c04824b22373b310cdfef0
msgid "The patch_ applied for the security issue covered in Django 1.2.2 caused issues with non-ASCII responses using CSRF tokens."
msgstr ""

#: ../../releases/1.2.3.txt:13
# ca23c813e55a41019950546644f73b0e
msgid "The patch also caused issues with some forms, most notably the user-editing forms in the Django administrative interface."
msgstr ""

#: ../../releases/1.2.3.txt:16
# 8fc34a2e6542499a868db17777098168
msgid "The packaging manifest did not contain the full list of required files."
msgstr ""

#: ../../releases/1.2.4.txt:3
# d20190851d5d400eabbb5ec29d1d86e1
msgid "Django 1.2.4 release notes"
msgstr ""

#: ../../releases/1.2.4.txt:5
# b213460fd2bc443ba885457aa8874e1e
msgid "Welcome to Django 1.2.4!"
msgstr ""

#: ../../releases/1.2.4.txt:7
# 6f779b9ba01e4f0c956bf80b423291c8
msgid "This is the fourth \"bugfix\" release in the Django 1.2 series, improving the stability and performance of the Django 1.2 codebase."
msgstr ""

#: ../../releases/1.2.4.txt:10
# 56289374ee8847008db0a7f1b7155d0f
msgid "With one exception, Django 1.2.4 maintains backwards compatibility with Django 1.2.3. It also contains a number of fixes and other improvements. Django 1.2.4 is a recommended upgrade for any development or deployment currently using or targeting Django 1.2."
msgstr ""

#: ../../releases/1.2.4.txt:55
# ba809d928a0d48c89c4bd82e73716151
msgid "Ordinarily, a point release would not include new features, but in the case of Django 1.2.4, we have made an exception to this rule."
msgstr ""

#: ../../releases/1.2.4.txt:58
# 51acc5115eeb42b7927d837b785ccdf7
msgid "One of the bugs fixed in Django 1.2.4 involves a set of circumstances whereby a running a test suite on a multiple database configuration could cause the original source database (i.e., the actual production database) to be dropped, causing catastrophic loss of data. In order to provide a fix for this problem, it was necessary to introduce a new setting -- :setting:`TEST_DEPENDENCIES` -- that allows you to define any creation order dependencies in your database configuration."
msgstr ""

#: ../../releases/1.2.4.txt:67
# e5fa9488984c408eb40a5d3694ce9209
msgid "Most users -- even users with multiple-database configurations -- need not be concerned about the data loss bug, or the manual configuration of :setting:`TEST_DEPENDENCIES`. See the `original problem report`_ documentation on :ref:`controlling the creation order of test databases <topics-testing-creation-dependencies>` for details."
msgstr ""

#: ../../releases/1.2.4.txt:78
# 4863a4fe95134d94a490fc015d3015d7
msgid "The function-based :setting:`TEST_RUNNER` previously used to execute the GeoDjango test suite, ``django.contrib.gis.tests.run_gis_tests``, was finally deprecated in favor of a class-based test runner, :class:`django.contrib.gis.tests.GeoDjangoTestSuiteRunner`, added in this release."
msgstr ""

#: ../../releases/1.2.4.txt:84
# 074ee5a0014b432cbc658cd585954690
msgid "In addition, the GeoDjango test suite is now included when :ref:`running the Django test suite <running-unit-tests>` with ``runtests.py`` and using :ref:`spatial database backends <spatial-backends>`."
msgstr ""

#: ../../releases/1.2.5.txt:3
# 54a41e7f8354438c8fe379075a9993f0
msgid "Django 1.2.5 release notes"
msgstr ""

#: ../../releases/1.2.5.txt:5
# 7f11185c03f64016ae469539f39dfd7a
msgid "Welcome to Django 1.2.5!"
msgstr ""

#: ../../releases/1.2.5.txt:7
# a7bef570460c48e48ed1f676a1a7d24f
msgid "This is the fifth \"bugfix\" release in the Django 1.2 series, improving the stability and performance of the Django 1.2 codebase."
msgstr ""

#: ../../releases/1.2.5.txt:10
# c0e3535bdfa3436585e637f363b2ac79
msgid "With four exceptions, Django 1.2.5 maintains backwards compatibility with Django 1.2.4. It also contains a number of fixes and other improvements. Django 1.2.5 is a recommended upgrade for any development or deployment currently using or targeting Django 1.2."
msgstr ""

#: ../../releases/1.2.5.txt:71
# eb75908eaafb44e08432f0f61cc981c3
msgid "FileField no longer deletes files"
msgstr ""

#: ../../releases/1.2.5.txt:73
# 4e794083fe364c899657bb0e703b7c82
msgid "In earlier Django versions, when a model instance containing a :class:`~django.db.models.FileField` was deleted, :class:`~django.db.models.FileField` took it upon itself to also delete the file from the backend storage. This opened the door to several potentially serious data-loss scenarios, including rolled-back transactions and fields on different models referencing the same file. In Django 1.2.5, :class:`~django.db.models.FileField` will never delete files from the backend storage. If you need cleanup of orphaned files, you'll need to handle it yourself (for instance, with a custom management command that can be run manually or scheduled to run periodically via e.g. cron)."
msgstr ""

#: ../../releases/1.2.5.txt:85
#: ../../releases/1.3.txt:536
# 48ea3080c35940e8ae266494fe8ba00a
# afc6626965bf4885b2487951ed764c95
msgid "Use of custom SQL to load initial data in tests"
msgstr ""

#: ../../releases/1.2.5.txt:87
#: ../../releases/1.3.txt:538
# 4e82a53bd9824b1790d1304881221701
# 0ae62badf72346138394a71e050e9719
msgid "Django provides a custom SQL hooks as a way to inject hand-crafted SQL into the database synchronization process. One of the possible uses for this custom SQL is to insert data into your database. If your custom SQL contains ``INSERT`` statements, those insertions will be performed every time your database is synchronized. This includes the synchronization of any test databases that are created when you run a test suite."
msgstr ""

#: ../../releases/1.2.5.txt:95
#: ../../releases/1.3.txt:546
# 15bdcaccc40a44f0bc38ae1fb7204175
# f75d593e80a3487eae378dcf1243f3c7
msgid "However, in the process of testing the Django 1.3, it was discovered that this feature has never completely worked as advertised. When using database backends that don't support transactions, or when using a TransactionTestCase, data that has been inserted using custom SQL will not be visible during the testing process."
msgstr ""

#: ../../releases/1.2.5.txt:101
#: ../../releases/1.3.txt:552
# 26c70736cb9645e3bda135d084f78269
# b3724bdefa52458cbb432b746345e3e2
msgid "Unfortunately, there was no way to rectify this problem without introducing a backwards incompatibility. Rather than leave SQL-inserted initial data in an uncertain state, Django now enforces the policy that data inserted by custom SQL will *not* be visible during testing."
msgstr ""

#: ../../releases/1.2.5.txt:107
#: ../../releases/1.3.txt:558
# 00ae4557fb02475985b59790d5b7fef2
# 2fa4e01e578a4655bb0f2cc9e319a043
msgid "This change only affects the testing process. You can still use custom SQL to load data into your production database as part of the syncdb process. If you require data to exist during test conditions, you should either insert it using :ref:`test fixtures <topics-testing-fixtures>`, or using the ``setUp()`` method of your test case."
msgstr ""

#: ../../releases/1.2.5.txt:115
# 0adf2092bca54b38b846d54cad29cd82
msgid "ModelAdmin.lookup_allowed signature changed"
msgstr ""

#: ../../releases/1.2.5.txt:117
# 0dbedca4c6d241daba204641a627979d
msgid "Django 1.2.4 introduced a method ``lookup_allowed`` on ``ModelAdmin``, to cope with a security issue (changeset `[15033] <https://code.djangoproject.com/changeset/15033>`_). Although this method was never documented, it seems some people have overridden ``lookup_allowed``, especially to cope with regressions introduced by that changeset. While the method is still undocumented and not marked as stable, it may be helpful to know that the signature of this function has changed."
msgstr ""

#: ../../releases/1.2.6.txt:3
# 05c1b07a5eb947c09bdec6f16433a9aa
msgid "Django 1.2.6 release notes"
msgstr ""

#: ../../releases/1.2.6.txt:5
#: ../../releases/1.3.1.txt:5
# cdbbfcbbd1624c888ab8ef78c06851b4
# 84f81135c0184e04b23eff946dfbb4aa
msgid "*September 9, 2011*"
msgstr ""

#: ../../releases/1.2.6.txt:7
# d7401bbe194d436a96bd71013b418b77
msgid "Welcome to Django 1.2.6!"
msgstr ""

#: ../../releases/1.2.6.txt:9
# 4469655716d545aa8dcf42c91e12dba4
msgid "This is the sixth bugfix/security release in the Django 1.2 series, fixing several security issues present in Django 1.2.5.  Django 1.2.6 is a recommended upgrade for all users of any Django release in the 1.2.X series."
msgstr ""

#: ../../releases/1.2.6.txt:13
#: ../../releases/1.3.1.txt:13
#: ../../releases/1.3.2.txt:11
#: ../../releases/1.4.1.txt:11
# 48b59c2458c24927bf8082cb3410bf9d
# 71d583aca6c549f9b417c7f07d714939
# 3b68cdb8fac74c878e157ee65ae9e16f
# 605477902e25435c981dcfc450fff8c8
msgid "For a full list of issues addressed in this release, see the `security advisory`_."
msgstr ""

#: ../../releases/1.2.7.txt:3
# 39217d3065a34cd28591f536761e72d9
msgid "Django 1.2.7 release notes"
msgstr ""

#: ../../releases/1.2.7.txt:5
# a060699e2c2a435b9ade5bcb7ddac82a
msgid "*September 10, 2011*"
msgstr ""

#: ../../releases/1.2.7.txt:7
# 80ba4fb0510a456b801275f6762d90ec
msgid "Welcome to Django 1.2.7!"
msgstr ""

#: ../../releases/1.2.7.txt:9
# 29b63d83a56d4959a540ad6c0ab4d9d3
msgid "This is the seventh bugfix/security release in the Django 1.2 series. It replaces Django 1.2.6 due to problems with the 1.2.6 release tarball. Django 1.2.7 is a recommended upgrade for all users of any Django release in the 1.2.X series."
msgstr ""

#: ../../releases/1.2.7.txt:14
# ce5cb1401a6c4f4abcd36ac5d6190c31
msgid "For more information, see the `release advisory`_."
msgstr ""

#: ../../releases/1.3.txt:3
# ab7aab4b892541d59636a77eb2bb30e5
msgid "Django 1.3 release notes"
msgstr ""

#: ../../releases/1.3.txt:5
# 832cb8255f744f20a7bffb25dc670bc8
msgid "*March 23, 2011*"
msgstr ""

#: ../../releases/1.3.txt:7
# c1965f99d384400797682045038765a8
msgid "Welcome to Django 1.3!"
msgstr ""

#: ../../releases/1.3.txt:9
# d211f7a1ca8a4dbb93742e7e6c6c221f
msgid "Nearly a year in the making, Django 1.3 includes quite a few `new features`_ and plenty of bug fixes and improvements to existing features. These release notes cover the new features in 1.3, as well as some `backwards-incompatible changes`_ you'll want to be aware of when upgrading from Django 1.2 or older versions."
msgstr ""

#: ../../releases/1.3.txt:18
# 74bca13bd72f42979189161b54af6be2
msgid "Django 1.3's focus has mostly been on resolving smaller, long-standing feature requests, but that hasn't prevented a few fairly significant new features from landing, including:"
msgstr ""

#: ../../releases/1.3.txt:22
# a0c801ebd64e471d997cb4a837969c2b
msgid "A framework for writing `class-based views`_."
msgstr ""

#: ../../releases/1.3.txt:24
# 7290fc4c1a674b02bf6c2bef66aa4e48
msgid "Built-in support for `using Python's logging facilities`_."
msgstr ""

#: ../../releases/1.3.txt:26
# 41c687ca4835436d9dd0139a13185986
msgid "Contrib support for `easy handling of static files`_."
msgstr ""

#: ../../releases/1.3.txt:28
# 49fa58d9c0be4b8eabb2955d31dfa412
msgid "Django's testing framework now supports (and ships with a copy of) `the unittest2 library`_."
msgstr ""

#: ../../releases/1.3.txt:31
# a46d6366bbb14c468823b38774f946c1
msgid "There's plenty more, of course; see the coverage of `new features`_ below for a full rundown and details."
msgstr ""

#: ../../releases/1.3.txt:34
# 6993ee8991d6480f936b623dd00bb02b
msgid "Wherever possible, of course, new features are introduced in a backwards-compatible manner per :doc:`our API stability policy </misc/api-stability>` policy. As a result of this policy, Django 1.3 `begins the deprecation process for some features`_."
msgstr ""

#: ../../releases/1.3.txt:39
# 1a232425be9a4a1192c3edb9eb1df2e0
msgid "Some changes, unfortunately, are genuinely backwards-incompatible; in most cases these are due to security issues or bugs which simply couldn't be fixed any other way. Django 1.3 includes a few of these, and descriptions of them -- along with the (minor) modifications you'll need to make to handle them -- are documented in the list of `backwards-incompatible changes`_ below."
msgstr ""

#: ../../releases/1.3.txt:56
# 9bbaa22947e64b8aa35e4973494bb6a2
msgid "The release of Django 1.2 was notable for having the first shift in Django's Python compatibility policy; prior to Django 1.2, Django supported any 2.x version of Python from 2.3 up. As of Django 1.2, the minimum requirement was raised to Python 2.4."
msgstr ""

#: ../../releases/1.3.txt:61
# eda518eaafdc497b9f4d7ae5df4c80c5
msgid "Django 1.3 continues to support Python 2.4, but will be the final Django release series to do so; beginning with Django 1.4, the minimum supported Python version will be 2.5. A document outlining our full timeline for deprecating Python 2.x and moving to Python 3.x will be published shortly after the release of Django 1.3."
msgstr ""

#: ../../releases/1.3.txt:68
# e203a6fa199f488a8000ede5370f4933
msgid "What's new in Django 1.3"
msgstr ""

#: ../../releases/1.3.txt:71
#: ../../releases/1.3-alpha-1.txt:30
# 173389b56b994ebe85bc7f56a28322f9
# 55d6820ffbdc4b7882e13903c2881536
msgid "Class-based views"
msgstr ""

#: ../../releases/1.3.txt:73
#: ../../releases/1.3-alpha-1.txt:32
# dd7459128007462c850186077781545f
# 8e1790a189684006ae981c3bf5688f8b
msgid "Django 1.3 adds a framework that allows you to use a class as a view. This means you can compose a view out of a collection of methods that can be subclassed and overridden to provide common views of data without having to write too much code."
msgstr ""

#: ../../releases/1.3.txt:78
#: ../../releases/1.3-alpha-1.txt:37
# d063c2cafd834802b30c8a293bc5599f
# 9e4ebead9c444320b1349c59b12fdd4c
msgid "Analogs of all the old function-based generic views have been provided, along with a completely generic view base class that can be used as the basis for reusable applications that can be easily extended."
msgstr ""

#: ../../releases/1.3.txt:83
# c5bc57bc8a1048c5a7d59f8a3971ec35
msgid "See :doc:`the documentation on class-based generic views</topics/class-based-views/index>` for more details. There is also a document to help you `convert your function-based generic views to class-based views <https://docs.djangoproject.com/en/1.4/topics/generic-views-migration/>`_."
msgstr ""

#: ../../releases/1.3.txt:89
#: ../../releases/1.3-alpha-1.txt:47
# a649e46225b34c148a5538c24d3d6e01
# b685f18d8cda493e8a6272cfdfb80703
msgid "Logging"
msgstr ""

#: ../../releases/1.3.txt:91
# fde49c3c06324f288ed7dd8efeb2a92f
msgid "Django 1.3 adds framework-level support for Python's ``logging`` module.  This means you can now easily configure and control logging as part of your Django project. A number of logging handlers and logging calls have been added to Django's own code as well -- most notably, the error emails sent on a HTTP 500 server error are now handled as a logging activity. See :doc:`the documentation on Django's logging interface </topics/logging>` for more details."
msgstr ""

#: ../../releases/1.3.txt:100
#: ../../releases/1.3-alpha-1.txt:58
# 957bce36cffd4093a593567e5416e627
# 3faf430fee6047fe94760872021c6c24
msgid "Extended static files handling"
msgstr ""

#: ../../releases/1.3.txt:102
# 96c259e5d70642c6be26e086e7d83071
msgid "Django 1.3 ships with a new contrib app -- ``django.contrib.staticfiles`` -- to help developers handle the static media files (images, CSS, Javascript, etc.) that are needed to render a complete web page."
msgstr ""

#: ../../releases/1.3.txt:107
#: ../../releases/1.3-alpha-1.txt:64
# ce6d02443a224cf395527ec003d38d21
# 26911cce22da459c91898791805e2738
msgid "In previous versions of Django, it was common to place static assets in :setting:`MEDIA_ROOT` along with user-uploaded files, and serve them both at :setting:`MEDIA_URL`. Part of the purpose of introducing the ``staticfiles`` app is to make it easier to keep static files separate from user-uploaded files. Static assets should now go in ``static/`` subdirectories of your apps or in other static assets directories listed in :setting:`STATICFILES_DIRS`, and will be served at :setting:`STATIC_URL`."
msgstr ""

#: ../../releases/1.3.txt:116
#: ../../releases/1.3-alpha-1.txt:73
# 9813fc44616049c08178a197e8f3ab38
# 0e26ba42315944cc8f1398f6bd631c88
msgid "See the :doc:`reference documentation of the app </ref/contrib/staticfiles>` for more details or learn how to :doc:`manage static files </howto/static-files/index>`."
msgstr ""

#: ../../releases/1.3.txt:121
# 1850e3ece89144daa9c59d79e32be323
msgid "unittest2 support"
msgstr ""

#: ../../releases/1.3.txt:123
# 521a59ae7ccf4eb8ae71b3800d907a10
msgid "Python 2.7 introduced some major changes to the ``unittest`` library, adding some extremely useful features. To ensure that every Django project can benefit from these new features, Django ships with a copy of unittest2_, a copy of the Python 2.7 unittest library, backported for Python 2.4 compatibility."
msgstr ""

#: ../../releases/1.3.txt:129
# 7e4fc36cd8b34a2cb164bcf6d00a3497
msgid "To access this library, Django provides the ``django.utils.unittest`` module alias. If you are using Python 2.7, or you have installed ``unittest2`` locally, Django will map the alias to the installed version of the unittest library. Otherwise, Django will use its own bundled version of unittest2."
msgstr ""

#: ../../releases/1.3.txt:135
# c4feaae1399f414c9e1b845f8830dfae
msgid "To take advantage of this alias, simply use::"
msgstr ""

#: ../../releases/1.3.txt:139
#: ../../releases/1.3-alpha-1.txt:96
# 0ab8cd7183ce41f1b9aaae0af78ffea4
# 46dc666b04e840679961a3d3a9c8a19c
msgid "wherever you would have historically used::"
msgstr ""

#: ../../releases/1.3.txt:143
# 26fb6cf80f174276bf2d023fb163e2a9
msgid "If you want to continue to use the base unittest library, you can -- you just won't get any of the nice new unittest2 features."
msgstr ""

#: ../../releases/1.3.txt:149
#: ../../releases/1.3-alpha-1.txt:106
# 992d5255d0b7432f952ec9d475404349
# fa53e330fd094deaab2dfa0f870f7f41
msgid "Transaction context managers"
msgstr ""

#: ../../releases/1.3.txt:151
#: ../../releases/1.3-alpha-1.txt:108
# a45a26ce0f71489db6758027399377e5
# ce8c3909b3984e6c8420162cca532213
msgid "Users of Python 2.5 and above may now use :ref:`transaction management functions <transaction-management-functions>` as `context managers`_. For example::"
msgstr ""

#: ../../releases/1.3.txt:159
#: ../../releases/1.3-alpha-1.txt:116
# 7309bea05e094b78befefe45c68a896d
# 70137d85e1d742869716c29f2c71325e
msgid "For more information, see :ref:`transaction-management-functions`."
msgstr ""

#: ../../releases/1.3.txt:162
#: ../../releases/1.3-alpha-1.txt:119
# 8149da9f3ae4436981d0d0a28ad99918
# b04919a80f2d48d38e2f0d90e9822b72
msgid "Configurable delete-cascade"
msgstr ""

#: ../../releases/1.3.txt:164
#: ../../releases/1.3-alpha-1.txt:121
# 24d25be775034fbab3d61bba941fcfbc
# 9e870beeb6e844f1b2cbfb9c58e542ca
msgid ":class:`~django.db.models.ForeignKey` and :class:`~django.db.models.OneToOneField` now accept an :attr:`~django.db.models.ForeignKey.on_delete` argument to customize behavior when the referenced object is deleted. Previously, deletes were always cascaded; available alternatives now include set null, set default, set to any value, protect, or do nothing."
msgstr ""

#: ../../releases/1.3.txt:171
#: ../../releases/1.3-alpha-1.txt:128
# 31cb3fad8a5e4beba439ded6643bdd7d
# 8627c287d48d4c4aa622bb8214b792ff
msgid "For more information, see the :attr:`~django.db.models.ForeignKey.on_delete` documentation."
msgstr ""

#: ../../releases/1.3.txt:175
# 3ead9575894a4961adac862e490578d4
msgid "Contextual markers and comments for translatable strings"
msgstr ""

#: ../../releases/1.3.txt:177
#: ../../releases/1.3-alpha-1.txt:134
# 423a5fd6477f48168af15a4c09e546fc
# b9c91b0e09724fa8a9f11f21750306c8
msgid "For translation strings with ambiguous meaning, you can now use the ``pgettext`` function to specify the context of the string."
msgstr ""

#: ../../releases/1.3.txt:180
# a79850db4907472d8bb85134e659e899
msgid "And if you just want to add some information for translators, you can also add special translator comments in the source."
msgstr ""

#: ../../releases/1.3.txt:183
# 405712054cd3430f80af5a8f7638e83b
msgid "For more information, see :ref:`contextual-markers` and :ref:`translator-comments`."
msgstr ""

#: ../../releases/1.3.txt:187
# 5bb872df6c8640fdbbad0c75662fa487
msgid "Improvements to built-in template tags"
msgstr ""

#: ../../releases/1.3.txt:189
# b722ff60122045b09511cec1362a8bc1
msgid "A number of improvements have been made to Django's built-in template tags:"
msgstr ""

#: ../../releases/1.3.txt:191
# 81df2dc73bf847e399f70e30e9152d4c
msgid "The :ttag:`include` tag now accepts a ``with`` option, allowing you to specify context variables to the included template"
msgstr ""

#: ../../releases/1.3.txt:194
# e4fbab0fd13c457e95f9602c7f59571a
msgid "The :ttag:`include` tag now accepts an ``only`` option, allowing you to exclude the current context from the included context"
msgstr ""

#: ../../releases/1.3.txt:197
# 00f34198ecbb4cb59c86273cb84bc5a9
msgid "The :ttag:`with` tag now allows you to define multiple context variables in a single :ttag:`with` block."
msgstr ""

#: ../../releases/1.3.txt:200
# 12361b6ef4474894883dcee14d614917
msgid "The :ttag:`load` tag now accepts a ``from`` argument, allowing you to load a single tag or filter from a library."
msgstr ""

#: ../../releases/1.3.txt:204
# e225e708d8b54d919493686b05f85bcd
msgid "TemplateResponse"
msgstr ""

#: ../../releases/1.3.txt:206
# d407a109b3424bec80a0c6d455df7fad
msgid "It can sometimes be beneficial to allow decorators or middleware to modify a response *after* it has been constructed by the view. For example, you may want to change the template that is used, or put additional data into the context."
msgstr ""

#: ../../releases/1.3.txt:211
# 5e29067a16fd469097dde0a4c51f7397
msgid "However, you can't (easily) modify the content of a basic :class:`~django.http.HttpResponse` after it has been constructed. To overcome this limitation, Django 1.3 adds a new :class:`~django.template.response.TemplateResponse` class. Unlike basic :class:`~django.http.HttpResponse` objects, :class:`~django.template.response.TemplateResponse` objects retain the details of the template and context that was provided by the view to compute the response. The final output of the response is not computed until it is needed, later in the response process."
msgstr ""

#: ../../releases/1.3.txt:221
# 7304e261d2ec4ead83a84133d217365c
msgid "For more details, see the :doc:`documentation </ref/template-response>` on the :class:`~django.template.response.TemplateResponse` class."
msgstr ""

#: ../../releases/1.3.txt:225
# 4318981fd41d405aae9d4d27cfcaec87
msgid "Caching changes"
msgstr ""

#: ../../releases/1.3.txt:227
# e2cd10226d594db296dbe5ef414ed213
msgid "Django 1.3 sees the introduction of several improvements to the Django's caching infrastructure."
msgstr ""

#: ../../releases/1.3.txt:230
# 633523ca61de41888c0213d4d51563b7
msgid "Firstly, Django now supports multiple named caches. In the same way that Django 1.2 introduced support for multiple database connections, Django 1.3 allows you to use the new :setting:`CACHES` setting to define multiple named cache connections."
msgstr ""

#: ../../releases/1.3.txt:235
# c5983d8afae04d428dd493d9ac46eb3d
msgid "Secondly, :ref:`versioning <cache_versioning>`, :ref:`site-wide prefixing <cache_key_prefixing>` and :ref:`transformation <cache_key_transformation>` have been added to the cache API."
msgstr ""

#: ../../releases/1.3.txt:239
# 32d33b46349d4ba184f58448a347fc5c
msgid "Thirdly, :ref:`cache key creation <using-vary-headers>` has been updated to take the request query string into account on ``GET`` requests."
msgstr ""

#: ../../releases/1.3.txt:243
# 791867e4d45547eeb8a9a47c062fbc7f
msgid "Finally, support for pylibmc_ has been added to the memcached cache backend."
msgstr ""

#: ../../releases/1.3.txt:246
# be10635d052d4414a20df8c3790baf9f
msgid "For more details, see the :doc:`documentation on caching in Django</topics/cache>`."
msgstr ""

#: ../../releases/1.3.txt:252
#: ../../releases/1.3-beta-1.txt:59
# 85f709d0c594498fab1b458d9f14d0fb
# 97ccb95f622445ff8874e177463f0fd1
msgid "Permissions for inactive users"
msgstr ""

#: ../../releases/1.3.txt:254
# 3bcb99d249b94a599d2a704ba4995bb6
msgid "If you provide a custom auth backend with ``supports_inactive_user`` set to ``True``, an inactive ``User`` instance will check the backend for permissions.  This is useful for further centralizing the permission handling. See the :doc:`authentication docs </topics/auth/index>` for more details."
msgstr ""

#: ../../releases/1.3.txt:263
# af610df869da488e96cdd2bfd6692eff
msgid "The GeoDjango test suite is now included when :ref:`running the Django test suite <running-unit-tests>` with ``runtests.py`` when using :ref:`spatial database backends <spatial-backends>`."
msgstr ""

#: ../../releases/1.3.txt:268
# 74451c85e0214d20857e2da82b5ecc19
msgid ":setting:`MEDIA_URL` and :setting:`STATIC_URL` must end in a slash"
msgstr ""

#: ../../releases/1.3.txt:270
# 797904d4699c4c2e8b7bdc4a9fef08a0
msgid "Previously, the :setting:`MEDIA_URL` setting only required a trailing slash if it contained a suffix beyond the domain name."
msgstr ""

#: ../../releases/1.3.txt:273
# ec868040f852416f97d3040bb14ef59c
msgid "A trailing slash is now *required* for :setting:`MEDIA_URL` and the new :setting:`STATIC_URL` setting as long as it is not blank. This ensures there is a consistent way to combine paths in templates."
msgstr ""

#: ../../releases/1.3.txt:277
# 6659ab844fae4329961bf57c14bf1293
msgid "Project settings which provide either of both settings without a trailing slash will now raise a ``PendingDeprecationWarning``."
msgstr ""

#: ../../releases/1.3.txt:280
# 303304edf0584f9facb64cba3d5aba00
msgid "In Django 1.4 this same condition will raise ``DeprecationWarning``, and in Django 1.5 will raise an ``ImproperlyConfigured`` exception."
msgstr ""

#: ../../releases/1.3.txt:284
#: ../../releases/1.3-alpha-1.txt:140
# abd345560f6d4edab987c69027d84f46
# ad3eb692c3094b43864ed8d144226199
msgid "Everything else"
msgstr ""

#: ../../releases/1.3.txt:286
#: ../../releases/1.3-alpha-1.txt:142
# 5c0d9be7613f4089867ab504146b4a78
# 6c827df2daaa41c89737154f04bdc632
msgid "Django :doc:`1.1 <1.1>` and :doc:`1.2 <1.2>` added lots of big ticket items to Django, like multiple-database support, model validation, and a session-based messages framework. However, this focus on big features came at the cost of lots of smaller features."
msgstr ""

#: ../../releases/1.3.txt:292
#: ../../releases/1.3-alpha-1.txt:148
# b8d5da734fe6401e89203d91a9173076
# 77cb1d30e3a84e0aa26166915bef4dcb
msgid "To compensate for this, the focus of the Django 1.3 development process has been on adding lots of smaller, long standing feature requests. These include:"
msgstr ""

#: ../../releases/1.3.txt:296
# f8c077d3860448aca85e1901caba013e
msgid "Improved tools for accessing and manipulating the current :class:`~django.contrib.sites.models.Site` object in :doc:`the sites framework </ref/contrib/sites>`."
msgstr ""

#: ../../releases/1.3.txt:300
#: ../../releases/1.3-alpha-1.txt:155
# c19ee34bab3c40a884a131b6fe4db57c
# bfd64e535cd64e678eb0d9f341912b1c
msgid "A :class:`~django.test.client.RequestFactory` for mocking requests in tests."
msgstr ""

#: ../../releases/1.3.txt:303
#: ../../releases/1.3-alpha-1.txt:158
# f1f360fbbbcb40f6ad626936cb62b11f
# 4726030da78e42c0957eeeda1636ebf5
msgid "A new test assertion -- :meth:`~django.test.TestCase.assertNumQueries` -- making it easier to test the database activity associated with a view."
msgstr ""

#: ../../releases/1.3.txt:307
# 95ec45ef3fc84cf78d4ad9a549f33ab3
msgid "Support for lookups spanning relations in admin's :attr:`~django.contrib.admin.ModelAdmin.list_filter`."
msgstr ""

#: ../../releases/1.3.txt:310
# 9b12a1dc1a8d4b9a8be3e1f2b7314b3f
msgid "Support for HTTPOnly_ cookies."
msgstr ""

#: ../../releases/1.3.txt:312
# 710aa57b555542e8abdfc3e0dfb9eb8d
msgid ":meth:`~django.core.mail.mail_admins()` and :meth:`~django.core.mail.mail_managers()` now support easily attaching HTML content to messages."
msgstr ""

#: ../../releases/1.3.txt:316
# 67c6efb3916940e3a89080a183e79d44
msgid ":class:`~django.core.mail.EmailMessage` now supports CC's."
msgstr ""

#: ../../releases/1.3.txt:318
# 7b5be766023b42f587c35feef857a516
msgid "Error emails now include more of the detail and formatting of the debug server error page."
msgstr ""

#: ../../releases/1.3.txt:321
# f49c7b1e04ad4556aae78ae24590f5e2
msgid ":meth:`~django.template.Library.simple_tag` now accepts a ``takes_context`` argument, making it easier to write simple template tags that require access to template context."
msgstr ""

#: ../../releases/1.3.txt:325
# 878d1b1b81e5409eaa010868392a1076
msgid "A new :meth:`~django.shortcuts.render()` shortcut -- an alternative to :meth:`~django.shortcuts.render_to_response()` providing a :class:`~django.template.RequestContext` by default."
msgstr ""

#: ../../releases/1.3.txt:329
# a31ca81c1f164e33a7805db99db35251
msgid "Support for combining :ref:`F() expressions <query-expressions>` with timedelta values when retrieving or updating database values."
msgstr ""

#: ../../releases/1.3.txt:337
# 45b7534f4006430f9b2c5eda61ee1661
msgid "Backwards-incompatible changes in 1.3"
msgstr ""

#: ../../releases/1.3.txt:340
# 73ae3fb604fa48cb958d6eff1dd13f43
msgid "CSRF validation now applies to AJAX requests"
msgstr ""

#: ../../releases/1.3.txt:342
# c2512d2982ee4667a4a7d5ddb407034a
msgid "Prior to Django 1.2.5, Django's CSRF-prevention system exempted AJAX requests from CSRF verification; due to `security issues`_ reported to us, however, *all* requests are now subjected to CSRF verification. Consult :doc:`the Django CSRF documentation </ref/contrib/csrf>` for details on how to handle CSRF verification in AJAX requests."
msgstr ""

#: ../../releases/1.3.txt:354
# 7b298d2989c64fb9be25671d4f29df13
msgid "Prior to Django 1.2.5, the Django administrative interface allowed filtering on any model field or relation -- not just those specified in ``list_filter`` -- via query string manipulation. Due to security issues reported to us, however, query string lookup arguments in the admin must be for fields or relations specified in ``list_filter`` or ``date_hierarchy``."
msgstr ""

#: ../../releases/1.3.txt:362
# 3eebffb8653e49ed9a1e2ece6cd442a0
msgid "Deleting a model doesn't delete associated files"
msgstr ""

#: ../../releases/1.3.txt:364
# 1a3ee36661be4b2697ecd3b790a92307
msgid "In earlier Django versions, when a model instance containing a :class:`~django.db.models.FileField` was deleted, :class:`~django.db.models.FileField` took it upon itself to also delete the file from the backend storage. This opened the door to several data-loss scenarios, including rolled-back transactions and fields on different models referencing the same file. In Django 1.3, when a model is deleted the :class:`~django.db.models.FileField`'s ``delete()`` method won't be called. If you need cleanup of orphaned files, you'll need to handle it yourself (for instance, with a custom management command that can be run manually or scheduled to run periodically via e.g. cron)."
msgstr ""

#: ../../releases/1.3.txt:376
#: ../../releases/1.3-alpha-1.txt:169
# 5d051e115696445b8a6623fa36fb23d8
# 20e8c026dac44e4d8ba36f3e12bed7ea
msgid "PasswordInput default rendering behavior"
msgstr ""

#: ../../releases/1.3.txt:378
#: ../../releases/1.3-alpha-1.txt:171
# 41559db555ff4ee2a1648f42a8d8dd1c
# 6130062ec10340a793285655f2f1a94c
msgid "The :class:`~django.forms.PasswordInput` form widget, intended for use with form fields which represent passwords, accepts a boolean keyword argument ``render_value`` indicating whether to send its data back to the browser when displaying a submitted form with errors. Prior to Django 1.3, this argument defaulted to ``True``, meaning that the submitted password would be sent back to the browser as part of the form. Developers who wished to add a bit of additional security by excluding that value from the redisplayed form could instantiate a :class:`~django.forms.PasswordInput` passing ``render_value=False`` ."
msgstr ""

#: ../../releases/1.3.txt:388
#: ../../releases/1.3-alpha-1.txt:181
# a922bfbcaea64d65a2f522ae959573c1
# cacdccab7e314bc687a0d83c30f05c3b
msgid "Due to the sensitive nature of passwords, however, Django 1.3 takes this step automatically; the default value of ``render_value`` is now ``False``, and developers who want the password value returned to the browser on a submission with errors (the previous behavior) must now explicitly indicate this. For example::"
msgstr ""

#: ../../releases/1.3.txt:399
#: ../../releases/1.3-alpha-1.txt:193
# 4e2c1700419d4e098f43bd6c6827e722
# 1fd269d609084f2cab24c6333f2cd155
msgid "Clearable default widget for FileField"
msgstr ""

#: ../../releases/1.3.txt:401
# 4f24fb3ceb784997bfcd5e0f8b63c414
msgid "Django 1.3 now includes a :class:`~django.forms.ClearableFileInput` form widget in addition to :class:`~django.forms.FileInput`. ``ClearableFileInput`` renders with a checkbox to clear the field's value (if the field has a value and is not required); ``FileInput`` provided no means for clearing an existing file from a ``FileField``."
msgstr ""

#: ../../releases/1.3.txt:407
#: ../../releases/1.3-alpha-1.txt:200
# 3fee6c157f314a308c3beaab14375feb
# 0be0bd7afd9b425a8c1522c9ef3a45ec
msgid "``ClearableFileInput`` is now the default widget for a ``FileField``, so existing forms including ``FileField`` without assigning a custom widget will need to account for the possible extra checkbox in the rendered form output."
msgstr ""

#: ../../releases/1.3.txt:411
#: ../../releases/1.3-alpha-1.txt:204
# f5e24e1a264d47d8850fed1dafa5cf3a
# d0f09e85ab0e4d1e81a1e32120e22730
msgid "To return to the previous rendering (without the ability to clear the ``FileField``), use the ``FileInput`` widget in place of ``ClearableFileInput``. For instance, in a ``ModelForm`` for a hypothetical ``Document`` model with a ``FileField`` named ``document``::"
msgstr ""

#: ../../releases/1.3.txt:425
#: ../../releases/1.3-alpha-1.txt:218
# 64dabc55906c4683ae95caac91961915
# 70648ecb8add4f0e842e287d11ebe008
msgid "New index on database session table"
msgstr ""

#: ../../releases/1.3.txt:427
#: ../../releases/1.3-alpha-1.txt:220
# 210ddd965ac049f2a27d8fca8ae3db78
# e3056bfa6baf4725a2bed6a4a83f3f80
msgid "Prior to Django 1.3, the database table used by the database backend for the :doc:`sessions </topics/http/sessions>` app had no index on the ``expire_date`` column. As a result, date-based queries on the session table -- such as the query that is needed to purge old sessions -- would be very slow if there were lots of sessions."
msgstr ""

#: ../../releases/1.3.txt:433
#: ../../releases/1.3-alpha-1.txt:226
# 51ff27d8ab8a4771829213a062336f0f
# 833719b217334d44b06d7723dbe5f6fc
msgid "If you have an existing project that is using the database session backend, you don't have to do anything to accommodate this change. However, you may get a significant performance boost if you manually add the new index to the session table. The SQL that will add the index can be found by running the :djadmin:`sqlindexes` admin command::"
msgstr ""

#: ../../releases/1.3.txt:443
#: ../../releases/1.3-alpha-1.txt:236
# 63326533bedb4971bd8377a7585f9e0f
# 358f974ed63a4534a864df282f6a3668
msgid "No more naughty words"
msgstr ""

#: ../../releases/1.3.txt:445
#: ../../releases/1.3-alpha-1.txt:238
# 57cf7d0bb42a4125ad0ef624e0b48f8a
# d104186ac7494b32a377df98b1dadb69
msgid "Django has historically provided (and enforced) a list of profanities. The :doc:`comments app </ref/contrib/comments/index>` has enforced this list of profanities, preventing people from submitting comments that contained one of those profanities."
msgstr ""

#: ../../releases/1.3.txt:450
# 356f0ef6462c461b81ae8616c1590f86
msgid "Unfortunately, the technique used to implement this profanities list was woefully naive, and prone to the `Scunthorpe problem`_. Improving the built-in filter to fix this problem would require significant effort, and since natural language processing isn't the normal domain of a web framework, we have \"fixed\" the problem by making the list of prohibited words an empty list."
msgstr ""

#: ../../releases/1.3.txt:457
#: ../../releases/1.3-alpha-1.txt:250
# a00e858682a34dbd97b2ce0e0f5e346e
# 51174a9e20304f2d990723e81cce085a
msgid "If you want to restore the old behavior, simply put a :setting:`PROFANITIES_LIST` setting in your settings file that includes the words that you want to prohibit (see the `commit that implemented this change`_ if you want to see the list of words that was historically prohibited). However, if avoiding profanities is important to you, you would be well advised to seek out a better, less naive approach to the problem."
msgstr ""

#: ../../releases/1.3.txt:469
#: ../../releases/1.3-alpha-1.txt:262
# 3ba07a5f972a4ad082832b200c9274df
# 9f38f75c8b2443cbb9c9aea2890dbf03
msgid "Localflavor changes"
msgstr ""

#: ../../releases/1.3.txt:471
#: ../../releases/1.3-alpha-1.txt:264
# 50eaf29318684034a7f7ccec2944e847
# 8c65ba1b72d94fceb2f2a1295ea9e962
msgid "Django 1.3 introduces the following backwards-incompatible changes to local flavors:"
msgstr ""

#: ../../releases/1.3.txt:474
# 64a41464532f48c197f0fd410cb4e2b0
msgid "Canada (ca) -- The province \"Newfoundland and Labrador\" has had its province code updated to \"NL\", rather than the older \"NF\". In addition, the Yukon Territory has had its province code corrected to \"YT\", instead of \"YK\"."
msgstr ""

#: ../../releases/1.3.txt:479
#: ../../releases/1.3-alpha-1.txt:267
# f71638d1371e44329edd3dd7521c95f3
# f884cf5f2f7b4899a70a3c126467d9e0
msgid "Indonesia (id) -- The province \"Nanggroe Aceh Darussalam (NAD)\" has been removed from the province list in favor of the new official designation \"Aceh (ACE)\"."
msgstr ""

#: ../../releases/1.3.txt:483
# b325823ec2194035916f4d1510dc303e
msgid "United States of America (us) -- The list of \"states\" used by ``USStateField`` has expanded to include Armed Forces postal codes. This is backwards-incompatible if you were relying on ``USStateField`` not including them."
msgstr ""

#: ../../releases/1.3.txt:489
# 79773c71f5464cee9a5103b51fe654ff
msgid "FormSet updates"
msgstr ""

#: ../../releases/1.3.txt:491
# 6df1e96a4f83477984f035f330647a59
msgid "In Django 1.3 ``FormSet`` creation behavior is modified slightly. Historically the class didn't make a distinction between not being passed data and being passed empty dictionary. This was inconsistent with behavior in other parts of the framework. Starting with 1.3 if you pass in empty dictionary the ``FormSet`` will raise a ``ValidationError``."
msgstr ""

#: ../../releases/1.3.txt:497
# 440a92dbff3846409a07864f2dd12138
msgid "For example with a ``FormSet``::"
msgstr ""

#: ../../releases/1.3.txt:504
# 70ada0f78f2947d2a902cb03bce697f2
msgid "the following code will raise a ``ValidationError``::"
msgstr ""

#: ../../releases/1.3.txt:511
# 886bac510ad7428b937ca93235d9d81c
msgid "if you need to instantiate an empty ``FormSet``, don't pass in the data or use ``None``::"
msgstr ""

#: ../../releases/1.3.txt:518
# c256b1c64b9345e0815b97725dfe8789
msgid "Callables in templates"
msgstr ""

#: ../../releases/1.3.txt:520
# 24a8dcc9161e4738ba22271d4c41bad9
msgid "Previously, a callable in a template would only be called automatically as part of the variable resolution process if it was retrieved via attribute lookup. This was an inconsistency that could result in confusing and unhelpful behavior::"
msgstr ""

#: ../../releases/1.3.txt:530
# 72ba636da36846ff87186a44f2ab38bd
msgid "This has been resolved in Django 1.3 - the result in both cases will be ``u'Joe Bloggs'``. Although the previous behavior was not useful for a template language designed for web designers, and was never deliberately supported, it is possible that some templates may be broken by this change."
msgstr ""

#: ../../releases/1.3.txt:566
# acfbd05d576647f4a7ff8e299404b75f
msgid "Changed priority of translation loading"
msgstr ""

#: ../../releases/1.3.txt:568
# 05c1a25f80ac4ff5bcae238c77b00ed8
msgid "Work has been done to simplify, rationalize and properly document the algorithm used by Django at runtime to build translations from the different translations found on disk, namely:"
msgstr ""

#: ../../releases/1.3.txt:572
# 5ac180b1eb1e4bd098bcacc9cbef260e
msgid "For translatable literals found in Python code and templates (``'django'`` gettext domain):"
msgstr ""

#: ../../releases/1.3.txt:575
# dc5a9e67f9f040ebb34fb84ad92a7be6
msgid "Priorities of translations included with applications listed in the :setting:`INSTALLED_APPS` setting were changed. To provide a behavior consistent with other parts of Django that also use such setting (templates, etc.) now, when building the translation that will be made available, the apps listed first have higher precedence than the ones listed later."
msgstr ""

#: ../../releases/1.3.txt:581
# 87b9bd4efcb1463991b11d2a82017264
msgid "Now it is possible to override the translations shipped with applications by using the :setting:`LOCALE_PATHS` setting whose translations have now higher precedence than the translations of :setting:`INSTALLED_APPS` applications. The relative priority among the values listed in this setting has also been modified so the paths listed first have higher precedence than the ones listed later."
msgstr ""

#: ../../releases/1.3.txt:588
# 3355405232da4f4ea527347196489fa5
msgid "The ``locale`` subdirectory of the directory containing the settings, that usually coincides with and is known as the *project directory* is being deprecated in this release as a source of translations. (the precedence of these translations is intermediate between applications and :setting:`LOCALE_PATHS` translations). See the `corresponding deprecated features section`_ of this document."
msgstr ""

#: ../../releases/1.3.txt:595
# e062925d36bf4ca3aa3c265730835dbb
msgid "For translatable literals found in Javascript code (``'djangojs'`` gettext domain):"
msgstr ""

#: ../../releases/1.3.txt:598
# 170c9178143d496e9184194604670ff2
msgid "Similarly to the ``'django'`` domain translations: Overriding of translations shipped with applications by using the :setting:`LOCALE_PATHS` setting is now possible for this domain too. These translations have higher precedence than the translations of Python packages passed to the :ref:`javascript_catalog view <javascript_catalog-view>`.  Paths listed first have higher precedence than the ones listed later."
msgstr ""

#: ../../releases/1.3.txt:605
# 1bfecf60a6454631aa5466c1fc8c8e7b
msgid "Translations under the ``locale`` subdirectory of the *project directory* have never been taken in account for JavaScript translations and remain in the same situation considering the deprecation of such location."
msgstr ""

#: ../../releases/1.3.txt:612
# ad3c5ac0ac76425fa552c9a9e837eae7
msgid "Transaction management"
msgstr ""

#: ../../releases/1.3.txt:614
# b3834c7e7cec41249f502d8dea345562
msgid "When using managed transactions -- that is, anything but the default autocommit mode -- it is important when a transaction is marked as \"dirty\". Dirty transactions are committed by the :func:`~django.db.transaction.commit_on_success` decorator or the :class:`~django.middleware.transaction.TransactionMiddleware`, and :func:`~django.db.transaction.commit_manually` forces them to be closed explicitly; clean transactions \"get a pass\", which means they are usually rolled back at the end of a request when the connection is closed."
msgstr ""

#: ../../releases/1.3.txt:624
# 1bdcb2427cb240379442b22372dc30ab
msgid "Until Django 1.3, transactions were only marked dirty when Django was aware of a modifying operation performed in them; that is, either some model was saved, some bulk update or delete was performed, or the user explicitly called ``transaction.set_dirty()``. In Django 1.3, a transaction is marked dirty when *any* database operation is performed."
msgstr ""

#: ../../releases/1.3.txt:631
# 2220a73608b7419cbf2c0cbfd8784873
msgid "As a result of this change, you no longer need to set a transaction dirty explicitly when you execute raw SQL or use a data-modifying ``SELECT``. However, you *do* need to explicitly close any read-only transactions that are being managed using :func:`~django.db.transaction.commit_manually`. For example::"
msgstr ""

#: ../../releases/1.3.txt:642
# 8239743c4d3b4eb3ac3ad0461a5afe8a
msgid "Prior to Django 1.3, this would work without error. However, under Django 1.3, this will raise a :class:`~django.db.transaction.TransactionManagementError` because the read operation that retrieves the ``MyObject`` instance leaves the transaction in a dirty state."
msgstr ""

#: ../../releases/1.3.txt:649
# 6f9f7e76522440f48fbffe0f810ff73d
msgid "No password reset for inactive users"
msgstr ""

#: ../../releases/1.3.txt:651
# 1dbbaadae9764e3598fd51538879f24c
msgid "Prior to Django 1.3, inactive users were able to request a password reset email and reset their password. In Django 1.3 inactive users will receive the same message as a nonexistent account."
msgstr ""

#: ../../releases/1.3.txt:658
#: ../../releases/1.3-alpha-1.txt:273
# a22b5015aa614461aef645bcf9da2850
# 7498781c1cbc41cbae359d0f45a16231
msgid "Features deprecated in 1.3"
msgstr ""

#: ../../releases/1.3.txt:660
#: ../../releases/1.3-alpha-1.txt:275
# a69e51851b114360bbfc9e0a34098792
# cef502811d884330841bd2fa16d2927b
msgid "Django 1.3 deprecates some features from earlier releases. These features are still supported, but will be gradually phased out over the next few release cycles."
msgstr ""

#: ../../releases/1.3.txt:664
#: ../../releases/1.3-alpha-1.txt:279
# 885dc9c250444e12a78fc068de3e581c
# 06a9078382e9447989b4d00c7769a4c6
msgid "Code taking advantage of any of the features below will raise a ``PendingDeprecationWarning`` in Django 1.3. This warning will be silent by default, but may be turned on using Python's :mod:`warnings` module, or by running Python with a ``-Wd`` or ``-Wall`` flag."
msgstr ""

#: ../../releases/1.3.txt:669
#: ../../releases/1.3-alpha-1.txt:284
# 13458fa5898746ffa22ad8a2f71f1aab
# 09503948cdae4b7589f64d3046a2a8e6
msgid "In Django 1.4, these warnings will become a ``DeprecationWarning``, which is *not* silent. In Django 1.5 support for these features will be removed entirely."
msgstr ""

#: ../../releases/1.3.txt:675
#: ../../releases/1.3-alpha-1.txt:290
# 7c55351a04a1469bac234fc26e1961d2
# 385be98d93a24c5ebd142cfca77b407c
msgid "For more details, see the documentation :doc:`Django's release process </internals/release-process>` and our :doc:`deprecation timeline </internals/deprecation>`."
msgstr ""

#: ../../releases/1.3.txt:680
#: ../../releases/1.3-alpha-1.txt:295
# 8106a096e7b44ecf954d3de5562a6182
# 0fc6b61b322e42348c3a9c05e3591dee
msgid "``mod_python`` support"
msgstr ""

#: ../../releases/1.3.txt:682
#: ../../releases/1.3-alpha-1.txt:297
# c7f2fe2242bf4e72a8430e20c8984dc8
# 37e04992160f401ebd1df9a1ae0503cd
msgid "The ``mod_python`` library has not had a release since 2007 or a commit since 2008. The Apache Foundation board voted to remove ``mod_python`` from the set of active projects in its version control repositories, and its lead developer has shifted all of his efforts toward the lighter, slimmer, more stable, and more flexible ``mod_wsgi`` backend."
msgstr ""

#: ../../releases/1.3.txt:688
# de8dccf26cb94e52916378511aded228
msgid "If you are currently using the ``mod_python`` request handler, you should redeploy your Django projects using another request handler. :doc:`mod_wsgi </howto/deployment/wsgi/modwsgi>` is the request handler recommended by the Django project, but :doc:`FastCGI </howto/deployment/fastcgi>` is also supported. Support for ``mod_python`` deployment will be removed in Django 1.5."
msgstr ""

#: ../../releases/1.3.txt:696
#: ../../releases/1.3-alpha-1.txt:308
# 90045ef866334b50aad49d68e27ecb64
# f145392da98747fdbbc4e3ae62b8f58b
msgid "Function-based generic views"
msgstr ""

#: ../../releases/1.3.txt:698
#: ../../releases/1.3-alpha-1.txt:310
# de9aba2c865049daabb8bd439f3e2b26
# 416de1e47eb54b729e656691f90c18af
msgid "As a result of the introduction of class-based generic views, the function-based generic views provided by Django have been deprecated. The following modules and the views they contain have been deprecated:"
msgstr ""

#: ../../releases/1.3.txt:702
#: ../../releases/1.3-alpha-1.txt:314
# c18a0906a61c4826a09a3275ce6253dc
# a25f643ba6174177a8cc194e9ad2db5a
msgid "``django.views.generic.create_update``"
msgstr ""

#: ../../releases/1.3.txt:703
#: ../../releases/1.3-alpha-1.txt:315
# 2dd7d7a742234e1ca8e682a8a3231272
# 4103ee37eb8c4350b76f1c7cdf4b93cf
msgid "``django.views.generic.date_based``"
msgstr ""

#: ../../releases/1.3.txt:704
#: ../../releases/1.3-alpha-1.txt:316
# 7e21bfe415e74d1cbff93e787a91b747
# b13c78beaf404edd8d4deb0a05ebf56f
msgid "``django.views.generic.list_detail``"
msgstr ""

#: ../../releases/1.3.txt:705
#: ../../releases/1.3-alpha-1.txt:317
# da3bac05f2934fee9037ceb98beb6a7c
# f20ae6e82bb3400098d9d9f1fbe7b9a4
msgid "``django.views.generic.simple``"
msgstr ""

#: ../../releases/1.3.txt:708
#: ../../releases/1.3-alpha-1.txt:320
# 408389f3e59748fb9ebc58b8e8c51b1a
# 93e340dd61264496817f82c2a4d3dde7
msgid "Test client response ``template`` attribute"
msgstr ""

#: ../../releases/1.3.txt:710
#: ../../releases/1.3-alpha-1.txt:322
# 2e98b4f22a73443e8df138bd4cfe39c1
# ed299160ca714426916ed36d4ada8428
msgid "Django's :ref:`test client <test-client>` returns :class:`~django.test.client.Response` objects annotated with extra testing information. In Django versions prior to 1.3, this included a ``template`` attribute containing information about templates rendered in generating the response: either None, a single :class:`~django.template.Template` object, or a list of :class:`~django.template.Template` objects. This inconsistency in return values (sometimes a list, sometimes not) made the attribute difficult to work with."
msgstr ""

#: ../../releases/1.3.txt:719
#: ../../releases/1.3-alpha-1.txt:331
# 74525e1cc42a40659c4bff161b0b8953
# b0fe5520dba3493eb69a78ed7c63c47c
msgid "In Django 1.3 the ``template`` attribute is deprecated in favor of a new :attr:`~django.test.client.Response.templates` attribute, which is always a list, even if it has only a single element or no elements."
msgstr ""

#: ../../releases/1.3.txt:724
#: ../../releases/1.3-alpha-1.txt:336
# e96d39ca469049e48593afa4c0dac1e7
# ac862dedf29e4dd6ade02c948eb7cc58
msgid "``DjangoTestRunner``"
msgstr ""

#: ../../releases/1.3.txt:726
#: ../../releases/1.3-alpha-1.txt:338
# 1c800d2cf815469bb23ac3f97714d7d1
# 95b119e70f72483292c82ca694c69e69
msgid "As a result of the introduction of support for unittest2, the features of ``django.test.simple.DjangoTestRunner`` (including fail-fast and Ctrl-C test termination) have been made redundant. In view of this redundancy, ``DjangoTestRunner`` has been turned into an empty placeholder class, and will be removed entirely in Django 1.5."
msgstr ""

#: ../../releases/1.3.txt:733
# e72b58386f094d9382adaa699d163768
msgid "Changes to :ttag:`url` and :ttag:`ssi`"
msgstr ""

#: ../../releases/1.3.txt:735
# e6553bbdcff84096a749f0486fe3abf0
msgid "Most template tags will allow you to pass in either constants or variables as arguments -- for example::"
msgstr ""

#: ../../releases/1.3.txt:740
# fac33911e9a443b7b13869d0b4546531
msgid "allows you to specify a base template as a constant, but if you have a context variable ``templ`` that contains the value ``base.html``::"
msgstr ""

#: ../../releases/1.3.txt:745
# e1149af43e0c4960b17efaa092b68e7a
msgid "is also legal."
msgstr ""

#: ../../releases/1.3.txt:747
# fe84f407b9a0465c87c913546d9a526d
msgid "However, due to an accident of history, the :ttag:`url` and :ttag:`ssi` are different. These tags use the second, quoteless syntax, but interpret the argument as a constant. This means it isn't possible to use a context variable as the target of a :ttag:`url` and :ttag:`ssi` tag."
msgstr ""

#: ../../releases/1.3.txt:753
# 957c6840712e41ca8d803d2fd9d63587
msgid "Django 1.3 marks the start of the process to correct this historical accident. Django 1.3 adds a new template library -- ``future`` -- that provides alternate implementations of the :ttag:`url` and :ttag:`ssi` template tags. This ``future`` library implement behavior that makes the handling of the first argument consistent with the handling of all other variables. So, an existing template that contains::"
msgstr ""

#: ../../releases/1.3.txt:762
# 8ecb6f1124924f8e815c1b2b7eb0e786
msgid "should be replaced with::"
msgstr ""

#: ../../releases/1.3.txt:767
# 77d65ea47f304b8ba38eb18376a7333f
msgid "The tags implementing the old behavior have been deprecated, and in Django 1.5, the old behavior will be replaced with the new behavior. To ensure compatibility with future versions of Django, existing templates should be modified to use the new ``future`` libraries and syntax."
msgstr ""

#: ../../releases/1.3.txt:774
#: ../../releases/1.3-beta-1.txt:124
# fc907da6bbc548448aa3b454006f02c1
# e767d35e252640c1b7cbde9a52118521
msgid "Changes to the login methods of the admin"
msgstr ""

#: ../../releases/1.3.txt:776
#: ../../releases/1.3-beta-1.txt:126
# 10a4d15d965f4ae8bfc8430c40bb4103
# 9397e20bcdb3469687ddf4c2b748722e
msgid "In previous version the admin app defined login methods in multiple locations and ignored the almost identical implementation in the already used auth app. A side effect of this duplication was the missing adoption of the changes made in r12634_ to support a broader set of characters for usernames."
msgstr ""

#: ../../releases/1.3.txt:781
#: ../../releases/1.3-beta-1.txt:131
# c9281762ce834869a00bee9296a4ab9d
# 27d2afdbaad04cc0b713cd5a6d9b735c
msgid "This release refactors the admin's login mechanism to use a subclass of the :class:`~django.contrib.auth.forms.AuthenticationForm` instead of a manual form validation. The previously undocumented method ``'django.contrib.admin.sites.AdminSite.display_login_form'`` has been removed in favor of a new :attr:`~django.contrib.admin.AdminSite.login_form` attribute."
msgstr ""

#: ../../releases/1.3.txt:791
# de2e29ec9d864205ad102c04533dfa3f
msgid "``reset`` and ``sqlreset`` management commands"
msgstr ""

#: ../../releases/1.3.txt:793
# a7d885af09314fc49827886a98cc6eff
msgid "Those commands have been deprecated. The ``flush`` and ``sqlflush`` commands can be used to delete everything. You can also use ALTER TABLE or DROP TABLE statements manually."
msgstr ""

#: ../../releases/1.3.txt:801
# a3c022b4d68b4b019bfc36cb8394982d
msgid "The function-based :setting:`TEST_RUNNER` previously used to execute the GeoDjango test suite, ``django.contrib.gis.tests.run_gis_tests``, was deprecated for the class-based runner, :class:`django.contrib.gis.tests.GeoDjangoTestSuiteRunner`."
msgstr ""

#: ../../releases/1.3.txt:806
# 09bcaea423db40d19d53b9201b117a3e
msgid "Previously, calling :meth:`~django.contrib.gis.geos.GEOSGeometry.transform` would silently do nothing when GDAL wasn't available.  Now, a :class:`~django.contrib.gis.geos.GEOSException` is properly raised to indicate possible faulty application code.  A warning is now raised if :meth:`~django.contrib.gis.geos.GEOSGeometry.transform` is called when the SRID of the geometry is less than 0 or ``None``."
msgstr ""

#: ../../releases/1.3.txt:815
# 1774f45659b241ce89d1561e05d5f91c
msgid "``CZBirthNumberField.clean``"
msgstr ""

#: ../../releases/1.3.txt:817
# 49a082ecc3dc4afbb6d14dc4d28f12f7
msgid "Previously this field's ``clean()`` method accepted a second, gender, argument which allowed stronger validation checks to be made, however since this argument could never actually be passed from the Django form machinery it is now pending deprecation."
msgstr ""

#: ../../releases/1.3.txt:823
# 54e4a067a319408ab252039b413b73b8
msgid "``CompatCookie``"
msgstr ""

#: ../../releases/1.3.txt:825
# 43b3da0fb74b474b81fe32ff3bc564a8
msgid "Previously, ``django.http`` exposed an undocumented ``CompatCookie`` class, which was a bugfix wrapper around the standard library ``SimpleCookie``. As the fixes are moving upstream, this is now deprecated - you should use ``from django.http import SimpleCookie`` instead."
msgstr ""

#: ../../releases/1.3.txt:833
# a2fc40dcd7f640e48b5745976d492b87
msgid "Loading of *project-level* translations"
msgstr ""

#: ../../releases/1.3.txt:835
# 6add29ccf9944cbd8c684e6501c25376
msgid "This release of Django starts the deprecation process for inclusion of translations located under the so-called *project path* in the translation building process performed at runtime. The :setting:`LOCALE_PATHS` setting can be used for the same task by adding the filesystem path to a ``locale`` directory containing project-level translations to the value of that setting."
msgstr ""

#: ../../releases/1.3.txt:841
# 493989ea9eb8462d88c3a4f145a91508
msgid "Rationale for this decision:"
msgstr ""

#: ../../releases/1.3.txt:843
# 53a26893a3a44575b4fb38fc6c6e03de
msgid "The *project path* has always been a loosely defined concept (actually, the directory used for locating project-level translations is the directory containing the settings module) and there has been a shift in other parts of the framework to stop using it as a reference for location of assets at runtime."
msgstr ""

#: ../../releases/1.3.txt:849
# c201097b1cc04700a3571ec2e7357fe1
msgid "Detection of the ``locale`` subdirectory tends to fail when the deployment scenario is more complex than the basic one. e.g. it fails when the settings module is a directory (ticket #10765)."
msgstr ""

#: ../../releases/1.3.txt:853
# b14bd52a6ef9458ab96c0918c84775be
msgid "There are potential strange development- and deployment-time problems like the fact that the ``project_dir/locale/`` subdir can generate spurious error messages when the project directory is added to the Python path (``manage.py runserver`` does this) and then it clashes with the equally named standard library module, this is a typical warning message::"
msgstr ""

#: ../../releases/1.3.txt:863
# bf4a21990b434600880318d71cfe9b4f
msgid "This location wasn't included in the translation building process for JavaScript literals. This deprecation removes such inconsistency."
msgstr ""

#: ../../releases/1.3.txt:868
# 22082d557dd14c48bc6f589f0ce8125d
msgid "``PermWrapper`` moved to ``django.contrib.auth.context_processors``"
msgstr ""

#: ../../releases/1.3.txt:870
# 2f1ca15ae0e84d72a2fd3c6afc4c055d
msgid "In Django 1.2, we began the process of changing the location of the ``auth`` context processor from ``django.core.context_processors`` to ``django.contrib.auth.context_processors``. However, the ``PermWrapper`` support class was mistakenly omitted from that migration. In Django 1.3, the ``PermWrapper`` class has also been moved to ``django.contrib.auth.context_processors``, along with the ``PermLookupDict`` support class. The new classes are functionally identical to their old versions; only the module location has changed."
msgstr ""

#: ../../releases/1.3.txt:880
# 401856eef26e4fff87f4217c93eda5c3
msgid "Removal of ``XMLField``"
msgstr ""

#: ../../releases/1.3.txt:882
# 9bb8a7def1ba400c998fc595cd38ad19
msgid "When Django was first released, Django included an ``XMLField`` that performed automatic XML validation for any field input. However, this validation function hasn't been performed since the introduction of ``newforms``, prior to the 1.0 release. As a result, ``XMLField`` as currently implemented is functionally indistinguishable from a simple :class:`~django.db.models.TextField`."
msgstr ""

#: ../../releases/1.3.txt:888
# f5414e1dc47f4e3ca5d4817fb3f54f17
msgid "For this reason, Django 1.3 has fast-tracked the deprecation of ``XMLField`` -- instead of a two-release deprecation, ``XMLField`` will be removed entirely in Django 1.4."
msgstr ""

#: ../../releases/1.3.txt:892
# 7b72f71b0dfe49aa9814519ebf968d5f
msgid "It's easy to update your code to accommodate this change -- just replace all uses of ``XMLField`` with ``TextField``, and remove the ``schema_path`` keyword argument (if it is specified)."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:3
# cafb334b66d44dac9b7400e46c5a5779
msgid "Django 1.3 alpha 1 release notes"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:5
# 24b054c9daed49058dbc9ac3e3377daa
msgid "November 11, 2010"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:7
# 2e373db065c84e24bd31445a595dc8d6
msgid "Welcome to Django 1.3 alpha 1!"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:9
# 94b4d589e79e49edb7f469b5ed567a1c
msgid "This is the first in a series of preview/development releases leading up to the eventual release of Django 1.3. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.3 release."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:18
# 64c0b0b0360640fdb53f139237b1cc1f
msgid "As of this alpha release, Django 1.3 contains a number of nifty `new features`_, lots of bug fixes, some minor `backwards incompatible changes`_ and an easy upgrade path from Django 1.2."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:27
# ff860296f5c14402850ba981aefd7764
msgid "What's new in Django 1.3 alpha 1"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:41
# e351efdf59c942e68eb774f2e03d17b7
msgid "See :doc:`the documentation on Class-based Generic Views </topics/class-based-views/index>` for more details. There is also a document to help you `convert your function-based generic views to class-based views <https://docs.djangoproject.com/en/1.4/topics/generic-views-migration/>`_."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:49
# 7d0fef108ae54b1cbd6659d606660ce1
msgid "Django 1.3 adds framework-level support for Python's logging module. This means you can now easily configure and control logging as part of your Django project. A number of logging handlers and logging calls have been added to Django's own code as well -- most notably, the error emails sent on a HTTP 500 server error are now handled as a logging activity. See :doc:`the documentation on Django's logging interface </topics/logging>` for more details."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:60
# 2e973e9bd94f4eb9ad475ee0cb79f63a
msgid "Django 1.3 ships with a new contrib app ``'django.contrib.staticfiles'`` to help developers handle the static media files (images, CSS, Javascript, etc.) that are needed to render a complete web page."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:78
# 64e5485ed8894f81b8f800ab5a599571
msgid "``unittest2`` support"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:80
# 5010cc24f51747cfbcbe8aba02e2b287
msgid "Python 2.7 introduced some major changes to the unittest library, adding some extremely useful features. To ensure that every Django project can benefit from these new features, Django ships with a copy of unittest2_, a copy of the Python 2.7 unittest library, backported for Python 2.4 compatibility."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:86
# 8e7406f737f4489bb1bb1da0a20f5cfd
msgid "To access this library, Django provides the ``django.utils.unittest`` module alias. If you are using Python 2.7, or you have installed unittest2 locally, Django will map the alias to the installed version of the unittest library. Otherwise, Django will use it's own bundled version of unittest2."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:92
# cc7a55f19cc8479690237b1d773231d3
msgid "To use this alias, simply use::"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:100
# 2054c39da1734cb186ff67b042363ca9
msgid "If you want to continue to use the base unittest libary, you can -- you just won't get any of the nice new unittest2 features."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:132
# 932ae8940722456197e3477b27e7d4ce
msgid "Contextual markers in translatable strings"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:137
# a72f8d399ecc4b618b0718aebc5e9da3
msgid "For more information, see :ref:`contextual-markers`"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:152
# 43dcc0c6b4c14c37965bbef35797dc15
msgid "Improved tools for accessing and manipulating the current Site via ``django.contrib.sites.models.get_current_site()``."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:166
# 62d2ddf63de34e8d80c76a4836bbe563
msgid "Backwards-incompatible changes in 1.3 alpha 1"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:195
# df8cab596c504b5b9fad784a12cc57cf
msgid "Django 1.3 now includes a ``ClearableFileInput`` form widget in addition to ``FileInput``. ``ClearableFileInput`` renders with a checkbox to clear the field's value (if the field has a value and is not required); ``FileInput`` provided no means for clearing an existing file from a ``FileField``."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:243
# 9248da038fb54609addeaf7685f9f0f9
msgid "Unfortunately, the technique used to implement this profanities list was woefully naive, and prone to the `Scunthorpe problem`_. Fixing the built in filter to fix this problem would require significant effort, and since natural language processing isn't the normal domain of a web framework, we have \"fixed\" the problem by making the list of prohibited words an empty list."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:303
# 387062950ce340ed8a07d6cf466c1eb9
msgid "If you are currently using the ``mod_python`` request handler, you are strongly encouraged to redeploy your Django instances using :doc:`mod_wsgi </howto/deployment/wsgi/modwsgi>`."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:345
#: ../../releases/1.3-beta-1.txt:186
# 6e7fd71b914b41e58bdc3571310cbd47
# 96e02ae37b454caab8b40f4bb544963e
msgid "The Django 1.3 roadmap"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:347
#: ../../releases/1.3-beta-1.txt:188
# 7932ace21a7a4969b57c1a7291d81821
# f9dff448f7534550acf37c004257606a
msgid "Before the final Django 1.3 release, several other preview/development releases will be made available. The current schedule consists of at least the following:"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:351
# 1005f406165c47588da4f41ec65cf514
msgid "Week of **November 29, 2010**: First Django 1.3 beta release. Final feature freeze for Django 1.3."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:354
# 60678b6a38444f67bcbf454c2f1cb940
msgid "Week of **January 10, 2011**: First Django 1.3 release candidate. String freeze for translations."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:357
# 4771115c47c642cfbfbdfe0a22ef14a6
msgid "Week of **January 17, 2011**: Django 1.3 final release."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:359
# 707284003e4949b59568a5569dd63504
msgid "If necessary, additional alpha, beta or release-candidate packages will be issued prior to the final 1.3 release. Django 1.3 will be released approximately one week after the final release candidate."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:367
# 3b7ae79bd5c444538ab72adcced23b27
msgid "In order to provide a high-quality 1.3 release, we need your help. Although this alpha release is, again, *not* intended for production use, you can help the Django team by trying out the alpha codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:378
#: ../../releases/1.3-beta-1.txt:216
#: ../../releases/1.4-alpha-1.txt:1103
# 43ff47c77818446e818513f0a891da8c
# 9b4973ebab5c4db0950f0f799e9ff312
# 43bc82aea93242bfbf6296e761554ce7
msgid "Additionally, discussion of Django development, including progress toward the 1.3 release, takes place daily on the django-developers mailing list:"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:396
# 7d0611dee6b34760b2a2968c3f4f5b87
msgid "Several development sprints will also be taking place before the 1.3 release; these will typically be announced in advance on the django-developers mailing list, and anyone who wants to help is welcome to join in."
msgstr ""

#: ../../releases/1.3-beta-1.txt:3
# e1120043dd59417589671f279649784a
msgid "Django 1.3 beta 1 release notes"
msgstr ""

#: ../../releases/1.3-beta-1.txt:5
# 09aace89b1e24e3888c64e53fda8cfb7
msgid "Welcome to Django 1.3 beta 1!"
msgstr ""

#: ../../releases/1.3-beta-1.txt:7
# 0e724f991a6040479749c9ed00e74f9b
msgid "This is the second in a series of preview/development releases leading up to the eventual release of Django 1.3. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.3 release."
msgstr ""

#: ../../releases/1.3-beta-1.txt:17
# 4acb590097b54b9a9e81f171914d565b
msgid "What's new in Django 1.3 beta 1"
msgstr ""

#: ../../releases/1.3-beta-1.txt:20
# e6044c33428747b7ac5114b773eed5b0
msgid "Further tweaks to the staticfiles app"
msgstr ""

#: ../../releases/1.3-beta-1.txt:22
# 07cb35b722a44f4da5d94b6af5bf6314
msgid "Django 1.3 ships with a new contrib app :mod:`django.contrib.staticfiles` to help developers handle the static media files (images, CSS, JavaScript, etc.) that are needed to render a complete web page."
msgstr ""

#: ../../releases/1.3-beta-1.txt:26
# 599b7fae63a84b1486c49c45dd0b8b96
msgid "The :mod:`~django.contrib.staticfiles` app ships with the ability to automatically serve static files during development (if the :setting:`DEBUG` setting is ``True``) when using the :djadmin:`runserver` management command. Based on feedback from the community this release adds two new options to the :djadmin:`runserver` command to modify this behavior:"
msgstr ""

#: ../../releases/1.3-beta-1.txt:32
# 39ac5a2042bd40adaee7062b9e152f76
msgid "``--nostatic``: prevents the :djadmin:`runserver` command from serving files completely."
msgstr ""

#: ../../releases/1.3-beta-1.txt:35
# e0e684640f954f7fa7e6b56f487825a3
msgid "``--insecure``: enables serving of static files even if running with :setting:`DEBUG` set to False. (This is **not** recommended!)"
msgstr ""

#: ../../releases/1.3-beta-1.txt:38
# 612246844ec644168cac59ece2afae1f
msgid "See the :doc:`staticfiles reference documentation </ref/contrib/staticfiles>` for more details, or learn :doc:`how to manage static files </howto/static-files/index>`."
msgstr ""

#: ../../releases/1.3-beta-1.txt:43
# febe6c1bea7b46148f0586cfd0586ef7
msgid "Translation comments"
msgstr ""

#: ../../releases/1.3-beta-1.txt:45
# 95c2ccce27914efbba3e791d225cc18b
msgid "If you would like to give translators hints about a translatable string, you can add a comment prefixed with the ``Translators`` keyword on the line preceding the string, e.g.::"
msgstr ""

#: ../../releases/1.3-beta-1.txt:53
# 66f3583b1e084a22b5799529ecbdc14b
msgid "The comment will appear in the resulting .po file and should also be displayed by most translation tools."
msgstr ""

#: ../../releases/1.3-beta-1.txt:56
# 03122a04e6ea41fc88329ea7fd2bb43b
msgid "For more information, see :ref:`translator-comments`."
msgstr ""

#: ../../releases/1.3-beta-1.txt:61
# 195956bf3d524367ab18a05dabb4b2d3
msgid "If you provide a custom auth backend with ``supports_inactive_user`` set to ``True``, an inactive user model will check the backend for permissions. This is useful for further centralizing the permission handling. See the :doc:`authentication docs </topics/auth/index>` for more details."
msgstr ""

#: ../../releases/1.3-beta-1.txt:67
# 5b5ec8f3d95d4d34b85f628eb366e9c5
msgid "Backwards-incompatible changes in 1.3 alpha 2"
msgstr ""

#: ../../releases/1.3-beta-1.txt:70
# 3638af4e98924886bbe872e310cbd819
msgid "Change to admin lookup filters"
msgstr ""

#: ../../releases/1.3-beta-1.txt:72
# 7c4b887bf8b84b3685fed2b845af7aa0
msgid "The Django admin has long had an undocumented \"feature\" allowing savvy users to manipulate the query string of changelist pages to filter the list of objects displayed. However, this also creates a security issue, as a staff user with sufficient knowledge of model structure could use this \"feature\" to gain access to information he or she would not normally have."
msgstr ""

#: ../../releases/1.3-beta-1.txt:79
# 0cf18bea30034808ba2e72496c577197
msgid "As a result, changelist filtering now explicitly validates all lookup arguments in the query string, and permits only fields which are directly on the model, or relations explicitly permitted by the ``ModelAdmin`` definition. If you were relying on this undocumented feature, you will need to update your ``ModelAdmin`` definitions to whitelist the relations you choose to expose for filtering."
msgstr ""

#: ../../releases/1.3-beta-1.txt:87
# e2cbdf59e9f74354804531be95edf2b5
msgid "Introduction of STATIC_URL and STATIC_ROOT settings"
msgstr ""

#: ../../releases/1.3-beta-1.txt:89
# 1b035bed92ef45d2aa9aaa1a25a4f777
msgid "The newly introduced :mod:`~django.contrib.staticfiles` app -- which extends Django's abilities to handle static files for apps and projects -- required the additon of two new settings to refer to those files in templates and code, especially in contrast to the :setting:`MEDIA_URL` and :setting:`MEDIA_ROOT` settings that refer to user-uploaded files."
msgstr ""

#: ../../releases/1.3-beta-1.txt:95
# 0822227d6fe94b95841230e04956f280
msgid "Prior to 1.3 alpha 2 these settings were called ``STATICFILES_URL`` and ``STATICFILES_ROOT`` to follow the naming scheme for app-centric settings. Based on feedback from the community it became apparent that those settings created confusion, especially given the fact that handling static files is also desired outside the use of the optional :mod:`~django.contrib.staticfiles` app."
msgstr ""

#: ../../releases/1.3-beta-1.txt:101
# b05bf536202d41c1b40964ca58febddb
msgid "As a result, we took the following steps to rectify the issue:"
msgstr ""

#: ../../releases/1.3-beta-1.txt:103
# ab1693504b78405b9b6173f350e59c15
msgid "Two new global settings were added that will be used by, **but are not limited to**, the :doc:`staticfiles</ref/contrib/staticfiles>` app:"
msgstr ""

#: ../../releases/1.3-beta-1.txt:106
# dba3795e42da4a08a493cc8ba2427f2e
msgid ":setting:`STATIC_ROOT` (formally ``STATICFILES_ROOT``)"
msgstr ""

#: ../../releases/1.3-beta-1.txt:108
# f8f63043e6f44be7b3e1d7c25c6fc042
msgid ":setting:`STATIC_URL` (formally ``STATICFILES_URL``)"
msgstr ""

#: ../../releases/1.3-beta-1.txt:110
# e8c27daea45f46d7af423445777899aa
msgid "The ``django.contrib.staticfiles.templatetags.staticfiles.get_staticfiles_prefix`` template tag was moved to Django's core (``django.templatetags.static``) and renamed to :ttag:`get_static_prefix`."
msgstr ""

#: ../../releases/1.3-beta-1.txt:114
# 3eea2eb7183043a0a181a4abfd94c328
msgid "The ``django.contrib.staticfiles.context_processors.staticfiles`` context processor was moved to Django's core (``django.core.context_processors.static``) and renamed to :func:`~django.core.context_processors.static`."
msgstr ""

#: ../../releases/1.3-beta-1.txt:119
# 579a0f3d749844df8361f09970547240
msgid ":ref:`form-media-paths` now uses :setting:`STATIC_URL` as the prefix **if the value is not None**, and falls back to the previously used :setting:`MEDIA_URL` setting otherwise."
msgstr ""

#: ../../releases/1.3-beta-1.txt:141
# d6687664fdaa4cc08009edd20a977bb2
msgid "Changes to ``USStateField``"
msgstr ""

#: ../../releases/1.3-beta-1.txt:143
# 14562f4ccc7045ce84c4f3fbf0067998
msgid "The ``django.contrib.localflavor`` application contains collections of code relevant to specific countries or cultures. One such is ``USStateField``, which provides a field for storing the two-letter postal abbreviation of a U.S. state. This field has consistently caused problems, however, because it is often used to store the state portion of a U.S postal address, but not all \"states\" recognized by the U.S Postal Service are actually states of the U.S. or even U.S. territory. Several compromises over the list of choices resulted in some users feeling the field supported too many locations, while others felt it supported too few."
msgstr ""

#: ../../releases/1.3-beta-1.txt:154
# 6495a4e5a0ce4a46af39d6dbc162b307
msgid "In Django 1.3 we're taking a new approach to this problem, implemented as a pair of changes:"
msgstr ""

#: ../../releases/1.3-beta-1.txt:157
# 63aeaee1021c46e7a504d7353e1bb24e
msgid "The choice list for ``USStateField`` has changed. Previously, it consisted of the 50 U.S. states, the District of Columbia and U.S. overseas territories. As of Django 1.3 it includes all previous choices, plus the U.S. Armed Forces postal codes."
msgstr ""

#: ../../releases/1.3-beta-1.txt:162
# 4f04a4b4c0da43fb8140c3071541befd
msgid "A new model field, ``django.contrib.localflavor.us.models.USPostalCodeField``, has been added which draws its choices from a list of all postal abbreviations recognized by the U.S Postal Service. This includes all abbreviations recognized by ``USStateField``, plus three independent nations -- the Federated States of Micronesia, the Republic of the Marshall Islands and the Republic of Palau -- which are serviced under treaty by the U.S. postal system. A new form widget, ``django.contrib.localflavor.us.forms.USPSSelect``, is also available and provides the same set of choices."
msgstr ""

#: ../../releases/1.3-beta-1.txt:173
# 810efe3c595e47b9b1d1aee3c42656dd
msgid "Additionally, several finer-grained choice tuples are provided which allow mixing and matching of subsets of the U.S. states and territories, and other locations serviced by the U.S. postal system. Consult the ``django.contrib.localflavor`` documentation for more details."
msgstr ""

#: ../../releases/1.3-beta-1.txt:179
# 32722121acf04e3192c841a9b86e18db
msgid "The change to ``USStateField`` is technically backwards-incompatible for users who expect this field to exclude Armed Forces locations. If you need to support U.S. mailing addresses without Armed Forces locations, see the list of choice tuples available in the localflavor documentation."
msgstr ""

#: ../../releases/1.3-beta-1.txt:192
# b3585181602d4c219fb270475b460935
msgid "Week of **January 24, 2011**: First Django 1.3 release candidate. String freeze for translations."
msgstr ""

#: ../../releases/1.3-beta-1.txt:195
# a744a6ad26b54ec7a6646e52c38d2f18
msgid "Week of **January 31, 2011**: Django 1.3 final release."
msgstr ""

#: ../../releases/1.3-beta-1.txt:197
# 9600d1cc9ce1427285ef0702890c3d36
msgid "If necessary, additional beta or release-candidate packages will be issued prior to the final 1.3 release. Django 1.3 will be released approximately one week after the final release candidate."
msgstr ""

#: ../../releases/1.3-beta-1.txt:205
# cff7d2f3733c412f968033cf57d47a91
msgid "In order to provide a high-quality 1.3 release, we need your help. Although this beta release is, again, *not* intended for production use, you can help the Django team by trying out the beta codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.3.1.txt:3
# e92da0b62e7f469ea049a0d27e575b5c
msgid "Django 1.3.1 release notes"
msgstr ""

#: ../../releases/1.3.1.txt:7
# f06eab39ae2b4052ac7b1b10217d63fa
msgid "Welcome to Django 1.3.1!"
msgstr ""

#: ../../releases/1.3.1.txt:9
# 8382be882339498bb16ea9af302b2949
msgid "This is the first security release in the Django 1.3 series, fixing several security issues in Django 1.3.  Django 1.3.1 is a recommended upgrade for all users of Django 1.3."
msgstr ""

#: ../../releases/1.3.2.txt:3
# 206db63b42df41be9db2261d5950f39e
msgid "Django 1.3.2 release notes"
msgstr ""

#: ../../releases/1.3.2.txt:5
#: ../../releases/1.4.1.txt:5
# 17a724955f6641688c5ca8c0569677bb
# 9dbb901fae7c423e85fc5b503a823a48
msgid "*July 30, 2012*"
msgstr ""

#: ../../releases/1.3.2.txt:7
# 4ffab8162635403cbc7c11f3be891882
msgid "This is the second security release in the Django 1.3 series, fixing several security issues in Django 1.3. Django 1.3.2 is a recommended upgrade for all users of Django 1.3."
msgstr ""

#: ../../releases/1.4.txt:3
# d9615b2771c9427c825e53acebbe9c5d
msgid "Django 1.4 release notes"
msgstr ""

#: ../../releases/1.4.txt:5
# c8c0e0ad4ec845bfaa8e667066bc1921
msgid "*March 23, 2012*"
msgstr ""

#: ../../releases/1.4.txt:7
# b416ab083da84734ba4b9b30a3ea5744
msgid "Welcome to Django 1.4!"
msgstr ""

#: ../../releases/1.4.txt:9
# 17beb6c27bfc4227a06430d3b1ac4eb3
msgid "These release notes cover the `new features`_, as well as some `backwards incompatible changes`_ you'll want to be aware of when upgrading from Django 1.3 or older versions. We've also dropped some features, which are detailed in :doc:`our deprecation plan </internals/deprecation>`, and we've `begun the deprecation process for some features`_."
msgstr ""

#: ../../releases/1.4.txt:23
# 14ffdeda91814741b7819a4cf4fc5f33
msgid "The biggest new feature in Django 1.4 is `support for time zones`_ when handling date/times. When enabled, this Django will store date/times in UTC, use timezone-aware objects internally, and translate them to users' local timezones for display."
msgstr ""

#: ../../releases/1.4.txt:28
# 4b02f9ca8a6d45648bfa657c4e4fd09e
msgid "If you're upgrading an existing project to Django 1.4, switching to the time- zone aware mode may take some care: the new mode disallows some rather sloppy behavior that used to be accepted. We encourage anyone who's upgrading to check out the :ref:`timezone migration guide <time-zones-migration-guide>` and the :ref:`timezone FAQ <time-zones-faq>` for useful pointers."
msgstr ""

#: ../../releases/1.4.txt:34
# b23f5705588341e999d310f18b68ae48
msgid "Other notable new features in Django 1.4 include:"
msgstr ""

#: ../../releases/1.4.txt:36
# 46631cba6f344413a54ac1c2ff8fad4d
msgid "A number of ORM improvements, including `SELECT FOR UPDATE support`_, the ability to `bulk insert <#model-objects-bulk-create-in-the-orm>`_ large datasets for improved performance, and `QuerySet.prefetch_related`_, a method to batch-load related objects in areas where :meth:`~django.db.models.query.QuerySet.select_related` doesn't work."
msgstr ""

#: ../../releases/1.4.txt:43
# a19ba39849f14f71b3ba39fea3842778
msgid "Some nice security additions, including `improved password hashing`_ (featuring PBKDF2_ and bcrypt_ support), new `tools for cryptographic signing`_, several `CSRF improvements`_, and `simple clickjacking protection`_."
msgstr ""

#: ../../releases/1.4.txt:48
# 3793efefa4da4b0987c88d58074158a2
msgid "An `updated default project layout and manage.py`_ that removes the \"magic\" from prior versions. And for those who don't like the new layout, you can use `custom project and app templates`_ instead!"
msgstr ""

#: ../../releases/1.4.txt:52
# dc00e619c4584877b9da8e87a27c7e0e
msgid "`Support for in-browser testing frameworks`_ (like Selenium_)."
msgstr ""

#: ../../releases/1.4.txt:54
# 4330bdc69b6740eba09c0332cf890fe6
msgid "... and a whole lot more; `see below <#what-s-new-in-django-1-4>`_!"
msgstr ""

#: ../../releases/1.4.txt:56
# 5e1f0bc25efe42cc89963fc8e6883acb
msgid "Wherever possible we try to introduce new features in a backwards-compatible manner per :doc:`our API stability policy </misc/api-stability>` policy. However, as with previous releases, Django 1.4 ships with some minor `backwards incompatible changes`_; people upgrading from previous versions of Django should read that list carefully."
msgstr ""

#: ../../releases/1.4.txt:65
# cf54eb218ab04641969532d289ae8ac0
msgid "Django 1.4 has dropped support for Python 2.4. Python 2.5 is now the minimum required Python version. Django is tested and supported on Python 2.5, 2.6 and 2.7."
msgstr ""

#: ../../releases/1.4.txt:69
# 2b88e049f86c4f48921f1840a6e0ddfe
msgid "This change should affect only a small number of Django users, as most operating-system vendors today are shipping Python 2.5 or newer as their default version. If you're still using Python 2.4, however, you'll need to stick to Django 1.3 until you can upgrade. Per :doc:`our support policy </internals/release-process>`, Django 1.3 will continue to receive security support until the release of Django 1.5."
msgstr ""

#: ../../releases/1.4.txt:76
# b20827b5d2504630b85596c500b4d350
msgid "Django does not support Python 3.x at this time. At some point before the release of Django 1.4, we plan to publish a document outlining our full timeline for deprecating Python 2.x and moving to Python 3.x."
msgstr ""

#: ../../releases/1.4.txt:81
#: ../../releases/1.4-alpha-1.txt:48
#: ../../releases/1.4-beta-1.txt:64
# 8c85b273e5ce49979196e5d2978a341c
# 18e7d58b6bf2417a8d9097697ba218c0
# 558567fda62c4c85b300236611a9abfa
msgid "What's new in Django 1.4"
msgstr ""

#: ../../releases/1.4.txt:84
#: ../../releases/1.4-alpha-1.txt:470
#: ../../releases/1.4-beta-1.txt:508
# 9988776b7d6f49c482f792a54ce888b6
# e2de169039794eb28a572203b3c9cbc7
# 7204fcaedd784ef583220bab1970bed6
msgid "Support for time zones"
msgstr ""

#: ../../releases/1.4.txt:86
# aafab4746b854179af20145a7f27c2e3
msgid "In previous versions, Django used \"naive\" date/times (that is, date/times without an associated time zone), leaving it up to each developer to interpret what a given date/time \"really means\". This can cause all sorts of subtle timezone-related bugs."
msgstr ""

#: ../../releases/1.4.txt:91
# 6af08c105878414fae198e6eb5970d63
msgid "In Django 1.4, you can now switch Django into a more correct, time-zone aware mode. In this mode, Django stores date and  time information in UTC in the database, uses time-zone-aware datetime objects internally and translates them to the end user's time zone in templates and forms. Reasons for using this feature include:"
msgstr ""

#: ../../releases/1.4.txt:97
#: ../../releases/1.4-alpha-1.txt:479
#: ../../releases/1.4-beta-1.txt:517
# 1c35a6e1ff4a4a8493ece94eeb480200
# 4103ce1c28bc455bbf37f6184496fa7b
# 9f0dd846a7b64f8daeae760bcd8edda1
msgid "Customizing date and time display for users around the world."
msgstr ""

#: ../../releases/1.4.txt:99
#: ../../releases/1.4-alpha-1.txt:480
#: ../../releases/1.4-beta-1.txt:518
# 3a7f6817556a46d78878e024e106de44
# a66cc905edc041a4bcd3f1571a64cf9b
# 27ce61dcea92431a974e0dacd983174b
msgid "Storing datetimes in UTC for database portability and interoperability. (This argument doesn't apply to PostgreSQL, because it already stores timestamps with time zone information in Django 1.3.)"
msgstr ""

#: ../../releases/1.4.txt:103
#: ../../releases/1.4-alpha-1.txt:483
#: ../../releases/1.4-beta-1.txt:521
# 302839fdf8714872ac4e3f4c8138b690
# 1d1fc3cedcbf403b9182ccdf783da278
# b89c73921fc24b608262ff06d164d9ae
msgid "Avoiding data corruption problems around DST transitions."
msgstr ""

#: ../../releases/1.4.txt:105
# 3560acb3f97c4992872a261fd2a765fb
msgid "Time zone support is enabled by default in new projects created with :djadmin:`startproject`. If you want to use this feature in an existing project, read the :ref:`migration guide <time-zones-migration-guide>`. If you encounter problems, there's a helpful :ref:`FAQ <time-zones-faq>`."
msgstr ""

#: ../../releases/1.4.txt:111
#: ../../releases/1.4-alpha-1.txt:51
#: ../../releases/1.4-beta-1.txt:67
# 990e3aecd5024172b93874e73ba95156
# 5d22e15cd945432e964bb2417959036f
# f9bc034c5c1b49f38303eca2c92ceb5b
msgid "Support for in-browser testing frameworks"
msgstr ""

#: ../../releases/1.4.txt:113
#: ../../releases/1.4-alpha-1.txt:53
#: ../../releases/1.4-beta-1.txt:69
# 24384f922fef445ab7e6f3a37fa52673
# 5427a5dc29f74db79bd461f91e9518cd
# 04e702cca9364aa0834bb5d1dc0b5b0e
msgid "Django 1.4 supports integration with in-browser testing frameworks like Selenium_. The new :class:`django.test.LiveServerTestCase` base class lets you test the interactions between your site's front and back ends more comprehensively. See the :class:`documentation<django.test.LiveServerTestCase>` for more details and concrete examples."
msgstr ""

#: ../../releases/1.4.txt:123
#: ../../releases/1.4-alpha-1.txt:366
#: ../../releases/1.4-beta-1.txt:404
# 6ad35e916a104f2da9c847d1a68cc772
# 76eb58c079c14e9b9dfb06cd5b8d6657
# f88533cf69fa4c1fbeb427496cd3cd06
msgid "Updated default project layout and ``manage.py``"
msgstr ""

#: ../../releases/1.4.txt:125
#: ../../releases/1.4-alpha-1.txt:368
#: ../../releases/1.4-beta-1.txt:406
# 2cf6748c43ed4d6295b6422b344b6d92
# 05c7beb9340640c2943bbf81968746ab
# 4d22f6f3547946b9ad90a2f7e28fe9fb
msgid "Django 1.4 ships with an updated default project layout and ``manage.py`` file for the :djadmin:`startproject` management command. These fix some issues with the previous ``manage.py`` handling of Python import paths that caused double imports, trouble moving from development to deployment, and other difficult-to-debug path issues."
msgstr ""

#: ../../releases/1.4.txt:131
# bec2c4a89c2241aba588f6a3173fd8a3
msgid "The previous ``manage.py`` called functions that are now deprecated, and thus projects upgrading to Django 1.4 should update their ``manage.py``. (The old-style ``manage.py`` will continue to work as before until Django 1.6. In 1.5 it will raise ``DeprecationWarning``)."
msgstr ""

#: ../../releases/1.4.txt:136
#: ../../releases/1.4-alpha-1.txt:379
#: ../../releases/1.4-beta-1.txt:417
# 4efbb6fe70d74a8a96f21bb51e461603
# ab31dddb02ef47e4b26846529ec24d62
# 85a79f9e1a3e403fb17a452303742a81
msgid "The new recommended ``manage.py`` file should look like this::"
msgstr ""

#: ../../releases/1.4.txt:148
#: ../../releases/1.4-alpha-1.txt:391
#: ../../releases/1.4-beta-1.txt:429
# af6519071b734aa08e7edf471ff1b35b
# 03fde9b15d4a47c3a061dd80141911ff
# aef908e0c1ef40569efe419be9999c74
msgid "``{{ project_name }}`` should be replaced with the Python package name of the actual project."
msgstr ""

#: ../../releases/1.4.txt:151
# ba725d97dc634a6a8e68a3e1d0041288
msgid "If settings, URLconfs and apps within the project are imported or referenced using the project name prefix (e.g. ``myproject.settings``, ``ROOT_URLCONF = \"myproject.urls\"``, etc), the new ``manage.py`` will need to be moved one directory up, so it is outside the project package rather than adjacent to ``settings.py`` and ``urls.py``."
msgstr ""

#: ../../releases/1.4.txt:157
#: ../../releases/1.4-alpha-1.txt:400
#: ../../releases/1.4-beta-1.txt:438
# 667a2d586d7c40e483e9975515215376
# 87c7ac57a66f49919a914ce2425e1c95
# 6e8970abdc3f48239a8f3327b529606b
msgid "For instance, with the following layout::"
msgstr ""

#: ../../releases/1.4.txt:168
#: ../../releases/1.4-alpha-1.txt:411
#: ../../releases/1.4-beta-1.txt:449
# d278300468a2473b89f96f5d3035c6e8
# 2484264190c3463bb57959d6b0ea6b5b
# 576f09f5c83748b7ae2d924990534618
msgid "You could import ``mysite.settings``, ``mysite.urls``, and ``mysite.myapp``, but not ``settings``, ``urls``, or ``myapp`` as top-level modules."
msgstr ""

#: ../../releases/1.4.txt:171
#: ../../releases/1.4-alpha-1.txt:414
#: ../../releases/1.4-beta-1.txt:452
# 16291bc679f74cf5bdb271fc26fee5d3
# 1a0d63d96fc3461bb1b8fa06fb4fad41
# 7acd12a56ed649969a10259a1efd6ac6
msgid "Anything imported as a top-level module can be placed adjacent to the new ``manage.py``. For instance, to decouple \"myapp\" from the project module and import it as just ``myapp``, place it outside the ``mysite/`` directory::"
msgstr ""

#: ../../releases/1.4.txt:184
#: ../../releases/1.4-alpha-1.txt:427
#: ../../releases/1.4-beta-1.txt:465
# e4ada1b980214e7b839c178a1d56f5b9
# f3fe52f8c5114ca1b6fcdb5a7e7d2690
# 48f2cec3427f4670975bb421288da54d
msgid "If the same code is imported inconsistently (some places with the project prefix, some places without it), the imports will need to be cleaned up when switching to the new ``manage.py``."
msgstr ""

#: ../../releases/1.4.txt:189
#: ../../releases/1.4-alpha-1.txt:449
#: ../../releases/1.4-beta-1.txt:487
# ff34a57c4e394cd9b2b3cf35c2be9d80
# 05e637063b644ca9aa94ca0e3380c11e
# 87a2f6fde8d44c999bf22a5bb6f7bccf
msgid "Custom project and app templates"
msgstr ""

#: ../../releases/1.4.txt:191
# 190758bd7f1c496686457b2b92720cfb
msgid "The :djadmin:`startapp` and :djadmin:`startproject` management commands now have a ``--template`` option for specifying a path or URL to a custom app or project template."
msgstr ""

#: ../../releases/1.4.txt:195
# e076fe793fd54f7ba7f5caae4340412e
msgid "For example, Django will use the ``/path/to/my_project_template`` directory when you run the following command::"
msgstr ""

#: ../../releases/1.4.txt:200
#: ../../releases/1.4-alpha-1.txt:460
#: ../../releases/1.4-beta-1.txt:498
# f37f5042a7254b1bbd8e09f8ab7f9d86
# 458839a2c836416d9f8127791c7b976b
# cf19170b413e40568d6491d721d8e78a
msgid "You can also now provide a destination directory as the second argument to both :djadmin:`startapp` and :djadmin:`startproject`::"
msgstr ""

#: ../../releases/1.4.txt:206
#: ../../releases/1.4-alpha-1.txt:466
#: ../../releases/1.4-beta-1.txt:504
# 1993795556df45baaa77fb8112641ca0
# 04c64244821049cd99b9a1df004a1e56
# 8ae848009a3f4e69aaafa7cbc238327f
msgid "For more information, see the :djadmin:`startapp` and :djadmin:`startproject` documentation."
msgstr ""

#: ../../releases/1.4.txt:210
#: ../../releases/1.4-alpha-1.txt:432
#: ../../releases/1.4-beta-1.txt:470
# a2458c3ae2f24b5f890ef8ec2ee3f1d1
# 476dda7a3d3a44a5ba558902ef872668
# e17a9fa5fa204c8e96b2e1064ebf4f8e
msgid "Improved WSGI support"
msgstr ""

#: ../../releases/1.4.txt:212
#: ../../releases/1.4-alpha-1.txt:434
#: ../../releases/1.4-beta-1.txt:472
# 56c619ea757c4a69aeea0a59f987042e
# 358202e1c21c4293ad5d0ffee6256d47
# 6de6ef59815f44448f3b5b2291748fdb
msgid "The :djadmin:`startproject` management command now adds a :file:`wsgi.py` module to the initial project layout, containing a simple WSGI application that can be used for :doc:`deploying with WSGI app servers</howto/deployment/wsgi/index>`."
msgstr ""

#: ../../releases/1.4.txt:217
# dc3026e2dfc041a5ab7e3764948c4322
msgid "The :djadmin:`built-in development server<runserver>` now supports using an externally-defined WSGI callable, which makes it possible to run runserver with the same WSGI configuration that is used for deployment. The new :setting:`WSGI_APPLICATION` setting lets you configure which WSGI callable :djadmin:`runserver` uses."
msgstr ""

#: ../../releases/1.4.txt:223
#: ../../releases/1.4-alpha-1.txt:445
#: ../../releases/1.4-beta-1.txt:483
# c848b12fa8644327b5eb3545bfb65cb3
# 09032a565f0a4ee691d376536b9b0daa
# f21cdc26040a4ef89abd0c40190fdbff
msgid "(The :djadmin:`runfcgi` management command also internally wraps the WSGI callable configured via :setting:`WSGI_APPLICATION`.)"
msgstr ""

#: ../../releases/1.4.txt:227
#: ../../releases/1.4-alpha-1.txt:63
#: ../../releases/1.4-beta-1.txt:79
# a66172f599da4ef4b090a119f5fc7f7b
# 0902c63e48974fb4ba2a5e92b4790388
# 7c1de0b1d13e4569ab50909f04e298d0
msgid "``SELECT FOR UPDATE`` support"
msgstr ""

#: ../../releases/1.4.txt:229
# 3bc48c86b97b42e2bfac7ca28a20eacb
msgid "Django 1.4 includes a :meth:`QuerySet.select_for_update() <django.db.models.query.QuerySet.select_for_update>` method, which generates a ``SELECT ... FOR UPDATE`` SQL query. This will lock rows until the end of the transaction, meaning other transactions cannot modify or delete rows matched by a ``FOR UPDATE`` query."
msgstr ""

#: ../../releases/1.4.txt:235
#: ../../releases/1.4-alpha-1.txt:71
#: ../../releases/1.4-beta-1.txt:87
# 68a890e3818845b697213544acad2ec1
# 1701c03376834900bbbc0d507e8d8b10
# 1d6ca9940fe447be9d50e22267ed1778
msgid "For more details, see the documentation for :meth:`~django.db.models.query.QuerySet.select_for_update`."
msgstr ""

#: ../../releases/1.4.txt:239
#: ../../releases/1.4-alpha-1.txt:75
#: ../../releases/1.4-beta-1.txt:91
# 9b8dd5f2015049508d064a4e0358011a
# 66e36d8e8ba24a58b3e098f70e997330
# 5264665ea39d49b183905365baf0a847
msgid "``Model.objects.bulk_create`` in the ORM"
msgstr ""

#: ../../releases/1.4.txt:241
# 1d464d3acd9549b4a1f8e8f8124b17bc
msgid "This method lets you create multiple objects more efficiently. It can result in significant performance increases if you have many objects."
msgstr ""

#: ../../releases/1.4.txt:244
# 52edded1c9b04bb09c2983a1ded6757e
msgid "Django makes use of this internally, meaning some operations (such as database setup for test suites) have seen a performance benefit as a result."
msgstr ""

#: ../../releases/1.4.txt:247
#: ../../releases/1.4-alpha-1.txt:82
#: ../../releases/1.4-beta-1.txt:98
# a72698b20a6a4a25944ab375b58db552
# 1a44854cfbb7421498e8c7e1ce209676
# 90a0b4b23fed446cafeb54e56ba3ee3f
msgid "See the :meth:`~django.db.models.query.QuerySet.bulk_create` docs for more information."
msgstr ""

#: ../../releases/1.4.txt:251
#: ../../releases/1.4-alpha-1.txt:86
#: ../../releases/1.4-beta-1.txt:102
# a8a1e52a4939442ba36988d8b7745881
# fd0cbce5bf9449188646478507730ead
# 05bfc078076d451294b0a54b646a9fdd
msgid "``QuerySet.prefetch_related``"
msgstr ""

#: ../../releases/1.4.txt:253
# 827de86ec2524942ad727cc3790aa46f
msgid "Similar to :meth:`~django.db.models.query.QuerySet.select_related` but with a different strategy and broader scope, :meth:`~django.db.models.query.QuerySet.prefetch_related` has been added to :class:`~django.db.models.query.QuerySet`. This method returns a new ``QuerySet`` that will prefetch each of the specified related lookups in a single batch as soon as the query begins to be evaluated. Unlike ``select_related``, it does the joins in Python, not in the database, and supports many-to-many relationships, :class:`~django.contrib.contenttypes.generic.GenericForeignKey` and more. This allows you to fix a very common performance problem in which your code ends up doing O(n) database queries (or worse) if objects on your primary ``QuerySet`` each have many related objects that you also need to fetch."
msgstr ""

#: ../../releases/1.4.txt:267
#: ../../releases/1.4-alpha-1.txt:102
#: ../../releases/1.4-beta-1.txt:118
# 0af677d5a56b4d049d5b8aeb54bc7ecb
# ee8429b8e6ea4411828a003db89904ad
# 78e45adc1f854df697652ce09ce46abb
msgid "Improved password hashing"
msgstr ""

#: ../../releases/1.4.txt:269
#: ../../releases/1.4-alpha-1.txt:104
#: ../../releases/1.4-beta-1.txt:120
# a92aeac8d0d6481482e095b6623da35c
# df2c6311c06740149d4ae6ab74f2e431
# d7f1c1ec92634a71889dc032aa5c1c12
msgid "Django's auth system (``django.contrib.auth``) stores passwords using a one-way algorithm. Django 1.3 uses the SHA1_ algorithm, but increasing processor speeds and theoretical attacks have revealed that SHA1 isn't as secure as we'd like. Thus, Django 1.4 introduces a new password storage system: by default Django now uses the PBKDF2_ algorithm (as recommended by NIST_). You can also easily choose a different algorithm (including the popular bcrypt_ algorithm). For more details, see :ref:`auth_password_storage`."
msgstr ""

#: ../../releases/1.4.txt:283
# 0d4a4f0ea7594e01b75c426db1f56903
msgid "HTML5 doctype"
msgstr ""

#: ../../releases/1.4.txt:285
#: ../../releases/1.4-alpha-1.txt:121
#: ../../releases/1.4-beta-1.txt:152
# 28156926088342bf8a5a0d93992ccb0e
# fb4c5ebe28124467af0b35da8d829862
# 7bda467f30a74372910251354e76edd5
msgid "We've switched the admin and other bundled templates to use the HTML5 doctype. While Django will be careful to maintain compatibility with older browsers, this change means that you can use any HTML5 features you need in admin pages without having to lose HTML validity or override the provided templates to change the doctype."
msgstr ""

#: ../../releases/1.4.txt:292
#: ../../releases/1.4-alpha-1.txt:128
#: ../../releases/1.4-beta-1.txt:159
# 9cb7430204f0450b9cb9fae3457a8c79
# c4976d44d9434e75b77ec506ed0de8a0
# bf20178bbfe044c6a531ca2556795875
msgid "List filters in admin interface"
msgstr ""

#: ../../releases/1.4.txt:294
# 97a3a13530484a719b5e7d79ec2edd34
msgid "Prior to Django 1.4, the :mod:`~django.contrib.admin` app let you specify change list filters by specifying a field lookup, but it didn't allow you to create custom filters. This has been rectified with a simple API (previously used internally and known as \"FilterSpec\"). For more details, see the documentation for :attr:`~django.contrib.admin.ModelAdmin.list_filter`."
msgstr ""

#: ../../releases/1.4.txt:301
#: ../../releases/1.4-alpha-1.txt:137
#: ../../releases/1.4-beta-1.txt:168
# e0c47b4e65d8485e82b8b27bc4e2a02e
# dff71dc93c8343289c38ddcb5e7e931a
# 4ec9b1a205f84c549ab93546493d1f86
msgid "Multiple sort in admin interface"
msgstr ""

#: ../../releases/1.4.txt:303
# 8616c06ab96b41e2b28ef974f1f93721
msgid "The admin change list now supports sorting on multiple columns. It respects all elements of the :attr:`~django.contrib.admin.ModelAdmin.ordering` attribute, and sorting on multiple columns by clicking on headers is designed to mimic the behavior of desktop GUIs. We also added a :meth:`~django.contrib.admin.ModelAdmin.get_ordering` method for specifying the ordering dynamically (i.e., depending on the request)."
msgstr ""

#: ../../releases/1.4.txt:311
#: ../../releases/1.4-alpha-1.txt:147
#: ../../releases/1.4-beta-1.txt:178
# 611bf37ec7674d738d6f014366e0c66a
# 9cc6757e28de475dae9330e20e16938e
# 85314194489345e4af8345bc1dd1c54e
msgid "New ``ModelAdmin`` methods"
msgstr ""

#: ../../releases/1.4.txt:313
# 411e00d6d88f4ebab8c31ec52960afc9
msgid "We added a :meth:`~django.contrib.admin.ModelAdmin.save_related` method to :mod:`~django.contrib.admin.ModelAdmin` to ease customization of how related objects are saved in the admin."
msgstr ""

#: ../../releases/1.4.txt:317
# b3ac1d0233894f108bc2cc71e3e951ec
msgid "Two other new :class:`~django.contrib.admin.ModelAdmin` methods, :meth:`~django.contrib.admin.ModelAdmin.get_list_display` and :meth:`~django.contrib.admin.ModelAdmin.get_list_display_links` enable dynamic customization of fields and links displayed on the admin change list."
msgstr ""

#: ../../releases/1.4.txt:324
#: ../../releases/1.4-alpha-1.txt:160
#: ../../releases/1.4-beta-1.txt:191
# 3aaa0524a5dc47ac9fd1123df674f113
# 88893f5c23734067a0618acd3fd8e086
# 6c86b70abfe34ac0b45871681b387351
msgid "Admin inlines respect user permissions"
msgstr ""

#: ../../releases/1.4.txt:326
# 8c4e2460aabb4299a922758284eb341e
msgid "Admin inlines now only allow those actions for which the user has permission. For ``ManyToMany`` relationships with an auto-created intermediate model (which does not have its own permissions), the change permission for the related model determines if the user has the permission to add, change or delete relationships."
msgstr ""

#: ../../releases/1.4.txt:333
#: ../../releases/1.4-alpha-1.txt:169
#: ../../releases/1.4-beta-1.txt:200
# f1c16d1a0e5f4840bfb25ab48137cb8f
# ccf573cba9334405b9a385d6845f9695
# 97102cd76f4744db90258c8f09a2010b
msgid "Tools for cryptographic signing"
msgstr ""

#: ../../releases/1.4.txt:335
#: ../../releases/1.4-alpha-1.txt:171
#: ../../releases/1.4-beta-1.txt:202
# 91373f097e0546adaba01f8ac4866cf2
# f7561a681d1a4be0bb391eef7a38bbc6
# aac65b4b7eb54e108a711f3063eaa972
msgid "Django 1.4 adds both a low-level API for signing values and a high-level API for setting and reading signed cookies, one of the most common uses of signing in Web applications."
msgstr ""

#: ../../releases/1.4.txt:339
#: ../../releases/1.4-alpha-1.txt:175
#: ../../releases/1.4-beta-1.txt:206
# 95b689e784a0446cbfbd8a8ec41a49a5
# b76443e8d27742d2bad5ff03b23625d6
# fdb68009dd1044229acf5caea2db62cd
msgid "See the :doc:`cryptographic signing </topics/signing>` docs for more information."
msgstr ""

#: ../../releases/1.4.txt:343
#: ../../releases/1.4-alpha-1.txt:179
#: ../../releases/1.4-beta-1.txt:210
# 36839ced1ee74f918a1e16d5c1b2750f
# b32dbabb9e284c94b26392d86a1c3af9
# c6e74c31263b4c408af766f068a7fcbf
msgid "Cookie-based session backend"
msgstr ""

#: ../../releases/1.4.txt:345
# 851b7ee4af7140a79ccf613af9d316b2
msgid "Django 1.4 introduces a cookie-based session backend that uses the tools for :doc:`cryptographic signing </topics/signing>` to store the session data in the client's browser."
msgstr ""

#: ../../releases/1.4.txt:351
# 2e95dac963e84400988704edecfd0e78
msgid "Session data is signed and validated by the server, but it's not encrypted. This means a user can view any data stored in the session but cannot change it. Please read the documentation for further clarification before using this backend."
msgstr ""

#: ../../releases/1.4.txt:356
#: ../../releases/1.4-alpha-1.txt:185
#: ../../releases/1.4-beta-1.txt:223
# 17169e7a12f64d9491d6865f45526c3e
# 1acd7d6a7aca4e6287b148e3ff997ea4
# d8e29b5b867a49c497baa9de8138330d
msgid "See the :ref:`cookie-based session backend <cookie-session-backend>` docs for more information."
msgstr ""

#: ../../releases/1.4.txt:360
#: ../../releases/1.4-alpha-1.txt:189
#: ../../releases/1.4-beta-1.txt:227
# 530fc2394c71464fb46be732fdb27c30
# cd0c2e6e1bc64cfd8e76faf154a9639b
# b914ff73b1484c389bf7abdf038375b8
msgid "New form wizard"
msgstr ""

#: ../../releases/1.4.txt:362
# 3c7fbe850dba497f9afa77e105329372
msgid "The previous ``FormWizard`` from :mod:`django.contrib.formtools` has been replaced with a new implementation based on the class-based views introduced in Django 1.3. It features a pluggable storage API and doesn't require the wizard to pass around hidden fields for every previous step."
msgstr ""

#: ../../releases/1.4.txt:367
#: ../../releases/1.4-alpha-1.txt:196
#: ../../releases/1.4-beta-1.txt:234
# 1fa1e9f5155f4379a66b03fd3a6fcaec
# 509a32560f99431aa59cf51af9354803
# 6656f5db8c8649048efd348c2d84fa6f
msgid "Django 1.4 ships with a session-based storage backend and a cookie-based storage backend. The latter uses the tools for :doc:`cryptographic signing </topics/signing>` also introduced in Django 1.4 to store the wizard's state in the user's cookies."
msgstr ""

#: ../../releases/1.4.txt:372
#: ../../releases/1.4-alpha-1.txt:201
#: ../../releases/1.4-beta-1.txt:239
# cd1e5dbe288c43199b3ec527e6f73d02
# bf48c444a252428a8ef062afc19a01ee
# 5f160a86163042b99d25537d11c50622
msgid "See the :doc:`form wizard </ref/contrib/formtools/form-wizard>` docs for more information."
msgstr ""

#: ../../releases/1.4.txt:376
#: ../../releases/1.4-alpha-1.txt:205
#: ../../releases/1.4-beta-1.txt:243
# 91cb4ec522c94520a57082e10f8b380e
# e9b11c5393df44b88c9ae79cbd8c0032
# 8fa8fc48ef1347358618b7e29f8cefdc
msgid "``reverse_lazy``"
msgstr ""

#: ../../releases/1.4.txt:378
# e51d59d711994890ae68f8899def4bd8
msgid "A lazily evaluated version of :func:`django.core.urlresolvers.reverse` was added to allow using URL reversals before the project's URLconf gets loaded."
msgstr ""

#: ../../releases/1.4.txt:382
#: ../../releases/1.4-alpha-1.txt:211
#: ../../releases/1.4-beta-1.txt:249
# c4fd11be69854da3b09c003bca402731
# 9ad08c3de7e24eb38b444a50f18e8777
# 08986e2ba5dd414f94caffa9ad87e376
msgid "Translating URL patterns"
msgstr ""

#: ../../releases/1.4.txt:384
# 45f2625a7118430b96575b9c3e0043f6
msgid "Django can now look for a language prefix in the URLpattern when using the new :func:`~django.conf.urls.i18n.i18n_patterns` helper function. It's also now possible to define translatable URL patterns using :func:`~django.utils.translation.ugettext_lazy`. See :ref:`url-internationalization` for more information about the language prefix and how to internationalize URL patterns."
msgstr ""

#: ../../releases/1.4.txt:392
#: ../../releases/1.4-alpha-1.txt:221
#: ../../releases/1.4-beta-1.txt:259
# 695357ce45b047f38485ebef8caf97b0
# 7a9e46e2bc304637866d7118f280557a
# c8ec4eae0fa54038a6cfd8f8716950c8
msgid "Contextual translation support for ``{% trans %}`` and ``{% blocktrans %}``"
msgstr ""

#: ../../releases/1.4.txt:394
#: ../../releases/1.4-alpha-1.txt:223
#: ../../releases/1.4-beta-1.txt:261
# b0a0f5d9da4c446798c8fbb7790e3c6e
# 0d702163925b460eae8ef0610b343543
# 44b653511b0c4e3daa18215438479eb0
msgid "The :ref:`contextual translation<contextual-markers>` support introduced in Django 1.3 via the ``pgettext`` function has been extended to the :ttag:`trans` and :ttag:`blocktrans` template tags using the new ``context`` keyword."
msgstr ""

#: ../../releases/1.4.txt:400
#: ../../releases/1.4-alpha-1.txt:229
#: ../../releases/1.4-beta-1.txt:267
# 562a96ad67ea4a608a4f17773e28f5f8
# f85c5bdc5bf54a55842b37fb3d6e39c9
# a335fd2282d343da850b099732237ed1
msgid "Customizable ``SingleObjectMixin`` URLConf kwargs"
msgstr ""

#: ../../releases/1.4.txt:402
# e055e0139081494caffeb512118a15f1
msgid "Two new attributes, :attr:`pk_url_kwarg<django.views.generic.detail.SingleObjectMixin.pk_url_kwarg>` and :attr:`slug_url_kwarg<django.views.generic.detail.SingleObjectMixin.slug_url_kwarg>`, have been added to :class:`~django.views.generic.detail.SingleObjectMixin` to enable the customization of URLconf keyword arguments used for single object generic views."
msgstr ""

#: ../../releases/1.4.txt:411
#: ../../releases/1.4-alpha-1.txt:240
#: ../../releases/1.4-beta-1.txt:278
# ec5aa4f295b24c95b60b0fad5053fade
# 72469fa684294ef492f93162bb8fb685
# 68e275f2681b457f9734389b61437923
msgid "Assignment template tags"
msgstr ""

#: ../../releases/1.4.txt:413
#: ../../releases/1.4-alpha-1.txt:242
#: ../../releases/1.4-beta-1.txt:280
# 51ab2e830fbb44c2af7dfee9cb72a991
# 4706957ffe1c46f597f588b6fcaa0ff8
# 0dab73fcfed14b1fa2a57e5a652615e8
msgid "A new :ref:`assignment_tag<howto-custom-template-tags-assignment-tags>` helper function was added to ``template.Library`` to ease the creation of template tags that store data in a specified context variable."
msgstr ""

#: ../../releases/1.4.txt:418
#: ../../releases/1.4-alpha-1.txt:247
#: ../../releases/1.4-beta-1.txt:285
# 620664084efe419b89fd9a73b096b953
# 85f40fd891c1441ea33c191d652714d8
# cb2b3f687a3049bfb1aad7478cdf6cb4
msgid "``*args`` and ``**kwargs`` support for template tag helper functions"
msgstr ""

#: ../../releases/1.4.txt:420
#: ../../releases/1.4-alpha-1.txt:249
#: ../../releases/1.4-beta-1.txt:287
# fa34e4edec294653817a49de82ea8310
# d92626556dac4c29b82b77602145bdc5
# b7400eb2408042df8bb7ca34ae85f0b9
msgid "The :ref:`simple_tag<howto-custom-template-tags-simple-tags>`, :ref:`inclusion_tag <howto-custom-template-tags-inclusion-tags>` and newly introduced :ref:`assignment_tag<howto-custom-template-tags-assignment-tags>` template helper functions may now accept any number of positional or keyword arguments. For example:"
msgstr ""

#: ../../releases/1.4.txt:436
# 7f1d793b24b6429084a2bf4f18f0d2f8
msgid "Then, in the template, any number of arguments may be passed to the template tag. For example:"
msgstr ""

#: ../../releases/1.4.txt:444
#: ../../releases/1.4-alpha-1.txt:273
#: ../../releases/1.4-beta-1.txt:311
# d00b7aa287704ef29a9fe5369392cb9d
# efc01ae9d85d4323aef06441c8ba05ae
# 576d5ddf640e42a4bdfb64643b089fb7
msgid "No wrapping of exceptions in ``TEMPLATE_DEBUG`` mode"
msgstr ""

#: ../../releases/1.4.txt:446
#: ../../releases/1.4-alpha-1.txt:275
#: ../../releases/1.4-beta-1.txt:313
# b76c2d696f244b9985576fa291c80283
# 54529d0f35bf490f8d41da425d1c208c
# 585667df807e4a1f820c00d3474f7e49
msgid "In previous versions of Django, whenever the :setting:`TEMPLATE_DEBUG` setting was ``True``, any exception raised during template rendering (even exceptions unrelated to template syntax) were wrapped in ``TemplateSyntaxError`` and re-raised. This was done in order to provide detailed template source location information in the debug 500 page."
msgstr ""

#: ../../releases/1.4.txt:452
#: ../../releases/1.4-alpha-1.txt:281
#: ../../releases/1.4-beta-1.txt:319
# ae186f5d5a224c1b88c041bb1050d0df
# bcf259d4117c4139945aba4e679bbd3a
# 39401ffcaff9430d9b94dc297e733f3d
msgid "In Django 1.4, exceptions are no longer wrapped. Instead, the original exception is annotated with the source information. This means that catching exceptions from template rendering is now consistent regardless of the value of :setting:`TEMPLATE_DEBUG`, and there's no need to catch and unwrap ``TemplateSyntaxError`` in order to catch other errors."
msgstr ""

#: ../../releases/1.4.txt:459
#: ../../releases/1.4-alpha-1.txt:288
#: ../../releases/1.4-beta-1.txt:326
# 19c9dda655bb4f1ea14d568303c8b067
# 9a07d2704012494ab04999b92230a195
# 80ba5bfb6b894b4680f034deb29b2f59
msgid "``truncatechars`` template filter"
msgstr ""

#: ../../releases/1.4.txt:461
# cab0a616539a40c187c93b54842120e4
msgid "This new filter truncates a string to be no longer than the specified number of characters. Truncated strings end with a translatable ellipsis sequence (\"...\"). See the documentation for :tfilter:`truncatechars` for more details."
msgstr ""

#: ../../releases/1.4.txt:467
#: ../../releases/1.4-alpha-1.txt:296
#: ../../releases/1.4-beta-1.txt:334
# 543e716991934c0e9b97bf24a1d0ab9c
# 758520bdb2bb411c869bd7d104801e10
# 33b646d9e74f4c7db121ac13e1e3c90b
msgid "``static`` template tag"
msgstr ""

#: ../../releases/1.4.txt:469
#: ../../releases/1.4-alpha-1.txt:298
#: ../../releases/1.4-beta-1.txt:336
# b3a82c0ac59f4df58834ae8616a1442a
# 1c943ca3becb42e298f712ef798c9a8d
# 3c21ac0dd921428b99ed9882bfeff746
msgid "The :mod:`staticfiles<django.contrib.staticfiles>` contrib app has a new :ttag:`static<staticfiles-static>` template tag to refer to files saved with the :setting:`STATICFILES_STORAGE` storage backend. It uses the storage backend's ``url`` method and therefore supports advanced features such as :ref:`serving files from a cloud service<staticfiles-from-cdn>`."
msgstr ""

#: ../../releases/1.4.txt:476
#: ../../releases/1.4-alpha-1.txt:305
#: ../../releases/1.4-beta-1.txt:343
# 0c66bac29e404c44a6e2a4d5c3bcab41
# 9d2ce282cc3d4d30ade333c0264c751e
# 0d2ebe73c8dd485c8aa9c29cdde01f3f
msgid "``CachedStaticFilesStorage`` storage backend"
msgstr ""

#: ../../releases/1.4.txt:478
# 545c9a3c510043f2a2b5f689f6359cde
msgid "The :mod:`staticfiles<django.contrib.staticfiles>` contrib app now has a :class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage` backend that caches the files it saves (when running the :djadmin:`collectstatic` management command) by appending the MD5 hash of the file's content to the filename. For example, the file ``css/styles.css`` would also be saved as ``css/styles.55e7cbb9ba48.css``"
msgstr ""

#: ../../releases/1.4.txt:485
#: ../../releases/1.4-alpha-1.txt:315
#: ../../releases/1.4-beta-1.txt:353
# e3549e8f937a473b965370d64245b223
# 15d54eae52234955b45ac056c110a6ff
# 15551733362044b8941f0cc80311f698
msgid "See the :class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage` docs for more information."
msgstr ""

#: ../../releases/1.4.txt:489
#: ../../releases/1.4-alpha-1.txt:319
#: ../../releases/1.4-beta-1.txt:357
# cd1717d5ead94912b336a0059d12e24b
# 3d1ae68e6e894f328da75bb441a0cfad
# a62b2f375ec04f59bdc9996326f81c68
msgid "Simple clickjacking protection"
msgstr ""

#: ../../releases/1.4.txt:491
#: ../../releases/1.4-alpha-1.txt:321
#: ../../releases/1.4-beta-1.txt:359
# 97c1db02917b48babea15559c9b87251
# efa593d6e7b1482993d2326976e2ce66
# bcebe6cddf064353aaa592ae8d61fc07
msgid "We've added a middleware to provide easy protection against `clickjacking <http://en.wikipedia.org/wiki/Clickjacking>`_ using the ``X-Frame-Options`` header. It's not enabled by default for backwards compatibility reasons, but you'll almost certainly want to :doc:`enable it </ref/clickjacking/>` to help plug that security hole for browsers that support the header."
msgstr ""

#: ../../releases/1.4.txt:498
#: ../../releases/1.4-alpha-1.txt:328
#: ../../releases/1.4-beta-1.txt:366
# 38eba1616db34fbdbfb952b6c921179c
# af156f270cf243bcaaa5ba4dc635281d
# 0a9926cde23544318bdd5a6b96f7bd17
msgid "CSRF improvements"
msgstr ""

#: ../../releases/1.4.txt:500
# c917267b3e4f40ccb1989fe304a683d8
msgid "We've made various improvements to our CSRF features, including the :func:`~django.views.decorators.csrf.ensure_csrf_cookie` decorator, which can help with AJAX-heavy sites; protection for PUT and DELETE requests; and the :setting:`CSRF_COOKIE_SECURE` and :setting:`CSRF_COOKIE_PATH` settings, which can improve the security and usefulness of CSRF protection. See the :doc:`CSRF docs </ref/contrib/csrf>` for more information."
msgstr ""

#: ../../releases/1.4.txt:508
#: ../../releases/1.4-alpha-1.txt:338
#: ../../releases/1.4-beta-1.txt:376
# d4dbaeea02d54764961e258b4c1955ba
# 76bf695d4d0c40519936786f9a1e3111
# 827e34ca9aa34789a8d7ec6826774336
msgid "Error report filtering"
msgstr ""

#: ../../releases/1.4.txt:510
# 0bf9806b1e5c4d3bb6c45d0be4dfb9c4
msgid "We added two function decorators, :func:`sensitive_variables` and :func:`sensitive_post_parameters`, to allow designating the local variables and POST parameters that may contain sensitive information and should be filtered out of error reports."
msgstr ""

#: ../../releases/1.4.txt:515
# e67b8edd463f4fc9af0f62b8d971c96b
msgid "All POST parameters are now systematically filtered out of error reports for certain views (``login``, ``password_reset_confirm``, ``password_change`` and ``add_view`` in :mod:`django.contrib.auth.views`, as well as ``user_change_password`` in the admin app) to prevent the leaking of sensitive information such as user passwords."
msgstr ""

#: ../../releases/1.4.txt:521
# 1a0ff0df04a0481dad855b1051ff5eee
msgid "You can override or customize the default filtering by writing a :ref:`custom filter<custom-error-reports>`. For more information see the docs on :ref:`Filtering error reports<filtering-error-reports>`."
msgstr ""

#: ../../releases/1.4.txt:526
#: ../../releases/1.4-alpha-1.txt:356
#: ../../releases/1.4-beta-1.txt:394
# 3b81538ecaf24b0eab750eb50ff8a5e0
# ce9564f09abd4d8c89a283216582015b
# 5f2346d96ba5460c8681ba300e06f774
msgid "Extended IPv6 support"
msgstr ""

#: ../../releases/1.4.txt:528
# a86ea4d583ec4a24b34362115723042d
msgid "Django 1.4 can now better handle IPv6 addresses with the new :class:`~django.db.models.GenericIPAddressField` model field, :class:`~django.forms.GenericIPAddressField` form field and the validators :data:`~django.core.validators.validate_ipv46_address` and :data:`~django.core.validators.validate_ipv6_address`."
msgstr ""

#: ../../releases/1.4.txt:535
# ac54db7dc0a24de0a1b45669c9128b17
msgid "HTML comparisons in tests"
msgstr ""

#: ../../releases/1.4.txt:537
# 5e833de735494e28adab4308ea996d6c
msgid "The base classes in :mod:`django.test` now have some helpers to compare HTML without tripping over irrelevant differences in whitespace, argument quoting/ordering and closing of self-closing tags. You can either compare HTML directly with the new :meth:`~django.test.SimpleTestCase.assertHTMLEqual` and :meth:`~django.test.SimpleTestCase.assertHTMLNotEqual` assertions, or use the ``html=True`` flag with :meth:`~django.test.TestCase.assertContains` and :meth:`~django.test.TestCase.assertNotContains` to test whether the client's response contains a given HTML fragment. See the :ref:`assertions documentation <assertions>` for more."
msgstr ""

#: ../../releases/1.4.txt:550
#: ../../releases/1.4-beta-1.txt:528
# 5b167d5004c94c2ba2c717be3e4e724e
# 01c833567a554f3faf2ba910fbba6fd2
msgid "Two new date format strings"
msgstr ""

#: ../../releases/1.4.txt:552
#: ../../releases/1.4-beta-1.txt:530
# 0e10562cab32453cb805feef54c51e31
# 66586c90362e4a879a24e8d9ab665ffe
msgid "Two new :tfilter:`date` formats were added for use in template filters, template tags and :ref:`format-localization`:"
msgstr ""

#: ../../releases/1.4.txt:555
#: ../../releases/1.4-beta-1.txt:533
# 84bb906e834e4ed08e3ad03b159c05d1
# 37acccfed76a479ebe381f40793f05e4
msgid "``e`` -- the name of the timezone of the given datetime object"
msgstr ""

#: ../../releases/1.4.txt:556
#: ../../releases/1.4-beta-1.txt:534
# 2ceca8768c3648d3a19245ad17bdc4ab
# a42415a45e9f4541910cdfcdeebee59e
msgid "``o`` -- the ISO 8601 year number"
msgstr ""

#: ../../releases/1.4.txt:558
#: ../../releases/1.4-beta-1.txt:536
# 38409473ee3e4f248593bf3ab80cdd6f
# 7d59fac565024f1883fbb5d7551b41ce
msgid "Please make sure to update your :ref:`custom format files <custom-format-files>` if they contain either ``e`` or ``o`` in a format string. For example a Spanish localization format previously only escaped the ``d`` format character::"
msgstr ""

#: ../../releases/1.4.txt:565
#: ../../releases/1.4-beta-1.txt:543
# 04dee958361e41bbbc4ffac70ebc42ee
# 8e6a3dba49134752baa329d27cfd1953
msgid "But now it needs to also escape ``e`` and ``o``::"
msgstr ""

#: ../../releases/1.4.txt:569
#: ../../releases/1.4-beta-1.txt:547
# b5f9aafb788a455f8f1d9b5e765f22f7
# d7d9bb219fc840769421d81188feb6d2
msgid "For more information, see the :tfilter:`date` documentation."
msgstr ""

#: ../../releases/1.4.txt:572
#: ../../releases/1.4-alpha-1.txt:490
#: ../../releases/1.4-beta-1.txt:550
#: ../../releases/1.5.txt:244
#: ../../releases/1.5-alpha-1.txt:238
#: ../../releases/1.5-beta-1.txt:236
# e223dfde44514f718e04978e5fa69be8
# f87f3106e072440386d04625a9305b8c
# 6249f2b68c904deebfc6bc2ac7ea15d5
# dde6d825011b41a79beaf313c2588c54
# 070ee393b1044d84a6a0287f71006eb6
# e899aea9517d41af9f310d688f2006cd
msgid "Minor features"
msgstr ""

#: ../../releases/1.4.txt:574
#: ../../releases/1.4-alpha-1.txt:492
#: ../../releases/1.4-beta-1.txt:552
# a3b81c8ff1ab4b16abf165b28504d4aa
# 9c90cf93c0254826b39bde5cbf83493e
# 713e29d0fd67449bbe6289f699c684a4
msgid "Django 1.4 also includes several smaller improvements worth noting:"
msgstr ""

#: ../../releases/1.4.txt:576
# 5425162ed04c4bf88e34ca3675f65664
msgid "A more usable stacktrace in the technical 500 page. Frames in the stack trace that reference Django's framework code are dimmed out, while frames in application code are slightly emphasized. This change makes it easier to scan a stacktrace for issues in application code."
msgstr ""

#: ../../releases/1.4.txt:581
#: ../../releases/1.4-alpha-1.txt:499
#: ../../releases/1.4-beta-1.txt:559
# 51b051150a08446787d04c4f1eec0f55
# 9f71bd0c19bd460aa4e74ddd10e5b448
# c7943fc710a5406b92e7cfe4d4a5ea87
msgid ":doc:`Tablespace support </topics/db/tablespaces>` in PostgreSQL."
msgstr ""

#: ../../releases/1.4.txt:583
#: ../../releases/1.4-alpha-1.txt:501
#: ../../releases/1.4-beta-1.txt:561
# 6725197e0f8741ee8c1386220de98e23
# 9815550a786344bcaf88d1e23cc8b806
# 6cf0c14b7ce54828ae41c17fd55e40f4
msgid "Customizable names for :meth:`~django.template.Library.simple_tag`."
msgstr ""

#: ../../releases/1.4.txt:585
#: ../../releases/1.4-alpha-1.txt:503
#: ../../releases/1.4-beta-1.txt:563
# bf350d01b812468ea4638b1c2402d0d5
# 892efbedef9b4fc680f5d6e202eba170
# 6a7ff499cacf446db4dd2f869c3603dc
msgid "In the documentation, a helpful :doc:`security overview </topics/security>` page."
msgstr ""

#: ../../releases/1.4.txt:588
# f138634ee00246649e026e8ff85cdd63
msgid "The ``django.contrib.auth.models.check_password`` function has been moved to the :mod:`django.contrib.auth.hashers` module. Importing it from the old location will still work, but you should update your imports."
msgstr ""

#: ../../releases/1.4.txt:592
# 84465aaf7b7546a396729cff11acb1cc
msgid "The :djadmin:`collectstatic` management command now has a ``--clear`` option to delete all files at the destination before copying or linking the static files."
msgstr ""

#: ../../releases/1.4.txt:596
# 1e0706391dd64424ad1feaf47d903610
msgid "It's now possible to load fixtures containing forward references when using MySQL with the InnoDB database engine."
msgstr ""

#: ../../releases/1.4.txt:599
#: ../../releases/1.4-alpha-1.txt:517
#: ../../releases/1.4-beta-1.txt:577
# cfe5d57907cd47c9a14d2e76d7e8c560
# 7dfdcd7bd3d64f4fb630f306202a2bcb
# 314f17bcb8564442b6ec9f3640f18fa4
msgid "A new 403 response handler has been added as ``'django.views.defaults.permission_denied'``. You can set your own handler by setting the value of :data:`django.conf.urls.handler403`. See the documentation about :ref:`the 403 (HTTP Forbidden) view<http_forbidden_view>` for more information."
msgstr ""

#: ../../releases/1.4.txt:605
# 900507ac8e0c4d9e93985a40228a754d
msgid "The :djadmin:`makemessages` command uses a new and more accurate lexer, `JsLex`_, for extracting translatable strings from JavaScript files."
msgstr ""

#: ../../releases/1.4.txt:610
#: ../../releases/1.4-alpha-1.txt:523
#: ../../releases/1.4-beta-1.txt:583
# b6192b48053a4fab9068753c440c9a67
# 7ea60defb7184802af7d844f80b010c7
# de35c0f4a895447e918cdc23f8860570
msgid "The :ttag:`trans` template tag now takes an optional ``as`` argument to be able to retrieve a translation string without displaying it but setting a template context variable instead."
msgstr ""

#: ../../releases/1.4.txt:614
#: ../../releases/1.4-alpha-1.txt:527
#: ../../releases/1.4-beta-1.txt:587
# d86b9c4713df41fdb4d183f5c7be8d44
# 81d636915e3745758229ce2aeb590918
# d804d31e7377439fbb34ca3f64c37195
msgid "The :ttag:`if` template tag now supports ``{% elif %}`` clauses."
msgstr ""

#: ../../releases/1.4.txt:616
# 9822a4ee3358455c87bc910a2311147c
msgid "If your Django app is behind a proxy, you might find the new :setting:`SECURE_PROXY_SSL_HEADER` setting useful. It solves the problem of your proxy \"eating\" the fact that a request came in via HTTPS. But only use this setting if you know what you're doing."
msgstr ""

#: ../../releases/1.4.txt:621
# abffd114a2b54580a33ee921d1778568
msgid "A new, plain-text, version of the HTTP 500 status code internal error page served when :setting:`DEBUG` is ``True`` is now sent to the client when Django detects that the request has originated in JavaScript code. (:meth:`~django.http.HttpRequest.is_ajax` is used for this.)"
msgstr ""

#: ../../releases/1.4.txt:626
# ee8a86a1b373476aabb2f0a3743bcd61
msgid "Like its HTML counterpart, it contains a collection of different pieces of information about the state of the application."
msgstr ""

#: ../../releases/1.4.txt:629
# 27bf965d98fa45139f557350fab67ce1
msgid "This should make it easier to read when debugging interaction with client-side JavaScript."
msgstr ""

#: ../../releases/1.4.txt:632
#: ../../releases/1.4-alpha-1.txt:540
#: ../../releases/1.4-beta-1.txt:600
# 065067450d334b9aa2024cec2ebf0eeb
# 303448bc35e74a478f66a3ce8178c51b
# 37f8a5aca7f54667b6d627ecc36219af
msgid "Added the :djadminopt:`--no-location` option to the :djadmin:`makemessages` command."
msgstr ""

#: ../../releases/1.4.txt:635
#: ../../releases/1.4-alpha-1.txt:543
#: ../../releases/1.4-beta-1.txt:603
# b4670cd1e8a540d891b059b2c9f992c9
# beeca40269ac440a82bc0b998c4f58a9
# ba708e99e7574c838a8c5aad46ac914c
msgid "Changed the ``locmem`` cache backend to use ``pickle.HIGHEST_PROTOCOL`` for better compatibility with the other cache backends."
msgstr ""

#: ../../releases/1.4.txt:639
#: ../../releases/1.4-alpha-1.txt:547
#: ../../releases/1.4-beta-1.txt:607
# 1d9e53c058ff4993a68b7eb98256c8d2
# 0d0b997e526f4b26bb271985ed1d968a
# 75bddff112034012a736ff38dcd24949
msgid "Added support in the ORM for generating ``SELECT`` queries containing ``DISTINCT ON``."
msgstr ""

#: ../../releases/1.4.txt:642
#: ../../releases/1.4-alpha-1.txt:550
#: ../../releases/1.4-beta-1.txt:610
# 05d2528977e7420099b788b180ab3a65
# 666de219b6a444159a865fd248a131ac
# 590a82299e254593b6b90f5de0a00a89
msgid "The ``distinct()`` ``QuerySet`` method now accepts an optional list of model field names. If specified, then the ``DISTINCT`` statement is limited to these fields. This is only supported in PostgreSQL."
msgstr ""

#: ../../releases/1.4.txt:646
#: ../../releases/1.4-alpha-1.txt:554
#: ../../releases/1.4-beta-1.txt:614
# 130f31d6804845e4a10a7208152e078a
# fd0f61314d1e4577beee93a7f9889515
# b339fa7802ab4f39a4ec5e69c1fe9272
msgid "For more details, see the documentation for :meth:`~django.db.models.query.QuerySet.distinct`."
msgstr ""

#: ../../releases/1.4.txt:649
# 89c6020cc57d41e1b73ea7547745151a
msgid "The admin login page will add a password reset link if you include a URL with the name `'admin_password_reset'` in your urls.py, so plugging in the built-in password reset mechanism and making it available is now much easier. For details, see :ref:`auth_password_reset`."
msgstr ""

#: ../../releases/1.4.txt:654
# 9e1f81960fc24474b9a7a111f85f896c
msgid "The MySQL database backend can now make use of the savepoint feature implemented by MySQL version 5.0.3 or newer with the InnoDB storage engine."
msgstr ""

#: ../../releases/1.4.txt:657
# ba577d81ce3b4ad0a28caef1083ce691
msgid "It's now possible to pass initial values to the model forms that are part of both model formsets and inline model formsets as returned from factory functions ``modelformset_factory`` and ``inlineformset_factory`` respectively just like with regular formsets. However, initial values only apply to extra forms, i.e. those which are not bound to an existing model instance."
msgstr ""

#: ../../releases/1.4.txt:663
# 62f061eb7c4942919e2969b58c11fb01
msgid "The sitemaps framework can now handle HTTPS links using the new :attr:`Sitemap.protocol <django.contrib.sitemaps.Sitemap.protocol>` class attribute."
msgstr ""

#: ../../releases/1.4.txt:667
# ce832f2375c64989af53a6df64063db0
msgid "A new :class:`django.test.SimpleTestCase` subclass of :class:`unittest.TestCase` that's lighter than :class:`django.test.TestCase` and company. It can be useful in tests that don't need to hit a database. See :ref:`testcase_hierarchy_diagram`."
msgstr ""

#: ../../releases/1.4.txt:674
#: ../../releases/1.4-alpha-1.txt:558
#: ../../releases/1.4-beta-1.txt:626
# 76fa434ff1814650918158af1d2f6843
# 0c7480a1afda4656b09aaceefba5a724
# d77aa678f7ce455688f738c450c93120
msgid "Backwards incompatible changes in 1.4"
msgstr ""

#: ../../releases/1.4.txt:677
# c78ae477367d4db5a517c9d97e8e29fa
msgid "SECRET_KEY setting is required"
msgstr ""

#: ../../releases/1.4.txt:679
# 4610f338b8e042d49f34e696357d9d32
msgid "Running Django with an empty or known :setting:`SECRET_KEY` disables many of Django's security protections and can lead to remote-code-execution vulnerabilities. No Django site should ever be run without a :setting:`SECRET_KEY`."
msgstr ""

#: ../../releases/1.4.txt:684
# f148faa448fd490a82a5e691b6853152
msgid "In Django 1.4, starting Django with an empty :setting:`SECRET_KEY` will raise a `DeprecationWarning`. In Django 1.5, it will raise an exception and Django will refuse to start. This is slightly accelerated from the usual deprecation path due to the severity of the consequences of running Django with no :setting:`SECRET_KEY`."
msgstr ""

#: ../../releases/1.4.txt:691
#: ../../releases/1.4-alpha-1.txt:561
#: ../../releases/1.4-beta-1.txt:629
# d62c31b9f6f940d0aef3177b94032ab8
# 1cf5fe0d43264d419533a9728e5d3bda
# 0138e1562df7483098093b92b99029e4
msgid "django.contrib.admin"
msgstr ""

#: ../../releases/1.4.txt:693
#: ../../releases/1.4-alpha-1.txt:563
#: ../../releases/1.4-beta-1.txt:631
# aa1159f5475f4fd8b899dee31a006a03
# 010e64a5be1e4ea08ec69ec01adf1818
# 41acb120cb7a4ec4a1a536bfc03f31b8
msgid "The included administration app ``django.contrib.admin`` has for a long time shipped with a default set of static files such as JavaScript, images and stylesheets. Django 1.3 added a new contrib app ``django.contrib.staticfiles`` to handle such files in a generic way and defined conventions for static files included in apps."
msgstr ""

#: ../../releases/1.4.txt:699
# 3006bb459b804aa1901e11f0bc174914
msgid "Starting in Django 1.4, the admin's static files also follow this convention, to make the files easier to deploy. In previous versions of Django, it was also common to define an ``ADMIN_MEDIA_PREFIX`` setting to point to the URL where the admin's static files live on a Web server. This setting has now been deprecated and replaced by the more general setting :setting:`STATIC_URL`. Django will now expect to find the admin static files under the URL ``<STATIC_URL>/admin/``."
msgstr ""

#: ../../releases/1.4.txt:707
# 9e1cfb5ad902420d8e0f0d22b91c8f9e
msgid "If you've previously used a URL path for ``ADMIN_MEDIA_PREFIX`` (e.g. ``/media/``) simply make sure :setting:`STATIC_URL` and :setting:`STATIC_ROOT` are configured and your Web server serves those files correctly. The development server continues to serve the admin files just like before. Read the :doc:`static files howto </howto/static-files/index>` for more details."
msgstr ""

#: ../../releases/1.4.txt:713
# 9c704a32dda1433aa9dd2a8190bacbaa
msgid "If your ``ADMIN_MEDIA_PREFIX`` is set to an specific domain (e.g. ``http://media.example.com/admin/``), make sure to also set your :setting:`STATIC_URL` setting to the correct URL -- for example, ``http://media.example.com/``."
msgstr ""

#: ../../releases/1.4.txt:720
# 82faaf9a679645ffb7f87cd7a72d7fd7
msgid "If you're implicitly relying on the path of the admin static files within Django's source code, you'll need to update that path. The files were moved from :file:`django/contrib/admin/media/` to :file:`django/contrib/admin/static/admin/`."
msgstr ""

#: ../../releases/1.4.txt:726
#: ../../releases/1.4-alpha-1.txt:597
#: ../../releases/1.4-beta-1.txt:665
# 85ef5ffe6303463a9b53b39c53398a88
# c2c0fc29ef5f4b7b83f6455ba6b71783
# d89126d89d7a462f881c4951905a6585
msgid "Supported browsers for the admin"
msgstr ""

#: ../../releases/1.4.txt:728
# 8dd3dc27016d43edb71a66c34f7e2a59
msgid "Django hasn't had a clear policy on which browsers are supported by the admin app. Our new policy formalizes existing practices: `YUI's A-grade`_ browsers should provide a fully-functional admin experience, with the notable exception of Internet Explorer 6, which is no longer supported."
msgstr ""

#: ../../releases/1.4.txt:733
# a54ba8b1b43f4c5296dc70504c7c93c1
msgid "Released over 10 years ago, IE6 imposes many limitations on modern Web development. The practical implications of this policy are that contributors are free to improve the admin without consideration for these limitations."
msgstr ""

#: ../../releases/1.4.txt:737
# 79e21f1b47c84b9fa6bc73fdd39a2320
msgid "Obviously, this new policy **has no impact** on sites you develop using Django. It only applies to the Django admin. Feel free to develop apps compatible with any range of browsers."
msgstr ""

#: ../../releases/1.4.txt:744
#: ../../releases/1.4-alpha-1.txt:614
#: ../../releases/1.4-beta-1.txt:682
# feb830ee7d354733aa39c20117602cbb
# f0881b79c36b4515898a649aade9c754
# 3ff706e88fe14a8281099e695528bed0
msgid "Removed admin icons"
msgstr ""

#: ../../releases/1.4.txt:746
# ecf2ae9997834452869d231d679f0983
msgid "As part of an effort to improve the performance and usability of the admin's change-list sorting interface and :attr:`horizontal <django.contrib.admin.ModelAdmin.filter_horizontal>` and :attr:`vertical <django.contrib.admin.ModelAdmin.filter_vertical>` \"filter\" widgets, some icon files were removed and grouped into two sprite files."
msgstr ""

#: ../../releases/1.4.txt:752
#: ../../releases/1.4-alpha-1.txt:622
#: ../../releases/1.4-beta-1.txt:690
# 696385ce7e3c4288b1d3e979a8112380
# 0f559a9f0cb842cfb73ae1f1c4ca83c9
# 941f330c6cee45709df136984d53bb73
msgid "Specifically: ``selector-add.gif``, ``selector-addall.gif``, ``selector-remove.gif``, ``selector-removeall.gif``, ``selector_stacked-add.gif`` and ``selector_stacked-remove.gif`` were combined into ``selector-icons.gif``; and ``arrow-up.gif`` and ``arrow-down.gif`` were combined into ``sorting-icons.gif``."
msgstr ""

#: ../../releases/1.4.txt:758
# 62890b6cfd154deca44efc744a2a459f
msgid "If you used those icons to customize the admin, then you'll need to replace them with your own icons or get the files from a previous release."
msgstr ""

#: ../../releases/1.4.txt:762
#: ../../releases/1.4-alpha-1.txt:632
#: ../../releases/1.4-beta-1.txt:700
# 051c91c4fe6e4ffb9fc9c3e265cd1936
# 39611a4a3315496d8a9c7b3f1d7b0682
# 23f29692ce7f4fe6bd9b1a57df5b17e1
msgid "CSS class names in admin forms"
msgstr ""

#: ../../releases/1.4.txt:764
# 04f05ca2ae3c454f82f359c66f182820
msgid "To avoid conflicts with other common CSS class names (e.g. \"button\"), we added a prefix (\"field-\") to all CSS class names automatically generated from the form field names in the main admin forms, stacked inline forms and tabular inline cells. You'll need to take that prefix into account in your custom style sheets or JavaScript files if you previously used plain field names as selectors for custom styles or JavaScript transformations."
msgstr ""

#: ../../releases/1.4.txt:772
#: ../../releases/1.4-alpha-1.txt:642
#: ../../releases/1.4-beta-1.txt:710
# d3de1d13abc248ae934edac56c23a126
# 7363a5a19a264cafa942ba5d6fd61448
# 3a3886540b36426eb1465dbb77f7ef2d
msgid "Compatibility with old signed data"
msgstr ""

#: ../../releases/1.4.txt:774
#: ../../releases/1.4-alpha-1.txt:644
#: ../../releases/1.4-beta-1.txt:712
# ab17816f367a40ecb426bf5bc3c7e127
# 3ea7256e857242ef9f4453190a5aade0
# 0894bebb7e34413b9f4b103158abebda
msgid "Django 1.3 changed the cryptographic signing mechanisms used in a number of places in Django. While Django 1.3 kept fallbacks that would accept hashes produced by the previous methods, these fallbacks are removed in Django 1.4."
msgstr ""

#: ../../releases/1.4.txt:778
#: ../../releases/1.4-alpha-1.txt:648
#: ../../releases/1.4-beta-1.txt:716
# f8f620bf1d204a98afce83a5856e7d4c
# 8a7ad1f155d145128654feccb7bc06a9
# 03e71ab542fb4215b1d52c76bc44c8d0
msgid "So, if you upgrade to Django 1.4 directly from 1.2 or earlier, you may lose/invalidate certain pieces of data that have been cryptographically signed using an old method. To avoid this, use Django 1.3 first for a period of time to allow the signed data to expire naturally. The affected parts are detailed below, with 1) the consequences of ignoring this advice and 2) the amount of time you need to run Django 1.3 for the data to expire or become irrelevant."
msgstr ""

#: ../../releases/1.4.txt:785
#: ../../releases/1.4-alpha-1.txt:655
#: ../../releases/1.4-beta-1.txt:723
# 8bcc2069508d4a4a81f12b7f24ac9234
# 8fecd55fe7a3403e98d7214f2c992431
# 443ff98831a44915a56b947e4f950261
msgid "``contrib.sessions`` data integrity check"
msgstr ""

#: ../../releases/1.4.txt:787
# 21b7b8b0ded74a1881f07b073c7fd577
msgid "Consequences: The user will be logged out, and session data will be lost."
msgstr ""

#: ../../releases/1.4.txt:789
# ff60819877df4f36b5b48b657c4e4f8a
msgid "Time period: Defined by :setting:`SESSION_COOKIE_AGE`."
msgstr ""

#: ../../releases/1.4.txt:791
#: ../../releases/1.4-alpha-1.txt:661
#: ../../releases/1.4-beta-1.txt:729
# b0cad13ea1a1425e803091ab439e676c
# a96a1fb1bd8c4cb68b0ffe52575a9b34
# 020ed2a1bdf94ffc9586902d9c6a1ea1
msgid "``contrib.auth`` password reset hash"
msgstr ""

#: ../../releases/1.4.txt:793
# 703b29fd9f0547b2a95a9c946decba3a
msgid "Consequences: Password reset links from before the upgrade will not work."
msgstr ""

#: ../../releases/1.4.txt:795
# d1df6cff889749cb8524add35d33b618
msgid "Time period: Defined by :setting:`PASSWORD_RESET_TIMEOUT_DAYS`."
msgstr ""

#: ../../releases/1.4.txt:797
# fc9629bd70fa47018a772ef79e759666
msgid "Form-related hashes: these have a are much shorter lifetime and are relevant only for the short window where a user might fill in a form generated by the pre-upgrade Django instance and try to submit it to the upgraded Django instance:"
msgstr ""

#: ../../releases/1.4.txt:802
#: ../../releases/1.4-alpha-1.txt:671
#: ../../releases/1.4-beta-1.txt:739
# 06b6b8a41de14cc3b14349452cb79b55
# 1f92c768b07a4dba854013ae00ac4ce1
# d1cda7b88b064fcca3bc3f384a360042
msgid "``contrib.comments`` form security hash"
msgstr ""

#: ../../releases/1.4.txt:804
# def8add9745c43bc9a190904cbd52681
msgid "Consequences: The user will see the validation error \"Security hash failed.\""
msgstr ""

#: ../../releases/1.4.txt:806
# 0fa0c0d5ea2041459e92f9bebf4cc1df
msgid "Time period: The amount of time you expect users to take filling out comment forms."
msgstr ""

#: ../../releases/1.4.txt:809
#: ../../releases/1.4-alpha-1.txt:678
#: ../../releases/1.4-beta-1.txt:746
# 76c4c9fb0f764cb487f03a3fb4a17096
# b3c06c576bb84b57a699005fc2d5f11f
# 3771283229a846e186c362d9b056b553
msgid "``FormWizard`` security hash"
msgstr ""

#: ../../releases/1.4.txt:811
# f390935042434d27812b0d7e1b943ab5
msgid "Consequences: The user will see an error about the form having expired and will be sent back to the first page of the wizard, losing the data he has entered so far."
msgstr ""

#: ../../releases/1.4.txt:815
# e0c927166cfb42bb9203b0ae69e7ab4f
msgid "Time period: The amount of time you expect users to take filling out the affected forms."
msgstr ""

#: ../../releases/1.4.txt:818
#: ../../releases/1.4-alpha-1.txt:687
#: ../../releases/1.4-beta-1.txt:755
# 8604543c24624de6a25532b127e97e07
# 22316cf5541643f880a1f6ec93a92f29
# aabf84af141f4d58aa9d923c3cb55e9e
msgid "CSRF check"
msgstr ""

#: ../../releases/1.4.txt:820
# 4117745438e14f61b81135cc6db5c960
msgid "Note: This is actually a Django 1.1 fallback, not Django 1.2, and it applies only if you're upgrading from 1.1."
msgstr ""

#: ../../releases/1.4.txt:823
# 2649f9d0d5ed4674ad9da6fee80164fa
msgid "Consequences: The user will see a 403 error with any CSRF-protected POST form."
msgstr ""

#: ../../releases/1.4.txt:826
# 397af37874114b2aadb65153fdb6a7ef
msgid "Time period: The amount of time you expect user to take filling out such forms."
msgstr ""

#: ../../releases/1.4.txt:829
# 9b1c6bf43d75474894478849e7387d0b
msgid "``contrib.auth`` user password hash-upgrade sequence"
msgstr ""

#: ../../releases/1.4.txt:831
# f718bd88adba434895e5c4cf6915480e
msgid "Consequences: Each user's password will be updated to a stronger password hash when it's written to the database in 1.4. This means that if you upgrade to 1.4 and then need to downgrade to 1.3, version 1.3 won't be able to read the updated passwords."
msgstr ""

#: ../../releases/1.4.txt:836
# 8b2884613bde4adc82e9c5f9bf0a04f9
msgid "Remedy: Set :setting:`PASSWORD_HASHERS` to use your original password hashing when you initially upgrade to 1.4. After you confirm your app works well with Django 1.4 and you won't have to roll back to 1.3, enable the new password hashes."
msgstr ""

#: ../../releases/1.4.txt:842
#: ../../releases/1.4-alpha-1.txt:699
#: ../../releases/1.4-beta-1.txt:767
# 741e6bba79a74b5e8b29e5206ffdd7ef
# f9e3f0634b504a23bf64d7058925f669
# b7d6099dd74444e78b359adec5d7da81
msgid "django.contrib.flatpages"
msgstr ""

#: ../../releases/1.4.txt:844
# ef0a29575fc84da8a07a6e208d1b0497
msgid "Starting in 1.4, the :class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` only adds a trailing slash and redirects if the resulting URL refers to an existing flatpage. For example, requesting ``/notaflatpageoravalidurl`` in a previous version would redirect to ``/notaflatpageoravalidurl/``, which would subsequently raise a 404. Requesting ``/notaflatpageoravalidurl`` now will immediately raise a 404."
msgstr ""

#: ../../releases/1.4.txt:852
# 86aa87047a6545d5a769c9ad058a20eb
msgid "Also, redirects returned by flatpages are now permanent (with 301 status code), to match the behavior of :class:`~django.middleware.common.CommonMiddleware`."
msgstr ""

#: ../../releases/1.4.txt:856
#: ../../releases/1.4-alpha-1.txt:712
#: ../../releases/1.4-beta-1.txt:780
# dc51aa6b73b948e8a92e7e1f4cd86cdc
# d875e059b3364b7daf8027c56c2e6b1c
# b6f66d49119f41adaf29883d85645fa0
msgid "Serialization of :class:`~datetime.datetime` and :class:`~datetime.time`"
msgstr ""

#: ../../releases/1.4.txt:858
# ea29f9d671c04d3f8b3888cca90b308d
msgid "As a consequence of time-zone support, and according to the ECMA-262 specification, we made changes to the JSON serializer:"
msgstr ""

#: ../../releases/1.4.txt:861
#: ../../releases/1.4-alpha-1.txt:717
#: ../../releases/1.4-beta-1.txt:785
# 1cdf14dca4614ad6b682d80867c7cc67
# 50b755d8695145bd9e172fbfc7356eeb
# 57d9420e616c40f7bfbae796147e58eb
msgid "It includes the time zone for aware datetime objects. It raises an exception for aware time objects."
msgstr ""

#: ../../releases/1.4.txt:863
#: ../../releases/1.4-alpha-1.txt:719
#: ../../releases/1.4-beta-1.txt:787
# 7b1efd2a0d3643e7b589b2e284ccd77a
# ef1712e344ea41d092b95ff9ead660d3
# 3e1078c4ffa040fea0bd60bd4e243918
msgid "It includes milliseconds for datetime and time objects. There is still some precision loss, because Python stores microseconds (6 digits) and JSON only supports milliseconds (3 digits). However, it's better than discarding microseconds entirely."
msgstr ""

#: ../../releases/1.4.txt:868
# 2ddc55168b4c4c64997734bb4703d18e
msgid "We changed the XML serializer to use the ISO8601 format for datetimes. The letter ``T`` is used to separate the date part from the time part, instead of a space. Time zone information is included in the ``[+-]HH:MM`` format."
msgstr ""

#: ../../releases/1.4.txt:872
# 641a1eb71c1243919d388174bd7d3698
msgid "Though the serializers now use these new formats when creating fixtures, they can still load fixtures that use the old format."
msgstr ""

#: ../../releases/1.4.txt:876
#: ../../releases/1.4-alpha-1.txt:732
#: ../../releases/1.4-beta-1.txt:800
# e1505ebc887d428a85bd6cd75328ace4
# b1169f2b6bbb4b5d88e04422afcc804a
# 7a60dd81935547319145284509562203
msgid "``supports_timezone`` changed to ``False`` for SQLite"
msgstr ""

#: ../../releases/1.4.txt:878
#: ../../releases/1.4-alpha-1.txt:734
#: ../../releases/1.4-beta-1.txt:802
# a741aa0961b642f79fbe1f8f72c55af1
# 4c3b14be7b0e4642820f1d3bfb7582f6
# 7403fc6bd3b54939b15db9e3a9de9d1a
msgid "The database feature ``supports_timezone`` used to be ``True`` for SQLite. Indeed, if you saved an aware datetime object, SQLite stored a string that included an UTC offset. However, this offset was ignored when loading the value back from the database, which could corrupt the data."
msgstr ""

#: ../../releases/1.4.txt:883
# 8167b450bd1a456391b4c1169669105d
msgid "In the context of time-zone support, this flag was changed to ``False``, and datetimes are now stored without time-zone information in SQLite. When :setting:`USE_TZ` is ``False``, if you attempt to save an aware datetime object, Django raises an exception."
msgstr ""

#: ../../releases/1.4.txt:889
# 9467dd0126754786aecbb1860fd45b2a
msgid "``MySQLdb``-specific exceptions"
msgstr ""

#: ../../releases/1.4.txt:891
# 3aba79dee2fb4dbea796f867bc0c9b3b
msgid "The MySQL backend historically has raised ``MySQLdb.OperationalError`` when a query triggered an exception. We've fixed this bug, and we now raise :exc:`django.db.DatabaseError` instead. If you were testing for ``MySQLdb.OperationalError``, you'll need to update your ``except`` clauses."
msgstr ""

#: ../../releases/1.4.txt:898
#: ../../releases/1.4-alpha-1.txt:745
#: ../../releases/1.4-beta-1.txt:813
# e87ead92485b4ef9815a557e556f3633
# 2d4c9926613547ad9c7bc297b02b4574
# 43e88c69424b4392887fd52d3d39cf6d
msgid "Database connection's thread-locality"
msgstr ""

#: ../../releases/1.4.txt:900
#: ../../releases/1.4-alpha-1.txt:747
#: ../../releases/1.4-beta-1.txt:815
# 6b5be75f2cb543178c5d56ca8d0866f1
# c796c5dac8dc498394be50f7cc0fa56f
# e097a7f15c3e4987902ce7aa93431cdc
msgid "``DatabaseWrapper`` objects (i.e. the connection objects referenced by ``django.db.connection`` and ``django.db.connections[\"some_alias\"]``) used to be thread-local. They are now global objects in order to be potentially shared between multiple threads. While the individual connection objects are now global, the ``django.db.connections`` dictionary referencing those objects is still thread-local. Therefore if you just use the ORM or ``DatabaseWrapper.cursor()`` then the behavior is still the same as before. Note, however, that ``django.db.connection`` does not directly reference the default ``DatabaseWrapper`` object anymore and is now a proxy to access that object's attributes. If you need to access the actual ``DatabaseWrapper`` object, use ``django.db.connections[DEFAULT_DB_ALIAS]`` instead."
msgstr ""

#: ../../releases/1.4.txt:912
#: ../../releases/1.4-alpha-1.txt:759
#: ../../releases/1.4-beta-1.txt:827
# 4f453680e3ad4b32885f1c1e78874cb7
# 62d6fc4e38c7495eab25e4b1cd3f288a
# 7c4d70d736944e41aef98f6c968681f9
msgid "As part of this change, all underlying SQLite connections are now enabled for potential thread-sharing (by passing the ``check_same_thread=False`` attribute to pysqlite). ``DatabaseWrapper`` however preserves the previous behavior by disabling thread-sharing by default, so this does not affect any existing code that purely relies on the ORM or on ``DatabaseWrapper.cursor()``."
msgstr ""

#: ../../releases/1.4.txt:918
# 07805a70beee42528d2f371c63579207
msgid "Finally, while it's now possible to pass connections between threads, Django doesn't make any effort to synchronize access to the underlying backend. Concurrency behavior is defined by the underlying backend implementation. Check their documentation for details."
msgstr ""

#: ../../releases/1.4.txt:924
#: ../../releases/1.4-alpha-1.txt:771
#: ../../releases/1.4-beta-1.txt:839
# e4a6ee8bad1343caa2c3ba0365481209
# 88eec49f16bb494086c6eebc477f3841
# eb81c485c5b4447e8de4d2a1c5e16c01
msgid "`COMMENTS_BANNED_USERS_GROUP` setting"
msgstr ""

#: ../../releases/1.4.txt:926
#: ../../releases/1.4-alpha-1.txt:773
#: ../../releases/1.4-beta-1.txt:841
# 4db7b553876b4a49a2a13a9309b00e5a
# 05c78464353345298fa8101b8d0f541c
# de5c4a08e2124fa998f2250ada219205
msgid "Django's :doc:`comments app </ref/contrib/comments/index>` has historically supported excluding the comments of a special user group, but we've never documented the feature properly and didn't enforce the exclusion in other parts of the app such as the template tags. To fix this problem, we removed the code from the feed class."
msgstr ""

#: ../../releases/1.4.txt:932
# 1603b75a4baa401280c20ff1f1956922
msgid "If you rely on the feature and want to restore the old behavior, use a custom comment model manager to exclude the user group, like this::"
msgstr ""

#: ../../releases/1.4.txt:947
# c5406bd1f915492c9196be163738d4f9
msgid "Save this model manager in your custom comment app (e.g., in ``my_comments_app/managers.py``) and add it your :ref:`custom comment app model <custom-comment-app-api>`::"
msgstr ""

#: ../../releases/1.4.txt:961
#: ../../releases/1.4-alpha-1.txt:808
#: ../../releases/1.4-beta-1.txt:876
# 43a4482d7b544cfe85ebdd591367a318
# 724a1b5c3f3b428788ab0bbefe5c5f12
# 0c6590fb755f4282ba03448d7cb58ea3
msgid "For more details, see the documentation about :doc:`customizing the comments framework </ref/contrib/comments/custom>`."
msgstr ""

#: ../../releases/1.4.txt:965
#: ../../releases/1.4-alpha-1.txt:812
#: ../../releases/1.4-beta-1.txt:880
# ca6dad700edb4e96b7c9a96c25ccb159
# b28532214612488d9482e94b7bca25b0
# 8c16d434c92a40fc93afd2c92bb2d77f
msgid "`IGNORABLE_404_STARTS` and `IGNORABLE_404_ENDS` settings"
msgstr ""

#: ../../releases/1.4.txt:967
#: ../../releases/1.4-alpha-1.txt:814
#: ../../releases/1.4-beta-1.txt:882
# 95acca2933884f20a08ebb0e5c816335
# 6695f8abb92949939f81270a5ee23508
# 8b3cf363ba0d41b39a0ba9725aea37ba
msgid "Until Django 1.3, it was possible to exclude some URLs from Django's :doc:`404 error reporting</howto/error-reporting>` by adding prefixes to :setting:`IGNORABLE_404_STARTS` and suffixes to :setting:`IGNORABLE_404_ENDS`."
msgstr ""

#: ../../releases/1.4.txt:971
#: ../../releases/1.4-alpha-1.txt:818
#: ../../releases/1.4-beta-1.txt:886
# 3a356d73012948518f1a68efb1790299
# 3acbcf43ae0a49afbd44edf7aaac4da9
# 7d4a1c2c2b4c4ee1a022acbc58ab4a40
msgid "In Django 1.4, these two settings are superseded by :setting:`IGNORABLE_404_URLS`, which is a list of compiled regular expressions. Django won't send an email for 404 errors on URLs that match any of them."
msgstr ""

#: ../../releases/1.4.txt:975
#: ../../releases/1.4-alpha-1.txt:822
#: ../../releases/1.4-beta-1.txt:890
# 678e8aea81d94fdf9fff5e2b6c9ab0ab
# 6ef6232c82fe4bd8a708354b0fff8a11
# a66b6306daba48cc8b0caab77a8524f9
msgid "Furthermore, the previous settings had some rather arbitrary default values::"
msgstr ""

#: ../../releases/1.4.txt:981
#: ../../releases/1.4-alpha-1.txt:828
#: ../../releases/1.4-beta-1.txt:896
# 393f0f8f1a1548369d06ed87bf80ea3f
# 28c4fc1b809144218da173e8d6141889
# 7d03c67c7ab94db0965af436ca490e94
msgid "It's not Django's role to decide if your website has a legacy ``/cgi-bin/`` section or a ``favicon.ico``. As a consequence, the default values of :setting:`IGNORABLE_404_URLS`, :setting:`IGNORABLE_404_STARTS` and :setting:`IGNORABLE_404_ENDS` are all now empty."
msgstr ""

#: ../../releases/1.4.txt:986
#: ../../releases/1.4-alpha-1.txt:833
#: ../../releases/1.4-beta-1.txt:901
# 62e8aae3cf694163b330191a0f987274
# 9c16c05a7e2b4128bb50c34fe676675a
# 9303cbc897bc40aa866da0b79d3da2a2
msgid "If you have customized :setting:`IGNORABLE_404_STARTS` or :setting:`IGNORABLE_404_ENDS`, or if you want to keep the old default value, you should add the following lines in your settings file::"
msgstr ""

#: ../../releases/1.4.txt:998
# 4771d9c0e1fc4b2ca00d88e83bb7cb8f
msgid "Don't forget to escape characters that have a special meaning in a regular expression, such as periods."
msgstr ""

#: ../../releases/1.4.txt:1002
#: ../../releases/1.4-alpha-1.txt:849
#: ../../releases/1.4-beta-1.txt:917
# 376a6fc54d084add836b13ebfb453d92
# 848fd3fab1de412392f4823db78fcd8a
# d0d7c38ad33a4f48934e923585043611
msgid "CSRF protection extended to PUT and DELETE"
msgstr ""

#: ../../releases/1.4.txt:1004
# e643f7cbd6b54e38b65db6f90bfdcb4d
msgid "Previously, Django's :doc:`CSRF protection </ref/contrib/csrf/>` provided protection only against POST requests. Since use of PUT and DELETE methods in AJAX applications is becoming more common, we now protect all methods not defined as safe by :rfc:`2616` -- i.e., we exempt GET, HEAD, OPTIONS and TRACE, and we enforce protection on everything else."
msgstr ""

#: ../../releases/1.4.txt:1010
# ead23e0cbe8642f8879186dd58a66435
msgid "If you're using PUT or DELETE methods in AJAX applications, please see the :ref:`instructions about using AJAX and CSRF <csrf-ajax>`."
msgstr ""

#: ../../releases/1.4.txt:1014
# 7c2ae1bc34e748019f52c82c8bc40b9c
msgid "Password reset view now accepts ``subject_template_name``"
msgstr ""

#: ../../releases/1.4.txt:1016
# bdb43aa5b7c7496a9355395351de13ab
msgid "The ``password_reset`` view in ``django.contrib.auth`` now accepts a ``subject_template_name`` parameter, which is passed to the password save form as a keyword argument. If you are using this view with a custom password reset form, then you will need to ensure your form's ``save()`` method accepts this keyword argument."
msgstr ""

#: ../../releases/1.4.txt:1023
#: ../../releases/1.4-alpha-1.txt:861
#: ../../releases/1.4-beta-1.txt:929
# 88ede39b75224cad940df7cf68fb7773
# e26c9d3b72d34494b590a3be792a3f82
# 730cff59ac894794b5274383653178d3
msgid "``django.core.template_loaders``"
msgstr ""

#: ../../releases/1.4.txt:1025
# 7f879bdb49bd4c48a79f76346c368f12
msgid "This was an alias to ``django.template.loader`` since 2005, and we've removed it without emitting a warning due to the length of the deprecation. If your code still referenced this, please use ``django.template.loader`` instead."
msgstr ""

#: ../../releases/1.4.txt:1030
#: ../../releases/1.4-alpha-1.txt:868
#: ../../releases/1.4-beta-1.txt:936
# 4a58d787a9d34de18b7d3ea52acf8c5d
# 3ea5691893c040af942356e06e88eb16
# c63e138149ef4788b5c133452c74a8d8
msgid "``django.db.models.fields.URLField.verify_exists``"
msgstr ""

#: ../../releases/1.4.txt:1032
#: ../../releases/1.4-alpha-1.txt:870
#: ../../releases/1.4-beta-1.txt:938
# fbb029b7e9e645e882af6da563ab07a3
# c2051df8e7cb4e08b939a9cffb8d6353
# 5b2443fa2743486f99ff7024b12feca6
msgid "This functionality has been removed due to intractable performance and security issues. Any existing usage of ``verify_exists`` should be removed."
msgstr ""

#: ../../releases/1.4.txt:1037
#: ../../releases/1.4-alpha-1.txt:875
#: ../../releases/1.4-beta-1.txt:943
# 49aa5cfc6304451e8468cfc36b3f9024
# 11be570f80d34937a58b9eab3041bf9a
# 8edad028af394d5ca0b96f29c24caa8c
msgid "``django.core.files.storage.Storage.open``"
msgstr ""

#: ../../releases/1.4.txt:1039
# a838f2cf362f4f78b1a9179c7445a0af
msgid "The ``open`` method of the base Storage class used to take an obscure parameter ``mixin`` that allowed you to dynamically change the base classes of the returned file object. This has been removed. In the rare case you relied on the ``mixin`` parameter, you can easily achieve the same by overriding the ``open`` method, like this::"
msgstr ""

#: ../../releases/1.4.txt:1063
#: ../../releases/1.4-alpha-1.txt:901
#: ../../releases/1.4-beta-1.txt:969
# 7d7ec99b40d34ce0b567c6cb720dfefc
# b8c3d8d7342247e2a19d927fe874d9d1
# 27eec422d70145cc8df4429af3575e87
msgid "YAML deserializer now uses ``yaml.safe_load``"
msgstr ""

#: ../../releases/1.4.txt:1065
# f9695a2fa985453dad148687b0951da7
msgid "``yaml.load`` is able to construct any Python object, which may trigger arbitrary code execution if you process a YAML document that comes from an untrusted source. This feature isn't necessary for Django's YAML deserializer, whose primary use is to load fixtures consisting of simple objects. Even though fixtures are trusted data, the YAML deserializer now uses ``yaml.safe_load`` for additional security."
msgstr ""

#: ../../releases/1.4.txt:1073
#: ../../releases/1.4-alpha-1.txt:1044
#: ../../releases/1.4-beta-1.txt:1112
# 8e73d01ffc8b48e180ed5db577301966
# 87c6c7e90c5f4ffeb511c21ec9b214a3
# d3354058d84049948431e187bbb6c391
msgid "Session cookies now have the ``httponly`` flag by default"
msgstr ""

#: ../../releases/1.4.txt:1075
# 4149ecf3cd6e43bc816c7198a3e54426
msgid "Session cookies now include the ``httponly`` attribute by default to help reduce the impact of potential XSS attacks. As a consequence of this change, session cookie data, including sessionid, is no longer accessible from JavaScript in many browsers. For strict backwards compatibility, use ``SESSION_COOKIE_HTTPONLY = False`` in your settings file."
msgstr ""

#: ../../releases/1.4.txt:1083
# 51130cf31a6443fa9bb62390663c6840
msgid "The :tfilter:`urlize` filter no longer escapes every URL"
msgstr ""

#: ../../releases/1.4.txt:1085
# 2a4298f7fae64d3cb55586eb4828d622
msgid "When a URL contains a ``%xx`` sequence, where ``xx`` are two hexadecimal digits, :tfilter:`urlize` now assumes that the URL is already escaped and doesn't apply URL escaping again. This is wrong for URLs whose unquoted form contains a ``%xx`` sequence, but such URLs are very unlikely to happen in the wild, because they would confuse browsers too."
msgstr ""

#: ../../releases/1.4.txt:1092
# 1015d78ed5e0480080374466f72fbac5
msgid "``assertTemplateUsed`` and ``assertTemplateNotUsed`` as context manager"
msgstr ""

#: ../../releases/1.4.txt:1094
# 1617a1a9951b4bbeab04f95c4c482a86
msgid "It's now possible to check whether a template was used within a block of code with :meth:`~django.test.TestCase.assertTemplateUsed` and :meth:`~django.test.TestCase.assertTemplateNotUsed`. And they can be used as a context manager::"
msgstr ""

#: ../../releases/1.4.txt:1104
# c7da4ea2228047caada413322eabcc3f
msgid "See the :ref:`assertion documentation<assertions>` for more."
msgstr ""

#: ../../releases/1.4.txt:1107
# 3accab556ebb4bdf8b59aa45c50ec9d6
msgid "Database connections after running the test suite"
msgstr ""

#: ../../releases/1.4.txt:1109
# 4b1f27a9a1eb48b185d205e7f2fd2107
msgid "The default test runner no longer restores the database connections after tests' execution. This prevents the production database from being exposed to potential threads that would still be running and attempting to create new connections."
msgstr ""

#: ../../releases/1.4.txt:1114
# bdfad5983f3545f9aa27cc75333ebc2f
msgid "If your code relied on connections to the production database being created after tests' execution, then you can restore the previous behavior by subclassing ``DjangoTestRunner`` and overriding its ``teardown_databases()`` method."
msgstr ""

#: ../../releases/1.4.txt:1120
# 0807b23fc9894a3080bb246207bc833e
msgid "Output of :djadmin:`manage.py help <help>`"
msgstr ""

#: ../../releases/1.4.txt:1122
# e6719d0a43ca4b8ead5894e844a87d28
msgid ":djadmin:`manage.py help <help>` now groups available commands by application. If you depended on the output of this command -- if you parsed it, for example -- then you'll need to update your code. To get a list of all available management commands in a script, use :djadmin:`manage.py help --commands <help>` instead."
msgstr ""

#: ../../releases/1.4.txt:1129
# 9099180347e94367b1fd399715f451aa
msgid "``extends`` template tag"
msgstr ""

#: ../../releases/1.4.txt:1131
# e648616e170544509e2a911936ca2086
msgid "Previously, the :ttag:`extends` tag used a buggy method of parsing arguments, which could lead to it erroneously considering an argument as a string literal when it wasn't. It now uses ``parser.compile_filter``, like other tags."
msgstr ""

#: ../../releases/1.4.txt:1135
# 90d9d44d0fa649678ff973e265904957
msgid "The internals of the tag aren't part of the official stable API, but in the interests of full disclosure, the ``ExtendsNode.__init__`` definition has changed, which may break any custom tags that use this class."
msgstr ""

#: ../../releases/1.4.txt:1140
# 5a8d7659f2824bb2bd8af6879eb84540
msgid "Loading some incomplete fixtures no longer works"
msgstr ""

#: ../../releases/1.4.txt:1142
# a6f03d1ad6f0420286049532374f3ea6
msgid "Prior to 1.4, a default value was inserted for fixture objects that were missing a specific date or datetime value when auto_now or auto_now_add was set for the field. This was something that should not have worked, and in 1.4 loading such incomplete fixtures will fail. Because fixtures are a raw import, they should explicitly specify all field values, regardless of field options on the model."
msgstr ""

#: ../../releases/1.4.txt:1149
# c9fc9cd3122d4b44aac9192789ef5a7e
msgid "Development Server Multithreading"
msgstr ""

#: ../../releases/1.4.txt:1151
# fc120da735984b24bc6ec5bf643af752
msgid "The development server is now is multithreaded by default. Use the :djadminopt:`--nothreading` option to disable the use of threading in the development server::"
msgstr ""

#: ../../releases/1.4.txt:1158
# c292bdeebfd54a2ca66667e9e57bd38d
msgid "Attributes disabled in markdown when safe mode set"
msgstr ""

#: ../../releases/1.4.txt:1160
# 2fb0442ea2ad40caa614fdb6cb389252
msgid "Prior to Django 1.4, attributes were included in any markdown output regardless of safe mode setting of the filter. With version > 2.1 of the Python-Markdown library, an enable_attributes option was added. When the safe argument is passed to the markdown filter, both the ``safe_mode=True`` and ``enable_attributes=False`` options are set. If using a version of the Python-Markdown library less than 2.1, a warning is issued that the output is insecure."
msgstr ""

#: ../../releases/1.4.txt:1169
# b152e15eed024fb18001ab59ad9a0763
msgid "FormMixin get_initial returns an instance-specific dictionary"
msgstr ""

#: ../../releases/1.4.txt:1171
# b4ed8e7758734811af578d0e604aafef
msgid "In Django 1.3, the ``get_initial`` method of the :class:`django.views.generic.edit.FormMixin` class was returning the class ``initial`` dictionary. This has been fixed to return a copy of this dictionary, so form instances can modify their initial data without messing with the class variable."
msgstr ""

#: ../../releases/1.4.txt:1178
#: ../../releases/1.4-alpha-1.txt:911
#: ../../releases/1.4-beta-1.txt:979
# e4fab2983dab40f6b1dfd0a9291331e7
# 64b224e0131e4a9b89971dd75af6e0eb
# 35fe2edcee614db4a5437b8f7a614c26
msgid "Features deprecated in 1.4"
msgstr ""

#: ../../releases/1.4.txt:1181
#: ../../releases/1.4-alpha-1.txt:914
#: ../../releases/1.4-beta-1.txt:982
# d7404b2822cb4f3d8cbd1b036e0d2427
# f2f2eb1356f54e5aa66aa7ea9eb43042
# 6803ee7c1f1d4fda883d05b082b6b0f2
msgid "Old styles of calling ``cache_page`` decorator"
msgstr ""

#: ../../releases/1.4.txt:1183
# 60721f32bbcd466d87d1aaa51a94513d
msgid "Some legacy ways of calling :func:`~django.views.decorators.cache.cache_page` have been deprecated. Please see the documentation for the correct way to use this decorator."
msgstr ""

#: ../../releases/1.4.txt:1188
#: ../../releases/1.4-alpha-1.txt:921
#: ../../releases/1.4-beta-1.txt:989
# 1d16474343d4410586b0a8b22983a76f
# d71d18e568604e5789ae99dde3c6abe0
# 650398acbecc4bdba7b8eec056a2d698
msgid "Support for PostgreSQL versions older than 8.2"
msgstr ""

#: ../../releases/1.4.txt:1190
# 5ebec73a530f44e9ad85a1a5448924a2
msgid "Django 1.3 dropped support for PostgreSQL versions older than 8.0, and we suggested using a more recent version because of performance improvements and, more importantly, the end of upstream support periods for 8.0 and 8.1 was near (November 2010)."
msgstr ""

#: ../../releases/1.4.txt:1195
#: ../../releases/1.4-alpha-1.txt:928
#: ../../releases/1.4-beta-1.txt:996
# 9f2e535f56c948a0bc4b4282a84cfc31
# e0a1c584a2724c17acdbf8b5e7847472
# b5f7ff1ca20c4a18a029cc963ac5dbc0
msgid "Django 1.4 takes that policy further and sets 8.2 as the minimum PostgreSQL version it officially supports."
msgstr ""

#: ../../releases/1.4.txt:1199
#: ../../releases/1.4-alpha-1.txt:932
#: ../../releases/1.4-beta-1.txt:1000
# 04f16224201c4decb07518e17262206a
# b1eb72fc723e4995aab0e3c50de8184d
# ec344ef4e8624b26b68377f02d12ca5a
msgid "Request exceptions are now always logged"
msgstr ""

#: ../../releases/1.4.txt:1201
# a31c831dc296430e939a2e50d5040fff
msgid "When we added :doc:`logging support </topics/logging/>` in Django in 1.3, the admin error email support was moved into the :class:`django.utils.log.AdminEmailHandler`, attached to the ``'django.request'`` logger. In order to maintain the established behavior of error emails, the ``'django.request'`` logger was called only when :setting:`DEBUG` was ``False``."
msgstr ""

#: ../../releases/1.4.txt:1208
#: ../../releases/1.4-alpha-1.txt:941
#: ../../releases/1.4-beta-1.txt:1009
# e41cf6ee57074ccaab2e04aa12907c58
# 2011b24d84b6420cacd88d23073e78dc
# 4da5af4f559246a7b2d7eff024fe519e
msgid "To increase the flexibility of error logging for requests, the ``'django.request'`` logger is now called regardless of the value of :setting:`DEBUG`, and the default settings file for new projects now includes a separate filter attached to :class:`django.utils.log.AdminEmailHandler` to prevent admin error emails in ``DEBUG`` mode::"
msgstr ""

#: ../../releases/1.4.txt:1227
# a48ac32d6e844699b65450d62cbca852
msgid "If your project was created prior to this change, your :setting:`LOGGING` setting will not include this new filter. In order to maintain backwards-compatibility, Django will detect that your ``'mail_admins'`` handler configuration includes no ``'filters'`` section and will automatically add this filter for you and issue a pending-deprecation warning. This will become a deprecation warning in Django 1.5, and in Django 1.6 the backwards-compatibility shim will be removed entirely."
msgstr ""

#: ../../releases/1.4.txt:1235
#: ../../releases/1.4-alpha-1.txt:968
#: ../../releases/1.4-beta-1.txt:1036
# d35c2d32e03648338003d79d3a2079b6
# a901b0e0a10645818aa5b2e51e39ff68
# 033df286d9104962be51ed8818557e27
msgid "The existence of any ``'filters'`` key under the ``'mail_admins'`` handler will disable this backward-compatibility shim and deprecation warning."
msgstr ""

#: ../../releases/1.4.txt:1239
#: ../../releases/1.4-alpha-1.txt:972
#: ../../releases/1.4-beta-1.txt:1040
# 62fd54fdf1894ec0887f5eaf878e8c69
# f792ded615104e9992d2268f23a518e1
# 53566fbf2f9f4d50b99f99e04be3139a
msgid "``django.conf.urls.defaults``"
msgstr ""

#: ../../releases/1.4.txt:1241
# 46e3abfeb38d4f6a801741ed26c3bbf7
msgid "Until Django 1.3, the functions :func:`~django.conf.urls.include`, :func:`~django.conf.urls.patterns` and :func:`~django.conf.urls.url` plus :data:`~django.conf.urls.handler404`, :data:`~django.conf.urls.handler500` were located in a ``django.conf.urls.defaults`` module."
msgstr ""

#: ../../releases/1.4.txt:1246
# 30b2c60d7e7341c4866584b6a8d16abd
msgid "In Django 1.4, they live in :mod:`django.conf.urls`."
msgstr ""

#: ../../releases/1.4.txt:1249
#: ../../releases/1.4-alpha-1.txt:982
#: ../../releases/1.4-beta-1.txt:1050
# ac3589ede705466287a819335274449f
# 9a19cdb787164c779512f996524e409c
# 8b549f1fc68948069e4ead8291d8aac4
msgid "``django.contrib.databrowse``"
msgstr ""

#: ../../releases/1.4.txt:1251
#: ../../releases/1.4-alpha-1.txt:984
#: ../../releases/1.4-beta-1.txt:1052
# 04b63cc521664e87bc79f2f83faa95c7
# c8a64a3247074d109e577a4b28df9b72
# 76ae7c743f3040e290f7b291681af098
msgid "Databrowse has not seen active development for some time, and this does not show any sign of changing. There had been a suggestion for a `GSOC project`_ to integrate the functionality of databrowse into the admin, but no progress was made. While Databrowse has been deprecated, an enhancement of ``django.contrib.admin`` providing a similar feature set is still possible."
msgstr ""

#: ../../releases/1.4.txt:1259
# e477aa00531249e696b9f7c1aa7ff15a
msgid "The code that powers Databrowse is licensed under the same terms as Django itself, so it's available to be adopted by an individual or group as a third-party project."
msgstr ""

#: ../../releases/1.4.txt:1264
#: ../../releases/1.4-alpha-1.txt:997
#: ../../releases/1.4-beta-1.txt:1065
# ab08a4e6239f452cb91d2c0eedb6e1bd
# e725c5c41dbc481285fd6414ec56f05a
# 0d72c0484ec64c5a89d57d73dd7ac90c
msgid "``django.core.management.setup_environ``"
msgstr ""

#: ../../releases/1.4.txt:1266
#: ../../releases/1.4-alpha-1.txt:999
#: ../../releases/1.4-beta-1.txt:1067
# ce32235872d0464aad56577011ec2a70
# d74d88c63c5d42cfadc82100a5a5510a
# a89b377c5849484a89fe0a53906cc490
msgid "This function temporarily modified ``sys.path`` in order to make the parent \"project\" directory importable under the old flat :djadmin:`startproject` layout. This function is now deprecated, as its path workarounds are no longer needed with the new ``manage.py`` and default project layout."
msgstr ""

#: ../../releases/1.4.txt:1271
# 186776228d08423fa87b02d099bd96c3
msgid "This function was never documented or part of the public API, but it was widely recommended for use in setting up a \"Django environment\" for a user script. These uses should be replaced by setting the ``DJANGO_SETTINGS_MODULE`` environment variable or using :func:`django.conf.settings.configure`."
msgstr ""

#: ../../releases/1.4.txt:1277
#: ../../releases/1.4-alpha-1.txt:1010
#: ../../releases/1.4-beta-1.txt:1078
# 09a04cbf031b42da9d0305f44784cfa5
# ba56c230ad244cf2aabc74363b22fea8
# 2d92eaab795745bd971abe70b237b77d
msgid "``django.core.management.execute_manager``"
msgstr ""

#: ../../releases/1.4.txt:1279
#: ../../releases/1.4-alpha-1.txt:1012
#: ../../releases/1.4-beta-1.txt:1080
# 9ef05cb1ca2b425d9d55cf0a08e0ab3c
# f14d69a2b11a4ade98fa35758c77582b
# 6831d74b25ac47d5a81c508b5e2a1ca1
msgid "This function was previously used by ``manage.py`` to execute a management command. It is identical to ``django.core.management.execute_from_command_line``, except that it first calls ``setup_environ``, which is now deprecated. As such, ``execute_manager`` is also deprecated; ``execute_from_command_line`` can be used instead. Neither of these functions is documented as part of the public API, but a deprecation path is needed due to use in existing ``manage.py`` files."
msgstr ""

#: ../../releases/1.4.txt:1288
#: ../../releases/1.4-alpha-1.txt:1021
#: ../../releases/1.4-beta-1.txt:1089
# ccd9533eda35464cb1946df7d806eb3b
# 4b1431a462644c699e3a2bf8657f0f0f
# c22bab8c918041819b77ac0789d0427f
msgid "``is_safe`` and ``needs_autoescape`` attributes of template filters"
msgstr ""

#: ../../releases/1.4.txt:1290
#: ../../releases/1.4-alpha-1.txt:1023
#: ../../releases/1.4-beta-1.txt:1091
# 4b7743ef88524bc78a0f5e34ccb6ebee
# 2fec74efd3224ea3a2fe2b5ea76c066b
# ed2bc6bc4dee44718ab145e0d2459718
msgid "Two flags, ``is_safe`` and ``needs_autoescape``, define how each template filter interacts with Django's auto-escaping behavior. They used to be attributes of the filter function::"
msgstr ""

#: ../../releases/1.4.txt:1299
#: ../../releases/1.4-alpha-1.txt:1032
#: ../../releases/1.4-beta-1.txt:1100
# 3332caaae8c0426a899ab1454408f44d
# cdd07ac066aa433e8fab929355eaea79
# 4ead59a4048b41e987cef44426dfae5d
msgid "However, this technique caused some problems in combination with decorators, especially :func:`@stringfilter <django.template.defaultfilters.stringfilter>`. Now, the flags are keyword arguments of :meth:`@register.filter <django.template.Library.filter>`::"
msgstr ""

#: ../../releases/1.4.txt:1308
#: ../../releases/1.4-alpha-1.txt:1041
#: ../../releases/1.4-beta-1.txt:1109
# 9196094214ab4a7bb991320542e536ab
# 5f02b8ea19194296939e214a50a5594e
# 6db0f3ea4ea84e84abca37a7d0df8eef
msgid "See :ref:`filters and auto-escaping <filters-auto-escaping>` for more information."
msgstr ""

#: ../../releases/1.4.txt:1311
#: ../../releases/1.4-alpha-1.txt:1051
#: ../../releases/1.4-beta-1.txt:1122
# e5453d6e47ff4cda9c7efd77f583b023
# 66d8dbfe6e144544bc95a744ce4802c2
# 5c4f11b7346f44aa984f4264f3c96ced
msgid "Wildcard expansion of application names in `INSTALLED_APPS`"
msgstr ""

#: ../../releases/1.4.txt:1313
#: ../../releases/1.4-alpha-1.txt:1053
#: ../../releases/1.4-beta-1.txt:1124
# 10caabb9cdd44c16bfe5ce773c8c9983
# bb60fd8e75a44a7ea2f13a8fd22a96c3
# 8e3b0fd09c9b4c14ae4ab6a6f1cb605f
msgid "Until Django 1.3, :setting:`INSTALLED_APPS` accepted wildcards in application names, like ``django.contrib.*``. The expansion was performed by a filesystem-based implementation of ``from <package> import *``. Unfortunately, `this can't be done reliably`_."
msgstr ""

#: ../../releases/1.4.txt:1318
#: ../../releases/1.4-alpha-1.txt:1058
#: ../../releases/1.4-beta-1.txt:1129
# c94b13b45d4c48bf8fd8949352761115
# f67a01ed57574e42bff5f8dd69313295
# ccdc859e78cc47698ff533c302ac5c25
msgid "This behavior was never documented. Since it is un-pythonic and not obviously useful, it was removed in Django 1.4. If you relied on it, you must edit your settings file to list all your applications explicitly."
msgstr ""

#: ../../releases/1.4.txt:1325
#: ../../releases/1.4-alpha-1.txt:1065
#: ../../releases/1.4-beta-1.txt:1136
# 2dd0f22935ec4d2aba1ec35fdfd43e92
# 2749233f09134453ad5a6306ddf75738
# c962f51b1f9546cea989c36727924a51
msgid "``HttpRequest.raw_post_data`` renamed to ``HttpRequest.body``"
msgstr ""

#: ../../releases/1.4.txt:1327
#: ../../releases/1.4-alpha-1.txt:1067
#: ../../releases/1.4-beta-1.txt:1138
# 9a31a5b6f8fe4bd2a8503d3c24768d9b
# 949d07ded7344f488ef8df4dc7d9eae7
# f378954ea18946dba66cf6bce301a06a
msgid "This attribute was confusingly named ``HttpRequest.raw_post_data``, but it actually provided the body of the HTTP request. It's been renamed to ``HttpRequest.body``, and ``HttpRequest.raw_post_data`` has been deprecated."
msgstr ""

#: ../../releases/1.4.txt:1332
# 9029d55dd063420f8f02a336b6ac229e
msgid "``django.contrib.sitemaps`` bug fix with potential performance implications"
msgstr ""

#: ../../releases/1.4.txt:1334
# dbd839aa06084ff0a8a936a4481c0ed5
msgid "In previous versions, ``Paginator`` objects used in sitemap classes were cached, which could result in stale site maps. We've removed the caching, so each request to a site map now creates a new Paginator object and calls the :attr:`~django.contrib.sitemaps.Sitemap.items()` method of the :class:`~django.contrib.sitemaps.Sitemap` subclass. Depending on what your ``items()`` method is doing, this may have a negative performance impact. To mitigate the performance impact, consider using the :doc:`caching framework </topics/cache>` within your ``Sitemap`` subclass."
msgstr ""

#: ../../releases/1.4.txt:1344
# bc19df426d4740bca4e2b818127b9d4f
msgid "Versions of Python-Markdown earlier than 2.1"
msgstr ""

#: ../../releases/1.4.txt:1346
# b8d2c03edaa44b0481a2477342b1c524
msgid "Versions of Python-Markdown earlier than 2.1 do not support the option to disable attributes. As a security issue, earlier versions of this library will not be supported by the markup contrib app in 1.5 under an accelerated deprecation timeline."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:3
# 8c9b31431614415fa57fe1bab12c287f
msgid "Django 1.4 alpha release notes"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:5
# f79edbaf28594443bdb4d274a3d5b7f0
msgid "December 22, 2011."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:7
# 5eb260cdab974670b9f21ea294f66eca
msgid "Welcome to Django 1.4 alpha!"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:9
# 704780eba01444c99bff3f9002c09d78
msgid "This is the first in a series of preview/development releases leading up to the eventual release of Django 1.4, scheduled for March 2012. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.4 release."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:18
# fc621b811aa54d44ae6953dfad98fe5e
msgid "Django 1.4 alpha includes various `new features`_ and some minor `backwards incompatible changes`_. There are also some features that have been dropped, which are detailed in :doc:`our deprecation plan </internals/deprecation>`, and we've `begun the deprecation process for some features`_."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:30
#: ../../releases/1.4-beta-1.txt:46
# f9285d4bd0994ea096d27707a32aaaa1
# e957727a6e204f56913dcd8c19d27eae
msgid "While not a new feature, it's important to note that Django 1.4 introduces the second shift in our Python compatibility policy since Django's initial public debut. Django 1.2 dropped support for Python 2.3; now Django 1.4 drops support for Python 2.4. As such, the minimum Python version required for Django is now 2.5, and Django is tested and supported on Python 2.5, 2.6 and 2.7."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:36
#: ../../releases/1.4-beta-1.txt:52
# 76330546099f403b9c5735858a1b5112
# 0809f7a23cc64f119a2ae8db0e710993
msgid "This change should affect only a small number of Django users, as most operating-system vendors today are shipping Python 2.5 or newer as their default version. If you're still using Python 2.4, however, you'll need to stick to Django 1.3 until you can upgrade; per :doc:`our support policy </internals/release-process>`, Django 1.3 will continue to receive security support until the release of Django 1.5."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:43
#: ../../releases/1.4-beta-1.txt:59
# 15ed7d4ced33416d8610498899ef9420
# 8a4bda12f8d04d23a48d2d051446fe88
msgid "Django does not support Python 3.x at this time. A document outlining our full timeline for deprecating Python 2.x and moving to Python 3.x will be published before the release of Django 1.4."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:65
#: ../../releases/1.4-beta-1.txt:81
# 7b353df418a641ad9a89997f28610604
# fcba31a46b1141e6b1b1d10b1d3f5040
msgid "Django 1.4 now includes a :meth:`QuerySet.select_for_update() <django.db.models.query.QuerySet.select_for_update>` method which generates a ``SELECT ... FOR UPDATE`` SQL query. This will lock rows until the end of the transaction, meaning that other transactions cannot modify or delete rows matched by a ``FOR UPDATE`` query."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:77
#: ../../releases/1.4-beta-1.txt:93
# 66f31d322e82406786dab727915e0497
# 86dc553c401947d4af780b11bf6292dc
msgid "This method allows for more efficient creation of multiple objects in the ORM. It can provide significant performance increases if you have many objects. Django makes use of this internally, meaning some operations (such as database setup for test suites) have seen a performance benefit as a result."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:88
#: ../../releases/1.4-beta-1.txt:104
# d303f02e6f704904be0c33070d4b95bb
# 96a4756ba6794ed3ab19a8f0d98822e2
msgid "Similar to :meth:`~django.db.models.query.QuerySet.select_related` but with a different strategy and broader scope, :meth:`~django.db.models.query.QuerySet.prefetch_related` has been added to :class:`~django.db.models.query.QuerySet`. This method returns a new ``QuerySet`` that will prefetch each of the specified related lookups in a single batch as soon as the query begins to be evaluated. Unlike ``select_related``, it does the joins in Python, not in the database, and supports many-to-many relationships, :class:`~django.contrib.contenttypes.generic.GenericForeignKey` and more. This allows you to fix a very common performance problem in which your code ends up doing O(n) database queries (or worse) if objects on your primary ``QuerySet`` each have many related objects that you also need."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:119
#: ../../releases/1.4-beta-1.txt:150
# 615760f3e7be474181f3028dd56f429d
# 84e93c28a1e644e79f235d37410e2202
msgid "HTML5 Doctype"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:130
#: ../../releases/1.4-beta-1.txt:161
# df389775fc084335bded30eb12a61d6c
# 8571da0186c74aa9bc409544bb7244b3
msgid "Prior to Django 1.4, the :mod:`~django.contrib.admin` app allowed you to specify change list filters by specifying a field lookup, but didn't allow you to create custom filters. This has been rectified with a simple API (previously used internally and known as \"FilterSpec\"). For more details, see the documentation for :attr:`~django.contrib.admin.ModelAdmin.list_filter`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:139
#: ../../releases/1.4-beta-1.txt:170
# 7575ef359c4f4e34b091094d18f518e7
# f72f054641124274a1777dea5c5e1ea4
msgid "The admin change list now supports sorting on multiple columns. It respects all elements of the :attr:`~django.contrib.admin.ModelAdmin.ordering` attribute, and sorting on multiple columns by clicking on headers is designed to mimic the behavior of desktop GUIs. The :meth:`~django.contrib.admin.ModelAdmin.get_ordering` method for specifying the ordering dynamically (e.g. depending on the request) has also been added."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:149
#: ../../releases/1.4-beta-1.txt:180
# d441136b1a31442590408bc44616f834
# f3da86f4b30c41c183b7c310224a7e8c
msgid "A new :meth:`~django.contrib.admin.ModelAdmin.save_related` method was added to :mod:`~django.contrib.admin.ModelAdmin` to ease customization of how related objects are saved in the admin."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:153
#: ../../releases/1.4-beta-1.txt:184
# 33ee8014dd964bc7bf804bc407b71bec
# 1e01a295178b41f99c4ff032ef16f2e2
msgid "Two other new methods, :meth:`~django.contrib.admin.ModelAdmin.get_list_display` and :meth:`~django.contrib.admin.ModelAdmin.get_list_display_links` were added to :class:`~django.contrib.admin.ModelAdmin` to enable the dynamic customization of fields and links displayed on the admin change list."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:162
#: ../../releases/1.4-beta-1.txt:193
# 6aadd69272104bcfb34eb14d990e75bd
# a6e7cef7fc1f401da722c26704b6dfc1
msgid "Admin inlines will now only allow those actions for which the user has permission. For ``ManyToMany`` relationships with an auto-created intermediate model (which does not have its own permissions), the change permission for the related model determines if the user has the permission to add, change or delete relationships."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:181
#: ../../releases/1.4-beta-1.txt:212
# fbc1bc11fec441d08a3c7ba686720c9b
# 9fee44ee1f734f72a4d40368aa32f812
msgid "Django 1.4 introduces a new cookie-based backend for the session framework which uses the tools for :doc:`cryptographic signing </topics/signing>` to store the session data in the client's browser."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:191
#: ../../releases/1.4-beta-1.txt:229
# f5991de972ce4fae9b40cb47b9ca764e
# acec69a53bc648bdb1faeb5e7f000809
msgid "The previous ``FormWizard`` from the formtools contrib app has been replaced with a new implementation based on the class-based views introduced in Django 1.3. It features a pluggable storage API and doesn't require the wizard to pass around hidden fields for every previous step."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:207
#: ../../releases/1.4-beta-1.txt:245
# 2942567a6f5e4136b7573cee19d26f2c
# 079fc8aa9aa2456c8022088e34d54274
msgid "A lazily evaluated version of :func:`django.core.urlresolvers.reverse` was added to allow using URL reversals before the project's URLConf gets loaded."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:213
#: ../../releases/1.4-beta-1.txt:251
# cc4d4cfed7024c5abebb8eadccd81db3
# 5af6d9c8be674b988f5ee6944f469e91
msgid "Django 1.4 gained the ability to look for a language prefix in the URL pattern when using the new :func:`~django.conf.urls.i18n.i18n_patterns` helper function. Additionally, it's now possible to define translatable URL patterns using :func:`~django.utils.translation.ugettext_lazy`. See :ref:`url-internationalization` for more information about the language prefix and how to internationalize URL patterns."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:231
#: ../../releases/1.4-beta-1.txt:269
# e3aedf303aed4087833037310b10319d
# 5a95ffb4d23849febca5af44b9b3d878
msgid "Two new attributes, :attr:`pk_url_kwarg<django.views.generic.detail.SingleObjectMixin.pk_url_kwarg>` and :attr:`slug_url_kwarg<django.views.generic.detail.SingleObjectMixin.slug_url_kwarg>`, have been added to :class:`~django.views.generic.detail.SingleObjectMixin` to enable the customization of URLConf keyword arguments used for single object generic views."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:265
#: ../../releases/1.4-beta-1.txt:303
# ad0b9dcc6f1c4fc08fc24eebf995907e
# 5ed224eca8564636b2e44b577572aaa0
msgid "Then in the template any number of arguments may be passed to the template tag. For example:"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:290
#: ../../releases/1.4-beta-1.txt:328
# b2710dc84022487889d410c5a3923f58
# 4978ff6465224f278d31678a2f46102f
msgid "Added a filter which truncates a string to be no longer than the specified number of characters. Truncated strings end with a translatable ellipsis sequence (\"...\"). See the documentation for :tfilter:`truncatechars` for more details."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:307
#: ../../releases/1.4-beta-1.txt:345
# a2c0e54a99504797929ff4dddea0bee7
# 350f6bffd33b43fca60c71529ca89107
msgid "In addition to the `static template tag`_, the :mod:`staticfiles<django.contrib.staticfiles>` contrib app now has a :class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage` backend which caches the files it saves (when running the :djadmin:`collectstatic` management command) by appending the MD5 hash of the file's content to the filename. For example, the file ``css/styles.css`` would also be saved as ``css/styles.55e7cbb9ba48.css``"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:330
#: ../../releases/1.4-beta-1.txt:368
# 4a8203cca1414033a366da2cbc4919e6
# 007edb72571a4a989ea95f3b74868155
msgid "We've made various improvements to our CSRF features, including the :func:`~django.views.decorators.csrf.ensure_csrf_cookie` decorator which can help with AJAX heavy sites, protection for PUT and DELETE requests, and the :setting:`CSRF_COOKIE_SECURE` and :setting:`CSRF_COOKIE_PATH` settings which can improve the security and usefulness of the CSRF protection. See the :doc:`CSRF docs </ref/contrib/csrf>` for more information."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:340
#: ../../releases/1.4-beta-1.txt:378
# 8ea283d034584080ab89d6b48e9f2856
# ce39905ea0da4547b1105ee9fe8554c5
msgid "Two new function decorators, :func:`sensitive_variables` and :func:`sensitive_post_parameters`, were added to allow designating the local variables and POST parameters which may contain sensitive information and should be filtered out of error reports."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:345
#: ../../releases/1.4-beta-1.txt:383
# d6419f91acc54fb5aea5d56648f3df2b
# e86b6d9f8e5e4bfbb4799e508148946b
msgid "All POST parameters are now systematically filtered out of error reports for certain views (``login``, ``password_reset_confirm``, ``password_change``, and ``add_view`` in :mod:`django.contrib.auth.views`, as well as ``user_change_password`` in the admin app) to prevent the leaking of sensitive information such as user passwords."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:351
#: ../../releases/1.4-beta-1.txt:389
# 4051f470001a478a91802642c8c27cc8
# 49c945b0b22b468a82abe7a67bb2b6ab
msgid "You may override or customize the default filtering by writing a :ref:`custom filter<custom-error-reports>`. For more information see the docs on :ref:`Filtering error reports<filtering-error-reports>`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:358
#: ../../releases/1.4-beta-1.txt:396
# 1f094d41644e40f894f1b3fa4338a483
# 8180c901c01d4d3cb1f79fb2145f9718
msgid "The previously added support for IPv6 addresses when using the runserver management command in Django 1.3 has now been further extended by adding a :class:`~django.db.models.GenericIPAddressField` model field, a :class:`~django.forms.GenericIPAddressField` form field and the validators :data:`~django.core.validators.validate_ipv46_address` and :data:`~django.core.validators.validate_ipv6_address`"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:374
#: ../../releases/1.4-beta-1.txt:412
# 82fa3ef0adef44ce829b22fe17dd4b73
# 5c7f8453588343658b7756513a66e370
msgid "The previous ``manage.py`` called functions that are now deprecated, and thus projects upgrading to Django 1.4 should update their ``manage.py``. (The old-style ``manage.py`` will continue to work as before until Django 1.6; in 1.5 it will raise ``DeprecationWarning``)."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:394
#: ../../releases/1.4-beta-1.txt:432
# 2c44958470734773acbc27ac38c1b77d
# 9185c10ccd834cac8edafef5293e8312
msgid "If settings, URLconfs, and apps within the project are imported or referenced using the project name prefix (e.g. ``myproject.settings``, ``ROOT_URLCONF = \"myproject.urls\"``, etc), the new ``manage.py`` will need to be moved one directory up, so it is outside the project package rather than adjacent to ``settings.py`` and ``urls.py``."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:439
#: ../../releases/1.4-beta-1.txt:477
# 8a718cba04ca4f27a5e851838c999cfb
# 0d78768a5a664ebda651c9b8fc33e389
msgid "The :djadmin:`built-in development server<runserver>` now supports using an externally-defined WSGI callable, so as to make it possible to run runserver with the same WSGI configuration that is used for deployment. A new :setting:`WSGI_APPLICATION` setting is available to configure which WSGI callable :djadmin:`runserver` uses."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:451
#: ../../releases/1.4-beta-1.txt:489
# 9d300fa5672743148349469b2c09df50
# fc3a0a633e2f45bfa8788dc27235a0a9
msgid "The :djadmin:`startapp` and :djadmin:`startproject` management commands got a ``--template`` option for specifying a path or URL to a custom app or project template."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:455
#: ../../releases/1.4-beta-1.txt:493
# 57486c68c4424f4f91f58a024c216d10
# c3d70ebcddd8430fad56816e273aca8f
msgid "For example, Django will use the ``/path/to/my_project_template`` directory when running the following command::"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:472
#: ../../releases/1.4-beta-1.txt:510
# 968dcd759d8c4137b3223fdd93901826
# aae1ce9048a64fbdaa213562bc9c55af
msgid "Django 1.4 adds :ref:`support for time zones <time-zones>`. When it's enabled, Django stores date and time information in UTC in the database, uses time zone-aware datetime objects internally, and translates them to the end user's time zone in templates and forms."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:477
#: ../../releases/1.4-beta-1.txt:515
# 5c18d52a9a4f453382c549d327fc19e0
# f759d9b8125f4961b5979699e007d46b
msgid "Reasons for using this feature include:"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:485
#: ../../releases/1.4-beta-1.txt:523
# b00d5ec9306b45d39c803a7a137b42b9
# bc328bbff69647eca264da88119a7341
msgid "Time zone support is enabled by default in new projects created with :djadmin:`startproject`. If you want to use this feature in an existing project, there is a :ref:`migration guide <time-zones-migration-guide>`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:494
#: ../../releases/1.4-beta-1.txt:554
# bfefcffda52d4256836721e818ebb726
# eb93d719aead4df9a8388c2fff39986d
msgid "A more usable stacktrace in the technical 500 page: frames in the stack trace which reference Django's code are dimmed out, while frames in user code are slightly emphasized. This change makes it easier to scan a stacktrace for issues in user code."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:506
#: ../../releases/1.4-beta-1.txt:566
# bbfce36043794915ab124b5009697f36
# bee9df4b8ccb417da62de38d7f839665
msgid "The ``django.contrib.auth.models.check_password`` function has been moved to the ``django.contrib.auth.utils`` module. Importing it from the old location will still work, but you should update your imports."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:510
#: ../../releases/1.4-beta-1.txt:570
# 9187d3c3eadc4eadb168500716ea3dff
# f6e9b6b4c2d24799bf1bb2659751ed73
msgid "The :djadmin:`collectstatic` management command gained a ``--clear`` option to delete all files at the destination before copying or linking the static files."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:514
#: ../../releases/1.4-beta-1.txt:574
# f75997b43eae4171bcc2e2cfc3e68a1a
# 14189108340349ebabda927871371197
msgid "It is now possible to load fixtures containing forward references when using MySQL with the InnoDB database engine."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:529
#: ../../releases/1.4-beta-1.txt:589
# 668e4bd2a3624efcb8e0b326646603c4
# a9adc56de03b40b2ab86690b811b1167
msgid "A new plain text version of the HTTP 500 status code internal error page served when :setting:`DEBUG` is ``True`` is now sent to the client when Django detects that the request has originated in JavaScript code (:meth:`~django.http.HttpRequest.is_ajax` is used for this)."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:534
#: ../../releases/1.4-beta-1.txt:594
# d2006e706c5545ab99f0c55ec6a9ba60
# 42e266d2b0b8417ea5418c3c9c31ebd6
msgid "Similarly to its HTML counterpart, it contains a collection of different pieces of information about the state of the web application."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:537
#: ../../releases/1.4-beta-1.txt:597
# ab88d5e7c0d041af82d94f8bf8a6500c
# ad98356645db4b41b7b7d2ac3196a5b7
msgid "This should make it easier to read when debugging interaction with client-side Javascript code."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:569
#: ../../releases/1.4-beta-1.txt:637
# e9cdd70e9e1f4466a0ce09a5c031a6bc
# 1be19d56748c4104a21a2e9079fd9017
msgid "Starting in Django 1.4 the admin's static files also follow this convention to make it easier to deploy the included files. In previous versions of Django, it was also common to define an ``ADMIN_MEDIA_PREFIX`` setting to point to the URL where the admin's static files are served by a web server. This setting has now been deprecated and replaced by the more general setting :setting:`STATIC_URL`. Django will now expect to find the admin static files under the URL ``<STATIC_URL>/admin/``."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:577
#: ../../releases/1.4-beta-1.txt:645
# 79a03eafa4ba4cf3b79505d3cab50a59
# cc1653b4e415414c85e8624e4f33a3e3
msgid "If you've previously used a URL path for ``ADMIN_MEDIA_PREFIX`` (e.g. ``/media/``) simply make sure :setting:`STATIC_URL` and :setting:`STATIC_ROOT` are configured and your web server serves the files correctly. The development server continues to serve the admin files just like before. Don't hesitate to consult the :doc:`static files howto </howto/static-files/index>` for further details."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:584
#: ../../releases/1.4-beta-1.txt:652
# 7c2f6d012f444840b752e81dbf210285
# cfdd0dabbc4049bbbb663022756fcc3a
msgid "In case your ``ADMIN_MEDIA_PREFIX`` is set to an specific domain (e.g. ``http://media.example.com/admin/``) make sure to also set your :setting:`STATIC_URL` setting to the correct URL, for example ``http://media.example.com/``."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:591
#: ../../releases/1.4-beta-1.txt:659
# 7c07fe7582b84e93af20cd23a020e83a
# 7588cafe96fe4537ac4a28c86658e869
msgid "If you're implicitly relying on the path of the admin static files on your server's file system when you deploy your site, you have to update that path. The files were moved from :file:`django/contrib/admin/media/` to :file:`django/contrib/admin/static/admin/`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:599
#: ../../releases/1.4-beta-1.txt:667
# 20a87bd198dd4a3c96b086a31c05d8fd
# 094d9fce63ac487187b2fc7fd7f4672c
msgid "Django hasn't had a clear policy on which browsers are supported for using the admin app. Django's new policy formalizes existing practices: `YUI's A-grade`_ browsers should provide a fully-functional admin experience, with the notable exception of IE6, which is no longer supported."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:604
#: ../../releases/1.4-beta-1.txt:672
# 2d6e0bf6e24f4430b0c2db9dba61acd8
# 4a0cfe74f5164168ba0cb9f9a2aeb35f
msgid "Released over ten years ago, IE6 imposes many limitations on modern web development. The practical implications of this policy are that contributors are free to improve the admin without consideration for these limitations."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:608
#: ../../releases/1.4-beta-1.txt:676
# a12c4dca69e8421cbbd21700bc414fa0
# 612bf8649b1d42b1b4513db282001fd2
msgid "This new policy **has no impact** on development outside of the admin. Users of Django are free to develop webapps compatible with any range of browsers."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:616
#: ../../releases/1.4-beta-1.txt:684
# 2906eda3c8a9491abb920f503aed5867
# 12a665acd58a4b37be72b436aaffe726
msgid "As part of an effort to improve the performance and usability of the admin's changelist sorting interface and of the admin's :attr:`horizontal <django.contrib.admin.ModelAdmin.filter_horizontal>` and :attr:`vertical <django.contrib.admin.ModelAdmin.filter_vertical>` \"filter\" widgets, some icon files were removed and grouped into two sprite files."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:628
#: ../../releases/1.4-beta-1.txt:696
# 780a982c7a3a49fca40b4b57ad7bd330
# 4b7e0222b8234133b9f736e0e234b58b
msgid "If you used those icons to customize the admin then you will want to replace them with your own icons or retrieve them from a previous release."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:634
#: ../../releases/1.4-beta-1.txt:702
# ada2a31d63db42f699c1b454fc668ec5
# 68d660a5f0024b1f95f950a569824b5a
msgid "To avoid conflicts with other common CSS class names (e.g. \"button\"), a prefix \"field-\" has been added to all CSS class names automatically generated from the form field names in the main admin forms, stacked inline forms and tabular inline cells. You will need to take that prefix into account in your custom style sheets or javascript files if you previously used plain field names as selectors for custom styles or javascript transformations."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:657
#: ../../releases/1.4-beta-1.txt:725
# 1f68f152893b4e56a0c342d91748943c
# 7800110038214071b222e80187ca9f6b
msgid "consequences: the user will be logged out, and session data will be lost."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:659
#: ../../releases/1.4-beta-1.txt:727
# 46d60442f7684bfea06e45904e8f1efd
# 02c48a058bf3438da20334cbea8522e8
msgid "time period: defined by :setting:`SESSION_COOKIE_AGE`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:663
#: ../../releases/1.4-beta-1.txt:731
# 5620a53f139b4ac8be060f56c4ca1f7e
# 054b0f0b994f4cd480c0ba5d2dd0c7e3
msgid "consequences: password reset links from before the upgrade will not work."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:665
#: ../../releases/1.4-beta-1.txt:733
# 44825eafe3594c2eb20127272ef56995
# c20cdaf2c6b74c978efd422d6b8f3713
msgid "time period: defined by :setting:`PASSWORD_RESET_TIMEOUT_DAYS`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:667
#: ../../releases/1.4-beta-1.txt:735
# c8486762c0194a328f7479df00429f9f
# 662786c1480c46edbfeca5e06fbe65a7
msgid "Form-related hashes — these are much shorter lifetime, and are relevant only for the short window where a user might fill in a form generated by the pre-upgrade Django instance, and try to submit it to the upgraded Django instance:"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:673
#: ../../releases/1.4-beta-1.txt:741
# 38cdcd4901ca4f998a10d673fae6250b
# b60f91b816c94eb3be1d2ed22143eebf
msgid "consequences: the user will see a validation error \"Security hash failed\"."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:675
#: ../../releases/1.4-beta-1.txt:743
# 26e56e9933b54bea819e943394c0e94a
# e4963a364d3f48799c11b1c0f2ac5b46
msgid "time period: the amount of time you expect users to take filling out comment forms."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:680
#: ../../releases/1.4-beta-1.txt:748
# 41bbc50c574d429490720652dfb6ff99
# da933c4cafc3428c9f08d0a1a2d442c1
msgid "consequences: the user will see an error about the form having expired, and will be sent back to the first page of the wizard, losing the data they have entered so far."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:684
#: ../../releases/1.4-beta-1.txt:752
# fbd0e2054b704dd7a3ea76a5df92f4f2
# eaa13baf446f4a229a8e828cf0ed00e6
msgid "time period: the amount of time you expect users to take filling out the affected forms."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:689
#: ../../releases/1.4-beta-1.txt:757
# 702e1ddeb5654edb87d8c65442aa0982
# c812f14fd5ee4285876ed3add5d8c83f
msgid "Note: This is actually a Django 1.1 fallback, not Django 1.2, and applies only if you are upgrading from 1.1."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:692
#: ../../releases/1.4-beta-1.txt:760
# 5ceb6b78e4944364a9c20b8440f0afc8
# 22860849fc504098ab600d4ffefba368
msgid "consequences: the user will see a 403 error with any CSRF protected POST form."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:695
#: ../../releases/1.4-beta-1.txt:763
# f6942f095fe847ceb8de1168f4e4293b
# f781a4cc81bb49b794d1f57ae495d65e
msgid "time period: the amount of time you expect user to take filling out such forms."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:701
#: ../../releases/1.4-beta-1.txt:769
# 7b9ccd212c1344d4ae8ec9f58647f4be
# 2a0bf6109f9a41b1b6388027c68ae633
msgid "Starting in the 1.4 release the :class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` only adds a trailing slash and redirects if the resulting URL refers to an existing flatpage. For example, requesting ``/notaflatpageoravalidurl`` in a previous version would redirect to ``/notaflatpageoravalidurl/``, which would subsequently raise a 404. Requesting ``/notaflatpageoravalidurl`` now will immediately raise a 404. Additionally redirects returned by flatpages are now permanent (301 status code) to match the behavior of the :class:`~django.middleware.common.CommonMiddleware`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:714
#: ../../releases/1.4-beta-1.txt:782
# 578caf7eaf50442290c6ecba25ee023e
# f291a99a29f54f7e8b72186538ad129e
msgid "As a consequence of time zone support, and according to the ECMA-262 specification, some changes were made to the JSON serializer:"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:724
#: ../../releases/1.4-beta-1.txt:792
# ee336a62fea5427fb40636856abc94c7
# ec0d6fa606ef47beb033d1cbfd2e2ac6
msgid "The XML serializer was also changed to use the ISO8601 format for datetimes. The letter ``T`` is used to separate the date part from the time part, instead of a space. Time zone information is included in the ``[+-]HH:MM`` format."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:728
#: ../../releases/1.4-beta-1.txt:796
# 23ca681b4e3c4665bf7c07500107f24c
# d5c0146bb3104462925ab5ec0b7d979d
msgid "The serializers will dump datetimes in fixtures with these new formats. They can still load fixtures that use the old format."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:739
#: ../../releases/1.4-beta-1.txt:807
# 5356671588bb4911aa6b86219044f754
# c06d83327f664c03aee639feaf970406
msgid "In the context of time zone support, this flag was changed to ``False``, and datetimes are now stored without time zone information in SQLite. When :setting:`USE_TZ` is ``False``, if you attempt to save an aware datetime object, Django raises an exception."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:765
#: ../../releases/1.4-beta-1.txt:833
# 3ce1ff2934a74d3e85ffb2295c61c56a
# a6969c0a88c1439fbdfdd7e5053ca8f5
msgid "Finally, while it is now possible to pass connections between threads, Django does not make any effort to synchronize access to the underlying backend. Concurrency behavior is defined by the underlying backend implementation. Check their documentation for details."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:779
#: ../../releases/1.4-beta-1.txt:847
# 110c302e4b544d2d8050172515c76011
# 3bb698c3db394273b57968e9e5515ad8
msgid "If you rely on the feature and want to restore the old behavior, simply use a custom comment model manager to exclude the user group, like this::"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:794
#: ../../releases/1.4-beta-1.txt:862
# ff8b9f045ed14930bb619987c858f1d1
# 0d735d75eeec48529effd83e2ffc5749
msgid "Save this model manager in your custom comment app (e.g. in ``my_comments_app/managers.py``) and add it your :ref:`custom comment app model <custom-comment-app-api>`::"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:845
#: ../../releases/1.4-beta-1.txt:913
# 22f88b8d1f1a4a2eaa87a2f8423ec022
# 2377b953ed084f89a8cf01a07b5f546f
msgid "Don't forget to escape characters that have a special meaning in a regular expression."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:851
#: ../../releases/1.4-beta-1.txt:919
# 6e10244694d84b77abba70f040f68e71
# 81dff266c6554754baa121910a7693a0
msgid "Previously, Django's :doc:`CSRF protection </ref/contrib/csrf/>` provided protection against only POST requests. Since use of PUT and DELETE methods in AJAX applications is becoming more common, we now protect all methods not defined as safe by :rfc:`2616` i.e. we exempt GET, HEAD, OPTIONS and TRACE, and enforce protection on everything else."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:857
#: ../../releases/1.4-beta-1.txt:925
# c4ec91565541462d951f5865da9c627a
# dec9e71bcd134186bc9b344ed5a22291
msgid "If you are using PUT or DELETE methods in AJAX applications, please see the :ref:`instructions about using AJAX and CSRF <csrf-ajax>`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:863
#: ../../releases/1.4-beta-1.txt:931
# eff514bcb64c42aca72a142bf973f55b
# 714e521d36e34781959d48bd75c8cc62
msgid "This was an alias to ``django.template.loader`` since 2005, it has been removed without emitting a warning due to the length of the deprecation. If your code still referenced this please use ``django.template.loader`` instead."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:877
#: ../../releases/1.4-beta-1.txt:945
# 6bba3fd301564028946e15f20811306b
# 40f5a41cfd5c4c60bf528a10526ce05c
msgid "The ``open`` method of the base Storage class took an obscure parameter ``mixin`` which allowed you to dynamically change the base classes of the returned file object. This has been removed. In the rare case you relied on the ``mixin`` parameter, you can easily achieve the same by overriding the ``open`` method, e.g.::"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:903
#: ../../releases/1.4-beta-1.txt:971
# ab27b1c8e90f48378cf7045c5d5b37ea
# 24e1a2080ea14c31a6fb25a78e7dc8cc
msgid "``yaml.load`` is able to construct any Python object, which may trigger arbitrary code execution if you process a YAML document that comes from an untrusted source. This feature isn't necessary for Django's YAML deserializer, whose primary use is to load fixtures consisting of simple objects. Even though fixtures are trusted data, for additional security, the YAML deserializer now uses ``yaml.safe_load``."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:916
#: ../../releases/1.4-beta-1.txt:984
# affeb66f2d554ad7bd5dd6a81be0b4f0
# b509f8ea699b4b0db56eef8357d66e35
msgid "Some legacy ways of calling :func:`~django.views.decorators.cache.cache_page` have been deprecated, please see the docs for the correct way to use this decorator."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:923
#: ../../releases/1.4-beta-1.txt:991
# 8010e66c73094eb8b156ac1cd719a30b
# 770a86c2799546a192e53a1bcb514391
msgid "Django 1.3 dropped support for PostgreSQL versions older than 8.0 and the relevant documents suggested to use a recent version because of performance reasons but more importantly because end of the upstream support periods for releases 8.0 and 8.1 was near (November 2010)."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:934
#: ../../releases/1.4-beta-1.txt:1002
# d3c9a0e5285942afb5050f7b2735879e
# 05613a508a2444d788ee38645f58ef70
msgid "When :doc:`logging support </topics/logging/>` was added to Django in 1.3, the admin error email support was moved into the :class:`django.utils.log.AdminEmailHandler`, attached to the ``'django.request'`` logger. In order to maintain the established behavior of error emails, the ``'django.request'`` logger was called only when :setting:`DEBUG` was ``False``."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:960
#: ../../releases/1.4-beta-1.txt:1028
# a9eef4e5a47e469682497bfd873ec6ed
# 6e4eafa3af42434db47196278e66fbb6
msgid "If your project was created prior to this change, your :setting:`LOGGING` setting will not include this new filter. In order to maintain backwards-compatibility, Django will detect that your ``'mail_admins'`` handler configuration includes no ``'filters'`` section, and will automatically add this filter for you and issue a pending-deprecation warning. This will become a deprecation warning in Django 1.5, and in Django 1.6 the backwards-compatibility shim will be removed entirely."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:974
#: ../../releases/1.4-beta-1.txt:1042
# 39c99492f2ea4a6885f33849e6ae899b
# 399c360c089d40b59a2614cd89f5edff
msgid "Until Django 1.3 the functions :func:`~django.conf.urls.include`, :func:`~django.conf.urls.patterns` and :func:`~django.conf.urls.url` plus :data:`~django.conf.urls.handler404`, :data:`~django.conf.urls.handler500` were located in a ``django.conf.urls.defaults`` module."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:979
#: ../../releases/1.4-beta-1.txt:1047
# a452ecf732a14cceae588384517bfede
# 5fe94b0ad69e4388a09a7207705e29fb
msgid "Starting with Django 1.4 they are now available in :mod:`django.conf.urls`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:992
#: ../../releases/1.4-beta-1.txt:1060
# e90249ce45a24ccc911853600ab7448f
# a6aa16f6de224992add07de4054403cf
msgid "The code that powers Databrowse is licensed under the same terms as Django itself, and so is available to be adopted by an individual or group as a third-party project."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1004
#: ../../releases/1.4-beta-1.txt:1072
# 006815a438e44b00a1b2d9c197dd53b7
# 7a820c7fbcbc43a4b627e96e3d755314
msgid "This function was never documented or part of the public API, but was widely recommended for use in setting up a \"Django environment\" for a user script. These uses should be replaced by setting the ``DJANGO_SETTINGS_MODULE`` environment variable or using :func:`django.conf.settings.configure`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1046
# 6dbed7ca8e234f4991583dfeda9f649a
msgid "Session cookies now include the ``httponly`` attribute by default to help reduce the impact of potential XSS attacks. For strict backwards compatibility, use ``SESSION_COOKIE_HTTPONLY = False`` in your settings file."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1072
#: ../../releases/1.4-beta-1.txt:1144
# 0d0bc99462f149e2864348b1ada4a9af
# a47433a2dbc94a94b09e381edf426e9d
msgid "The Django 1.4 roadmap"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1074
#: ../../releases/1.4-beta-1.txt:1146
# a95141e4b5ed4859b2178c4aaf2e38db
# 8c880d225c6c4e21b163fbeeb59422cd
msgid "Before the final Django 1.4 release, several other preview/development releases will be made available. The current schedule consists of at least the following:"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1077
# b1baed02eaef43c8ac70810bff6eef02
msgid "Week of **January 30, 2012**: First Django 1.4 beta release; final feature freeze for Django 1.4."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1080
#: ../../releases/1.4-beta-1.txt:1152
# 27931bd6500a465aa531166399784ce3
# b6800b8c80c648d2a34a2e906e063fed
msgid "Week of **February 27, 2012**: First Django 1.4 release candidate; string freeze for translations."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1083
#: ../../releases/1.4-beta-1.txt:1155
# 762aee9782944cfea95336a5b6550e45
# d16eb15a41624dcaae9c37094b439be8
msgid "Week of **March 5, 2012**: Django 1.4 final release."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1085
#: ../../releases/1.4-beta-1.txt:1157
# 43e623b877bf4b078890929c3ddc81d4
# 4041d04e8e454d639a59ec65e5b3fbbc
msgid "If necessary, additional alpha, beta or release-candidate packages will be issued prior to the final 1.4 release. Django 1.4 will be released approximately one week after the final release candidate."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1092
# 3c97c81e494d4e2db341adce7ee831f1
msgid "In order to provide a high-quality 1.4 release, we need your help. Although this alpha release is, again, *not* intended for production use, you can help the Django team by trying out the alpha codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1121
#: ../../releases/1.4-beta-1.txt:1193
# 23985dd564394c91b4c07313543b59cc
# aab31a7b82484a398989071a4dffb7e6
msgid "Several development sprints will also be taking place before the 1.4 release; these will typically be announced in advance on the django-developers mailing list, and anyone who wants to help is welcome to join in."
msgstr ""

#: ../../releases/1.4-beta-1.txt:3
# 1e9f01abe56a418c8b397711bd9faaa0
msgid "Django 1.4 beta release notes"
msgstr ""

#: ../../releases/1.4-beta-1.txt:5
# c8823f77deb1436f9eaaf09bb03c110a
msgid "February 15, 2012."
msgstr ""

#: ../../releases/1.4-beta-1.txt:7
# 4ec35d2343704007abfd3bec2f8cf829
msgid "Welcome to Django 1.4 beta!"
msgstr ""

#: ../../releases/1.4-beta-1.txt:9
# a20298a858574e2888e2c89eefa678a6
msgid "This is the second in a series of preview/development releases leading up to the eventual release of Django 1.4, scheduled for March 2012. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.4 release."
msgstr ""

#: ../../releases/1.4-beta-1.txt:18
# b8f54cbf57744d2bac5ee2e1f5a5a34d
msgid "Django 1.4 beta includes various `new features`_ and some minor `backwards incompatible changes`_. There are also some features that have been dropped, which are detailed in :doc:`our deprecation plan </internals/deprecation>`, and we've `begun the deprecation process for some features`_."
msgstr ""

#: ../../releases/1.4-beta-1.txt:29
# e3511a97f9c14375a211f69af075df68
msgid "Version numbering"
msgstr ""

#: ../../releases/1.4-beta-1.txt:31
# 25eb609394d24eeab146a7bac2e3208e
msgid "Internally, Django's version number is represented by the tuple ``django.VERSION``. This is used to generate human-readable version number strings; as of Django 1.4 beta 1, the algorithm for generating these strings has been changed to match the recommendations of :pep:`386`. This only affects the human-readable strings identifying Django alphas, betas and release candidates, and should not affect end users in any way."
msgstr ""

#: ../../releases/1.4-beta-1.txt:38
# 2f23f57c1ceb474f9412bd8978385e78
msgid "For example purposes, the old algorithm would give Django 1.4 beta 1 a version string of the form \"1.4 beta 1\". The new algorithm generates the version string \"1.4b1\"."
msgstr ""

#: ../../releases/1.4-beta-1.txt:135
# a73e5518c09841f0ae341da887cc3b3f
msgid "Django 1.4 alpha contained a bug that corrupted PBKDF2 hashes. To determine which accounts are affected, run :djadmin:`manage.py shell <shell>` and paste this snippet::"
msgstr ""

#: ../../releases/1.4-beta-1.txt:147
# 8fe9ba6682034a2dbec85cb4ff399f5f
msgid "These users should reset their passwords."
msgstr ""

#: ../../releases/1.4-beta-1.txt:218
# 8b2a734266b746a1a9a31e224f21437c
msgid "Session data is signed and validated by the server, but is not encrypted.  This means that a user can view any data stored in the session, but cannot change it. Please read the documentation for further clarification before using this backend."
msgstr ""

#: ../../releases/1.4-beta-1.txt:617
# 70bbf1ae5df345e2bb63f972bde632a7
msgid "New phrases added to ``HIDDEN_SETTINGS`` regex in `django/views/debug.py`_."
msgstr ""

#: ../../releases/1.4-beta-1.txt:619
# b4fa9d2d233b4a2bb696670f073f476e
msgid "``'API'``, ``'TOKEN'``, ``'KEY'`` were added, ``'PASSWORD'`` was changed to ``'PASS'``."
msgstr ""

#: ../../releases/1.4-beta-1.txt:1114
# fab215e96f7f485da2398456ecca5504
msgid "Session cookies now include the ``httponly`` attribute by default to help reduce the impact of potential XSS attacks. As a consequence of this change, session cookie data, including sessionid, is no longer accessible from Javascript in many browsers. For strict backwards compatibility, use ``SESSION_COOKIE_HTTPONLY = False`` in your settings file."
msgstr ""

#: ../../releases/1.4-beta-1.txt:1149
# f32b15af7b014cd588f6f1f6927f8eb9
msgid "Week of **January 13, 2012**: First Django 1.4 beta release; final feature freeze for Django 1.4."
msgstr ""

#: ../../releases/1.4-beta-1.txt:1164
# f42a479c2e5f44319e2e7649f226a5da
msgid "In order to provide a high-quality 1.4 release, we need your help. Although this beta release is, again, *not* intended for production use, you can help the Django team by trying out the beta codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.4-beta-1.txt:1175
# f87313a7677d4c32b4e69c87d5cbdb0f
msgid "Additionally, discussion of Django development, including progress toward the 1.4 release, takes place daily on the django-developers mailing list:"
msgstr ""

#: ../../releases/1.4.1.txt:3
# 38feeba472d04a0bb168b8901974e626
msgid "Django 1.4.1 release notes"
msgstr ""

#: ../../releases/1.4.1.txt:7
# f6e56e010674452483f1d91a6e29a01f
msgid "This is the first security release in the Django 1.4 series, fixing several security issues in Django 1.4. Django 1.4.1 is a recommended upgrade for all users of Django 1.4."
msgstr ""

#: ../../releases/1.4.2.txt:3
# 7808801174ff48ef90aa94a793254ee0
msgid "Django 1.4.2 release notes"
msgstr ""

#: ../../releases/1.4.2.txt:5
# 2490bc18979042f4b8e9bce34f884020
msgid "*October 17, 2012*"
msgstr ""

#: ../../releases/1.4.2.txt:7
# aabcca3b8f39447d93cdf6066f9cd626
msgid "This is the second security release in the Django 1.4 series."
msgstr ""

#: ../../releases/1.4.2.txt:10
# 6114d2d6944b4434934b46732fe38364
msgid "Host header poisoning"
msgstr ""

#: ../../releases/1.4.2.txt:12
# 6978b52b4f094a7ba8e0cce9f53915a1
msgid "Some parts of Django -- independent of end-user-written applications -- make use of full URLs, including domain name, which are generated from the HTTP Host header. Some attacks against this are beyond Django's ability to control, and require the web server to be properly configured; Django's documentation has for some time contained notes advising users on such configuration."
msgstr ""

#: ../../releases/1.4.2.txt:18
# 3e22dfa81e154fb38f2dd8f8c1ee0be6
msgid "Django's own built-in parsing of the Host header is, however, still vulnerable, as was reported to us recently. The Host header parsing in Django 1.3.3 and Django 1.4.1 -- specifically, django.http.HttpRequest.get_host() -- was incorrectly handling username/password information in the header. Thus, for example, the following Host header would be accepted by Django when running on \"validsite.com\"::"
msgstr ""

#: ../../releases/1.4.2.txt:27
# 27b93953b8644137823ea615c31c8bc4
msgid "Using this, an attacker can cause parts of Django -- particularly the password-reset mechanism -- to generate and display arbitrary URLs to users."
msgstr ""

#: ../../releases/1.4.2.txt:30
# bb4d6256ca5b491f85dcdcbf8f64ed73
msgid "To remedy this, the parsing in HttpRequest.get_host() is being modified; Host headers which contain potentially dangerous content (such as username/password pairs) now raise the exception django.core.exceptions.SuspiciousOperation"
msgstr ""

#: ../../releases/1.4.2.txt:34
# 27d3176edc594244816c46b592e49ae4
msgid "Details of this issue were initially posted online as a `security advisory`_."
msgstr ""

#: ../../releases/1.4.2.txt:41
# aef4d4acd7c04abc97f2fc4a75fdae52
msgid "The newly introduced :class:`~django.db.models.GenericIPAddressField` constructor arguments have been adapted to match those of all other model fields. The first two keyword arguments are now verbose_name and name."
msgstr ""

#: ../../releases/1.4.2.txt:46
# 3fec311094194ee1aab925d73d0cc221
msgid "Other bugfixes and changes"
msgstr ""

#: ../../releases/1.4.2.txt:48
# 575ff4e3ff604decbb471c65b5ead828
msgid "Subclass HTMLParser only for appropriate Python versions (#18239)."
msgstr ""

#: ../../releases/1.4.2.txt:49
# bd973c742192400fb2b81e2bb4803998
msgid "Added batch_size argument to qs.bulk_create() (#17788)."
msgstr ""

#: ../../releases/1.4.2.txt:50
# c2a22292984349768060898f8ec5a01e
msgid "Fixed a small regression in the admin filters where wrongly formatted dates passed as url parameters caused an unhandled ValidationError (#18530)."
msgstr ""

#: ../../releases/1.4.2.txt:51
# 6a66a1d0befb4ea78978ef051e16d6b4
msgid "Fixed an endless loop bug when accessing permissions in templates (#18979)"
msgstr ""

#: ../../releases/1.4.2.txt:52
# 4af025e0d831406e905d052334e8c28c
msgid "Fixed some Python 2.5 compatibility issues"
msgstr ""

#: ../../releases/1.4.2.txt:53
# 6d69a95b123d45fbb1191682249b1278
msgid "Fixed an issue with quoted filenames in Content-Disposition header (#19006)"
msgstr ""

#: ../../releases/1.4.2.txt:54
# 3f0680d5c018421db8b22ba099a2c3f3
msgid "Made the context option in ``trans`` and ``blocktrans`` tags accept literals wrapped in single quotes (#18881)."
msgstr ""

#: ../../releases/1.4.2.txt:55
# 48fe1364ae0f43b69363f849d6bb95b2
msgid "Numerous documentation improvements and fixes."
msgstr ""

#: ../../releases/1.5.txt:3
# 14dec4a07d844399bc57ee7aa0e3f409
msgid "Django 1.5 release notes"
msgstr ""

#: ../../releases/1.5.txt:5
# 5f4d8f900ec841cdb42df392faa10e95
msgid "*February 26, 2013*"
msgstr ""

#: ../../releases/1.5.txt:7
# cf78767937b845d1af11d3fbe5087d0a
msgid "Welcome to Django 1.5!"
msgstr ""

#: ../../releases/1.5.txt:9
#: ../../releases/1.5-beta-1.txt:18
# 9ce6812b37a341d5bdaa0e6153135c92
# 30d2a95b73884ab48ad3a49232739c43
msgid "These release notes cover the `new features`_, as well as some `backwards incompatible changes`_ you'll want to be aware of when upgrading from Django 1.4 or older versions. We've also dropped some features, which are detailed in :doc:`our deprecation plan </internals/deprecation>`, and we've `begun the deprecation process for some features`_."
msgstr ""

#: ../../releases/1.5.txt:23
#: ../../releases/1.5-alpha-1.txt:36
#: ../../releases/1.5-beta-1.txt:32
# 99ba6c1ac253434eb865b4009a3ac702
# 772574738ece40f8bf990caa824dead9
# 5f1cbe10b0d84b1d870f86a3ebcd8fd4
msgid "The biggest new feature in Django 1.5 is the `configurable User model`_. Before Django 1.5, applications that wanted to use Django's auth framework (:mod:`django.contrib.auth`) were forced to use Django's definition of a \"user\". In Django 1.5, you can now swap out the ``User`` model for one that you write yourself. This could be a simple extension to the existing ``User`` model -- for example, you could add a Twitter or Facebook ID field -- or you could completely replace the ``User`` with one totally customized for your site."
msgstr ""

#: ../../releases/1.5.txt:31
#: ../../releases/1.5-alpha-1.txt:44
#: ../../releases/1.5-beta-1.txt:40
# 7290580b29584a25abcc881b34b9dc71
# 15d343c7a3f745c99c2887528d801bf1
# 613cb5bf844b43378f5840c0e90e7bd6
msgid "Django 1.5 is also the first release with `Python 3 support`_! We're labeling this support \"experimental\" because we don't yet consider it production-ready, but everything's in place for you to start porting your apps to Python 3. Our next release, Django 1.6, will support Python 3 without reservations."
msgstr ""

#: ../../releases/1.5.txt:36
#: ../../releases/1.5-alpha-1.txt:49
#: ../../releases/1.5-beta-1.txt:45
# 3dc071de3ecb4c82b45504e4766f8197
# e5eb105315744ec7a088189fd8aa4f0e
# 16af6e5a807a415ebb7798b0c065a726
msgid "Other notable new features in Django 1.5 include:"
msgstr ""

#: ../../releases/1.5.txt:38
#: ../../releases/1.5-alpha-1.txt:51
#: ../../releases/1.5-beta-1.txt:47
# 26a3bb686861478f8ce1379942590cab
# d105585022314de6b68a865866c10238
# 4b352d61f8ca4f988647ede931be72c4
msgid "`Support for saving a subset of model's fields`_ - :meth:`Model.save() <django.db.models.Model.save()>` now accepts an ``update_fields`` argument, letting you specify which fields are written back to the database when you call ``save()``. This can help in high-concurrency operations, and can improve performance."
msgstr ""

#: ../../releases/1.5.txt:44
#: ../../releases/1.5-alpha-1.txt:57
# 0441e710adb54fdbad4eb5926b4b991b
# 7098e903239148dba95ca03e9a4869dd
msgid "Better `support for streaming responses <#explicit-streaming-responses>`_ via the new  :class:`~django.http.StreamingHttpResponse` response class."
msgstr ""

#: ../../releases/1.5.txt:47
#: ../../releases/1.5-alpha-1.txt:60
#: ../../releases/1.5-beta-1.txt:56
# bac0bef2203b45bdb5563be8be9fd85a
# 4946156c7dbd47c4b8cf4988a0669cac
# a139dc15c66142d5905a72e35f60ca21
msgid "`GeoDjango`_ now supports PostGIS 2.0."
msgstr ""

#: ../../releases/1.5.txt:49
#: ../../releases/1.5-alpha-1.txt:62
#: ../../releases/1.5-beta-1.txt:58
# 80fd5de74307415fa66a77a5b9cf0cbf
# 0d90e851c30940fda2fbcf0b8be9634c
# 66c79ba9302b4b1eb7560d43545dd3f4
msgid "... and more; `see below <#what-s-new-in-django-1-5>`_."
msgstr ""

#: ../../releases/1.5.txt:51
#: ../../releases/1.5-beta-1.txt:60
# f80e6de6f9c742d89afabd40a3560474
# fbb78af74c674b1698e3b395da648f7e
msgid "Wherever possible we try to introduce new features in a backwards-compatible manner per :doc:`our API stability policy </misc/api-stability>`. However, as with previous releases, Django 1.5 ships with some minor `backwards incompatible changes`_; people upgrading from previous versions of Django should read that list carefully."
msgstr ""

#: ../../releases/1.5.txt:57
#: ../../releases/1.5-alpha-1.txt:70
#: ../../releases/1.5-beta-1.txt:66
# 55253eb337d942dfa17cdad41aa870ab
# d8f1812025e14dd4a9791f1fdec9c85e
# f18c5e3fab7349139c58f3e068dc1f7b
msgid "One deprecated feature worth noting is the shift to \"new-style\" :ttag:`url` tag. Prior to Django 1.3, syntax like ``{% url myview %}`` was interpreted incorrectly (Django considered ``\"myview\"`` to be a literal name of a view, not a template variable named ``myview``). Django 1.3 and above introduced the ``{% load url from future %}`` syntax to bring in the corrected behavior where ``myview`` was seen as a variable."
msgstr ""

#: ../../releases/1.5.txt:64
#: ../../releases/1.5-alpha-1.txt:77
#: ../../releases/1.5-beta-1.txt:73
# ab2de933db1f4cb9a1958b911199410e
# f75401b778b0483ba5be470bfe832dc9
# 7c440b59185f40e78d2f84fcf41057cb
msgid "The upshot of this is that if you are not using ``{% load url from future %}`` in your templates, you'll need to change tags like ``{% url myview %}`` to ``{% url \"myview\" %}``. If you *were* using ``{% load url from future %}`` you can simply remove that line under Django 1.5"
msgstr ""

#: ../../releases/1.5.txt:72
#: ../../releases/1.5-beta-1.txt:81
# 2602670c51704cebbd5874417d61eb75
# e73a19e2bcc945e08823c8d0be2238f8
msgid "Django 1.5 requires Python 2.6.5 or above, though we **highly recommend** Python 2.7.3 or above. Support for Python 2.5 and below has been dropped."
msgstr ""

#: ../../releases/1.5.txt:75
#: ../../releases/1.5-alpha-1.txt:88
#: ../../releases/1.5-beta-1.txt:84
# 59ea5cca6c934adbb42f279d8378c55f
# 1e66d0a0a6d54b0185db3fbeac5bc9e4
# e855359901f348a78e62688e8a3ff758
msgid "This change should affect only a small number of Django users, as most operating-system vendors today are shipping Python 2.6 or newer as their default version. If you're still using Python 2.5, however, you'll need to stick to Django 1.4 until you can upgrade your Python version. Per :doc:`our support policy </internals/release-process>`, Django 1.4 will continue to receive security support until the release of Django 1.6."
msgstr ""

#: ../../releases/1.5.txt:82
#: ../../releases/1.5-alpha-1.txt:95
#: ../../releases/1.5-beta-1.txt:91
# 8ef22e1d97ad43a58727f71c1744ab95
# 15ae73a46d3b43cca45de8314a7d8501
# 7b98cd11543a47d9a45896a4f94ad62a
msgid "Django 1.5 does not run on a Jython final release, because Jython's latest release doesn't currently support Python 2.6. However, Jython currently does offer an alpha release featuring 2.7 support, and Django 1.5 supports that alpha release."
msgstr ""

#: ../../releases/1.5.txt:88
#: ../../releases/1.5-alpha-1.txt:101
#: ../../releases/1.5-beta-1.txt:97
# b7e1995c655e4ad297e1736da7e9d011
# c22caad67b694d42ac68e953f4da4829
# d3ca4796bba5451290da7b3c93b61186
msgid "Python 3 support"
msgstr ""

#: ../../releases/1.5.txt:90
#: ../../releases/1.5-beta-1.txt:99
# 8c8fbe15013142e0a1b9cc0f42c3d315
# a16c57a7a05e4e17b268c1846ee44e36
msgid "Django 1.5 introduces support for Python 3 - specifically, Python 3.2 and above. This comes in the form of a **single** codebase; you don't need to install a different version of Django on Python 3. This means that you can write applications targeted for just Python 2, just Python 3, or single applications that support both platforms."
msgstr ""

#: ../../releases/1.5.txt:96
# 9d832315eab545e0a14fb6bafc9ee8c1
msgid "However, we're labeling this support \"experimental\" for now: although it's received extensive testing via our automated test suite, it's received very little real-world testing. We've done our best to eliminate bugs, but we can't be sure we covered all possible uses of Django."
msgstr ""

#: ../../releases/1.5.txt:101
# fc982f491ac445fcb04105b0cbfbb73a
msgid "Some features of Django aren't available because they depend on third-party software that hasn't been ported to Python 3 yet, including:"
msgstr ""

#: ../../releases/1.5.txt:104
# e6f252bba2d2461a96dead0c7cc2132e
msgid "the MySQL database backend (depends on MySQLdb)"
msgstr ""

#: ../../releases/1.5.txt:105
# 094165e7e02f40e49d1309b19e382b39
msgid ":class:`~django.db.models.ImageField` (depends on PIL)"
msgstr ""

#: ../../releases/1.5.txt:106
# 738ca573640d4ffda862626e2032f9bb
msgid ":class:`~django.test.LiveServerTestCase` (depends on Selenium WebDriver)"
msgstr ""

#: ../../releases/1.5.txt:108
# aa145facce5d414a98addd49706a9717
msgid "Further, Django's more than a web framework; it's an ecosystem of pluggable components. At this point, very few third-party applications have been ported to Python 3, so it's unlikely that a real-world application will have all its dependencies satisfied under Python 3."
msgstr ""

#: ../../releases/1.5.txt:113
#: ../../releases/1.5-alpha-1.txt:118
#: ../../releases/1.5-beta-1.txt:114
# b0e50c3d4e8a4649b616c905fd62fb2a
# 8d05ffc7d9f9480e981aa6938cc4cdc3
# d6353639a42d4e96ae911da9bb7b28e4
msgid "Thus, we're recommending that Django 1.5 not be used in production under Python 3. Instead, use this opportunity to begin :doc:`porting applications to Python 3 </topics/python3>`. If you're an author of a pluggable component, we encourage you to start porting now."
msgstr ""

#: ../../releases/1.5.txt:118
#: ../../releases/1.5-alpha-1.txt:123
#: ../../releases/1.5-beta-1.txt:119
# d3a8b88ea2964c2e9544877298df7094
# b3912f8c99bc4ddf91761eea79165222
# 48f619bc5b0d4f149a8cce1037932960
msgid "We plan to offer first-class, production-ready support for Python 3 in our next release, Django 1.6."
msgstr ""

#: ../../releases/1.5.txt:122
#: ../../releases/1.5-alpha-1.txt:127
#: ../../releases/1.5-beta-1.txt:123
# f24aa02cc9c148309a4259f0e3764843
# 128ee3a044a34e88b04c4fbeb2e910dc
# 1921718d05b64e9495d2aba8ec652750
msgid "What's new in Django 1.5"
msgstr ""

#: ../../releases/1.5.txt:125
#: ../../releases/1.5-alpha-1.txt:130
#: ../../releases/1.5-beta-1.txt:126
# 4022779739714fdbb15e9006c6088da2
# 3ccb2fccfc024c71ab996860ba62023f
# 9fa76b5d8b414ffeb0e7540cd1cdda9a
msgid "Configurable User model"
msgstr ""

#: ../../releases/1.5.txt:127
#: ../../releases/1.5-beta-1.txt:128
# 8992d261716e4429abd5aaaff23e16f5
# 6ba7b80f5ac842f9883f4a4ce89d7607
msgid "In Django 1.5, you can now use your own model as the store for user-related data. If your project needs a username with more than 30 characters, or if you want to store user's names in a format other than first name/last name, or you want to put custom profile information onto your User object, you can now do so."
msgstr ""

#: ../../releases/1.5.txt:133
#: ../../releases/1.5-alpha-1.txt:138
#: ../../releases/1.5-beta-1.txt:134
# d714dc60c5a64a92b780eedbe2e255e2
# c6423bc175d941cf994e6d7f432ca1b8
# 5a15010576854290addcb3a7fef9785f
msgid "If you have a third-party reusable application that references the User model, you may need to make some changes to the way you reference User instances. You should also document any specific features of the User model that your application relies upon."
msgstr ""

#: ../../releases/1.5.txt:138
#: ../../releases/1.5-alpha-1.txt:143
#: ../../releases/1.5-beta-1.txt:139
# 30f5e92bb80f4182a3d7b49e5836dc21
# 2615fa69171d435eaf738872dc42f124
# 5ee46c6e86244cdba1a7e9e82e6039c6
msgid "See the :ref:`documentation on custom User models <auth-custom-user>` for more details."
msgstr ""

#: ../../releases/1.5.txt:142
#: ../../releases/1.5-alpha-1.txt:147
#: ../../releases/1.5-beta-1.txt:143
# ba1bb0cb03714421850b145149e26e4f
# b5e9f7ce7c1c43f3849f6d1418c899dc
# 7056c713b3d24a428d9886c665b9421a
msgid "Support for saving a subset of model's fields"
msgstr ""

#: ../../releases/1.5.txt:144
#: ../../releases/1.5-alpha-1.txt:149
#: ../../releases/1.5-beta-1.txt:145
# 819fac7d5f364a42aacb86c2ca2dfbad
# 347b2142d6fa4cbead4eca55156dc3e0
# 60ad1c9de73248c1ada9ca00692d8449
msgid "The method :meth:`Model.save() <django.db.models.Model.save()>` has a new keyword argument ``update_fields``. By using this argument it is possible to save only a select list of model's fields. This can be useful for performance reasons or when trying to avoid overwriting concurrent changes."
msgstr ""

#: ../../releases/1.5.txt:149
# 3b961df9cb604fb9b4995eb5f249ea37
msgid "Deferred instances (those loaded by ``.only()`` or ``.defer()``) will automatically save just the loaded fields. If any field is set manually after load, that field will also get updated on save."
msgstr ""

#: ../../releases/1.5.txt:153
#: ../../releases/1.5-alpha-1.txt:158
#: ../../releases/1.5-beta-1.txt:154
# 6b171b1e4bed436e9b0350898fdcb539
# 57dd5e36bb0841a8a50a7ecd9f7ec01d
# 88e2ae9a5a714734916518490ce18466
msgid "See the :meth:`Model.save() <django.db.models.Model.save()>` documentation for more details."
msgstr ""

#: ../../releases/1.5.txt:157
#: ../../releases/1.5-alpha-1.txt:162
#: ../../releases/1.5-beta-1.txt:158
# 14fc5c27124a412eaa00505b1c43fb2f
# 527ee66bab4f4f31b8d58b58ccc10594
# 5be7a3bf87ed4358a65ecabfe3228e71
msgid "Caching of related model instances"
msgstr ""

#: ../../releases/1.5.txt:159
#: ../../releases/1.5-alpha-1.txt:164
#: ../../releases/1.5-beta-1.txt:160
# 33403ee3482b4a6bae2c49d790ff67ab
# a3c635c7bdce4756b8b37867764339b5
# ee929beb02e6499f899aa8789b89dfd4
msgid "When traversing relations, the ORM will avoid re-fetching objects that were previously loaded. For example, with the tutorial's models::"
msgstr ""

#: ../../releases/1.5.txt:167
#: ../../releases/1.5-alpha-1.txt:172
#: ../../releases/1.5-beta-1.txt:168
# 0a85967ab1884c7aa66ea9dee8a7b17b
# 2872e09a82e4467882ccf3135c002d48
# d5a4dfe5e10e414c9e06498dc66a79de
msgid "In Django 1.5, the third line no longer triggers a new SQL query to fetch ``first_choice.poll``; it was set by the second line."
msgstr ""

#: ../../releases/1.5.txt:170
#: ../../releases/1.5-alpha-1.txt:175
#: ../../releases/1.5-beta-1.txt:171
# 486bca5363884b2fa4d83f4f26962fbb
# bdf4f86d178e42148437386a9a226575
# 1c19b133786a4a2b94cdd60d78d5b94f
msgid "For one-to-one relationships, both sides can be cached. For many-to-one relationships, only the single side of the relationship can be cached. This is particularly helpful in combination with ``prefetch_related``."
msgstr ""

#: ../../releases/1.5.txt:177
#: ../../releases/1.5-alpha-1.txt:180
#: ../../releases/1.5-beta-1.txt:178
# 951863c51b56434d9a15721c88d6c2ae
# ccfa2585a6a1467b8bef0d226e5ca25b
# 5759e8b4c3464d0eb42e2f0a552f7388
msgid "Explicit support for streaming responses"
msgstr ""

#: ../../releases/1.5.txt:179
#: ../../releases/1.5-alpha-1.txt:182
#: ../../releases/1.5-beta-1.txt:180
# 6eb4065a39724c7c8f79a965850c16d1
# b6f673c7978c4555bdcde480f86d84c5
# 2f5342a4dd764dcdb08b8272d415f086
msgid "Before Django 1.5, it was possible to create a streaming response by passing an iterator to :class:`~django.http.HttpResponse`. But this was unreliable: any middleware that accessed the :attr:`~django.http.HttpResponse.content` attribute would consume the iterator prematurely."
msgstr ""

#: ../../releases/1.5.txt:184
#: ../../releases/1.5-alpha-1.txt:187
#: ../../releases/1.5-beta-1.txt:185
# da691dcfc9c342d2880834adb13154d4
# 083c03b3a62842d691558a8a2158f5c9
# ac1398e7f7ad475dbd154ffab7221ada
msgid "You can now explicitly generate a streaming response with the new :class:`~django.http.StreamingHttpResponse` class. This class exposes a :class:`~django.http.StreamingHttpResponse.streaming_content` attribute which is an iterator."
msgstr ""

#: ../../releases/1.5.txt:189
#: ../../releases/1.5-alpha-1.txt:192
#: ../../releases/1.5-beta-1.txt:190
# e6f358cb9ff145e2b7c4633e93710b84
# e03d7ca4d6414af1ae5276d94e937749
# 6486a490e69e42d4898a72b9119dc499
msgid "Since :class:`~django.http.StreamingHttpResponse` does not have a ``content`` attribute, middleware that needs access to the response content must test for streaming responses and behave accordingly. See :ref:`response-middleware` for more information."
msgstr ""

#: ../../releases/1.5.txt:195
#: ../../releases/1.5-alpha-1.txt:198
#: ../../releases/1.5-beta-1.txt:196
# 79385c9e25984a4fb5a29524e534d8ef
# 58cd1692d95d429aaee3af55ececf00e
# 69aac193acf444c8bb1a364ff3ca412b
msgid "``{% verbatim %}`` template tag"
msgstr ""

#: ../../releases/1.5.txt:197
#: ../../releases/1.5-alpha-1.txt:200
#: ../../releases/1.5-beta-1.txt:198
# 603c7b18eedc4b83bb6825a6140d3363
# f2467083f9a84bbf8eae8c73b52b5f1e
# 65eae20e0f40456abe9244dd4466f9e7
msgid "To make it easier to deal with javascript templates which collide with Django's syntax, you can now use the :ttag:`verbatim` block tag to avoid parsing the tag's content."
msgstr ""

#: ../../releases/1.5.txt:202
#: ../../releases/1.5-alpha-1.txt:205
#: ../../releases/1.5-beta-1.txt:203
# b0a35bed23764e49af824f9e532d4503
# 01cbdc3c2e864639a1d37f8b7a414302
# 9be21a9516464d30844550e8117fffe3
msgid "Retrieval of ``ContentType`` instances associated with proxy models"
msgstr ""

#: ../../releases/1.5.txt:204
#: ../../releases/1.5-alpha-1.txt:207
#: ../../releases/1.5-beta-1.txt:205
# 0598b3caa9ab452281b8e55c67539525
# 12c4c623892a449ab3b43438e3adc4f5
# 2ad83cf322ba4cbbac82ef7c14568f7c
msgid "The methods :meth:`ContentTypeManager.get_for_model() <django.contrib.contenttypes.models.ContentTypeManager.get_for_model()>` and :meth:`ContentTypeManager.get_for_models() <django.contrib.contenttypes.models.ContentTypeManager.get_for_models()>` have a new keyword argument – respectively ``for_concrete_model`` and ``for_concrete_models``. By passing ``False`` using this argument it is now possible to retrieve the :class:`ContentType <django.contrib.contenttypes.models.ContentType>` associated with proxy models."
msgstr ""

#: ../../releases/1.5.txt:212
#: ../../releases/1.5-alpha-1.txt:215
#: ../../releases/1.5-beta-1.txt:213
# 13f1e19e355f4f84bf16604ca4adb6e0
# 8dcf30d825994273a67c370e7107ef1e
# 98a3fede093044f78a0ba584c4e38c4c
msgid "New ``view`` variable in class-based views context"
msgstr ""

#: ../../releases/1.5.txt:214
#: ../../releases/1.5-alpha-1.txt:217
#: ../../releases/1.5-beta-1.txt:215
# 55943a5e7f6b42fca7cd8c233f3e7feb
# 4cf603515da7446b854a017e28b4fcb9
# 96d4c032dff54fab951a461535f08d5e
msgid "In all :doc:`generic class-based views </topics/class-based-views/index>` (or any class-based view inheriting from ``ContextMixin``), the context dictionary contains a ``view`` variable that points to the ``View`` instance."
msgstr ""

#: ../../releases/1.5.txt:221
#: ../../releases/1.5-alpha-1.txt:224
#: ../../releases/1.5-beta-1.txt:222
# ff4547518546451b880d762711a8cb82
# 3e0865b5f7c648e39cccce42dbeb4738
# 19df2843d72a476c958bceb0159bff6d
msgid ":class:`~django.contrib.gis.geos.LineString` and :class:`~django.contrib.gis.geos.MultiLineString` GEOS objects now support the :meth:`~django.contrib.gis.geos.GEOSGeometry.interpolate()` and :meth:`~django.contrib.gis.geos.GEOSGeometry.project()` methods (so-called linear referencing)."
msgstr ""

#: ../../releases/1.5.txt:227
#: ../../releases/1.5-alpha-1.txt:230
#: ../../releases/1.5-beta-1.txt:228
# 175ff21ec5904abdbcb8a0e160d6439f
# ef111f16cf78415095e6d0adce9a5277
# 042e88167be14b7a84f2135b00329f01
msgid "The ``wkb`` and ``hex`` properties of :class:`~django.contrib.gis.geos.GEOSGeometry` objects preserve the Z dimension."
msgstr ""

#: ../../releases/1.5.txt:231
#: ../../releases/1.5-alpha-1.txt:234
#: ../../releases/1.5-beta-1.txt:232
# cee5b0267cf34b6ca8441e6cc91c2170
# f151e72051d24eac9ea3de6f0cc0ab12
# 232f6642dbb94c4ab6f4f09598aafc6a
msgid "Support for PostGIS 2.0 has been added and support for GDAL < 1.5 has been dropped."
msgstr ""

#: ../../releases/1.5.txt:235
# d90e8e4c967c4c5e8f3a0878625b9820
msgid "New tutorials"
msgstr ""

#: ../../releases/1.5.txt:237
# c661f4b74ba54f6fbe39780546b109b0
msgid "Additions to the docs include a revamped :doc:`Tutorial 3</intro/tutorial03>` and a new :doc:`tutorial on testing</intro/tutorial05>`. A new section, \"Advanced Tutorials\", offers :doc:`How to write reusable apps </intro/reusable-apps>` as well as a step-by-step guide for new contributors in :doc:`Writing your first patch for Django </intro/contributing>`."
msgstr ""

#: ../../releases/1.5.txt:246
#: ../../releases/1.5-alpha-1.txt:240
#: ../../releases/1.5-beta-1.txt:238
# 107a3c311b604e19982a5eb2f8a24a9e
# 15eed7a0efcf46a6993ce0841dd46234
# 459030ae37b248479a394baacbadb188
msgid "Django 1.5 also includes several smaller improvements worth noting:"
msgstr ""

#: ../../releases/1.5.txt:248
#: ../../releases/1.5-alpha-1.txt:242
#: ../../releases/1.5-beta-1.txt:240
# 3f58ee2e226643f78f85ecec7407ce78
# 85ee8674ffc540eb88507f26f80c0062
# 981da43ed07e433bbbff1831ca1e51fe
msgid "The template engine now interprets ``True``, ``False`` and ``None`` as the corresponding Python objects."
msgstr ""

#: ../../releases/1.5.txt:251
#: ../../releases/1.5-alpha-1.txt:245
#: ../../releases/1.5-beta-1.txt:243
# 5ebab6f74e724cf88ef806cc45b01573
# 04fb11c7a2c6439187371b77e02a3793
# c19d6f916c624ba19549a185fe22034a
msgid ":mod:`django.utils.timezone` provides a helper for converting aware datetimes between time zones. See :func:`~django.utils.timezone.localtime`."
msgstr ""

#: ../../releases/1.5.txt:254
#: ../../releases/1.5-alpha-1.txt:248
#: ../../releases/1.5-beta-1.txt:246
# 796390e737be4199a0fa7d8a3dc12747
# 02d92259836c44558ac5ba3738c4a14a
# 17b26461d4634a65bca4deae23abb0c8
msgid "The generic views support OPTIONS requests."
msgstr ""

#: ../../releases/1.5.txt:256
#: ../../releases/1.5-alpha-1.txt:250
#: ../../releases/1.5-beta-1.txt:248
# 56f50c6e6b7a448b8d3ed65d7a270fee
# 1214a69a20e740229713b259bd869156
# 3e6576d3ad0f4a678447b830faf8ec78
msgid "Management commands do not raise ``SystemExit`` any more when called by code from :ref:`call_command <call-command>`. Any exception raised by the command (mostly :ref:`CommandError <ref-command-exceptions>`) is propagated."
msgstr ""

#: ../../releases/1.5.txt:260
# 88789e83d2fd45c1aff65c4eef95574c
msgid "Moreover, when you output errors or messages in your custom commands, you should now use ``self.stdout.write('message')`` and ``self.stderr.write('error')`` (see the note on :ref:`management commands output <management-commands-output>`)."
msgstr ""

#: ../../releases/1.5.txt:265
#: ../../releases/1.5-alpha-1.txt:254
#: ../../releases/1.5-beta-1.txt:252
# a0faaca9759f41a19553818c6b81c9e7
# beb56d6725c64648bba26c467eb9ab81
# d67d8edd515c482ab69f2804acc60e41
msgid "The dumpdata management command outputs one row at a time, preventing out-of-memory errors when dumping large datasets."
msgstr ""

#: ../../releases/1.5.txt:268
#: ../../releases/1.5-alpha-1.txt:257
#: ../../releases/1.5-beta-1.txt:255
# cec16a4c63b24af0ad56229273b9006a
# 9cd0642fee3042e7ada6bd674219582e
# ee8c0b9e60e843458bd945fb81265f1e
msgid "In the localflavor for Canada, \"pq\" was added to the acceptable codes for Quebec. It's an old abbreviation."
msgstr ""

#: ../../releases/1.5.txt:271
#: ../../releases/1.5-alpha-1.txt:260
#: ../../releases/1.5-beta-1.txt:258
# faf334a3337d446bb83304da92da8783
# 0f141b2f00564d52bd4bcc1a7da1cac5
# 9aad72a47d80471aa432aec72227ba46
msgid "The :ref:`receiver <connecting-receiver-functions>` decorator is now able to connect to more than one signal by supplying a list of signals."
msgstr ""

#: ../../releases/1.5.txt:274
#: ../../releases/1.5-alpha-1.txt:263
#: ../../releases/1.5-beta-1.txt:261
# 353abddfcf734ef181c38fcc43209dd0
# 78ee51955d914b9d9e638b111c9d522b
# 29d823251bf54ac0a2594fbbfd44c4e0
msgid "In the admin, you can now filter users by groups which they are members of."
msgstr ""

#: ../../releases/1.5.txt:276
#: ../../releases/1.5-alpha-1.txt:265
#: ../../releases/1.5-beta-1.txt:263
# 6bedece4c339434d9d58f868c0eb2f4a
# b47dd4a6a5c54369bc2e1f9ef9270dce
# 1e401077130f4a39abb163eb013db98a
msgid ":meth:`QuerySet.bulk_create() <django.db.models.query.QuerySet.bulk_create>` now has a batch_size argument. By default the batch_size is unlimited except for SQLite where single batch is limited so that 999 parameters per query isn't exceeded."
msgstr ""

#: ../../releases/1.5.txt:281
#: ../../releases/1.5-alpha-1.txt:270
#: ../../releases/1.5-beta-1.txt:268
# afdf118a0fe54573a201f41a03097077
# 95d272b29b014cc7b15337d4a688e831
# 81c1383ef97f49c29d794379da144458
msgid "The :setting:`LOGIN_URL` and :setting:`LOGIN_REDIRECT_URL` settings now also accept view function names and :ref:`named URL patterns <naming-url-patterns>`. This allows you to reduce configuration duplication. More information can be found in the :func:`~django.contrib.auth.decorators.login_required` documentation."
msgstr ""

#: ../../releases/1.5.txt:287
#: ../../releases/1.5-alpha-1.txt:276
#: ../../releases/1.5-beta-1.txt:274
# 3260db0d4ade4acda9e146cd73c9d9cc
# 42f29811cc8547ec8e8e5e4d73a9d72e
# 9726d666010c4aba9b013af36758d54b
msgid "Django now provides a mod_wsgi :doc:`auth handler </howto/deployment/wsgi/apache-auth>`."
msgstr ""

#: ../../releases/1.5.txt:290
#: ../../releases/1.5-alpha-1.txt:279
#: ../../releases/1.5-beta-1.txt:277
# d73a38066eb641f7836ca0c553803e83
# 2ee89976498c4230a48ba8371348668e
# 3a0647cd4e734f6aae85e0b3d1712a8d
msgid "The :meth:`QuerySet.delete() <django.db.models.query.QuerySet.delete>` and :meth:`Model.delete() <django.db.models.Model.delete()>` can now take fast-path in some cases. The fast-path allows for less queries and less objects fetched into memory. See :meth:`QuerySet.delete() <django.db.models.query.QuerySet.delete>` for details."
msgstr ""

#: ../../releases/1.5.txt:296
#: ../../releases/1.5-alpha-1.txt:285
#: ../../releases/1.5-beta-1.txt:283
# 619c172707424322bdcab20212fbeb42
# f76846c673f54d6ea076bb6fdb01724a
# 471e3ecd1cbc4e5782e63776607b4ab5
msgid "An instance of :class:`~django.core.urlresolvers.ResolverMatch` is stored on the request as ``resolver_match``."
msgstr ""

#: ../../releases/1.5.txt:299
#: ../../releases/1.5-alpha-1.txt:288
#: ../../releases/1.5-beta-1.txt:286
# 25b58b238c694921aef3760a7c69e2c6
# f8e7784c55d244d98b821004ba4f03b1
# 1179b7073bd247ffaf3118f4c6e53986
msgid "By default, all logging messages reaching the ``django`` logger when :setting:`DEBUG` is ``True`` are sent to the console (unless you redefine the logger in your :setting:`LOGGING` setting)."
msgstr ""

#: ../../releases/1.5.txt:303
#: ../../releases/1.5-alpha-1.txt:292
#: ../../releases/1.5-beta-1.txt:290
# 89f7fa33cbc44ebd99e26dbfcd79bdea
# e6db6ee97c574536a375340bda51540d
# 1b77729b5a594b5fadd798f94dbd5e4a
msgid "When using :class:`~django.template.RequestContext`, it is now possible to look up permissions by using ``{% if 'someapp.someperm' in perms %}`` in templates."
msgstr ""

#: ../../releases/1.5.txt:307
#: ../../releases/1.5-alpha-1.txt:296
#: ../../releases/1.5-beta-1.txt:294
# 003f53f5c4af4dc6a15baa2da5b00fa6
# 08a93467943849678220061c09395cf7
# 8ef4962f5acf4e3cad1f9da383953f7e
msgid "It's not required any more to have ``404.html`` and ``500.html`` templates in the root templates directory. Django will output some basic error messages for both situations when those templates are not found. Of course, it's still recommended as good practice to provide those templates in order to present pretty error pages to the user."
msgstr ""

#: ../../releases/1.5.txt:313
#: ../../releases/1.5-alpha-1.txt:302
#: ../../releases/1.5-beta-1.txt:300
# a2e19275793c4f2e966f3baddb3fd5ea
# 5aab30c9005a448c930f8dd3a254367f
# ebfdd4668e074674a7ac62073ccbe4b3
msgid ":mod:`django.contrib.auth` provides a new signal that is emitted whenever a user fails to login successfully. See :data:`~django.contrib.auth.signals.user_login_failed`"
msgstr ""

#: ../../releases/1.5.txt:317
#: ../../releases/1.5-alpha-1.txt:306
#: ../../releases/1.5-beta-1.txt:304
# c94d6a5bc305487894e63d21834c79a8
# 71418f6cf40841a890259cec311d42df
# f3107712756d4726ac79ccef03ed0d67
msgid "The loaddata management command now supports an :djadminopt:`--ignorenonexistent` option to ignore data for fields that no longer exist."
msgstr ""

#: ../../releases/1.5.txt:321
#: ../../releases/1.5-alpha-1.txt:310
#: ../../releases/1.5-beta-1.txt:308
# cd78aebc75ca4cd2b95a8313806396fd
# ef2ee6996ecd44c2b7811be962461210
# fcb5ee00af6b44bb8cbc86ad3da456c8
msgid ":meth:`~django.test.SimpleTestCase.assertXMLEqual` and :meth:`~django.test.SimpleTestCase.assertXMLNotEqual` new assertions allow you to test equality for XML content at a semantic level, without caring for syntax differences (spaces, attribute order, etc.)."
msgstr ""

#: ../../releases/1.5.txt:326
#: ../../releases/1.5-beta-1.txt:313
# 929bf6dee7fc4e7cbaa786b0e44c270f
# caf34ab392494deb9e7d215d009f8c89
msgid "RemoteUserMiddleware now forces logout when the REMOTE_USER header disappears during the same browser session."
msgstr ""

#: ../../releases/1.5.txt:329
#: ../../releases/1.5-beta-1.txt:316
# 1bedf62664414f808ff99311665ba75d
# 4d36a983998840b59f66f828e1bf5be1
msgid "The :ref:`cache-based session backend <cached-sessions-backend>` can store session data in a non-default cache."
msgstr ""

#: ../../releases/1.5.txt:332
#: ../../releases/1.5-beta-1.txt:319
# ce67ef2626954632a829d41f277e5162
# 53c8a0236a1545e18e9ad3f0ae942b52
msgid "Multi-column indexes can now be created on models. Read the :attr:`~django.db.models.Options.index_together` documentation for more information."
msgstr ""

#: ../../releases/1.5.txt:336
#: ../../releases/1.5-beta-1.txt:323
# 3f05c372fb6e41198618514555e0dbb6
# b11103ef11294176984cf0c94294f28f
msgid "During Django's logging configuration verbose Deprecation warnings are enabled and warnings are captured into the logging system. Logged warnings are routed through the ``console`` logging handler, which by default requires :setting:`DEBUG` to be True for output to be generated. The result is that DeprecationWarnings should be printed to the console in development environments the way they have been in Python versions < 2.7."
msgstr ""

#: ../../releases/1.5.txt:343
#: ../../releases/1.5-beta-1.txt:330
# 27511751cbc8465083de2a6d6da6d47a
# 0684a565b81f4045bb2efaf315785d92
msgid "The API for :meth:`django.contrib.admin.ModelAdmin.message_user` method has been modified to accept additional arguments adding capabilities similar to :func:`django.contrib.messages.add_message`. This is useful for generating error messages from admin actions."
msgstr ""

#: ../../releases/1.5.txt:348
#: ../../releases/1.5-beta-1.txt:335
# c220acf15cfa4ac48f295a18d20af8f9
# a932cd1115534cf9a9b6200b99365aab
msgid "The admin's list filters can now be customized per-request thanks to the new :meth:`django.contrib.admin.ModelAdmin.get_list_filter` method."
msgstr ""

#: ../../releases/1.5.txt:352
#: ../../releases/1.5-alpha-1.txt:316
#: ../../releases/1.5-beta-1.txt:339
# e4858a67a8b34f97b20d97edbcd5e7e9
# 9224e49e381b4da6a5c8c2b8c9a11958
# 4e6f6e0811974ba1bac68bfec5a54f8d
msgid "Backwards incompatible changes in 1.5"
msgstr ""

#: ../../releases/1.5.txt:356
#: ../../releases/1.5-alpha-1.txt:320
#: ../../releases/1.5-beta-1.txt:343
# 330e0aad752b47bea2d30c9a586bb485
# 0b81782ec3d846bd9d7a9cd235e48fac
# 279e2ba6e6004b5c9dfe6b38414138e3
msgid "In addition to the changes outlined in this section, be sure to review the :doc:`deprecation plan </internals/deprecation>` for any features that have been removed. If you haven't updated your code within the deprecation timeline for a given feature, its removal may appear as a backwards incompatible change."
msgstr ""

#: ../../releases/1.5.txt:363
# c18e5d92733749449718626f4b175662
msgid "``ALLOWED_HOSTS`` required in production"
msgstr ""

#: ../../releases/1.5.txt:365
# c89b3bacdcdb4c639cc4a1d13973bbf9
msgid "The new :setting:`ALLOWED_HOSTS` setting validates the request's ``Host`` header and protects against host-poisoning attacks. This setting is now required whenever :setting:`DEBUG` is ``False``, or else :meth:`django.http.HttpRequest.get_host()` will raise :exc:`~django.core.exceptions.SuspiciousOperation`. For more details see the :setting:`full documentation<ALLOWED_HOSTS>` for the new setting."
msgstr ""

#: ../../releases/1.5.txt:373
# 0d2a9dc23fc34836a74d216d4d635713
msgid "Managers on abstract models"
msgstr ""

#: ../../releases/1.5.txt:375
# ff824a4d9aeb4f83a194ffead69c626f
msgid "Abstract models are able to define a custom manager, and that manager :ref:`will be inherited by any concrete models extending the abstract model <custom-managers-and-inheritance>`. However, if you try to use the abstract model to call a method on the manager, an exception will now be raised. Previously, the call would have been permitted, but would have failed as soon as any database operation was attempted (usually with a \"table does not exist\" error from the database)."
msgstr ""

#: ../../releases/1.5.txt:383
# ca15e29c03374edabaad1be88cf2f947
msgid "If you have functionality on a manager that you have been invoking using the abstract class, you should migrate that logic to a Python ``staticmethod`` or ``classmethod`` on the abstract class."
msgstr ""

#: ../../releases/1.5.txt:388
#: ../../releases/1.5-alpha-1.txt:327
#: ../../releases/1.5-beta-1.txt:350
# 1e6e397d4220455bbb1b67d59ba2b2fa
# 45571a6713324bb2899fcb067987102b
# d8aae2c604a54b42bca626ffc97a42f4
msgid "Context in year archive class-based views"
msgstr ""

#: ../../releases/1.5.txt:390
#: ../../releases/1.5-alpha-1.txt:329
#: ../../releases/1.5-beta-1.txt:352
# 27a1d62d29404e738ecf96dcb11aec65
# 0f7bdc49da9b46a99361a829497a5151
# 525f5e99de5a470aa7935fa3a8939ca5
msgid "For consistency with the other date-based generic views, :class:`~django.views.generic.dates.YearArchiveView` now passes ``year`` in the context as a :class:`datetime.date` rather than a string.  If you are using ``{{ year }}`` in your templates, you must replace it with ``{{ year|date:\"Y\" }}``."
msgstr ""

#: ../../releases/1.5.txt:396
#: ../../releases/1.5-alpha-1.txt:335
#: ../../releases/1.5-beta-1.txt:358
# 6def5c5604254cbd88a5a7446e9d9ccb
# 703db09b20ba43e5801bf2baad27f6be
# 86c09e05023b4d3eaeebb564006313f7
msgid "``next_year`` and ``previous_year`` were also added in the context. They are calculated according to ``allow_empty`` and ``allow_future``."
msgstr ""

#: ../../releases/1.5.txt:400
#: ../../releases/1.5-alpha-1.txt:339
#: ../../releases/1.5-beta-1.txt:362
# 9f8acc3a466248e0b46bf2e8ae9a6a5c
# 231493ff6fde438583bf5994c14daea5
# df035c5ea9a44fa899af513002d84ce7
msgid "Context in year and month archive class-based views"
msgstr ""

#: ../../releases/1.5.txt:402
#: ../../releases/1.5-alpha-1.txt:341
#: ../../releases/1.5-beta-1.txt:364
# 8132cd6520be47749597eb441bbdfa19
# 5f30427c55b849218d7e939877dcb118
# 93e5c03ad62944d9a83db0d008f5bbc0
msgid ":class:`~django.views.generic.dates.YearArchiveView` and :class:`~django.views.generic.dates.MonthArchiveView` were documented to provide a ``date_list`` sorted in ascending order in the context, like their function-based predecessors, but it actually was in descending order. In 1.5, the documented order was restored. You may want to add (or remove) the ``reversed`` keyword when you're iterating on ``date_list`` in a template::"
msgstr ""

#: ../../releases/1.5.txt:411
#: ../../releases/1.5-alpha-1.txt:350
#: ../../releases/1.5-beta-1.txt:373
# ff18fdc22f284a568ea6e91cdf2bc3b0
# c9a85837ad9741bc9a121d52ec4a7c02
# 75eab21180c84f7998080b6331fb2a8f
msgid ":class:`~django.views.generic.dates.ArchiveIndexView` still provides a ``date_list`` in descending order."
msgstr ""

#: ../../releases/1.5.txt:415
#: ../../releases/1.5-alpha-1.txt:354
#: ../../releases/1.5-beta-1.txt:377
# 78bee4eda41f42c9813156ba5b6a9483
# c5808f4798e842189d6068e4f91078a1
# 0cd60f4c04504da08fa9bc809c72fcf4
msgid "Context in TemplateView"
msgstr ""

#: ../../releases/1.5.txt:417
#: ../../releases/1.5-alpha-1.txt:356
#: ../../releases/1.5-beta-1.txt:379
# d7ecaafaac3d4274b69bab8b6e7440e1
# 44fa29c437d94275961bc65b7c0680da
# ead70b1ebd29411390fd52c4a720f20f
msgid "For consistency with the design of the other generic views, :class:`~django.views.generic.base.TemplateView` no longer passes a ``params`` dictionary into the context, instead passing the variables from the URLconf directly into the context."
msgstr ""

#: ../../releases/1.5.txt:423
#: ../../releases/1.5-alpha-1.txt:362
#: ../../releases/1.5-beta-1.txt:385
# 2258882d8993451fab26be5fab5d4f0d
# b1ace8f004794d558550279caeb9b6c7
# 8e87ac15df96497f8be9c1472189ecdc
msgid "Non-form data in HTTP requests"
msgstr ""

#: ../../releases/1.5.txt:425
#: ../../releases/1.5-alpha-1.txt:364
#: ../../releases/1.5-beta-1.txt:387
# 329f67a2aabe43af812c375da81713f8
# f5549041b260473b9c81d07f072fb8f6
# b6009601f2be4a97a4b81b224f2f922d
msgid ":attr:`request.POST <django.http.HttpRequest.POST>` will no longer include data posted via HTTP requests with non form-specific content-types in the header. In prior versions, data posted with content-types other than ``multipart/form-data`` or ``application/x-www-form-urlencoded`` would still end up represented in the :attr:`request.POST <django.http.HttpRequest.POST>` attribute. Developers wishing to access the raw POST data for these cases, should use the :attr:`request.body <django.http.HttpRequest.body>` attribute instead."
msgstr ""

#: ../../releases/1.5.txt:435
# 8c39ed965806424484b58aaffbb48f75
msgid ":data:`~django.core.signals.request_finished` signal"
msgstr ""

#: ../../releases/1.5.txt:437
# ae8dccd9ce1b40b68b4acccb3ae915d9
msgid "Django used to send the :data:`~django.core.signals.request_finished` signal as soon as the view function returned a response. This interacted badly with :ref:`streaming responses <httpresponse-streaming>` that delay content generation."
msgstr ""

#: ../../releases/1.5.txt:442
# 9593d24b67bb47b99b2c6ec87a4401f1
msgid "This signal is now sent after the content is fully consumed by the WSGI gateway. This might be backwards incompatible if you rely on the signal being fired before sending the response content to the client. If you do, you should consider using a middleware instead."
msgstr ""

#: ../../releases/1.5.txt:448
#: ../../releases/1.5-alpha-1.txt:374
#: ../../releases/1.5-beta-1.txt:397
# 20785ac32b86496dad7fe56a37f63eed
# 6547f7ef47c945e1b9dbf3835f9b3960
# b47e01ddbe454ba5a68dbee8580d153e
msgid "OPTIONS, PUT and DELETE requests in the test client"
msgstr ""

#: ../../releases/1.5.txt:450
#: ../../releases/1.5-alpha-1.txt:376
#: ../../releases/1.5-beta-1.txt:399
# 724034e945324a8cb9f75588f403bf39
# 0f9baf405f344d71bffafeadc5b42413
# 7ca2728fbe184c03879d284a59d124c3
msgid "Unlike GET and POST, these HTTP methods aren't implemented by web browsers. Rather, they're used in APIs, which transfer data in various formats such as JSON or XML. Since such requests may contain arbitrary data, Django doesn't attempt to decode their body."
msgstr ""

#: ../../releases/1.5.txt:455
#: ../../releases/1.5-alpha-1.txt:381
#: ../../releases/1.5-beta-1.txt:404
# 49c23de1b0a646a487a9b4fba4dff6ac
# 642d1f6eb11643d08ce0f25c8b40ad44
# 87e7ec3e08f343bb9fd82ae9562972dc
msgid "However, the test client used to build a query string for OPTIONS and DELETE requests like for GET, and a request body for PUT requests like for POST. This encoding was arbitrary and inconsistent with Django's behavior when it receives the requests, so it was removed in Django 1.5."
msgstr ""

#: ../../releases/1.5.txt:460
#: ../../releases/1.5-alpha-1.txt:386
#: ../../releases/1.5-beta-1.txt:409
# fcd753ca3d344d4bb0ab0def6444c55a
# 2faba635ce2742e888d5dd058e582403
# 261c102f99dc4524a3291af9b7454c0d
msgid "If you were using the ``data`` parameter in an OPTIONS or a DELETE request, you must convert it to a query string and append it to the ``path`` parameter."
msgstr ""

#: ../../releases/1.5.txt:463
#: ../../releases/1.5-alpha-1.txt:389
#: ../../releases/1.5-beta-1.txt:412
# 010a365e76724d6ba377455929980d7d
# 93772291f81a4561adb728395fe59562
# a0ad4f3c93db4d4782e692eacbf09690
msgid "If you were using the ``data`` parameter in a PUT request without a ``content_type``, you must encode your data before passing it to the test client and set the ``content_type`` argument."
msgstr ""

#: ../../releases/1.5.txt:470
#: ../../releases/1.5-alpha-1.txt:394
#: ../../releases/1.5-beta-1.txt:419
# 992a05a9f8794356821c229b0cce6eae
# a1db0fcf43f04ea7815f954d8117629f
# dc0370d757a644f8b8c94a83e72018a4
msgid "System version of :mod:`simplejson` no longer used"
msgstr ""

#: ../../releases/1.5.txt:472
# 100dd501f1aa476c9a29bea51bbfb147
msgid ":ref:`As explained below <simplejson-deprecation>`, Django 1.5 deprecates ``django.utils.simplejson`` in favor of Python 2.6's built-in :mod:`json` module. In theory, this change is harmless. Unfortunately, because of incompatibilities between versions of :mod:`simplejson`, it may trigger errors in some circumstances."
msgstr ""

#: ../../releases/1.5.txt:478
#: ../../releases/1.5-alpha-1.txt:402
#: ../../releases/1.5-beta-1.txt:427
# 861baa11145a41649878f7d78204f1f1
# e90fda54a47d41fe97eddf8343f877ea
# c50ff0fe398b400c929b7cae05716061
msgid "JSON-related features in Django 1.4 always used ``django.utils.simplejson``. This module was actually:"
msgstr ""

#: ../../releases/1.5.txt:481
#: ../../releases/1.5-alpha-1.txt:405
#: ../../releases/1.5-beta-1.txt:430
# bc6cf21b90a0449e97ee6aea287d4a46
# cc1b3857cbff4c1d8e87182431e80e8c
# f85bb4a39d774273b3264150fc205ec0
msgid "A system version of :mod:`simplejson`, if one was available (ie. ``import simplejson`` works), if it was more recent than Django's built-in copy or it had the C speedups, or"
msgstr ""

#: ../../releases/1.5.txt:484
#: ../../releases/1.5-alpha-1.txt:408
#: ../../releases/1.5-beta-1.txt:433
# 30c4a66cacdf4c0ab55cc7614992ef60
# 06e7407d187b4444b529435983a55184
# 91f15e1be29c4eaab5a35e13cdb2e48c
msgid "The :mod:`json` module from the standard library, if it was available (ie. Python 2.6 or greater), or"
msgstr ""

#: ../../releases/1.5.txt:486
#: ../../releases/1.5-alpha-1.txt:410
#: ../../releases/1.5-beta-1.txt:435
# 7b1b7e8f651a4651b6b002db928ec713
# d8cbcda86a0943108665f711a4e2bc5a
# 7ac858c521d44c44a73eff21074772a0
msgid "A built-in copy of version 2.0.7 of :mod:`simplejson`."
msgstr ""

#: ../../releases/1.5.txt:488
#: ../../releases/1.5-alpha-1.txt:412
#: ../../releases/1.5-beta-1.txt:437
# d3bb88f524d0464ebfe87bd0f81cf6bc
# 1bb0edfb5c0b4af890c45a76c48ec2b7
# a87cda50c35c45e9b7520eeff677f2ee
msgid "In Django 1.5, those features use Python's :mod:`json` module, which is based on version 2.0.9 of :mod:`simplejson`."
msgstr ""

#: ../../releases/1.5.txt:491
#: ../../releases/1.5-alpha-1.txt:415
#: ../../releases/1.5-beta-1.txt:440
# 16765c1d18bb40cdbc3a2694a41bbe5d
# b9c7aa33fdea4147bef6d5e9711b173b
# 28df9abd259049cebe81aa8c336dc99b
msgid "There are no known incompatibilities between Django's copy of version 2.0.7 and Python's copy of version 2.0.9. However, there are some incompatibilities between other versions of :mod:`simplejson`:"
msgstr ""

#: ../../releases/1.5.txt:495
#: ../../releases/1.5-alpha-1.txt:419
#: ../../releases/1.5-beta-1.txt:444
# f156a6327ac144dd82f9620656c699c6
# 5e90c28be31a48c7a1f4007c4a5a5da1
# 6f204b817133419885b87f7c0fb62ce7
msgid "While the :mod:`simplejson` API is documented as always returning unicode strings, the optional C implementation can return a byte string. This was fixed in Python 2.7."
msgstr ""

#: ../../releases/1.5.txt:498
#: ../../releases/1.5-alpha-1.txt:422
#: ../../releases/1.5-beta-1.txt:447
# 71b74c64ea2f4597a0fb1bdece590b30
# 9a13299dcad34b7483cdb30a0312212a
# 315ff6914e104db998045c3f755cd702
msgid ":class:`simplejson.JSONEncoder` gained a ``namedtuple_as_object`` keyword argument in version 2.2."
msgstr ""

#: ../../releases/1.5.txt:501
#: ../../releases/1.5-alpha-1.txt:425
#: ../../releases/1.5-beta-1.txt:450
# 332b6ab18c7f4a42992da33e2006f0be
# 0bddfb6b13d141198e7e2e580dffbe07
# 8bf39d42f75b4feaa52e869aeba8435b
msgid "More information on these incompatibilities is available in `ticket #18023`_."
msgstr ""

#: ../../releases/1.5.txt:503
#: ../../releases/1.5-alpha-1.txt:427
#: ../../releases/1.5-beta-1.txt:452
# 48837e24aa5f4128a3dcf597f762e8db
# 9cba3e2aff4045aa8c25b0247aa4aadb
# bb099000f9b8460d98ffa467f3fb331a
msgid "The net result is that, if you have installed :mod:`simplejson` and your code uses Django's serialization internals directly -- for instance ``django.core.serializers.json.DjangoJSONEncoder``, the switch from :mod:`simplejson` to :mod:`json` could break your code. (In general, changes to internals aren't documented; we're making an exception here.)"
msgstr ""

#: ../../releases/1.5.txt:509
#: ../../releases/1.5-alpha-1.txt:433
#: ../../releases/1.5-beta-1.txt:458
# a35d356c3b504988b57fad72462819e5
# 273da6bd8235401dacfdefbe05a1d374
# 94eff11d53414a26b594e716b4ac936e
msgid "At this point, the maintainers of Django believe that using :mod:`json` from the standard library offers the strongest guarantee of backwards-compatibility. They recommend to use it from now on."
msgstr ""

#: ../../releases/1.5.txt:516
#: ../../releases/1.5-alpha-1.txt:440
#: ../../releases/1.5-beta-1.txt:465
# 9bba77027d284526a0ab162dd6177e31
# 9ea1e582ef0444e3b53e44a958a65794
# f775b464df9a42689a7f183c8bc5f56d
msgid "String types of hasher method parameters"
msgstr ""

#: ../../releases/1.5.txt:518
#: ../../releases/1.5-alpha-1.txt:442
#: ../../releases/1.5-beta-1.txt:467
# c8c01495e46947459ba233d6c6f1dfb0
# 21454257f35a4ea29f40961246e2bac6
# bca8c1eda5a0492d824805a07957ca21
msgid "If you have written a :ref:`custom password hasher <auth_password_storage>`, your ``encode()``, ``verify()`` or ``safe_summary()`` methods should accept Unicode parameters (``password``, ``salt`` or ``encoded``). If any of the hashing methods need byte strings, you can use the :func:`~django.utils.encoding.force_bytes` utility to encode the strings."
msgstr ""

#: ../../releases/1.5.txt:525
#: ../../releases/1.5-alpha-1.txt:449
#: ../../releases/1.5-beta-1.txt:474
# 456d1329cf4345b08d8bf1df6d85d520
# 2b2ad4e5c13b4f4eaaaaaa127105b24c
# 22331ca0cfa04eff91ea4a6ea37deeeb
msgid "Validation of previous_page_number and next_page_number"
msgstr ""

#: ../../releases/1.5.txt:527
#: ../../releases/1.5-alpha-1.txt:451
#: ../../releases/1.5-beta-1.txt:476
# def8504b8e3342a48997ad0539dd2985
# 36573e27db734714b82926b1cb926ff2
# 330829df8fa8456380c710c83d078469
msgid "When using :doc:`object pagination </topics/pagination>`, the ``previous_page_number()`` and ``next_page_number()`` methods of the :class:`~django.core.paginator.Page` object did not check if the returned number was inside the existing page range. It does check it now and raises an :exc:`~django.core.paginator.InvalidPage` exception when the number is either too low or too high."
msgstr ""

#: ../../releases/1.5.txt:535
#: ../../releases/1.5-alpha-1.txt:459
#: ../../releases/1.5-beta-1.txt:484
# 1a132044a8c34178b1e5423088fdec1f
# 2cfb7a64984445608c5456e7112d36fe
# af161752a7554bac97ed33e50ad2543c
msgid "Behavior of autocommit database option on PostgreSQL changed"
msgstr ""

#: ../../releases/1.5.txt:537
#: ../../releases/1.5-alpha-1.txt:461
#: ../../releases/1.5-beta-1.txt:486
# 655210ff94b94c02a4d9e1647766c88f
# 715c64abfe874e0ab24790efcaedd304
# f8e366a080cc45bcbdb9d7c46f7b5a97
msgid "PostgreSQL's autocommit option didn't work as advertised previously. It did work for single transaction block, but after the first block was left the autocommit behavior was never restored. This bug is now fixed in 1.5. While this is only a bug fix, it is worth checking your applications behavior if you are using PostgreSQL together with the autocommit option."
msgstr ""

#: ../../releases/1.5.txt:544
#: ../../releases/1.5-alpha-1.txt:468
#: ../../releases/1.5-beta-1.txt:493
# 3a87d608948a4ae586e6c07a7c4bd8a1
# 4f8563db063346229d0e8dc3af9b4143
# f58faf1ea6cb4bfa8cf1265acbba49c6
msgid "Session not saved on 500 responses"
msgstr ""

#: ../../releases/1.5.txt:546
#: ../../releases/1.5-alpha-1.txt:470
#: ../../releases/1.5-beta-1.txt:495
# a0e97513b3554f1d8267e4474c6b9d5f
# ad7d0c84d45645b2a47a31ac7091fb6d
# 37365b0252a644c4a478abeb57074684
msgid "Django's session middleware will skip saving the session data if the response's status code is 500."
msgstr ""

#: ../../releases/1.5.txt:550
#: ../../releases/1.5-alpha-1.txt:474
#: ../../releases/1.5-beta-1.txt:499
# 8715360e6de24ed782508e8baf45d6ef
# 0434aa3ec2af41639949b361bdc7bd00
# 458f9496ae104782bca76dfe5410027f
msgid "Email checks on failed admin login"
msgstr ""

#: ../../releases/1.5.txt:552
#: ../../releases/1.5-alpha-1.txt:476
#: ../../releases/1.5-beta-1.txt:501
# e205c9754c234245a08ed6f0d4cab88e
# e511e0cdd5754381ad33b3ae88b5e3b9
# 80d8eb826c7245409a8e67329c4c6da6
msgid "Prior to Django 1.5, if you attempted to log into the admin interface and mistakenly used your email address instead of your username, the admin interface would provide a warning advising that your email address was not your username. In Django 1.5, the introduction of :ref:`custom User models <auth-custom-user>` has required the removal of this warning. This doesn't change the login behavior of the admin site; it only affects the warning message that is displayed under one particular mode of login failure."
msgstr ""

#: ../../releases/1.5.txt:562
#: ../../releases/1.5-alpha-1.txt:486
#: ../../releases/1.5-beta-1.txt:511
# 0501aa8540044f9e9f0cd719d1499200
# cae312e752dc4e0ca3b11a12c4889072
# c7daa38a34164c1aade788f6c4e543b8
msgid "Changes in tests execution"
msgstr ""

#: ../../releases/1.5.txt:564
#: ../../releases/1.5-alpha-1.txt:488
#: ../../releases/1.5-beta-1.txt:513
# ee776b28774f4da393a0f82c00a80b77
# e1c2560e6fef41819f356a8bd6721e0b
# 920b4167cbe54887bff58af0eae55233
msgid "Some changes have been introduced in the execution of tests that might be backward-incompatible for some testing setups:"
msgstr ""

#: ../../releases/1.5.txt:568
#: ../../releases/1.5-alpha-1.txt:492
#: ../../releases/1.5-beta-1.txt:517
# d25a680c6bdd48c49ab756d164bc90de
# 8e510dd001dc43749ada07b0b02ec6bc
# f3844724bfd244ba8db2646a6fc7e4ee
msgid "Database flushing in ``django.test.TransactionTestCase``"
msgstr ""

#: ../../releases/1.5.txt:570
#: ../../releases/1.5-alpha-1.txt:494
#: ../../releases/1.5-beta-1.txt:519
# ab7d4ddc006d4614bbc0dfa1b21e5ed4
# 48dc9b6453da4941bd26c7cc6f69640d
# 819786a63a60455094a59962701e0dc3
msgid "Previously, the test database was truncated *before* each test run in a :class:`~django.test.TransactionTestCase`."
msgstr ""

#: ../../releases/1.5.txt:573
#: ../../releases/1.5-alpha-1.txt:497
#: ../../releases/1.5-beta-1.txt:522
# c3a2daf410d3422b8e45d51a4ac6b313
# bf0c03526b0d4eae91a9b7242fe06037
# a40560a403854b358f07c1d03f8d30f9
msgid "In order to be able to run unit tests in any order and to make sure they are always isolated from each other, :class:`~django.test.TransactionTestCase` will now reset the database *after* each test run instead."
msgstr ""

#: ../../releases/1.5.txt:578
#: ../../releases/1.5-alpha-1.txt:502
#: ../../releases/1.5-beta-1.txt:527
# 9dc87bfd2d134b72a7f2c389626a5f8b
# 9809915b3d0f4e489961a51a618c9876
# d4a78726418245e18bb1917462b63a47
msgid "No more implicit DB sequences reset"
msgstr ""

#: ../../releases/1.5.txt:580
#: ../../releases/1.5-alpha-1.txt:504
#: ../../releases/1.5-beta-1.txt:529
# 2b0afe5d2bf340c789e9247f0d48ecd8
# 20877523969e46f8ba489f9ee3b4fc30
# 0c87b6803de8402698c231cf2523b6a1
msgid ":class:`~django.test.TransactionTestCase` tests used to reset primary key sequences automatically together with the database flushing actions described above."
msgstr ""

#: ../../releases/1.5.txt:584
#: ../../releases/1.5-alpha-1.txt:508
#: ../../releases/1.5-beta-1.txt:533
# 880a4dc41903442880ccdc1d57cafec5
# 69aa4a653adb41999d58dae997692ba6
# 407f336a8447480c92c87ecedf6ef2c5
msgid "This has been changed so no sequences are implicitly reset. This can cause :class:`~django.test.TransactionTestCase` tests that depend on hard-coded primary key values to break."
msgstr ""

#: ../../releases/1.5.txt:588
#: ../../releases/1.5-alpha-1.txt:512
#: ../../releases/1.5-beta-1.txt:537
# 2f8046cf201f448988590e46658e8564
# 48036858f1e440f6b097275990242622
# 8dfcebaf7fb94a378bc9021debd0cc01
msgid "The new :attr:`~django.test.TransactionTestCase.reset_sequences` attribute can be used to force the old behavior for :class:`~django.test.TransactionTestCase` that might need it."
msgstr ""

#: ../../releases/1.5.txt:593
#: ../../releases/1.5-alpha-1.txt:517
#: ../../releases/1.5-beta-1.txt:542
# 1013a5c40f814dc3960efe215cdc0415
# b6bf6ffe61c84be98e33fc3255cbc11b
# aaed57bde8014ce0afafdf9b904963d9
msgid "Ordering of tests"
msgstr ""

#: ../../releases/1.5.txt:595
#: ../../releases/1.5-alpha-1.txt:519
#: ../../releases/1.5-beta-1.txt:544
# b4dd63682553478395224fef4b904cdd
# 75159bd8dff04e5990738571278261c4
# 41490be80c9648b7a1620e4a3c2e8f53
msgid "In order to make sure all ``TestCase`` code starts with a clean database, tests are now executed in the following order:"
msgstr ""

#: ../../releases/1.5.txt:598
#: ../../releases/1.5-alpha-1.txt:522
#: ../../releases/1.5-beta-1.txt:547
# f38d208b9f7b48edb2307050fde8ad97
# 3ae325cdc1f54677a1aa38dd0a2422b2
# e96d43b181fa4a05944b190cb25a3043
msgid "First, all unittests (including :class:`unittest.TestCase`, :class:`~django.test.SimpleTestCase`, :class:`~django.test.TestCase` and :class:`~django.test.TransactionTestCase`) are run with no particular ordering guaranteed nor enforced among them."
msgstr ""

#: ../../releases/1.5.txt:603
#: ../../releases/1.5-alpha-1.txt:527
#: ../../releases/1.5-beta-1.txt:552
# eed670c27ed04617804d41f9a40bcd2a
# afdd4a218bda4194a895c2792e51f9ff
# 7904cbbc51ba4c3a9df3faea3cbc6889
msgid "Then any other tests (e.g. doctests) that may alter the database without restoring it to its original state are run."
msgstr ""

#: ../../releases/1.5.txt:606
#: ../../releases/1.5-alpha-1.txt:530
#: ../../releases/1.5-beta-1.txt:555
# 65f5fac2247144bd876ef5ecd6d32c50
# 3d35c8a489e549af972386ec87984533
# 9bfa0a1ca42a431a92bd3dc848782d07
msgid "This should not cause any problems unless you have existing doctests which assume a :class:`~django.test.TransactionTestCase` executed earlier left some database state behind or unit tests that rely on some form of state being preserved after the execution of other tests. Such tests are already very fragile, and must now be changed to be able to run independently."
msgstr ""

#: ../../releases/1.5.txt:613
#: ../../releases/1.5-alpha-1.txt:537
#: ../../releases/1.5-beta-1.txt:562
# 7d3088e5c8044b61a6cd878ff15b0bb3
# e55b2dbefd62419d91d378c5e3407d4b
# cdfd47ea50b541eea6c2ee4a2fdf2110
msgid "`cleaned_data` dictionary kept for invalid forms"
msgstr ""

#: ../../releases/1.5.txt:615
#: ../../releases/1.5-alpha-1.txt:539
#: ../../releases/1.5-beta-1.txt:564
# b8f25e3726e44dc09e19e7351096b0ba
# 91fec07a4706448b9871c78f7e75e4e0
# af6209cae6e94736a91286a8364b0601
msgid "The :attr:`~django.forms.Form.cleaned_data` dictionary is now always present after form validation. When the form doesn't validate, it contains only the fields that passed validation. You should test the success of the validation with the :meth:`~django.forms.Form.is_valid()` method and not with the presence or absence of the :attr:`~django.forms.Form.cleaned_data` attribute on the form."
msgstr ""

#: ../../releases/1.5.txt:623
#: ../../releases/1.5-beta-1.txt:572
# e1b02f16d738426885004a4cda2fdf6f
# e37aba60ea07400d850e08100a4d3365
msgid "Behavior of :djadmin:`syncdb` with multiple databases"
msgstr ""

#: ../../releases/1.5.txt:625
#: ../../releases/1.5-beta-1.txt:574
# 3a63f9c2211c42d5af915543798568d4
# 397f31f6132541c3af94f9641af4067e
msgid ":djadmin:`syncdb` now queries the database routers to determine if content types (when :mod:`~django.contrib.contenttypes` is enabled) and permissions (when :mod:`~django.contrib.auth` is enabled) should be created in the target database. Previously, it created them in the default database, even when another database was specified with the :djadminopt:`--database` option."
msgstr ""

#: ../../releases/1.5.txt:631
#: ../../releases/1.5-beta-1.txt:580
# a12c6e4e2d1344c79cb1c8a3b7e77b55
# f8fe8c6dbaf842e78f789652ad72cc91
msgid "If you use :djadmin:`syncdb` on multiple databases, you should ensure that your routers allow synchronizing content types and permissions to only one of them. See the docs on the :ref:`behavior of contrib apps with multiple databases <contrib_app_multiple_databases>` for more information."
msgstr ""

#: ../../releases/1.5.txt:637
# 129e82b047e94f58b20343b49d345b74
msgid "XML deserializer will not parse documents with a DTD"
msgstr ""

#: ../../releases/1.5.txt:639
# 89422b80d6e440598ebafcdf91be2f98
msgid "In order to prevent exposure to attacks related to external entity references and entity expansion, the XML model deserializer now refuses to parse XML documents containing a DTD (DOCTYPE definition). Since the XML serializer does not output a DTD, this will not impact typical usage, only cases where custom-created XML documents are passed to Django's model deserializer."
msgstr ""

#: ../../releases/1.5.txt:646
# ff7f7a7b4aba42d88e9fb835e997b849
msgid "Formsets default ``max_num``"
msgstr ""

#: ../../releases/1.5.txt:648
# 3514b9c775b04901b0323aa106005e8e
msgid "A (default) value of ``None`` for the ``max_num`` argument to a formset factory no longer defaults to allowing any number of forms in the formset. Instead, in order to prevent memory-exhaustion attacks, it now defaults to a limit of 1000 forms. This limit can be raised by explicitly setting a higher value for ``max_num``."
msgstr ""

#: ../../releases/1.5.txt:655
#: ../../releases/1.5-alpha-1.txt:547
#: ../../releases/1.5-beta-1.txt:586
# 2e9426bcfcc44d0baba4bd4458d3da8e
# 79657c984ea040628f895a91042e43c5
# a8ee150bc0e946abbb1e1e7cb84139f9
msgid "Miscellaneous"
msgstr ""

#: ../../releases/1.5.txt:657
#: ../../releases/1.5-alpha-1.txt:549
#: ../../releases/1.5-beta-1.txt:588
# 79c350f80e2a4e41bdb7c5304b184e3c
# 1b526eaa7f28444ca56d5d587eee1f4e
# 89e2e5e32f234ec8b6cca32cf3682047
msgid ":class:`django.forms.ModelMultipleChoiceField` now returns an empty ``QuerySet`` as the empty value instead of an empty list."
msgstr ""

#: ../../releases/1.5.txt:660
#: ../../releases/1.5-alpha-1.txt:552
#: ../../releases/1.5-beta-1.txt:591
# 4bcee3c777b44f8b9f54f87a547fef6a
# b7196b2e0e4a42029b8db1d599a6f127
# 7aa3ebe1fa1848b3b540300b7f46ec9a
msgid ":func:`~django.utils.http.int_to_base36` properly raises a :exc:`~exceptions.TypeError` instead of :exc:`~exceptions.ValueError` for non-integer inputs."
msgstr ""

#: ../../releases/1.5.txt:664
#: ../../releases/1.5-alpha-1.txt:556
#: ../../releases/1.5-beta-1.txt:595
# 11cf3fa19d0e45779f5ef24fc41ce625
# 4a4ef8fe7f754a418028ea3e67a1c310
# c8fc7418be50472c967d8afd50d4b81f
msgid "The ``slugify`` template filter is now available as a standard python function at :func:`django.utils.text.slugify`. Similarly, ``remove_tags`` is available at :func:`django.utils.html.remove_tags`."
msgstr ""

#: ../../releases/1.5.txt:668
#: ../../releases/1.5-alpha-1.txt:560
#: ../../releases/1.5-beta-1.txt:599
# 47aa18cceb604e1aae11fee91de3daa4
# 16c44e7f92c04603a751dc89d00dcf67
# fc729901a60e42ce8f4ed104c86787dd
msgid "Uploaded files are no longer created as executable by default. If you need them to be executable change :setting:`FILE_UPLOAD_PERMISSIONS` to your needs. The new default value is ``0666`` (octal) and the current umask value is first masked out."
msgstr ""

#: ../../releases/1.5.txt:673
#: ../../releases/1.5-alpha-1.txt:565
#: ../../releases/1.5-beta-1.txt:604
# 27127e0faa3244e88892df166e803523
# df3a339781d84778a18b0416af083c88
# 666f7161ec6b4d3aab5059c06cba19c4
msgid "The :ref:`F() expressions <query-expressions>` supported bitwise operators by ``&`` and ``|``. These operators are now available using ``.bitand()`` and ``.bitor()`` instead. The removal of ``&`` and ``|`` was done to be consistent with :ref:`Q() expressions <complex-lookups-with-q>` and ``QuerySet`` combining where the operators are used as boolean AND and OR operators."
msgstr ""

#: ../../releases/1.5.txt:679
#: ../../releases/1.5-beta-1.txt:610
# 0631f82eb0964b68944ac49b70a0d89d
# c97902c38e16431a8338773a4f8218dd
msgid "In a ``filter()`` call, when :ref:`F() expressions <query-expressions>` contained lookups spanning multi-valued relations, they didn't always reuse the same relations as other lookups along the same chain. This was changed, and now F() expressions will always use the same relations as other lookups within the same ``filter()`` call."
msgstr ""

#: ../../releases/1.5.txt:685
#: ../../releases/1.5-alpha-1.txt:571
#: ../../releases/1.5-beta-1.txt:616
# f12e40488d374d29bd588927b44b3e1b
# 0c834f78c706434192bf72b9c8757372
# 2b1334bd67434d4b8dcf7b96904889c7
msgid "The :ttag:`csrf_token` template tag is no longer enclosed in a div. If you need HTML validation against pre-HTML5 Strict DTDs, you should add a div around it in your pages."
msgstr ""

#: ../../releases/1.5.txt:689
#: ../../releases/1.5-beta-1.txt:620
# b8c1e474964742b3a477cdb0a76f9b05
# 1a81ec7994ad438b94630f3d770c5de9
msgid "The template tags library ``adminmedia``, which only contained the deprecated template tag ``{% admin_media_prefix %}``, was removed. Attempting to load it with ``{% load adminmedia %}`` will fail. If your templates still contain that line you must remove it."
msgstr ""

#: ../../releases/1.5.txt:694
# e38a0c17d2aa45c797c59a982cd78fbe
msgid "Because of an implementation oversight, it was possible to use :doc:`django.contrib.redirects </ref/contrib/redirects>` without enabling :doc:`django.contrib.sites </ref/contrib/sites>`. This isn't allowed any longer. If you're using ``django.contrib.redirects``, make sure :setting:`INSTALLED_APPS` contains ``django.contrib.sites``."
msgstr ""

#: ../../releases/1.5.txt:701
#: ../../releases/1.5-alpha-1.txt:576
#: ../../releases/1.5-beta-1.txt:626
# e156221c2fd9485ab5c379cbc4dd32d2
# 8e2b8475065442b6a2ceed4367ed143a
# 25e37c5d157c46dd81e9239483b5713c
msgid "Features deprecated in 1.5"
msgstr ""

#: ../../releases/1.5.txt:704
# 870b04ec12ef4853bf92e88a2dd85380
msgid "``django.contrib.localflavor``"
msgstr ""

#: ../../releases/1.5.txt:706
# edb63b04d7e4482f9100b2ebf5c90ead
msgid "The localflavor contrib app has been split into separate packages. ``django.contrib.localflavor`` itself will be removed in Django 1.6, after an :ref:`accelerated deprecation <localflavor-deprecation-policy>`. The docs provide :ref:`migration instructions <localflavor-how-to-migrate>`."
msgstr ""

#: ../../releases/1.5.txt:711
# 8b4c58bb7dd54a4584938214d2233472
msgid "The new packages are available :ref:`on Github <localflavor-packages>`. The core team cannot efficiently maintain these packages in the long term — it spans just a dozen countries at this time; similar to translations, maintenance will be handed over to interested members of the community."
msgstr ""

#: ../../releases/1.5.txt:717
# f9b11b97833b463fba4feb108fccf72b
msgid "``django.contrib.markup``"
msgstr ""

#: ../../releases/1.5.txt:719
#: ../../releases/1.5-alpha-1.txt:631
#: ../../releases/1.5-beta-1.txt:684
# fabb98d998b246f2bf06250036ce3fa7
# 3c8e03bae65e4cdcb393c794662ddf8e
# e544f79c8ac846c3822d33b2ad050efe
msgid "The markup contrib module has been deprecated and will follow an accelerated deprecation schedule. Direct use of python markup libraries or 3rd party tag libraries is preferred to Django maintaining this functionality in the framework."
msgstr ""

#: ../../releases/1.5.txt:725
#: ../../releases/1.5-alpha-1.txt:579
#: ../../releases/1.5-beta-1.txt:631
# 981143a4268a40cfa86c01f82c513d5f
# 7fe52c46956c4a0bb316f555af3ec3d0
# 3d937266b4f9478aa2617f48dfbb3c95
msgid ":setting:`AUTH_PROFILE_MODULE`"
msgstr ""

#: ../../releases/1.5.txt:727
#: ../../releases/1.5-alpha-1.txt:581
#: ../../releases/1.5-beta-1.txt:633
# 9e194072248b4a1e821f4c89c0874824
# 4129bc7945cb482499db74f5664cd3d2
# f85e711ad3d347309795543d50d384fd
msgid "With the introduction of :ref:`custom User models <auth-custom-user>`, there is no longer any need for a built-in mechanism to store user profile data."
msgstr ""

#: ../../releases/1.5.txt:730
#: ../../releases/1.5-alpha-1.txt:584
#: ../../releases/1.5-beta-1.txt:636
# 84e57580eec14b8f9ff2285d79925453
# c8dea3e0b89f47f49f6b0d59ef86b2e2
# b7e84b42e9a546eeb712c5bd7be0c14d
msgid "You can still define user profiles models that have a one-to-one relation with the User model - in fact, for many applications needing to associate data with a User account, this will be an appropriate design pattern to follow. However, the :setting:`AUTH_PROFILE_MODULE` setting, and the :meth:`~django.contrib.auth.models.User.get_profile()` method for accessing the user profile model, should not be used any longer."
msgstr ""

#: ../../releases/1.5.txt:738
#: ../../releases/1.5-alpha-1.txt:592
#: ../../releases/1.5-beta-1.txt:644
# c6c98af28db742acbc365c8f4d705f59
# a9dcc584fc0e42c89f10605c813818df
# c2854dfcf5af4129ab0ec8df86f78c8f
msgid "Streaming behavior of :class:`~django.http.HttpResponse`"
msgstr ""

#: ../../releases/1.5.txt:740
# 9c494a4590884cba80a14e16750e53c2
msgid "Django 1.5 deprecates the ability to stream a response by passing an iterator to :class:`~django.http.HttpResponse`. If you rely on this behavior, switch to :class:`~django.http.StreamingHttpResponse`. See :ref:`explicit-streaming-responses` above."
msgstr ""

#: ../../releases/1.5.txt:745
#: ../../releases/1.5-alpha-1.txt:598
#: ../../releases/1.5-beta-1.txt:651
# 29eac6a27bfb49d4847dc7cf052ee632
# b3876b5f9c8449539e7048f6c91dbf43
# cb7225586d6e484b964bc649d19c9b4c
msgid "In Django 1.7 and above, the iterator will be consumed immediately by :class:`~django.http.HttpResponse`."
msgstr ""

#: ../../releases/1.5.txt:751
#: ../../releases/1.5-alpha-1.txt:602
#: ../../releases/1.5-beta-1.txt:655
# 51ec7abf5269456aa71e1a7472bb348e
# 82b34e3b4cba41a3ad96bd46254a5087
# 5cb3db842be84a2ba6e31347215881c9
msgid "``django.utils.simplejson``"
msgstr ""

#: ../../releases/1.5.txt:753
#: ../../releases/1.5-alpha-1.txt:604
#: ../../releases/1.5-beta-1.txt:657
# e34102dd85654e02beae1be4e0eae576
# 53a824c6e70940498407e81e9e52a002
# bcd79e7099394099b01309db049ae634
msgid "Since Django 1.5 drops support for Python 2.5, we can now rely on the :mod:`json` module being available in Python's standard library, so we've removed our own copy of :mod:`simplejson`. You should now import :mod:`json` instead of ``django.utils.simplejson``."
msgstr ""

#: ../../releases/1.5.txt:758
# f4f707320df64d0db262028c5312b915
msgid "Unfortunately, this change might have unwanted side-effects, because of incompatibilities between versions of :mod:`simplejson` -- see the :ref:`backwards-incompatible changes <simplejson-incompatibilities>` section. If you rely on features added to :mod:`simplejson` after it became Python's :mod:`json`, you should import :mod:`simplejson` explicitly."
msgstr ""

#: ../../releases/1.5.txt:765
#: ../../releases/1.5-alpha-1.txt:616
#: ../../releases/1.5-beta-1.txt:669
# 3747815ea1014a618a0aef9ca0f8f555
# e24a64874a1d4b449d1b16bd46ed9036
# 6f64bcb5e6e9414aab524c5cb781f0ef
msgid "``django.utils.encoding.StrAndUnicode``"
msgstr ""

#: ../../releases/1.5.txt:767
#: ../../releases/1.5-alpha-1.txt:618
#: ../../releases/1.5-beta-1.txt:671
# 05ae0f2fc2984b449f615c0f631ec9c1
# 7253e9a715bb4cbabaf7370ca9d666aa
# 78e192388b224e679d748f005e1e9167
msgid "The :class:`~django.utils.encoding.StrAndUnicode` mix-in has been deprecated. Define a ``__str__`` method and apply the :func:`~django.utils.encoding.python_2_unicode_compatible` decorator instead."
msgstr ""

#: ../../releases/1.5.txt:772
#: ../../releases/1.5-alpha-1.txt:623
#: ../../releases/1.5-beta-1.txt:676
# 84f647f3532d4b70bd53bc39e03ea92a
# c1b30300ba9b470e8f8f87b723e0e13d
# c727ffbe57d140a9ba92bf9867ba0dcc
msgid "``django.utils.itercompat.product``"
msgstr ""

#: ../../releases/1.5.txt:774
#: ../../releases/1.5-alpha-1.txt:625
#: ../../releases/1.5-beta-1.txt:678
# ee9fb926f9044fe89a8e06dde78bcfda
# fb1939ecbdf94e2d88e8ef750d34c044
# b41ef39008b84e94a91a016a930f29f3
msgid "The ``django.utils.itercompat.product`` function has been deprecated. Use the built-in :func:`itertools.product` instead."
msgstr ""

#: ../../releases/1.5.txt:778
#: ../../releases/1.5-beta-1.txt:690
# 18cb6fc8b8624a04830a830c1cf1d935
# efd4702423c74630aff06d4bb94a863d
msgid "``cleanup`` management command"
msgstr ""

#: ../../releases/1.5.txt:780
#: ../../releases/1.5-beta-1.txt:692
# 696bfc2844264c24af05af51e3106bdc
# 56779231aaa64e3f9f8bde02fb2ebaca
msgid "The :djadmin:`cleanup` management command has been deprecated and replaced by :djadmin:`clearsessions`."
msgstr ""

#: ../../releases/1.5.txt:784
#: ../../releases/1.5-beta-1.txt:696
# ee8e188095f349c0bb10886433fd0346
# c45e0665612d4c84acc91906c7682d8b
msgid "``daily_cleanup.py`` script"
msgstr ""

#: ../../releases/1.5.txt:786
#: ../../releases/1.5-beta-1.txt:698
# 0f9944c21ff44fc1acb24fb94bff025e
# 5558f1c242654a15b64eb1370a900092
msgid "The undocumented ``daily_cleanup.py`` script has been deprecated. Use the :djadmin:`clearsessions` management command instead."
msgstr ""

#: ../../releases/1.5.txt:790
#: ../../releases/1.5-beta-1.txt:702
# db2f5b8b7d944d0481faf8f2da29e062
# abdab1b8b58046858d2a17a02b47ba53
msgid "``depth`` keyword argument in ``select_related``"
msgstr ""

#: ../../releases/1.5.txt:792
#: ../../releases/1.5-beta-1.txt:704
# c095ad3662fb4e57a36276d3bd1e9441
# 235eed2cba8b4cbc8ea2008c4dd49576
msgid "The ``depth`` keyword argument in :meth:`~django.db.models.query.QuerySet.select_related` has been deprecated. You should use field names instead."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:3
# 89a56d117add45f895fc78cc128988b4
msgid "Django 1.5 alpha release notes"
msgstr ""

#: ../../releases/1.5-alpha-1.txt:5
# 736de2441ccb457ea6105755d2147bc0
msgid "October 25, 2012."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:7
# f4ccbc418a9442d58eee642ea6b6c9f0
msgid "Welcome to Django 1.5 alpha!"
msgstr ""

#: ../../releases/1.5-alpha-1.txt:9
# 24b471f1e55141698f6e8cd5d9c5c967
msgid "This is the first in a series of preview/development releases leading up to the eventual release of Django 1.5, scheduled for December 2012. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.5 release."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:18
# d44a2b77a55244d782b9754a22867f9f
msgid "In particular, we need the community's help to test Django 1.5's new `Python 3 support`_ -- not just to report bugs on Python 3, but also regressions on Python 2. While Django is very conservative with regards to backwards compatibility, mistakes are always possible, and it's likely that the Python 3 refactoring work introduced some regressions."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:24
# 8542957149594f36902c6e6c01153cad
msgid "Django 1.5 alpha includes various `new features`_ and some minor `backwards incompatible changes`_. There are also some features that have been dropped, which are detailed in :doc:`our deprecation plan </internals/deprecation>`, and we've `begun the deprecation process for some features`_."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:64
# 0ceb4df9812d4b44808195b38c4a7459
msgid "Wherever possible we try to introduce new features in a backwards-compatible manner per :doc:`our API stability policy </misc/api-stability>` policy. However, as with previous releases, Django 1.5 ships with some minor `backwards incompatible changes`_; people upgrading from previous versions of Django should read that list carefully."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:85
# 236f9eaed89a4b48bc604825706b5471
msgid "Django 1.5 requires Python 2.6.5 or above, though we **highly recommended** Python 2.7.3 or above. Support for Python 2.5 and below has been dropped."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:103
# 86b5f34cf7954facafad36f2782ad8fd
msgid "Django 1.5 introduces support for Python 3 - specifically, Python 3.2 and above. This comes in the form of a **single** codebase; you don't need to install a different version of Django on Python 3. This means that you can write application targeted for just Python 2, just Python 3, or single applications that support both platforms."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:109
#: ../../releases/1.5-beta-1.txt:105
# 787ef76cdacf41cda931745b911a09ab
# 07136432e4ad4b3bba7f908e966cc8b0
msgid "However, we're labeling this support \"experimental\" for now: although it's received extensive testing via our automated test suite, it's received very little real-world testing. We've done our best to eliminate bugs, but we can't be sure we covered all possible uses of Django. Further, Django's more than a web framework; it's an ecosystem of pluggable components. At this point, very few third-party applications have been ported to Python 3, so it's unlikely that a real-world application will have all its dependencies satisfied under Python 3."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:132
# cfbe75f38c174007bfbebb88a8f39f59
msgid "In Django 1.5, you can now use your own model as the store for user-related data. If your project needs a username with more than 30 characters, or if you want to store usernames in a format other than first name/last name, or you want to put custom profile information onto your User object, you can now do so."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:154
#: ../../releases/1.5-beta-1.txt:150
# d3878026fd9b4d37afa9233a5566d418
# f28d6d4c0d8a4faaab272a2d8d9012ad
msgid "Deferred instances (those loaded by .only() or .defer()) will automatically save just the loaded fields. If any field is set manually after load, that field will also get updated on save."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:396
# ed0a16a0973f478ba69e621bd2c6d29e
msgid "As explained below, Django 1.5 deprecates ``django.utils.simplejson`` in favor of Python 2.6's built-in :mod:`json` module. In theory, this change is harmless. Unfortunately, because of incompatibilities between versions of :mod:`simplejson`, it may trigger errors in some circumstances."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:594
# 9a53bbe5800d4cadb9d3c0f71c97f38d
msgid "Django 1.5 deprecates the ability to stream a response by passing an iterator to :class:`~django.http.HttpResponse`. If you rely on this behavior, switch to :class:`~django.http.StreamingHttpResponse`. See above for more details."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:609
# 2f9ed28920b24e3ca42f24236d147e61
msgid "Unfortunately, this change might have unwanted side-effects, because of incompatibilities between versions of :mod:`simplejson` -- see the backwards- incompatible changes section. If you rely on features added to :mod:`simplejson` after it became Python's :mod:`json`, you should import :mod:`simplejson` explicitly."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:629
#: ../../releases/1.5-beta-1.txt:682
# 316893ecfb9c4e4ca26256b6d14de2c5
# bbf34870c3964876a244e0d187ebb21b
msgid "``django.utils.markup``"
msgstr ""

#: ../../releases/1.5-beta-1.txt:3
# 1d3fc892c8894769ab253d3d42bf4a6a
msgid "Django 1.5 beta release notes"
msgstr ""

#: ../../releases/1.5-beta-1.txt:5
# 39172c5c1a374622b84566033c9bbd96
msgid "November 27, 2012."
msgstr ""

#: ../../releases/1.5-beta-1.txt:7
# e6a56cc0e92140d1a65c3886d9bfcfc0
msgid "Welcome to Django 1.5 beta!"
msgstr ""

#: ../../releases/1.5-beta-1.txt:9
# 8e75a89a89eb4a31a52bb45d18deb7d8
msgid "This is the second in a series of preview/development releases leading up to the eventual release of Django 1.5, scheduled for Decemeber 2012. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.5 release."
msgstr ""

#: ../../releases/1.5-beta-1.txt:53
# ad2dbb55f91c48cc9469dc7d15995521
msgid "Better `support for streaming responses <#explicit-streaming-responses-beta-1>`_ via the new  :class:`~django.http.StreamingHttpResponse` response class."
msgstr ""

#: ../../releases/1.5-beta-1.txt:421
# 23846cb1386a46158850acef390a4490
msgid ":ref:`As explained below <simplejson-deprecation-beta-1>`, Django 1.5 deprecates ``django.utils.simplejson`` in favor of Python 2.6's built-in :mod:`json` module. In theory, this change is harmless. Unfortunately, because of incompatibilities between versions of :mod:`simplejson`, it may trigger errors in some circumstances."
msgstr ""

#: ../../releases/1.5-beta-1.txt:646
# c84f7e43bf2c47caa72c6d2c4b94f386
msgid "Django 1.5 deprecates the ability to stream a response by passing an iterator to :class:`~django.http.HttpResponse`. If you rely on this behavior, switch to :class:`~django.http.StreamingHttpResponse`. See :ref:`explicit-streaming-responses-beta-1` above."
msgstr ""

#: ../../releases/1.5-beta-1.txt:662
# 050e458de4c748b3a98b8277343768da
msgid "Unfortunately, this change might have unwanted side-effects, because of incompatibilities between versions of :mod:`simplejson` -- see the :ref:`backwards-incompatible changes <simplejson-incompatibilities-beta-1>` section. If you rely on features added to :mod:`simplejson` after it became Python's :mod:`json`, you should import :mod:`simplejson` explicitly."
msgstr ""

#: ../../releases/1.5.1.txt:3
# a148401d52384b0982b45b93ecf2293b
msgid "Django 1.5.1 release notes"
msgstr ""

#: ../../releases/1.5.1.txt:5
# 7ce763ec212f4debae57e7da4ca25ef6
msgid "*March 28, 2013*"
msgstr ""

#: ../../releases/1.5.1.txt:7
# 0626e40d3ba347679549c82ab1cdc732
msgid "This is Django 1.5.1, a bugfix release for Django 1.5. It's completely backwards compatible with Django 1.5, but includes a handful of fixes."
msgstr ""

#: ../../releases/1.5.1.txt:10
# b836304de2aa4baf90205edc63a84f6f
msgid "The biggest fix is for a memory leak introduced in Django 1.5. Under certain circumstances, repeated iteration over querysets could leak memory - sometimes quite a bit of it. If you'd like more information, the details are in `our ticket tracker`__ (and in `a related issue`__ in Python itself)."
msgstr ""

#: ../../releases/1.5.1.txt:18
# f0695f5964ec4a82b99539c1249e25db
msgid "If you've noticed memory problems under Django 1.5, upgrading to 1.5.1 should fix those issues."
msgstr ""

#: ../../releases/1.5.1.txt:21
# f24a74af942b46c285dd30038155dee1
msgid "Django 1.5.1 also includes a couple smaller fixes:"
msgstr ""

#: ../../releases/1.5.1.txt:23
# 12cd2ca102664de5a39e7cce5920ab81
msgid "Module-level warnings emitted during tests are no longer silently hidden (`#18985`__)."
msgstr ""

#: ../../releases/1.5.1.txt:25
# e8347f1ea2524decb20ee0830fdf8ce5
msgid "Prevented filtering on password hashes in the user admin (`#20078`__)."
msgstr ""

#: ../../releases/index.txt:3
# 45e0a3c9fcf244b5af40da0181b9b9ef
msgid "Release notes"
msgstr ""

#: ../../releases/index.txt:5
# 4ccd49f14a584a68b691402659382168
msgid "Release notes for the official Django releases. Each release note will tell you what's new in each version, and will also describe any backwards-incompatible changes made in that version."
msgstr ""

#: ../../releases/index.txt:9
# 8106a5d65c3549f1849b2037e02c5922
msgid "For those upgrading to a new version of Django, you will need to check all the backwards-incompatible changes and deprecated features for each 'final' release from the one after your current Django version, up to and including the new version."
msgstr ""

#: ../../releases/index.txt:15
# 344f302aba3b45848890d7a2cd511ef1
msgid "Final releases"
msgstr ""

#: ../../releases/index.txt:20
# a54cdf7f33f6446ba4857ed2853b348c
msgid "1.5 release"
msgstr ""

#: ../../releases/index.txt:28
# a22cf6c5867840639165a9ddea378742
msgid "1.4 release"
msgstr ""

#: ../../releases/index.txt:37
# 7150e529250f46d58feb21d87c597312
msgid "1.3 release"
msgstr ""

#: ../../releases/index.txt:46
# 9603fdf9f9824413b777812f5a140b1a
msgid "1.2 release"
msgstr ""

#: ../../releases/index.txt:60
# 9968329be2fc4c8ab2dee2d590cb9b83
msgid "1.1 release"
msgstr ""

#: ../../releases/index.txt:70
# d8cf7c5e807e4a0c90e71308bc8caa85
msgid "1.0 release"
msgstr ""

#: ../../releases/index.txt:79
# 9e1533c29b154d8db00a82388abe9068
msgid "Pre-1.0 releases"
msgstr ""

#: ../../releases/index.txt:87
# 06af35c093a2489d8dc075cbd29872e2
msgid "Development releases"
msgstr ""

#: ../../releases/index.txt:89
# 65797841e79346deb409a04fa6c9be13
msgid "These notes are retained for historical purposes. If you are upgrading between formal Django releases, you don't need to worry about these notes."
msgstr ""

